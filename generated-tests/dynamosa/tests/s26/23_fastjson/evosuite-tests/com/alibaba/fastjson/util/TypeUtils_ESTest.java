/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 14:48:59 GMT 2019
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONField;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.EnumDeserializer;
import com.alibaba.fastjson.parser.deserializer.JSONPDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec;
import com.alibaba.fastjson.parser.deserializer.ObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.OptionalCodec;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.PageAttributes;
import java.awt.RenderingHints;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.DataTruncation;
import java.sql.Date;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLRecoverableException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.ChoiceFormat;
import java.text.Collator;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.text.RuleBasedCollator;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.util.Calendar;
import java.util.Collection;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.SimpleTimeZone;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.UUID;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;
import sun.awt.SunHints;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("Z{2^P:JwH9@");
      assertEquals((-4277221864322658961L), long0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("or0A|7");
      assertEquals(3781312993771475586L, long0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      ObjectDeserializer objectDeserializer0 = parserConfig0.createJavaBeanDeserializer(class0, class0);
      assertEquals(12, objectDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      assertEquals(12, throwableDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("nd,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : nd,
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("9GMHm!#u [nh\"G ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : 9GMHm!#u [nh\"G 
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<?> class0 = TypeUtils.loadClass("[float", classLoader0);
      assertFalse(class0.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("java.awt.Color");
      assertFalse(class0.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<Calendar> class0 = Calendar.class;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      assertEquals(1025, class1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      assertEquals("interface java.lang.annotation.Annotation", class1.toString());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<StackTraceElement> class0 = StackTraceElement.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, (Map<String, String>) null, true);
      assertEquals(5, list0.size());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      AtomicInteger atomicInteger0 = new AtomicInteger(57);
      atomicInteger0.getAndSet((-365));
      Short short0 = TypeUtils.castToShort(atomicInteger0);
      assertEquals((short) (-365), (short)short0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      AtomicInteger atomicInteger0 = new AtomicInteger(1326);
      Long long0 = TypeUtils.castToLong(atomicInteger0);
      assertEquals(1326L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ConcurrentHashMap<Dimension, SQLTransactionRollbackException> concurrentHashMap0 = new ConcurrentHashMap<Dimension, SQLTransactionRollbackException>();
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = TypeUtils.castToJavaBean((Object) concurrentHashMap0, class0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Long long0 = new Long((-2790L));
      Integer integer0 = TypeUtils.castToInt(long0);
      assertEquals((-2790), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<PropertyProcessableDeserializer> class0 = PropertyProcessableDeserializer.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(class0, jSONType0);
      ParserConfig parserConfig0 = ParserConfig.global;
      Type[] typeArray0 = new Type[3];
      typeArray0[2] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], typeArray0[2]);
      ImageCapabilities imageCapabilities0 = TypeUtils.cast((Object) null, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
      assertNull(imageCapabilities0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ConcurrentHashMap<SQLIntegrityConstraintViolationException, SQLTransientConnectionException> concurrentHashMap0 = new ConcurrentHashMap<SQLIntegrityConstraintViolationException, SQLTransientConnectionException>();
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = TypeUtils.cast((Object) concurrentHashMap0, class0, (ParserConfig) null);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Type type0 = TypeUtils.unwrapOptional((Type) null);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("KZ+:'7K_", (ClassLoader) null);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MockThread mockThread0 = new MockThread("e");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      Class<?> class0 = TypeUtils.loadClass("", classLoader0);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass((String) null);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("");
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      boolean boolean0 = TypeUtils.isTransient((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<JavaObjectDeserializer> class0 = JavaObjectDeserializer.class;
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      boolean boolean0 = TypeUtils.isKotlin((Class) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      boolean boolean0 = TypeUtils.isKotlin(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<Long> class0 = Long.class;
      boolean boolean0 = TypeUtils.isKotlin(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Insets insets0 = new Insets(16, 16384, 16384, (-851));
      boolean boolean0 = TypeUtils.isHibernateInitialized(insets0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = TypeUtils.isGenericParamType((Type) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      JSONField jSONField0 = TypeUtils.getSuperMethodAnnotation(class0, (Method) null);
      assertNull(jSONField0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getKoltinConstructor((Constructor[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<Collator> class0 = Collator.class;
      Field[] fieldArray0 = new Field[0];
      Field field0 = TypeUtils.getField(class0, "s:)q!iK(zF[oy", fieldArray0);
      assertNull(field0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      Field[] fieldArray0 = new Field[2];
      // Undeclared exception!
      try { 
        TypeUtils.getField(class0, (String) null, fieldArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Field[] fieldArray0 = new Field[9];
      Class<TimeUnit> class0 = TimeUnit.class;
      // Undeclared exception!
      try { 
        TypeUtils.getField(class0, "", fieldArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("[I");
      // Undeclared exception!
      try { 
        TypeUtils.getField(class0, "U#)!*9X|}5$@#P", (Field[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<?> class0 = TypeUtils.getCollectionItemClass((Type) null);
      assertFalse(class0.isEnum());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<?> class0 = TypeUtils.getClassFromMapping("g:)q!iK(zF[oy");
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<?> class0 = TypeUtils.getClassFromMapping("");
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<Annotation> class2 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class1, class2);
      assertEquals("class [J", class1.toString());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<String> class0 = String.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, weakHashMap0, false, (PropertyNamingStrategy) null);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Class<JSONPDeserializer> class0 = JSONPDeserializer.class;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, true, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Class<Collator> class0 = Collator.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      hashtable0.put("/;i0~g0Xqr _=>i", "/;i0~g0Xqr _=>i");
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, hashtable0, false, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Class<Short> class0 = Short.TYPE;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, identityHashMap0, false, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Class<Jdk8DateCodec> class0 = Jdk8DateCodec.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashMap0, true);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, map0, true);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<NoSuchFieldException> class0 = NoSuchFieldException.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, (Map<String, String>) null);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<StackTraceElement> class0 = StackTraceElement.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>(229, 310.0F, true);
      linkedHashMap0.put("getCause", (Field) null);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) null, (Map<String, Field>) linkedHashMap0, true, propertyNamingStrategy0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("Ljava.awt.Font", "-_B<NMo+:'\"%");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) null, jSONType0, (Map<String, String>) identityHashMap0, (Map<String, Field>) hashtable0, false, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) null, jSONType0, (Map<String, String>) identityHashMap0, (Map<String, Field>) hashtable0, false, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) linkedHashMap0, (Map<String, Field>) identityHashMap0, true, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : sun.misc.Launcher$AppClassLoader@3d4eac69
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(mockIllegalStateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : sun.misc.Launcher$AppClassLoader@3d4eac69
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException();
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(mockNullPointerException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(typeUtils0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : com.alibaba.fastjson.util.TypeUtils@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) null, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("^Z#Xh9", "^Z#Xh9");
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>(linkedHashMap0);
      Class<String> class0 = String.class;
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) treeMap0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. java.lang.String
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = TypeUtils.castToJavaBean((Object) null, (Class<SQLFeatureNotSupportedException>) null);
      assertNull(sQLFeatureNotSupportedException0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PageAttributes pageAttributes0 = new PageAttributes();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(pageAttributes0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : color=monochrome,media=iso-a4,orientation-requested=portrait,origin=physical,print-quality=normal,printer-resolution=[72,72,3]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(aSMDeserializerFactory0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory@2
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      Class<InternalError> class1 = InternalError.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) class0, class1, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.InternalError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      InterruptedException interruptedException0 = new InterruptedException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("lO#t87`Tvbsv|s", "b%o", interruptedException0);
      Class<Object> class0 = Object.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      parserConfig0.setAsmEnable(false);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) sQLIntegrityConstraintViolationException0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<Timestamp> class0 = Timestamp.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) null, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.Timestamp
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<Timestamp> class0 = Timestamp.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) classLoader0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.Timestamp
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(aSMDeserializerFactory0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory@2
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(propertyNamingStrategy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : KebabCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Insets insets0 = new Insets(2159, (-3830), 2159, 2159);
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(insets0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.awt.Insets[top=2159,left=-3830,bottom=2159,right=2159]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(timeUnit0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<StackTraceElement> class0 = StackTraceElement.class;
      ParserConfig parserConfig0 = new ParserConfig(true);
      parserConfig0.setAutoTypeSupport(true);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "com.alibaba.fastjson.util.ParameterizedTypeImpl@1eed241f", (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.StackTraceElement
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)JSON.defaultTimeZone;
      Class<RenderingHints> class0 = RenderingHints.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) zoneInfo0, class0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.awt.RenderingHints
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<InterruptedException> class0 = InterruptedException.class;
      Class<ThrowableDeserializer> class1 = ThrowableDeserializer.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      parserConfig0.setAutoTypeSupport(true);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<RenderingHints> class0 = RenderingHints.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) classLoader0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.awt.RenderingHints
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<Time> class0 = Time.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) weakHashMap0, (PropertyNamingStrategy) null, true);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("usj3t($%$}4VdS* M", "usj3t($%$}4VdS* M");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) identityHashMap0, propertyNamingStrategy0, true);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) identityHashMap0, propertyNamingStrategy0, false);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<JobAttributes> class0 = JobAttributes.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<Collator> class0 = Collator.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("com.alibaba.fastjson.serializer.DoubleSerializer", "com.alibaba.fastjson.serializer.DoubleSerializer");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) identityHashMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      Class<Integer> class0 = Integer.TYPE;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashtable0, (PropertyNamingStrategy) null);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.toLocale((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.setAccessible((AccessibleObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.isProxy((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.isNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<ChoiceFormat> class0 = ChoiceFormat.class;
      // Undeclared exception!
      try { 
        TypeUtils.getSuperMethodAnnotation(class0, (Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getSerializeFeatures((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getParserFeatures((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getClass((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        TypeUtils.getAnnotation((Class<?>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.fnv1a_64_lower((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) null, (Map<String, String>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) null, map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters(class0, jSONType0, (Map<String, String>) null, (Map<String, Field>) null, false, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.checkPrimitiveArray((GenericArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) null, (ParameterizedType) null, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>(102);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      // Undeclared exception!
      try { 
        TypeUtils.buildBeanInfo((Class<?>) null, (Map<String, String>) hashtable0, propertyNamingStrategy0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      // Undeclared exception!
      try { 
        TypeUtils.buildBeanInfo((Class<?>) null, (Map<String, String>) identityHashMap0, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<Field> class0 = Field.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      assertFalse(class1.isEnum());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class class0 = (Class)TypeUtils.getCollectionItemType((Type) null);
      assertFalse(class0.isInterface());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_TEXT_ANTIALIASING;
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, propertyNamingStrategy0);
      Type[] typeArray0 = new Type[3];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) renderingHints0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : {pos 1, json : {{\"index\":2}:\"SnakeCase\"}
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = TypeUtils.decapitalize("o");
      assertEquals("o", string0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = TypeUtils.decapitalize("XBe");
      assertEquals("XBe", string0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      Class<Short> class0 = Short.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      assertEquals(12, throwableDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Type type0 = TypeUtils.getGenericParamType((Type) null);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<OptionalCodec> class0 = OptionalCodec.class;
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = TypeUtils.isGenericParamType(genericArrayType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<Dimension> class1 = Dimension.class;
      ObjectDeserializer objectDeserializer0 = parserConfig0.createJavaBeanDeserializer(class1, class0);
      assertEquals(12, objectDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      ParserConfig parserConfig0 = new ParserConfig(false);
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0);
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>(229, 1820.6879F, true);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Class<ClassLoader> class0 = ClassLoader.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) null, (Map<String, Field>) linkedHashMap0, true, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "com.alibaba.fastjson.serializer.SimplePropertyPreFilter");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      Class<?> class0 = TypeUtils.loadClass("Oq!jd%IK)Q=8We-zB}", classLoader0, false);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<?> class0 = TypeUtils.loadClass("DAY_OF_WEEK_IN_MONTH_FIELD", classLoader0, true);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<JSONObject> class0 = JSONObject.class;
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("Lorg.springframework.util.LinkedMultiValueMap", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. Lorg.springframework.util.LinkedMultiValueMap
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      Class<?> class0 = TypeUtils.loadClass("[long", (ClassLoader) aSMDeserializerFactory0.classLoader, false);
      assertTrue(class0.isArray());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("Oq!jd%IK)Q=8We-zB}", (ClassLoader) null, false);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<?> class0 = TypeUtils.loadClass((String) null, classLoader0, false);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.isPath((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      Class<String> class0 = String.class;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) hashMap0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. java.lang.String
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      JSONObject jSONObject0 = new JSONObject(false);
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      SQLTimeoutException sQLTimeoutException0 = TypeUtils.castToJavaBean((Map<String, Object>) jSONObject0, class0, parserConfig0);
      assertNull(sQLTimeoutException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("s:)q!iK(zF[oy");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("empty");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"empty\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("can not cast to char, value : ");
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<ParameterizedTypeImpl> class1 = ParameterizedTypeImpl.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class1);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Constructor<EnumSet<TimeUnit>>[] constructorArray0 = (Constructor<EnumSet<TimeUnit>>[]) Array.newInstance(Constructor.class, 3);
      // Undeclared exception!
      try { 
        TypeUtils.getKoltinConstructor(constructorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Constructor<EnumSet<TimeUnit>>[] constructorArray0 = (Constructor<EnumSet<TimeUnit>>[]) Array.newInstance(Constructor.class, 0);
      Constructor constructor0 = TypeUtils.getKoltinConstructor(constructorArray0);
      assertNull(constructor0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64("fastjson.parser.deny");
      assertEquals(8807520128269719306L, long0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("yyyy-MM-dd'T'HH:mm:ss.SSSXXX");
      assertEquals((-4718792893287992324L), long0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("_Ge_0/^T");
      assertEquals(6181527254091419353L, long0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean boolean0 = TypeUtils.isHibernateInitialized((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = TypeUtils.isAnnotationPresentManyToMany((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean boolean0 = TypeUtils.isAnnotationPresentOneToMany((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Collection collection0 = TypeUtils.createCollection(parameterizedTypeImpl0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Class<PropertyProcessableDeserializer> class0 = PropertyProcessableDeserializer.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(class0, jSONType0);
      Type type0 = TypeUtils.getCollectionItemType(class1);
      Collection collection0 = TypeUtils.createCollection(type0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      Type type0 = TypeUtils.unwrapOptional(class0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class long
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertEquals("class [I", class1.toString());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertEquals("class [S", class1.toString());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertEquals("class [B", class1.toString());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertEquals("class [C", class1.toString());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertFalse(class1.isEnum());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn("checkListResolve").when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class1, jSONType0, (Map<String, String>) concurrentHashMap0, (Map<String, Field>) null, true, (PropertyNamingStrategy) null);
      assertEquals("class [J", class1.toString());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertNotNull(class1);
      assertEquals("class java.lang.Object", class1.toString());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = TypeUtils.decapitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      ObjectDeserializer objectDeserializer0 = parserConfig0.createJavaBeanDeserializer(class0, class0);
      assertEquals(12, objectDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      assertEquals("byte", class1.toString());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      Type type0 = TypeUtils.unwrapOptional(class0);
      Type type1 = TypeUtils.getGenericParamType(type0);
      assertNull(type1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<?> class0 = TypeUtils.loadClass("java.util.Collection", classLoader0);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, (JSONType) null, (Map<String, String>) linkedHashMap0, (Map<String, Field>) hashMap0, true, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<Collator> class0 = Collator.class;
      ObjectDeserializer objectDeserializer0 = parserConfig0.createJavaBeanDeserializer(class0, (Type) null);
      assertEquals(12, objectDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, map0, false);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<NumberFormat> class0 = NumberFormat.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, false);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) hashMap0, (Map<String, Field>) identityHashMap0, false, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<AtomicInteger> class0 = AtomicInteger.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) identityHashMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Class<LinkageError> class0 = LinkageError.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, true);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      MockThread mockThread0 = new MockThread("e");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      Class<?> class0 = TypeUtils.loadClass("", classLoader0, true);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<?> class0 = TypeUtils.loadClass((String) null, classLoader0);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Class<String> class0 = String.class;
      String string0 = TypeUtils.castToJavaBean((Map<String, Object>) hashMap0, class0, (ParserConfig) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Class<StackTraceElement> class0 = StackTraceElement.class;
      Type[] typeArray0 = new Type[1];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parameterizedTypeImpl0, (ParameterizedType) parameterizedTypeImpl0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // write javaBean error, fastjson version 1.2.46, class com.alibaba.fastjson.util.ParameterizedTypeImpl, create asm serializer error, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ParserConfig parserConfig0 = new ParserConfig(true);
      Type[] typeArray0 = new Type[9];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, typeArray0[3]);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "AJGu /&", (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@7b1ac46
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Class<StackTraceElement> class0 = StackTraceElement.class;
      Type[] typeArray0 = new Type[1];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parserConfig0, (Type) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : asmEnable
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      LinkedHashSet<SQLDataException> linkedHashSet0 = new LinkedHashSet<SQLDataException>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) linkedHashSet0, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<?> class0 = TypeUtils.loadClass("java.util.Collection", classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(true);
      OptionalCodec optionalCodec0 = TypeUtils.cast((Object) null, (Type) class0, parserConfig0);
      assertNull(optionalCodec0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Double double0 = new Double(0.0);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) double0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.Timestamp
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) "XBe", class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.Timestamp
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("L");
      assertEquals("", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("VALUE_STROKE_NORMALIZE");
      Class<UUID> class0 = UUID.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) locale0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.UUID
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = TypeUtils.castToJavaBean((Object) "", class0);
      assertNull(sQLFeatureNotSupportedException0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "getDeclaringClass", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLFeatureNotSupportedException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<Calendar> class0 = Calendar.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) javaBeanDeserializer0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer@e
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      ParserConfig parserConfig0 = new ParserConfig(false);
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError("S&32 9?'$G");
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) noSuchFieldError0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : java.lang.NoSuchFieldError: S&32 9?'$G
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Class<BigInteger> class0 = BigInteger.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) jSONType0, class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"co\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Class<Double> class0 = Double.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread(thread0);
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) propertyNamingStrategy0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : PascalCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.BACKGROUND;
      BufferCapabilities bufferCapabilities0 = new BufferCapabilities(imageCapabilities0, imageCapabilities0, bufferCapabilities_FlipContents0);
      Class<Double> class0 = Double.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) bufferCapabilities0, (Type) class0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : java.awt.BufferCapabilities@64924532
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Class<DataTruncation> class0 = DataTruncation.class;
      Class<Boolean> class1 = Boolean.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) class0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : class java.sql.DataTruncation
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<SimpleTimeZone> class0 = SimpleTimeZone.class;
      ConcurrentHashMap<ParameterizedTypeImpl, RuleBasedCollator> concurrentHashMap0 = new ConcurrentHashMap<ParameterizedTypeImpl, RuleBasedCollator>();
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) concurrentHashMap0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, public java.util.SimpleTimeZone(int,java.lang.String,int,int,int,int,int,int,int,int,int,int,int)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Type[] typeArray0 = new Type[6];
      typeArray0[1] = (Type) class0;
      ParserConfig parserConfig0 = new ParserConfig(false);
      StackOverflowError stackOverflowError0 = new StackOverflowError("com.alibaba.fastjson.util.ParameterizedTypeImpl@82be591d");
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[1], typeArray0[1]);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) stackOverflowError0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseBoolean error, field : null
         //
         verifyException("com.alibaba.fastjson.serializer.BooleanCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<UUID> class0 = UUID.class;
      UUID uUID0 = TypeUtils.cast((Object) null, class0, parserConfig0);
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      Boolean boolean0 = TypeUtils.castToBoolean(double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Boolean boolean0 = TypeUtils.castToBoolean((Object) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean("!'#Zw");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : !'#Zw
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      ConcurrentHashMap<ClassLoader, Object> concurrentHashMap0 = new ConcurrentHashMap<ClassLoader, Object>();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(concurrentHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("(C)I");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"(C)I\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Double double0 = new Double(0.0);
      Integer integer0 = TypeUtils.castToInt(double0);
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Integer integer0 = TypeUtils.castToInt((Object) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      SunHints.LCDContrastKey sunHints_LCDContrastKey0 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      TreeSet<Float> treeSet0 = new TreeSet<Float>();
      RenderingHints renderingHints0 = new RenderingHints(sunHints_LCDContrastKey0, treeSet0);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(renderingHints0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {Text-specific LCD contrast key=[]}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Long long0 = TypeUtils.castToLong("NULL");
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Short short0 = new Short((short) (-18260));
      Long long0 = TypeUtils.castToLong(short0);
      assertEquals((-18260L), (long)long0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Long long0 = TypeUtils.castToLong((Object) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("(C)I");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : (C)I
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("%6+<{-n:");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("0000-00-00");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1008), (-1008), 0, 0, 25);
      Timestamp timestamp0 = TypeUtils.castToTimestamp(mockGregorianCalendar0);
      assertEquals(0, timestamp0.getNanos());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Timestamp timestamp0 = TypeUtils.castToTimestamp((Object) null);
      assertNull(timestamp0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("XBe");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : XBe
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("0Emty");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : 0Emty
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong(304L);
      Time time0 = TypeUtils.castToSqlTime(atomicLong0);
      assertEquals("00:00:00", time0.toString());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Time time0 = TypeUtils.castToSqlTime((Object) null);
      assertNull(time0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong(1079L);
      Date date0 = TypeUtils.castToSqlDate(atomicLong0);
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Date date0 = TypeUtils.castToSqlDate((Object) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      java.util.Date date0 = TypeUtils.castToDate((Object) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("`:XO [[Fpf(:{7@W.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"`:XO [[Fpf(:{7@W.\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Double double0 = new Double(1.0);
      Double double1 = TypeUtils.castToDouble(double0);
      assertEquals((double)double1, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Double double0 = TypeUtils.castToDouble((Object) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("XBe");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("X-Be");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Float float0 = new Float((-1313.35F));
      Float float1 = TypeUtils.castToFloat(float0);
      assertEquals((float)float1, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Float float0 = TypeUtils.castToFloat((Object) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      BigInteger bigInteger0 = TypeUtils.castToBigInteger((Object) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(noSuchMethodError0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"ja\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal((Object) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal(identityHashMap0);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("DAY_OF_WEEK_IN_MONTH_FIELD");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"DAY_OF_WEEK_IN_MONTH_FIELD\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      AtomicInteger atomicInteger0 = new AtomicInteger(57);
      Short short0 = TypeUtils.castToShort(atomicInteger0);
      assertEquals((short)57, (short)short0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Short short0 = TypeUtils.castToShort((Object) null);
      assertNull(short0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : sun.misc.Launcher$AppClassLoader@3d4eac69
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Character character0 = TypeUtils.castToChar((Object) null);
      assertNull(character0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("q;0J#`878?{KD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : q;0J#`878?{KD
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "S&32 9?'$G", (Type) class0, parserConfig0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"S&32 9?'$G\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Double double0 = new Double(27.4897050072632);
      Byte byte0 = TypeUtils.castToByte(double0);
      assertEquals((byte)27, (byte)byte0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Byte byte0 = TypeUtils.castToByte((Object) null);
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException();
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(mockIllegalStateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String string0 = TypeUtils.castToString((Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException((String) null);
      String string0 = TypeUtils.castToString(mockNullPointerException0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getClassFromMapping((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(typeUtils0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : com.alibaba.fastjson.util.TypeUtils@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      TypeUtils.clearClassMapping();
  }
}
