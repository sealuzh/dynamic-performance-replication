/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 08:30:45 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.EnumDeserializer;
import com.alibaba.fastjson.parser.deserializer.JSONPDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.NumberDeserializer;
import com.alibaba.fastjson.parser.deserializer.ObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.OptionalCodec;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.parser.deserializer.TimeDeserializer;
import com.alibaba.fastjson.serializer.AfterFilter;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.ClientInfoStatus;
import java.sql.Date;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLWarning;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.ChoiceFormat;
import java.text.Collator;
import java.text.DateFormat;
import java.text.NumberFormat;
import java.text.RuleBasedCollator;
import java.text.SimpleDateFormat;
import java.text.StringCharacterIterator;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.TreeMap;
import java.util.UUID;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = DateFormat.HOUR0_FIELD;
      TypeUtils.loadClass("L");
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      Class<?> class1 = javaBeanSerializer0.getType();
      Class<?> class2 = TypeUtils.getClass((Type) class1);
      assertEquals("class com.alibaba.fastjson.JSONObject", class2.toString());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TypeUtils.loadClass("y!B3N,;[&");
      boolean boolean0 = TypeUtils.isGenericParamType((Type) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Class<Method> class0 = Method.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0);
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0, true);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(linkedHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<Time> class0 = Time.class;
      TypeUtils.getSerializeFeatures(class0);
      TypeUtils.isPath(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : class java.sql.Time
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Long.valueOf((-2454L));
      Long.remainderUnsigned((-2454L), (-2454L));
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0);
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, (Map<String, String>) null);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      HashMap<Field, IllegalMonitorStateException> hashMap0 = new HashMap<Field, IllegalMonitorStateException>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Collection<IllegalMonitorStateException> collection0 = hashMap0.values();
      assertNotNull(collection0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Class<NumberFormat> class0 = NumberFormat.class;
      NumberFormat numberFormat0 = TypeUtils.castToJavaBean((Object) hashMap0, class0);
      assertNull(numberFormat0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Random.setNextRandom((-1055));
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      String string0 = TypeUtils.castToString(object1);
      assertNotNull(string0);
      assertNotSame(object1, object0);
      assertFalse(object1.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader0);
      Class<Locale> class0 = Locale.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        TypeUtils.getSuperMethodAnnotation(class0, (Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      SQLDataException sQLDataException0 = new SQLDataException("CV3nVY4,3mXGlR", "CV3nVY4,3mXGlR", sQLException0);
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      ClassLoader.getSystemClassLoader();
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      treeMap0.put("[F", (Field) null);
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      javaBeanSerializer0.getType();
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      assertEquals("class com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer", class1.toString());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<NoClassDefFoundError> class0 = NoClassDefFoundError.class;
      TypeUtils.getParserFeatures(class0);
      int int0 = DateFormat.HOUR0_FIELD;
      JavaObjectDeserializer javaObjectDeserializer0 = JavaObjectDeserializer.instance;
      TypeUtils.castToLong((Object) null);
      TypeUtils.getClassFromMapping("_asm_list_item_deser__");
      Class<Locale> class1 = Locale.class;
      boolean boolean0 = TypeUtils.isPath(class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Long long0 = new Long((-2454L));
      TypeUtils.isNumber("o");
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      TypeUtils.computeGetters(class0, (Map<String, String>) null, true);
      TypeUtils.loadClass("e*L");
      Double double0 = TypeUtils.castToDouble((Object) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TypeUtils.loadClass((String) null);
      TypeUtils.fnv1a_64_lower("scanBoolean");
      // Undeclared exception!
      try { 
        TypeUtils.getClassFromMapping((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("z_hp[S|z=-yMTUn", "");
      hashMap0.replace("Ljavajawt.Re}ctangle", "");
      hashMap0.clear();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfPresent("z_hp[S|z=-yMTUn", biFunction0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashMap0, propertyNamingStrategy0);
      TypeUtils.castToShort((Object) null);
      Class class1 = (Class)TypeUtils.unwrapOptional(class0);
      assertFalse(class1.isEnum());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      Class<InternalError> class0 = InternalError.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) treeMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<OptionalCodec> class0 = OptionalCodec.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Constructor<InternalError>[] constructorArray0 = (Constructor<InternalError>[]) Array.newInstance(Constructor.class, 1);
      // Undeclared exception!
      try { 
        TypeUtils.getKoltinConstructor(constructorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      TypeUtils.loadClass("wait", classLoader0);
      long long0 = TypeUtils.fnv1a_64_lower("flo");
      assertEquals((-2544686514225832032L), long0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Long long0 = new Long((-2454L));
      Long.remainderUnsigned((-2454L), (-2454L));
      MockThread mockThread0 = new MockThread("f#nd6L8{^~RIzBSt;");
      MockThread mockThread1 = new MockThread(mockThread0, "f#nd6L8{^~RIzBSt;");
      MockThread mockThread2 = new MockThread(mockThread1);
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      mockThread2.setContextClassLoader(classLoader0);
      ClassLoader classLoader1 = mockThread2.getContextClassLoader();
      TypeUtils.loadClass("f#nd6L8{^~RIzBSt;", classLoader1);
      long long1 = TypeUtils.fnv1a_64_lower("f#nd6L8{^~RIzBSt;");
      assertEquals(1918705328499739226L, long1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, class1, class1);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parameterizedTypeImpl0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : com.alibaba.fastjson.util.ParameterizedTypeImpl@540
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("not match ", "not match ");
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException(sQLRecoverableException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(sQLRecoverableException1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.sql.SQLRecoverableException: java.sql.SQLRecoverableException: not match 
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Object object0 = new Object();
      HashMap<Field, IllegalMonitorStateException> hashMap0 = new HashMap<Field, IllegalMonitorStateException>();
      Class<Integer> class0 = Integer.TYPE;
      TypeUtils.getRawClass(class0);
      long long0 = TypeUtils.fnv1a_64("cause");
      assertEquals((-5245656472792837248L), long0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Type[] typeArray0 = new Type[7];
      Float.min(0.0F, 0.0F);
      Float.sum(0.0F, 2689.786F);
      Float.min((-1138.7222F), 0.0F);
      Character character0 = new Character('V');
      TypeUtils.castToChar(character0);
      TypeUtils.decapitalize("[tC<Nms6L81-A*c");
      Class<SQLDataException> class0 = SQLDataException.class;
      TypeUtils.getSuperMethodAnnotation(class0, (Method) null);
      Byte byte0 = TypeUtils.castToByte((Object) null);
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Long long0 = new Long((-2454L));
      Float.sum((-2454L), (-2454L));
      Float float0 = TypeUtils.castToFloat(long0);
      assertNotNull(float0);
      
      Float.min(0.75F, (-246.15F));
      Character character0 = new Character('k');
      StackOverflowError stackOverflowError0 = new StackOverflowError((String) null);
      TypeUtils.castToChar((Object) null);
      TypeUtils.decapitalize((String) null);
      long long1 = TypeUtils.fnv1a_64("getFieldType");
      assertEquals(1735472594270081473L, long1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("-~Nx");
      TypeUtils.castToByte((Object) null);
      MockLocalDateTime.now();
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      Class<Short> class0 = Short.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) treeMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Long long0 = Long.valueOf((-2454L));
      Long.remainderUnsigned((-2454L), (-2454L));
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : -2454
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<Method> class0 = Method.class;
      String string0 = "";
      Class<NoClassDefFoundError> class1 = NoClassDefFoundError.class;
      Class<RenderingHints> class2 = RenderingHints.class;
      Class<PropertyNamingStrategy> class3 = PropertyNamingStrategy.class;
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class3, "", fieldArray0);
      FieldInfo fieldInfo0 = new FieldInfo("", class1, class2, class2, (Field) null, (-1599), 667, 667);
      // Undeclared exception!
      try { 
        fieldInfo0.get(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.FieldInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<NoClassDefFoundError> class0 = NoClassDefFoundError.class;
      TypeUtils.getParserFeatures(class0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Class<Integer> class1 = Integer.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parserConfig0, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : com.alibaba.fastjson.parser.ParserConfig@95
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TypeUtils.toLocale("Ljava.lang.AutoCloseable");
      int int0 = DateFormat.HOUR0_FIELD;
      TypeUtils.loadClass("Ljava.lang.AutoCloseable");
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("%7kb8]Th");
      assertFalse(boolean0);
      
      Locale locale0 = TypeUtils.toLocale("%7kb8]Th");
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("%7kb8]th", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("%7kb8]th", locale0.getLanguage());
      
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<Time> class0 = Time.class;
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      
      Class<IndexOutOfBoundsException> class1 = IndexOutOfBoundsException.class;
      int int0 = TypeUtils.getSerializeFeatures(class1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      Class<?> class0 = TypeUtils.loadClass("[I", (ClassLoader) aSMClassLoader0, true);
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isPrimitive());
      assertEquals("class [I", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertTrue(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      assertNotNull(class1);
      assertSame(class0, class1);
      assertSame(class1, class0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isPrimitive());
      assertEquals("class [I", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertTrue(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isArray());
      assertEquals("class [I", class1.toString());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : class [I
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("java.util.concurrent.ConcurrentSkipListSet");
      assertEquals((-2928959960831838436L), long0);
      
      Class<OptionalCodec> class0 = OptionalCodec.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      Constructor<InternalError>[] constructorArray0 = (Constructor<InternalError>[]) Array.newInstance(Constructor.class, 1);
      constructorArray0[0] = (Constructor<InternalError>) constructorArray0;
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("Ljava.awt.Font");
      assertNull(class0);
      
      Type[] typeArray0 = new Type[7];
      typeArray0[0] = (Type) null;
      typeArray0[1] = (Type) null;
      typeArray0[2] = (Type) null;
      typeArray0[3] = (Type) null;
      typeArray0[4] = (Type) null;
      typeArray0[5] = (Type) null;
      typeArray0[6] = (Type) null;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[3], typeArray0[0]);
      assertNotNull(parameterizedTypeImpl0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) null, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@f449711f
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Integer integer0 = TypeUtils.castToInt((Object) null);
      assertNull(integer0);
      
      Method method0 = null;
      boolean boolean0 = TypeUtils.isAnnotationPresentManyToMany((Method) null);
      assertFalse(boolean0);
      
      Class<NoClassDefFoundError> class0 = NoClassDefFoundError.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : class java.lang.NoClassDefFoundError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      assertNotNull(class0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isSynthetic());
      assertEquals("short", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(class1);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isSynthetic());
      assertEquals("short", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      assertEquals("class [S", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isArray());
      
      TypeUtils.clearClassMapping();
      Class<?> class2 = TypeUtils.getRawClass(class1);
      assertNotNull(class2);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isSynthetic());
      assertEquals("short", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      assertEquals("class [S", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isArray());
      assertFalse(class2.isInterface());
      assertEquals("class [S", class2.toString());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isPrimitive());
      assertEquals(1041, class2.getModifiers());
      assertTrue(class2.isArray());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      
      // Undeclared exception!
      try { 
        TypeUtils.fnv1a_64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      assertNotNull(class0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertEquals("double", class0.toString());
      assertFalse(class0.isAnnotation());
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(class1);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertEquals("double", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertEquals("class [D", class1.toString());
      
      TypeUtils.clearClassMapping();
      LinkedHashMap<Field, IllegalMonitorStateException> linkedHashMap0 = new LinkedHashMap<Field, IllegalMonitorStateException>();
      assertNotNull(linkedHashMap0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      
      Collection<IllegalMonitorStateException> collection0 = linkedHashMap0.values();
      assertNotNull(collection0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      
      RuleBasedCollator ruleBasedCollator0 = (RuleBasedCollator)Collator.getInstance();
      assertNotNull(ruleBasedCollator0);
      assertEquals(2, ruleBasedCollator0.getStrength());
      assertEquals(0, ruleBasedCollator0.getDecomposition());
      assertEquals("='\u200B'=\u200C=\u200D=\u200E=\u200F=\u0000 =\u0001 =\u0002 =\u0003 =\u0004=\u0005 =\u0006 =\u0007 =\b ='\t'='\u000B' =\u000E=\u000F ='\u0010' =\u0011 =\u0012 =\u0013=\u0014 =\u0015 =\u0016 =\u0017 =\u0018=\u0019 =\u001A =\u001B =\u001C =\u001D=\u001E =\u001F ==\u0080 =\u0081 =\u0082 =\u0083 =\u0084 =\u0085=\u0086 =\u0087 =\u0088 =\u0089 =\u008A =\u008B=\u008C =\u008D =\u008E =\u008F =\u0090 =\u0091=\u0092 =\u0093 =\u0094 =\u0095 =\u0096 =\u0097=\u0098 =\u0099 =\u009A =\u009B =\u009C =\u009D=\u009E =\u009F;' ';'\u00A0';'\u2000';'\u2001';'\u2002';'\u2003';'\u2004';'\u2005';'\u2006';'\u2007';'\u2008';'\u2009';'\u200A';'\u3000';'\uFEFF';'\r' ;'\t' ;'\n';'\f';'\u000B';\u0301;\u0300;\u0306;\u0302;\u030C;\u030A;\u030D;\u0308;\u030B;\u0303;\u0307;\u0304;\u0337;\u0327;\u0328;\u0323;\u0332;\u0305;\u0309;\u030E;\u030F;\u0310;\u0311;\u0312;\u0313;\u0314;\u0315;\u0316;\u0317;\u0318;\u0319;\u031A;\u031B;\u031C;\u031D;\u031E;\u031F;\u0320;\u0321;\u0322;\u0324;\u0325;\u0326;\u0329;\u032A;\u032B;\u032C;\u032D;\u032E;\u032F;\u0330;\u0331;\u0333;\u0334;\u0335;\u0336;\u0338;\u0339;\u033A;\u033B;\u033C;\u033D;\u033E;\u033F;\u0342;\u0344;\u0345;\u0360;\u0361;\u0483;\u0484;\u0485;\u0486;\u20D0;\u20D1;\u20D2;\u20D3;\u20D4;\u20D5;\u20D6;\u20D7;\u20D8;\u20D9;\u20DA;\u20DB;\u20DC;\u20DD;\u20DE;\u20DF;\u20E0;\u20E1,'-';\u00AD;\u2010;\u2011;\u2012;\u2013;\u2014;\u2015;\u2212<'_'<\u00AF<','<';'<':'<'!'<\u00A1<'?'<\u00BF<'/'<'.'<\u00B4<'`'<'^'<\u00A8<'~'<\u00B7<\u00B8<'''<'\"'<\u00AB<\u00BB<'('<')'<'['<']'<'{'<'}'<\u00A7<\u00B6<\u00A9<\u00AE<'@'<\u00A4<\u0E3F<\u00A2<\u20A1<\u20A2<'$'<\u20AB<\u20AC<\u20A3<\u20A4<\u20A5<\u20A6<\u20A7<\u00A3<\u20A8<\u20AA<\u20A9<\u00A5<'*'<'\\'<'&'<'#'<'%'<'+'<\u00B1<\u00F7<\u00D7<'<'<'='<'>'<\u00AC<'|'<\u00A6<\u00B0<\u00B5<0<1<2<3<4<5<6<7<8<9<\u00BC<\u00BD<\u00BE<a,A<b,B<c,C<d,D<\u00F0,\u00D0<e,E<f,F<g,G<h,H<i,I<j,J<k,K<l,L<m,M<n,N<o,O<p,P<q,Q<r,R<s, S & SS,\u00DF<t,T& TH, \u00DE &TH, \u00FE <u,U<v,V<w,W<x,X<y,Y<z,Z&AE,\u00C6&AE,\u00E6&OE,\u0152&OE,\u0153", ruleBasedCollator0.getRules());
      
      Class<NumberFormat> class2 = NumberFormat.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) ruleBasedCollator0, class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.NumberFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<MockDate> class0 = MockDate.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      
      int int1 = DateFormat.HOUR0_FIELD;
      assertFalse(int1 == int0);
      assertEquals(16, int1);
      
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class org.evosuite.runtime.mock.java.util.MockDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Hashtable<JSONPDeserializer, NoSuchMethodError> hashtable0 = new Hashtable<JSONPDeserializer, NoSuchMethodError>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal(hashtable0);
      assertNull(bigDecimal0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      Class<?> class0 = TypeUtils.loadClass("(>u`.B13QG=");
      assertNull(class0);
      
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("Ljava.awt.Font");
      assertNull(class0);
      
      Type[] typeArray0 = new Type[18];
      typeArray0[0] = (Type) null;
      typeArray0[1] = (Type) null;
      typeArray0[2] = (Type) null;
      typeArray0[3] = (Type) null;
      typeArray0[4] = (Type) null;
      typeArray0[5] = (Type) null;
      Timestamp timestamp0 = TypeUtils.castToTimestamp((Object) null);
      assertNull(timestamp0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      HashMap<Field, IllegalMonitorStateException> hashMap0 = new HashMap<Field, IllegalMonitorStateException>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Collection<IllegalMonitorStateException> collection0 = hashMap0.values();
      assertNotNull(collection0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "hashCode";
      stringArray0[1] = "sv%&&7";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      assertNotNull(simplePropertyPreFilter0);
      assertEquals(0, simplePropertyPreFilter0.getMaxLevel());
      
      Class<?> class0 = simplePropertyPreFilter0.getClazz();
      assertNull(class0);
      assertEquals(0, simplePropertyPreFilter0.getMaxLevel());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("sv%&&7");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader1);
      assertSame(classLoader1, classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = TypeUtils.cast((Object) null, (Type) null, parserConfig0);
      assertNull(sQLFeatureNotSupportedException0);
      assertSame(classLoader0, classLoader1);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      
      String string0 = TypeUtils.castToString((Object) null);
      assertNull(string0);
      
      long long0 = TypeUtils.fnv1a_64("d>>@!<#xqD,!;^~SX");
      assertEquals(2362972698801892384L, long0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      System.setCurrentTimeMillis(818L);
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = TypeUtils.cast((Object) null, (Type) class0, parserConfig0);
      assertNull(sQLFeatureNotSupportedException0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      
      Class<ChoiceFormat> class1 = ChoiceFormat.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
      assertTrue(concurrentHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader1);
      assertSame(classLoader1, classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      String string0 = ParserConfig.DENY_PROPERTY;
      assertNotNull(string0);
      assertEquals("fastjson.parser.deny", string0);
      
      String string1 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("fastjson.parser.autoTypeSupport", string1);
      
      Class<Object> class0 = Object.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertNotNull(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashtable0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("fastjson.parser.autoTypeSupport");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"fastjson.parser.autoTypeSupport\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<NoClassDefFoundError> class0 = NoClassDefFoundError.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      
      int int1 = DateFormat.HOUR0_FIELD;
      assertFalse(int1 == int0);
      assertEquals(16, int1);
      
      String string0 = "to";
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("to");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : to
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Long long0 = new Long((-2454L));
      assertNotNull(long0);
      assertEquals((-2454L), (long)long0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : -2454
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("Ljava.awt.Font");
      assertNull(class0);
      
      Type[] typeArray0 = new Type[18];
      typeArray0[0] = (Type) null;
      typeArray0[1] = (Type) null;
      typeArray0[2] = (Type) null;
      typeArray0[3] = (Type) null;
      ThreadGroup threadGroup0 = new ThreadGroup("can not cast to byte, value : ");
      assertNotNull(threadGroup0);
      assertEquals("can not cast to byte, value : ", threadGroup0.getName());
      
      Thread thread0 = MockThread.currentThread();
      assertNotNull(thread0);
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      
      MockThread mockThread0 = new MockThread(threadGroup0, thread0, "can not cast to byte, value : ", 0L);
      assertNotNull(mockThread0);
      assertEquals("can not cast to byte, value : ", threadGroup0.getName());
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "Ljava.awt.Font");
      assertNotNull(mockThread1);
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertEquals("can not cast to byte, value : ", threadGroup0.getName());
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      assertNotNull(classLoader0);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread0);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertEquals("can not cast to byte, value : ", threadGroup0.getName());
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      
      classLoader0.setPackageAssertionStatus("can not cast to byte, value : ", false);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread0);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertEquals("can not cast to byte, value : ", threadGroup0.getName());
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      
      SQLDataException sQLDataException0 = new SQLDataException();
      assertNotNull(sQLDataException0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      
      Throwable[] throwableArray0 = sQLDataException0.getSuppressed();
      assertNotNull(throwableArray0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      assertNotNull(parserConfig0);
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      
      ParserConfig parserConfig1 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig1);
      assertNotSame(parserConfig1, parserConfig0);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertFalse(parserConfig1.fieldBased);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      Class<InternalError> class1 = InternalError.class;
      ObjectDeserializer objectDeserializer0 = parserConfig1.getDeserializer(class1, typeArray0[3]);
      assertNotNull(objectDeserializer0);
      assertNotSame(parserConfig1, parserConfig0);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertEquals(12, objectDeserializer0.getFastMatchToken());
      assertFalse(parserConfig1.fieldBased);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      ClassLoader classLoader2 = classLoader1.getParent();
      assertNotNull(classLoader2);
      assertFalse(classLoader2.equals((Object)classLoader0));
      assertFalse(classLoader2.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      Insets insets0 = new Insets(1037, 100, 879, 100);
      assertNotNull(insets0);
      assertEquals(879, insets0.bottom);
      assertEquals(1037, insets0.top);
      assertEquals(100, insets0.right);
      assertEquals(100, insets0.left);
      
      Class<ThrowableDeserializer> class2 = ThrowableDeserializer.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) insets0, class2, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("java.util.concurrent.ConcurrentSkipListSet");
      assertEquals((-2928959960831838436L), long0);
      
      long long1 = TypeUtils.fnv1a_64_lower("getget2DigitYearStart");
      assertFalse(long1 == long0);
      assertEquals(7345958609541447309L, long1);
      
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      assertNotNull(localDateTime0);
      
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) treeMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
      assertEquals(0, treeMap0.size());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("0:!\"a*rV");
      assertNotNull(sQLTransientConnectionException0);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: 0:!\"a*rV", sQLTransientConnectionException0.toString());
      assertEquals("0:!\"a*rV", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      
      SQLTransientConnectionException sQLTransientConnectionException1 = (SQLTransientConnectionException)sQLTransientConnectionException0.fillInStackTrace();
      assertNotNull(sQLTransientConnectionException1);
      assertSame(sQLTransientConnectionException0, sQLTransientConnectionException1);
      assertSame(sQLTransientConnectionException1, sQLTransientConnectionException0);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: 0:!\"a*rV", sQLTransientConnectionException0.toString());
      assertEquals("0:!\"a*rV", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: 0:!\"a*rV", sQLTransientConnectionException1.toString());
      assertEquals("0:!\"a*rV", sQLTransientConnectionException1.getMessage());
      assertNull(sQLTransientConnectionException1.getSQLState());
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean0);
      
      boolean boolean1 = TypeUtils.isHibernateInitialized(sQLTransientConnectionException0);
      assertSame(sQLTransientConnectionException0, sQLTransientConnectionException1);
      assertFalse(boolean1 == boolean0);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: 0:!\"a*rV", sQLTransientConnectionException0.toString());
      assertEquals("0:!\"a*rV", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertTrue(boolean1);
      
      Locale locale0 = TypeUtils.toLocale("0:!\"a*rV");
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("0:!\"a*rv", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("0:!\"a*rv", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      long long0 = TypeUtils.fnv1a_64_lower("0:!\"a*rV");
      assertEquals((-1278541732518668625L), long0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("0)<Ptr#_&g~qovxV^");
      assertFalse(boolean0);
      
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, (Map<String, String>) null, false);
      assertNotNull(list0);
      assertEquals(7, list0.size());
      assertFalse(list0.isEmpty());
      
      String string0 = TypeUtils.decapitalize("Ljava.awt.Font");
      assertNotNull(string0);
      assertEquals("ljava.awt.Font", string0);
      
      JavaObjectDeserializer javaObjectDeserializer0 = new JavaObjectDeserializer();
      assertNotNull(javaObjectDeserializer0);
      assertEquals(12, javaObjectDeserializer0.getFastMatchToken());
      
      UUID uUID0 = MockUUID.fromString("Ljava.awt.Font");
      assertNotNull(uUID0);
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("e*L", "0)<Ptr#_&g~qovxV^", (-2929));
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("e*L", sQLFeatureNotSupportedException0.getMessage());
      assertEquals((-2929), sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("0)<Ptr#_&g~qovxV^", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: e*L", sQLFeatureNotSupportedException0.toString());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(sQLFeatureNotSupportedException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : java.sql.SQLFeatureNotSupportedException: e*L
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      HashMap<Field, IllegalMonitorStateException> hashMap0 = new HashMap<Field, IllegalMonitorStateException>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Collection<IllegalMonitorStateException> collection0 = hashMap0.values();
      assertNotNull(collection0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String[] stringArray0 = new String[2];
      Class<Locale> class0 = Locale.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      Class<NoSuchFieldException> class1 = NoSuchFieldException.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) treeMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
      assertEquals(0, treeMap0.size());
      
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      assertNotNull(simplePropertyPreFilter0);
      assertEquals(0, simplePropertyPreFilter0.getMaxLevel());
      
      Class<?> class2 = simplePropertyPreFilter0.getClazz();
      assertNull(class2);
      assertEquals(0, simplePropertyPreFilter0.getMaxLevel());
      
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertFalse(boolean0);
      
      Class class3 = (Class)TypeUtils.getCollectionItemType(class0);
      assertNotNull(class3);
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals("class java.lang.Object", class3.toString());
      assertFalse(class3.isPrimitive());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Long long0 = new Long((-2454L));
      assertNotNull(long0);
      assertEquals((-2454L), (long)long0);
      
      String string0 = TypeUtils.decapitalize("D");
      assertNotNull(string0);
      assertEquals("d", string0);
      
      boolean boolean0 = Character.isAlphabetic((-1801084477));
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<MockDate> class0 = MockDate.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      
      int int1 = DateFormat.HOUR0_FIELD;
      assertFalse(int1 == int0);
      assertEquals(16, int1);
      
      Class<?> class1 = TypeUtils.loadClass("L");
      assertNull(class1);
      
      SQLWarning sQLWarning0 = new SQLWarning("/EMNM(S<u?", "is", 0);
      assertNotNull(sQLWarning0);
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("is", sQLWarning0.getSQLState());
      assertEquals("/EMNM(S<u?", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: /EMNM(S<u?", sQLWarning0.toString());
      
      LinkageError linkageError0 = new LinkageError();
      assertNotNull(linkageError0);
      assertNull(linkageError0.getMessage());
      assertEquals("java.lang.LinkageError", linkageError0.toString());
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) linkageError0, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      assertNotNull(instant0);
      
      Timestamp timestamp0 = Timestamp.from(instant0);
      assertNotNull(timestamp0);
      assertEquals("2014-02-14 20:21:21.32", timestamp0.toString());
      assertEquals(320000000, timestamp0.getNanos());
      
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      assertNotNull(localDateTime0);
      
      Class<Rectangle> class0 = Rectangle.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
      
      Class<JobAttributes> class1 = JobAttributes.class;
      Class<SQLNonTransientConnectionException> class2 = SQLNonTransientConnectionException.class;
      boolean boolean0 = TypeUtils.isProxy(class2);
      assertFalse(boolean0);
      
      Type type0 = TypeUtils.getGenericParamType(class1);
      assertNull(type0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = TypeUtils.cast((Object) null, (Type) class0, parserConfig0);
      assertNull(sQLFeatureNotSupportedException0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      
      Time time0 = TypeUtils.castToSqlTime((Object) null);
      assertNull(time0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Byte byte0 = new Byte((byte)29);
      assertNotNull(byte0);
      assertEquals((byte)29, (byte)byte0);
      
      Timestamp timestamp0 = TypeUtils.castToTimestamp(byte0);
      assertNotNull(timestamp0);
      assertEquals(29000000, timestamp0.getNanos());
      assertEquals("1970-01-01 00:00:00.029", timestamp0.toString());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("Ljava.lang.AutoCloseable");
      assertFalse(boolean0);
      
      Locale locale0 = TypeUtils.toLocale("Ljava.lang.AutoCloseable");
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("ljava.lang.autocloseable", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ljava.lang.autocloseable", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      boolean boolean1 = TypeUtils.isProxy(class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Locale locale1 = Locale.JAPAN;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("JP", locale1.getCountry());
      assertEquals("ja_JP", locale1.toString());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Class<Locale> class1 = Locale.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) treeMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
      assertEquals(0, treeMap0.size());
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Ljava.lang.AutoCloseable";
      stringArray0[2] = null;
      stringArray0[3] = "Ljava.lang.AutoCloseable";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      assertNotNull(simplePropertyPreFilter0);
      assertEquals(0, simplePropertyPreFilter0.getMaxLevel());
      
      Class<?> class2 = simplePropertyPreFilter0.getClazz();
      assertNull(class2);
      assertEquals(0, simplePropertyPreFilter0.getMaxLevel());
      
      AtomicLong atomicLong0 = new AtomicLong(0L);
      assertNotNull(atomicLong0);
      assertEquals("0", atomicLong0.toString());
      assertEquals(0.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(0.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals(0, atomicLong0.intValue());
      assertEquals((short)0, atomicLong0.shortValue());
      assertEquals(0L, atomicLong0.get());
      assertEquals((byte)0, atomicLong0.byteValue());
      assertEquals(0L, atomicLong0.longValue());
      
      Byte byte0 = TypeUtils.castToByte(atomicLong0);
      assertNotNull(byte0);
      assertEquals("0", atomicLong0.toString());
      assertEquals(0.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(0.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals(0, atomicLong0.intValue());
      assertEquals((short)0, atomicLong0.shortValue());
      assertEquals(0L, atomicLong0.get());
      assertEquals((byte)0, atomicLong0.byteValue());
      assertEquals(0L, atomicLong0.longValue());
      assertEquals((byte)0, (byte)byte0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Dimension dimension0 = new Dimension((-3574), (-3574));
      assertNotNull(dimension0);
      assertEquals((-3574.0), dimension0.getWidth(), 0.01);
      assertEquals((-3574.0), dimension0.getHeight(), 0.01);
      assertEquals((-3574), dimension0.width);
      assertEquals((-3574), dimension0.height);
      
      Dimension dimension1 = new Dimension(3, (-122));
      assertNotNull(dimension1);
      assertFalse(dimension1.equals((Object)dimension0));
      assertEquals((-122.0), dimension1.getHeight(), 0.01);
      assertEquals(3.0, dimension1.getWidth(), 0.01);
      assertEquals((-122), dimension1.height);
      assertEquals(3, dimension1.width);
      
      dimension0.setSize(dimension1);
      assertNotSame(dimension0, dimension1);
      assertNotSame(dimension1, dimension0);
      assertTrue(dimension0.equals((Object)dimension1));
      assertTrue(dimension1.equals((Object)dimension0));
      assertEquals(3.0, dimension0.getWidth(), 0.01);
      assertEquals((-122.0), dimension0.getHeight(), 0.01);
      assertEquals((-122.0), dimension1.getHeight(), 0.01);
      assertEquals(3.0, dimension1.getWidth(), 0.01);
      assertEquals((-122), dimension0.height);
      assertEquals(3, dimension0.width);
      assertEquals((-122), dimension1.height);
      assertEquals(3, dimension1.width);
      
      Dimension dimension2 = new Dimension(dimension1);
      assertNotNull(dimension2);
      assertTrue(dimension1.equals((Object)dimension0));
      assertTrue(dimension2.equals((Object)dimension1));
      assertTrue(dimension2.equals((Object)dimension0));
      assertEquals((-122.0), dimension1.getHeight(), 0.01);
      assertEquals(3.0, dimension1.getWidth(), 0.01);
      assertEquals((-122.0), dimension2.getHeight(), 0.01);
      assertEquals(3.0, dimension2.getWidth(), 0.01);
      assertEquals((-122), dimension1.height);
      assertEquals(3, dimension1.width);
      assertEquals((-122), dimension2.height);
      assertEquals(3, dimension2.width);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      
      Time time0 = TypeUtils.castToSqlTime(mockGregorianCalendar0);
      assertNotNull(time0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("20:21:21", time0.toString());
      
      Byte byte0 = new Byte((byte)29);
      assertNotNull(byte0);
      assertEquals((byte)29, (byte)byte0);
      
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException((String) null);
      assertNotNull(stringIndexOutOfBoundsException0);
      assertNull(stringIndexOutOfBoundsException0.getMessage());
      assertEquals("java.lang.StringIndexOutOfBoundsException", stringIndexOutOfBoundsException0.toString());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(stringIndexOutOfBoundsException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : java.lang.StringIndexOutOfBoundsException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Class<?> class0 = TypeUtils.loadClass("write", classLoader0, false);
      assertNull(class0);
      
      Type type0 = TypeUtils.getGenericParamType((Type) null);
      assertNull(type0);
      
      Boolean boolean0 = TypeUtils.castToBoolean((Object) null);
      assertNull(boolean0);
      
      InstantiationError instantiationError0 = new InstantiationError("Q");
      assertNotNull(instantiationError0);
      assertEquals("java.lang.InstantiationError: Q", instantiationError0.toString());
      assertEquals("Q", instantiationError0.getMessage());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(instantiationError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.InstantiationError: Q
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Locale locale0 = TypeUtils.toLocale("_b(|i");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("_B(|I", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("B(|I", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      Locale locale1 = Locale.JAPAN;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", locale1.getVariant());
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("JP", locale1.getCountry());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("ja_JP", locale1.toString());
      assertEquals("jpn", locale1.getISO3Language());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      String string0 = treeMap0.ceilingKey("_b(|i");
      assertNull(string0);
      assertEquals(0, treeMap0.size());
      
      boolean boolean0 = new Boolean("_b(|i");
      assertFalse(boolean0);
      
      Locale locale2 = TypeUtils.toLocale("_b(|i");
      assertNotNull(locale2);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertTrue(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getLanguage());
      assertEquals("B(|I", locale2.getCountry());
      assertEquals("", locale2.getISO3Language());
      assertEquals("_B(|I", locale2.toString());
      
      // Undeclared exception!
      try { 
        TypeUtils.fnv1a_64_lower((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Class<?> class0 = TypeUtils.loadClass("write", classLoader0, false);
      assertNull(class0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Class<?> class1 = TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
      assertNotNull(class1);
      assertEquals("class java.lang.String", class1.toString());
      assertFalse(class1.isPrimitive());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      
      InstantiationError instantiationError0 = new InstantiationError("Q");
      assertNotNull(instantiationError0);
      assertEquals("java.lang.InstantiationError: Q", instantiationError0.toString());
      assertEquals("Q", instantiationError0.getMessage());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(instantiationError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.InstantiationError: Q
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Date date0 = TypeUtils.castToSqlDate((Object) null);
      assertNull(date0);
      
      Class<Method> class0 = Method.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(class0, jSONType0);
      assertNull(class1);
      
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      assertNotNull(instant0);
      
      Timestamp timestamp0 = Timestamp.from(instant0);
      assertNotNull(timestamp0);
      assertEquals(320000000, timestamp0.getNanos());
      assertEquals("2014-02-14 20:21:21.32", timestamp0.toString());
      
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      assertNotNull(localDateTime0);
      
      Class<Rectangle> class0 = Rectangle.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
      
      Class<NumberFormat> class1 = NumberFormat.class;
      ChoiceFormat choiceFormat0 = new ChoiceFormat("Fa\"!Kt");
      assertNotNull(choiceFormat0);
      assertEquals(40, choiceFormat0.getMaximumIntegerDigits());
      assertEquals(1, choiceFormat0.getMinimumIntegerDigits());
      assertEquals("", choiceFormat0.toPattern());
      assertEquals(3, choiceFormat0.getMaximumFractionDigits());
      assertFalse(choiceFormat0.isParseIntegerOnly());
      assertTrue(choiceFormat0.isGroupingUsed());
      assertEquals(0, choiceFormat0.getMinimumFractionDigits());
      
      ChoiceFormat choiceFormat1 = (ChoiceFormat)TypeUtils.castToJavaBean((Object) choiceFormat0, class1);
      assertNotNull(choiceFormat1);
      assertSame(choiceFormat0, choiceFormat1);
      assertSame(choiceFormat1, choiceFormat0);
      assertEquals(40, choiceFormat0.getMaximumIntegerDigits());
      assertEquals(1, choiceFormat0.getMinimumIntegerDigits());
      assertEquals("", choiceFormat0.toPattern());
      assertEquals(3, choiceFormat0.getMaximumFractionDigits());
      assertFalse(choiceFormat0.isParseIntegerOnly());
      assertTrue(choiceFormat0.isGroupingUsed());
      assertEquals(0, choiceFormat0.getMinimumFractionDigits());
      assertEquals(3, choiceFormat1.getMaximumFractionDigits());
      assertFalse(choiceFormat1.isParseIntegerOnly());
      assertEquals(1, choiceFormat1.getMinimumIntegerDigits());
      assertEquals("", choiceFormat1.toPattern());
      assertEquals(40, choiceFormat1.getMaximumIntegerDigits());
      assertEquals(0, choiceFormat1.getMinimumFractionDigits());
      assertTrue(choiceFormat1.isGroupingUsed());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMDeserializerFactory0.classLoader);
      assertNotNull(aSMDeserializerFactory1);
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      ClassLoader classLoader1 = aSMDeserializerFactory1.classLoader.getParent();
      assertNotNull(classLoader1);
      assertSame(classLoader0, classLoader1);
      assertNotSame(aSMDeserializerFactory0, aSMDeserializerFactory1);
      assertNotSame(aSMDeserializerFactory1, aSMDeserializerFactory0);
      assertSame(classLoader1, classLoader0);
      assertFalse(aSMDeserializerFactory0.equals((Object)aSMDeserializerFactory1));
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      
      Integer integer0 = new Integer((-2129));
      assertNotNull(integer0);
      assertEquals((-2129), (int)integer0);
      
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) integer0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader1);
      assertSame(classLoader1, classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      Class<java.util.Date> class0 = java.util.Date.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      ObjectDeserializer objectDeserializer0 = parserConfig0.getDeserializer((Class<?>) class0, (Type) class0);
      assertNotNull(objectDeserializer0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals(12, objectDeserializer0.getFastMatchToken());
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      ClassLoader classLoader2 = classLoader0.getParent();
      assertNotNull(classLoader2);
      assertSame(classLoader0, classLoader1);
      assertFalse(classLoader2.equals((Object)classLoader0));
      assertFalse(classLoader2.equals((Object)classLoader1));
      
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig1);
      assertFalse(classLoader0.equals((Object)classLoader2));
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.fieldBased);
      
      Class<Integer> class1 = Integer.TYPE;
      assertNotNull(class1);
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("int", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (Type) class0, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.util.Date
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string0 = "Ljavajawt.Re}ctangle";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Ljavajawt.Re}ctangle");
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("Ljavajawt.Re}ctangle", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Ljavajawt.Re}ctangle", sQLFeatureNotSupportedException0.toString());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      assertNotNull(sQLException0);
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Throwable[] throwableArray0 = sQLException0.getSuppressed();
      assertNotNull(throwableArray0);
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      
      classLoader0.setPackageAssertionStatus("can not cast to byte, value : ", false);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Class<?> class1 = TypeUtils.getRawClass(class0);
      assertNotNull(class1);
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertEquals("class com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class1);
      assertNotNull(parameterizedTypeImpl0);
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertEquals("class com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap1);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      assertNotNull(aSMDeserializerFactory0);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig1);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      
      Class<Integer> class2 = Integer.TYPE;
      assertNotNull(class2);
      assertEquals("int", class2.toString());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertTrue(class2.isPrimitive());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "[F", (Type) class0, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      assertNotNull(instant0);
      
      Timestamp timestamp0 = Timestamp.from(instant0);
      assertNotNull(timestamp0);
      assertEquals(320000000, timestamp0.getNanos());
      assertEquals("2014-02-14 20:21:21.32", timestamp0.toString());
      
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      assertNotNull(localDateTime0);
      
      Timestamp timestamp1 = Timestamp.valueOf(localDateTime0);
      assertNotNull(timestamp1);
      assertNotSame(timestamp1, timestamp0);
      assertTrue(timestamp1.equals((Object)timestamp0));
      assertEquals(320000000, timestamp1.getNanos());
      assertEquals("2014-02-14 20:21:21.32", timestamp1.toString());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "=v6^Ns";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      assertNotNull(simplePropertyPreFilter0);
      assertEquals(0, simplePropertyPreFilter0.getMaxLevel());
      
      Class<?> class0 = simplePropertyPreFilter0.getClazz();
      assertNull(class0);
      assertEquals(0, simplePropertyPreFilter0.getMaxLevel());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "=v6^Ns", (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      
      String string0 = "gethashCode";
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("gethashCode");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : gethashCode
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Class<?> class0 = TypeUtils.loadClass("write", classLoader0, false);
      assertNull(class0);
      
      Long long0 = new Long(150L);
      assertNotNull(long0);
      assertEquals(150L, (long)long0);
      
      Long long1 = TypeUtils.castToLong(long0);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      assertEquals(150L, (long)long1);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("gethashCode", 15);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(15, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals("Unknown", jSONReaderScanner0.tokenName());
      assertEquals('g', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      Locale locale0 = jSONReaderScanner0.getLocale();
      assertNotNull(locale0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(15, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals("Unknown", jSONReaderScanner0.tokenName());
      assertEquals('g', jSONReaderScanner0.getCurrent());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(locale0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMDeserializerFactory0.classLoader);
      assertNotNull(aSMDeserializerFactory1);
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      ClassLoader classLoader1 = aSMDeserializerFactory1.classLoader.getParent();
      assertNotNull(classLoader1);
      assertSame(classLoader0, classLoader1);
      assertNotSame(aSMDeserializerFactory0, aSMDeserializerFactory1);
      assertNotSame(aSMDeserializerFactory1, aSMDeserializerFactory0);
      assertSame(classLoader1, classLoader0);
      assertFalse(aSMDeserializerFactory0.equals((Object)aSMDeserializerFactory1));
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : sun.misc.Launcher$AppClassLoader@6bc7c054
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      
      Character character0 = TypeUtils.castToChar((Object) null);
      assertNull(character0);
      
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError("N");
      assertNotNull(noSuchMethodError0);
      assertEquals("N", noSuchMethodError0.getMessage());
      assertEquals("java.lang.NoSuchMethodError: N", noSuchMethodError0.toString());
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      TypeUtils.clearClassMapping();
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<Time> class0 = Time.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
      
      Float float0 = TypeUtils.castToFloat((Object) null);
      assertNull(float0);
      
      int int1 = TypeUtils.getParserFeatures(class0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      
      Class<ThrowableDeserializer> class1 = ThrowableDeserializer.class;
      Thread thread0 = MockThread.currentThread();
      assertNotNull(thread0);
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      
      MockThread mockThread0 = new MockThread();
      assertNotNull(mockThread0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertNotNull(classLoader0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) "gethashCode", class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      assertNotNull(instant0);
      
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      assertNotNull(localDateTime0);
      
      Class<Rectangle> class0 = Rectangle.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Class<Date> class1 = Date.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class1, (Map<String, String>) null, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
      
      Class<SQLNonTransientConnectionException> class2 = SQLNonTransientConnectionException.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      Type type0 = TypeUtils.getGenericParamType(class2);
      assertNull(type0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Y`)tNEZx>H";
      stringArray0[1] = "Y`)tNEZx>H";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      assertNotNull(simplePropertyPreFilter0);
      assertEquals(0, simplePropertyPreFilter0.getMaxLevel());
      
      boolean boolean1 = TypeUtils.isGenericParamType(class1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      InstantiationException instantiationException0 = new InstantiationException();
      assertNotNull(instantiationException0);
      assertNull(instantiationException0.getMessage());
      assertEquals("java.lang.InstantiationException", instantiationException0.toString());
      
      boolean boolean2 = TypeUtils.isHibernateInitialized((Object) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Locale locale0 = TypeUtils.toLocale("_b9bG(i");
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("B9BG(I", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("_B9BG(I", locale0.toString());
      assertEquals("", locale0.getLanguage());
      
      Locale locale1 = Locale.JAPAN;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("JP", locale1.getCountry());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("ja_JP", locale1.toString());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      System.setCurrentTimeMillis((-4596L));
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) treeMap0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. java.sql.ClientInfoStatus
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader1);
      assertSame(classLoader1, classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      Constructor<MockMinguoDate>[] constructorArray0 = (Constructor<MockMinguoDate>[]) Array.newInstance(Constructor.class, 0);
      Constructor constructor0 = TypeUtils.getKoltinConstructor(constructorArray0);
      assertNull(constructor0);
      
      // Undeclared exception!
      try { 
        TypeUtils.setAccessible((AccessibleObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Long long0 = new Long((-2454L));
      assertNotNull(long0);
      assertEquals((-2454L), (long)long0);
      
      long long1 = Long.remainderUnsigned((-2454L), (-2454L));
      assertEquals(0L, long1);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("getgetNextException", 24);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('g', jSONReaderScanner0.getCurrent());
      assertEquals("Unknown", jSONReaderScanner0.tokenName());
      assertEquals(24, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      UUID uUID0 = jSONReaderScanner0.scanUUID('.');
      assertNull(uUID0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('g', jSONReaderScanner0.getCurrent());
      assertEquals("Unknown", jSONReaderScanner0.tokenName());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(24, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(jSONReaderScanner0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : com.alibaba.fastjson.parser.JSONReaderScanner@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<Method> class0 = Method.class;
      String string0 = "Bft<FvK";
      Class<NoClassDefFoundError> class1 = NoClassDefFoundError.class;
      Class<RenderingHints> class2 = RenderingHints.class;
      Class<PropertyNamingStrategy> class3 = PropertyNamingStrategy.class;
      Field[] fieldArray0 = new Field[0];
      Field field0 = TypeUtils.getField(class3, "Bft<FvK", fieldArray0);
      assertNull(field0);
      
      FieldInfo fieldInfo0 = new FieldInfo("Bft<FvK", class1, class2, class2, (Field) null, (-1599), 667, 667);
      assertNotNull(fieldInfo0);
      assertEquals("Bft<FvK", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertEquals(667, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.isEnum);
      assertEquals(667, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.getOnly);
      
      // Undeclared exception!
      try { 
        fieldInfo0.get(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.FieldInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertEquals("boolean", class0.toString());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError("N");
      assertNotNull(noSuchMethodError0);
      assertEquals("java.lang.NoSuchMethodError: N", noSuchMethodError0.toString());
      assertEquals("N", noSuchMethodError0.getMessage());
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      TypeUtils.clearClassMapping();
      Class<?> class1 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      assertNotNull(class1);
      assertEquals(1537, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isInterface());
      assertFalse(class1.isPrimitive());
      assertEquals("interface java.util.List", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isArray());
      
      // Undeclared exception!
      try { 
        TypeUtils.fnv1a_64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      assertNotNull(sQLException0);
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getMessage());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      
      SQLDataException sQLDataException0 = new SQLDataException("4oV%,[)", "4oV%,[)", sQLException0);
      assertNotNull(sQLDataException0);
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getMessage());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("4oV%,[)", sQLDataException0.getSQLState());
      assertEquals("4oV%,[)", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: 4oV%,[)", sQLDataException0.toString());
      
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.setClassAssertionStatus("[F", true);
      Throwable[] throwableArray0 = sQLException0.getSuppressed();
      assertNotNull(throwableArray0);
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getMessage());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      
      classLoader0.setPackageAssertionStatus("can not cast to byte, value : ", false);
      Throwable[] throwableArray1 = sQLDataException0.getSuppressed();
      assertNotNull(throwableArray1);
      assertSame(throwableArray1, throwableArray0);
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getMessage());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("4oV%,[)", sQLDataException0.getSQLState());
      assertEquals("4oV%,[)", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: 4oV%,[)", sQLDataException0.toString());
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      StackTraceElement stackTraceElement0 = new StackTraceElement("4oV%,[)", "^KLYUP", "[F", 21);
      assertNotNull(stackTraceElement0);
      assertEquals("^KLYUP", stackTraceElement0.getMethodName());
      assertEquals("4oV%,[).^KLYUP([F:21)", stackTraceElement0.toString());
      assertEquals(21, stackTraceElement0.getLineNumber());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("[F", stackTraceElement0.getFileName());
      assertEquals("4oV%,[)", stackTraceElement0.getClassName());
      
      Class<?> class1 = TypeUtils.getRawClass(class0);
      assertNotNull(class1);
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class1);
      assertNotNull(parameterizedTypeImpl0);
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException("4oV%,[)");
      assertNotNull(noSuchFieldException0);
      assertEquals("4oV%,[)", noSuchFieldException0.getMessage());
      assertEquals("java.lang.NoSuchFieldException: 4oV%,[)", noSuchFieldException0.toString());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("[F", "4oV%,[)", 21, hashMap1, sQLDataException0);
      assertNotNull(sQLClientInfoException0);
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getMessage());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("4oV%,[)", sQLDataException0.getSQLState());
      assertEquals("4oV%,[)", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: 4oV%,[)", sQLDataException0.toString());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals(21, sQLClientInfoException0.getErrorCode());
      assertEquals("4oV%,[)", sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: [F", sQLClientInfoException0.toString());
      assertEquals("[F", sQLClientInfoException0.getMessage());
      
      Insets insets0 = new Insets(718, 1859, 12, 2);
      assertNotNull(insets0);
      assertEquals(1859, insets0.left);
      assertEquals(2, insets0.right);
      assertEquals(12, insets0.bottom);
      assertEquals(718, insets0.top);
      
      // Undeclared exception!
      try { 
        TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Long long0 = new Long((-2442L));
      assertNotNull(long0);
      assertEquals((-2442L), (long)long0);
      
      Type[] typeArray0 = new Type[4];
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      assertNotNull(classLoader1);
      assertSame(classLoader0, classLoader1);
      assertSame(classLoader1, classLoader0);
      
      Class<?> class0 = TypeUtils.loadClass("", classLoader1, false);
      assertNull(class0);
      assertSame(classLoader0, classLoader1);
      assertSame(classLoader1, classLoader0);
      
      typeArray0[0] = (Type) null;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], typeArray0[0]);
      assertNotNull(parameterizedTypeImpl0);
      
      typeArray0[1] = (Type) parameterizedTypeImpl0;
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class1);
      assertNotNull(javaBeanSerializer0);
      
      Class<?> class2 = javaBeanSerializer0.getType();
      assertNotNull(class2);
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isSynthetic());
      assertEquals("class java.sql.SQLNonTransientException", class2.toString());
      assertFalse(class2.isEnum());
      assertFalse(class2.isInterface());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isArray());
      
      typeArray0[2] = (Type) class2;
      Class<?> class3 = JavaBeanInfo.getBuilderClass(class2, (JSONType) null);
      assertNull(class3);
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isSynthetic());
      assertEquals("class java.sql.SQLNonTransientException", class2.toString());
      assertFalse(class2.isEnum());
      assertFalse(class2.isInterface());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isArray());
      
      typeArray0[3] = (Type) null;
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, class1, typeArray0[0]);
      assertNotNull(parameterizedTypeImpl1);
      assertFalse(parameterizedTypeImpl1.equals((Object)parameterizedTypeImpl0));
      
      ClassLoader classLoader2 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader2);
      assertSame(classLoader2, classLoader0);
      assertSame(classLoader2, classLoader1);
      
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader2);
      assertNotNull(aSMDeserializerFactory1);
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory1);
      assertNotNull(parserConfig0);
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal((Object) null);
      assertNull(bigDecimal0);
      
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.sql.SQLNonTransientException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      assertNotNull(instant0);
      
      Timestamp timestamp0 = Timestamp.from(instant0);
      assertNotNull(timestamp0);
      assertEquals("2014-02-14 20:21:21.32", timestamp0.toString());
      assertEquals(320000000, timestamp0.getNanos());
      
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      assertNotNull(localDateTime0);
      
      Point point0 = new Point();
      assertNotNull(point0);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(timestamp0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"ja\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.setDefaultAssertionStatus(false);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      ParserConfig parserConfig1 = new ParserConfig(true);
      assertNotNull(parserConfig1);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertTrue(parserConfig1.fieldBased);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertNotNull(class1);
      assertFalse(class1.isAnnotation());
      assertEquals(1, class1.getModifiers());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      
      Class<?> class2 = TypeUtils.loadClass("fastjson.parser.autoTypeSupport", (ClassLoader) aSMDeserializerFactory0.classLoader, true);
      assertNull(class2);
      assertFalse(classLoader0.equals((Object)classLoader1));
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      assertEquals(PropertyNamingStrategy.KebabCase, propertyNamingStrategy0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(class1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Class<StringIndexOutOfBoundsException> class1 = StringIndexOutOfBoundsException.class;
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      Field field0 = treeMap0.put("Ljavajawt.Re}ctangle", (Field) null);
      assertNull(field0);
      assertEquals(1, treeMap0.size());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      StackTraceElement stackTraceElement0 = new StackTraceElement("fastjson.parser.deny", "Ljavajawt.Re}ctangle", "fastjson.parser.autoTypeAccept", (-298));
      assertNotNull(stackTraceElement0);
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("fastjson.parser.deny", stackTraceElement0.getClassName());
      assertEquals("Ljavajawt.Re}ctangle", stackTraceElement0.getMethodName());
      assertEquals("fastjson.parser.autoTypeAccept", stackTraceElement0.getFileName());
      assertEquals((-298), stackTraceElement0.getLineNumber());
      assertEquals("fastjson.parser.deny.Ljavajawt.Re}ctangle(fastjson.parser.autoTypeAccept)", stackTraceElement0.toString());
      
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class1);
      assertNotNull(parameterizedTypeImpl0);
      
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException("*`|yXGtr7/xOER");
      assertNotNull(noSuchFieldException0);
      assertEquals("*`|yXGtr7/xOER", noSuchFieldException0.getMessage());
      assertEquals("java.lang.NoSuchFieldException: *`|yXGtr7/xOER", noSuchFieldException0.toString());
      
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertFalse(boolean0);
      
      Class<Byte> class2 = Byte.TYPE;
      assertNotNull(class2);
      assertFalse(class2.isAnnotation());
      assertTrue(class2.isPrimitive());
      assertEquals(1041, class2.getModifiers());
      assertEquals("byte", class2.toString());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      
      Class class3 = (Class)TypeUtils.getCollectionItemType(class2);
      assertNotNull(class3);
      assertFalse(class2.isAnnotation());
      assertTrue(class2.isPrimitive());
      assertEquals(1041, class2.getModifiers());
      assertEquals("byte", class2.toString());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isArray());
      assertFalse(class3.isInterface());
      assertEquals("class java.lang.Object", class3.toString());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isAnnotation());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("Ljavajawt.Re}ctangle");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : Ljavajawt.Re}ctangle
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      HashMap<Field, IllegalMonitorStateException> hashMap0 = new HashMap<Field, IllegalMonitorStateException>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Collection<IllegalMonitorStateException> collection0 = hashMap0.values();
      assertNotNull(collection0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String[] stringArray0 = new String[9];
      stringArray0[2] = "sv%&&7";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      assertNotNull(simplePropertyPreFilter0);
      assertEquals(0, simplePropertyPreFilter0.getMaxLevel());
      
      Class<?> class0 = simplePropertyPreFilter0.getClazz();
      assertNull(class0);
      assertEquals(0, simplePropertyPreFilter0.getMaxLevel());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      assertFalse(classLoader0.equals((Object)classLoader1));
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      Class<Integer> class1 = Integer.TYPE;
      assertNotNull(class1);
      assertEquals("int", class1.toString());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "sv%&&7", (Type) class1, parserConfig0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"sv%&&7\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Long long0 = new Long((-2454L));
      assertNotNull(long0);
      assertEquals((-2454L), (long)long0);
      
      StackTraceElement stackTraceElement0 = new StackTraceElement("y", "Ljava.awt.Font", "y", (-919));
      assertNotNull(stackTraceElement0);
      assertEquals("y.Ljava.awt.Font(y)", stackTraceElement0.toString());
      assertEquals((-919), stackTraceElement0.getLineNumber());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("Ljava.awt.Font", stackTraceElement0.getMethodName());
      assertEquals("y", stackTraceElement0.getClassName());
      assertEquals("y", stackTraceElement0.getFileName());
      
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, (Type) null, (Type) null);
      assertNotNull(parameterizedTypeImpl0);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException("*`|yXGtr7/xOER");
      assertNotNull(noSuchFieldException0);
      assertEquals("java.lang.NoSuchFieldException: *`|yXGtr7/xOER", noSuchFieldException0.toString());
      assertEquals("*`|yXGtr7/xOER", noSuchFieldException0.getMessage());
      
      boolean boolean0 = TypeUtils.isGenericParamType(parameterizedTypeImpl0);
      assertTrue(boolean0);
      
      Class<Byte> class0 = Byte.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isInterface());
      assertEquals("byte", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertFalse(class0.isAnnotation());
      
      Class class1 = (Class)TypeUtils.getCollectionItemType((Type) null);
      assertNotNull(class1);
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.lang.Object", class1.toString());
      assertEquals(1, class1.getModifiers());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Timestamp timestamp0 = TypeUtils.castToTimestamp((Object) null);
      assertNull(timestamp0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Class<Timestamp> class2 = Timestamp.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class2, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
      assertTrue(concurrentHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      assertNotNull(sQLException0);
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getSQLState());
      assertNull(sQLException0.getMessage());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      
      SQLDataException sQLDataException0 = new SQLDataException("4oV%,[)", "4oV%,[)", sQLException0);
      assertNotNull(sQLDataException0);
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getSQLState());
      assertNull(sQLException0.getMessage());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("4oV%,[)", sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: 4oV%,[)", sQLDataException0.toString());
      assertEquals("4oV%,[)", sQLDataException0.getMessage());
      
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.setClassAssertionStatus("[F", false);
      Throwable[] throwableArray0 = sQLException0.getSuppressed();
      assertNotNull(throwableArray0);
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getSQLState());
      assertNull(sQLException0.getMessage());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      
      classLoader0.setPackageAssertionStatus("can not cast to byte, value : ", false);
      Throwable[] throwableArray1 = sQLDataException0.getSuppressed();
      assertNotNull(throwableArray1);
      assertSame(throwableArray1, throwableArray0);
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getSQLState());
      assertNull(sQLException0.getMessage());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("4oV%,[)", sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: 4oV%,[)", sQLDataException0.toString());
      assertEquals("4oV%,[)", sQLDataException0.getMessage());
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      BiFunction<String, String, String> biFunction0 = (BiFunction<String, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = hashMap0.computeIfPresent("[F", biFunction0);
      assertNull(string0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Class<PropertyNamingStrategy> class1 = PropertyNamingStrategy.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "4oV%,[)";
      stringArray0[1] = "can not cast to byte, value : ";
      stringArray0[2] = "[F";
      stringArray0[3] = "[F";
      stringArray0[4] = "4oV%,[)";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      assertNotNull(simplePropertyPreFilter0);
      assertEquals(0, simplePropertyPreFilter0.getMaxLevel());
      
      Class<?> class2 = simplePropertyPreFilter0.getClazz();
      assertNull(class2);
      assertEquals(0, simplePropertyPreFilter0.getMaxLevel());
      
      boolean boolean0 = TypeUtils.isGenericParamType(class1);
      assertTrue(boolean0);
      
      Class class3 = (Class)TypeUtils.getCollectionItemType(class0);
      assertNotNull(class3);
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isInterface());
      assertEquals("class java.lang.Object", class3.toString());
      assertFalse(class3.isArray());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("Ljava.lang.AutoCloseable");
      assertFalse(boolean0);
      
      Locale locale0 = TypeUtils.toLocale("Ljava.lang.AutoCloseable");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ljava.lang.autocloseable", locale0.getLanguage());
      assertEquals("ljava.lang.autocloseable", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      Locale locale1 = Locale.JAPAN;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("ja_JP", locale1.toString());
      assertEquals("JP", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("JPN", locale1.getISO3Country());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Class<Locale> class0 = Locale.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) treeMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
      assertEquals(0, treeMap0.size());
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Ljava.lang.AutoCloseable";
      Class<ChronoLocalDate> class1 = ChronoLocalDate.class;
      SerializeBeanInfo serializeBeanInfo1 = TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) treeMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo1);
      assertNotSame(serializeBeanInfo1, serializeBeanInfo0);
      assertFalse(serializeBeanInfo1.equals((Object)serializeBeanInfo0));
      assertEquals(0, treeMap0.size());
      
      SecurityException securityException0 = new SecurityException();
      assertNotNull(securityException0);
      assertEquals("java.lang.SecurityException", securityException0.toString());
      assertNull(securityException0.getMessage());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(securityException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : java.lang.SecurityException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("-~Nx");
      assertEquals((-5933105371621898561L), long0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("-~Nx");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-~Nx\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Locale locale0 = TypeUtils.toLocale("_b(|i");
      assertNotNull(locale0);
      assertEquals("B(|I", locale0.getCountry());
      assertEquals("_B(|I", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      
      Locale locale1 = Locale.JAPAN;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja_JP", locale1.toString());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("JP", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      ThreadGroup threadGroup0 = new ThreadGroup("#|.Q46?0");
      assertNotNull(threadGroup0);
      assertEquals("#|.Q46?0", threadGroup0.getName());
      
      MockThread mockThread0 = new MockThread();
      assertNotNull(mockThread0);
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "kq&^N~F>4\"Cmm.(G+0|", 0L);
      assertNotNull(mockThread1);
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertEquals("#|.Q46?0", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      
      StackTraceElement stackTraceElement0 = new StackTraceElement("kq&^N~F>4\"Cmm.(G+0|", "=t", "=t", 47);
      assertNotNull(stackTraceElement0);
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals(47, stackTraceElement0.getLineNumber());
      assertEquals("=t", stackTraceElement0.getFileName());
      assertEquals("kq&^N~F>4\"Cmm.(G+0|.=t(=t:47)", stackTraceElement0.toString());
      assertEquals("=t", stackTraceElement0.getMethodName());
      assertEquals("kq&^N~F>4\"Cmm.(G+0|", stackTraceElement0.getClassName());
      
      Class<Calendar> class0 = Calendar.class;
      Class<MockMinguoDate> class1 = MockMinguoDate.class;
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      assertNotNull(weakHashMap0);
      
      Field field0 = ParserConfig.getFieldFromCache(";Ljava/lang/reflect/Type;Ljava/lang/Object;)Ljava/lang/Object;", weakHashMap0);
      assertNull(field0);
      
      FieldInfo fieldInfo0 = new FieldInfo("kq&^N~F>4\"Cmm.(G+0|", class1, class1, class1, (Field) null, 47, 1706, (-26752530));
      assertNotNull(fieldInfo0);
      assertEquals("kq&^N~F>4\"Cmm.(G+0|", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertEquals((-26752530), fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.isEnum);
      assertEquals(1706, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.getOnly);
      
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      assertNotNull(beanContext0);
      assertEquals("kq&^N~F>4\"Cmm.(G+0|", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertEquals("", beanContext0.getLabel());
      assertEquals("kq&^N~F>4\"Cmm.(G+0|", beanContext0.getName());
      assertFalse(beanContext0.isJsonDirect());
      assertEquals(1706, beanContext0.getFeatures());
      assertNull(beanContext0.getFormat());
      assertEquals((-26752530), fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.isEnum);
      assertEquals(1706, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.getOnly);
      
      Class<?> class2 = beanContext0.getBeanClass();
      assertNotNull(class2);
      assertEquals("kq&^N~F>4\"Cmm.(G+0|", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertEquals("", beanContext0.getLabel());
      assertEquals("kq&^N~F>4\"Cmm.(G+0|", beanContext0.getName());
      assertFalse(beanContext0.isJsonDirect());
      assertEquals(1706, beanContext0.getFeatures());
      assertNull(beanContext0.getFormat());
      assertEquals(1025, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("class java.util.Calendar", class2.toString());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals((-26752530), fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.isEnum);
      assertEquals(1706, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.getOnly);
      
      Class<?> class3 = TypeUtils.getRawClass(class2);
      assertNotNull(class3);
      assertSame(class3, class2);
      assertSame(class2, class3);
      assertFalse(class3.isAnnotation());
      assertEquals("class java.util.Calendar", class3.toString());
      assertEquals(1025, class3.getModifiers());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isArray());
      assertFalse(class3.isInterface());
      assertFalse(class3.isPrimitive());
      assertEquals("kq&^N~F>4\"Cmm.(G+0|", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertEquals("", beanContext0.getLabel());
      assertEquals("kq&^N~F>4\"Cmm.(G+0|", beanContext0.getName());
      assertFalse(beanContext0.isJsonDirect());
      assertEquals(1706, beanContext0.getFeatures());
      assertNull(beanContext0.getFormat());
      assertEquals(1025, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("class java.util.Calendar", class2.toString());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals((-26752530), fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.isEnum);
      assertEquals(1706, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.getOnly);
      
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, fieldInfo0.declaringClass, class1);
      assertNotNull(parameterizedTypeImpl0);
      assertEquals("kq&^N~F>4\"Cmm.(G+0|", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertEquals((-26752530), fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.isEnum);
      assertEquals(1706, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.getOnly);
      
      Class<?> class4 = TypeUtils.getClass((Type) parameterizedTypeImpl0);
      assertNotNull(class4);
      assertNotSame(class4, class3);
      assertNotSame(class4, class2);
      assertFalse(class4.equals((Object)class3));
      assertFalse(class4.equals((Object)class2));
      assertFalse(class4.isEnum());
      assertFalse(class4.isAnnotation());
      assertEquals("class org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate", class4.toString());
      assertFalse(class4.isSynthetic());
      assertFalse(class4.isPrimitive());
      assertEquals(1, class4.getModifiers());
      assertFalse(class4.isArray());
      assertFalse(class4.isInterface());
      assertEquals("kq&^N~F>4\"Cmm.(G+0|", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertEquals((-26752530), fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.isEnum);
      assertEquals(1706, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.getOnly);
      
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl((Type[]) null, fieldInfo0.declaringClass, fieldInfo0.fieldType);
      assertNotNull(parameterizedTypeImpl1);
      assertTrue(parameterizedTypeImpl1.equals((Object)parameterizedTypeImpl0));
      assertEquals("kq&^N~F>4\"Cmm.(G+0|", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertEquals((-26752530), fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.isEnum);
      assertEquals(1706, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.getOnly);
      
      NumberFormatException numberFormatException0 = new NumberFormatException();
      assertNotNull(numberFormatException0);
      assertNull(numberFormatException0.getMessage());
      assertEquals("java.lang.NumberFormatException", numberFormatException0.toString());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(class2);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Locale locale0 = TypeUtils.toLocale("_b(|i");
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("B(|I", locale0.getCountry());
      assertEquals("_B(|I", locale0.toString());
      
      Locale locale1 = Locale.JAPAN;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja_JP", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("JP", locale1.getCountry());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      ThreadGroup threadGroup0 = new ThreadGroup("#|.Q46?0");
      assertNotNull(threadGroup0);
      assertEquals("#|.Q46?0", threadGroup0.getName());
      
      MockThread mockThread0 = new MockThread();
      assertNotNull(mockThread0);
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "_b(|i", 0L);
      assertNotNull(mockThread1);
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertEquals("#|.Q46?0", threadGroup0.getName());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      
      StackTraceElement stackTraceElement0 = new StackTraceElement("#|.Q46?0", "=t", "=t", 47);
      assertNotNull(stackTraceElement0);
      assertEquals("#|.Q46?0", stackTraceElement0.getClassName());
      assertEquals(47, stackTraceElement0.getLineNumber());
      assertEquals("#|.Q46?0.=t(=t:47)", stackTraceElement0.toString());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("=t", stackTraceElement0.getFileName());
      assertEquals("=t", stackTraceElement0.getMethodName());
      
      Class<Calendar> class0 = Calendar.class;
      Class<MockMinguoDate> class1 = MockMinguoDate.class;
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      assertNotNull(weakHashMap0);
      
      Field field0 = ParserConfig.getFieldFromCache(";Ljava/lang/reflect/Type;Ljava/lang/Object;)Ljava/lang/Object;", weakHashMap0);
      assertNull(field0);
      
      FieldInfo fieldInfo0 = new FieldInfo("#|.Q46?0", class1, class1, class1, (Field) null, 47, 1706, (-26752530));
      assertNotNull(fieldInfo0);
      assertEquals("#|.Q46?0", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertFalse(fieldInfo0.getOnly);
      assertEquals((-26752530), fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.isEnum);
      assertEquals(1706, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.fieldTransient);
      
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      assertNotNull(beanContext0);
      assertEquals("#|.Q46?0", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertFalse(beanContext0.isJsonDirect());
      assertEquals("#|.Q46?0", beanContext0.getName());
      assertNull(beanContext0.getFormat());
      assertEquals(1706, beanContext0.getFeatures());
      assertEquals("", beanContext0.getLabel());
      assertFalse(fieldInfo0.getOnly);
      assertEquals((-26752530), fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.isEnum);
      assertEquals(1706, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.fieldTransient);
      
      Class<?> class2 = beanContext0.getBeanClass();
      assertNotNull(class2);
      assertEquals("#|.Q46?0", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertFalse(beanContext0.isJsonDirect());
      assertEquals("#|.Q46?0", beanContext0.getName());
      assertNull(beanContext0.getFormat());
      assertEquals(1706, beanContext0.getFeatures());
      assertEquals("", beanContext0.getLabel());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(1025, class2.getModifiers());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isEnum());
      assertEquals("class java.util.Calendar", class2.toString());
      assertFalse(class2.isAnnotation());
      assertFalse(fieldInfo0.getOnly);
      assertEquals((-26752530), fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.isEnum);
      assertEquals(1706, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.fieldTransient);
      
      Class<?> class3 = TypeUtils.getRawClass(class2);
      assertNotNull(class3);
      assertSame(class3, class2);
      assertSame(class2, class3);
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isInterface());
      assertEquals("class java.util.Calendar", class3.toString());
      assertFalse(class3.isArray());
      assertEquals(1025, class3.getModifiers());
      assertEquals("#|.Q46?0", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertFalse(beanContext0.isJsonDirect());
      assertEquals("#|.Q46?0", beanContext0.getName());
      assertNull(beanContext0.getFormat());
      assertEquals(1706, beanContext0.getFeatures());
      assertEquals("", beanContext0.getLabel());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(1025, class2.getModifiers());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isEnum());
      assertEquals("class java.util.Calendar", class2.toString());
      assertFalse(class2.isAnnotation());
      assertFalse(fieldInfo0.getOnly);
      assertEquals((-26752530), fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.isEnum);
      assertEquals(1706, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.fieldTransient);
      
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, fieldInfo0.declaringClass, class1);
      assertNotNull(parameterizedTypeImpl0);
      assertEquals("#|.Q46?0", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertFalse(fieldInfo0.getOnly);
      assertEquals((-26752530), fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.isEnum);
      assertEquals(1706, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.fieldTransient);
      
      Class<?> class4 = TypeUtils.getClass((Type) parameterizedTypeImpl0);
      assertNotNull(class4);
      assertNotSame(class4, class2);
      assertNotSame(class4, class3);
      assertFalse(class4.equals((Object)class2));
      assertFalse(class4.equals((Object)class3));
      assertFalse(class4.isInterface());
      assertFalse(class4.isArray());
      assertEquals(1, class4.getModifiers());
      assertEquals("class org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate", class4.toString());
      assertFalse(class4.isAnnotation());
      assertFalse(class4.isPrimitive());
      assertFalse(class4.isEnum());
      assertFalse(class4.isSynthetic());
      assertEquals("#|.Q46?0", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertFalse(fieldInfo0.getOnly);
      assertEquals((-26752530), fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.isEnum);
      assertEquals(1706, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.fieldTransient);
      
      NumberFormatException numberFormatException0 = new NumberFormatException();
      assertNotNull(numberFormatException0);
      assertNull(numberFormatException0.getMessage());
      assertEquals("java.lang.NumberFormatException", numberFormatException0.toString());
      
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) numberFormatException0, (Type) class3, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.NumberFormatException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<OptionalCodec> class0 = OptionalCodec.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader1);
      assertSame(classLoader1, classLoader0);
      
      System.setCurrentTimeMillis(1L);
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      ParserConfig parserConfig1 = new ParserConfig(false);
      assertNotNull(parserConfig1);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, class1, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.ClientInfoStatus
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertNotNull(linkedHashMap0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Class<Long> class0 = Long.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      
      Class<SQLWarning> class1 = SQLWarning.class;
      boolean boolean0 = TypeUtils.isProxy(class1);
      assertFalse(boolean0);
      
      Class<Long> class2 = Long.TYPE;
      assertNotNull(class2);
      assertNotSame(class2, class0);
      assertFalse(class2.equals((Object)class0));
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertEquals("long", class2.toString());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(1041, class2.getModifiers());
      
      Type type0 = TypeUtils.getGenericParamType(class2);
      assertNull(type0);
      assertNotSame(class2, class0);
      assertFalse(class2.equals((Object)class0));
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertEquals("long", class2.toString());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(1041, class2.getModifiers());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      Class<?> class3 = TypeUtils.loadClass("_H[jsH/ed<>uF|wj", classLoader0);
      assertNull(class3);
      assertFalse(classLoader0.equals((Object)classLoader1));
      
      long long0 = TypeUtils.fnv1a_64_lower("Y`)tNEZx>H");
      assertEquals(8110474486261214588L, long0);
      
      Double double0 = new Double(8110474486261214588L);
      assertNotNull(double0);
      assertEquals(8.1104744862612142E18, (double)double0, 0.01);
      
      Short short0 = TypeUtils.castToShort(double0);
      assertNotNull(short0);
      assertEquals((short) (-1), (short)short0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      assertNotNull(sQLException0);
      assertNull(sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Throwable[] throwableArray0 = sQLException0.getSuppressed();
      assertNotNull(throwableArray0);
      assertNull(sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      
      classLoader0.setPackageAssertionStatus("can not cast to byte, value : ", false);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Class<?> class1 = TypeUtils.getRawClass(class0);
      assertNotNull(class1);
      assertEquals("class com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer", class1.toString());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class1);
      assertNotNull(parameterizedTypeImpl0);
      assertEquals("class com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer", class1.toString());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      
      Class<SQLInvalidAuthorizationSpecException> class2 = SQLInvalidAuthorizationSpecException.class;
      ObjectDeserializer objectDeserializer0 = parserConfig0.getDeserializer((Class<?>) class2, (Type) class0);
      assertNotNull(objectDeserializer0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(12, objectDeserializer0.getFastMatchToken());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      assertNotNull(aSMDeserializerFactory0);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig1);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.fieldBased);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      BigInteger bigInteger0 = TypeUtils.castToBigInteger((Object) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      HashMap<Field, IllegalMonitorStateException> hashMap0 = new HashMap<Field, IllegalMonitorStateException>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Collection<IllegalMonitorStateException> collection0 = hashMap0.values();
      assertNotNull(collection0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String[] stringArray0 = new String[9];
      stringArray0[2] = "sv%&&7";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      assertNotNull(simplePropertyPreFilter0);
      assertEquals(0, simplePropertyPreFilter0.getMaxLevel());
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, (PropertyNamingStrategy) null, false, false);
      assertNotNull(javaBeanInfo0);
      assertEquals(0, javaBeanInfo0.parserFeatures);
      assertEquals(0, javaBeanInfo0.defaultConstructorParameterSize);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      SimplePropertyPreFilter simplePropertyPreFilter1 = new SimplePropertyPreFilter(stringArray0);
      assertNotNull(simplePropertyPreFilter1);
      assertFalse(simplePropertyPreFilter1.equals((Object)simplePropertyPreFilter0));
      assertEquals(0, simplePropertyPreFilter1.getMaxLevel());
      
      Class<?> class1 = simplePropertyPreFilter0.getClazz();
      assertNull(class1);
      assertNotSame(simplePropertyPreFilter0, simplePropertyPreFilter1);
      assertFalse(simplePropertyPreFilter0.equals((Object)simplePropertyPreFilter1));
      assertEquals(0, simplePropertyPreFilter0.getMaxLevel());
      
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError();
      assertNotNull(noClassDefFoundError0);
      assertNull(noClassDefFoundError0.getMessage());
      assertEquals("java.lang.NoClassDefFoundError", noClassDefFoundError0.toString());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(noClassDefFoundError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : java.lang.NoClassDefFoundError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string0 = hashMap0.put("Ljava.awt.Rectangle", "Ljava.awt.Rectangle");
      assertNull(string0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      String string1 = hashMap0.put("z_hp[S|z=-yMTUn", "");
      assertNull(string1);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      String string2 = hashMap0.replace("Ljava.awt.Rectangle", "");
      assertNotNull(string2);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals("Ljava.awt.Rectangle", string2);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "z_hp[S|z=-yMTUn";
      stringArray0[1] = "";
      stringArray0[2] = "z_hp[S|z=-yMTUn";
      stringArray0[3] = "";
      stringArray0[4] = null;
      Class<NumberFormat> class0 = NumberFormat.class;
      NumberFormat numberFormat0 = TypeUtils.castToJavaBean((Object) "", class0);
      assertNull(numberFormat0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Type type0 = TypeUtils.getGenericParamType(parameterizedTypeImpl0);
      assertNotNull(type0);
      assertSame(parameterizedTypeImpl0, type0);
      assertSame(type0, parameterizedTypeImpl0);
      
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parseObject("pos ", featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : pos 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.setDefaultAssertionStatus(true);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string0 = hashMap0.put("z_hp[S|z=-yMTUn", "z_hp[S|z=-yMTUn");
      assertNull(string0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      String string1 = "Ljava.util.concurrent.ConcurrentSkipListSet";
      String string2 = hashMap0.replace((String) null, "Ljava.util.concurrent.ConcurrentSkipListSet");
      assertNull(string2);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      hashMap0.clear();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string3 = hashMap0.computeIfPresent("Ljava.util.concurrent.ConcurrentSkipListSet", biFunction0);
      assertNull(string3);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Class<Double> class0 = Double.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : sun.misc.Launcher$AppClassLoader@6bc7c054
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Long long0 = new Long((-2454L));
      assertNotNull(long0);
      assertEquals((-2454L), (long)long0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      Class<java.util.Date> class0 = java.util.Date.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      
      ObjectDeserializer objectDeserializer0 = parserConfig0.getDeserializer((Class<?>) class0, (Type) class0);
      assertNotNull(objectDeserializer0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals(12, objectDeserializer0.getFastMatchToken());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      
      ThreadGroup threadGroup0 = new ThreadGroup("fillInStackTrace");
      assertNotNull(threadGroup0);
      assertEquals("fillInStackTrace", threadGroup0.getName());
      
      MockThread mockThread0 = new MockThread((Runnable) null);
      assertNotNull(mockThread0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0);
      assertNotNull(mockThread1);
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertEquals("fillInStackTrace", threadGroup0.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      
      MockThread mockThread2 = new MockThread(threadGroup0, mockThread1, "fastjson.parser.autoTypeSupport", (-2454L));
      assertNotNull(mockThread2);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertEquals("fillInStackTrace", threadGroup0.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isDaemon());
      
      ClassLoader classLoader0 = mockThread2.getContextClassLoader();
      assertNotNull(classLoader0);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread0);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread2, mockThread1);
      assertNotSame(mockThread2, mockThread0);
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertEquals("fillInStackTrace", threadGroup0.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isDaemon());
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertEquals("fillInStackTrace", threadGroup0.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isDaemon());
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      assertNotNull(classLoader1);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread0);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread2, mockThread1);
      assertNotSame(mockThread2, mockThread0);
      assertSame(classLoader0, classLoader1);
      assertSame(classLoader1, classLoader0);
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertEquals("fillInStackTrace", threadGroup0.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isDaemon());
      
      ClassLoader classLoader2 = classLoader1.getParent();
      assertNotNull(classLoader2);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread0);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread2, mockThread1);
      assertNotSame(mockThread2, mockThread0);
      assertSame(classLoader0, classLoader1);
      assertSame(classLoader1, classLoader0);
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(classLoader2.equals((Object)classLoader0));
      assertFalse(classLoader2.equals((Object)classLoader1));
      assertEquals("fillInStackTrace", threadGroup0.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isDaemon());
      
      Class<AtomicInteger> class1 = AtomicInteger.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) treeMap0, (PropertyNamingStrategy) null);
      assertNotNull(serializeBeanInfo0);
      assertEquals(0, treeMap0.size());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<NoClassDefFoundError> class0 = NoClassDefFoundError.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[19];
      stringArray0[0] = "=v6^Ns";
      String string0 = "a";
      stringArray0[1] = "a";
      stringArray0[2] = "=v6^Ns";
      stringArray0[3] = "=v6^Ns";
      stringArray0[4] = "=v6^Ns";
      stringArray0[5] = "=v6^Ns";
      stringArray0[6] = "=v6^Ns";
      stringArray0[7] = "=v6^Ns";
      stringArray0[8] = "=v6^Ns";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      assertNotNull(simplePropertyPreFilter0);
      assertEquals(0, simplePropertyPreFilter0.getMaxLevel());
      
      Class<?> class1 = simplePropertyPreFilter0.getClazz();
      assertNull(class1);
      assertEquals(0, simplePropertyPreFilter0.getMaxLevel());
      
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = (Type) null;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      Class<Integer> class2 = Integer.TYPE;
      assertNotNull(class2);
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertTrue(class2.isPrimitive());
      assertEquals("int", class2.toString());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class2, class2);
      assertNotNull(parameterizedTypeImpl0);
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertTrue(class2.isPrimitive());
      assertEquals("int", class2.toString());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMClassLoader0);
      assertNotNull(aSMDeserializerFactory1);
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertFalse(aSMDeserializerFactory0.equals((Object)aSMDeserializerFactory1));
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      
      NumberDeserializer numberDeserializer0 = NumberDeserializer.instance;
      assertNotNull(numberDeserializer0);
      assertEquals(2, numberDeserializer0.getFastMatchToken());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) numberDeserializer0, (Type) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseInt error, field : null
         //
         verifyException("com.alibaba.fastjson.serializer.IntegerCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("Ljava.lang.AutoCloseable");
      assertFalse(boolean0);
      
      Locale locale0 = TypeUtils.toLocale("Ljava.lang.AutoCloseable");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ljava.lang.autocloseable", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("ljava.lang.autocloseable", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      boolean boolean1 = TypeUtils.isProxy(class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      StackTraceElement stackTraceElement0 = new StackTraceElement("isdoubleValue", "fastjson.parser.deny", "lon", (-298));
      assertNotNull(stackTraceElement0);
      assertEquals("lon", stackTraceElement0.getFileName());
      assertEquals("isdoubleValue.fastjson.parser.deny(lon)", stackTraceElement0.toString());
      assertEquals("isdoubleValue", stackTraceElement0.getClassName());
      assertEquals((-298), stackTraceElement0.getLineNumber());
      assertEquals("fastjson.parser.deny", stackTraceElement0.getMethodName());
      assertFalse(stackTraceElement0.isNativeMethod());
      
      Class<?> class1 = TypeUtils.getRawClass(class0);
      assertNotNull(class1);
      assertFalse(class1.isAnnotation());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", class1.toString());
      
      Type[] typeArray0 = new Type[9];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class1;
      typeArray0[5] = (Type) class1;
      typeArray0[6] = (Type) class1;
      typeArray0[7] = (Type) class0;
      typeArray0[8] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[3], typeArray0[2]);
      assertNotNull(parameterizedTypeImpl0);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException("Ljava.lang.AutoCloseable");
      assertNotNull(noSuchFieldException0);
      assertEquals("Ljava.lang.AutoCloseable", noSuchFieldException0.getMessage());
      assertEquals("java.lang.NoSuchFieldException: Ljava.lang.AutoCloseable", noSuchFieldException0.toString());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("in", "jXCG (i", (-298), hashMap0, noSuchFieldException0);
      assertNotNull(sQLClientInfoException0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("Ljava.lang.AutoCloseable", noSuchFieldException0.getMessage());
      assertEquals("java.lang.NoSuchFieldException: Ljava.lang.AutoCloseable", noSuchFieldException0.toString());
      assertEquals("in", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: in", sQLClientInfoException0.toString());
      assertEquals((-298), sQLClientInfoException0.getErrorCode());
      assertEquals("jXCG (i", sQLClientInfoException0.getSQLState());
      
      OptionalCodec optionalCodec0 = new OptionalCodec();
      assertNotNull(optionalCodec0);
      assertEquals(12, optionalCodec0.getFastMatchToken());
      
      Class<Byte> class2 = Byte.TYPE;
      assertNotNull(class2);
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("byte", class2.toString());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) optionalCodec0, (Type) class2, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : com.alibaba.fastjson.parser.deserializer.OptionalCodec@97
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      Class<?> class1 = TypeUtils.loadClass("Ljavajawt.Re}ctangle", (ClassLoader) aSMDeserializerFactory0.classLoader);
      assertNull(class1);
      
      ObjectDeserializer objectDeserializer0 = parserConfig0.getDeserializer((Class<?>) class0, (Type) null);
      assertNotNull(objectDeserializer0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(12, objectDeserializer0.getFastMatchToken());
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      Class<Integer> class2 = Integer.TYPE;
      assertNotNull(class2);
      assertFalse(class2.isAnnotation());
      assertEquals("int", class2.toString());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertTrue(class2.isPrimitive());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      
      LinkedHashMap<Character, Timestamp> linkedHashMap0 = new LinkedHashMap<Character, Timestamp>();
      assertNotNull(linkedHashMap0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      
      Short short0 = new Short((short)80);
      assertNotNull(short0);
      assertEquals((short)80, (short)short0);
      
      Type[] typeArray0 = new Type[8];
      typeArray0[0] = (Type) class2;
      typeArray0[1] = (Type) class2;
      typeArray0[2] = (Type) class2;
      Class<Long> class3 = Long.TYPE;
      assertNotNull(class3);
      assertEquals(1041, class3.getModifiers());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isEnum());
      assertEquals("long", class3.toString());
      assertTrue(class3.isPrimitive());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      
      typeArray0[3] = (Type) class3;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) class2;
      typeArray0[6] = (Type) class0;
      typeArray0[7] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class3, class2);
      assertNotNull(parameterizedTypeImpl0);
      assertFalse(class2.isAnnotation());
      assertEquals("int", class2.toString());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertTrue(class2.isPrimitive());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1041, class3.getModifiers());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isEnum());
      assertEquals("long", class3.toString());
      assertTrue(class3.isPrimitive());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      
      Class<Long> class4 = Long.TYPE;
      assertNotNull(class4);
      assertSame(class4, class3);
      assertFalse(class4.isAnnotation());
      assertEquals("long", class4.toString());
      assertFalse(class4.isEnum());
      assertFalse(class4.isSynthetic());
      assertTrue(class4.isPrimitive());
      assertFalse(class4.isInterface());
      assertFalse(class4.isArray());
      assertEquals(1041, class4.getModifiers());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) typeArray0[6], (Type) class4, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : class java.lang.RuntimeException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      System.setCurrentTimeMillis(818L);
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      TypeUtils.cast((Object) null, class0, parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      HashMap<Field, IllegalMonitorStateException> hashMap0 = new HashMap<Field, IllegalMonitorStateException>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Collection<IllegalMonitorStateException> collection0 = hashMap0.values();
      assertNotNull(collection0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String[] stringArray0 = new String[9];
      stringArray0[2] = "sv%&&7";
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, map0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      
      Class<GridBagConstraints> class1 = GridBagConstraints.class;
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo1 = TypeUtils.buildBeanInfo(class1, map0, propertyNamingStrategy1, true);
      assertNotNull(serializeBeanInfo1);
      assertNotSame(propertyNamingStrategy1, propertyNamingStrategy0);
      assertNotSame(serializeBeanInfo1, serializeBeanInfo0);
      assertFalse(propertyNamingStrategy1.equals((Object)propertyNamingStrategy0));
      assertFalse(serializeBeanInfo1.equals((Object)serializeBeanInfo0));
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      
      BreakIterator breakIterator0 = BreakIterator.getWordInstance();
      assertNotNull(breakIterator0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("sv%&&7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : sv%&&7
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "4b{(&Pt");
      assertFalse(boolean0);
      
      Class<Boolean> class0 = Boolean.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      assertNotNull(javaBeanSerializer0);
      
      List<Object> list0 = javaBeanSerializer0.getObjectFieldValues(class0);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      List<AfterFilter> list1 = javaBeanSerializer0.getAfterFilters();
      assertNotNull(list1);
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      
      Class<?> class1 = javaBeanSerializer0.getType();
      assertNotNull(class1);
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.Boolean", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      
      Class<?> class2 = TypeUtils.getCollectionItemClass(class1);
      assertNotNull(class2);
      assertNotSame(class1, class2);
      assertNotSame(class2, class1);
      assertFalse(class2.equals((Object)class1));
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.Boolean", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class2.isInterface());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isArray());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      
      Random.setNextRandom((-26760553));
      List<FieldInfo> list2 = TypeUtils.computeGetters(class2, (Map<String, String>) null);
      assertNotNull(list2);
      assertNotSame(class1, class2);
      assertNotSame(class2, class1);
      assertFalse(class1.equals((Object)class2));
      assertFalse(class2.equals((Object)class1));
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.Boolean", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class2.isInterface());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isArray());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      List<FieldInfo> list3 = TypeUtils.computeGettersWithFieldBase(class2, (Map<String, String>) null, false, propertyNamingStrategy0);
      assertNotNull(list3);
      assertNotSame(class1, class2);
      assertNotSame(class2, class1);
      assertNotSame(list3, list2);
      assertFalse(class1.equals((Object)class2));
      assertFalse(class2.equals((Object)class1));
      assertTrue(list3.equals((Object)list2));
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.Boolean", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class2.isInterface());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isArray());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      
      Integer integer0 = new Integer(1835);
      assertNotNull(integer0);
      assertEquals(1835, (int)integer0);
      
      Boolean boolean1 = TypeUtils.castToBoolean(integer0);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      
      StackTraceElement stackTraceElement0 = new StackTraceElement("fastjson.parser.deny", "org.springframework.security.web.savedrequest.DefaultSavedRequest", "fastjson.parser.autoTypeAccept", (-298));
      assertNotNull(stackTraceElement0);
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("org.springframework.security.web.savedrequest.DefaultSavedRequest", stackTraceElement0.getMethodName());
      assertEquals("fastjson.parser.deny.org.springframework.security.web.savedrequest.DefaultSavedRequest(fastjson.parser.autoTypeAccept)", stackTraceElement0.toString());
      assertEquals((-298), stackTraceElement0.getLineNumber());
      assertEquals("fastjson.parser.autoTypeAccept", stackTraceElement0.getFileName());
      assertEquals("fastjson.parser.deny", stackTraceElement0.getClassName());
      
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Class<UUID> class0 = UUID.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      byte[] byteArray0 = TypeUtils.castToBytes("org.springframework.security.web.savedrequest.DefaultSavedRequest");
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<OptionalCodec> class0 = OptionalCodec.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader1);
      assertSame(classLoader1, classLoader0);
      
      Class<Integer> class1 = Integer.TYPE;
      assertNotNull(class1);
      assertFalse(class1.isInterface());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertEquals("int", class1.toString());
      assertFalse(class1.isAnnotation());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      
      LinkedHashMap<Character, Timestamp> linkedHashMap0 = new LinkedHashMap<Character, Timestamp>();
      assertNotNull(linkedHashMap0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      
      Short short0 = new Short((short)53);
      assertNotNull(short0);
      assertEquals((short)53, (short)short0);
      
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      assertNotNull(parameterizedTypeImpl0);
      
      TreeMap<StringCharacterIterator, MockCalendar> treeMap0 = new TreeMap<StringCharacterIterator, MockCalendar>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      String string0 = TypeUtils.cast((Object) treeMap0, (Type) class1, (ParserConfig) null);
      assertNull(string0);
      assertFalse(class1.isInterface());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertEquals("int", class1.toString());
      assertFalse(class1.isAnnotation());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(0, treeMap0.size());
      
      Class<JSONPDeserializer> class2 = JSONPDeserializer.class;
      boolean boolean1 = TypeUtils.isProxy(class2);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ljavaawt.Re}ctangle");
      assertFalse(boolean0);
      
      String string0 = hashMap0.put("z_hp[S|z=-yMTUn", "");
      assertNull(string0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      String string1 = hashMap0.replace("Ljavaawt.Re}ctangle", "");
      assertNull(string1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Short short0 = TypeUtils.castToShort((Object) null);
      assertNull(short0);
      
      Class class1 = (Class)TypeUtils.unwrapOptional(class0);
      assertNotNull(class1);
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertEquals("class java.lang.RuntimeException", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      
      boolean boolean1 = TypeUtils.isPath(class1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertEquals("class java.lang.RuntimeException", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(boolean1);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      boolean boolean2 = TypeUtils.isHibernateInitialized(aSMClassLoader0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      java.util.Date date0 = TypeUtils.castToDate((Object) null);
      assertNull(date0);
  }
}
