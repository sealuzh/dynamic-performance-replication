/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 05:34:12 GMT 2018
 */

package org.la4j.vector.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Vector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.VectorFactory;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompressedVector_ESTest extends CompressedVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 8;
      CompressedVector.zero(8, 8);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      // Undeclared exception!
      try { 
        compressedVector0.foldNonZero((VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)7;
      byteArray0[0] = (byte)7;
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.fromCSV("");
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      SparseVector.fromMap(hashMap0, 134);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte) (-20);
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      compressedVector0.update(vectorFunction0);
      compressedVector0.toDenseVector();
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Integer integer0 = new Integer((-1658));
      int int0 = 8;
      Integer.toUnsignedLong(8);
      Double double0 = new Double(0.0);
      hashMap0.put(integer0, double0);
      int int1 = 1;
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      String string0 = compressedVector0.toCSV();
      assertEquals("", string0);
      
      boolean boolean0 = compressedVector0.nonZeroAt(1460);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-161));
      hashMap0.put(integer0, integer0);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 2146161305);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      Vector vector0 = compressedVector0.to(vectorFactory0);
      assertNull(vector0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      compressedVector0.setAll(1457.6179523);
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(0, vectorFunction0);
      compressedVector0.setAll(0);
      assertEquals(0, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CompressedVector.random(320, (double) 3465, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      compressedVector0.max();
      compressedVector0.toBinary();
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom((-3351L));
      CompressedVector.random(0, 0.0, (Random) mockRandom0);
      Locale locale0 = null;
      try {
        locale0 = new Locale("M1;Db", "@3?~JTLxD2", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.doubles((double) 1, 908.0);
      CompressedVector compressedVector0 = CompressedVector.random(1, 0.0, (Random) mockRandom0);
      compressedVector0.nonZeroIterator();
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      // Undeclared exception!
      try { 
        CompressedVector.random(2073, (-3275.0), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(320);
      boolean boolean0 = compressedVector0.nonZeroAt(2526);
      assertEquals(320, compressedVector0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(919);
      DecimalFormat decimalFormat0 = new DecimalFormat("");
      NumberFormat.getInstance();
      compressedVector0.swapElements(919, 919);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 1600;
      CompressedVector compressedVector0 = CompressedVector.zero(2110, 1600);
      compressedVector0.set(1600, 1600);
      // Undeclared exception!
      try { 
        compressedVector0.toCSV((NumberFormat) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 919;
      CompressedVector compressedVector0 = CompressedVector.zero(919);
      DecimalFormat decimalFormat0 = new DecimalFormat("");
      NumberFormat.getInstance();
      compressedVector0.toCSV((NumberFormat) decimalFormat0);
      CompressedVector.zero(919);
      MockRandom mockRandom0 = new MockRandom();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-54);
      byteArray0[4] = (byte)70;
      mockRandom0.nextBytes(byteArray0);
      // Undeclared exception!
      try { 
        CompressedVector.random(919, (double) 919, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 1);
      Integer integer0 = new Integer(1);
      Float float0 = new Float(681.357872);
      hashMap0.replace(integer0, float0);
      compressedVector0.swapElements(684, 684);
      MockRandom mockRandom0 = new MockRandom(1);
      CompressedVector compressedVector1 = CompressedVector.random(684, 1.0, (Random) mockRandom0);
      compressedVector1.toSparseVector();
      compressedVector0.blankOfLength(3165);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Vector.constant(3165, 2643.4892807);
      compressedVector1.product();
      // Undeclared exception!
      try { 
        Byte.decode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      CompressedVector compressedVector0 = new CompressedVector();
      compressedVector0.sum();
      // Undeclared exception!
      try { 
        compressedVector0.set((-3394), Double.NEGATIVE_INFINITY);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '-3394' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 1609;
      CompressedVector compressedVector0 = new CompressedVector(2110, 2110);
      compressedVector0.set(1609, 1609);
      // Undeclared exception!
      try { 
        compressedVector0.fold((VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>(linkedList0);
      Byte byte0 = new Byte((byte)16);
      linkedList0.add(byte0);
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList1);
      compressedVector0.swapElements((-611), (-611));
      compressedVector0.nonZeroAt((-2625));
      CompressedVector compressedVector1 = CompressedVector.zero(2652);
      compressedVector1.swapElements(2652, 3);
      assertEquals(2652, compressedVector1.length());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(320);
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(48);
      assertEquals(320, compressedVector0.length());
      assertEquals(48, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2110, 2110);
      compressedVector0.set(1587, 1587);
      compressedVector0.swapElements(927, 927);
      double double0 = compressedVector0.getOrElse(2, 2);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(2.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2114.0);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      double double0 = compressedVector0.manhattanNorm();
      assertEquals(2114.0, double0, 0.01);
      
      compressedVector0.nonZeroIterator();
      assertEquals(1, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        compressedVector0.sliceRight(825);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [825..0].
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(16);
      hashMap0.put(integer0, integer0);
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 2146161305);
      assertEquals(4.659482014097724E-10, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(919);
      DecimalFormat decimalFormat0 = new DecimalFormat("");
      NumberFormat.getInstance();
      String string0 = compressedVector0.toCSV((NumberFormat) decimalFormat0);
      CompressedVector.zero(919);
      MockRandom mockRandom0 = new MockRandom();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-54);
      CompressedVector.fromCSV("");
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      CompressedVector.fromCollection(linkedList0);
      CompressedVector.fromCSV(string0);
      compressedVector0.toBinary();
      compressedVector0.setAll((byte) (-1));
      CompressedVector.fromCollection(linkedList0);
      CompressedVector compressedVector1 = CompressedVector.zero(651);
      compressedVector1.toBinary();
      compressedVector0.nonZeroAt((byte) (-1));
      compressedVector0.setAll(1.0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2111);
      compressedVector0.set(1609, 1609);
      boolean boolean0 = compressedVector0.nonZeroAt(1609);
      assertEquals(1, compressedVector0.cardinality());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(6, 6);
      compressedVector0.sum();
      compressedVector0.swapElements(6, 3);
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      compressedVector0.setAll(6);
      int int0 = (-518);
      // Undeclared exception!
      try { 
        compressedVector0.blankOfLength((-518));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -518
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1629.63558677);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 2.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      compressedVector0.nonZeroIterator();
      assertEquals(0.6, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2277.815).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.updateAt(0, vectorFunction0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This vector can't grow up.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 1);
      Integer integer0 = new Integer(1);
      Integer.compare(1, 1);
      Float float0 = new Float(681.151101782521);
      hashMap0.replace(integer0, float0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2154.323448682646).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(276, vectorFunction0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      CompressedVector compressedVector1 = CompressedVector.zero(9, 9);
      HashMap<Integer, Double> hashMap1 = new HashMap<Integer, Double>();
      SparseVector.fromMap(hashMap1, 9);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(2154.323448682646).when(vectorAccumulator0).accumulate();
      compressedVector1.foldNonZero(vectorAccumulator0);
      Vector vector0 = compressedVector1.blankOfLength(1);
      assertTrue(vector0.equals((Object)compressedVector0));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2111, 1609);
      compressedVector0.product();
      compressedVector0.getOrElse(1609, 0.0);
      SparseVector sparseVector0 = compressedVector0.toSparseVector();
      compressedVector0.add((Vector) sparseVector0);
      compressedVector0.set(1, 1);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 1609;
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.set(897, 989.1684031649);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CompressedVector.fromCSV("");
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      Integer integer0 = new Integer(37);
      Float float0 = new Float((float) 37);
      hashMap0.put(integer0, float0);
      SparseVector.fromMap(hashMap0, 134);
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1629.63558677);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 2.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.spliterator();
      compressedVector0.toString();
      // Undeclared exception!
      try { 
        compressedVector0.copyOfLength((-1093));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -1093
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(919);
      DecimalFormat decimalFormat0 = new DecimalFormat("");
      NumberFormat.getInstance();
      compressedVector0.toCSV((NumberFormat) decimalFormat0);
      CompressedVector.zero(919);
      MockRandom mockRandom0 = new MockRandom();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-54);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      CompressedVector.fromCollection(linkedList0);
      byte[] byteArray1 = compressedVector0.toBinary();
      CompressedVector.fromBinary(byteArray1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(2101, 2101);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      byte[] byteArray0 = compressedVector0.toBinary();
      CompressedVector compressedVector1 = CompressedVector.fromBinary(byteArray0);
      assertEquals(2101, compressedVector1.length());
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)8, (byte)53, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0.0, compressedVector1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(3304);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      CompressedVector compressedVector1 = CompressedVector.fromCollection(linkedList0);
      compressedVector1.toBinary();
      compressedVector0.setAll((byte) (-54));
      CompressedVector.fromCollection(linkedList0);
      compressedVector0.toBinary();
      boolean boolean0 = compressedVector0.nonZeroAt(124);
      assertEquals(3304, compressedVector0.cardinality());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2111, 1609);
      compressedVector0.add((-1.0));
      compressedVector0.set(1609, 2111);
      compressedVector0.set(908, (-1.0));
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      // Undeclared exception!
      try { 
        compressedVector0.to(vectorFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2111, 1609);
      compressedVector0.add((-1.0));
      compressedVector0.set(1609, 2111);
      compressedVector0.set(908, (-1.0));
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      compressedVector0.swapElements(1609, 1);
      compressedVector0.set(908, (-1.0));
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertEquals(2, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2111, 1609);
      compressedVector0.add((-1.0));
      compressedVector0.set(3, (-1.0));
      compressedVector0.swapElements(3, 2111);
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2114, 2114);
      compressedVector0.add((double) 1609);
      compressedVector0.set(1609, 1609);
      compressedVector0.swapElements(2114, 1609);
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2110, 2110);
      compressedVector0.set(1609, 1609);
      compressedVector0.swapElements(1609, (-122));
      compressedVector0.iterator();
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2111, 1609);
      compressedVector0.set(1609, 2111);
      compressedVector0.set(1609, 494.902);
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      compressedVector0.swapElements(1609, (-502));
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2111, 1609);
      compressedVector0.add((-1.0));
      compressedVector0.set(1609, 2111);
      compressedVector0.set(908, (-1.0));
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(1609, vectorFunction0);
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 3;
      int[] intArray0 = new int[4];
      intArray0[0] = 3;
      intArray0[1] = 3;
      intArray0[2] = 3;
      intArray0[3] = 3;
      CompressedVector compressedVector0 = new CompressedVector(3, 3, doubleArray0, intArray0);
      CompressedVector.zero(3, 3);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(3, vectorFunction0);
      assertEquals(2, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2111, 1609);
      compressedVector0.add((-1.0));
      compressedVector0.set(1609, 2111);
      compressedVector0.set(908, (-1.0));
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      compressedVector0.swapElements((-502), (-203));
      assertEquals(2, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2111, 1609);
      compressedVector0.add((double) 1609);
      compressedVector0.set(1609, 2111);
      compressedVector0.set(908, 2111);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((-3567), vectorFunction0);
      assertEquals(2, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2111, 1609);
      compressedVector0.add((-1.0));
      compressedVector0.set(1609, 2111);
      compressedVector0.set(908, (-1.0));
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      compressedVector0.swapElements(1609, 1);
      compressedVector0.getOrElse(32, 0.0);
      assertEquals(2, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 3898;
      doubleArray0[1] = (double) 3898;
      doubleArray0[2] = (double) 3898;
      doubleArray0[3] = (double) 3898;
      int[] intArray0 = new int[3];
      intArray0[0] = 869;
      intArray0[1] = 32;
      intArray0[2] = 32;
      CompressedVector compressedVector0 = new CompressedVector(3898, 3898, doubleArray0, intArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1004.44119)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.update(vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2118, 1609);
      compressedVector0.add((-1.0));
      compressedVector0.set(1609, 2118);
      compressedVector0.set(908, (-1.0));
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      compressedVector0.swapElements(1609, 13);
      compressedVector0.set(908, (-1.0));
      compressedVector0.manhattanNorm();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertEquals(2, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2111, 1609);
      compressedVector0.add((-1.0));
      compressedVector0.set(1609, 2111);
      compressedVector0.set(908, (-1.0));
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      compressedVector0.swapElements(533, 1609);
      assertEquals(2, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2360.9;
      doubleArray0[1] = (-2133.54408395925);
      doubleArray0[2] = 1053.283;
      doubleArray0[3] = (-466.10224);
      doubleArray0[4] = 1599.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(5, compressedVector0.cardinality());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      compressedVector0.toBinary();
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2118, 1609);
      compressedVector0.add((-1.0));
      compressedVector0.set(1609, 2118);
      compressedVector0.set(908, (-1.0));
      compressedVector0.swapElements(1609, 13);
      compressedVector0.set(908, (-1.0));
      compressedVector0.manhattanNorm();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0), 1240.8229687887185, (-955.0), (-3202.814728205796), 2119.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2114, 1609);
      compressedVector0.add(2152.3);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((-999), vectorFunction0);
      compressedVector0.set(793, 2114);
      compressedVector0.spliterator();
      assertEquals(1, compressedVector0.cardinality());
      
      compressedVector0.set(793, 0.0);
      compressedVector0.swapElements(8, 908);
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2114, 2114);
      Vector vector0 = compressedVector0.add((-1.0));
      compressedVector0.set(1609, 1609);
      compressedVector0.innerProduct(vector0);
      compressedVector0.set(1609, 2114);
      compressedVector0.swapElements(908, 1609);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(1609);
      Integer integer1 = new Integer(341);
      hashMap0.put(integer0, integer1);
      CompressedVector compressedVector1 = CompressedVector.fromMap(hashMap0, 2114);
      compressedVector1.subtract((Vector) compressedVector0);
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }
}
