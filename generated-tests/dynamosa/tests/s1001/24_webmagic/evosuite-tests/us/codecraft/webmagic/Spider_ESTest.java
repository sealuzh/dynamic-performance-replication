/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 02 16:22:09 GMT 2019
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.InputStreamReader;
import java.io.SequenceInputStream;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.ResultItems;
import us.codecraft.webmagic.Site;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.Task;
import us.codecraft.webmagic.downloader.Downloader;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.monitor.SpiderMonitor;
import us.codecraft.webmagic.pipeline.CollectorPipeline;
import us.codecraft.webmagic.pipeline.ConsolePipeline;
import us.codecraft.webmagic.pipeline.FilePipeline;
import us.codecraft.webmagic.pipeline.JsonFilePipeline;
import us.codecraft.webmagic.pipeline.MultiPagePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.pipeline.ResultItemsCollectorPipeline;
import us.codecraft.webmagic.processor.PageProcessor;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.PriorityScheduler;
import us.codecraft.webmagic.scheduler.QueueScheduler;
import us.codecraft.webmagic.scheduler.Scheduler;
import us.codecraft.webmagic.scheduler.component.DuplicateRemover;
import us.codecraft.webmagic.scheduler.component.HashSetDuplicateRemover;
import us.codecraft.webmagic.selector.AndSelector;
import us.codecraft.webmagic.selector.Json;
import us.codecraft.webmagic.selector.OrSelector;
import us.codecraft.webmagic.selector.RegexSelector;
import us.codecraft.webmagic.selector.ReplaceSelector;
import us.codecraft.webmagic.selector.Selector;
import us.codecraft.webmagic.selector.SmartContentSelector;
import us.codecraft.webmagic.thread.CountableThreadPool;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f7S5me");
      Spider spider0 = Spider.create(simplePageProcessor0);
      String string0 = null;
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, (String) null);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider1 = spider0.addPipeline(resultItemsCollectorPipeline0);
      Page page0 = new Page();
      Page page1 = page0.setRawText("regex must not be empty");
      ResultItems resultItems0 = page1.getResultItems();
      spider0.getThreadAlive();
      resultItemsCollectorPipeline0.process(resultItems0, spider1);
      spider1.getUUID();
      // Undeclared exception!
      try { 
        spider1.thread(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f7S5me");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, (String) null);
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Page page0 = new Page();
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = ":2/:Huaim0cwPq";
      stringArray0[3] = null;
      stringArray0[4] = "us.codecraft.webmagic.utils.UrlUtils";
      // Undeclared exception!
      try { 
        spider1.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f7S5me");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      assertNotNull(forkJoinPool_ForkJoinWorkerThreadFactory0);
      
      boolean boolean0 = spider0.isSpawnUrl();
      assertEquals(0L, spider0.getPageCount());
      assertTrue(boolean0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      // Undeclared exception!
      try { 
        Spider.create((PageProcessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("E");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("init cache file ");
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("W9]X.", "W9]X.");
      phantomJSDownloader0.setThread(3);
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, spider0);
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = mockThread0.getUncaughtExceptionHandler();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(3, forkJoinPool_ForkJoinWorkerThreadFactory0, thread_UncaughtExceptionHandler0, true);
      spider0.setExecutorService(forkJoinPool0);
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      SynchronousQueue<String> synchronousQueue1 = new SynchronousQueue<String>();
      Spider spider2 = spider1.setSpawnUrl(true);
      List<String> list0 = spider2.getAll((Collection<String>) synchronousQueue1);
      Spider spider3 = spider1.startUrls(list0);
      spider3.getAll((Collection<String>) list0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider4 = spider3.thread(3035);
      spider4.setScheduler(queueScheduler0);
      // Undeclared exception!
      try { 
        Spider.Status.valueOf("W9]X.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant us.codecraft.webmagic.Spider.Status.W9]X.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f7S5me");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Downloader downloader0 = null;
      Spider spider1 = spider0.setDownloader((Downloader) null);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider1.scheduler(priorityScheduler0);
      List<String> list0 = null;
      // Undeclared exception!
      try { 
        spider1.startUrls((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f7S5me");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, (String) null);
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      MockThread mockThread0 = new MockThread();
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = mockThread0.getUncaughtExceptionHandler();
      phantomJSDownloader0.setThread(3040);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(3040, forkJoinPool_ForkJoinWorkerThreadFactory0, thread_UncaughtExceptionHandler0, true);
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      spider1.downloader(phantomJSDownloader0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      SynchronousQueue<String> synchronousQueue1 = new SynchronousQueue<String>();
      spider0.getAll((Collection<String>) synchronousQueue0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider1.setScheduler(queueScheduler0);
      // Undeclared exception!
      try { 
        Spider.Status.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = "_tNb>?k:[_;<Tw?\"k";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("_tNb>?k:[_;<Tw?\"k");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.addPipeline((Pipeline) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "_tNb>?k:[_;<Tw?\"k";
      // Undeclared exception!
      try { 
        spider1.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, (String) null);
      Page page0 = new Page();
      page0.setRawText((String) null);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider.Status.fromValue(220);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" ZV&eYDg");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      QueueScheduler queueScheduler1 = new QueueScheduler();
      Spider spider2 = spider1.scheduler(queueScheduler0);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      spider2.thread(220);
      // Undeclared exception!
      try { 
        Spider.Status.valueOf("url:\t");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant us.codecraft.webmagic.Spider.Status.url:\t
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f7S5me");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, (String) null);
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      spider0.getPageCount();
      Page.fail();
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(6064, threadPoolExecutor_CallerRunsPolicy0);
      Spider spider2 = spider1.thread((ExecutorService) scheduledThreadPoolExecutor0, 39);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("$VALUES");
      SynchronousQueue<String> synchronousQueue1 = new SynchronousQueue<String>();
      SynchronousQueue<String> synchronousQueue2 = new SynchronousQueue<String>();
      Spider spider3 = spider2.setUUID("b 9Y;5CW0u dn");
      spider3.getCollectorPipeline();
      spider3.getAll((Collection<String>) synchronousQueue1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      QueueScheduler queueScheduler1 = new QueueScheduler();
      // Undeclared exception!
      try { 
        Spider.Status.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant us.codecraft.webmagic.Spider.Status.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f7S5me");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, (String) null);
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      List<Pipeline> list0 = spider1.getAll((Collection<String>) synchronousQueue0);
      spider0.setPipelines(list0);
      spider0.getPageCount();
      Page page0 = new Page();
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(6064, threadPoolExecutor_CallerRunsPolicy0);
      Spider spider2 = spider1.thread((ExecutorService) scheduledThreadPoolExecutor0, 6064);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("$VALUES");
      Spider spider3 = spider2.setScheduler(fileCacheQueueScheduler0);
      // Undeclared exception!
      spider3.get((String) null);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = ")FaCL";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(")FaCL");
      Spider spider0 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      spider0.start();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f7S5me");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, (String) null);
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      List<Pipeline> list0 = spider1.getAll((Collection<String>) synchronousQueue0);
      spider0.setPipelines(list0);
      spider0.getPageCount();
      Page page0 = new Page();
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(6064, threadPoolExecutor_CallerRunsPolicy0);
      Spider spider2 = spider1.thread((ExecutorService) scheduledThreadPoolExecutor0, 39);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("$VAr}UES");
      Spider spider3 = spider2.setScheduler(fileCacheQueueScheduler0);
      // Undeclared exception!
      spider3.get((String) null);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      System.setCurrentTimeMillis(10L);
      String string0 = "`L9>}!MmM'c^~Zj\\u";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(string0);
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      spider1.addPipeline(jsonFilePipeline0);
      Spider spider2 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider2.getAll((Collection<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Spider spider0 = null;
      try {
        spider0 = new Spider((PageProcessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("UQp5*^_6A~(\"]H4h");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      Spider spider2 = spider0.setUUID("SBPl");
      Spider spider3 = spider2.setSpawnUrl(false);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider4 = spider1.setScheduler(queueScheduler0);
      spider3.stop();
      spider3.isExitWhenComplete();
      Spider spider5 = spider4.addPipeline((Pipeline) null);
      String[] stringArray0 = new String[7];
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      queueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      stringArray0[0] = "UQp5*^_6A~(\"]H4h";
      stringArray0[1] = "SBPl";
      stringArray0[2] = "";
      stringArray0[3] = "UQp5*^_6A~(\"]H4h";
      stringArray0[4] = "UQp5*^_6A~(\"]H4h";
      stringArray0[5] = "UQp5*^_6A~(\"]H4h";
      stringArray0[6] = "UQp5*^_6A~(\"]H4h";
      // Undeclared exception!
      try { 
        spider5.test(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = "f7S5me";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f7S5me");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      spider0.clearPipeline();
      // Undeclared exception!
      try { 
        spider0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("UQp5*^_6A~(\"]H4h");
      Page page0 = new Page();
      page0.setRawText((String) null);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1);
      Spider.Status spider_Status0 = Spider.Status.fromValue(2);
      assertEquals(Spider.Status.Stopped, spider_Status0);
      
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("2wO");
      Spider spider0 = Spider.create(simplePageProcessor1);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(1365);
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      spider1.setPipelines((List<Pipeline>) null);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      
      SimplePageProcessor simplePageProcessor2 = new SimplePageProcessor("CKpX3O6y");
      Spider spider2 = Spider.create(simplePageProcessor1);
      spider2.stop();
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      
      Spider.Status spider_Status1 = Spider.Status.Init;
      int int0 = spider_Status1.getValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f7S5me");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, (String) null);
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Spider spider2 = spider1.addPipeline(resultItemsCollectorPipeline0);
      Spider spider3 = spider0.clearPipeline();
      spider0.clearPipeline();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Spider spider4 = spider3.startUrls(linkedList0);
      spider2.getSpiderListeners();
      Spider spider5 = spider4.setSpiderListeners((List<SpiderListener>) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "f7S5me";
      stringArray0[1] = "f7S5me";
      // Undeclared exception!
      try { 
        spider5.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("E");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider1 = spider0.setPipelines(linkedList0);
      Spider spider2 = spider1.setExitWhenComplete(false);
      Spider spider3 = spider2.setUUID("E");
      Spider spider4 = spider3.setSpawnUrl(true);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider5 = spider4.setScheduler(queueScheduler0);
      spider0.setScheduler(queueScheduler0);
      spider5.stop();
      // Undeclared exception!
      try { 
        spider1.sleep((-416));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = "f7S5me";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f7S5me");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      String string1 = null;
      Request request0 = new Request("f7S5me");
      Request request1 = request0.setPriority((-260L));
      request1.addHeader("8@m{}'+", "f7S5me");
      request1.setUrl((String) null);
      // Undeclared exception!
      try { 
        spider0.onError((Request) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f7S5me");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      spider0.clearPipeline();
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        spider0.sleep((-302));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f7S5me");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, (String) null);
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      spider1.getAll((Collection<String>) synchronousQueue0);
      spider1.setUUID("f7S5me");
      spider0.getPageCount();
      Page page0 = new Page();
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        spider0.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      Spider spider1 = spider0.scheduler(fileCacheQueueScheduler0);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      List<String> list0 = spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      Spider spider2 = spider1.startUrls(list0);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2, threadFactory0);
      Spider spider3 = spider2.thread((ExecutorService) scheduledThreadPoolExecutor0, 2);
      Spider spider4 = spider3.thread(2);
      CollectorPipeline collectorPipeline0 = spider3.getCollectorPipeline();
      Spider spider5 = spider4.pipeline(collectorPipeline0);
      spider5.stop();
      boolean boolean0 = spider3.isSpawnUrl();
      assertTrue(boolean0);
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, "x?c&u %");
      spider1.setDownloader(phantomJSDownloader0);
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("UQp5*^_6A~(\"]H4h");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(true);
      spider1.getSpiderListeners();
      spider1.setSpiderListeners((List<SpiderListener>) null);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader("; fS71Va9");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f7S5me");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, (String) null);
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      spider1.setUUID("f7S5me");
      spider0.getPageCount();
      Page page0 = new Page();
      page0.setRawText("H");
      page0.getTargetRequests();
      CountableThreadPool countableThreadPool0 = new CountableThreadPool(39);
      spider1.run();
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f7S5me");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Spider spider1 = spider0.clearPipeline();
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      spider1.stop();
      // Undeclared exception!
      try { 
        spider1.test((String[]) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.startRequest((List<Request>) null);
      Spider spider2 = spider1.setUUID("");
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      LinkedBlockingDeque<Runnable> linkedBlockingDeque0 = new LinkedBlockingDeque<Runnable>();
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(2, 2, 2, timeUnit0, linkedBlockingDeque0);
      Spider spider3 = spider2.setExecutorService(threadPoolExecutor0);
      Page page0 = new Page();
      Json json0 = page0.getJson();
      Class<SpiderListener> class0 = SpiderListener.class;
      json0.toList(class0);
      Spider spider4 = spider3.setSpiderListeners((List<SpiderListener>) null);
      Spider spider5 = spider4.thread(2);
      Locale locale0 = Locale.GERMANY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      // Undeclared exception!
      try { 
        spider5.getAll((Collection<String>) set0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f7S5me");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, (String) null);
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Spider spider2 = spider1.setUUID("f7S5me");
      spider0.getPageCount();
      Page page0 = new Page();
      page0.setRawText("H");
      List<Request> list0 = page0.getTargetRequests();
      spider2.startRequest(list0);
      CountableThreadPool countableThreadPool0 = new CountableThreadPool(39);
      spider0.isExitWhenComplete();
      spider1.run();
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(",u\\Iry&59a3c|_");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Spider spider2 = spider1.startUrls(linkedList0);
      spider2.getStartTime();
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("E");
      Spider spider0 = new Spider(simplePageProcessor0);
      String string0 = "init cache file ";
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("init cache file ");
      spider0.setScheduler(fileCacheQueueScheduler0);
      // Undeclared exception!
      try { 
        spider0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.FileCacheQueueScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("hrd>,X1iq'");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      String string0 = "";
      Spider spider2 = spider1.setUUID("");
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(")|{Pi`0ydS:4Zy4s", ")|{Pi`0ydS:4Zy4s");
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum(0);
      spider2.downloader(phantomJSDownloader1);
      // Undeclared exception!
      try { 
        phantomJSDownloader1.download("Mi~yASP");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f7S5me");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, (String) null);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider1 = spider0.addPipeline(resultItemsCollectorPipeline0);
      Page page0 = new Page();
      Page page1 = page0.setRawText("regex must not be empty");
      ResultItems resultItems0 = page1.getResultItems();
      spider0.getThreadAlive();
      resultItemsCollectorPipeline0.process(resultItems0, spider1);
      spider1.getUUID();
      // Undeclared exception!
      try { 
        Spider.Status.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant us.codecraft.webmagic.Spider.Status.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("s}Z7B#.#FQ~");
      Spider spider0 = new Spider(simplePageProcessor0);
      boolean boolean0 = true;
      Spider spider1 = spider0.setSpawnUrl(true);
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(563, threadPoolExecutor_DiscardPolicy0);
      Spider spider2 = spider1.setExecutorService(scheduledThreadPoolExecutor0);
      Site site0 = Site.me();
      Site site1 = site0.addHeader((String) null, "{p] wyoOm*dSZ=B");
      Site site2 = site1.setRetryTimes(563);
      spider1.site = site2;
      // Undeclared exception!
      try { 
        spider2.addUrl((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f7S5me");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Spider spider1 = spider0.setUUID("f7S5me");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Spider spider2 = spider1.clearPipeline();
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "f7S5me";
      spider1.setUUID("f7S5me");
      spider0.getScheduler();
      String string0 = spider2.getUUID();
      assertEquals(0L, spider2.getPageCount());
      assertNotNull(string0);
      assertTrue(spider2.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = "us.codecraft.webmagic.Spider$1";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Spider$1");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setPipelines((List<Pipeline>) null);
      Spider spider2 = spider1.setExitWhenComplete(true);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("us.codecraft.webmagic.Spider$1");
      Spider spider3 = spider2.scheduler(fileCacheQueueScheduler0);
      CollectorPipeline collectorPipeline0 = spider1.getCollectorPipeline();
      // Undeclared exception!
      try { 
        spider3.pipeline(collectorPipeline0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#+");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("#+", "us.codecraft.webmagic.selector.BaseElementSelector");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      spider1.getAll((Collection<String>) synchronousQueue0);
      Spider spider2 = spider0.setUUID((String) null);
      spider1.getPageCount();
      Page page0 = new Page();
      String[] stringArray0 = new String[0];
      spider2.test(stringArray0);
      spider1.sleep(2);
      spider1.initComponent();
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("E");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertNotNull(spider0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Spider spider1 = spider0.setPipelines(linkedList0);
      assertNotNull(spider1);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, linkedList0.size());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      Spider spider2 = spider1.setExitWhenComplete(false);
      assertNotNull(spider2);
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, linkedList0.size());
      assertFalse(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertFalse(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      
      Spider spider3 = spider2.setUUID("E");
      assertNotNull(spider3);
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, linkedList0.size());
      assertFalse(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertFalse(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertFalse(spider3.isExitWhenComplete());
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider3);
      assertSame(spider2, spider1);
      assertSame(spider2, spider3);
      assertSame(spider2, spider0);
      assertSame(spider3, spider1);
      assertSame(spider3, spider2);
      assertSame(spider3, spider0);
      
      Spider spider4 = spider3.setSpawnUrl(true);
      assertNotNull(spider4);
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, linkedList0.size());
      assertFalse(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertFalse(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertFalse(spider3.isExitWhenComplete());
      assertFalse(spider4.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isSpawnUrl());
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider4);
      assertSame(spider0, spider1);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider4);
      assertSame(spider1, spider3);
      assertSame(spider2, spider1);
      assertSame(spider2, spider4);
      assertSame(spider2, spider3);
      assertSame(spider2, spider0);
      assertSame(spider3, spider4);
      assertSame(spider3, spider1);
      assertSame(spider3, spider2);
      assertSame(spider3, spider0);
      assertSame(spider4, spider0);
      assertSame(spider4, spider2);
      assertSame(spider4, spider3);
      assertSame(spider4, spider1);
      
      QueueScheduler queueScheduler0 = new QueueScheduler();
      assertNotNull(queueScheduler0);
      
      Spider spider5 = spider4.setScheduler(queueScheduler0);
      assertNotNull(spider5);
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, linkedList0.size());
      assertFalse(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertFalse(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertFalse(spider3.isExitWhenComplete());
      assertFalse(spider4.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isSpawnUrl());
      assertEquals(0L, spider5.getPageCount());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertFalse(spider5.isExitWhenComplete());
      assertTrue(spider5.isSpawnUrl());
      assertSame(spider0, spider5);
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider4);
      assertSame(spider0, spider1);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider4);
      assertSame(spider1, spider3);
      assertSame(spider1, spider5);
      assertSame(spider2, spider1);
      assertSame(spider2, spider4);
      assertSame(spider2, spider3);
      assertSame(spider2, spider0);
      assertSame(spider2, spider5);
      assertSame(spider3, spider4);
      assertSame(spider3, spider1);
      assertSame(spider3, spider2);
      assertSame(spider3, spider5);
      assertSame(spider3, spider0);
      assertSame(spider4, spider5);
      assertSame(spider4, spider0);
      assertSame(spider4, spider2);
      assertSame(spider4, spider3);
      assertSame(spider4, spider1);
      assertSame(spider5, spider2);
      assertSame(spider5, spider4);
      assertSame(spider5, spider0);
      assertSame(spider5, spider3);
      assertSame(spider5, spider1);
      
      spider5.stop();
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, linkedList0.size());
      assertFalse(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertFalse(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertFalse(spider3.isExitWhenComplete());
      assertFalse(spider4.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isSpawnUrl());
      assertEquals(0L, spider5.getPageCount());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertFalse(spider5.isExitWhenComplete());
      assertTrue(spider5.isSpawnUrl());
      assertSame(spider0, spider5);
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider4);
      assertSame(spider0, spider1);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider4);
      assertSame(spider1, spider3);
      assertSame(spider1, spider5);
      assertSame(spider2, spider1);
      assertSame(spider2, spider4);
      assertSame(spider2, spider3);
      assertSame(spider2, spider0);
      assertSame(spider2, spider5);
      assertSame(spider3, spider4);
      assertSame(spider3, spider1);
      assertSame(spider3, spider2);
      assertSame(spider3, spider5);
      assertSame(spider3, spider0);
      assertSame(spider4, spider5);
      assertSame(spider4, spider0);
      assertSame(spider4, spider2);
      assertSame(spider4, spider3);
      assertSame(spider4, spider1);
      assertSame(spider5, spider2);
      assertSame(spider5, spider4);
      assertSame(spider5, spider0);
      assertSame(spider5, spider3);
      assertSame(spider5, spider1);
      
      // Undeclared exception!
      try { 
        spider4.initComponent();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f7S5me");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, (String) null);
      assertNotNull(phantomJSDownloader0);
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      assertNotNull(resultItemsCollectorPipeline0);
      
      Spider.Status spider_Status0 = Spider.Status.fromValue(229);
      assertEquals(Spider.Status.Init, spider_Status0);
      
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("f7S5me");
      assertFalse(simplePageProcessor1.equals((Object)simplePageProcessor0));
      assertNotNull(simplePageProcessor1);
      
      spider0.stop();
      assertFalse(simplePageProcessor0.equals((Object)simplePageProcessor1));
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertNotSame(simplePageProcessor0, simplePageProcessor1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("fq7S5e");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      assertEquals(5, PriorityScheduler.INITIAL_CAPACITY);
      assertNotNull(priorityScheduler0);
      
      Spider spider1 = spider0.setScheduler(priorityScheduler0);
      assertEquals(5, PriorityScheduler.INITIAL_CAPACITY);
      assertNotNull(spider1);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      Request request0 = new Request("fq7S5e");
      assertNotNull(request0);
      assertNull(request0.getCharset());
      assertNull(request0.getMethod());
      assertFalse(request0.isBinaryContent());
      assertEquals(0L, request0.getPriority());
      assertEquals("fq7S5e", request0.getUrl());
      
      Request request1 = request0.setPriority(5);
      assertNotNull(request1);
      assertNull(request0.getCharset());
      assertNull(request0.getMethod());
      assertEquals(5L, request0.getPriority());
      assertFalse(request0.isBinaryContent());
      assertEquals("fq7S5e", request0.getUrl());
      assertEquals("fq7S5e", request1.getUrl());
      assertNull(request1.getCharset());
      assertFalse(request1.isBinaryContent());
      assertEquals(5L, request1.getPriority());
      assertNull(request1.getMethod());
      assertSame(request0, request1);
      assertSame(request1, request0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f7S5me");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Spider spider1 = spider0.clearPipeline();
      assertNotNull(spider1);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertFalse(linkedList0.contains("f7S5me"));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Spider spider2 = spider0.startUrls(linkedList0);
      assertFalse(linkedList0.contains("f7S5me"));
      assertNotNull(spider2);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0, linkedList0.size());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      
      List<SpiderListener> list0 = spider2.getSpiderListeners();
      assertFalse(linkedList0.contains("f7S5me"));
      assertNull(list0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0, linkedList0.size());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      
      Page page0 = Page.fail();
      assertNotNull(page0);
      assertFalse(page0.isDownloadSuccess());
      assertNull(page0.getCharset());
      assertEquals(200, page0.getStatusCode());
      assertNull(page0.getRawText());
      
      // Undeclared exception!
      try { 
        spider1.extractAndAddRequests(page0, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = "f7S5me";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f7S5me");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      
      String string1 = null;
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, (String) null);
      assertNotNull(phantomJSDownloader0);
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      assertNotNull(spider1);
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      assertNotNull(resultItemsCollectorPipeline0);
      
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      assertFalse(synchronousQueue0.contains(string0));
      assertNotNull(synchronousQueue0);
      
      List<Pipeline> list0 = spider1.getAll((Collection<String>) synchronousQueue0);
      assertFalse(synchronousQueue0.contains(string0));
      assertNotNull(list0);
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      Spider spider2 = spider0.setPipelines(list0);
      assertFalse(synchronousQueue0.contains(string0));
      assertNotNull(spider2);
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(Spider.Status.Stopped, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      
      long long0 = spider0.getPageCount();
      assertEquals(0L, long0);
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      
      Spider spider3 = spider1.addPipeline(resultItemsCollectorPipeline0);
      assertNotNull(spider3);
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Stopped, spider3.getStatus());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isSpawnUrl());
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider3, spider1);
      assertSame(spider3, spider2);
      assertSame(spider3, spider0);
      
      spider0.close();
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      
      // Undeclared exception!
      try { 
        spider3.thread(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f7S5me");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, (String) null);
      assertNotNull(phantomJSDownloader0);
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      assertNotNull(spider1);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Spider spider2 = spider0.clearPipeline();
      assertNotNull(spider2);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider2.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      assertNotNull(forkJoinPool_ForkJoinWorkerThreadFactory0);
      
      CollectorPipeline collectorPipeline0 = spider1.getCollectorPipeline();
      assertNotNull(collectorPipeline0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      
      Spider spider3 = spider2.pipeline(collectorPipeline0);
      assertNotNull(spider3);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider3);
      assertSame(spider2, spider0);
      assertSame(spider3, spider1);
      assertSame(spider3, spider2);
      assertSame(spider3, spider0);
      
      String[] stringArray0 = new String[0];
      Spider spider4 = spider3.addUrl(stringArray0);
      assertNotNull(spider4);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider4.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isExitWhenComplete());
      assertSame(spider0, spider4);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider4);
      assertSame(spider1, spider0);
      assertSame(spider2, spider4);
      assertSame(spider2, spider1);
      assertSame(spider2, spider3);
      assertSame(spider2, spider0);
      assertSame(spider3, spider1);
      assertSame(spider3, spider2);
      assertSame(spider3, spider4);
      assertSame(spider3, spider0);
      assertSame(spider4, spider3);
      assertSame(spider4, spider1);
      assertSame(spider4, spider2);
      assertSame(spider4, spider0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Spider spider1 = spider0.startRequest(linkedList0);
      assertNotNull(spider1);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, linkedList0.size());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      Spider spider2 = spider0.setExitWhenComplete(false);
      assertNotNull(spider2);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertFalse(spider2.isExitWhenComplete());
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      
      LinkedBlockingQueue<String> linkedBlockingQueue0 = new LinkedBlockingQueue<String>();
      assertFalse(linkedBlockingQueue0.contains(""));
      assertNotNull(linkedBlockingQueue0);
      
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) linkedBlockingQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("E");
      assertNotNull(simplePageProcessor0);
      
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      QueueScheduler queueScheduler0 = new QueueScheduler();
      assertNotNull(queueScheduler0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      
      Spider spider1 = spider0.setExitWhenComplete(true);
      assertNotNull(spider1);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      // Undeclared exception!
      try { 
        Spider.Status.valueOf(")");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant us.codecraft.webmagic.Spider.Status.)
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f7S5me");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      
      Page page0 = Page.fail();
      assertNotNull(page0);
      assertFalse(page0.isDownloadSuccess());
      assertNull(page0.getRawText());
      assertEquals(200, page0.getStatusCode());
      assertNull(page0.getCharset());
      
      Page page1 = page0.setSkip(false);
      assertNotNull(page1);
      assertFalse(page0.isDownloadSuccess());
      assertNull(page0.getRawText());
      assertEquals(200, page0.getStatusCode());
      assertNull(page0.getCharset());
      assertNull(page1.getRawText());
      assertNull(page1.getCharset());
      assertFalse(page1.isDownloadSuccess());
      assertEquals(200, page1.getStatusCode());
      assertSame(page0, page1);
      assertSame(page1, page0);
      
      Page page2 = page1.setRawText("");
      assertNotNull(page2);
      assertFalse(page0.isDownloadSuccess());
      assertEquals("", page0.getRawText());
      assertEquals(200, page0.getStatusCode());
      assertNull(page0.getCharset());
      assertEquals("", page1.getRawText());
      assertNull(page1.getCharset());
      assertFalse(page1.isDownloadSuccess());
      assertEquals(200, page1.getStatusCode());
      assertEquals("", page2.getRawText());
      assertEquals(200, page2.getStatusCode());
      assertNull(page2.getCharset());
      assertFalse(page2.isDownloadSuccess());
      assertSame(page0, page2);
      assertSame(page0, page1);
      assertSame(page1, page2);
      assertSame(page1, page0);
      assertSame(page2, page1);
      assertSame(page2, page0);
      
      Page page3 = page2.setRawText("");
      assertNotNull(page3);
      assertFalse(page0.isDownloadSuccess());
      assertEquals("", page0.getRawText());
      assertEquals(200, page0.getStatusCode());
      assertNull(page0.getCharset());
      assertEquals("", page1.getRawText());
      assertNull(page1.getCharset());
      assertFalse(page1.isDownloadSuccess());
      assertEquals(200, page1.getStatusCode());
      assertEquals("", page2.getRawText());
      assertEquals(200, page2.getStatusCode());
      assertNull(page2.getCharset());
      assertFalse(page2.isDownloadSuccess());
      assertEquals(200, page3.getStatusCode());
      assertEquals("", page3.getRawText());
      assertNull(page3.getCharset());
      assertFalse(page3.isDownloadSuccess());
      assertSame(page0, page2);
      assertSame(page0, page1);
      assertSame(page0, page3);
      assertSame(page1, page2);
      assertSame(page1, page0);
      assertSame(page1, page3);
      assertSame(page2, page1);
      assertSame(page2, page3);
      assertSame(page2, page0);
      assertSame(page3, page2);
      assertSame(page3, page1);
      assertSame(page3, page0);
      
      QueueScheduler queueScheduler0 = new QueueScheduler();
      assertNotNull(queueScheduler0);
      
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      assertNotNull(consolePipeline0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      Spider.Status spider_Status0 = Spider.Status.fromValue((-2834));
      assertEquals(Spider.Status.Init, spider_Status0);
      
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("");
      assertFalse(simplePageProcessor1.equals((Object)simplePageProcessor0));
      assertNotNull(simplePageProcessor1);
      
      Spider spider1 = Spider.create(simplePageProcessor1);
      assertFalse(simplePageProcessor1.equals((Object)simplePageProcessor0));
      assertFalse(spider1.equals((Object)spider0));
      assertNotNull(spider1);
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertNotSame(simplePageProcessor1, simplePageProcessor0);
      assertNotSame(spider1, spider0);
      
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(9);
      assertNotNull(forkJoinPool0);
      
      Spider spider2 = spider0.setExecutorService(forkJoinPool0);
      assertFalse(simplePageProcessor0.equals((Object)simplePageProcessor1));
      assertFalse(spider0.equals((Object)spider1));
      assertFalse(spider2.equals((Object)spider1));
      assertNotNull(spider2);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertNotSame(simplePageProcessor0, simplePageProcessor1);
      assertSame(spider0, spider2);
      assertNotSame(spider0, spider1);
      assertNotSame(spider2, spider1);
      assertSame(spider2, spider0);
      
      Spider spider3 = spider0.setPipelines((List<Pipeline>) null);
      assertFalse(simplePageProcessor0.equals((Object)simplePageProcessor1));
      assertFalse(spider0.equals((Object)spider1));
      assertFalse(spider3.equals((Object)spider1));
      assertNotNull(spider3);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertNotSame(simplePageProcessor0, simplePageProcessor1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertNotSame(spider0, spider1);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      assertNotSame(spider3, spider1);
      
      spider2.sleep(3900);
      assertFalse(simplePageProcessor0.equals((Object)simplePageProcessor1));
      assertFalse(spider0.equals((Object)spider1));
      assertFalse(spider2.equals((Object)spider1));
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertNotSame(simplePageProcessor0, simplePageProcessor1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertNotSame(spider0, spider1);
      assertNotSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertSame(spider2, spider3);
      
      SimplePageProcessor simplePageProcessor2 = null;
      try {
        simplePageProcessor2 = new SimplePageProcessor((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.processor.SimplePageProcessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f7S5me");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, (String) null);
      assertNotNull(phantomJSDownloader0);
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      assertNotNull(spider1);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      assertNotNull(resultItemsCollectorPipeline0);
      
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      assertFalse(synchronousQueue0.contains("f7S5me"));
      assertNotNull(synchronousQueue0);
      
      List<Pipeline> list0 = spider1.getAll((Collection<String>) synchronousQueue0);
      assertFalse(synchronousQueue0.contains("f7S5me"));
      assertNotNull(list0);
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      Spider spider2 = spider0.setPipelines(list0);
      assertFalse(synchronousQueue0.contains("f7S5me"));
      assertNotNull(spider2);
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Stopped, spider2.getStatus());
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      
      long long0 = spider0.getPageCount();
      assertEquals(0L, long0);
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      
      Page page0 = new Page();
      assertNotNull(page0);
      assertTrue(page0.isDownloadSuccess());
      assertNull(page0.getRawText());
      assertEquals(200, page0.getStatusCode());
      assertNull(page0.getCharset());
      
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      assertNotNull(threadPoolExecutor_CallerRunsPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(6064, threadPoolExecutor_CallerRunsPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      Spider spider3 = spider1.thread((ExecutorService) scheduledThreadPoolExecutor0, 39);
      assertNotNull(spider3);
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(Spider.Status.Stopped, spider3.getStatus());
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider3);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider3, spider2);
      assertSame(spider3, spider0);
      assertSame(spider3, spider1);
      
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("$VALUES");
      assertNotNull(fileCacheQueueScheduler0);
      
      Spider spider4 = spider3.setScheduler(fileCacheQueueScheduler0);
      assertNotNull(spider4);
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(Spider.Status.Stopped, spider3.getStatus());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(Spider.Status.Stopped, spider4.getStatus());
      assertTrue(spider4.isSpawnUrl());
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider4);
      assertSame(spider1, spider3);
      assertSame(spider1, spider4);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider3, spider2);
      assertSame(spider3, spider0);
      assertSame(spider3, spider4);
      assertSame(spider3, spider1);
      assertSame(spider4, spider3);
      assertSame(spider4, spider2);
      assertSame(spider4, spider1);
      assertSame(spider4, spider0);
      
      // Undeclared exception!
      spider4.get((String) null);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f7S5me");
      assertNotNull(simplePageProcessor0);
      
      // Undeclared exception!
      try { 
        Spider.create((PageProcessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = ")CK:\\sLvM(KiP'_Jq";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(")CK:sLvM(KiP'_Jq");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Spider spider1 = spider0.startRequest(linkedList0);
      assertNotNull(spider1);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, linkedList0.size());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      int int0 = 0;
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      assertNotNull(threadPoolExecutor_DiscardOldestPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = null;
      try {
        scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, (ThreadFactory) null, threadPoolExecutor_DiscardOldestPolicy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("?v0?%if-bWu9^g");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertNotNull(spider0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      
      ExecutorService executorService0 = null;
      int int0 = 367;
      Spider spider1 = spider0.thread((ExecutorService) null, 367);
      assertNotNull(spider1);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      String string0 = "Pr;-z+m";
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader("Pr;-z+m");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f7S5me");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      
      String string0 = null;
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, (String) null);
      assertNotNull(phantomJSDownloader0);
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      assertNotNull(spider1);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      assertNotNull(resultItemsCollectorPipeline0);
      
      Spider spider2 = spider1.addPipeline(resultItemsCollectorPipeline0);
      assertNotNull(spider2);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      
      // Undeclared exception!
      try { 
        spider0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(":d)u@sq3\"hk#");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = ":d)u@sq3\"hk#";
      stringArray0[1] = ":d)u@sq3\"hk#";
      stringArray0[2] = ":d)u@sq3\"hk#";
      stringArray0[3] = ":d)u@sq3\"hk#";
      stringArray0[4] = ":d)u@sq3\"hk#";
      stringArray0[5] = ":d)u@sq3\"hk#";
      stringArray0[6] = ":d)u@sq3\"hk#";
      stringArray0[7] = ":d)u@sq3\"hk#";
      stringArray0[8] = ":d)u@sq3\"hk#";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("7#R");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertNotNull(spider0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Spider spider1 = spider0.setPipelines(linkedList0);
      assertNotNull(spider1);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0, linkedList0.size());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      Spider spider2 = spider1.setExitWhenComplete(false);
      assertNotNull(spider2);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(0, linkedList0.size());
      assertFalse(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(0L, spider2.getPageCount());
      assertFalse(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      
      Spider spider3 = spider2.setSpawnUrl(false);
      assertNotNull(spider3);
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isSpawnUrl());
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(0, linkedList0.size());
      assertFalse(spider1.isExitWhenComplete());
      assertFalse(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(0L, spider2.getPageCount());
      assertFalse(spider2.isExitWhenComplete());
      assertFalse(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertFalse(spider3.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertFalse(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider3);
      assertSame(spider2, spider1);
      assertSame(spider3, spider2);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      
      Spider spider4 = spider3.setSpawnUrl(true);
      assertNotNull(spider4);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(0, linkedList0.size());
      assertFalse(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(0L, spider2.getPageCount());
      assertFalse(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertFalse(spider3.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertFalse(spider4.isExitWhenComplete());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertSame(spider0, spider4);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider4);
      assertSame(spider2, spider0);
      assertSame(spider2, spider3);
      assertSame(spider2, spider4);
      assertSame(spider2, spider1);
      assertSame(spider3, spider2);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      assertSame(spider3, spider4);
      assertSame(spider4, spider3);
      assertSame(spider4, spider0);
      assertSame(spider4, spider1);
      assertSame(spider4, spider2);
      
      QueueScheduler queueScheduler0 = new QueueScheduler();
      assertNotNull(queueScheduler0);
      
      Spider spider5 = spider4.setScheduler(queueScheduler0);
      assertNotNull(spider5);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(0, linkedList0.size());
      assertFalse(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(0L, spider2.getPageCount());
      assertFalse(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertFalse(spider3.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertFalse(spider4.isExitWhenComplete());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertEquals(0L, spider5.getPageCount());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertFalse(spider5.isExitWhenComplete());
      assertTrue(spider5.isSpawnUrl());
      assertSame(spider0, spider5);
      assertSame(spider0, spider4);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider4);
      assertSame(spider1, spider5);
      assertSame(spider2, spider0);
      assertSame(spider2, spider5);
      assertSame(spider2, spider3);
      assertSame(spider2, spider4);
      assertSame(spider2, spider1);
      assertSame(spider3, spider5);
      assertSame(spider3, spider2);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      assertSame(spider3, spider4);
      assertSame(spider4, spider5);
      assertSame(spider4, spider3);
      assertSame(spider4, spider0);
      assertSame(spider4, spider1);
      assertSame(spider4, spider2);
      assertSame(spider5, spider0);
      assertSame(spider5, spider1);
      assertSame(spider5, spider3);
      assertSame(spider5, spider4);
      assertSame(spider5, spider2);
      
      Spider spider6 = spider0.setScheduler(queueScheduler0);
      assertNotNull(spider6);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isExitWhenComplete());
      assertFalse(spider6.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider6.getStatus());
      assertEquals(0L, spider6.getPageCount());
      assertTrue(spider6.isSpawnUrl());
      assertSame(spider0, spider6);
      assertSame(spider0, spider5);
      assertSame(spider0, spider4);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider6, spider5);
      assertSame(spider6, spider4);
      assertSame(spider6, spider3);
      assertSame(spider6, spider1);
      assertSame(spider6, spider2);
      assertSame(spider6, spider0);
      
      spider5.stop();
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(0, linkedList0.size());
      assertFalse(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(0L, spider2.getPageCount());
      assertFalse(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertFalse(spider3.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertFalse(spider4.isExitWhenComplete());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertEquals(0L, spider5.getPageCount());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertFalse(spider5.isExitWhenComplete());
      assertTrue(spider5.isSpawnUrl());
      assertSame(spider0, spider6);
      assertSame(spider0, spider5);
      assertSame(spider0, spider4);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider6);
      assertSame(spider1, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider4);
      assertSame(spider1, spider5);
      assertSame(spider2, spider0);
      assertSame(spider2, spider5);
      assertSame(spider2, spider3);
      assertSame(spider2, spider4);
      assertSame(spider2, spider6);
      assertSame(spider2, spider1);
      assertSame(spider3, spider5);
      assertSame(spider3, spider2);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      assertSame(spider3, spider6);
      assertSame(spider3, spider4);
      assertSame(spider4, spider5);
      assertSame(spider4, spider3);
      assertSame(spider4, spider0);
      assertSame(spider4, spider1);
      assertSame(spider4, spider2);
      assertSame(spider4, spider6);
      assertSame(spider5, spider0);
      assertSame(spider5, spider1);
      assertSame(spider5, spider3);
      assertSame(spider5, spider6);
      assertSame(spider5, spider4);
      assertSame(spider5, spider2);
      
      Scheduler scheduler0 = spider3.getScheduler();
      assertNotNull(scheduler0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(0, linkedList0.size());
      assertFalse(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(0L, spider2.getPageCount());
      assertFalse(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertFalse(spider3.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertSame(spider0, spider6);
      assertSame(spider0, spider5);
      assertSame(spider0, spider4);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider6);
      assertSame(spider1, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider4);
      assertSame(spider1, spider5);
      assertSame(spider2, spider0);
      assertSame(spider2, spider5);
      assertSame(spider2, spider3);
      assertSame(spider2, spider4);
      assertSame(spider2, spider6);
      assertSame(spider2, spider1);
      assertSame(spider3, spider5);
      assertSame(spider3, spider2);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      assertSame(spider3, spider6);
      assertSame(spider3, spider4);
      assertSame(scheduler0, queueScheduler0);
      
      spider6.sleep(0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isExitWhenComplete());
      assertFalse(spider6.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider6.getStatus());
      assertEquals(0L, spider6.getPageCount());
      assertTrue(spider6.isSpawnUrl());
      assertSame(spider0, spider6);
      assertSame(spider0, spider5);
      assertSame(spider0, spider4);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(queueScheduler0, scheduler0);
      assertSame(spider6, spider5);
      assertSame(spider6, spider4);
      assertSame(spider6, spider3);
      assertSame(spider6, spider1);
      assertSame(spider6, spider2);
      assertSame(spider6, spider0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("E");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      assertEquals(5, PriorityScheduler.INITIAL_CAPACITY);
      assertNotNull(priorityScheduler0);
      
      Spider spider1 = spider0.setScheduler(priorityScheduler0);
      assertEquals(5, PriorityScheduler.INITIAL_CAPACITY);
      assertNotNull(spider1);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Request request0 = new Request("E");
      assertNotNull(request0);
      assertEquals("E", request0.getUrl());
      assertEquals(0L, request0.getPriority());
      assertNull(request0.getMethod());
      assertNull(request0.getCharset());
      assertFalse(request0.isBinaryContent());
      
      Request[] requestArray0 = new Request[5];
      requestArray0[0] = request0;
      requestArray0[1] = request0;
      requestArray0[2] = request0;
      requestArray0[3] = request0;
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("!)g");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertNotNull(spider0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Spider spider1 = spider0.setPipelines(linkedList0);
      assertNotNull(spider1);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, linkedList0.size());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      Spider spider2 = spider0.setExitWhenComplete(false);
      assertNotNull(spider2);
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider2.isSpawnUrl());
      assertFalse(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      
      Spider spider3 = spider1.setUUID("!)g");
      assertNotNull(spider3);
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, linkedList0.size());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertFalse(spider3.isExitWhenComplete());
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      
      Request request0 = new Request((String) null);
      assertNotNull(request0);
      assertNull(request0.getUrl());
      assertEquals(0L, request0.getPriority());
      assertNull(request0.getCharset());
      assertFalse(request0.isBinaryContent());
      assertNull(request0.getMethod());
      
      Request request1 = request0.setPriority(2211L);
      assertNotNull(request1);
      assertNull(request0.getUrl());
      assertEquals(2211L, request0.getPriority());
      assertNull(request0.getCharset());
      assertFalse(request0.isBinaryContent());
      assertNull(request0.getMethod());
      assertNull(request1.getCharset());
      assertEquals(2211L, request1.getPriority());
      assertFalse(request1.isBinaryContent());
      assertNull(request1.getUrl());
      assertNull(request1.getMethod());
      assertSame(request0, request1);
      assertSame(request1, request0);
      
      Request request2 = request1.setCharset("EDFnXayGeP?rT'frU=l");
      assertNotNull(request2);
      assertNull(request0.getUrl());
      assertEquals("EDFnXayGeP?rT'frU=l", request0.getCharset());
      assertEquals(2211L, request0.getPriority());
      assertFalse(request0.isBinaryContent());
      assertNull(request0.getMethod());
      assertEquals(2211L, request1.getPriority());
      assertFalse(request1.isBinaryContent());
      assertNull(request1.getUrl());
      assertEquals("EDFnXayGeP?rT'frU=l", request1.getCharset());
      assertNull(request1.getMethod());
      assertEquals(2211L, request2.getPriority());
      assertNull(request2.getMethod());
      assertNull(request2.getUrl());
      assertFalse(request2.isBinaryContent());
      assertEquals("EDFnXayGeP?rT'frU=l", request2.getCharset());
      assertSame(request0, request1);
      assertSame(request0, request2);
      assertSame(request1, request2);
      assertSame(request1, request0);
      assertSame(request2, request0);
      assertSame(request2, request1);
      
      Request request3 = request0.setUrl("<d~TQvFW&|m-^");
      assertNotNull(request3);
      assertEquals("<d~TQvFW&|m-^", request0.getUrl());
      assertEquals("EDFnXayGeP?rT'frU=l", request0.getCharset());
      assertEquals(2211L, request0.getPriority());
      assertFalse(request0.isBinaryContent());
      assertNull(request0.getMethod());
      assertEquals("<d~TQvFW&|m-^", request3.getUrl());
      assertEquals("EDFnXayGeP?rT'frU=l", request3.getCharset());
      assertFalse(request3.isBinaryContent());
      assertNull(request3.getMethod());
      assertEquals(2211L, request3.getPriority());
      assertSame(request0, request1);
      assertSame(request0, request3);
      assertSame(request0, request2);
      assertSame(request3, request1);
      assertSame(request3, request2);
      assertSame(request3, request0);
      
      Spider spider4 = spider3.setUUID("EDFnXayGeP?rT'frU=l");
      assertNotNull(spider4);
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, linkedList0.size());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertFalse(spider3.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isSpawnUrl());
      assertFalse(spider4.isExitWhenComplete());
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider0, spider4);
      assertSame(spider0, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider4);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider3, spider4);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      assertSame(spider4, spider0);
      assertSame(spider4, spider2);
      assertSame(spider4, spider1);
      assertSame(spider4, spider3);
      
      // Undeclared exception!
      try { 
        spider4.onError(request1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f7S5me");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Spider spider1 = spider0.clearPipeline();
      assertNotNull(spider1);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      assertNotNull(forkJoinPool_ForkJoinWorkerThreadFactory0);
      
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      assertNotNull(forkJoinPool0);
      
      spider1.stop();
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      boolean boolean1 = spider1.isExitWhenComplete();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      // Undeclared exception!
      try { 
        spider0.run();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("UQp5*^_6A~(\"]H4h");
      assertNotNull(simplePageProcessor0);
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("UQp5*^_6A~(\"]H4h", "I|:2aG");
      assertNotNull(phantomJSDownloader0);
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      assertEquals(5, PriorityScheduler.INITIAL_CAPACITY);
      assertNotNull(priorityScheduler0);
      
      Spider spider1 = spider0.scheduler(priorityScheduler0);
      assertEquals(5, PriorityScheduler.INITIAL_CAPACITY);
      assertNotNull(spider1);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      assertEquals(5, PriorityScheduler.INITIAL_CAPACITY);
      assertNotNull(spider2);
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      
      Request[] requestArray0 = new Request[4];
      Request request0 = new Request("UQp5*^_6A~(\"]H4h");
      assertNotNull(request0);
      assertEquals("UQp5*^_6A~(\"]H4h", request0.getUrl());
      assertFalse(request0.isBinaryContent());
      assertNull(request0.getCharset());
      assertNull(request0.getMethod());
      assertEquals(0L, request0.getPriority());
      
      requestArray0[0] = request0;
      Request request1 = priorityScheduler0.poll(spider0);
      assertEquals(5, PriorityScheduler.INITIAL_CAPACITY);
      assertNull(request1);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      
      Request request2 = request0.setUrl("UQp5*^_6A~(\"]H4h");
      assertNotNull(request2);
      assertEquals("UQp5*^_6A~(\"]H4h", request0.getUrl());
      assertFalse(request0.isBinaryContent());
      assertNull(request0.getCharset());
      assertNull(request0.getMethod());
      assertEquals(0L, request0.getPriority());
      assertEquals("UQp5*^_6A~(\"]H4h", request2.getUrl());
      assertEquals(0L, request2.getPriority());
      assertNull(request2.getCharset());
      assertNull(request2.getMethod());
      assertFalse(request2.isBinaryContent());
      assertSame(request0, request2);
      assertSame(request2, request0);
      
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("_cycle_tried_times");
      assertNotNull(fileCacheQueueScheduler0);
      
      Spider spider3 = spider2.setScheduler(fileCacheQueueScheduler0);
      assertEquals(5, PriorityScheduler.INITIAL_CAPACITY);
      assertNotNull(spider3);
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider3.isSpawnUrl());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider1, spider0);
      assertSame(spider1, spider3);
      assertSame(spider1, spider2);
      assertSame(spider2, spider3);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertSame(spider3, spider1);
      assertSame(spider3, spider2);
      assertSame(spider3, spider0);
      
      Spider spider4 = spider0.clearPipeline();
      assertNotNull(spider4);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isExitWhenComplete());
      assertTrue(spider4.isSpawnUrl());
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider0, spider4);
      assertSame(spider4, spider3);
      assertSame(spider4, spider1);
      assertSame(spider4, spider0);
      assertSame(spider4, spider2);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertFalse(linkedList0.contains("UQp5*^_6A~(\"]H4h"));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<SpiderListener> linkedList1 = new LinkedList<SpiderListener>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      Spider spider5 = spider1.setSpiderListeners(linkedList1);
      assertEquals(5, PriorityScheduler.INITIAL_CAPACITY);
      assertNotNull(spider5);
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertTrue(spider5.isExitWhenComplete());
      assertEquals(0L, spider5.getPageCount());
      assertTrue(spider5.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0, linkedList1.size());
      assertSame(spider5, spider1);
      assertSame(spider5, spider4);
      assertSame(spider5, spider0);
      assertSame(spider5, spider2);
      assertSame(spider5, spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider5);
      assertSame(spider0, spider3);
      assertSame(spider0, spider4);
      assertSame(spider1, spider0);
      assertSame(spider1, spider4);
      assertSame(spider1, spider5);
      assertSame(spider1, spider3);
      assertSame(spider1, spider2);
      
      Spider spider6 = spider5.startUrls(linkedList0);
      assertFalse(linkedList0.contains("UQp5*^_6A~(\"]H4h"));
      assertEquals(5, PriorityScheduler.INITIAL_CAPACITY);
      assertNotNull(spider6);
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertTrue(spider5.isExitWhenComplete());
      assertEquals(0L, spider5.getPageCount());
      assertTrue(spider5.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider6.getStatus());
      assertTrue(spider6.isSpawnUrl());
      assertEquals(0L, spider6.getPageCount());
      assertTrue(spider6.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertSame(spider5, spider1);
      assertSame(spider5, spider6);
      assertSame(spider5, spider4);
      assertSame(spider5, spider0);
      assertSame(spider5, spider2);
      assertSame(spider5, spider3);
      assertSame(spider6, spider3);
      assertSame(spider6, spider5);
      assertSame(spider6, spider2);
      assertSame(spider6, spider0);
      assertSame(spider6, spider4);
      assertSame(spider6, spider1);
      assertSame(spider0, spider6);
      assertSame(spider0, spider2);
      assertSame(spider0, spider5);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider0, spider4);
      assertSame(spider1, spider0);
      assertSame(spider1, spider4);
      assertSame(spider1, spider5);
      assertSame(spider1, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider6);
      
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      LinkedBlockingDeque<Runnable> linkedBlockingDeque0 = new LinkedBlockingDeque<Runnable>();
      assertNotNull(linkedBlockingDeque0);
      
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      assertNotNull(threadPoolExecutor_DiscardPolicy0);
      
      ThreadPoolExecutor threadPoolExecutor0 = null;
      try {
        threadPoolExecutor0 = new ThreadPoolExecutor((-852), 220, 0L, timeUnit0, linkedBlockingDeque0, threadPoolExecutor_DiscardPolicy0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = "page status code error, page {} , code: {}";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("page status code error, page {} , code: {}");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      
      Spider spider1 = spider0.setExitWhenComplete(true);
      assertNotNull(spider1);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("page status code error, page {} , code: {}");
      assertNotNull(fileCacheQueueScheduler0);
      
      Spider spider2 = spider1.setScheduler(fileCacheQueueScheduler0);
      assertNotNull(spider2);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      
      Spider spider3 = spider2.clearPipeline();
      assertNotNull(spider3);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider1, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertSame(spider2, spider3);
      assertSame(spider3, spider2);
      assertSame(spider3, spider0);
      assertSame(spider3, spider1);
      
      Page page0 = new Page();
      assertNotNull(page0);
      assertNull(page0.getCharset());
      assertTrue(page0.isDownloadSuccess());
      assertNull(page0.getRawText());
      assertEquals(200, page0.getStatusCode());
      
      Page page1 = page0.setRawText("page status code error, page {} , code: {}");
      assertNotNull(page1);
      assertNull(page0.getCharset());
      assertTrue(page0.isDownloadSuccess());
      assertEquals("page status code error, page {} , code: {}", page0.getRawText());
      assertEquals(200, page0.getStatusCode());
      assertEquals(200, page1.getStatusCode());
      assertTrue(page1.isDownloadSuccess());
      assertEquals("page status code error, page {} , code: {}", page1.getRawText());
      assertNull(page1.getCharset());
      assertSame(page0, page1);
      assertSame(page1, page0);
      
      // Undeclared exception!
      spider0.runAsync();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = "f7S5me";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f7S5me");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, (String) null);
      assertNotNull(phantomJSDownloader0);
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      assertNotNull(forkJoinPool_ForkJoinWorkerThreadFactory0);
      
      MockThread mockThread0 = new MockThread();
      assertNotNull(mockThread0);
      
      ThreadGroup threadGroup0 = (ThreadGroup)mockThread0.getUncaughtExceptionHandler();
      assertNotNull(threadGroup0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals("Test_Execution_Group", threadGroup0.getName());
      
      boolean boolean0 = true;
      phantomJSDownloader0.setThread(3040);
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(3040, forkJoinPool_ForkJoinWorkerThreadFactory0, threadGroup0, true);
      assertNotNull(forkJoinPool0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals("Test_Execution_Group", threadGroup0.getName());
      
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      assertNotNull(spider1);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals("Test_Execution_Group", threadGroup0.getName());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      assertNotNull(spider2);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals("Test_Execution_Group", threadGroup0.getName());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider2.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      assertNotNull(resultItemsCollectorPipeline0);
      
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      assertFalse(synchronousQueue0.contains("f7S5me"));
      assertNotNull(synchronousQueue0);
      
      SynchronousQueue<String> synchronousQueue1 = new SynchronousQueue<String>();
      assertFalse(synchronousQueue1.equals((Object)synchronousQueue0));
      assertFalse(synchronousQueue1.contains("f7S5me"));
      assertNotNull(synchronousQueue1);
      
      List<Pipeline> list0 = spider0.getAll((Collection<String>) synchronousQueue0);
      assertFalse(synchronousQueue0.equals((Object)synchronousQueue1));
      assertFalse(synchronousQueue0.contains("f7S5me"));
      assertNotNull(list0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertNotSame(synchronousQueue0, synchronousQueue1);
      
      // Undeclared exception!
      try { 
        spider2.get((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("E");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Spider spider1 = spider0.setPipelines(linkedList0);
      assertNotNull(spider1);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, linkedList0.size());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      assertNotNull(jsonFilePipeline0);
      assertEquals("/data/webmagic/", jsonFilePipeline0.getPath());
      
      List<SpiderListener> list0 = spider1.getSpiderListeners();
      assertNull(list0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, linkedList0.size());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      // Undeclared exception!
      spider1.start();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f7S5me");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Spider spider1 = spider0.clearPipeline();
      assertNotNull(spider1);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      Spider spider2 = spider1.addUrl(stringArray0);
      assertNotNull(spider2);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider2.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertEquals(0, stringArray0.length);
      
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("f7S5me");
      assertNotNull(jsonFilePipeline0);
      assertEquals("f7S5me/", jsonFilePipeline0.getPath());
      
      Spider spider3 = spider0.addPipeline(jsonFilePipeline0);
      assertNotNull(spider3);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals("f7S5me/", jsonFilePipeline0.getPath());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("E");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Spider spider1 = spider0.setPipelines(linkedList0);
      assertNotNull(spider1);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, linkedList0.size());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      boolean boolean0 = false;
      Spider spider2 = spider1.setExitWhenComplete(false);
      assertNotNull(spider2);
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, linkedList0.size());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertFalse(spider1.isExitWhenComplete());
      assertFalse(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      
      Spider spider3 = spider2.setUUID("E");
      assertNotNull(spider3);
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, linkedList0.size());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertFalse(spider1.isExitWhenComplete());
      assertFalse(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertFalse(spider3.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(spider2, spider1);
      assertSame(spider2, spider3);
      assertSame(spider2, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      
      Spider spider4 = spider1.scheduler((Scheduler) null);
      assertNotNull(spider4);
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, linkedList0.size());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isSpawnUrl());
      assertFalse(spider4.isExitWhenComplete());
      assertSame(spider0, spider4);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider1, spider4);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(spider4, spider1);
      assertSame(spider4, spider0);
      assertSame(spider4, spider2);
      assertSame(spider4, spider3);
      
      Request request0 = new Request((String) null);
      assertNotNull(request0);
      assertNull(request0.getUrl());
      assertFalse(request0.isBinaryContent());
      assertNull(request0.getMethod());
      assertNull(request0.getCharset());
      assertEquals(0L, request0.getPriority());
      
      Request request1 = request0.setPriority((-260L));
      assertNotNull(request1);
      assertNull(request0.getUrl());
      assertFalse(request0.isBinaryContent());
      assertNull(request0.getMethod());
      assertEquals((-260L), request0.getPriority());
      assertNull(request0.getCharset());
      assertFalse(request1.isBinaryContent());
      assertNull(request1.getCharset());
      assertEquals((-260L), request1.getPriority());
      assertNull(request1.getMethod());
      assertNull(request1.getUrl());
      assertSame(request0, request1);
      assertSame(request1, request0);
      
      Request request2 = request1.setCharset("EDFnXayGeP?rT'frU=l");
      assertNotNull(request2);
      assertNull(request0.getUrl());
      assertEquals("EDFnXayGeP?rT'frU=l", request0.getCharset());
      assertFalse(request0.isBinaryContent());
      assertNull(request0.getMethod());
      assertEquals((-260L), request0.getPriority());
      assertFalse(request1.isBinaryContent());
      assertEquals((-260L), request1.getPriority());
      assertEquals("EDFnXayGeP?rT'frU=l", request1.getCharset());
      assertNull(request1.getMethod());
      assertNull(request1.getUrl());
      assertEquals("EDFnXayGeP?rT'frU=l", request2.getCharset());
      assertNull(request2.getUrl());
      assertFalse(request2.isBinaryContent());
      assertEquals((-260L), request2.getPriority());
      assertNull(request2.getMethod());
      assertSame(request0, request2);
      assertSame(request0, request1);
      assertSame(request1, request0);
      assertSame(request1, request2);
      assertSame(request2, request0);
      assertSame(request2, request1);
      
      Request request3 = request2.setUrl("EDFnXayGeP?rT'frU=l");
      assertNotNull(request3);
      assertEquals("EDFnXayGeP?rT'frU=l", request0.getCharset());
      assertFalse(request0.isBinaryContent());
      assertNull(request0.getMethod());
      assertEquals((-260L), request0.getPriority());
      assertEquals("EDFnXayGeP?rT'frU=l", request0.getUrl());
      assertFalse(request1.isBinaryContent());
      assertEquals((-260L), request1.getPriority());
      assertEquals("EDFnXayGeP?rT'frU=l", request1.getUrl());
      assertEquals("EDFnXayGeP?rT'frU=l", request1.getCharset());
      assertNull(request1.getMethod());
      assertEquals("EDFnXayGeP?rT'frU=l", request2.getCharset());
      assertEquals("EDFnXayGeP?rT'frU=l", request2.getUrl());
      assertFalse(request2.isBinaryContent());
      assertEquals((-260L), request2.getPriority());
      assertNull(request2.getMethod());
      assertEquals((-260L), request3.getPriority());
      assertNull(request3.getMethod());
      assertFalse(request3.isBinaryContent());
      assertEquals("EDFnXayGeP?rT'frU=l", request3.getUrl());
      assertEquals("EDFnXayGeP?rT'frU=l", request3.getCharset());
      assertSame(request0, request2);
      assertSame(request0, request1);
      assertSame(request0, request3);
      assertSame(request1, request0);
      assertSame(request1, request3);
      assertSame(request1, request2);
      assertSame(request2, request0);
      assertSame(request2, request3);
      assertSame(request2, request1);
      assertSame(request3, request0);
      assertSame(request3, request1);
      assertSame(request3, request2);
      
      // Undeclared exception!
      try { 
        spider0.onError(request2);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f7S5me");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      
      QueueScheduler queueScheduler0 = new QueueScheduler();
      assertNotNull(queueScheduler0);
      
      Spider spider1 = spider0.scheduler(queueScheduler0);
      assertNotNull(spider1);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("mv.Kt\"");
      assertNotNull(jsonFilePipeline0);
      assertEquals("mv.Kt\"/", jsonFilePipeline0.getPath());
      
      Spider spider2 = spider1.addPipeline(jsonFilePipeline0);
      assertNotNull(spider2);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals("mv.Kt\"/", jsonFilePipeline0.getPath());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      
      Spider spider3 = spider2.setUUID("/");
      assertNotNull(spider3);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals("mv.Kt\"/", jsonFilePipeline0.getPath());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertSame(spider2, spider3);
      assertSame(spider3, spider2);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      
      Spider spider4 = spider3.setExitWhenComplete(false);
      assertNotNull(spider4);
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals("mv.Kt\"/", jsonFilePipeline0.getPath());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertFalse(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isSpawnUrl());
      assertFalse(spider3.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertFalse(spider4.isExitWhenComplete());
      assertTrue(spider4.isSpawnUrl());
      assertEquals(0L, spider4.getPageCount());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertSame(spider0, spider4);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider4);
      assertSame(spider1, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertSame(spider2, spider4);
      assertSame(spider2, spider3);
      assertSame(spider3, spider4);
      assertSame(spider3, spider2);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      assertSame(spider4, spider0);
      assertSame(spider4, spider1);
      assertSame(spider4, spider2);
      assertSame(spider4, spider3);
      
      Spider spider5 = spider4.pipeline(jsonFilePipeline0);
      assertNotNull(spider5);
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals("mv.Kt\"/", jsonFilePipeline0.getPath());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertFalse(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isSpawnUrl());
      assertFalse(spider3.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertFalse(spider4.isExitWhenComplete());
      assertTrue(spider4.isSpawnUrl());
      assertEquals(0L, spider4.getPageCount());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertFalse(spider5.isExitWhenComplete());
      assertTrue(spider5.isSpawnUrl());
      assertEquals(0L, spider5.getPageCount());
      assertSame(spider0, spider4);
      assertSame(spider0, spider5);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider4);
      assertSame(spider1, spider0);
      assertSame(spider1, spider5);
      assertSame(spider2, spider5);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertSame(spider2, spider4);
      assertSame(spider2, spider3);
      assertSame(spider3, spider5);
      assertSame(spider3, spider4);
      assertSame(spider3, spider2);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      assertSame(spider4, spider0);
      assertSame(spider4, spider1);
      assertSame(spider4, spider2);
      assertSame(spider4, spider5);
      assertSame(spider4, spider3);
      assertSame(spider5, spider1);
      assertSame(spider5, spider3);
      assertSame(spider5, spider0);
      assertSame(spider5, spider4);
      assertSame(spider5, spider2);
      
      Spider spider6 = spider5.startRequest((List<Request>) null);
      assertNotNull(spider6);
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals("mv.Kt\"/", jsonFilePipeline0.getPath());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertFalse(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isSpawnUrl());
      assertFalse(spider3.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertFalse(spider4.isExitWhenComplete());
      assertTrue(spider4.isSpawnUrl());
      assertEquals(0L, spider4.getPageCount());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertFalse(spider5.isExitWhenComplete());
      assertTrue(spider5.isSpawnUrl());
      assertEquals(0L, spider5.getPageCount());
      assertEquals(0L, spider6.getPageCount());
      assertTrue(spider6.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider6.getStatus());
      assertFalse(spider6.isExitWhenComplete());
      assertSame(spider0, spider4);
      assertSame(spider0, spider5);
      assertSame(spider0, spider6);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider4);
      assertSame(spider1, spider0);
      assertSame(spider1, spider5);
      assertSame(spider1, spider6);
      assertSame(spider2, spider5);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertSame(spider2, spider6);
      assertSame(spider2, spider4);
      assertSame(spider2, spider3);
      assertSame(spider3, spider5);
      assertSame(spider3, spider4);
      assertSame(spider3, spider2);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      assertSame(spider3, spider6);
      assertSame(spider4, spider0);
      assertSame(spider4, spider1);
      assertSame(spider4, spider6);
      assertSame(spider4, spider2);
      assertSame(spider4, spider5);
      assertSame(spider4, spider3);
      assertSame(spider5, spider1);
      assertSame(spider5, spider6);
      assertSame(spider5, spider3);
      assertSame(spider5, spider0);
      assertSame(spider5, spider4);
      assertSame(spider5, spider2);
      assertSame(spider6, spider3);
      assertSame(spider6, spider4);
      assertSame(spider6, spider0);
      assertSame(spider6, spider2);
      assertSame(spider6, spider1);
      assertSame(spider6, spider5);
      
      Spider spider7 = spider5.setUUID("nx;kQ'Fz");
      assertNotNull(spider7);
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals("mv.Kt\"/", jsonFilePipeline0.getPath());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertFalse(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isSpawnUrl());
      assertFalse(spider3.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertFalse(spider4.isExitWhenComplete());
      assertTrue(spider4.isSpawnUrl());
      assertEquals(0L, spider4.getPageCount());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertFalse(spider5.isExitWhenComplete());
      assertTrue(spider5.isSpawnUrl());
      assertEquals(0L, spider5.getPageCount());
      assertEquals(0L, spider7.getPageCount());
      assertFalse(spider7.isExitWhenComplete());
      assertTrue(spider7.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider7.getStatus());
      assertSame(spider0, spider4);
      assertSame(spider0, spider5);
      assertSame(spider0, spider6);
      assertSame(spider0, spider1);
      assertSame(spider0, spider7);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider4);
      assertSame(spider1, spider0);
      assertSame(spider1, spider5);
      assertSame(spider1, spider6);
      assertSame(spider1, spider7);
      assertSame(spider2, spider5);
      assertSame(spider2, spider1);
      assertSame(spider2, spider7);
      assertSame(spider2, spider0);
      assertSame(spider2, spider6);
      assertSame(spider2, spider4);
      assertSame(spider2, spider3);
      assertSame(spider3, spider5);
      assertSame(spider3, spider7);
      assertSame(spider3, spider4);
      assertSame(spider3, spider2);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      assertSame(spider3, spider6);
      assertSame(spider4, spider7);
      assertSame(spider4, spider0);
      assertSame(spider4, spider1);
      assertSame(spider4, spider6);
      assertSame(spider4, spider2);
      assertSame(spider4, spider5);
      assertSame(spider4, spider3);
      assertSame(spider5, spider1);
      assertSame(spider5, spider6);
      assertSame(spider5, spider7);
      assertSame(spider5, spider3);
      assertSame(spider5, spider0);
      assertSame(spider5, spider4);
      assertSame(spider5, spider2);
      assertSame(spider7, spider3);
      assertSame(spider7, spider5);
      assertSame(spider7, spider0);
      assertSame(spider7, spider1);
      assertSame(spider7, spider6);
      assertSame(spider7, spider4);
      assertSame(spider7, spider2);
      
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      LinkedBlockingDeque<Runnable> linkedBlockingDeque0 = new LinkedBlockingDeque<Runnable>();
      assertNotNull(linkedBlockingDeque0);
      
      LinkedBlockingDeque<Runnable> linkedBlockingDeque1 = new LinkedBlockingDeque<Runnable>();
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      assertNotNull(linkedBlockingDeque1);
      
      ThreadPoolExecutor threadPoolExecutor0 = null;
      try {
        threadPoolExecutor0 = new ThreadPoolExecutor((-1168), 1, 1, timeUnit0, linkedBlockingDeque1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f7S5me");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, (String) null);
      assertNotNull(phantomJSDownloader0);
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      assertNotNull(spider1);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      assertNotNull(resultItemsCollectorPipeline0);
      
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      assertFalse(synchronousQueue0.contains("f7S5me"));
      assertNotNull(synchronousQueue0);
      
      List<Pipeline> list0 = spider1.getAll((Collection<String>) synchronousQueue0);
      assertFalse(synchronousQueue0.contains("f7S5me"));
      assertNotNull(list0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      Spider spider2 = spider0.setPipelines(list0);
      assertFalse(synchronousQueue0.contains("f7S5me"));
      assertNotNull(spider2);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Stopped, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      
      long long0 = spider0.getPageCount();
      assertEquals(0L, long0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      
      Page page0 = new Page();
      assertNotNull(page0);
      assertEquals(200, page0.getStatusCode());
      assertNull(page0.getRawText());
      assertNull(page0.getCharset());
      assertTrue(page0.isDownloadSuccess());
      
      Spider spider3 = spider0.setExitWhenComplete(false);
      assertNotNull(spider3);
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertFalse(spider3.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(Spider.Status.Stopped, spider3.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider1);
      
      Spider spider4 = spider2.setUUID((String) null);
      assertFalse(synchronousQueue0.contains("f7S5me"));
      assertNotNull(spider4);
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Stopped, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertTrue(spider4.isSpawnUrl());
      assertFalse(spider4.isExitWhenComplete());
      assertEquals(Spider.Status.Stopped, spider4.getStatus());
      assertEquals(0L, spider4.getPageCount());
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider0, spider4);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider4);
      assertSame(spider2, spider3);
      assertSame(spider2, spider4);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertSame(spider4, spider0);
      assertSame(spider4, spider1);
      assertSame(spider4, spider2);
      assertSame(spider4, spider3);
      
      Spider spider5 = spider2.setSpawnUrl(true);
      assertFalse(synchronousQueue0.contains("f7S5me"));
      assertNotNull(spider5);
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Stopped, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertTrue(spider5.isSpawnUrl());
      assertFalse(spider5.isExitWhenComplete());
      assertEquals(0L, spider5.getPageCount());
      assertEquals(Spider.Status.Stopped, spider5.getStatus());
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider5);
      assertSame(spider0, spider3);
      assertSame(spider0, spider4);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider4);
      assertSame(spider1, spider5);
      assertSame(spider2, spider3);
      assertSame(spider2, spider4);
      assertSame(spider2, spider5);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertSame(spider5, spider0);
      assertSame(spider5, spider4);
      assertSame(spider5, spider2);
      assertSame(spider5, spider1);
      assertSame(spider5, spider3);
      
      QueueScheduler queueScheduler0 = new QueueScheduler();
      assertNotNull(queueScheduler0);
      
      Spider spider6 = spider3.downloader(phantomJSDownloader0);
      assertNotNull(spider6);
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertFalse(spider3.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(Spider.Status.Stopped, spider3.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertFalse(spider6.isExitWhenComplete());
      assertTrue(spider6.isSpawnUrl());
      assertEquals(Spider.Status.Stopped, spider6.getStatus());
      assertEquals(0L, spider6.getPageCount());
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider5);
      assertSame(spider0, spider3);
      assertSame(spider0, spider4);
      assertSame(spider0, spider6);
      assertSame(spider3, spider6);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider5);
      assertSame(spider3, spider1);
      assertSame(spider3, spider4);
      assertSame(spider6, spider2);
      assertSame(spider6, spider5);
      assertSame(spider6, spider1);
      assertSame(spider6, spider0);
      assertSame(spider6, spider3);
      assertSame(spider6, spider4);
      
      Spider spider7 = spider6.thread(2014);
      assertNotNull(spider7);
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertFalse(spider3.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(Spider.Status.Stopped, spider3.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertFalse(spider6.isExitWhenComplete());
      assertTrue(spider6.isSpawnUrl());
      assertEquals(Spider.Status.Stopped, spider6.getStatus());
      assertEquals(0L, spider6.getPageCount());
      assertTrue(spider7.isSpawnUrl());
      assertEquals(0L, spider7.getPageCount());
      assertEquals(Spider.Status.Stopped, spider7.getStatus());
      assertFalse(spider7.isExitWhenComplete());
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider5);
      assertSame(spider0, spider7);
      assertSame(spider0, spider3);
      assertSame(spider0, spider4);
      assertSame(spider0, spider6);
      assertSame(spider3, spider6);
      assertSame(spider3, spider0);
      assertSame(spider3, spider7);
      assertSame(spider3, spider2);
      assertSame(spider3, spider5);
      assertSame(spider3, spider1);
      assertSame(spider3, spider4);
      assertSame(spider6, spider7);
      assertSame(spider6, spider2);
      assertSame(spider6, spider5);
      assertSame(spider6, spider1);
      assertSame(spider6, spider0);
      assertSame(spider6, spider3);
      assertSame(spider6, spider4);
      assertSame(spider7, spider6);
      assertSame(spider7, spider3);
      assertSame(spider7, spider4);
      assertSame(spider7, spider1);
      assertSame(spider7, spider0);
      assertSame(spider7, spider2);
      assertSame(spider7, spider5);
      
      Spider spider8 = spider7.setScheduler(queueScheduler0);
      assertNotNull(spider8);
      assertEquals(Spider.Status.Stopped, spider8.getStatus());
      assertEquals(0L, spider8.getPageCount());
      assertTrue(spider8.isSpawnUrl());
      assertFalse(spider8.isExitWhenComplete());
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertFalse(spider3.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(Spider.Status.Stopped, spider3.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertFalse(spider6.isExitWhenComplete());
      assertTrue(spider6.isSpawnUrl());
      assertEquals(Spider.Status.Stopped, spider6.getStatus());
      assertEquals(0L, spider6.getPageCount());
      assertTrue(spider7.isSpawnUrl());
      assertEquals(0L, spider7.getPageCount());
      assertEquals(Spider.Status.Stopped, spider7.getStatus());
      assertFalse(spider7.isExitWhenComplete());
      assertSame(spider8, spider3);
      assertSame(spider8, spider7);
      assertSame(spider8, spider5);
      assertSame(spider8, spider4);
      assertSame(spider8, spider6);
      assertSame(spider8, spider0);
      assertSame(spider8, spider2);
      assertSame(spider8, spider1);
      assertSame(spider0, spider8);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider5);
      assertSame(spider0, spider7);
      assertSame(spider0, spider3);
      assertSame(spider0, spider4);
      assertSame(spider0, spider6);
      assertSame(spider3, spider6);
      assertSame(spider3, spider0);
      assertSame(spider3, spider8);
      assertSame(spider3, spider7);
      assertSame(spider3, spider2);
      assertSame(spider3, spider5);
      assertSame(spider3, spider1);
      assertSame(spider3, spider4);
      assertSame(spider6, spider7);
      assertSame(spider6, spider2);
      assertSame(spider6, spider5);
      assertSame(spider6, spider1);
      assertSame(spider6, spider0);
      assertSame(spider6, spider8);
      assertSame(spider6, spider3);
      assertSame(spider6, spider4);
      assertSame(spider7, spider8);
      assertSame(spider7, spider6);
      assertSame(spider7, spider3);
      assertSame(spider7, spider4);
      assertSame(spider7, spider1);
      assertSame(spider7, spider0);
      assertSame(spider7, spider2);
      assertSame(spider7, spider5);
      
      spider1.stop();
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
      assertFalse(spider1.isExitWhenComplete());
      assertSame(spider0, spider8);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider5);
      assertSame(spider0, spider7);
      assertSame(spider0, spider3);
      assertSame(spider0, spider4);
      assertSame(spider0, spider6);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider1, spider7);
      assertSame(spider1, spider3);
      assertSame(spider1, spider8);
      assertSame(spider1, spider4);
      assertSame(spider1, spider6);
      assertSame(spider1, spider5);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f7S5me");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, (String) null);
      assertNotNull(phantomJSDownloader0);
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      assertNotNull(forkJoinPool_ForkJoinWorkerThreadFactory0);
      
      MockThread mockThread0 = new MockThread();
      assertNotNull(mockThread0);
      
      ThreadGroup threadGroup0 = (ThreadGroup)mockThread0.getUncaughtExceptionHandler();
      assertNotNull(threadGroup0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals("Test_Execution_Group", threadGroup0.getName());
      
      phantomJSDownloader0.setThread(3040);
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      
      Request request0 = new Request("v2GT3P+v,`,DL?");
      assertNotNull(request0);
      assertNull(request0.getCharset());
      assertNull(request0.getMethod());
      assertEquals(0L, request0.getPriority());
      assertEquals("v2GT3P+v,`,DL?", request0.getUrl());
      assertFalse(request0.isBinaryContent());
      
      Request request1 = request0.setPriority(3040);
      assertNotNull(request1);
      assertNull(request0.getCharset());
      assertNull(request0.getMethod());
      assertEquals(3040L, request0.getPriority());
      assertEquals("v2GT3P+v,`,DL?", request0.getUrl());
      assertFalse(request0.isBinaryContent());
      assertEquals(3040L, request1.getPriority());
      assertNull(request1.getMethod());
      assertEquals("v2GT3P+v,`,DL?", request1.getUrl());
      assertFalse(request1.isBinaryContent());
      assertNull(request1.getCharset());
      assertSame(request0, request1);
      assertSame(request1, request0);
      
      // Undeclared exception!
      try { 
        spider0.onSuccess(request1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      
      Spider spider1 = spider0.startRequest((List<Request>) null);
      assertNotNull(spider1);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      Spider spider2 = spider1.setUUID("");
      assertNotNull(spider2);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      LinkedBlockingDeque<Runnable> linkedBlockingDeque0 = new LinkedBlockingDeque<Runnable>();
      assertNotNull(linkedBlockingDeque0);
      
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(2, 2, 2, timeUnit0, linkedBlockingDeque0);
      assertNotNull(threadPoolExecutor0);
      
      Spider spider3 = spider2.setExecutorService(threadPoolExecutor0);
      assertNotNull(spider3);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider0);
      assertSame(spider2, spider3);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertSame(spider3, spider1);
      assertSame(spider3, spider2);
      assertSame(spider3, spider0);
      
      Page page0 = new Page();
      assertNotNull(page0);
      assertEquals(200, page0.getStatusCode());
      assertNull(page0.getRawText());
      assertNull(page0.getCharset());
      assertTrue(page0.isDownloadSuccess());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      
      Page page1 = Page.fail();
      assertFalse(page1.equals((Object)page0));
      assertNotNull(page1);
      assertFalse(page1.isDownloadSuccess());
      assertNull(page1.getRawText());
      assertEquals(200, page1.getStatusCode());
      assertNull(page1.getCharset());
      assertNotSame(page1, page0);
      
      Page page2 = Page.fail();
      assertFalse(page2.equals((Object)page0));
      assertFalse(page2.equals((Object)page1));
      assertNotNull(page2);
      assertEquals(200, page2.getStatusCode());
      assertNull(page2.getRawText());
      assertNull(page2.getCharset());
      assertFalse(page2.isDownloadSuccess());
      assertNotSame(page2, page0);
      assertNotSame(page2, page1);
      
      spider1.extractAndAddRequests(page1, false);
      assertFalse(page1.equals((Object)page0));
      assertFalse(page1.equals((Object)page2));
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertFalse(page1.isDownloadSuccess());
      assertNull(page1.getRawText());
      assertEquals(200, page1.getStatusCode());
      assertNull(page1.getCharset());
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider0);
      assertNotSame(page1, page0);
      assertNotSame(page1, page2);
      
      spider3.sleep(190);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider0);
      assertSame(spider2, spider3);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertSame(spider3, spider1);
      assertSame(spider3, spider2);
      assertSame(spider3, spider0);
      
      Request request0 = new Request();
      assertNotNull(request0);
      assertNull(request0.getCharset());
      assertNull(request0.getMethod());
      assertEquals(0L, request0.getPriority());
      assertNull(request0.getUrl());
      assertFalse(request0.isBinaryContent());
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Request request1 = request0.setExtras(hashMap0);
      assertNotNull(request1);
      assertNull(request1.getUrl());
      assertFalse(request1.isBinaryContent());
      assertNull(request1.getMethod());
      assertNull(request1.getCharset());
      assertEquals(0L, request1.getPriority());
      assertNull(request0.getCharset());
      assertNull(request0.getMethod());
      assertEquals(0L, request0.getPriority());
      assertNull(request0.getUrl());
      assertFalse(request0.isBinaryContent());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertSame(request1, request0);
      assertSame(request0, request1);
      
      // Undeclared exception!
      try { 
        spider3.onError(request1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Hnvq3(xo|)%Ns$K~IE");
      assertFalse(boolean0);
      
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertNotNull(spider0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      
      Spider spider1 = spider0.setSpawnUrl(false);
      assertNotNull(spider1);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertFalse(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      Spider spider2 = spider1.setUUID("");
      assertNotNull(spider2);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertFalse(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertFalse(spider2.isSpawnUrl());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      
      Spider spider3 = spider1.setSpawnUrl(false);
      assertNotNull(spider3);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertFalse(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider3.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      
      QueueScheduler queueScheduler0 = new QueueScheduler();
      assertNotNull(queueScheduler0);
      
      spider0.stop();
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isSpawnUrl());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      
      // Undeclared exception!
      try { 
        spider1.test((String[]) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, (String) null);
      assertNotNull(phantomJSDownloader0);
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      assertNotNull(synchronousQueue0);
      
      Page page0 = new Page();
      assertNotNull(page0);
      assertNull(page0.getCharset());
      assertNull(page0.getRawText());
      assertEquals(200, page0.getStatusCode());
      assertTrue(page0.isDownloadSuccess());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = ":2/:Huaim0cwPq";
      Page page1 = page0.setRawText(":2/:Huaim0cwPq");
      assertNotNull(page1);
      assertNull(page0.getCharset());
      assertEquals(200, page0.getStatusCode());
      assertEquals(":2/:Huaim0cwPq", page0.getRawText());
      assertTrue(page0.isDownloadSuccess());
      assertEquals(":2/:Huaim0cwPq", page1.getRawText());
      assertEquals(200, page1.getStatusCode());
      assertNull(page1.getCharset());
      assertTrue(page1.isDownloadSuccess());
      assertSame(page0, page1);
      assertSame(page1, page0);
      
      QueueScheduler queueScheduler0 = new QueueScheduler();
      assertNotNull(queueScheduler0);
      
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      assertNotNull(consolePipeline0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(9);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      Spider.Status spider_Status0 = Spider.Status.fromValue(220);
      assertEquals(Spider.Status.Init, spider_Status0);
      
      Spider.Status spider_Status1 = Spider.Status.Stopped;
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(3900);
      assertNotNull(forkJoinPool0);
      
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      assertNotNull(spider1);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      Spider spider2 = spider1.setPipelines((List<Pipeline>) null);
      assertNotNull(spider2);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      
      spider2.sleep(220);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor(":2/:Huaim0cwPq");
      assertFalse(simplePageProcessor1.equals((Object)simplePageProcessor0));
      assertNotNull(simplePageProcessor1);
      
      Spider spider3 = Spider.create(simplePageProcessor1);
      assertFalse(simplePageProcessor1.equals((Object)simplePageProcessor0));
      assertFalse(spider3.equals((Object)spider2));
      assertFalse(spider3.equals((Object)spider1));
      assertFalse(spider3.equals((Object)spider0));
      assertNotNull(spider3);
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      assertNotSame(simplePageProcessor1, simplePageProcessor0);
      assertNotSame(spider3, spider2);
      assertNotSame(spider3, spider1);
      assertNotSame(spider3, spider0);
      
      spider3.stop();
      assertFalse(simplePageProcessor1.equals((Object)simplePageProcessor0));
      assertFalse(spider3.equals((Object)spider2));
      assertFalse(spider3.equals((Object)spider1));
      assertFalse(spider3.equals((Object)spider0));
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      assertNotSame(simplePageProcessor1, simplePageProcessor0);
      assertNotSame(spider3, spider2);
      assertNotSame(spider3, spider1);
      assertNotSame(spider3, spider0);
      
      int int0 = spider_Status1.getValue();
      assertFalse(spider_Status1.equals((Object)spider_Status0));
      assertEquals(2, int0);
      assertNotSame(spider_Status1, spider_Status0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f7S5me");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, (String) null);
      assertNotNull(phantomJSDownloader0);
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      assertNotNull(spider1);
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      assertNotNull(resultItemsCollectorPipeline0);
      
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      assertFalse(synchronousQueue0.contains("f7S5me"));
      assertNotNull(synchronousQueue0);
      
      List<Pipeline> list0 = spider1.getAll((Collection<String>) synchronousQueue0);
      assertFalse(synchronousQueue0.contains("f7S5me"));
      assertNotNull(list0);
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      long long0 = spider0.getPageCount();
      assertEquals(0L, long0);
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertSame(spider0, spider1);
      
      Page page0 = new Page();
      assertNotNull(page0);
      assertEquals(200, page0.getStatusCode());
      assertTrue(page0.isDownloadSuccess());
      assertNull(page0.getCharset());
      assertNull(page0.getRawText());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = ":2/:Huaim0cwPq";
      Page page1 = page0.setRawText(":2/:Huaim0cwPq");
      assertNotNull(page1);
      assertEquals(200, page0.getStatusCode());
      assertTrue(page0.isDownloadSuccess());
      assertNull(page0.getCharset());
      assertEquals(":2/:Huaim0cwPq", page0.getRawText());
      assertTrue(page1.isDownloadSuccess());
      assertEquals(200, page1.getStatusCode());
      assertEquals(":2/:Huaim0cwPq", page1.getRawText());
      assertNull(page1.getCharset());
      assertSame(page0, page1);
      assertSame(page1, page0);
      
      // Undeclared exception!
      spider0.runAsync();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("UQp5*^_6A~(\"]H4h");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertNotNull(spider0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      
      Spider spider1 = spider0.setSpawnUrl(true);
      assertNotNull(spider1);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      Spider spider2 = spider1.setExitWhenComplete(true);
      assertNotNull(spider2);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      
      Spider spider3 = spider0.setUUID("X'4RP!@.RaViBjM");
      assertNotNull(spider3);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider1);
      
      Spider spider4 = spider0.clearPipeline();
      assertNotNull(spider4);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isExitWhenComplete());
      assertTrue(spider4.isSpawnUrl());
      assertSame(spider0, spider4);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider4, spider0);
      assertSame(spider4, spider3);
      assertSame(spider4, spider2);
      assertSame(spider4, spider1);
      
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      assertEquals(5, PriorityScheduler.INITIAL_CAPACITY);
      assertNotNull(priorityScheduler0);
      
      Spider spider5 = spider4.scheduler(priorityScheduler0);
      assertEquals(5, PriorityScheduler.INITIAL_CAPACITY);
      assertNotNull(spider5);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isExitWhenComplete());
      assertTrue(spider4.isSpawnUrl());
      assertTrue(spider5.isSpawnUrl());
      assertEquals(0L, spider5.getPageCount());
      assertTrue(spider5.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertSame(spider0, spider5);
      assertSame(spider0, spider4);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider4, spider0);
      assertSame(spider4, spider3);
      assertSame(spider4, spider5);
      assertSame(spider4, spider2);
      assertSame(spider4, spider1);
      assertSame(spider5, spider1);
      assertSame(spider5, spider3);
      assertSame(spider5, spider0);
      assertSame(spider5, spider4);
      assertSame(spider5, spider2);
      
      Request request0 = new Request();
      assertNotNull(request0);
      assertFalse(request0.isBinaryContent());
      assertNull(request0.getUrl());
      assertEquals(0L, request0.getPriority());
      assertNull(request0.getMethod());
      assertNull(request0.getCharset());
      
      Request request1 = request0.putExtra("X'4RP!@.RaViBjM", spider4);
      assertNotNull(request1);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isExitWhenComplete());
      assertTrue(spider4.isSpawnUrl());
      assertFalse(request0.isBinaryContent());
      assertNull(request0.getUrl());
      assertEquals(0L, request0.getPriority());
      assertNull(request0.getMethod());
      assertNull(request0.getCharset());
      assertNull(request1.getUrl());
      assertFalse(request1.isBinaryContent());
      assertEquals(0L, request1.getPriority());
      assertNull(request1.getMethod());
      assertNull(request1.getCharset());
      assertSame(spider0, spider5);
      assertSame(spider0, spider4);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider4, spider0);
      assertSame(spider4, spider3);
      assertSame(spider4, spider5);
      assertSame(spider4, spider2);
      assertSame(spider4, spider1);
      assertSame(request0, request1);
      assertSame(request1, request0);
      
      priorityScheduler0.pushWhenNoDuplicate(request1, spider0);
      assertEquals(5, PriorityScheduler.INITIAL_CAPACITY);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isExitWhenComplete());
      assertTrue(spider4.isSpawnUrl());
      assertFalse(request0.isBinaryContent());
      assertNull(request0.getUrl());
      assertEquals(0L, request0.getPriority());
      assertNull(request0.getMethod());
      assertNull(request0.getCharset());
      assertNull(request1.getUrl());
      assertFalse(request1.isBinaryContent());
      assertEquals(0L, request1.getPriority());
      assertNull(request1.getMethod());
      assertNull(request1.getCharset());
      assertSame(spider0, spider5);
      assertSame(spider0, spider4);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider4, spider0);
      assertSame(spider4, spider3);
      assertSame(spider4, spider5);
      assertSame(spider4, spider2);
      assertSame(spider4, spider1);
      assertSame(request0, request1);
      assertSame(request1, request0);
      
      Spider spider6 = spider5.setSpawnUrl(false);
      assertEquals(5, PriorityScheduler.INITIAL_CAPACITY);
      assertNotNull(spider6);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isExitWhenComplete());
      assertFalse(spider4.isSpawnUrl());
      assertEquals(0L, spider5.getPageCount());
      assertTrue(spider5.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertFalse(spider5.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider6.getStatus());
      assertFalse(spider6.isSpawnUrl());
      assertTrue(spider6.isExitWhenComplete());
      assertEquals(0L, spider6.getPageCount());
      assertSame(spider0, spider5);
      assertSame(spider0, spider4);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider6);
      assertSame(spider0, spider3);
      assertSame(spider4, spider0);
      assertSame(spider4, spider3);
      assertSame(spider4, spider6);
      assertSame(spider4, spider5);
      assertSame(spider4, spider2);
      assertSame(spider4, spider1);
      assertSame(spider5, spider1);
      assertSame(spider5, spider3);
      assertSame(spider5, spider0);
      assertSame(spider5, spider6);
      assertSame(spider5, spider4);
      assertSame(spider5, spider2);
      assertSame(spider6, spider2);
      assertSame(spider6, spider0);
      assertSame(spider6, spider1);
      assertSame(spider6, spider4);
      assertSame(spider6, spider3);
      assertSame(spider6, spider5);
      
      QueueScheduler queueScheduler0 = new QueueScheduler();
      assertNotNull(queueScheduler0);
      
      // Undeclared exception!
      try { 
        spider6.setScheduler(priorityScheduler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("E");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertNotNull(spider0);
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Spider spider1 = spider0.setPipelines(linkedList0);
      assertNotNull(spider1);
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(0, linkedList0.size());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      Spider spider2 = spider1.setExitWhenComplete(false);
      assertNotNull(spider2);
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(0, linkedList0.size());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider2.isSpawnUrl());
      assertFalse(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      
      Spider spider3 = spider2.setUUID("E");
      assertNotNull(spider3);
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(0, linkedList0.size());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider2.isSpawnUrl());
      assertFalse(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isSpawnUrl());
      assertFalse(spider3.isExitWhenComplete());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider1, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider3);
      assertSame(spider2, spider1);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      
      int int0 = 34;
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      assertNotNull(threadPoolExecutor_AbortPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(34, threadPoolExecutor_AbortPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      Spider spider4 = spider1.thread((ExecutorService) scheduledThreadPoolExecutor0, 34);
      assertNotNull(spider4);
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(0, linkedList0.size());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider4.isSpawnUrl());
      assertEquals(0L, spider4.getPageCount());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertFalse(spider4.isExitWhenComplete());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider4);
      assertSame(spider0, spider3);
      assertSame(spider1, spider4);
      assertSame(spider1, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider4, spider1);
      assertSame(spider4, spider2);
      assertSame(spider4, spider3);
      assertSame(spider4, spider0);
      
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      assertNotNull(fileCacheQueueScheduler0);
      
      Spider spider5 = spider4.setScheduler(fileCacheQueueScheduler0);
      assertNotNull(spider5);
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(0, linkedList0.size());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider4.isSpawnUrl());
      assertEquals(0L, spider4.getPageCount());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertFalse(spider4.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertFalse(spider5.isExitWhenComplete());
      assertTrue(spider5.isSpawnUrl());
      assertEquals(0L, spider5.getPageCount());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider5);
      assertSame(spider0, spider4);
      assertSame(spider0, spider3);
      assertSame(spider1, spider4);
      assertSame(spider1, spider3);
      assertSame(spider1, spider5);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider4, spider1);
      assertSame(spider4, spider2);
      assertSame(spider4, spider3);
      assertSame(spider4, spider0);
      assertSame(spider4, spider5);
      assertSame(spider5, spider3);
      assertSame(spider5, spider4);
      assertSame(spider5, spider2);
      assertSame(spider5, spider0);
      assertSame(spider5, spider1);
      
      // Undeclared exception!
      try { 
        spider3.get("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f7S5me");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, (String) null);
      assertNotNull(phantomJSDownloader0);
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      assertNotNull(forkJoinPool_ForkJoinWorkerThreadFactory0);
      
      MockThread mockThread0 = new MockThread();
      assertNotNull(mockThread0);
      
      ThreadGroup threadGroup0 = (ThreadGroup)mockThread0.getUncaughtExceptionHandler();
      assertNotNull(threadGroup0);
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertEquals("Test_Execution_Group", threadGroup0.getName());
      
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("");
      assertFalse(simplePageProcessor1.equals((Object)simplePageProcessor0));
      assertNotNull(simplePageProcessor1);
      
      Spider spider1 = spider0.setUUID("");
      assertFalse(simplePageProcessor0.equals((Object)simplePageProcessor1));
      assertNotNull(spider1);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertNotSame(simplePageProcessor0, simplePageProcessor1);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      Spider spider2 = Spider.create(simplePageProcessor1);
      assertFalse(simplePageProcessor1.equals((Object)simplePageProcessor0));
      assertFalse(spider2.equals((Object)spider1));
      assertFalse(spider2.equals((Object)spider0));
      assertNotNull(spider2);
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertNotSame(simplePageProcessor1, simplePageProcessor0);
      assertNotSame(spider2, spider1);
      assertNotSame(spider2, spider0);
      
      Spider spider3 = spider2.setSpawnUrl(true);
      assertFalse(simplePageProcessor1.equals((Object)simplePageProcessor0));
      assertFalse(spider2.equals((Object)spider1));
      assertFalse(spider2.equals((Object)spider0));
      assertFalse(spider3.equals((Object)spider1));
      assertFalse(spider3.equals((Object)spider0));
      assertNotNull(spider3);
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertNotSame(simplePageProcessor1, simplePageProcessor0);
      assertSame(spider2, spider3);
      assertNotSame(spider2, spider1);
      assertNotSame(spider2, spider0);
      assertSame(spider3, spider2);
      assertNotSame(spider3, spider1);
      assertNotSame(spider3, spider0);
      
      QueueScheduler queueScheduler0 = new QueueScheduler();
      assertNotNull(queueScheduler0);
      
      QueueScheduler queueScheduler1 = new QueueScheduler();
      assertFalse(queueScheduler1.equals((Object)queueScheduler0));
      assertNotNull(queueScheduler1);
      
      Spider spider4 = spider2.setSpawnUrl(false);
      assertFalse(simplePageProcessor1.equals((Object)simplePageProcessor0));
      assertFalse(spider2.equals((Object)spider1));
      assertFalse(spider2.equals((Object)spider0));
      assertFalse(spider4.equals((Object)spider0));
      assertFalse(spider4.equals((Object)spider1));
      assertNotNull(spider4);
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertFalse(spider2.isSpawnUrl());
      assertFalse(spider4.isSpawnUrl());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(0L, spider4.getPageCount());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertNotSame(simplePageProcessor1, simplePageProcessor0);
      assertSame(spider2, spider3);
      assertNotSame(spider2, spider1);
      assertNotSame(spider2, spider0);
      assertSame(spider2, spider4);
      assertNotSame(spider4, spider0);
      assertSame(spider4, spider2);
      assertSame(spider4, spider3);
      assertNotSame(spider4, spider1);
      
      Spider spider5 = spider4.setScheduler(queueScheduler0);
      assertFalse(simplePageProcessor1.equals((Object)simplePageProcessor0));
      assertFalse(spider2.equals((Object)spider1));
      assertFalse(spider2.equals((Object)spider0));
      assertFalse(queueScheduler0.equals((Object)queueScheduler1));
      assertFalse(spider4.equals((Object)spider0));
      assertFalse(spider4.equals((Object)spider1));
      assertFalse(spider5.equals((Object)spider1));
      assertFalse(spider5.equals((Object)spider0));
      assertNotNull(spider5);
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertFalse(spider2.isSpawnUrl());
      assertFalse(spider4.isSpawnUrl());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(0L, spider4.getPageCount());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertFalse(spider5.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertEquals(0L, spider5.getPageCount());
      assertTrue(spider5.isExitWhenComplete());
      assertNotSame(simplePageProcessor1, simplePageProcessor0);
      assertSame(spider2, spider3);
      assertNotSame(spider2, spider1);
      assertNotSame(spider2, spider0);
      assertSame(spider2, spider4);
      assertSame(spider2, spider5);
      assertNotSame(queueScheduler0, queueScheduler1);
      assertSame(spider4, spider5);
      assertNotSame(spider4, spider0);
      assertSame(spider4, spider2);
      assertSame(spider4, spider3);
      assertNotSame(spider4, spider1);
      assertNotSame(spider5, spider1);
      assertSame(spider5, spider4);
      assertSame(spider5, spider2);
      assertSame(spider5, spider3);
      assertNotSame(spider5, spider0);
      
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Spider spider6 = spider3.setUUID("");
      assertFalse(simplePageProcessor1.equals((Object)simplePageProcessor0));
      assertFalse(spider2.equals((Object)spider1));
      assertFalse(spider2.equals((Object)spider0));
      assertFalse(spider3.equals((Object)spider1));
      assertFalse(spider3.equals((Object)spider0));
      assertFalse(spider6.equals((Object)spider1));
      assertFalse(spider6.equals((Object)spider0));
      assertNotNull(spider6);
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertFalse(spider2.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertFalse(spider3.isSpawnUrl());
      assertFalse(spider6.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider6.getStatus());
      assertTrue(spider6.isExitWhenComplete());
      assertEquals(0L, spider6.getPageCount());
      assertNotSame(simplePageProcessor1, simplePageProcessor0);
      assertSame(spider2, spider3);
      assertNotSame(spider2, spider1);
      assertNotSame(spider2, spider0);
      assertSame(spider2, spider4);
      assertSame(spider2, spider6);
      assertSame(spider2, spider5);
      assertSame(spider3, spider6);
      assertSame(spider3, spider2);
      assertNotSame(spider3, spider1);
      assertSame(spider3, spider4);
      assertNotSame(spider3, spider0);
      assertSame(spider3, spider5);
      assertSame(spider6, spider4);
      assertSame(spider6, spider5);
      assertNotSame(spider6, spider0);
      assertNotSame(spider6, spider1);
      assertSame(spider6, spider2);
      assertSame(spider6, spider3);
      
      spider5.stop();
      assertFalse(simplePageProcessor1.equals((Object)simplePageProcessor0));
      assertFalse(spider2.equals((Object)spider1));
      assertFalse(spider2.equals((Object)spider0));
      assertFalse(queueScheduler0.equals((Object)queueScheduler1));
      assertFalse(spider4.equals((Object)spider0));
      assertFalse(spider4.equals((Object)spider1));
      assertFalse(spider5.equals((Object)spider1));
      assertFalse(spider5.equals((Object)spider0));
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertFalse(spider2.isSpawnUrl());
      assertFalse(spider4.isSpawnUrl());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(0L, spider4.getPageCount());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertFalse(spider5.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertEquals(0L, spider5.getPageCount());
      assertTrue(spider5.isExitWhenComplete());
      assertNotSame(simplePageProcessor1, simplePageProcessor0);
      assertSame(spider2, spider3);
      assertNotSame(spider2, spider1);
      assertNotSame(spider2, spider0);
      assertSame(spider2, spider4);
      assertSame(spider2, spider6);
      assertSame(spider2, spider5);
      assertNotSame(queueScheduler0, queueScheduler1);
      assertSame(spider4, spider5);
      assertSame(spider4, spider6);
      assertNotSame(spider4, spider0);
      assertSame(spider4, spider2);
      assertSame(spider4, spider3);
      assertNotSame(spider4, spider1);
      assertNotSame(spider5, spider1);
      assertSame(spider5, spider4);
      assertSame(spider5, spider2);
      assertSame(spider5, spider3);
      assertNotSame(spider5, spider0);
      assertSame(spider5, spider6);
      
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      assertNotNull(forkJoinPool0);
      
      Spider spider7 = spider6.setExecutorService(forkJoinPool0);
      assertFalse(spider7.equals((Object)spider0));
      assertFalse(spider7.equals((Object)spider1));
      assertFalse(simplePageProcessor1.equals((Object)simplePageProcessor0));
      assertFalse(spider2.equals((Object)spider1));
      assertFalse(spider2.equals((Object)spider0));
      assertFalse(spider3.equals((Object)spider1));
      assertFalse(spider3.equals((Object)spider0));
      assertFalse(spider6.equals((Object)spider1));
      assertFalse(spider6.equals((Object)spider0));
      assertNotNull(spider7);
      assertEquals(Spider.Status.Init, spider7.getStatus());
      assertEquals(0L, spider7.getPageCount());
      assertTrue(spider7.isExitWhenComplete());
      assertFalse(spider7.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertFalse(spider2.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertFalse(spider3.isSpawnUrl());
      assertFalse(spider6.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider6.getStatus());
      assertTrue(spider6.isExitWhenComplete());
      assertEquals(0L, spider6.getPageCount());
      assertSame(spider7, spider6);
      assertSame(spider7, spider4);
      assertNotSame(spider7, spider0);
      assertSame(spider7, spider5);
      assertNotSame(spider7, spider1);
      assertSame(spider7, spider2);
      assertSame(spider7, spider3);
      assertNotSame(simplePageProcessor1, simplePageProcessor0);
      assertSame(spider2, spider3);
      assertSame(spider2, spider7);
      assertNotSame(spider2, spider1);
      assertNotSame(spider2, spider0);
      assertSame(spider2, spider4);
      assertSame(spider2, spider6);
      assertSame(spider2, spider5);
      assertSame(spider3, spider6);
      assertSame(spider3, spider2);
      assertSame(spider3, spider7);
      assertNotSame(spider3, spider1);
      assertSame(spider3, spider4);
      assertNotSame(spider3, spider0);
      assertSame(spider3, spider5);
      assertSame(spider6, spider4);
      assertSame(spider6, spider5);
      assertSame(spider6, spider7);
      assertNotSame(spider6, spider0);
      assertNotSame(spider6, spider1);
      assertSame(spider6, spider2);
      assertSame(spider6, spider3);
      
      boolean boolean0 = spider7.isExitWhenComplete();
      assertFalse(spider7.equals((Object)spider0));
      assertFalse(spider7.equals((Object)spider1));
      assertFalse(simplePageProcessor1.equals((Object)simplePageProcessor0));
      assertFalse(spider2.equals((Object)spider1));
      assertFalse(spider2.equals((Object)spider0));
      assertFalse(spider3.equals((Object)spider1));
      assertFalse(spider3.equals((Object)spider0));
      assertFalse(spider6.equals((Object)spider1));
      assertFalse(spider6.equals((Object)spider0));
      assertTrue(boolean0);
      assertEquals(Spider.Status.Init, spider7.getStatus());
      assertEquals(0L, spider7.getPageCount());
      assertTrue(spider7.isExitWhenComplete());
      assertFalse(spider7.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertFalse(spider2.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertFalse(spider3.isSpawnUrl());
      assertFalse(spider6.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider6.getStatus());
      assertTrue(spider6.isExitWhenComplete());
      assertEquals(0L, spider6.getPageCount());
      assertSame(spider7, spider6);
      assertSame(spider7, spider4);
      assertNotSame(spider7, spider0);
      assertSame(spider7, spider5);
      assertNotSame(spider7, spider1);
      assertSame(spider7, spider2);
      assertSame(spider7, spider3);
      assertNotSame(simplePageProcessor1, simplePageProcessor0);
      assertSame(spider2, spider3);
      assertSame(spider2, spider7);
      assertNotSame(spider2, spider1);
      assertNotSame(spider2, spider0);
      assertSame(spider2, spider4);
      assertSame(spider2, spider6);
      assertSame(spider2, spider5);
      assertSame(spider3, spider6);
      assertSame(spider3, spider2);
      assertSame(spider3, spider7);
      assertNotSame(spider3, spider1);
      assertSame(spider3, spider4);
      assertNotSame(spider3, spider0);
      assertSame(spider3, spider5);
      assertSame(spider6, spider4);
      assertSame(spider6, spider5);
      assertSame(spider6, spider7);
      assertNotSame(spider6, spider0);
      assertNotSame(spider6, spider1);
      assertSame(spider6, spider2);
      assertSame(spider6, spider3);
      
      // Undeclared exception!
      try { 
        spider0.run();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f7S5me");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      
      String string0 = null;
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, (String) null);
      assertNotNull(phantomJSDownloader0);
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      assertNotNull(spider1);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      Spider spider2 = spider1.setUUID("f7S5me");
      assertNotNull(spider2);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      
      long long0 = spider0.getPageCount();
      assertEquals(0L, long0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      
      Page page0 = new Page();
      assertNotNull(page0);
      assertTrue(page0.isDownloadSuccess());
      assertNull(page0.getRawText());
      assertEquals(200, page0.getStatusCode());
      assertNull(page0.getCharset());
      
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        spider0.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(",u\\Iry&59a3c|_");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler(",u\\Iry&59a3c|_");
      assertNotNull(fileCacheQueueScheduler0);
      
      Spider spider1 = spider0.setScheduler(fileCacheQueueScheduler0);
      assertNotNull(spider1);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      Spider spider2 = spider1.setExitWhenComplete(false);
      assertNotNull(spider2);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertFalse(spider2.isExitWhenComplete());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      
      Spider spider3 = spider2.setUUID("");
      assertNotNull(spider3);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertFalse(spider2.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertFalse(spider3.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider3);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider3);
      assertSame(spider3, spider2);
      assertSame(spider3, spider0);
      assertSame(spider3, spider1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-1);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-87), (byte) (-1)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      Spider spider4 = spider1.setSpawnUrl(true);
      assertNotNull(spider4);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isSpawnUrl());
      assertFalse(spider4.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertSame(spider0, spider4);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider2);
      assertSame(spider1, spider4);
      assertSame(spider1, spider0);
      assertSame(spider1, spider3);
      assertSame(spider4, spider3);
      assertSame(spider4, spider0);
      assertSame(spider4, spider1);
      assertSame(spider4, spider2);
      
      QueueScheduler queueScheduler0 = new QueueScheduler();
      assertNotNull(queueScheduler0);
      
      // Undeclared exception!
      spider4.setScheduler(queueScheduler0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("E");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertNotNull(spider0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Request request0 = new Request((String) null);
      assertNotNull(request0);
      assertNull(request0.getCharset());
      assertNull(request0.getUrl());
      assertNull(request0.getMethod());
      assertFalse(request0.isBinaryContent());
      assertEquals(0L, request0.getPriority());
      
      Request[] requestArray0 = new Request[1];
      requestArray0[0] = request0;
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("E");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Rj(woYOp", "E");
      assertNotNull(phantomJSDownloader0);
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      assertNotNull(resultItemsCollectorPipeline0);
      
      spider0.stop();
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      
      spider0.stop();
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      
      boolean boolean0 = spider0.isSpawnUrl();
      assertTrue(boolean0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      
      spider0.extractAndAddRequests((Page) null, false);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f7S5me");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, (String) null);
      assertNotNull(phantomJSDownloader0);
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      assertNotNull(spider1);
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      assertNotNull(resultItemsCollectorPipeline0);
      
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      assertFalse(synchronousQueue0.contains("f7S5me"));
      assertNotNull(synchronousQueue0);
      
      List<Pipeline> list0 = spider1.getAll((Collection<String>) synchronousQueue0);
      assertFalse(synchronousQueue0.contains("f7S5me"));
      assertNotNull(list0);
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      Spider spider2 = spider0.setPipelines(list0);
      assertFalse(synchronousQueue0.contains("f7S5me"));
      assertNotNull(spider2);
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Stopped, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      
      Spider spider3 = spider1.addPipeline(resultItemsCollectorPipeline0);
      assertNotNull(spider3);
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(Spider.Status.Stopped, spider3.getStatus());
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider0);
      assertSame(spider3, spider1);
      
      Page page0 = new Page();
      assertNotNull(page0);
      assertEquals(200, page0.getStatusCode());
      assertNull(page0.getRawText());
      assertTrue(page0.isDownloadSuccess());
      assertNull(page0.getCharset());
      
      Page page1 = page0.setRawText(" error");
      assertNotNull(page1);
      assertEquals(200, page0.getStatusCode());
      assertTrue(page0.isDownloadSuccess());
      assertEquals(" error", page0.getRawText());
      assertNull(page0.getCharset());
      assertNull(page1.getCharset());
      assertEquals(" error", page1.getRawText());
      assertEquals(200, page1.getStatusCode());
      assertTrue(page1.isDownloadSuccess());
      assertSame(page0, page1);
      assertSame(page1, page0);
      
      ResultItems resultItems0 = page1.getResultItems();
      assertNotNull(resultItems0);
      assertEquals(200, page0.getStatusCode());
      assertTrue(page0.isDownloadSuccess());
      assertEquals(" error", page0.getRawText());
      assertNull(page0.getCharset());
      assertNull(page1.getCharset());
      assertEquals(" error", page1.getRawText());
      assertEquals(200, page1.getStatusCode());
      assertTrue(page1.isDownloadSuccess());
      assertFalse(resultItems0.isSkip());
      assertSame(page0, page1);
      assertSame(page1, page0);
      
      int int0 = spider2.getThreadAlive();
      assertEquals(0, int0);
      assertFalse(synchronousQueue0.contains(" error"));
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Stopped, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider0);
      assertSame(spider2, spider3);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      
      resultItemsCollectorPipeline0.process(resultItems0, spider0);
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(200, page0.getStatusCode());
      assertTrue(page0.isDownloadSuccess());
      assertEquals(" error", page0.getRawText());
      assertNull(page0.getCharset());
      assertNull(page1.getCharset());
      assertEquals(" error", page1.getRawText());
      assertEquals(200, page1.getStatusCode());
      assertTrue(page1.isDownloadSuccess());
      assertFalse(resultItems0.isSkip());
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(page0, page1);
      assertSame(page1, page0);
      
      String string0 = spider2.getUUID();
      assertFalse(synchronousQueue0.contains(" error"));
      assertNull(string0);
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Stopped, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider0);
      assertSame(spider2, spider3);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      
      // Undeclared exception!
      try { 
        Spider.Status.valueOf("f7S5me");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant us.codecraft.webmagic.Spider.Status.f7S5me
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("E");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertNotNull(spider0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Spider spider1 = spider0.setPipelines(linkedList0);
      assertNotNull(spider1);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(0, linkedList0.size());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      Spider spider2 = spider1.setExitWhenComplete(false);
      assertNotNull(spider2);
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(0, linkedList0.size());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertFalse(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      
      Spider spider3 = spider2.setUUID("E");
      assertNotNull(spider3);
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(0, linkedList0.size());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertFalse(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertFalse(spider3.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isSpawnUrl());
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(spider2, spider3);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider1);
      
      Request request0 = new Request((String) null);
      assertNotNull(request0);
      assertNull(request0.getCharset());
      assertNull(request0.getMethod());
      assertFalse(request0.isBinaryContent());
      assertNull(request0.getUrl());
      assertEquals(0L, request0.getPriority());
      
      Request request1 = request0.setPriority((-260L));
      assertNotNull(request1);
      assertNull(request0.getCharset());
      assertNull(request0.getMethod());
      assertFalse(request0.isBinaryContent());
      assertNull(request0.getUrl());
      assertEquals((-260L), request0.getPriority());
      assertNull(request1.getCharset());
      assertEquals((-260L), request1.getPriority());
      assertFalse(request1.isBinaryContent());
      assertNull(request1.getMethod());
      assertNull(request1.getUrl());
      assertSame(request0, request1);
      assertSame(request1, request0);
      
      Request request2 = request1.setCharset("EDFnXayGeP?rT'frU=l");
      assertNotNull(request2);
      assertNull(request0.getMethod());
      assertFalse(request0.isBinaryContent());
      assertEquals("EDFnXayGeP?rT'frU=l", request0.getCharset());
      assertNull(request0.getUrl());
      assertEquals((-260L), request0.getPriority());
      assertEquals("EDFnXayGeP?rT'frU=l", request1.getCharset());
      assertEquals((-260L), request1.getPriority());
      assertFalse(request1.isBinaryContent());
      assertNull(request1.getMethod());
      assertNull(request1.getUrl());
      assertNull(request2.getMethod());
      assertEquals((-260L), request2.getPriority());
      assertNull(request2.getUrl());
      assertEquals("EDFnXayGeP?rT'frU=l", request2.getCharset());
      assertFalse(request2.isBinaryContent());
      assertSame(request0, request1);
      assertSame(request0, request2);
      assertSame(request1, request0);
      assertSame(request1, request2);
      assertSame(request2, request1);
      assertSame(request2, request0);
      
      Request request3 = request2.setUrl("/data/webmagic/");
      assertNotNull(request3);
      assertNull(request0.getMethod());
      assertFalse(request0.isBinaryContent());
      assertEquals("EDFnXayGeP?rT'frU=l", request0.getCharset());
      assertEquals("/data/webmagic/", request0.getUrl());
      assertEquals((-260L), request0.getPriority());
      assertEquals("/data/webmagic/", request1.getUrl());
      assertEquals("EDFnXayGeP?rT'frU=l", request1.getCharset());
      assertEquals((-260L), request1.getPriority());
      assertFalse(request1.isBinaryContent());
      assertNull(request1.getMethod());
      assertEquals("/data/webmagic/", request2.getUrl());
      assertNull(request2.getMethod());
      assertEquals((-260L), request2.getPriority());
      assertEquals("EDFnXayGeP?rT'frU=l", request2.getCharset());
      assertFalse(request2.isBinaryContent());
      assertFalse(request3.isBinaryContent());
      assertEquals("EDFnXayGeP?rT'frU=l", request3.getCharset());
      assertEquals((-260L), request3.getPriority());
      assertEquals("/data/webmagic/", request3.getUrl());
      assertNull(request3.getMethod());
      assertSame(request0, request1);
      assertSame(request0, request3);
      assertSame(request0, request2);
      assertSame(request1, request0);
      assertSame(request1, request3);
      assertSame(request1, request2);
      assertSame(request2, request1);
      assertSame(request2, request0);
      assertSame(request2, request3);
      assertSame(request3, request0);
      assertSame(request3, request1);
      assertSame(request3, request2);
      
      // Undeclared exception!
      try { 
        spider3.onError(request3);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("~`U^ZkI\"u");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      
      Spider spider1 = spider0.setSpawnUrl(false);
      assertNotNull(spider1);
      assertFalse(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      Spider spider2 = spider1.thread(1);
      assertNotNull(spider2);
      assertFalse(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertFalse(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      
      String string0 = "";
      ReplaceSelector replaceSelector0 = null;
      try {
        replaceSelector0 = new ReplaceSelector("*VyB>;62*}", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid regex
         //
         verifyException("us.codecraft.webmagic.selector.ReplaceSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("SW 9qA\"80nA&6");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      
      Spider spider1 = spider0.pipeline((Pipeline) null);
      assertNotNull(spider1);
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      int int0 = 1837;
      Page page0 = Page.fail();
      assertNotNull(page0);
      assertEquals(200, page0.getStatusCode());
      assertNull(page0.getCharset());
      assertFalse(page0.isDownloadSuccess());
      assertNull(page0.getRawText());
      
      Page page1 = page0.setRawText("Init");
      assertNotNull(page1);
      assertEquals(200, page0.getStatusCode());
      assertEquals("Init", page0.getRawText());
      assertNull(page0.getCharset());
      assertFalse(page0.isDownloadSuccess());
      assertFalse(page1.isDownloadSuccess());
      assertNull(page1.getCharset());
      assertEquals(200, page1.getStatusCode());
      assertEquals("Init", page1.getRawText());
      assertSame(page0, page1);
      assertSame(page1, page0);
      
      // Undeclared exception!
      try { 
        simplePageProcessor0.process(page1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f7S5me");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, (String) null);
      assertNotNull(phantomJSDownloader0);
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      assertNotNull(spider1);
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      assertNotNull(resultItemsCollectorPipeline0);
      
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      assertFalse(synchronousQueue0.contains("f7S5me"));
      assertNotNull(synchronousQueue0);
      
      List<Pipeline> list0 = spider1.getAll((Collection<String>) synchronousQueue0);
      assertFalse(synchronousQueue0.contains("f7S5me"));
      assertNotNull(list0);
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      Spider spider2 = spider0.setPipelines(list0);
      assertFalse(synchronousQueue0.contains("f7S5me"));
      assertNotNull(spider2);
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(Spider.Status.Stopped, spider2.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      
      long long0 = spider0.getPageCount();
      assertEquals(0L, long0);
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      
      Page page0 = new Page();
      assertNotNull(page0);
      assertEquals(200, page0.getStatusCode());
      assertNull(page0.getCharset());
      assertNull(page0.getRawText());
      assertTrue(page0.isDownloadSuccess());
      
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      assertNotNull(threadPoolExecutor_CallerRunsPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(6064, threadPoolExecutor_CallerRunsPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      threadPoolExecutor_CallerRunsPolicy0.rejectedExecution(spider1, scheduledThreadPoolExecutor0);
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      
      Spider spider3 = spider1.thread((ExecutorService) scheduledThreadPoolExecutor0, 39);
      assertNotNull(spider3);
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Stopped, spider3.getStatus());
      assertTrue(spider3.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider1);
      
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("$VALUES");
      assertNotNull(fileCacheQueueScheduler0);
      
      Spider spider4 = spider3.setScheduler(fileCacheQueueScheduler0);
      assertNotNull(spider4);
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Stopped, spider3.getStatus());
      assertTrue(spider3.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(0L, spider4.getPageCount());
      assertEquals(Spider.Status.Stopped, spider4.getStatus());
      assertTrue(spider4.isSpawnUrl());
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider0, spider4);
      assertSame(spider0, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider1, spider4);
      assertSame(spider1, spider3);
      assertSame(spider3, spider4);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider1);
      assertSame(spider4, spider0);
      assertSame(spider4, spider2);
      assertSame(spider4, spider1);
      assertSame(spider4, spider3);
      
      // Undeclared exception!
      spider4.get((String) null);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = "us.codecraft.webmagic.pipeline.ResultItemsCollectorPipeline";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.pipeline.ResultItemsCollectorPipeline");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertNotNull(spider0);
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      assertNotNull(resultItemsCollectorPipeline0);
      
      Spider spider1 = spider0.pipeline(resultItemsCollectorPipeline0);
      assertNotNull(spider1);
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      Spider spider2 = spider1.setUUID("us.codecraft.webmagic.pipeline.ResultItemsCollectorPipeline");
      assertNotNull(spider2);
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      
      Spider spider3 = spider2.setExitWhenComplete(true);
      assertNotNull(spider3);
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertSame(spider2, spider3);
      assertSame(spider3, spider2);
      assertSame(spider3, spider0);
      assertSame(spider3, spider1);
      
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      assertEquals(5, PriorityScheduler.INITIAL_CAPACITY);
      assertNotNull(priorityScheduler0);
      
      Spider spider4 = spider3.scheduler(priorityScheduler0);
      assertEquals(5, PriorityScheduler.INITIAL_CAPACITY);
      assertNotNull(spider4);
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isExitWhenComplete());
      assertTrue(spider4.isSpawnUrl());
      assertSame(spider0, spider3);
      assertSame(spider0, spider4);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider1, spider4);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertSame(spider2, spider4);
      assertSame(spider2, spider3);
      assertSame(spider3, spider2);
      assertSame(spider3, spider4);
      assertSame(spider3, spider0);
      assertSame(spider3, spider1);
      assertSame(spider4, spider0);
      assertSame(spider4, spider1);
      assertSame(spider4, spider3);
      assertSame(spider4, spider2);
      
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      
      Spider spider1 = spider0.setDownloader((Downloader) null);
      assertNotNull(spider1);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      assertEquals(5, PriorityScheduler.INITIAL_CAPACITY);
      assertNotNull(priorityScheduler0);
      
      Spider spider2 = spider0.setSpawnUrl(false);
      assertNotNull(spider2);
      assertFalse(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertFalse(spider2.isSpawnUrl());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      
      List<SpiderListener> list0 = spider1.getSpiderListeners();
      assertNull(list0);
      assertFalse(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertFalse(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      
      Spider spider3 = spider2.setSpiderListeners((List<SpiderListener>) null);
      assertNotNull(spider3);
      assertFalse(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertFalse(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertFalse(spider3.isSpawnUrl());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider2, spider3);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertSame(spider3, spider2);
      assertSame(spider3, spider0);
      assertSame(spider3, spider1);
      
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.selector.AbstractSelectable");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      
      Spider spider1 = spider0.clearPipeline();
      assertNotNull(spider1);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      assertNotNull(multiPagePipeline0);
      
      Spider spider2 = spider1.pipeline(multiPagePipeline0);
      assertNotNull(spider2);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      
      Spider.Status spider_Status0 = spider2.getStatus();
      assertEquals(Spider.Status.Init, spider_Status0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "oVO");
      assertNotNull(phantomJSDownloader0);
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      
      Request request0 = new Request("#kQ{uIe%{XiJO");
      assertNotNull(request0);
      assertFalse(request0.isBinaryContent());
      assertNull(request0.getCharset());
      assertNull(request0.getMethod());
      assertEquals("#kQ{uIe%{XiJO", request0.getUrl());
      assertEquals(0L, request0.getPriority());
      
      // Undeclared exception!
      try { 
        phantomJSDownloader0.download(request0, (Task) spider2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f7S5me");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, (String) null);
      assertNotNull(phantomJSDownloader0);
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      assertNotNull(spider1);
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      assertNotNull(resultItemsCollectorPipeline0);
      
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      assertFalse(synchronousQueue0.contains("f7S5me"));
      assertNotNull(synchronousQueue0);
      
      List<Pipeline> list0 = spider1.getAll((Collection<String>) synchronousQueue0);
      assertFalse(synchronousQueue0.contains("f7S5me"));
      assertNotNull(list0);
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      Spider spider2 = spider0.setPipelines(list0);
      assertFalse(synchronousQueue0.contains("f7S5me"));
      assertNotNull(spider2);
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Stopped, spider2.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      
      long long0 = spider0.getPageCount();
      assertEquals(0L, long0);
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      
      Page page0 = new Page();
      assertNotNull(page0);
      assertTrue(page0.isDownloadSuccess());
      assertNull(page0.getRawText());
      assertNull(page0.getCharset());
      assertEquals(200, page0.getStatusCode());
      
      String[] stringArray0 = new String[1];
      String string0 = ":2/:Huaim0cwPq";
      stringArray0[0] = ":2/:Huaim0cwPq";
      // Undeclared exception!
      try { 
        spider0.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f7S5me");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, (String) null);
      assertNotNull(phantomJSDownloader0);
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      assertNotNull(spider1);
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      assertNotNull(resultItemsCollectorPipeline0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Spider spider2 = spider1.addPipeline(resultItemsCollectorPipeline0);
      assertNotNull(spider2);
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      
      Spider spider3 = spider0.clearPipeline();
      assertNotNull(spider3);
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider3, spider1);
      assertSame(spider3, spider2);
      assertSame(spider3, spider0);
      
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      assertNotNull(forkJoinPool_ForkJoinWorkerThreadFactory0);
      
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, spider2, "f7S5me");
      assertNotNull(mockThread0);
      
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = mockThread0.getUncaughtExceptionHandler();
      assertNotNull(thread_UncaughtExceptionHandler0);
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider1, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider3);
      
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(2173);
      assertNotNull(forkJoinPool0);
      
      Spider spider4 = spider2.thread((ExecutorService) forkJoinPool0, 4706);
      assertNotNull(spider4);
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider4.isSpawnUrl());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(0L, spider4.getPageCount());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider0, spider4);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider1, spider4);
      assertSame(spider1, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider3);
      assertSame(spider2, spider4);
      assertSame(spider4, spider3);
      assertSame(spider4, spider1);
      assertSame(spider4, spider2);
      assertSame(spider4, spider0);
      
      spider4.checkIfRunning();
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider4.isSpawnUrl());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(0L, spider4.getPageCount());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider0, spider4);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider1, spider4);
      assertSame(spider1, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider3);
      assertSame(spider2, spider4);
      assertSame(spider4, spider3);
      assertSame(spider4, spider1);
      assertSame(spider4, spider2);
      assertSame(spider4, spider0);
      
      Spider spider5 = spider0.setSpawnUrl(true);
      assertNotNull(spider5);
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider5.isSpawnUrl());
      assertEquals(0L, spider5.getPageCount());
      assertTrue(spider5.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider0, spider5);
      assertSame(spider0, spider4);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider5, spider1);
      assertSame(spider5, spider0);
      assertSame(spider5, spider2);
      assertSame(spider5, spider4);
      assertSame(spider5, spider3);
      
      Spider spider6 = spider3.setUUID((String) null);
      assertNotNull(spider6);
      assertEquals(Spider.Status.Init, spider6.getStatus());
      assertEquals(0L, spider6.getPageCount());
      assertTrue(spider6.isExitWhenComplete());
      assertTrue(spider6.isSpawnUrl());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertSame(spider6, spider2);
      assertSame(spider6, spider3);
      assertSame(spider6, spider1);
      assertSame(spider6, spider4);
      assertSame(spider6, spider5);
      assertSame(spider6, spider0);
      assertSame(spider0, spider1);
      assertSame(spider0, spider5);
      assertSame(spider0, spider4);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider0, spider6);
      assertSame(spider3, spider1);
      assertSame(spider3, spider5);
      assertSame(spider3, spider6);
      assertSame(spider3, spider4);
      assertSame(spider3, spider2);
      assertSame(spider3, spider0);
      
      boolean boolean1 = spider0.isExitWhenComplete();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider0, spider5);
      assertSame(spider0, spider4);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider0, spider6);
      
      String string0 = spider0.getUUID();
      assertNull(string0);
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider0, spider5);
      assertSame(spider0, spider4);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider0, spider6);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("E");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Spider spider1 = spider0.setPipelines(linkedList0);
      assertNotNull(spider1);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0, linkedList0.size());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      boolean boolean0 = false;
      // Undeclared exception!
      spider0.runAsync();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("E");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Spider spider1 = spider0.setExitWhenComplete(false);
      assertNotNull(spider1);
      assertEquals(0L, spider0.getPageCount());
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider1.isExitWhenComplete());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      Spider spider2 = spider1.setUUID("E");
      assertNotNull(spider2);
      assertEquals(0L, spider0.getPageCount());
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertFalse(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      
      Request request0 = new Request((String) null);
      assertNotNull(request0);
      assertFalse(request0.isBinaryContent());
      assertNull(request0.getUrl());
      assertEquals(0L, request0.getPriority());
      assertNull(request0.getMethod());
      assertNull(request0.getCharset());
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertFalse(linkedList1.contains("E"));
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      LinkedList<SpiderListener> linkedList2 = new LinkedList<SpiderListener>();
      assertNotNull(linkedList2);
      assertEquals(0, linkedList2.size());
      
      Spider spider3 = spider0.setSpiderListeners(linkedList2);
      assertNotNull(spider3);
      assertEquals(0L, spider0.getPageCount());
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, linkedList2.size());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertFalse(spider3.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider3, spider1);
      assertSame(spider3, spider2);
      assertSame(spider3, spider0);
      
      Spider spider4 = spider3.startUrls(linkedList1);
      assertFalse(linkedList1.contains("E"));
      assertNotNull(spider4);
      assertEquals(0L, spider0.getPageCount());
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, linkedList1.size());
      assertEquals(0, linkedList2.size());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertFalse(spider3.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      assertFalse(spider4.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isSpawnUrl());
      assertSame(spider0, spider4);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider3, spider1);
      assertSame(spider3, spider2);
      assertSame(spider3, spider4);
      assertSame(spider3, spider0);
      assertSame(spider4, spider3);
      assertSame(spider4, spider2);
      assertSame(spider4, spider1);
      assertSame(spider4, spider0);
      
      List<SpiderListener> list0 = spider0.getSpiderListeners();
      assertNotNull(list0);
      assertEquals(0L, spider0.getPageCount());
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertSame(spider0, spider4);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      
      Spider spider5 = spider2.setSpiderListeners(list0);
      assertNotNull(spider5);
      assertEquals(0L, spider0.getPageCount());
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertFalse(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(spider5.isSpawnUrl());
      assertEquals(0L, spider5.getPageCount());
      assertFalse(spider5.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertSame(spider0, spider4);
      assertSame(spider0, spider3);
      assertSame(spider0, spider5);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider1, spider4);
      assertSame(spider1, spider3);
      assertSame(spider1, spider5);
      assertSame(spider2, spider3);
      assertSame(spider2, spider5);
      assertSame(spider2, spider4);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertSame(spider5, spider3);
      assertSame(spider5, spider1);
      assertSame(spider5, spider2);
      assertSame(spider5, spider4);
      assertSame(spider5, spider0);
      
      Page page0 = Page.fail();
      assertNotNull(page0);
      assertNull(page0.getRawText());
      assertFalse(page0.isDownloadSuccess());
      assertNull(page0.getCharset());
      assertEquals(200, page0.getStatusCode());
      
      // Undeclared exception!
      try { 
        spider2.sleep((-409));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("E");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertNotNull(spider0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Request request0 = new Request((String) null);
      assertNotNull(request0);
      assertNull(request0.getMethod());
      assertNull(request0.getCharset());
      assertFalse(request0.isBinaryContent());
      assertNull(request0.getUrl());
      assertEquals(0L, request0.getPriority());
      
      Request request1 = request0.setPriority((-260L));
      assertNotNull(request1);
      assertEquals((-260L), request0.getPriority());
      assertNull(request0.getMethod());
      assertNull(request0.getCharset());
      assertFalse(request0.isBinaryContent());
      assertNull(request0.getUrl());
      assertNull(request1.getCharset());
      assertEquals((-260L), request1.getPriority());
      assertFalse(request1.isBinaryContent());
      assertNull(request1.getMethod());
      assertNull(request1.getUrl());
      assertSame(request0, request1);
      assertSame(request1, request0);
      
      Request request2 = request0.addHeader((String) null, "_cycle_tried_times");
      assertNotNull(request2);
      assertEquals((-260L), request0.getPriority());
      assertNull(request0.getMethod());
      assertNull(request0.getCharset());
      assertFalse(request0.isBinaryContent());
      assertNull(request0.getUrl());
      assertFalse(request2.isBinaryContent());
      assertEquals((-260L), request2.getPriority());
      assertNull(request2.getCharset());
      assertNull(request2.getMethod());
      assertNull(request2.getUrl());
      assertSame(request0, request2);
      assertSame(request0, request1);
      assertSame(request2, request0);
      assertSame(request2, request1);
      
      Request request3 = request2.setUrl("E");
      assertNotNull(request3);
      assertEquals((-260L), request0.getPriority());
      assertNull(request0.getMethod());
      assertEquals("E", request0.getUrl());
      assertNull(request0.getCharset());
      assertFalse(request0.isBinaryContent());
      assertFalse(request2.isBinaryContent());
      assertEquals((-260L), request2.getPriority());
      assertNull(request2.getCharset());
      assertNull(request2.getMethod());
      assertEquals("E", request2.getUrl());
      assertFalse(request3.isBinaryContent());
      assertNull(request3.getCharset());
      assertEquals("E", request3.getUrl());
      assertEquals((-260L), request3.getPriority());
      assertNull(request3.getMethod());
      assertSame(request0, request3);
      assertSame(request0, request2);
      assertSame(request0, request1);
      assertSame(request2, request0);
      assertSame(request2, request3);
      assertSame(request2, request1);
      assertSame(request3, request1);
      assertSame(request3, request0);
      assertSame(request3, request2);
      
      // Undeclared exception!
      try { 
        spider0.onError(request2);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("fq7S5e");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      assertEquals(5, PriorityScheduler.INITIAL_CAPACITY);
      assertNotNull(priorityScheduler0);
      
      Spider spider1 = spider0.setScheduler(priorityScheduler0);
      assertEquals(5, PriorityScheduler.INITIAL_CAPACITY);
      assertNotNull(spider1);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      Request request0 = new Request("=D3");
      assertNotNull(request0);
      assertEquals(0L, request0.getPriority());
      assertNull(request0.getMethod());
      assertNull(request0.getCharset());
      assertEquals("=D3", request0.getUrl());
      assertFalse(request0.isBinaryContent());
      
      Request request1 = request0.setPriority(5);
      assertNotNull(request1);
      assertNull(request0.getMethod());
      assertEquals(5L, request0.getPriority());
      assertNull(request0.getCharset());
      assertEquals("=D3", request0.getUrl());
      assertFalse(request0.isBinaryContent());
      assertFalse(request1.isBinaryContent());
      assertEquals("=D3", request1.getUrl());
      assertNull(request1.getMethod());
      assertEquals(5L, request1.getPriority());
      assertNull(request1.getCharset());
      assertSame(request0, request1);
      assertSame(request1, request0);
      
      // Undeclared exception!
      try { 
        spider0.onSuccess(request1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("E");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Request request0 = new Request((String) null);
      assertNotNull(request0);
      assertFalse(request0.isBinaryContent());
      assertNull(request0.getCharset());
      assertNull(request0.getMethod());
      assertEquals(0L, request0.getPriority());
      assertNull(request0.getUrl());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Request request1 = new Request("d$w(v)I#w}\"}9vLL");
      assertFalse(request1.equals((Object)request0));
      assertNotNull(request1);
      assertNull(request1.getMethod());
      assertEquals("d$w(v)I#w}\"}9vLL", request1.getUrl());
      assertNull(request1.getCharset());
      assertFalse(request1.isBinaryContent());
      assertEquals(0L, request1.getPriority());
      
      Request[] requestArray0 = new Request[2];
      QueueScheduler queueScheduler0 = new QueueScheduler();
      assertNotNull(queueScheduler0);
      
      Request request2 = queueScheduler0.poll(spider0);
      assertNull(request2);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      
      requestArray0[0] = null;
      requestArray0[1] = request1;
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.processor.SimplePageProcessor");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      
      Spider spider1 = spider0.setExitWhenComplete(false);
      assertNotNull(spider1);
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadFactory0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      Spider spider2 = spider1.thread((ExecutorService) scheduledThreadPoolExecutor0, 1684);
      assertNotNull(spider2);
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertFalse(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      assertNotNull(consolePipeline0);
      
      Spider spider3 = spider2.addPipeline(consolePipeline0);
      assertNotNull(spider3);
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertFalse(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertFalse(spider3.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider0);
      assertSame(spider2, spider3);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      
      Spider spider4 = spider3.thread(1684);
      assertNotNull(spider4);
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertFalse(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertFalse(spider3.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider4.isSpawnUrl());
      assertFalse(spider4.isExitWhenComplete());
      assertEquals(0L, spider4.getPageCount());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider4);
      assertSame(spider0, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider4);
      assertSame(spider1, spider3);
      assertSame(spider1, spider0);
      assertSame(spider2, spider4);
      assertSame(spider2, spider3);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertSame(spider3, spider1);
      assertSame(spider3, spider4);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      assertSame(spider4, spider3);
      assertSame(spider4, spider1);
      assertSame(spider4, spider0);
      assertSame(spider4, spider2);
      
      Spider spider5 = spider4.clearPipeline();
      assertNotNull(spider5);
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertFalse(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertFalse(spider3.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider4.isSpawnUrl());
      assertFalse(spider4.isExitWhenComplete());
      assertEquals(0L, spider4.getPageCount());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertFalse(spider5.isExitWhenComplete());
      assertTrue(spider5.isSpawnUrl());
      assertEquals(0L, spider5.getPageCount());
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider4);
      assertSame(spider0, spider3);
      assertSame(spider0, spider5);
      assertSame(spider1, spider2);
      assertSame(spider1, spider5);
      assertSame(spider1, spider4);
      assertSame(spider1, spider3);
      assertSame(spider1, spider0);
      assertSame(spider2, spider4);
      assertSame(spider2, spider5);
      assertSame(spider2, spider3);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertSame(spider3, spider1);
      assertSame(spider3, spider5);
      assertSame(spider3, spider4);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      assertSame(spider4, spider3);
      assertSame(spider4, spider1);
      assertSame(spider4, spider5);
      assertSame(spider4, spider0);
      assertSame(spider4, spider2);
      assertSame(spider5, spider4);
      assertSame(spider5, spider2);
      assertSame(spider5, spider0);
      assertSame(spider5, spider3);
      assertSame(spider5, spider1);
      
      Page page0 = Page.fail();
      assertNotNull(page0);
      assertFalse(page0.isDownloadSuccess());
      assertEquals(200, page0.getStatusCode());
      assertNull(page0.getRawText());
      assertNull(page0.getCharset());
      
      Page page1 = page0.setRawText("html");
      assertNotNull(page1);
      assertEquals("html", page0.getRawText());
      assertFalse(page0.isDownloadSuccess());
      assertEquals(200, page0.getStatusCode());
      assertNull(page0.getCharset());
      assertEquals(200, page1.getStatusCode());
      assertFalse(page1.isDownloadSuccess());
      assertNull(page1.getCharset());
      assertEquals("html", page1.getRawText());
      assertSame(page0, page1);
      assertSame(page1, page0);
      
      // Undeclared exception!
      try { 
        simplePageProcessor0.process(page1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f7S5me");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, (String) null);
      assertNotNull(phantomJSDownloader0);
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      assertNotNull(spider1);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      assertNotNull(resultItemsCollectorPipeline0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Spider spider2 = spider1.addPipeline(resultItemsCollectorPipeline0);
      assertNotNull(spider2);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      
      Spider spider3 = spider0.clearPipeline();
      assertNotNull(spider3);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider3, spider2);
      assertSame(spider3, spider0);
      assertSame(spider3, spider1);
      
      Spider spider4 = spider0.clearPipeline();
      assertNotNull(spider4);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertTrue(spider4.isSpawnUrl());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(0L, spider4.getPageCount());
      assertSame(spider0, spider4);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider4, spider3);
      assertSame(spider4, spider2);
      assertSame(spider4, spider1);
      assertSame(spider4, spider0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertFalse(linkedList0.contains("f7S5me"));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Spider spider5 = spider3.startUrls(linkedList0);
      assertFalse(linkedList0.contains("f7S5me"));
      assertNotNull(spider5);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0, linkedList0.size());
      assertTrue(spider5.isSpawnUrl());
      assertTrue(spider5.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertEquals(0L, spider5.getPageCount());
      assertSame(spider0, spider4);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider0, spider5);
      assertSame(spider0, spider2);
      assertSame(spider3, spider2);
      assertSame(spider3, spider4);
      assertSame(spider3, spider5);
      assertSame(spider3, spider0);
      assertSame(spider3, spider1);
      assertSame(spider5, spider4);
      assertSame(spider5, spider0);
      assertSame(spider5, spider2);
      assertSame(spider5, spider1);
      assertSame(spider5, spider3);
      
      List<SpiderListener> list0 = spider2.getSpiderListeners();
      assertNull(list0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertSame(spider0, spider4);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider0, spider5);
      assertSame(spider0, spider2);
      assertSame(spider1, spider2);
      assertSame(spider1, spider5);
      assertSame(spider1, spider4);
      assertSame(spider1, spider0);
      assertSame(spider1, spider3);
      assertSame(spider2, spider5);
      assertSame(spider2, spider4);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider3);
      
      Spider spider6 = spider5.setSpiderListeners((List<SpiderListener>) null);
      assertFalse(linkedList0.contains("f7S5me"));
      assertNotNull(spider6);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0, linkedList0.size());
      assertTrue(spider5.isSpawnUrl());
      assertTrue(spider5.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertEquals(0L, spider5.getPageCount());
      assertTrue(spider6.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider6.getStatus());
      assertEquals(0L, spider6.getPageCount());
      assertTrue(spider6.isExitWhenComplete());
      assertSame(spider0, spider6);
      assertSame(spider0, spider4);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider0, spider5);
      assertSame(spider0, spider2);
      assertSame(spider3, spider2);
      assertSame(spider3, spider6);
      assertSame(spider3, spider4);
      assertSame(spider3, spider5);
      assertSame(spider3, spider0);
      assertSame(spider3, spider1);
      assertSame(spider5, spider0);
      assertSame(spider5, spider4);
      assertSame(spider5, spider2);
      assertSame(spider5, spider1);
      assertSame(spider5, spider3);
      assertSame(spider5, spider6);
      assertSame(spider6, spider5);
      assertSame(spider6, spider4);
      assertSame(spider6, spider3);
      assertSame(spider6, spider0);
      assertSame(spider6, spider2);
      assertSame(spider6, spider1);
      
      Spider spider7 = spider6.setUUID((String) null);
      assertFalse(linkedList0.contains("f7S5me"));
      assertNotNull(spider7);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0, linkedList0.size());
      assertTrue(spider5.isSpawnUrl());
      assertTrue(spider5.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertEquals(0L, spider5.getPageCount());
      assertTrue(spider6.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider6.getStatus());
      assertEquals(0L, spider6.getPageCount());
      assertTrue(spider6.isExitWhenComplete());
      assertTrue(spider7.isExitWhenComplete());
      assertTrue(spider7.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider7.getStatus());
      assertEquals(0L, spider7.getPageCount());
      assertSame(spider0, spider6);
      assertSame(spider0, spider4);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider0, spider7);
      assertSame(spider0, spider5);
      assertSame(spider0, spider2);
      assertSame(spider3, spider2);
      assertSame(spider3, spider6);
      assertSame(spider3, spider4);
      assertSame(spider3, spider5);
      assertSame(spider3, spider0);
      assertSame(spider3, spider1);
      assertSame(spider3, spider7);
      assertSame(spider5, spider0);
      assertSame(spider5, spider4);
      assertSame(spider5, spider2);
      assertSame(spider5, spider1);
      assertSame(spider5, spider7);
      assertSame(spider5, spider3);
      assertSame(spider5, spider6);
      assertSame(spider6, spider5);
      assertSame(spider6, spider4);
      assertSame(spider6, spider3);
      assertSame(spider6, spider0);
      assertSame(spider6, spider2);
      assertSame(spider6, spider1);
      assertSame(spider6, spider7);
      assertSame(spider7, spider2);
      assertSame(spider7, spider1);
      assertSame(spider7, spider0);
      assertSame(spider7, spider5);
      assertSame(spider7, spider4);
      assertSame(spider7, spider3);
      assertSame(spider7, spider6);
      
      Page page0 = Page.fail();
      assertNotNull(page0);
      assertEquals(200, page0.getStatusCode());
      assertNull(page0.getCharset());
      assertFalse(page0.isDownloadSuccess());
      assertNull(page0.getRawText());
      
      // Undeclared exception!
      try { 
        spider1.extractAndAddRequests(page0, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, (String) null);
      assertNotNull(phantomJSDownloader0);
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      
      PhantomJSDownloader phantomJSDownloader1 = new PhantomJSDownloader("", "waitNewUrl - interrupted, error {}");
      assertFalse(phantomJSDownloader1.equals((Object)phantomJSDownloader0));
      assertNotNull(phantomJSDownloader1);
      assertEquals(0, phantomJSDownloader1.getRetryNum());
      
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("waitNewUrl - interrupted, error {}");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      
      Spider spider1 = spider0.thread(1673);
      assertNotNull(spider1);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      Spider spider2 = spider1.setScheduler((Scheduler) null);
      assertNotNull(spider2);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      
      Spider spider3 = spider2.setUUID("waitNewUrl - interrupted, error {}");
      assertNotNull(spider3);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider3);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      
      Spider spider4 = spider3.setSpawnUrl(true);
      assertNotNull(spider4);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(0L, spider4.getPageCount());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertTrue(spider4.isSpawnUrl());
      assertSame(spider0, spider4);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider4);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider3);
      assertSame(spider2, spider4);
      assertSame(spider3, spider4);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      assertSame(spider4, spider2);
      assertSame(spider4, spider3);
      assertSame(spider4, spider0);
      assertSame(spider4, spider1);
      
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      assertNotNull(resultItemsCollectorPipeline0);
      
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      assertFalse(synchronousQueue0.contains("waitNewUrl - interrupted, error {}"));
      assertNotNull(synchronousQueue0);
      
      Spider spider5 = spider2.addPipeline(resultItemsCollectorPipeline0);
      assertNotNull(spider5);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertTrue(spider5.isSpawnUrl());
      assertTrue(spider5.isExitWhenComplete());
      assertEquals(0L, spider5.getPageCount());
      assertSame(spider0, spider4);
      assertSame(spider0, spider5);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider5);
      assertSame(spider1, spider4);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider3);
      assertSame(spider2, spider5);
      assertSame(spider2, spider4);
      assertSame(spider5, spider0);
      assertSame(spider5, spider4);
      assertSame(spider5, spider2);
      assertSame(spider5, spider3);
      assertSame(spider5, spider1);
      
      Page page0 = new Page();
      assertNotNull(page0);
      assertEquals(200, page0.getStatusCode());
      assertTrue(page0.isDownloadSuccess());
      assertNull(page0.getRawText());
      assertNull(page0.getCharset());
      
      Page page1 = page0.setRawText("");
      assertNotNull(page1);
      assertEquals(200, page0.getStatusCode());
      assertTrue(page0.isDownloadSuccess());
      assertEquals("", page0.getRawText());
      assertNull(page0.getCharset());
      assertEquals(200, page1.getStatusCode());
      assertNull(page1.getCharset());
      assertTrue(page1.isDownloadSuccess());
      assertEquals("", page1.getRawText());
      assertSame(page0, page1);
      assertSame(page1, page0);
      
      ResultItems resultItems0 = page0.getResultItems();
      assertNotNull(resultItems0);
      assertEquals(200, page0.getStatusCode());
      assertTrue(page0.isDownloadSuccess());
      assertEquals("", page0.getRawText());
      assertNull(page0.getCharset());
      assertFalse(resultItems0.isSkip());
      assertSame(page0, page1);
      
      int int0 = spider5.getThreadAlive();
      assertEquals(0, int0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertTrue(spider5.isSpawnUrl());
      assertTrue(spider5.isExitWhenComplete());
      assertEquals(0L, spider5.getPageCount());
      assertSame(spider0, spider4);
      assertSame(spider0, spider5);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider5);
      assertSame(spider1, spider4);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider3);
      assertSame(spider2, spider5);
      assertSame(spider2, spider4);
      assertSame(spider5, spider0);
      assertSame(spider5, spider4);
      assertSame(spider5, spider2);
      assertSame(spider5, spider3);
      assertSame(spider5, spider1);
      
      ResultItemsCollectorPipeline resultItemsCollectorPipeline1 = new ResultItemsCollectorPipeline();
      assertFalse(resultItemsCollectorPipeline1.equals((Object)resultItemsCollectorPipeline0));
      assertNotNull(resultItemsCollectorPipeline1);
      
      resultItemsCollectorPipeline1.process(resultItems0, spider3);
      assertFalse(resultItemsCollectorPipeline1.equals((Object)resultItemsCollectorPipeline0));
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(200, page0.getStatusCode());
      assertTrue(page0.isDownloadSuccess());
      assertEquals("", page0.getRawText());
      assertNull(page0.getCharset());
      assertFalse(resultItems0.isSkip());
      assertSame(spider0, spider4);
      assertSame(spider0, spider5);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider5);
      assertSame(spider1, spider4);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider3);
      assertSame(spider2, spider5);
      assertSame(spider2, spider4);
      assertSame(spider3, spider5);
      assertSame(spider3, spider4);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      assertSame(page0, page1);
      assertNotSame(resultItemsCollectorPipeline1, resultItemsCollectorPipeline0);
      
      String string0 = spider2.getUUID();
      assertEquals("waitNewUrl - interrupted, error {}", string0);
      assertNotNull(string0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertSame(spider0, spider4);
      assertSame(spider0, spider5);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider5);
      assertSame(spider1, spider4);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider3);
      assertSame(spider2, spider5);
      assertSame(spider2, spider4);
      
      // Undeclared exception!
      try { 
        Spider.Status.valueOf("page status code error, page {} , code: {}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant us.codecraft.webmagic.Spider.Status.page status code error, page {} , code: {}
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" error");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertNotNull(spider0);
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      assertNotNull(resultItemsCollectorPipeline0);
      
      Spider spider1 = spider0.pipeline(resultItemsCollectorPipeline0);
      assertNotNull(spider1);
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      CountableThreadPool countableThreadPool0 = spider0.threadPool;
      assertNull(countableThreadPool0);
      
      spider1.threadPool = null;
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      
      Spider spider2 = spider1.setUUID((String) null);
      assertNotNull(spider2);
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      
      QueueScheduler queueScheduler0 = new QueueScheduler();
      assertNotNull(queueScheduler0);
      
      Spider spider3 = spider1.setScheduler(queueScheduler0);
      assertNotNull(spider3);
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      
      spider3.threadNum = 1702;
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      // Undeclared exception!
      try { 
        spider3.thread((ExecutorService) scheduledThreadPoolExecutor0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = "Spider ";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Spider ");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Spider spider1 = spider0.setPipelines(linkedList0);
      assertNotNull(spider1);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, linkedList0.size());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      assertNotNull(threadPoolExecutor_CallerRunsPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadFactory0, threadPoolExecutor_CallerRunsPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      // Undeclared exception!
      try { 
        spider1.thread((ExecutorService) scheduledThreadPoolExecutor0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("6.");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      
      Spider spider1 = spider0.clearPipeline();
      assertNotNull(spider1);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      Spider spider2 = spider1.setUUID("Spider {} closed! {} pages downloaded.");
      assertNotNull(spider2);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("NA2Rp~T");
      assertNotNull(fileCacheQueueScheduler0);
      
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover((DuplicateRemover) null);
      assertNotNull(duplicateRemovedScheduler0);
      assertSame(fileCacheQueueScheduler0, duplicateRemovedScheduler0);
      assertSame(duplicateRemovedScheduler0, fileCacheQueueScheduler0);
      
      Spider spider3 = spider2.scheduler(duplicateRemovedScheduler0);
      assertNotNull(spider3);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider3);
      assertSame(fileCacheQueueScheduler0, duplicateRemovedScheduler0);
      assertSame(duplicateRemovedScheduler0, fileCacheQueueScheduler0);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider1);
      
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2963);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      BlockingQueue<Runnable> blockingQueue0 = scheduledThreadPoolExecutor0.getQueue();
      assertNotNull(blockingQueue0);
      
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(131, 1164, 131, timeUnit0, blockingQueue0);
      assertNotNull(threadPoolExecutor0);
      
      // Undeclared exception!
      try { 
        spider3.thread((ExecutorService) threadPoolExecutor0, (-3109));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f7S5me");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("init cache file ");
      assertNotNull(fileCacheQueueScheduler0);
      
      Spider spider1 = spider0.setScheduler(fileCacheQueueScheduler0);
      assertNotNull(spider1);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      Spider spider2 = spider0.clearPipeline();
      assertNotNull(spider2);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      
      Spider spider3 = spider0.setSpawnUrl(false);
      assertNotNull(spider3);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertFalse(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider3, spider2);
      assertSame(spider3, spider0);
      assertSame(spider3, spider1);
      
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      assertNotNull(consolePipeline0);
      
      Spider spider4 = spider2.addPipeline(consolePipeline0);
      assertNotNull(spider4);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertFalse(spider2.isSpawnUrl());
      assertFalse(spider4.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(0L, spider4.getPageCount());
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider0, spider4);
      assertSame(spider0, spider1);
      assertSame(spider2, spider3);
      assertSame(spider2, spider1);
      assertSame(spider2, spider4);
      assertSame(spider2, spider0);
      assertSame(spider4, spider1);
      assertSame(spider4, spider0);
      assertSame(spider4, spider2);
      assertSame(spider4, spider3);
      
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      assertNotNull(threadPoolExecutor_CallerRunsPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(6064, threadPoolExecutor_CallerRunsPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      Spider spider5 = spider2.thread((ExecutorService) scheduledThreadPoolExecutor0, 6064);
      assertNotNull(spider5);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertFalse(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertFalse(spider5.isSpawnUrl());
      assertEquals(0L, spider5.getPageCount());
      assertTrue(spider5.isExitWhenComplete());
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider0, spider5);
      assertSame(spider0, spider4);
      assertSame(spider0, spider1);
      assertSame(spider2, spider3);
      assertSame(spider2, spider1);
      assertSame(spider2, spider5);
      assertSame(spider2, spider4);
      assertSame(spider2, spider0);
      assertSame(spider5, spider2);
      assertSame(spider5, spider0);
      assertSame(spider5, spider1);
      assertSame(spider5, spider3);
      assertSame(spider5, spider4);
      
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("E");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertNotNull(spider0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Spider spider1 = spider0.setPipelines(linkedList0);
      assertNotNull(spider1);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0, linkedList0.size());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      Spider spider2 = spider1.setExitWhenComplete(false);
      assertNotNull(spider2);
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(0, linkedList0.size());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertFalse(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      
      Spider spider3 = spider2.setUUID("E");
      assertNotNull(spider3);
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(0, linkedList0.size());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertFalse(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertFalse(spider3.isExitWhenComplete());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider1, spider3);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider0);
      assertSame(spider2, spider3);
      assertSame(spider2, spider1);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      
      Request request0 = new Request((String) null);
      assertNotNull(request0);
      assertNull(request0.getUrl());
      assertFalse(request0.isBinaryContent());
      assertNull(request0.getMethod());
      assertEquals(0L, request0.getPriority());
      assertNull(request0.getCharset());
      
      Request request1 = request0.setPriority((-260L));
      assertNotNull(request1);
      assertNull(request0.getUrl());
      assertFalse(request0.isBinaryContent());
      assertEquals((-260L), request0.getPriority());
      assertNull(request0.getMethod());
      assertNull(request0.getCharset());
      assertEquals((-260L), request1.getPriority());
      assertNull(request1.getMethod());
      assertNull(request1.getCharset());
      assertFalse(request1.isBinaryContent());
      assertNull(request1.getUrl());
      assertSame(request0, request1);
      assertSame(request1, request0);
      
      Request request2 = request0.addHeader((String) null, "EDFnXayGeP?rT'frU=l");
      assertNotNull(request2);
      assertNull(request0.getUrl());
      assertFalse(request0.isBinaryContent());
      assertEquals((-260L), request0.getPriority());
      assertNull(request0.getMethod());
      assertNull(request0.getCharset());
      assertEquals((-260L), request2.getPriority());
      assertNull(request2.getCharset());
      assertNull(request2.getMethod());
      assertNull(request2.getUrl());
      assertFalse(request2.isBinaryContent());
      assertSame(request0, request1);
      assertSame(request0, request2);
      assertSame(request2, request0);
      assertSame(request2, request1);
      
      Request request3 = request2.setUrl("EDFnXayGeP?rT'frU=l");
      assertNotNull(request3);
      assertFalse(request0.isBinaryContent());
      assertEquals((-260L), request0.getPriority());
      assertNull(request0.getMethod());
      assertEquals("EDFnXayGeP?rT'frU=l", request0.getUrl());
      assertNull(request0.getCharset());
      assertEquals("EDFnXayGeP?rT'frU=l", request2.getUrl());
      assertEquals((-260L), request2.getPriority());
      assertNull(request2.getCharset());
      assertNull(request2.getMethod());
      assertFalse(request2.isBinaryContent());
      assertEquals("EDFnXayGeP?rT'frU=l", request3.getUrl());
      assertFalse(request3.isBinaryContent());
      assertNull(request3.getCharset());
      assertEquals((-260L), request3.getPriority());
      assertNull(request3.getMethod());
      assertSame(request0, request3);
      assertSame(request0, request1);
      assertSame(request0, request2);
      assertSame(request2, request3);
      assertSame(request2, request0);
      assertSame(request2, request1);
      assertSame(request3, request0);
      assertSame(request3, request1);
      assertSame(request3, request2);
      
      Page page0 = Page.fail();
      assertNotNull(page0);
      assertNull(page0.getCharset());
      assertEquals(200, page0.getStatusCode());
      assertFalse(page0.isDownloadSuccess());
      assertNull(page0.getRawText());
      
      spider3.extractAndAddRequests(page0, false);
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(0, linkedList0.size());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertFalse(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertFalse(spider3.isExitWhenComplete());
      assertNull(page0.getCharset());
      assertEquals(200, page0.getStatusCode());
      assertFalse(page0.isDownloadSuccess());
      assertNull(page0.getRawText());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider1, spider3);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider0);
      assertSame(spider2, spider3);
      assertSame(spider2, spider1);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      
      Scheduler scheduler0 = spider0.getScheduler();
      assertNotNull(scheduler0);
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f7S5me");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, (String) null);
      assertNotNull(phantomJSDownloader0);
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      assertNotNull(spider1);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      assertNotNull(resultItemsCollectorPipeline0);
      
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      assertFalse(synchronousQueue0.contains("f7S5me"));
      assertNotNull(synchronousQueue0);
      
      List<Pipeline> list0 = spider1.getAll((Collection<String>) synchronousQueue0);
      assertFalse(synchronousQueue0.contains("f7S5me"));
      assertNotNull(list0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      Spider spider2 = spider0.setPipelines(list0);
      assertFalse(synchronousQueue0.contains("f7S5me"));
      assertNotNull(spider2);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(Spider.Status.Stopped, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      
      long long0 = spider0.getPageCount();
      assertEquals(0L, long0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      
      Page page0 = new Page();
      assertNotNull(page0);
      assertTrue(page0.isDownloadSuccess());
      assertEquals(200, page0.getStatusCode());
      assertNull(page0.getRawText());
      assertNull(page0.getCharset());
      
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      assertNotNull(threadPoolExecutor_CallerRunsPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(6064, threadPoolExecutor_CallerRunsPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      Spider spider3 = spider1.thread((ExecutorService) scheduledThreadPoolExecutor0, 39);
      assertNotNull(spider3);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(Spider.Status.Stopped, spider3.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider1, spider0);
      assertSame(spider1, spider3);
      assertSame(spider1, spider2);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("$VALUES");
      assertNotNull(fileCacheQueueScheduler0);
      
      Spider spider4 = spider3.setScheduler(fileCacheQueueScheduler0);
      assertNotNull(spider4);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(Spider.Status.Stopped, spider3.getStatus());
      assertTrue(spider4.isSpawnUrl());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(Spider.Status.Stopped, spider4.getStatus());
      assertEquals(0L, spider4.getPageCount());
      assertSame(spider0, spider4);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider1, spider0);
      assertSame(spider1, spider4);
      assertSame(spider1, spider3);
      assertSame(spider1, spider2);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider4);
      assertSame(spider4, spider1);
      assertSame(spider4, spider3);
      assertSame(spider4, spider2);
      assertSame(spider4, spider0);
      
      MockFileWriter mockFileWriter0 = spider4.get((String) null);
      assertNull(mockFileWriter0);
      assertEquals(1L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
      assertEquals(1L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider3.isSpawnUrl());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(1L, spider3.getPageCount());
      assertEquals(Spider.Status.Stopped, spider3.getStatus());
      assertTrue(spider4.isSpawnUrl());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(1L, spider4.getPageCount());
      assertEquals(Spider.Status.Stopped, spider4.getStatus());
      assertSame(spider0, spider4);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider1, spider0);
      assertSame(spider1, spider4);
      assertSame(spider1, spider3);
      assertSame(spider1, spider2);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider4);
      assertSame(spider4, spider1);
      assertSame(spider4, spider3);
      assertSame(spider4, spider2);
      assertSame(spider4, spider0);
      
      Page page1 = Page.fail();
      assertFalse(page1.equals((Object)page0));
      assertNotNull(page1);
      assertFalse(page1.isDownloadSuccess());
      assertNull(page1.getRawText());
      assertEquals(200, page1.getStatusCode());
      assertNull(page1.getCharset());
      assertNotSame(page1, page0);
      
      Page page2 = page1.setRawText("");
      assertFalse(page1.equals((Object)page0));
      assertFalse(page2.equals((Object)page0));
      assertNotNull(page2);
      assertFalse(page1.isDownloadSuccess());
      assertEquals("", page1.getRawText());
      assertEquals(200, page1.getStatusCode());
      assertNull(page1.getCharset());
      assertEquals("", page2.getRawText());
      assertFalse(page2.isDownloadSuccess());
      assertNull(page2.getCharset());
      assertEquals(200, page2.getStatusCode());
      assertNotSame(page1, page0);
      assertSame(page1, page2);
      assertNotSame(page2, page0);
      assertSame(page2, page1);
      
      List<Request> list1 = page2.getTargetRequests();
      assertFalse(page1.equals((Object)page0));
      assertFalse(page2.equals((Object)page0));
      assertNotNull(list1);
      assertFalse(page1.isDownloadSuccess());
      assertEquals("", page1.getRawText());
      assertEquals(200, page1.getStatusCode());
      assertNull(page1.getCharset());
      assertEquals("", page2.getRawText());
      assertFalse(page2.isDownloadSuccess());
      assertNull(page2.getCharset());
      assertEquals(200, page2.getStatusCode());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotSame(page1, page0);
      assertSame(page1, page2);
      assertNotSame(page2, page0);
      assertSame(page2, page1);
      
      Spider spider5 = spider0.startRequest(list1);
      assertFalse(page1.equals((Object)page0));
      assertFalse(page2.equals((Object)page0));
      assertNotNull(spider5);
      assertFalse(page1.isDownloadSuccess());
      assertEquals("", page1.getRawText());
      assertEquals(200, page1.getStatusCode());
      assertNull(page1.getCharset());
      assertEquals("", page2.getRawText());
      assertFalse(page2.isDownloadSuccess());
      assertNull(page2.getCharset());
      assertEquals(200, page2.getStatusCode());
      assertEquals(1L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(spider5.isSpawnUrl());
      assertEquals(Spider.Status.Stopped, spider5.getStatus());
      assertTrue(spider5.isExitWhenComplete());
      assertEquals(1L, spider5.getPageCount());
      assertNotSame(page1, page0);
      assertSame(page1, page2);
      assertNotSame(page2, page0);
      assertSame(page2, page1);
      assertSame(spider0, spider4);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider5);
      assertSame(spider0, spider3);
      assertSame(spider5, spider1);
      assertSame(spider5, spider2);
      assertSame(spider5, spider3);
      assertSame(spider5, spider0);
      assertSame(spider5, spider4);
      
      CountableThreadPool countableThreadPool0 = new CountableThreadPool(39);
      assertNotNull(countableThreadPool0);
      assertEquals(39, countableThreadPool0.getThreadNum());
      
      int int0 = fileCacheQueueScheduler0.getLeftRequestsCount(spider5);
      assertFalse(page1.equals((Object)page0));
      assertFalse(page2.equals((Object)page0));
      assertEquals(0, int0);
      assertFalse(page1.isDownloadSuccess());
      assertEquals("", page1.getRawText());
      assertEquals(200, page1.getStatusCode());
      assertNull(page1.getCharset());
      assertEquals("", page2.getRawText());
      assertFalse(page2.isDownloadSuccess());
      assertNull(page2.getCharset());
      assertEquals(200, page2.getStatusCode());
      assertEquals(1L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(spider5.isSpawnUrl());
      assertEquals(Spider.Status.Stopped, spider5.getStatus());
      assertTrue(spider5.isExitWhenComplete());
      assertEquals(1L, spider5.getPageCount());
      assertNotSame(page1, page0);
      assertSame(page1, page2);
      assertNotSame(page2, page0);
      assertSame(page2, page1);
      assertSame(spider0, spider4);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider5);
      assertSame(spider0, spider3);
      assertSame(spider5, spider1);
      assertSame(spider5, spider2);
      assertSame(spider5, spider3);
      assertSame(spider5, spider0);
      assertSame(spider5, spider4);
      
      Spider spider6 = spider4.setExitWhenComplete(true);
      assertNotNull(spider6);
      assertEquals(1L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
      assertEquals(1L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider6.isSpawnUrl());
      assertEquals(Spider.Status.Stopped, spider6.getStatus());
      assertEquals(1L, spider6.getPageCount());
      assertTrue(spider6.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(1L, spider3.getPageCount());
      assertEquals(Spider.Status.Stopped, spider3.getStatus());
      assertTrue(spider4.isSpawnUrl());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(1L, spider4.getPageCount());
      assertEquals(Spider.Status.Stopped, spider4.getStatus());
      assertSame(spider0, spider4);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider6);
      assertSame(spider0, spider5);
      assertSame(spider0, spider3);
      assertSame(spider1, spider0);
      assertSame(spider1, spider4);
      assertSame(spider1, spider5);
      assertSame(spider1, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider6);
      assertSame(spider6, spider0);
      assertSame(spider6, spider3);
      assertSame(spider6, spider4);
      assertSame(spider6, spider1);
      assertSame(spider6, spider5);
      assertSame(spider6, spider2);
      assertSame(spider3, spider1);
      assertSame(spider3, spider6);
      assertSame(spider3, spider0);
      assertSame(spider3, spider5);
      assertSame(spider3, spider2);
      assertSame(spider3, spider4);
      assertSame(spider4, spider1);
      assertSame(spider4, spider3);
      assertSame(spider4, spider2);
      assertSame(spider4, spider5);
      assertSame(spider4, spider6);
      assertSame(spider4, spider0);
      
      boolean boolean0 = spider6.isExitWhenComplete();
      assertTrue(boolean0);
      assertEquals(1L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
      assertEquals(1L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider6.isSpawnUrl());
      assertEquals(Spider.Status.Stopped, spider6.getStatus());
      assertEquals(1L, spider6.getPageCount());
      assertTrue(spider6.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(1L, spider3.getPageCount());
      assertEquals(Spider.Status.Stopped, spider3.getStatus());
      assertTrue(spider4.isSpawnUrl());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(1L, spider4.getPageCount());
      assertEquals(Spider.Status.Stopped, spider4.getStatus());
      assertSame(spider0, spider4);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider6);
      assertSame(spider0, spider5);
      assertSame(spider0, spider3);
      assertSame(spider1, spider0);
      assertSame(spider1, spider4);
      assertSame(spider1, spider5);
      assertSame(spider1, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider6);
      assertSame(spider6, spider0);
      assertSame(spider6, spider3);
      assertSame(spider6, spider4);
      assertSame(spider6, spider1);
      assertSame(spider6, spider5);
      assertSame(spider6, spider2);
      assertSame(spider3, spider1);
      assertSame(spider3, spider6);
      assertSame(spider3, spider0);
      assertSame(spider3, spider5);
      assertSame(spider3, spider2);
      assertSame(spider3, spider4);
      assertSame(spider4, spider1);
      assertSame(spider4, spider3);
      assertSame(spider4, spider2);
      assertSame(spider4, spider5);
      assertSame(spider4, spider6);
      assertSame(spider4, spider0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      
      Spider spider1 = spider0.setSpawnUrl(true);
      assertNotNull(spider1);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      Spider spider2 = spider1.setUUID("");
      assertNotNull(spider2);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      
      Spider spider3 = spider1.setSpawnUrl(true);
      assertNotNull(spider3);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider1, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider1);
      
      QueueScheduler queueScheduler0 = new QueueScheduler();
      assertNotNull(queueScheduler0);
      
      spider0.stop();
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      
      // Undeclared exception!
      try { 
        spider1.test((String[]) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = "Spider ";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Spider ");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertNotNull(spider0);
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Spider spider1 = spider0.setPipelines(linkedList0);
      assertNotNull(spider1);
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0, linkedList0.size());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      assertNotNull(threadPoolExecutor_CallerRunsPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadFactory0, threadPoolExecutor_CallerRunsPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      // Undeclared exception!
      try { 
        spider1.thread((ExecutorService) scheduledThreadPoolExecutor0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f7S5me");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, (String) null);
      assertNotNull(phantomJSDownloader0);
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      assertNotNull(spider1);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      assertNotNull(resultItemsCollectorPipeline0);
      
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      assertFalse(synchronousQueue0.contains("f7S5me"));
      assertNotNull(synchronousQueue0);
      
      List<Pipeline> list0 = spider1.getAll((Collection<String>) synchronousQueue0);
      assertFalse(synchronousQueue0.contains("f7S5me"));
      assertNotNull(list0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      Spider spider2 = spider0.setPipelines(list0);
      assertFalse(synchronousQueue0.contains("f7S5me"));
      assertNotNull(spider2);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Stopped, spider2.getStatus());
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      
      long long0 = spider0.getPageCount();
      assertEquals(0L, long0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      
      Page page0 = new Page();
      assertNotNull(page0);
      assertNull(page0.getRawText());
      assertTrue(page0.isDownloadSuccess());
      assertEquals(200, page0.getStatusCode());
      assertNull(page0.getCharset());
      
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      assertNotNull(threadPoolExecutor_CallerRunsPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(6064, threadPoolExecutor_CallerRunsPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      Spider spider3 = spider1.thread((ExecutorService) scheduledThreadPoolExecutor0, 39);
      assertNotNull(spider3);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(Spider.Status.Stopped, spider3.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider0);
      assertSame(spider3, spider1);
      assertSame(spider3, spider2);
      assertSame(spider3, spider0);
      
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("$VALUES");
      assertNotNull(fileCacheQueueScheduler0);
      
      Spider spider4 = spider3.setScheduler(fileCacheQueueScheduler0);
      assertNotNull(spider4);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(Spider.Status.Stopped, spider3.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertTrue(spider4.isExitWhenComplete());
      assertTrue(spider4.isSpawnUrl());
      assertEquals(0L, spider4.getPageCount());
      assertEquals(Spider.Status.Stopped, spider4.getStatus());
      assertSame(spider0, spider4);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider0);
      assertSame(spider1, spider4);
      assertSame(spider3, spider1);
      assertSame(spider3, spider4);
      assertSame(spider3, spider2);
      assertSame(spider3, spider0);
      assertSame(spider4, spider0);
      assertSame(spider4, spider3);
      assertSame(spider4, spider2);
      assertSame(spider4, spider1);
      
      // Undeclared exception!
      spider4.get((String) null);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("E");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("init cache file ");
      assertNotNull(fileCacheQueueScheduler0);
      
      Spider spider1 = spider0.clearPipeline();
      assertNotNull(spider1);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      Request request0 = new Request("=:qr6{`f0^p/d!F,[V%");
      assertNotNull(request0);
      assertNull(request0.getMethod());
      assertEquals("=:qr6{`f0^p/d!F,[V%", request0.getUrl());
      assertFalse(request0.isBinaryContent());
      assertEquals(0L, request0.getPriority());
      assertNull(request0.getCharset());
      
      Request request1 = request0.setPriority((-1171L));
      assertNotNull(request1);
      assertNull(request0.getMethod());
      assertEquals("=:qr6{`f0^p/d!F,[V%", request0.getUrl());
      assertFalse(request0.isBinaryContent());
      assertEquals((-1171L), request0.getPriority());
      assertNull(request0.getCharset());
      assertFalse(request1.isBinaryContent());
      assertNull(request1.getMethod());
      assertNull(request1.getCharset());
      assertEquals((-1171L), request1.getPriority());
      assertEquals("=:qr6{`f0^p/d!F,[V%", request1.getUrl());
      assertSame(request0, request1);
      assertSame(request1, request0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "E";
      stringArray0[1] = "E";
      stringArray0[2] = "E";
      // Undeclared exception!
      try { 
        spider1.onSuccess(request0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f7S5me");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      assertEquals(5, PriorityScheduler.INITIAL_CAPACITY);
      assertNotNull(priorityScheduler0);
      
      Spider spider1 = spider0.setScheduler(priorityScheduler0);
      assertEquals(5, PriorityScheduler.INITIAL_CAPACITY);
      assertNotNull(spider1);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Request request0 = new Request("");
      assertNotNull(request0);
      assertEquals(0L, request0.getPriority());
      assertNull(request0.getMethod());
      assertEquals("", request0.getUrl());
      assertFalse(request0.isBinaryContent());
      assertNull(request0.getCharset());
      
      Request[] requestArray0 = new Request[0];
      Spider spider2 = spider1.addRequest(requestArray0);
      assertEquals(5, PriorityScheduler.INITIAL_CAPACITY);
      assertNotNull(spider2);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertEquals(0, requestArray0.length);
      
      Spider.Status spider_Status0 = Spider.Status.fromValue(5);
      assertEquals(Spider.Status.Init, spider_Status0);
      
      spider0.stop();
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("E");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Spider spider1 = spider0.setPipelines(linkedList0);
      assertNotNull(spider1);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, linkedList0.size());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      Spider spider2 = spider0.setExitWhenComplete(true);
      assertNotNull(spider2);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      
      Spider spider3 = spider1.setExitWhenComplete(false);
      assertNotNull(spider3);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, linkedList0.size());
      assertTrue(spider1.isSpawnUrl());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider3.isSpawnUrl());
      assertFalse(spider3.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider3);
      assertSame(spider3, spider2);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      
      Spider spider4 = spider3.setUUID("E");
      assertNotNull(spider4);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, linkedList0.size());
      assertTrue(spider1.isSpawnUrl());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider3.isSpawnUrl());
      assertFalse(spider3.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isSpawnUrl());
      assertFalse(spider4.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertSame(spider0, spider2);
      assertSame(spider0, spider4);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider1, spider2);
      assertSame(spider1, spider4);
      assertSame(spider1, spider0);
      assertSame(spider1, spider3);
      assertSame(spider3, spider2);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      assertSame(spider3, spider4);
      assertSame(spider4, spider1);
      assertSame(spider4, spider0);
      assertSame(spider4, spider2);
      assertSame(spider4, spider3);
      
      Spider spider5 = spider4.setSpawnUrl(true);
      assertNotNull(spider5);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, linkedList0.size());
      assertTrue(spider1.isSpawnUrl());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider3.isSpawnUrl());
      assertFalse(spider3.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isSpawnUrl());
      assertFalse(spider4.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertEquals(0L, spider5.getPageCount());
      assertTrue(spider5.isSpawnUrl());
      assertFalse(spider5.isExitWhenComplete());
      assertSame(spider0, spider5);
      assertSame(spider0, spider2);
      assertSame(spider0, spider4);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider1, spider2);
      assertSame(spider1, spider4);
      assertSame(spider1, spider5);
      assertSame(spider1, spider0);
      assertSame(spider1, spider3);
      assertSame(spider3, spider2);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      assertSame(spider3, spider5);
      assertSame(spider3, spider4);
      assertSame(spider4, spider1);
      assertSame(spider4, spider0);
      assertSame(spider4, spider2);
      assertSame(spider4, spider5);
      assertSame(spider4, spider3);
      assertSame(spider5, spider2);
      assertSame(spider5, spider4);
      assertSame(spider5, spider1);
      assertSame(spider5, spider0);
      assertSame(spider5, spider3);
      
      QueueScheduler queueScheduler0 = new QueueScheduler();
      assertNotNull(queueScheduler0);
      
      Spider spider6 = spider5.setPipelines(linkedList0);
      assertNotNull(spider6);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, linkedList0.size());
      assertTrue(spider1.isSpawnUrl());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider3.isSpawnUrl());
      assertFalse(spider3.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isSpawnUrl());
      assertFalse(spider4.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertEquals(0L, spider5.getPageCount());
      assertTrue(spider5.isSpawnUrl());
      assertFalse(spider5.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider6.getStatus());
      assertEquals(0L, spider6.getPageCount());
      assertTrue(spider6.isSpawnUrl());
      assertFalse(spider6.isExitWhenComplete());
      assertSame(spider0, spider6);
      assertSame(spider0, spider5);
      assertSame(spider0, spider2);
      assertSame(spider0, spider4);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider1, spider2);
      assertSame(spider1, spider4);
      assertSame(spider1, spider5);
      assertSame(spider1, spider0);
      assertSame(spider1, spider3);
      assertSame(spider1, spider6);
      assertSame(spider3, spider2);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      assertSame(spider3, spider6);
      assertSame(spider3, spider5);
      assertSame(spider3, spider4);
      assertSame(spider4, spider6);
      assertSame(spider4, spider1);
      assertSame(spider4, spider0);
      assertSame(spider4, spider2);
      assertSame(spider4, spider5);
      assertSame(spider4, spider3);
      assertSame(spider5, spider6);
      assertSame(spider5, spider2);
      assertSame(spider5, spider4);
      assertSame(spider5, spider1);
      assertSame(spider5, spider0);
      assertSame(spider5, spider3);
      assertSame(spider6, spider5);
      assertSame(spider6, spider4);
      assertSame(spider6, spider0);
      assertSame(spider6, spider3);
      assertSame(spider6, spider2);
      assertSame(spider6, spider1);
      
      Spider spider7 = spider5.setScheduler(queueScheduler0);
      assertNotNull(spider7);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, linkedList0.size());
      assertTrue(spider1.isSpawnUrl());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider3.isSpawnUrl());
      assertFalse(spider3.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isSpawnUrl());
      assertFalse(spider4.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertEquals(0L, spider5.getPageCount());
      assertTrue(spider5.isSpawnUrl());
      assertFalse(spider5.isExitWhenComplete());
      assertFalse(spider7.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider7.getStatus());
      assertEquals(0L, spider7.getPageCount());
      assertTrue(spider7.isSpawnUrl());
      assertSame(spider0, spider6);
      assertSame(spider0, spider5);
      assertSame(spider0, spider2);
      assertSame(spider0, spider4);
      assertSame(spider0, spider3);
      assertSame(spider0, spider7);
      assertSame(spider0, spider1);
      assertSame(spider1, spider7);
      assertSame(spider1, spider2);
      assertSame(spider1, spider4);
      assertSame(spider1, spider5);
      assertSame(spider1, spider0);
      assertSame(spider1, spider3);
      assertSame(spider1, spider6);
      assertSame(spider3, spider2);
      assertSame(spider3, spider7);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      assertSame(spider3, spider6);
      assertSame(spider3, spider5);
      assertSame(spider3, spider4);
      assertSame(spider4, spider6);
      assertSame(spider4, spider1);
      assertSame(spider4, spider0);
      assertSame(spider4, spider7);
      assertSame(spider4, spider2);
      assertSame(spider4, spider5);
      assertSame(spider4, spider3);
      assertSame(spider5, spider6);
      assertSame(spider5, spider2);
      assertSame(spider5, spider4);
      assertSame(spider5, spider7);
      assertSame(spider5, spider1);
      assertSame(spider5, spider0);
      assertSame(spider5, spider3);
      assertSame(spider7, spider5);
      assertSame(spider7, spider4);
      assertSame(spider7, spider6);
      assertSame(spider7, spider0);
      assertSame(spider7, spider3);
      assertSame(spider7, spider2);
      assertSame(spider7, spider1);
      
      Spider spider8 = spider0.setScheduler(queueScheduler0);
      assertNotNull(spider8);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider8.getStatus());
      assertEquals(0L, spider8.getPageCount());
      assertTrue(spider8.isSpawnUrl());
      assertFalse(spider8.isExitWhenComplete());
      assertSame(spider0, spider6);
      assertSame(spider0, spider5);
      assertSame(spider0, spider2);
      assertSame(spider0, spider4);
      assertSame(spider0, spider3);
      assertSame(spider0, spider7);
      assertSame(spider0, spider1);
      assertSame(spider0, spider8);
      assertSame(spider8, spider6);
      assertSame(spider8, spider5);
      assertSame(spider8, spider2);
      assertSame(spider8, spider7);
      assertSame(spider8, spider1);
      assertSame(spider8, spider0);
      assertSame(spider8, spider3);
      assertSame(spider8, spider4);
      
      spider5.destroyWhenExit = false;
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, linkedList0.size());
      assertTrue(spider1.isSpawnUrl());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider3.isSpawnUrl());
      assertFalse(spider3.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isSpawnUrl());
      assertFalse(spider4.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertEquals(0L, spider5.getPageCount());
      assertTrue(spider5.isSpawnUrl());
      assertFalse(spider5.isExitWhenComplete());
      
      spider7.stop();
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, linkedList0.size());
      assertTrue(spider1.isSpawnUrl());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider3.isSpawnUrl());
      assertFalse(spider3.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isSpawnUrl());
      assertFalse(spider4.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertEquals(0L, spider5.getPageCount());
      assertTrue(spider5.isSpawnUrl());
      assertFalse(spider5.isExitWhenComplete());
      assertFalse(spider7.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider7.getStatus());
      assertEquals(0L, spider7.getPageCount());
      assertTrue(spider7.isSpawnUrl());
      assertSame(spider0, spider6);
      assertSame(spider0, spider5);
      assertSame(spider0, spider2);
      assertSame(spider0, spider4);
      assertSame(spider0, spider3);
      assertSame(spider0, spider7);
      assertSame(spider0, spider1);
      assertSame(spider0, spider8);
      assertSame(spider1, spider7);
      assertSame(spider1, spider2);
      assertSame(spider1, spider4);
      assertSame(spider1, spider5);
      assertSame(spider1, spider0);
      assertSame(spider1, spider8);
      assertSame(spider1, spider3);
      assertSame(spider1, spider6);
      assertSame(spider3, spider2);
      assertSame(spider3, spider7);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      assertSame(spider3, spider8);
      assertSame(spider3, spider6);
      assertSame(spider3, spider5);
      assertSame(spider3, spider4);
      assertSame(spider4, spider6);
      assertSame(spider4, spider8);
      assertSame(spider4, spider1);
      assertSame(spider4, spider0);
      assertSame(spider4, spider7);
      assertSame(spider4, spider2);
      assertSame(spider4, spider5);
      assertSame(spider4, spider3);
      assertSame(spider5, spider6);
      assertSame(spider5, spider2);
      assertSame(spider5, spider4);
      assertSame(spider5, spider7);
      assertSame(spider5, spider1);
      assertSame(spider5, spider0);
      assertSame(spider5, spider8);
      assertSame(spider5, spider3);
      assertSame(spider7, spider5);
      assertSame(spider7, spider4);
      assertSame(spider7, spider6);
      assertSame(spider7, spider8);
      assertSame(spider7, spider0);
      assertSame(spider7, spider3);
      assertSame(spider7, spider2);
      assertSame(spider7, spider1);
      
      // Undeclared exception!
      try { 
        spider1.sleep((-416));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("write file error");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      
      QueueScheduler queueScheduler0 = new QueueScheduler();
      assertNotNull(queueScheduler0);
      
      Spider spider1 = spider0.scheduler(queueScheduler0);
      assertNotNull(spider1);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      assertNotNull(resultItemsCollectorPipeline0);
      
      Spider spider2 = spider1.addPipeline(resultItemsCollectorPipeline0);
      assertNotNull(spider2);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      
      Spider spider3 = spider2.setSpawnUrl(false);
      assertNotNull(spider3);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertFalse(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertFalse(spider2.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertFalse(spider3.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(spider2, spider3);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertSame(spider3, spider0);
      assertSame(spider3, spider1);
      assertSame(spider3, spider2);
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("write file error", "write file error");
      assertNotNull(phantomJSDownloader0);
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      
      Spider spider4 = spider3.setDownloader(phantomJSDownloader0);
      assertNotNull(spider4);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertFalse(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertFalse(spider2.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertFalse(spider3.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0L, spider4.getPageCount());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertTrue(spider4.isExitWhenComplete());
      assertFalse(spider4.isSpawnUrl());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider4);
      assertSame(spider0, spider3);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider1, spider4);
      assertSame(spider1, spider3);
      assertSame(spider2, spider4);
      assertSame(spider2, spider3);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertSame(spider3, spider0);
      assertSame(spider3, spider1);
      assertSame(spider3, spider2);
      assertSame(spider3, spider4);
      assertSame(spider4, spider3);
      assertSame(spider4, spider0);
      assertSame(spider4, spider2);
      assertSame(spider4, spider1);
      
      Spider spider5 = spider4.setUUID("process request ");
      assertNotNull(spider5);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertFalse(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertFalse(spider2.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertFalse(spider3.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0L, spider4.getPageCount());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertTrue(spider4.isExitWhenComplete());
      assertFalse(spider4.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertFalse(spider5.isSpawnUrl());
      assertEquals(0L, spider5.getPageCount());
      assertTrue(spider5.isExitWhenComplete());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider5);
      assertSame(spider0, spider4);
      assertSame(spider0, spider3);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider1, spider4);
      assertSame(spider1, spider3);
      assertSame(spider1, spider5);
      assertSame(spider2, spider4);
      assertSame(spider2, spider3);
      assertSame(spider2, spider1);
      assertSame(spider2, spider5);
      assertSame(spider2, spider0);
      assertSame(spider3, spider0);
      assertSame(spider3, spider1);
      assertSame(spider3, spider2);
      assertSame(spider3, spider4);
      assertSame(spider3, spider5);
      assertSame(spider4, spider5);
      assertSame(spider4, spider3);
      assertSame(spider4, spider0);
      assertSame(spider4, spider2);
      assertSame(spider4, spider1);
      assertSame(spider5, spider2);
      assertSame(spider5, spider1);
      assertSame(spider5, spider3);
      assertSame(spider5, spider4);
      assertSame(spider5, spider0);
      
      CollectorPipeline collectorPipeline0 = spider5.getCollectorPipeline();
      assertNotNull(collectorPipeline0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertFalse(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertFalse(spider2.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertFalse(spider3.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0L, spider4.getPageCount());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertTrue(spider4.isExitWhenComplete());
      assertFalse(spider4.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertFalse(spider5.isSpawnUrl());
      assertEquals(0L, spider5.getPageCount());
      assertTrue(spider5.isExitWhenComplete());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider5);
      assertSame(spider0, spider4);
      assertSame(spider0, spider3);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider1, spider4);
      assertSame(spider1, spider3);
      assertSame(spider1, spider5);
      assertNotSame(resultItemsCollectorPipeline0, collectorPipeline0);
      assertSame(spider2, spider4);
      assertSame(spider2, spider3);
      assertSame(spider2, spider1);
      assertSame(spider2, spider5);
      assertSame(spider2, spider0);
      assertSame(spider3, spider0);
      assertSame(spider3, spider1);
      assertSame(spider3, spider2);
      assertSame(spider3, spider4);
      assertSame(spider3, spider5);
      assertSame(spider4, spider5);
      assertSame(spider4, spider3);
      assertSame(spider4, spider0);
      assertSame(spider4, spider2);
      assertSame(spider4, spider1);
      assertSame(spider5, spider2);
      assertSame(spider5, spider1);
      assertSame(spider5, spider3);
      assertSame(spider5, spider4);
      assertSame(spider5, spider0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = "Ig@@3@JV9)^8yqCn";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Ig@@3@JV9)^8yqCn");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      
      // Undeclared exception!
      try { 
        spider0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("page status code error, page {} , code: {}");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      
      Spider spider1 = spider0.setExitWhenComplete(false);
      assertNotNull(spider1);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertFalse(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("page status code error, page {} , code: {}");
      assertNotNull(fileCacheQueueScheduler0);
      
      Spider spider2 = spider1.setScheduler(fileCacheQueueScheduler0);
      assertNotNull(spider2);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertFalse(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider2.isSpawnUrl());
      assertFalse(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      
      Spider spider3 = spider2.clearPipeline();
      assertNotNull(spider3);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertFalse(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider2.isSpawnUrl());
      assertFalse(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertFalse(spider3.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider3);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertSame(spider3, spider2);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertFalse(linkedList0.contains("page status code error, page {} , code: {}"));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Spider spider4 = spider3.startUrls(linkedList0);
      assertFalse(linkedList0.contains("page status code error, page {} , code: {}"));
      assertNotNull(spider4);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertFalse(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider2.isSpawnUrl());
      assertFalse(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertFalse(spider3.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertEquals(0, linkedList0.size());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertEquals(0L, spider4.getPageCount());
      assertFalse(spider4.isExitWhenComplete());
      assertTrue(spider4.isSpawnUrl());
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider4);
      assertSame(spider1, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider4);
      assertSame(spider2, spider4);
      assertSame(spider2, spider3);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertSame(spider3, spider2);
      assertSame(spider3, spider4);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      assertSame(spider4, spider2);
      assertSame(spider4, spider1);
      assertSame(spider4, spider0);
      assertSame(spider4, spider3);
      
      Spider spider5 = spider4.setUUID("page status code error, page {} , code: {}");
      assertFalse(linkedList0.contains("page status code error, page {} , code: {}"));
      assertNotNull(spider5);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertFalse(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider2.isSpawnUrl());
      assertFalse(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertFalse(spider3.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertEquals(0, linkedList0.size());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertEquals(0L, spider4.getPageCount());
      assertFalse(spider4.isExitWhenComplete());
      assertTrue(spider4.isSpawnUrl());
      assertFalse(spider5.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertEquals(0L, spider5.getPageCount());
      assertTrue(spider5.isSpawnUrl());
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider5);
      assertSame(spider0, spider4);
      assertSame(spider1, spider5);
      assertSame(spider1, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider4);
      assertSame(spider2, spider4);
      assertSame(spider2, spider3);
      assertSame(spider2, spider5);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertSame(spider3, spider2);
      assertSame(spider3, spider4);
      assertSame(spider3, spider5);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      assertSame(spider4, spider2);
      assertSame(spider4, spider1);
      assertSame(spider4, spider0);
      assertSame(spider4, spider3);
      assertSame(spider4, spider5);
      assertSame(spider5, spider1);
      assertSame(spider5, spider2);
      assertSame(spider5, spider4);
      assertSame(spider5, spider3);
      assertSame(spider5, spider0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "page status code error, page {} , code: {}";
      stringArray0[1] = "page status code error, page {} , code: {}";
      stringArray0[2] = "page status code error, page {} , code: {}";
      // Undeclared exception!
      try { 
        spider5.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("E");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertNotNull(spider0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Spider spider1 = spider0.setPipelines(linkedList0);
      assertNotNull(spider1);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0, linkedList0.size());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      Spider spider2 = spider1.clearPipeline();
      assertNotNull(spider2);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0, linkedList0.size());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertFalse(linkedList1.contains("E"));
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      Spider spider3 = spider0.startUrls(linkedList1);
      assertFalse(linkedList1.contains("E"));
      assertNotNull(spider3);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0, linkedList1.size());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider3, spider0);
      assertSame(spider3, spider1);
      assertSame(spider3, spider2);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f7S5me");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      assertEquals(5, PriorityScheduler.INITIAL_CAPACITY);
      assertNotNull(priorityScheduler0);
      
      Spider spider1 = spider0.clearPipeline();
      assertNotNull(spider1);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "f7S5me";
      // Undeclared exception!
      try { 
        spider1.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("page status code error, page {} , code: {}");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertNotNull(spider0);
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      
      Spider spider1 = spider0.setExitWhenComplete(false);
      assertNotNull(spider1);
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("page status code error, page {} , code: {}");
      assertNotNull(fileCacheQueueScheduler0);
      
      Spider spider2 = spider1.setScheduler(fileCacheQueueScheduler0);
      assertNotNull(spider2);
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertFalse(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      
      Spider spider3 = spider2.clearPipeline();
      assertNotNull(spider3);
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertFalse(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertFalse(spider3.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider1, spider3);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider3);
      assertSame(spider3, spider2);
      assertSame(spider3, spider0);
      assertSame(spider3, spider1);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertFalse(linkedList0.contains("page status code error, page {} , code: {}"));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Spider spider4 = spider3.startUrls(linkedList0);
      assertFalse(linkedList0.contains("page status code error, page {} , code: {}"));
      assertNotNull(spider4);
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertFalse(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertFalse(spider3.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(0, linkedList0.size());
      assertTrue(spider4.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertEquals(0L, spider4.getPageCount());
      assertFalse(spider4.isExitWhenComplete());
      assertSame(spider0, spider2);
      assertSame(spider0, spider4);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider1, spider3);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider1, spider4);
      assertSame(spider2, spider4);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider3);
      assertSame(spider3, spider2);
      assertSame(spider3, spider4);
      assertSame(spider3, spider0);
      assertSame(spider3, spider1);
      assertSame(spider4, spider0);
      assertSame(spider4, spider2);
      assertSame(spider4, spider1);
      assertSame(spider4, spider3);
      
      Spider spider5 = spider4.setUUID("page status code error, page {} , code: {}");
      assertFalse(linkedList0.contains("page status code error, page {} , code: {}"));
      assertNotNull(spider5);
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertFalse(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertFalse(spider3.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(0, linkedList0.size());
      assertTrue(spider4.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertEquals(0L, spider4.getPageCount());
      assertFalse(spider4.isExitWhenComplete());
      assertEquals(0L, spider5.getPageCount());
      assertFalse(spider5.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertTrue(spider5.isSpawnUrl());
      assertSame(spider0, spider5);
      assertSame(spider0, spider2);
      assertSame(spider0, spider4);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider1, spider3);
      assertSame(spider1, spider5);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider1, spider4);
      assertSame(spider2, spider4);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider3);
      assertSame(spider2, spider5);
      assertSame(spider3, spider2);
      assertSame(spider3, spider4);
      assertSame(spider3, spider0);
      assertSame(spider3, spider5);
      assertSame(spider3, spider1);
      assertSame(spider4, spider0);
      assertSame(spider4, spider2);
      assertSame(spider4, spider5);
      assertSame(spider4, spider1);
      assertSame(spider4, spider3);
      assertSame(spider5, spider1);
      assertSame(spider5, spider3);
      assertSame(spider5, spider2);
      assertSame(spider5, spider4);
      assertSame(spider5, spider0);
      
      List<SpiderListener> list0 = spider5.getSpiderListeners();
      assertFalse(linkedList0.contains("page status code error, page {} , code: {}"));
      assertNull(list0);
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertFalse(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertFalse(spider3.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(0, linkedList0.size());
      assertTrue(spider4.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertEquals(0L, spider4.getPageCount());
      assertFalse(spider4.isExitWhenComplete());
      assertEquals(0L, spider5.getPageCount());
      assertFalse(spider5.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertTrue(spider5.isSpawnUrl());
      assertSame(spider0, spider5);
      assertSame(spider0, spider2);
      assertSame(spider0, spider4);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider1, spider3);
      assertSame(spider1, spider5);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider1, spider4);
      assertSame(spider2, spider4);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider3);
      assertSame(spider2, spider5);
      assertSame(spider3, spider2);
      assertSame(spider3, spider4);
      assertSame(spider3, spider0);
      assertSame(spider3, spider5);
      assertSame(spider3, spider1);
      assertSame(spider4, spider0);
      assertSame(spider4, spider2);
      assertSame(spider4, spider5);
      assertSame(spider4, spider1);
      assertSame(spider4, spider3);
      assertSame(spider5, spider1);
      assertSame(spider5, spider3);
      assertSame(spider5, spider2);
      assertSame(spider5, spider4);
      assertSame(spider5, spider0);
      
      // Undeclared exception!
      spider2.start();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f7S5me");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      
      String string0 = null;
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, (String) null);
      assertNotNull(phantomJSDownloader0);
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      assertNotNull(resultItemsCollectorPipeline0);
      
      Spider spider1 = spider0.addPipeline(resultItemsCollectorPipeline0);
      assertNotNull(spider1);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      Page page0 = new Page();
      assertNotNull(page0);
      assertTrue(page0.isDownloadSuccess());
      assertNull(page0.getRawText());
      assertEquals(200, page0.getStatusCode());
      assertNull(page0.getCharset());
      
      Page page1 = page0.setRawText("regex must not be empty");
      assertNotNull(page1);
      assertTrue(page0.isDownloadSuccess());
      assertEquals(200, page0.getStatusCode());
      assertNull(page0.getCharset());
      assertEquals("regex must not be empty", page0.getRawText());
      assertNull(page1.getCharset());
      assertTrue(page1.isDownloadSuccess());
      assertEquals(200, page1.getStatusCode());
      assertEquals("regex must not be empty", page1.getRawText());
      assertSame(page0, page1);
      assertSame(page1, page0);
      
      ResultItems resultItems0 = page1.getResultItems();
      assertNotNull(resultItems0);
      assertTrue(page0.isDownloadSuccess());
      assertEquals(200, page0.getStatusCode());
      assertNull(page0.getCharset());
      assertEquals("regex must not be empty", page0.getRawText());
      assertNull(page1.getCharset());
      assertTrue(page1.isDownloadSuccess());
      assertEquals(200, page1.getStatusCode());
      assertEquals("regex must not be empty", page1.getRawText());
      assertFalse(resultItems0.isSkip());
      assertSame(page0, page1);
      assertSame(page1, page0);
      
      resultItemsCollectorPipeline0.process(resultItems0, spider1);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(page0.isDownloadSuccess());
      assertEquals(200, page0.getStatusCode());
      assertNull(page0.getCharset());
      assertEquals("regex must not be empty", page0.getRawText());
      assertNull(page1.getCharset());
      assertTrue(page1.isDownloadSuccess());
      assertEquals(200, page1.getStatusCode());
      assertEquals("regex must not be empty", page1.getRawText());
      assertFalse(resultItems0.isSkip());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertSame(page0, page1);
      assertSame(page1, page0);
      
      String string1 = spider1.getUUID();
      assertNull(string1);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      // Undeclared exception!
      try { 
        spider1.thread(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      assertEquals(5, PriorityScheduler.INITIAL_CAPACITY);
      assertNotNull(priorityScheduler0);
      
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("JQ");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertNotNull(spider0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      
      Spider spider1 = spider0.pipeline((Pipeline) null);
      assertNotNull(spider1);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      Spider spider2 = spider1.clearPipeline();
      assertNotNull(spider2);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Spider spider3 = spider2.startRequest(linkedList0);
      assertNotNull(spider3);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(0, linkedList0.size());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider1, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider3);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider0);
      assertSame(spider3, spider1);
      
      Spider spider4 = spider3.setUUID("JQ");
      assertNotNull(spider4);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(0, linkedList0.size());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertTrue(spider4.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(0L, spider4.getPageCount());
      assertSame(spider0, spider4);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider1, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider4);
      assertSame(spider1, spider0);
      assertSame(spider2, spider3);
      assertSame(spider2, spider1);
      assertSame(spider2, spider4);
      assertSame(spider2, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider0);
      assertSame(spider3, spider4);
      assertSame(spider3, spider1);
      assertSame(spider4, spider0);
      assertSame(spider4, spider2);
      assertSame(spider4, spider3);
      assertSame(spider4, spider1);
      
      spider4.setEmptySleepTime(4);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(0, linkedList0.size());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertTrue(spider4.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(0L, spider4.getPageCount());
      assertSame(spider0, spider4);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider1, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider4);
      assertSame(spider1, spider0);
      assertSame(spider2, spider3);
      assertSame(spider2, spider1);
      assertSame(spider2, spider4);
      assertSame(spider2, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider0);
      assertSame(spider3, spider4);
      assertSame(spider3, spider1);
      assertSame(spider4, spider0);
      assertSame(spider4, spider2);
      assertSame(spider4, spider3);
      assertSame(spider4, spider1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f7S5me");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, (String) null);
      assertNotNull(phantomJSDownloader0);
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      assertNotNull(spider1);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      assertNotNull(resultItemsCollectorPipeline0);
      
      Spider spider2 = spider1.addPipeline(resultItemsCollectorPipeline0);
      assertNotNull(spider2);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      
      // Undeclared exception!
      try { 
        spider2.thread(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f7S5me");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, (String) null);
      assertNotNull(phantomJSDownloader0);
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      assertNotNull(spider1);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      assertNotNull(resultItemsCollectorPipeline0);
      
      QueueScheduler queueScheduler0 = new QueueScheduler();
      assertNotNull(queueScheduler0);
      
      Spider.Status spider_Status0 = Spider.Status.fromValue(220);
      assertEquals(Spider.Status.Init, spider_Status0);
      
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("f7S5me");
      assertFalse(simplePageProcessor1.equals((Object)simplePageProcessor0));
      assertNotNull(simplePageProcessor1);
      
      Spider spider2 = spider0.setUUID("f7S5me");
      assertFalse(simplePageProcessor0.equals((Object)simplePageProcessor1));
      assertNotNull(spider2);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertNotSame(simplePageProcessor0, simplePageProcessor1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      
      Spider spider3 = spider2.setSpawnUrl(true);
      assertFalse(simplePageProcessor0.equals((Object)simplePageProcessor1));
      assertNotNull(spider3);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertNotSame(simplePageProcessor0, simplePageProcessor1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider2, spider3);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      
      QueueScheduler queueScheduler1 = new QueueScheduler();
      assertFalse(queueScheduler1.equals((Object)queueScheduler0));
      assertNotNull(queueScheduler1);
      
      QueueScheduler queueScheduler2 = new QueueScheduler();
      assertFalse(queueScheduler2.equals((Object)queueScheduler0));
      assertFalse(queueScheduler2.equals((Object)queueScheduler1));
      assertNotNull(queueScheduler2);
      
      Spider spider4 = spider2.setSpawnUrl(false);
      assertFalse(simplePageProcessor0.equals((Object)simplePageProcessor1));
      assertNotNull(spider4);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertFalse(spider2.isSpawnUrl());
      assertFalse(spider4.isSpawnUrl());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(0L, spider4.getPageCount());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertNotSame(simplePageProcessor0, simplePageProcessor1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider4);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider2, spider3);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertSame(spider2, spider4);
      assertSame(spider4, spider0);
      assertSame(spider4, spider3);
      assertSame(spider4, spider1);
      assertSame(spider4, spider2);
      
      Spider spider5 = spider0.thread(220);
      assertFalse(simplePageProcessor0.equals((Object)simplePageProcessor1));
      assertNotNull(spider5);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertFalse(spider5.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertTrue(spider5.isExitWhenComplete());
      assertEquals(0L, spider5.getPageCount());
      assertNotSame(simplePageProcessor0, simplePageProcessor1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider4);
      assertSame(spider0, spider5);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider5, spider3);
      assertSame(spider5, spider1);
      assertSame(spider5, spider4);
      assertSame(spider5, spider2);
      assertSame(spider5, spider0);
      
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Spider spider6 = spider0.setUUID((String) null);
      assertFalse(simplePageProcessor0.equals((Object)simplePageProcessor1));
      assertNotNull(spider6);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider6.getPageCount());
      assertTrue(spider6.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider6.getStatus());
      assertFalse(spider6.isSpawnUrl());
      assertNotSame(simplePageProcessor0, simplePageProcessor1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider4);
      assertSame(spider0, spider3);
      assertSame(spider0, spider5);
      assertSame(spider0, spider6);
      assertSame(spider0, spider1);
      assertSame(spider6, spider2);
      assertSame(spider6, spider5);
      assertSame(spider6, spider1);
      assertSame(spider6, spider3);
      assertSame(spider6, spider0);
      assertSame(spider6, spider4);
      
      spider6.stop();
      assertFalse(simplePageProcessor0.equals((Object)simplePageProcessor1));
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider6.getPageCount());
      assertTrue(spider6.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider6.getStatus());
      assertFalse(spider6.isSpawnUrl());
      assertNotSame(simplePageProcessor0, simplePageProcessor1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider4);
      assertSame(spider0, spider3);
      assertSame(spider0, spider5);
      assertSame(spider0, spider6);
      assertSame(spider0, spider1);
      assertSame(spider6, spider2);
      assertSame(spider6, spider5);
      assertSame(spider6, spider1);
      assertSame(spider6, spider3);
      assertSame(spider6, spider0);
      assertSame(spider6, spider4);
      
      boolean boolean0 = spider5.isExitWhenComplete();
      assertFalse(simplePageProcessor0.equals((Object)simplePageProcessor1));
      assertTrue(boolean0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertFalse(spider5.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertTrue(spider5.isExitWhenComplete());
      assertEquals(0L, spider5.getPageCount());
      assertNotSame(simplePageProcessor0, simplePageProcessor1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider4);
      assertSame(spider0, spider3);
      assertSame(spider0, spider5);
      assertSame(spider0, spider6);
      assertSame(spider0, spider1);
      assertSame(spider5, spider3);
      assertSame(spider5, spider6);
      assertSame(spider5, spider1);
      assertSame(spider5, spider4);
      assertSame(spider5, spider2);
      assertSame(spider5, spider0);
      
      spider4.run();
      assertFalse(simplePageProcessor0.equals((Object)simplePageProcessor1));
      assertFalse(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Stopped, spider2.getStatus());
      assertFalse(spider2.isSpawnUrl());
      assertFalse(spider4.isSpawnUrl());
      assertEquals(Spider.Status.Stopped, spider4.getStatus());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(0L, spider4.getPageCount());
      assertNotSame(simplePageProcessor0, simplePageProcessor1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider4);
      assertSame(spider0, spider3);
      assertSame(spider0, spider5);
      assertSame(spider0, spider6);
      assertSame(spider0, spider1);
      assertSame(spider2, spider3);
      assertSame(spider2, spider5);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertSame(spider2, spider6);
      assertSame(spider2, spider4);
      assertSame(spider4, spider0);
      assertSame(spider4, spider5);
      assertSame(spider4, spider6);
      assertSame(spider4, spider3);
      assertSame(spider4, spider1);
      assertSame(spider4, spider2);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f7S5me");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      
      String string0 = null;
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, (String) null);
      assertNotNull(phantomJSDownloader0);
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      assertNotNull(resultItemsCollectorPipeline0);
      
      Spider spider1 = spider0.addPipeline(resultItemsCollectorPipeline0);
      assertNotNull(spider1);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      Page page0 = new Page();
      assertNotNull(page0);
      assertNull(page0.getRawText());
      assertNull(page0.getCharset());
      assertTrue(page0.isDownloadSuccess());
      assertEquals(200, page0.getStatusCode());
      
      page0.setCharset("3*mms`ifu,NwRn;$");
      assertNull(page0.getRawText());
      assertEquals("3*mms`ifu,NwRn;$", page0.getCharset());
      assertTrue(page0.isDownloadSuccess());
      assertEquals(200, page0.getStatusCode());
      
      Page page1 = page0.setRawText("regex must not be empty");
      assertNotNull(page1);
      assertEquals("3*mms`ifu,NwRn;$", page0.getCharset());
      assertEquals("regex must not be empty", page0.getRawText());
      assertTrue(page0.isDownloadSuccess());
      assertEquals(200, page0.getStatusCode());
      assertTrue(page1.isDownloadSuccess());
      assertEquals(200, page1.getStatusCode());
      assertEquals("regex must not be empty", page1.getRawText());
      assertEquals("3*mms`ifu,NwRn;$", page1.getCharset());
      assertSame(page0, page1);
      assertSame(page1, page0);
      
      ResultItems resultItems0 = page1.getResultItems();
      assertNotNull(resultItems0);
      assertEquals("3*mms`ifu,NwRn;$", page0.getCharset());
      assertEquals("regex must not be empty", page0.getRawText());
      assertTrue(page0.isDownloadSuccess());
      assertEquals(200, page0.getStatusCode());
      assertTrue(page1.isDownloadSuccess());
      assertEquals(200, page1.getStatusCode());
      assertEquals("regex must not be empty", page1.getRawText());
      assertEquals("3*mms`ifu,NwRn;$", page1.getCharset());
      assertFalse(resultItems0.isSkip());
      assertSame(page0, page1);
      assertSame(page1, page0);
      
      resultItemsCollectorPipeline0.process(resultItems0, spider1);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals("3*mms`ifu,NwRn;$", page0.getCharset());
      assertEquals("regex must not be empty", page0.getRawText());
      assertTrue(page0.isDownloadSuccess());
      assertEquals(200, page0.getStatusCode());
      assertTrue(page1.isDownloadSuccess());
      assertEquals(200, page1.getStatusCode());
      assertEquals("regex must not be empty", page1.getRawText());
      assertEquals("3*mms`ifu,NwRn;$", page1.getCharset());
      assertFalse(resultItems0.isSkip());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertSame(page0, page1);
      assertSame(page1, page0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        spider0.addRequest((Request[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f7S5me");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, (String) null);
      assertNotNull(phantomJSDownloader0);
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      assertNotNull(forkJoinPool_ForkJoinWorkerThreadFactory0);
      
      MockThread mockThread0 = new MockThread();
      assertNotNull(mockThread0);
      
      ThreadGroup threadGroup0 = (ThreadGroup)mockThread0.getUncaughtExceptionHandler();
      assertNotNull(threadGroup0);
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertEquals("Test_Execution_Group", threadGroup0.getName());
      
      phantomJSDownloader0.setThread(3040);
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(3040, forkJoinPool_ForkJoinWorkerThreadFactory0, threadGroup0, true);
      assertNotNull(forkJoinPool0);
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertEquals("Test_Execution_Group", threadGroup0.getName());
      
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      assertNotNull(spider1);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertEquals("Test_Execution_Group", threadGroup0.getName());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      assertNotNull(spider2);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertEquals("Test_Execution_Group", threadGroup0.getName());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      assertNotNull(resultItemsCollectorPipeline0);
      
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      assertFalse(synchronousQueue0.contains("f7S5me"));
      assertNotNull(synchronousQueue0);
      
      SynchronousQueue<String> synchronousQueue1 = new SynchronousQueue<String>();
      assertFalse(synchronousQueue1.equals((Object)synchronousQueue0));
      assertFalse(synchronousQueue1.contains("f7S5me"));
      assertNotNull(synchronousQueue1);
      
      List<Pipeline> list0 = spider0.getAll((Collection<String>) synchronousQueue0);
      assertFalse(synchronousQueue0.equals((Object)synchronousQueue1));
      assertFalse(synchronousQueue0.contains("f7S5me"));
      assertNotNull(list0);
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertNotSame(synchronousQueue0, synchronousQueue1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      QueueScheduler queueScheduler0 = new QueueScheduler();
      assertNotNull(queueScheduler0);
      
      Spider spider3 = spider1.setScheduler(queueScheduler0);
      assertNotNull(spider3);
      assertEquals(0L, spider3.getPageCount());
      assertEquals(Spider.Status.Stopped, spider3.getStatus());
      assertTrue(spider3.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertEquals("Test_Execution_Group", threadGroup0.getName());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
      assertSame(spider3, spider1);
      assertSame(spider3, spider2);
      assertSame(spider3, spider0);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("f7S5me");
      assertNotNull(fileCacheQueueScheduler0);
      
      // Undeclared exception!
      fileCacheQueueScheduler0.poll(spider1);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f7S5me");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, (String) null);
      assertNotNull(phantomJSDownloader0);
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      assertNotNull(spider1);
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      assertNotNull(resultItemsCollectorPipeline0);
      
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      assertFalse(synchronousQueue0.contains("f7S5me"));
      assertNotNull(synchronousQueue0);
      
      List<Pipeline> list0 = spider1.getAll((Collection<String>) synchronousQueue0);
      assertFalse(synchronousQueue0.contains("f7S5me"));
      assertNotNull(list0);
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      Spider spider2 = spider0.setPipelines((List<Pipeline>) null);
      assertNotNull(spider2);
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Stopped, spider2.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      
      Page page0 = new Page();
      assertNotNull(page0);
      assertNull(page0.getRawText());
      assertTrue(page0.isDownloadSuccess());
      assertEquals(200, page0.getStatusCode());
      assertNull(page0.getCharset());
      
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      assertNotNull(threadPoolExecutor_CallerRunsPolicy0);
      
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("$VUES");
      assertNotNull(fileCacheQueueScheduler0);
      
      Page page1 = page0.setRawText("");
      assertNotNull(page1);
      assertEquals("", page0.getRawText());
      assertTrue(page0.isDownloadSuccess());
      assertEquals(200, page0.getStatusCode());
      assertNull(page0.getCharset());
      assertTrue(page1.isDownloadSuccess());
      assertNull(page1.getCharset());
      assertEquals("", page1.getRawText());
      assertEquals(200, page1.getStatusCode());
      assertSame(page0, page1);
      assertSame(page1, page0);
      
      List<Request> list1 = page1.getTargetRequests();
      assertNotNull(list1);
      assertEquals("", page0.getRawText());
      assertTrue(page0.isDownloadSuccess());
      assertEquals(200, page0.getStatusCode());
      assertNull(page0.getCharset());
      assertTrue(page1.isDownloadSuccess());
      assertNull(page1.getCharset());
      assertEquals("", page1.getRawText());
      assertEquals(200, page1.getStatusCode());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertSame(page0, page1);
      assertSame(page1, page0);
      
      Spider spider3 = spider0.startRequest(list1);
      assertNotNull(spider3);
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertEquals("", page0.getRawText());
      assertTrue(page0.isDownloadSuccess());
      assertEquals(200, page0.getStatusCode());
      assertNull(page0.getCharset());
      assertTrue(page1.isDownloadSuccess());
      assertNull(page1.getCharset());
      assertEquals("", page1.getRawText());
      assertEquals(200, page1.getStatusCode());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(Spider.Status.Stopped, spider3.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(page0, page1);
      assertSame(page1, page0);
      assertSame(spider3, spider0);
      assertSame(spider3, spider1);
      assertSame(spider3, spider2);
      
      CountableThreadPool countableThreadPool0 = new CountableThreadPool(39);
      assertNotNull(countableThreadPool0);
      assertEquals(39, countableThreadPool0.getThreadNum());
      
      boolean boolean0 = spider2.isExitWhenComplete();
      assertTrue(boolean0);
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Stopped, spider2.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider2, spider1);
      assertSame(spider2, spider3);
      assertSame(spider2, spider0);
      
      // Undeclared exception!
      try { 
        spider1.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f7S5me");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Spider spider1 = spider0.clearPipeline();
      assertNotNull(spider1);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      assertFalse(synchronousQueue0.contains("f7S5me"));
      assertNotNull(synchronousQueue0);
      
      SynchronousQueue<String> synchronousQueue1 = new SynchronousQueue<String>();
      assertFalse(synchronousQueue1.equals((Object)synchronousQueue0));
      assertFalse(synchronousQueue1.contains("f7S5me"));
      assertNotNull(synchronousQueue1);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      
      Set<String> set0 = charset0.aliases();
      assertFalse(set0.contains("f7S5me"));
      assertNotNull(set0);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) set0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f7S5me");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, (String) null);
      assertNotNull(phantomJSDownloader0);
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      assertNotNull(spider1);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      assertNotNull(resultItemsCollectorPipeline0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Spider spider2 = spider1.addPipeline(resultItemsCollectorPipeline0);
      assertNotNull(spider2);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      
      Spider spider3 = spider0.clearPipeline();
      assertNotNull(spider3);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider1);
      
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      assertNotNull(forkJoinPool_ForkJoinWorkerThreadFactory0);
      
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, spider2, "f7S5me");
      assertNotNull(mockThread0);
      
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = mockThread0.getUncaughtExceptionHandler();
      assertNotNull(thread_UncaughtExceptionHandler0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertSame(spider2, spider3);
      
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(2, forkJoinPool_ForkJoinWorkerThreadFactory0, thread_UncaughtExceptionHandler0, false);
      assertNotNull(forkJoinPool0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      Spider spider4 = spider2.thread((ExecutorService) forkJoinPool0, 1458);
      assertNotNull(spider4);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertTrue(spider4.isSpawnUrl());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(0L, spider4.getPageCount());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertSame(spider0, spider4);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider1, spider4);
      assertSame(spider1, spider3);
      assertSame(spider2, spider4);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertSame(spider2, spider3);
      assertSame(spider4, spider0);
      assertSame(spider4, spider2);
      assertSame(spider4, spider1);
      assertSame(spider4, spider3);
      
      String[] stringArray0 = new String[0];
      Spider spider5 = spider3.addUrl(stringArray0);
      assertNotNull(spider5);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertTrue(spider5.isSpawnUrl());
      assertEquals(0L, spider5.getPageCount());
      assertTrue(spider5.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertSame(spider0, spider4);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider0, spider5);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider4);
      assertSame(spider3, spider5);
      assertSame(spider3, spider1);
      assertSame(spider5, spider3);
      assertSame(spider5, spider4);
      assertSame(spider5, spider1);
      assertSame(spider5, spider0);
      assertSame(spider5, spider2);
      assertEquals(0, stringArray0.length);
      
      Spider spider6 = spider5.setUUID((String) null);
      assertNotNull(spider6);
      assertEquals(Spider.Status.Init, spider6.getStatus());
      assertTrue(spider6.isExitWhenComplete());
      assertTrue(spider6.isSpawnUrl());
      assertEquals(0L, spider6.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertTrue(spider5.isSpawnUrl());
      assertEquals(0L, spider5.getPageCount());
      assertTrue(spider5.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertSame(spider6, spider3);
      assertSame(spider6, spider0);
      assertSame(spider6, spider2);
      assertSame(spider6, spider1);
      assertSame(spider6, spider4);
      assertSame(spider6, spider5);
      assertSame(spider0, spider4);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider0, spider6);
      assertSame(spider0, spider5);
      assertSame(spider3, spider6);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider4);
      assertSame(spider3, spider5);
      assertSame(spider3, spider1);
      assertSame(spider5, spider3);
      assertSame(spider5, spider4);
      assertSame(spider5, spider1);
      assertSame(spider5, spider0);
      assertSame(spider5, spider2);
      assertSame(spider5, spider6);
      assertEquals(0, stringArray0.length);
      
      boolean boolean1 = spider6.isExitWhenComplete();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(Spider.Status.Init, spider6.getStatus());
      assertTrue(spider6.isExitWhenComplete());
      assertTrue(spider6.isSpawnUrl());
      assertEquals(0L, spider6.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertTrue(spider5.isSpawnUrl());
      assertEquals(0L, spider5.getPageCount());
      assertTrue(spider5.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertSame(spider6, spider3);
      assertSame(spider6, spider0);
      assertSame(spider6, spider2);
      assertSame(spider6, spider1);
      assertSame(spider6, spider4);
      assertSame(spider6, spider5);
      assertSame(spider0, spider4);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider0, spider6);
      assertSame(spider0, spider5);
      assertSame(spider3, spider6);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider4);
      assertSame(spider3, spider5);
      assertSame(spider3, spider1);
      assertSame(spider5, spider3);
      assertSame(spider5, spider4);
      assertSame(spider5, spider1);
      assertSame(spider5, spider0);
      assertSame(spider5, spider2);
      assertSame(spider5, spider6);
      assertEquals(0, stringArray0.length);
      
      Spider.Status spider_Status0 = spider3.getStatus();
      assertEquals(Spider.Status.Init, spider_Status0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertSame(spider0, spider4);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider0, spider6);
      assertSame(spider0, spider5);
      assertSame(spider3, spider6);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider4);
      assertSame(spider3, spider5);
      assertSame(spider3, spider1);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f7S5me");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Spider spider1 = spider0.clearPipeline();
      assertNotNull(spider1);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      QueueScheduler queueScheduler0 = new QueueScheduler();
      assertNotNull(queueScheduler0);
      
      Spider spider2 = spider0.setScheduler(queueScheduler0);
      assertNotNull(spider2);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      
      String string0 = "Ws#gaG{df0(WK F\\";
      // Undeclared exception!
      try { 
        spider1.get("Ws#gaG{df0(WK F");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("7#R");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Spider spider1 = spider0.setPipelines(linkedList0);
      assertNotNull(spider1);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(0, linkedList0.size());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      Spider spider2 = spider1.setExitWhenComplete(false);
      assertNotNull(spider2);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(0, linkedList0.size());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertFalse(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      
      Spider spider3 = spider2.setSpawnUrl(false);
      assertNotNull(spider3);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isExitWhenComplete());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(0, linkedList0.size());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider1.isExitWhenComplete());
      assertFalse(spider1.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertFalse(spider2.isExitWhenComplete());
      assertFalse(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertFalse(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertFalse(spider3.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertSame(spider1, spider3);
      assertSame(spider1, spider2);
      assertSame(spider2, spider1);
      assertSame(spider2, spider3);
      assertSame(spider2, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      
      Spider spider4 = spider3.clearPipeline();
      assertNotNull(spider4);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isExitWhenComplete());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(0, linkedList0.size());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider1.isExitWhenComplete());
      assertFalse(spider1.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertFalse(spider2.isExitWhenComplete());
      assertFalse(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertFalse(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertFalse(spider3.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertFalse(spider4.isExitWhenComplete());
      assertFalse(spider4.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertEquals(0L, spider4.getPageCount());
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider4);
      assertSame(spider0, spider1);
      assertSame(spider1, spider4);
      assertSame(spider1, spider0);
      assertSame(spider1, spider3);
      assertSame(spider1, spider2);
      assertSame(spider2, spider1);
      assertSame(spider2, spider4);
      assertSame(spider2, spider3);
      assertSame(spider2, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider4);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      assertSame(spider4, spider0);
      assertSame(spider4, spider2);
      assertSame(spider4, spider1);
      assertSame(spider4, spider3);
      
      Spider spider5 = spider2.clearPipeline();
      assertNotNull(spider5);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isExitWhenComplete());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(0, linkedList0.size());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider1.isExitWhenComplete());
      assertFalse(spider1.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertFalse(spider2.isExitWhenComplete());
      assertFalse(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertFalse(spider5.isExitWhenComplete());
      assertEquals(0L, spider5.getPageCount());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertFalse(spider5.isSpawnUrl());
      assertSame(spider0, spider5);
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider4);
      assertSame(spider0, spider1);
      assertSame(spider1, spider4);
      assertSame(spider1, spider5);
      assertSame(spider1, spider0);
      assertSame(spider1, spider3);
      assertSame(spider1, spider2);
      assertSame(spider2, spider1);
      assertSame(spider2, spider4);
      assertSame(spider2, spider3);
      assertSame(spider2, spider0);
      assertSame(spider2, spider5);
      assertSame(spider5, spider4);
      assertSame(spider5, spider3);
      assertSame(spider5, spider1);
      assertSame(spider5, spider0);
      assertSame(spider5, spider2);
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertFalse(linkedList1.contains("7#R"));
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      Spider spider6 = spider1.startUrls(linkedList1);
      assertFalse(linkedList1.contains("7#R"));
      assertNotNull(spider6);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isExitWhenComplete());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(0, linkedList0.size());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider1.isExitWhenComplete());
      assertFalse(spider1.isSpawnUrl());
      assertEquals(0, linkedList1.size());
      assertFalse(spider6.isExitWhenComplete());
      assertFalse(spider6.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider6.getStatus());
      assertEquals(0L, spider6.getPageCount());
      assertSame(spider0, spider5);
      assertSame(spider0, spider3);
      assertSame(spider0, spider6);
      assertSame(spider0, spider2);
      assertSame(spider0, spider4);
      assertSame(spider0, spider1);
      assertSame(spider1, spider4);
      assertSame(spider1, spider5);
      assertSame(spider1, spider0);
      assertSame(spider1, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider6);
      assertSame(spider6, spider4);
      assertSame(spider6, spider0);
      assertSame(spider6, spider2);
      assertSame(spider6, spider3);
      assertSame(spider6, spider1);
      assertSame(spider6, spider5);
      
      List<SpiderListener> list0 = spider3.getSpiderListeners();
      assertNull(list0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isExitWhenComplete());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(0, linkedList0.size());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider1.isExitWhenComplete());
      assertFalse(spider1.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertFalse(spider2.isExitWhenComplete());
      assertFalse(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertFalse(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertFalse(spider3.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertSame(spider0, spider5);
      assertSame(spider0, spider3);
      assertSame(spider0, spider6);
      assertSame(spider0, spider2);
      assertSame(spider0, spider4);
      assertSame(spider0, spider1);
      assertSame(spider1, spider4);
      assertSame(spider1, spider5);
      assertSame(spider1, spider0);
      assertSame(spider1, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider6);
      assertSame(spider2, spider1);
      assertSame(spider2, spider6);
      assertSame(spider2, spider4);
      assertSame(spider2, spider3);
      assertSame(spider2, spider0);
      assertSame(spider2, spider5);
      assertSame(spider3, spider2);
      assertSame(spider3, spider5);
      assertSame(spider3, spider4);
      assertSame(spider3, spider1);
      assertSame(spider3, spider6);
      assertSame(spider3, spider0);
      
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("7#R");
      assertNotNull(fileCacheQueueScheduler0);
      
      Spider spider7 = spider6.scheduler(fileCacheQueueScheduler0);
      assertFalse(linkedList1.contains("7#R"));
      assertNotNull(spider7);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isExitWhenComplete());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(0, linkedList0.size());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider1.isExitWhenComplete());
      assertFalse(spider1.isSpawnUrl());
      assertEquals(0, linkedList1.size());
      assertFalse(spider6.isExitWhenComplete());
      assertFalse(spider6.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider6.getStatus());
      assertEquals(0L, spider6.getPageCount());
      assertEquals(Spider.Status.Init, spider7.getStatus());
      assertFalse(spider7.isSpawnUrl());
      assertFalse(spider7.isExitWhenComplete());
      assertEquals(0L, spider7.getPageCount());
      assertSame(spider0, spider7);
      assertSame(spider0, spider5);
      assertSame(spider0, spider3);
      assertSame(spider0, spider6);
      assertSame(spider0, spider2);
      assertSame(spider0, spider4);
      assertSame(spider0, spider1);
      assertSame(spider1, spider4);
      assertSame(spider1, spider5);
      assertSame(spider1, spider0);
      assertSame(spider1, spider7);
      assertSame(spider1, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider6);
      assertSame(spider6, spider4);
      assertSame(spider6, spider0);
      assertSame(spider6, spider2);
      assertSame(spider6, spider3);
      assertSame(spider6, spider1);
      assertSame(spider6, spider7);
      assertSame(spider6, spider5);
      assertSame(spider7, spider6);
      assertSame(spider7, spider0);
      assertSame(spider7, spider2);
      assertSame(spider7, spider4);
      assertSame(spider7, spider3);
      assertSame(spider7, spider1);
      assertSame(spider7, spider5);
      
      Spider spider8 = spider7.setSpiderListeners((List<SpiderListener>) null);
      assertFalse(linkedList1.contains("7#R"));
      assertNotNull(spider8);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isExitWhenComplete());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(0, linkedList0.size());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider1.isExitWhenComplete());
      assertFalse(spider1.isSpawnUrl());
      assertEquals(0, linkedList1.size());
      assertFalse(spider6.isExitWhenComplete());
      assertFalse(spider6.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider6.getStatus());
      assertEquals(0L, spider6.getPageCount());
      assertEquals(Spider.Status.Init, spider7.getStatus());
      assertFalse(spider7.isSpawnUrl());
      assertFalse(spider7.isExitWhenComplete());
      assertEquals(0L, spider7.getPageCount());
      assertEquals(0L, spider8.getPageCount());
      assertFalse(spider8.isExitWhenComplete());
      assertFalse(spider8.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider8.getStatus());
      assertSame(spider0, spider7);
      assertSame(spider0, spider5);
      assertSame(spider0, spider8);
      assertSame(spider0, spider3);
      assertSame(spider0, spider6);
      assertSame(spider0, spider2);
      assertSame(spider0, spider4);
      assertSame(spider0, spider1);
      assertSame(spider1, spider4);
      assertSame(spider1, spider8);
      assertSame(spider1, spider5);
      assertSame(spider1, spider0);
      assertSame(spider1, spider7);
      assertSame(spider1, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider6);
      assertSame(spider6, spider4);
      assertSame(spider6, spider0);
      assertSame(spider6, spider2);
      assertSame(spider6, spider3);
      assertSame(spider6, spider1);
      assertSame(spider6, spider7);
      assertSame(spider6, spider5);
      assertSame(spider6, spider8);
      assertSame(spider7, spider6);
      assertSame(spider7, spider0);
      assertSame(spider7, spider2);
      assertSame(spider7, spider4);
      assertSame(spider7, spider3);
      assertSame(spider7, spider1);
      assertSame(spider7, spider5);
      assertSame(spider7, spider8);
      assertSame(spider8, spider6);
      assertSame(spider8, spider1);
      assertSame(spider8, spider7);
      assertSame(spider8, spider4);
      assertSame(spider8, spider3);
      assertSame(spider8, spider5);
      assertSame(spider8, spider0);
      assertSame(spider8, spider2);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "7#R";
      stringArray0[1] = "7#R";
      stringArray0[2] = "7#R";
      stringArray0[3] = "7#R";
      stringArray0[4] = "7#R";
      // Undeclared exception!
      try { 
        spider4.test(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f7S5me");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, (String) null);
      assertNotNull(phantomJSDownloader0);
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      assertNotNull(spider1);
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      assertNotNull(resultItemsCollectorPipeline0);
      
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      assertFalse(synchronousQueue0.contains("f7S5me"));
      assertNotNull(synchronousQueue0);
      
      List<Pipeline> list0 = spider1.getAll((Collection<String>) synchronousQueue0);
      assertFalse(synchronousQueue0.contains("f7S5me"));
      assertNotNull(list0);
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      Spider spider2 = spider1.setUUID("f7S5me");
      assertNotNull(spider2);
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Stopped, spider2.getStatus());
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      
      long long0 = spider0.getPageCount();
      assertEquals(0L, long0);
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      
      Page page0 = new Page();
      assertNotNull(page0);
      assertNull(page0.getRawText());
      assertNull(page0.getCharset());
      assertTrue(page0.isDownloadSuccess());
      assertEquals(200, page0.getStatusCode());
      
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        spider2.addUrl(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      
      Spider spider1 = spider0.setExecutorService((ExecutorService) null);
      assertNotNull(spider1);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      assertNotNull(phantomJSDownloader0);
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      assertNotNull(spider2);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      
      Json json0 = new Json("");
      assertNotNull(json0);
      
      Class<Pipeline> class0 = Pipeline.class;
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      PriorityBlockingQueue<String> priorityBlockingQueue0 = new PriorityBlockingQueue<String>();
      assertFalse(priorityBlockingQueue0.contains(""));
      assertNotNull(priorityBlockingQueue0);
      
      List<Pipeline> list0 = spider1.getAll((Collection<String>) priorityBlockingQueue0);
      assertFalse(priorityBlockingQueue0.contains(""));
      assertNotNull(list0);
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      
      Spider spider3 = spider2.setPipelines(list0);
      assertFalse(priorityBlockingQueue0.contains(""));
      assertNotNull(spider3);
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(Spider.Status.Stopped, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(Spider.Status.Stopped, spider3.getStatus());
      assertTrue(spider3.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider1, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider3);
      assertSame(spider3, spider2);
      assertSame(spider3, spider0);
      assertSame(spider3, spider1);
      
      Spider spider4 = spider2.startRequest(linkedList0);
      assertNotNull(spider4);
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(Spider.Status.Stopped, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(0, linkedList0.size());
      assertEquals(Spider.Status.Stopped, spider4.getStatus());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isExitWhenComplete());
      assertTrue(spider4.isSpawnUrl());
      assertSame(spider0, spider1);
      assertSame(spider0, spider4);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider1, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider4);
      assertSame(spider2, spider0);
      assertSame(spider2, spider4);
      assertSame(spider2, spider1);
      assertSame(spider2, spider3);
      assertSame(spider4, spider3);
      assertSame(spider4, spider1);
      assertSame(spider4, spider0);
      assertSame(spider4, spider2);
      
      // Undeclared exception!
      try { 
        json0.toList(class0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/alibaba/fastjson/JSON
         //
         verifyException("us.codecraft.webmagic.selector.Json", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f7S5me");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      
      Spider spider1 = spider0.setUUID("");
      assertNotNull(spider1);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      assertNotNull(forkJoinPool_ForkJoinWorkerThreadFactory0);
      
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Iterator<Pipeline> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(30000);
      assertNotNull(forkJoinPool0);
      
      Spider spider2 = spider0.thread((ExecutorService) forkJoinPool0, 30000);
      assertNotNull(spider2);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider2.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Spider spider3 = spider2.thread(2);
      assertNotNull(spider3);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider2.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider2, spider1);
      assertSame(spider2, spider3);
      assertSame(spider2, spider0);
      assertSame(spider3, spider0);
      assertSame(spider3, spider1);
      assertSame(spider3, spider2);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = "us.codecraft.webmagic.Spider$Status";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Spider$Status");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertNotNull(spider0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("threadNum should be more than one!");
      assertNotNull(fileCacheQueueScheduler0);
      
      Spider spider1 = spider0.scheduler(fileCacheQueueScheduler0);
      assertNotNull(spider1);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      Spider spider2 = spider1.clearPipeline();
      assertNotNull(spider2);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        spider0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.FileCacheQueueScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("!m<<L\"nK:sjZ<G6$YB?");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      
      List<SpiderListener> list0 = spider0.getSpiderListeners();
      assertNull(list0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      
      Spider spider1 = spider0.setSpiderListeners((List<SpiderListener>) null);
      assertNotNull(spider1);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      Spider spider2 = spider1.setUUID("");
      assertNotNull(spider2);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      
      // Undeclared exception!
      try { 
        spider2.addRequest((Request[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f7S5me");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, (String) null);
      assertNotNull(phantomJSDownloader0);
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      assertNotNull(spider1);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      assertNotNull(resultItemsCollectorPipeline0);
      
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      assertFalse(synchronousQueue0.contains("f7S5me"));
      assertNotNull(synchronousQueue0);
      
      List<Pipeline> list0 = new LinkedList<Pipeline>();
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Spider spider2 = spider0.setPipelines(list0);
      assertNotNull(spider2);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      
      long long0 = spider0.getPageCount();
      assertEquals(0L, long0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      
      Page page0 = new Page();
      assertNotNull(page0);
      assertTrue(page0.isDownloadSuccess());
      assertNull(page0.getRawText());
      assertNull(page0.getCharset());
      assertEquals(200, page0.getStatusCode());
      
      Spider spider3 = spider0.setExitWhenComplete(false);
      assertNotNull(spider3);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isSpawnUrl());
      assertFalse(spider3.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider3, spider0);
      assertSame(spider3, spider1);
      assertSame(spider3, spider2);
      
      Spider spider4 = spider2.setUUID((String) null);
      assertNotNull(spider4);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertFalse(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider4.isSpawnUrl());
      assertEquals(0L, spider4.getPageCount());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertFalse(spider4.isExitWhenComplete());
      assertSame(spider0, spider4);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider2, spider1);
      assertSame(spider2, spider4);
      assertSame(spider2, spider3);
      assertSame(spider2, spider0);
      assertSame(spider4, spider3);
      assertSame(spider4, spider2);
      assertSame(spider4, spider0);
      assertSame(spider4, spider1);
      
      Spider spider5 = spider2.setSpawnUrl(true);
      assertNotNull(spider5);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertFalse(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider5.getPageCount());
      assertTrue(spider5.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertFalse(spider5.isExitWhenComplete());
      assertSame(spider0, spider4);
      assertSame(spider0, spider5);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider2, spider1);
      assertSame(spider2, spider5);
      assertSame(spider2, spider4);
      assertSame(spider2, spider3);
      assertSame(spider2, spider0);
      assertSame(spider5, spider4);
      assertSame(spider5, spider2);
      assertSame(spider5, spider0);
      assertSame(spider5, spider3);
      assertSame(spider5, spider1);
      
      QueueScheduler queueScheduler0 = new QueueScheduler();
      assertNotNull(queueScheduler0);
      
      Spider spider6 = spider3.downloader(phantomJSDownloader0);
      assertNotNull(spider6);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isSpawnUrl());
      assertFalse(spider3.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider6.isSpawnUrl());
      assertFalse(spider6.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider6.getStatus());
      assertEquals(0L, spider6.getPageCount());
      assertSame(spider0, spider4);
      assertSame(spider0, spider5);
      assertSame(spider0, spider6);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider3, spider0);
      assertSame(spider3, spider4);
      assertSame(spider3, spider5);
      assertSame(spider3, spider6);
      assertSame(spider3, spider1);
      assertSame(spider3, spider2);
      assertSame(spider6, spider2);
      assertSame(spider6, spider3);
      assertSame(spider6, spider1);
      assertSame(spider6, spider5);
      assertSame(spider6, spider0);
      assertSame(spider6, spider4);
      
      PhantomJSDownloader phantomJSDownloader1 = new PhantomJSDownloader((String) null, "f7S5me");
      assertFalse(phantomJSDownloader1.equals((Object)phantomJSDownloader0));
      assertNotNull(phantomJSDownloader1);
      assertEquals(0, phantomJSDownloader1.getRetryNum());
      
      Spider spider7 = spider2.setDownloader(phantomJSDownloader1);
      assertFalse(phantomJSDownloader1.equals((Object)phantomJSDownloader0));
      assertNotNull(spider7);
      assertEquals(Spider.Status.Init, spider7.getStatus());
      assertEquals(0L, spider7.getPageCount());
      assertTrue(spider7.isSpawnUrl());
      assertFalse(spider7.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertFalse(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0, phantomJSDownloader1.getRetryNum());
      assertSame(spider7, spider2);
      assertSame(spider7, spider6);
      assertSame(spider7, spider1);
      assertSame(spider7, spider0);
      assertSame(spider7, spider3);
      assertSame(spider7, spider4);
      assertSame(spider7, spider5);
      assertSame(spider0, spider4);
      assertSame(spider0, spider5);
      assertSame(spider0, spider6);
      assertSame(spider0, spider2);
      assertSame(spider0, spider7);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider2, spider1);
      assertSame(spider2, spider5);
      assertSame(spider2, spider4);
      assertSame(spider2, spider6);
      assertSame(spider2, spider7);
      assertSame(spider2, spider3);
      assertSame(spider2, spider0);
      assertNotSame(phantomJSDownloader1, phantomJSDownloader0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, (String) null);
      assertNotNull(phantomJSDownloader0);
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      
      Page page0 = new Page();
      assertNotNull(page0);
      assertNull(page0.getRawText());
      assertNull(page0.getCharset());
      assertEquals(200, page0.getStatusCode());
      assertTrue(page0.isDownloadSuccess());
      
      Page page1 = page0.setRawText((String) null);
      assertNotNull(page1);
      assertNull(page0.getRawText());
      assertNull(page0.getCharset());
      assertEquals(200, page0.getStatusCode());
      assertTrue(page0.isDownloadSuccess());
      assertEquals(200, page1.getStatusCode());
      assertNull(page1.getRawText());
      assertTrue(page1.isDownloadSuccess());
      assertNull(page1.getCharset());
      assertSame(page0, page1);
      assertSame(page1, page0);
      
      QueueScheduler queueScheduler0 = new QueueScheduler();
      assertNotNull(queueScheduler0);
      
      Spider.Status spider_Status0 = Spider.Status.fromValue(220);
      assertEquals(Spider.Status.Init, spider_Status0);
      
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(":");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      
      Spider spider1 = spider0.setSpawnUrl(false);
      assertNotNull(spider1);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertFalse(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      QueueScheduler queueScheduler1 = new QueueScheduler();
      assertFalse(queueScheduler1.equals((Object)queueScheduler0));
      assertNotNull(queueScheduler1);
      
      QueueScheduler queueScheduler2 = new QueueScheduler();
      assertFalse(queueScheduler2.equals((Object)queueScheduler0));
      assertFalse(queueScheduler2.equals((Object)queueScheduler1));
      assertNotNull(queueScheduler2);
      
      Spider spider2 = spider0.setExitWhenComplete(false);
      assertNotNull(spider2);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isSpawnUrl());
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertFalse(spider2.isExitWhenComplete());
      assertFalse(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      
      Spider spider3 = spider2.setScheduler(queueScheduler2);
      assertFalse(queueScheduler2.equals((Object)queueScheduler0));
      assertFalse(queueScheduler2.equals((Object)queueScheduler1));
      assertNotNull(spider3);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isSpawnUrl());
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertFalse(spider2.isExitWhenComplete());
      assertFalse(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertFalse(spider3.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertFalse(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertNotSame(queueScheduler2, queueScheduler0);
      assertNotSame(queueScheduler2, queueScheduler1);
      assertSame(spider2, spider1);
      assertSame(spider2, spider3);
      assertSame(spider2, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider0);
      assertSame(spider3, spider1);
      
      spider3.stop();
      assertFalse(queueScheduler2.equals((Object)queueScheduler0));
      assertFalse(queueScheduler2.equals((Object)queueScheduler1));
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isSpawnUrl());
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertFalse(spider2.isExitWhenComplete());
      assertFalse(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertFalse(spider3.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertFalse(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertNotSame(queueScheduler2, queueScheduler0);
      assertNotSame(queueScheduler2, queueScheduler1);
      assertSame(spider2, spider1);
      assertSame(spider2, spider3);
      assertSame(spider2, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider0);
      assertSame(spider3, spider1);
      
      boolean boolean0 = spider1.isExitWhenComplete();
      assertFalse(boolean0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isSpawnUrl());
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertFalse(spider1.isExitWhenComplete());
      assertFalse(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = "!)g";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("!)g");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertNotNull(spider0);
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("init cache file ");
      assertNotNull(fileCacheQueueScheduler0);
      
      Spider spider1 = spider0.setScheduler(fileCacheQueueScheduler0);
      assertNotNull(spider1);
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      Spider spider2 = spider1.clearPipeline();
      assertNotNull(spider2);
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      
      Spider spider3 = spider2.setSpawnUrl(true);
      assertNotNull(spider3);
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider3);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider0);
      assertSame(spider3, spider1);
      
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      assertNotNull(consolePipeline0);
      
      Spider spider4 = spider3.addPipeline(consolePipeline0);
      assertNotNull(spider4);
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isSpawnUrl());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider4);
      assertSame(spider0, spider1);
      assertSame(spider1, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider4);
      assertSame(spider1, spider0);
      assertSame(spider2, spider4);
      assertSame(spider2, spider3);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider4);
      assertSame(spider3, spider0);
      assertSame(spider3, spider1);
      assertSame(spider4, spider2);
      assertSame(spider4, spider3);
      assertSame(spider4, spider0);
      assertSame(spider4, spider1);
      
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      assertNotNull(threadPoolExecutor_CallerRunsPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(6064, threadPoolExecutor_CallerRunsPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      Spider spider5 = spider4.thread((ExecutorService) scheduledThreadPoolExecutor0, 6064);
      assertNotNull(spider5);
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isSpawnUrl());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertTrue(spider5.isExitWhenComplete());
      assertTrue(spider5.isSpawnUrl());
      assertEquals(0L, spider5.getPageCount());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider4);
      assertSame(spider0, spider1);
      assertSame(spider0, spider5);
      assertSame(spider1, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider5);
      assertSame(spider1, spider4);
      assertSame(spider1, spider0);
      assertSame(spider2, spider4);
      assertSame(spider2, spider3);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertSame(spider2, spider5);
      assertSame(spider3, spider2);
      assertSame(spider3, spider4);
      assertSame(spider3, spider5);
      assertSame(spider3, spider0);
      assertSame(spider3, spider1);
      assertSame(spider4, spider2);
      assertSame(spider4, spider3);
      assertSame(spider4, spider0);
      assertSame(spider4, spider1);
      assertSame(spider4, spider5);
      assertSame(spider5, spider0);
      assertSame(spider5, spider3);
      assertSame(spider5, spider2);
      assertSame(spider5, spider4);
      assertSame(spider5, spider1);
      
      // Undeclared exception!
      try { 
        spider4.get("init cache file ");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("E");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      
      Spider spider1 = spider0.setUUID("E");
      assertNotNull(spider1);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      LinkedBlockingDeque<Runnable> linkedBlockingDeque0 = new LinkedBlockingDeque<Runnable>();
      assertNotNull(linkedBlockingDeque0);
      
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(2, 2, 2, timeUnit0, linkedBlockingDeque0);
      assertNotNull(threadPoolExecutor0);
      
      Spider spider2 = spider0.setExecutorService(threadPoolExecutor0);
      assertNotNull(spider2);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      
      Page page0 = new Page();
      assertNotNull(page0);
      assertNull(page0.getRawText());
      assertTrue(page0.isDownloadSuccess());
      assertEquals(200, page0.getStatusCode());
      assertNull(page0.getCharset());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      
      Page page1 = Page.fail();
      assertFalse(page1.equals((Object)page0));
      assertNotNull(page1);
      assertNull(page1.getCharset());
      assertEquals(200, page1.getStatusCode());
      assertNull(page1.getRawText());
      assertFalse(page1.isDownloadSuccess());
      assertNotSame(page1, page0);
      
      Page page2 = Page.fail();
      assertFalse(page2.equals((Object)page1));
      assertFalse(page2.equals((Object)page0));
      assertNotNull(page2);
      assertNull(page2.getRawText());
      assertEquals(200, page2.getStatusCode());
      assertFalse(page2.isDownloadSuccess());
      assertNull(page2.getCharset());
      assertNotSame(page2, page1);
      assertNotSame(page2, page0);
      
      spider1.extractAndAddRequests(page0, false);
      assertFalse(page0.equals((Object)page2));
      assertFalse(page0.equals((Object)page1));
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertNull(page0.getRawText());
      assertTrue(page0.isDownloadSuccess());
      assertEquals(200, page0.getStatusCode());
      assertNull(page0.getCharset());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertNotSame(page0, page2);
      assertNotSame(page0, page1);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f7S5me");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, (String) null);
      assertNotNull(phantomJSDownloader0);
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      assertNotNull(spider1);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      assertNotNull(resultItemsCollectorPipeline0);
      
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      assertFalse(synchronousQueue0.contains("f7S5me"));
      assertNotNull(synchronousQueue0);
      
      List<Pipeline> list0 = spider1.getAll((Collection<String>) synchronousQueue0);
      assertFalse(synchronousQueue0.contains("f7S5me"));
      assertNotNull(list0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      Spider spider2 = spider0.setPipelines(list0);
      assertFalse(synchronousQueue0.contains("f7S5me"));
      assertNotNull(spider2);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Stopped, spider2.getStatus());
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      
      long long0 = spider0.getPageCount();
      assertEquals(0L, long0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      
      Page page0 = new Page();
      assertNotNull(page0);
      assertNull(page0.getRawText());
      assertNull(page0.getCharset());
      assertEquals(200, page0.getStatusCode());
      assertTrue(page0.isDownloadSuccess());
      
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      assertNotNull(threadPoolExecutor_CallerRunsPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(6064, threadPoolExecutor_CallerRunsPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      Spider spider3 = spider1.thread((ExecutorService) scheduledThreadPoolExecutor0, 39);
      assertNotNull(spider3);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(Spider.Status.Stopped, spider3.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider1, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("$VALUES");
      assertNotNull(fileCacheQueueScheduler0);
      
      Spider spider4 = spider3.setScheduler(fileCacheQueueScheduler0);
      assertNotNull(spider4);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(Spider.Status.Stopped, spider3.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(0L, spider4.getPageCount());
      assertEquals(Spider.Status.Stopped, spider4.getStatus());
      assertTrue(spider4.isSpawnUrl());
      assertSame(spider0, spider4);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider1, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider4);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      assertSame(spider3, spider4);
      assertSame(spider3, spider2);
      assertSame(spider4, spider2);
      assertSame(spider4, spider3);
      assertSame(spider4, spider1);
      assertSame(spider4, spider0);
      
      // Undeclared exception!
      spider4.get((String) null);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#+");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("#+", "#+");
      assertNotNull(phantomJSDownloader0);
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      assertNotNull(spider1);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      assertNotNull(resultItemsCollectorPipeline0);
      
      Spider spider2 = spider1.addPipeline(resultItemsCollectorPipeline0);
      assertNotNull(spider2);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      
      Spider spider3 = spider2.clearPipeline();
      assertNotNull(spider3);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider3);
      assertSame(spider2, spider0);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider1);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertFalse(linkedList0.contains("#+"));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      List<SpiderListener> list0 = spider3.getSpiderListeners();
      assertNull(list0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider3);
      assertSame(spider2, spider0);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider1);
      
      Spider spider4 = spider2.setUUID("#+");
      assertNotNull(spider4);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isSpawnUrl());
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider4);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider4);
      assertSame(spider1, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider3);
      assertSame(spider2, spider4);
      assertSame(spider2, spider0);
      assertSame(spider4, spider1);
      assertSame(spider4, spider2);
      assertSame(spider4, spider3);
      assertSame(spider4, spider0);
      
      Page page0 = Page.fail();
      assertNotNull(page0);
      assertEquals(200, page0.getStatusCode());
      assertNull(page0.getCharset());
      assertFalse(page0.isDownloadSuccess());
      assertNull(page0.getRawText());
      
      spider3.sleep(3149);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider4);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider4);
      assertSame(spider1, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider3);
      assertSame(spider2, spider4);
      assertSame(spider2, spider0);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider4);
      assertSame(spider3, spider1);
      
      spider0.initComponent();
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider4);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Spider.Status[] spider_StatusArray0 = Spider.Status.values();
      assertNotNull(spider_StatusArray0);
      assertEquals(3, spider_StatusArray0.length);
      
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertNotNull(spider0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      
      Spider spider1 = spider0.scheduler((Scheduler) null);
      assertNotNull(spider1);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      String string1 = "&?ANznC4J7*]Jh";
      Spider spider2 = spider1.setUUID("&?ANznC4J7*]Jh");
      assertNotNull(spider2);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider2.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      
      // Undeclared exception!
      try { 
        spider0.initComponent();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("UQp5*^_6A~(\"]H4h");
      assertNotNull(simplePageProcessor0);
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("UQp5*^_6A~(\"]H4h", "I|:2aG");
      assertNotNull(phantomJSDownloader0);
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertNotNull(spider0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      assertEquals(5, PriorityScheduler.INITIAL_CAPACITY);
      assertNotNull(priorityScheduler0);
      
      Spider spider1 = spider0.scheduler(priorityScheduler0);
      assertEquals(5, PriorityScheduler.INITIAL_CAPACITY);
      assertNotNull(spider1);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      assertEquals(5, PriorityScheduler.INITIAL_CAPACITY);
      assertNotNull(spider2);
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      
      Request[] requestArray0 = new Request[4];
      Request request0 = new Request("UQp5*^_6A~(\"]H4h");
      assertNotNull(request0);
      assertNull(request0.getMethod());
      assertNull(request0.getCharset());
      assertEquals("UQp5*^_6A~(\"]H4h", request0.getUrl());
      assertEquals(0L, request0.getPriority());
      assertFalse(request0.isBinaryContent());
      
      requestArray0[0] = request0;
      Request request1 = request0.setUrl("UQp5*^_6A~(\"]H4h");
      assertNotNull(request1);
      assertNull(request0.getMethod());
      assertNull(request0.getCharset());
      assertEquals("UQp5*^_6A~(\"]H4h", request0.getUrl());
      assertEquals(0L, request0.getPriority());
      assertFalse(request0.isBinaryContent());
      assertEquals("UQp5*^_6A~(\"]H4h", request1.getUrl());
      assertFalse(request1.isBinaryContent());
      assertNull(request1.getCharset());
      assertNull(request1.getMethod());
      assertEquals(0L, request1.getPriority());
      assertSame(request0, request1);
      assertSame(request1, request0);
      
      requestArray0[1] = request1;
      Request request2 = request0.setMethod("(FW(eO+nTBPq");
      assertNotNull(request2);
      assertNull(request0.getCharset());
      assertEquals("UQp5*^_6A~(\"]H4h", request0.getUrl());
      assertEquals(0L, request0.getPriority());
      assertEquals("(FW(eO+nTBPq", request0.getMethod());
      assertFalse(request0.isBinaryContent());
      assertEquals("(FW(eO+nTBPq", request2.getMethod());
      assertEquals(0L, request2.getPriority());
      assertNull(request2.getCharset());
      assertFalse(request2.isBinaryContent());
      assertEquals("UQp5*^_6A~(\"]H4h", request2.getUrl());
      assertSame(request0, request2);
      assertSame(request0, request1);
      assertSame(request2, request1);
      assertSame(request2, request0);
      
      requestArray0[2] = request2;
      Request request3 = request0.setBinaryContent(true);
      assertNotNull(request3);
      assertTrue(request0.isBinaryContent());
      assertNull(request0.getCharset());
      assertEquals("UQp5*^_6A~(\"]H4h", request0.getUrl());
      assertEquals(0L, request0.getPriority());
      assertEquals("(FW(eO+nTBPq", request0.getMethod());
      assertEquals("UQp5*^_6A~(\"]H4h", request3.getUrl());
      assertEquals(0L, request3.getPriority());
      assertEquals("(FW(eO+nTBPq", request3.getMethod());
      assertNull(request3.getCharset());
      assertTrue(request3.isBinaryContent());
      assertSame(request0, request2);
      assertSame(request0, request1);
      assertSame(request0, request3);
      assertSame(request3, request2);
      assertSame(request3, request1);
      assertSame(request3, request0);
      
      requestArray0[3] = request3;
      // Undeclared exception!
      try { 
        spider2.addRequest(requestArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f7S5me");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, (String) null);
      assertNotNull(phantomJSDownloader0);
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      assertNotNull(spider1);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      assertNotNull(resultItemsCollectorPipeline0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Spider spider2 = spider1.addPipeline(resultItemsCollectorPipeline0);
      assertNotNull(spider2);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      
      Spider spider3 = spider0.clearPipeline();
      assertNotNull(spider3);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isSpawnUrl());
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider3, spider2);
      assertSame(spider3, spider0);
      assertSame(spider3, spider1);
      
      Request request0 = new Request("f7S5me");
      assertNotNull(request0);
      assertNull(request0.getMethod());
      assertNull(request0.getCharset());
      assertEquals("f7S5me", request0.getUrl());
      assertEquals(0L, request0.getPriority());
      assertFalse(request0.isBinaryContent());
      
      Request request1 = request0.setBinaryContent(true);
      assertNotNull(request1);
      assertNull(request0.getMethod());
      assertTrue(request0.isBinaryContent());
      assertNull(request0.getCharset());
      assertEquals("f7S5me", request0.getUrl());
      assertEquals(0L, request0.getPriority());
      assertEquals("f7S5me", request1.getUrl());
      assertNull(request1.getMethod());
      assertNull(request1.getCharset());
      assertTrue(request1.isBinaryContent());
      assertEquals(0L, request1.getPriority());
      assertSame(request0, request1);
      assertSame(request1, request0);
      
      Request request2 = request1.setPriority(2);
      assertNotNull(request2);
      assertNull(request0.getMethod());
      assertEquals(2L, request0.getPriority());
      assertTrue(request0.isBinaryContent());
      assertNull(request0.getCharset());
      assertEquals("f7S5me", request0.getUrl());
      assertEquals("f7S5me", request1.getUrl());
      assertNull(request1.getMethod());
      assertNull(request1.getCharset());
      assertTrue(request1.isBinaryContent());
      assertEquals(2L, request1.getPriority());
      assertEquals(2L, request2.getPriority());
      assertEquals("f7S5me", request2.getUrl());
      assertNull(request2.getCharset());
      assertTrue(request2.isBinaryContent());
      assertNull(request2.getMethod());
      assertSame(request0, request2);
      assertSame(request0, request1);
      assertSame(request1, request2);
      assertSame(request1, request0);
      assertSame(request2, request0);
      assertSame(request2, request1);
      
      Request request3 = request1.setCharset((String) null);
      assertNotNull(request3);
      assertNull(request0.getMethod());
      assertEquals(2L, request0.getPriority());
      assertTrue(request0.isBinaryContent());
      assertNull(request0.getCharset());
      assertEquals("f7S5me", request0.getUrl());
      assertEquals("f7S5me", request1.getUrl());
      assertNull(request1.getMethod());
      assertNull(request1.getCharset());
      assertTrue(request1.isBinaryContent());
      assertEquals(2L, request1.getPriority());
      assertTrue(request3.isBinaryContent());
      assertNull(request3.getMethod());
      assertNull(request3.getCharset());
      assertEquals(2L, request3.getPriority());
      assertEquals("f7S5me", request3.getUrl());
      assertSame(request0, request2);
      assertSame(request0, request3);
      assertSame(request0, request1);
      assertSame(request1, request2);
      assertSame(request1, request3);
      assertSame(request1, request0);
      assertSame(request3, request0);
      assertSame(request3, request2);
      assertSame(request3, request1);
      
      Request request4 = request0.setUrl("_cycle_tried_times");
      assertNotNull(request4);
      assertEquals("_cycle_tried_times", request0.getUrl());
      assertNull(request0.getMethod());
      assertEquals(2L, request0.getPriority());
      assertTrue(request0.isBinaryContent());
      assertNull(request0.getCharset());
      assertEquals("_cycle_tried_times", request4.getUrl());
      assertNull(request4.getMethod());
      assertNull(request4.getCharset());
      assertTrue(request4.isBinaryContent());
      assertEquals(2L, request4.getPriority());
      assertSame(request0, request2);
      assertSame(request0, request3);
      assertSame(request0, request4);
      assertSame(request0, request1);
      assertSame(request4, request3);
      assertSame(request4, request2);
      assertSame(request4, request0);
      assertSame(request4, request1);
      
      // Undeclared exception!
      try { 
        spider2.onError(request3);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("E");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Spider spider1 = spider0.setPipelines(linkedList0);
      assertNotNull(spider1);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(0, linkedList0.size());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      Spider spider2 = spider1.setExitWhenComplete(false);
      assertNotNull(spider2);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(0, linkedList0.size());
      assertTrue(spider1.isSpawnUrl());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      
      Spider spider3 = spider2.setUUID("E");
      assertNotNull(spider3);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(0, linkedList0.size());
      assertTrue(spider1.isSpawnUrl());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertFalse(spider3.isExitWhenComplete());
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider3);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertSame(spider2, spider3);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      
      Spider spider4 = spider3.setSpawnUrl(true);
      assertNotNull(spider4);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(0, linkedList0.size());
      assertTrue(spider1.isSpawnUrl());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertFalse(spider3.isExitWhenComplete());
      assertTrue(spider4.isSpawnUrl());
      assertEquals(0L, spider4.getPageCount());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertFalse(spider4.isExitWhenComplete());
      assertSame(spider0, spider3);
      assertSame(spider0, spider4);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider4);
      assertSame(spider1, spider3);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertSame(spider2, spider4);
      assertSame(spider2, spider3);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      assertSame(spider3, spider4);
      assertSame(spider3, spider2);
      assertSame(spider4, spider2);
      assertSame(spider4, spider1);
      assertSame(spider4, spider3);
      assertSame(spider4, spider0);
      
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      assertNotNull(consolePipeline0);
      
      Spider spider5 = spider2.addPipeline(consolePipeline0);
      assertNotNull(spider5);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(1, linkedList0.size());
      assertTrue(spider1.isSpawnUrl());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider5.getPageCount());
      assertFalse(spider5.isExitWhenComplete());
      assertTrue(spider5.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertSame(spider0, spider3);
      assertSame(spider0, spider4);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider5);
      assertSame(spider1, spider4);
      assertSame(spider1, spider3);
      assertSame(spider1, spider0);
      assertSame(spider1, spider5);
      assertSame(spider1, spider2);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertSame(spider2, spider4);
      assertSame(spider2, spider3);
      assertSame(spider2, spider5);
      assertSame(spider5, spider2);
      assertSame(spider5, spider4);
      assertSame(spider5, spider0);
      assertSame(spider5, spider1);
      assertSame(spider5, spider3);
      
      QueueScheduler queueScheduler0 = new QueueScheduler();
      assertNotNull(queueScheduler0);
      
      Spider spider6 = spider4.setScheduler(queueScheduler0);
      assertNotNull(spider6);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(1, linkedList0.size());
      assertTrue(spider1.isSpawnUrl());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertFalse(spider3.isExitWhenComplete());
      assertTrue(spider4.isSpawnUrl());
      assertEquals(0L, spider4.getPageCount());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertFalse(spider4.isExitWhenComplete());
      assertEquals(0L, spider6.getPageCount());
      assertFalse(spider6.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider6.getStatus());
      assertTrue(spider6.isSpawnUrl());
      assertSame(spider0, spider3);
      assertSame(spider0, spider4);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider6);
      assertSame(spider0, spider5);
      assertSame(spider1, spider4);
      assertSame(spider1, spider3);
      assertSame(spider1, spider6);
      assertSame(spider1, spider0);
      assertSame(spider1, spider5);
      assertSame(spider1, spider2);
      assertSame(spider2, spider6);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertSame(spider2, spider4);
      assertSame(spider2, spider3);
      assertSame(spider2, spider5);
      assertSame(spider3, spider5);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      assertSame(spider3, spider6);
      assertSame(spider3, spider4);
      assertSame(spider3, spider2);
      assertSame(spider4, spider2);
      assertSame(spider4, spider1);
      assertSame(spider4, spider5);
      assertSame(spider4, spider3);
      assertSame(spider4, spider6);
      assertSame(spider4, spider0);
      assertSame(spider6, spider5);
      assertSame(spider6, spider2);
      assertSame(spider6, spider4);
      assertSame(spider6, spider3);
      assertSame(spider6, spider0);
      assertSame(spider6, spider1);
      
      Spider spider7 = spider0.setScheduler(queueScheduler0);
      assertNotNull(spider7);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider7.getStatus());
      assertTrue(spider7.isSpawnUrl());
      assertEquals(0L, spider7.getPageCount());
      assertFalse(spider7.isExitWhenComplete());
      assertSame(spider0, spider3);
      assertSame(spider0, spider4);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider6);
      assertSame(spider0, spider7);
      assertSame(spider0, spider5);
      assertSame(spider7, spider3);
      assertSame(spider7, spider1);
      assertSame(spider7, spider5);
      assertSame(spider7, spider2);
      assertSame(spider7, spider0);
      assertSame(spider7, spider6);
      assertSame(spider7, spider4);
      
      Site site0 = spider7.getSite();
      assertNotNull(site0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider7.getStatus());
      assertTrue(spider7.isSpawnUrl());
      assertEquals(0L, spider7.getPageCount());
      assertFalse(spider7.isExitWhenComplete());
      assertEquals(5000, site0.getTimeOut());
      assertEquals(1000, site0.getRetrySleepTime());
      assertEquals(0, site0.getCycleRetryTimes());
      assertTrue(site0.isUseGzip());
      assertEquals(5000, site0.getSleepTime());
      assertNull(site0.getCharset());
      assertNull(site0.getUserAgent());
      assertFalse(site0.isDisableCookieManagement());
      assertEquals(0, site0.getRetryTimes());
      assertNull(site0.getDomain());
      assertSame(spider0, spider3);
      assertSame(spider0, spider4);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider6);
      assertSame(spider0, spider7);
      assertSame(spider0, spider5);
      assertSame(spider7, spider3);
      assertSame(spider7, spider1);
      assertSame(spider7, spider5);
      assertSame(spider7, spider2);
      assertSame(spider7, spider0);
      assertSame(spider7, spider6);
      assertSame(spider7, spider4);
      
      Site site1 = site0.setUseGzip(false);
      assertNotNull(site1);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider7.getStatus());
      assertTrue(spider7.isSpawnUrl());
      assertEquals(0L, spider7.getPageCount());
      assertFalse(spider7.isExitWhenComplete());
      assertEquals(5000, site0.getTimeOut());
      assertEquals(1000, site0.getRetrySleepTime());
      assertEquals(0, site0.getCycleRetryTimes());
      assertEquals(5000, site0.getSleepTime());
      assertNull(site0.getCharset());
      assertFalse(site0.isUseGzip());
      assertNull(site0.getUserAgent());
      assertFalse(site0.isDisableCookieManagement());
      assertEquals(0, site0.getRetryTimes());
      assertNull(site0.getDomain());
      assertEquals(5000, site1.getSleepTime());
      assertNull(site1.getUserAgent());
      assertNull(site1.getCharset());
      assertEquals(1000, site1.getRetrySleepTime());
      assertEquals(0, site1.getRetryTimes());
      assertEquals(5000, site1.getTimeOut());
      assertNull(site1.getDomain());
      assertFalse(site1.isDisableCookieManagement());
      assertEquals(0, site1.getCycleRetryTimes());
      assertFalse(site1.isUseGzip());
      assertSame(spider0, spider3);
      assertSame(spider0, spider4);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider6);
      assertSame(spider0, spider7);
      assertSame(spider0, spider5);
      assertSame(spider7, spider3);
      assertSame(spider7, spider1);
      assertSame(spider7, spider5);
      assertSame(spider7, spider2);
      assertSame(spider7, spider0);
      assertSame(spider7, spider6);
      assertSame(spider7, spider4);
      assertSame(site0, site1);
      assertSame(site1, site0);
      
      Site site2 = site1.setUserAgent("");
      assertNotNull(site2);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider7.getStatus());
      assertTrue(spider7.isSpawnUrl());
      assertEquals(0L, spider7.getPageCount());
      assertFalse(spider7.isExitWhenComplete());
      assertEquals(5000, site0.getTimeOut());
      assertEquals(1000, site0.getRetrySleepTime());
      assertEquals(0, site0.getCycleRetryTimes());
      assertEquals(5000, site0.getSleepTime());
      assertNull(site0.getCharset());
      assertFalse(site0.isUseGzip());
      assertEquals("", site0.getUserAgent());
      assertFalse(site0.isDisableCookieManagement());
      assertEquals(0, site0.getRetryTimes());
      assertNull(site0.getDomain());
      assertEquals(5000, site1.getSleepTime());
      assertEquals("", site1.getUserAgent());
      assertNull(site1.getCharset());
      assertEquals(1000, site1.getRetrySleepTime());
      assertEquals(0, site1.getRetryTimes());
      assertEquals(5000, site1.getTimeOut());
      assertNull(site1.getDomain());
      assertFalse(site1.isDisableCookieManagement());
      assertEquals(0, site1.getCycleRetryTimes());
      assertFalse(site1.isUseGzip());
      assertEquals(5000, site2.getTimeOut());
      assertNull(site2.getDomain());
      assertFalse(site2.isDisableCookieManagement());
      assertEquals(0, site2.getCycleRetryTimes());
      assertFalse(site2.isUseGzip());
      assertEquals(5000, site2.getSleepTime());
      assertEquals("", site2.getUserAgent());
      assertEquals(0, site2.getRetryTimes());
      assertNull(site2.getCharset());
      assertEquals(1000, site2.getRetrySleepTime());
      assertSame(spider0, spider3);
      assertSame(spider0, spider4);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider6);
      assertSame(spider0, spider7);
      assertSame(spider0, spider5);
      assertSame(spider7, spider3);
      assertSame(spider7, spider1);
      assertSame(spider7, spider5);
      assertSame(spider7, spider2);
      assertSame(spider7, spider0);
      assertSame(spider7, spider6);
      assertSame(spider7, spider4);
      assertSame(site0, site2);
      assertSame(site0, site1);
      assertSame(site1, site2);
      assertSame(site1, site0);
      assertSame(site2, site0);
      assertSame(site2, site1);
      
      Site site3 = site2.setSleepTime((-1537));
      assertNotNull(site3);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider7.getStatus());
      assertTrue(spider7.isSpawnUrl());
      assertEquals(0L, spider7.getPageCount());
      assertFalse(spider7.isExitWhenComplete());
      assertEquals(5000, site0.getTimeOut());
      assertEquals(1000, site0.getRetrySleepTime());
      assertEquals(0, site0.getCycleRetryTimes());
      assertEquals((-1537), site0.getSleepTime());
      assertNull(site0.getCharset());
      assertFalse(site0.isUseGzip());
      assertEquals("", site0.getUserAgent());
      assertFalse(site0.isDisableCookieManagement());
      assertEquals(0, site0.getRetryTimes());
      assertNull(site0.getDomain());
      assertEquals("", site1.getUserAgent());
      assertNull(site1.getCharset());
      assertEquals(1000, site1.getRetrySleepTime());
      assertEquals(0, site1.getRetryTimes());
      assertEquals(5000, site1.getTimeOut());
      assertNull(site1.getDomain());
      assertFalse(site1.isDisableCookieManagement());
      assertEquals(0, site1.getCycleRetryTimes());
      assertEquals((-1537), site1.getSleepTime());
      assertFalse(site1.isUseGzip());
      assertEquals(5000, site2.getTimeOut());
      assertNull(site2.getDomain());
      assertFalse(site2.isDisableCookieManagement());
      assertEquals(0, site2.getCycleRetryTimes());
      assertEquals((-1537), site2.getSleepTime());
      assertFalse(site2.isUseGzip());
      assertEquals("", site2.getUserAgent());
      assertEquals(0, site2.getRetryTimes());
      assertNull(site2.getCharset());
      assertEquals(1000, site2.getRetrySleepTime());
      assertNull(site3.getDomain());
      assertEquals(1000, site3.getRetrySleepTime());
      assertEquals(0, site3.getRetryTimes());
      assertEquals(5000, site3.getTimeOut());
      assertNull(site3.getCharset());
      assertEquals("", site3.getUserAgent());
      assertFalse(site3.isDisableCookieManagement());
      assertEquals(0, site3.getCycleRetryTimes());
      assertEquals((-1537), site3.getSleepTime());
      assertFalse(site3.isUseGzip());
      assertSame(spider0, spider3);
      assertSame(spider0, spider4);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider6);
      assertSame(spider0, spider7);
      assertSame(spider0, spider5);
      assertSame(spider7, spider3);
      assertSame(spider7, spider1);
      assertSame(spider7, spider5);
      assertSame(spider7, spider2);
      assertSame(spider7, spider0);
      assertSame(spider7, spider6);
      assertSame(spider7, spider4);
      assertSame(site0, site2);
      assertSame(site0, site3);
      assertSame(site0, site1);
      assertSame(site1, site3);
      assertSame(site1, site2);
      assertSame(site1, site0);
      assertSame(site2, site0);
      assertSame(site2, site1);
      assertSame(site2, site3);
      assertSame(site3, site2);
      assertSame(site3, site1);
      assertSame(site3, site0);
      
      Site site4 = site3.addCookie("", "", "us.codecraft.webmagic.Spider$1");
      assertNotNull(site4);
      assertFalse(site4.isUseGzip());
      assertEquals("", site4.getUserAgent());
      assertNull(site4.getCharset());
      assertEquals(1000, site4.getRetrySleepTime());
      assertEquals(0, site4.getRetryTimes());
      assertEquals(5000, site4.getTimeOut());
      assertNull(site4.getDomain());
      assertFalse(site4.isDisableCookieManagement());
      assertEquals(0, site4.getCycleRetryTimes());
      assertEquals((-1537), site4.getSleepTime());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider7.getStatus());
      assertTrue(spider7.isSpawnUrl());
      assertEquals(0L, spider7.getPageCount());
      assertFalse(spider7.isExitWhenComplete());
      assertEquals(5000, site0.getTimeOut());
      assertEquals(1000, site0.getRetrySleepTime());
      assertEquals(0, site0.getCycleRetryTimes());
      assertEquals((-1537), site0.getSleepTime());
      assertNull(site0.getCharset());
      assertFalse(site0.isUseGzip());
      assertEquals("", site0.getUserAgent());
      assertFalse(site0.isDisableCookieManagement());
      assertEquals(0, site0.getRetryTimes());
      assertNull(site0.getDomain());
      assertEquals("", site1.getUserAgent());
      assertNull(site1.getCharset());
      assertEquals(1000, site1.getRetrySleepTime());
      assertEquals(0, site1.getRetryTimes());
      assertEquals(5000, site1.getTimeOut());
      assertNull(site1.getDomain());
      assertFalse(site1.isDisableCookieManagement());
      assertEquals(0, site1.getCycleRetryTimes());
      assertEquals((-1537), site1.getSleepTime());
      assertFalse(site1.isUseGzip());
      assertEquals(5000, site2.getTimeOut());
      assertNull(site2.getDomain());
      assertFalse(site2.isDisableCookieManagement());
      assertEquals(0, site2.getCycleRetryTimes());
      assertEquals((-1537), site2.getSleepTime());
      assertFalse(site2.isUseGzip());
      assertEquals("", site2.getUserAgent());
      assertEquals(0, site2.getRetryTimes());
      assertNull(site2.getCharset());
      assertEquals(1000, site2.getRetrySleepTime());
      assertNull(site3.getDomain());
      assertEquals(1000, site3.getRetrySleepTime());
      assertEquals(0, site3.getRetryTimes());
      assertEquals(5000, site3.getTimeOut());
      assertNull(site3.getCharset());
      assertEquals("", site3.getUserAgent());
      assertFalse(site3.isDisableCookieManagement());
      assertEquals(0, site3.getCycleRetryTimes());
      assertEquals((-1537), site3.getSleepTime());
      assertFalse(site3.isUseGzip());
      assertSame(site4, site1);
      assertSame(site4, site2);
      assertSame(site4, site3);
      assertSame(site4, site0);
      assertSame(spider0, spider3);
      assertSame(spider0, spider4);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider6);
      assertSame(spider0, spider7);
      assertSame(spider0, spider5);
      assertSame(spider7, spider3);
      assertSame(spider7, spider1);
      assertSame(spider7, spider5);
      assertSame(spider7, spider2);
      assertSame(spider7, spider0);
      assertSame(spider7, spider6);
      assertSame(spider7, spider4);
      assertSame(site0, site2);
      assertSame(site0, site3);
      assertSame(site0, site4);
      assertSame(site0, site1);
      assertSame(site1, site3);
      assertSame(site1, site4);
      assertSame(site1, site2);
      assertSame(site1, site0);
      assertSame(site2, site0);
      assertSame(site2, site1);
      assertSame(site2, site3);
      assertSame(site2, site4);
      assertSame(site3, site2);
      assertSame(site3, site1);
      assertSame(site3, site4);
      assertSame(site3, site0);
      
      spider7.site = site4;
      assertFalse(site4.isUseGzip());
      assertEquals("", site4.getUserAgent());
      assertNull(site4.getCharset());
      assertEquals(1000, site4.getRetrySleepTime());
      assertEquals(0, site4.getRetryTimes());
      assertEquals(5000, site4.getTimeOut());
      assertNull(site4.getDomain());
      assertFalse(site4.isDisableCookieManagement());
      assertEquals(0, site4.getCycleRetryTimes());
      assertEquals((-1537), site4.getSleepTime());
      assertFalse(spider7.site.isDisableCookieManagement());
      assertEquals(0, spider7.site.getRetryTimes());
      assertEquals((-1537), spider7.site.getSleepTime());
      assertFalse(spider7.site.isUseGzip());
      assertEquals(0, spider7.site.getCycleRetryTimes());
      assertEquals("", spider7.site.getUserAgent());
      assertNull(spider7.site.getCharset());
      assertEquals(5000, spider7.site.getTimeOut());
      assertEquals(1000, spider7.site.getRetrySleepTime());
      assertNull(spider7.site.getDomain());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider7.getStatus());
      assertTrue(spider7.isSpawnUrl());
      assertEquals(0L, spider7.getPageCount());
      assertFalse(spider7.isExitWhenComplete());
      assertEquals(5000, site0.getTimeOut());
      assertEquals(1000, site0.getRetrySleepTime());
      assertEquals(0, site0.getCycleRetryTimes());
      assertEquals((-1537), site0.getSleepTime());
      assertNull(site0.getCharset());
      assertFalse(site0.isUseGzip());
      assertEquals("", site0.getUserAgent());
      assertFalse(site0.isDisableCookieManagement());
      assertEquals(0, site0.getRetryTimes());
      assertNull(site0.getDomain());
      assertEquals("", site1.getUserAgent());
      assertNull(site1.getCharset());
      assertEquals(1000, site1.getRetrySleepTime());
      assertEquals(0, site1.getRetryTimes());
      assertEquals(5000, site1.getTimeOut());
      assertNull(site1.getDomain());
      assertFalse(site1.isDisableCookieManagement());
      assertEquals(0, site1.getCycleRetryTimes());
      assertEquals((-1537), site1.getSleepTime());
      assertFalse(site1.isUseGzip());
      assertEquals(5000, site2.getTimeOut());
      assertNull(site2.getDomain());
      assertFalse(site2.isDisableCookieManagement());
      assertEquals(0, site2.getCycleRetryTimes());
      assertEquals((-1537), site2.getSleepTime());
      assertFalse(site2.isUseGzip());
      assertEquals("", site2.getUserAgent());
      assertEquals(0, site2.getRetryTimes());
      assertNull(site2.getCharset());
      assertEquals(1000, site2.getRetrySleepTime());
      assertNull(site3.getDomain());
      assertEquals(1000, site3.getRetrySleepTime());
      assertEquals(0, site3.getRetryTimes());
      assertEquals(5000, site3.getTimeOut());
      assertNull(site3.getCharset());
      assertEquals("", site3.getUserAgent());
      assertFalse(site3.isDisableCookieManagement());
      assertEquals(0, site3.getCycleRetryTimes());
      assertEquals((-1537), site3.getSleepTime());
      assertFalse(site3.isUseGzip());
      
      spider6.stop();
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(1, linkedList0.size());
      assertTrue(spider1.isSpawnUrl());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertFalse(spider3.isExitWhenComplete());
      assertTrue(spider4.isSpawnUrl());
      assertEquals(0L, spider4.getPageCount());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertFalse(spider4.isExitWhenComplete());
      assertEquals(0L, spider6.getPageCount());
      assertFalse(spider6.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider6.getStatus());
      assertTrue(spider6.isSpawnUrl());
      assertSame(spider0, spider3);
      assertSame(spider0, spider4);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider6);
      assertSame(spider0, spider7);
      assertSame(spider0, spider5);
      assertSame(spider1, spider4);
      assertSame(spider1, spider3);
      assertSame(spider1, spider6);
      assertSame(spider1, spider0);
      assertSame(spider1, spider5);
      assertSame(spider1, spider2);
      assertSame(spider1, spider7);
      assertSame(spider2, spider6);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertSame(spider2, spider4);
      assertSame(spider2, spider3);
      assertSame(spider2, spider5);
      assertSame(spider2, spider7);
      assertSame(spider3, spider7);
      assertSame(spider3, spider5);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      assertSame(spider3, spider6);
      assertSame(spider3, spider4);
      assertSame(spider3, spider2);
      assertSame(spider4, spider2);
      assertSame(spider4, spider1);
      assertSame(spider4, spider5);
      assertSame(spider4, spider7);
      assertSame(spider4, spider3);
      assertSame(spider4, spider6);
      assertSame(spider4, spider0);
      assertSame(spider6, spider5);
      assertSame(spider6, spider2);
      assertSame(spider6, spider7);
      assertSame(spider6, spider4);
      assertSame(spider6, spider3);
      assertSame(spider6, spider0);
      assertSame(spider6, spider1);
      
      // Undeclared exception!
      try { 
        spider4.initComponent();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("E");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertNotNull(spider0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("init cache file ");
      assertNotNull(fileCacheQueueScheduler0);
      
      Spider spider1 = spider0.setScheduler(fileCacheQueueScheduler0);
      assertNotNull(spider1);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      Spider spider2 = spider1.clearPipeline();
      assertNotNull(spider2);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      
      Request request0 = new Request(" error");
      assertNotNull(request0);
      assertEquals(" error", request0.getUrl());
      assertNull(request0.getMethod());
      assertNull(request0.getCharset());
      assertEquals(0L, request0.getPriority());
      assertFalse(request0.isBinaryContent());
      
      Request request1 = request0.setPriority((-1171L));
      assertNotNull(request1);
      assertEquals(" error", request0.getUrl());
      assertNull(request0.getMethod());
      assertNull(request0.getCharset());
      assertEquals((-1171L), request0.getPriority());
      assertFalse(request0.isBinaryContent());
      assertFalse(request1.isBinaryContent());
      assertNull(request1.getCharset());
      assertEquals(" error", request1.getUrl());
      assertEquals((-1171L), request1.getPriority());
      assertNull(request1.getMethod());
      assertSame(request0, request1);
      assertSame(request1, request0);
      
      spider1.stop();
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      
      boolean boolean0 = spider2.isSpawnUrl();
      assertTrue(boolean0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      
      // Undeclared exception!
      try { 
        spider0.extractAndAddRequests((Page) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, (String) null);
      assertNotNull(phantomJSDownloader0);
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      assertNotNull(synchronousQueue0);
      
      Page page0 = new Page();
      assertNotNull(page0);
      assertTrue(page0.isDownloadSuccess());
      assertNull(page0.getCharset());
      assertEquals(200, page0.getStatusCode());
      assertNull(page0.getRawText());
      
      String[] stringArray0 = new String[1];
      String string0 = ":2/:Huaim0cwPq";
      stringArray0[0] = ":2/:Huaim0cwPq";
      Page page1 = page0.setRawText(":2/:Huaim0cwPq");
      assertNotNull(page1);
      assertTrue(page0.isDownloadSuccess());
      assertNull(page0.getCharset());
      assertEquals(200, page0.getStatusCode());
      assertEquals(":2/:Huaim0cwPq", page0.getRawText());
      assertEquals(":2/:Huaim0cwPq", page1.getRawText());
      assertEquals(200, page1.getStatusCode());
      assertNull(page1.getCharset());
      assertTrue(page1.isDownloadSuccess());
      assertSame(page0, page1);
      assertSame(page1, page0);
      
      QueueScheduler queueScheduler0 = new QueueScheduler();
      assertNotNull(queueScheduler0);
      
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      assertNotNull(consolePipeline0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(9);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      int int0 = 220;
      Spider.Status spider_Status0 = Spider.Status.fromValue(220);
      assertEquals(Spider.Status.Init, spider_Status0);
      
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Bc-%R>JG^j[d6");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      
      Spider spider1 = new Spider(simplePageProcessor0);
      assertFalse(spider1.equals((Object)spider0));
      assertNotNull(spider1);
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      
      // Undeclared exception!
      try { 
        spider1.thread((-852));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f7S5me");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Spider spider1 = spider0.clearPipeline();
      assertNotNull(spider1);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      assertNotNull(forkJoinPool_ForkJoinWorkerThreadFactory0);
      
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      spider1.stop();
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f7S5me");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      
      String string0 = null;
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, (String) null);
      assertNotNull(phantomJSDownloader0);
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      assertNotNull(spider1);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      assertNotNull(resultItemsCollectorPipeline0);
      
      Spider spider2 = spider1.addPipeline(resultItemsCollectorPipeline0);
      assertNotNull(spider2);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      
      // Undeclared exception!
      try { 
        spider2.thread(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f7S5me");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, (String) null);
      assertNotNull(phantomJSDownloader0);
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      assertNotNull(spider1);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      assertNotNull(resultItemsCollectorPipeline0);
      
      QueueScheduler queueScheduler0 = new QueueScheduler();
      assertNotNull(queueScheduler0);
      
      Spider.Status spider_Status0 = Spider.Status.fromValue(220);
      assertEquals(Spider.Status.Init, spider_Status0);
      
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("f7S5me");
      assertFalse(simplePageProcessor1.equals((Object)simplePageProcessor0));
      assertNotNull(simplePageProcessor1);
      
      Spider spider2 = spider0.setUUID("f7S5me");
      assertFalse(simplePageProcessor0.equals((Object)simplePageProcessor1));
      assertNotNull(spider2);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertNotSame(simplePageProcessor0, simplePageProcessor1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      
      Spider spider3 = spider2.setSpawnUrl(true);
      assertFalse(simplePageProcessor0.equals((Object)simplePageProcessor1));
      assertNotNull(spider3);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isExitWhenComplete());
      assertNotSame(simplePageProcessor0, simplePageProcessor1);
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider2, spider0);
      assertSame(spider2, spider3);
      assertSame(spider2, spider1);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider1);
      
      QueueScheduler queueScheduler1 = new QueueScheduler();
      assertFalse(queueScheduler1.equals((Object)queueScheduler0));
      assertNotNull(queueScheduler1);
      
      QueueScheduler queueScheduler2 = new QueueScheduler();
      assertFalse(queueScheduler2.equals((Object)queueScheduler0));
      assertFalse(queueScheduler2.equals((Object)queueScheduler1));
      assertNotNull(queueScheduler2);
      
      Spider spider4 = spider2.setSpawnUrl(false);
      assertFalse(simplePageProcessor0.equals((Object)simplePageProcessor1));
      assertNotNull(spider4);
      assertFalse(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertFalse(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertFalse(spider4.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(0L, spider4.getPageCount());
      assertNotSame(simplePageProcessor0, simplePageProcessor1);
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider4);
      assertSame(spider0, spider1);
      assertSame(spider2, spider0);
      assertSame(spider2, spider4);
      assertSame(spider2, spider3);
      assertSame(spider2, spider1);
      assertSame(spider4, spider2);
      assertSame(spider4, spider1);
      assertSame(spider4, spider3);
      assertSame(spider4, spider0);
      
      Spider spider5 = spider4.setScheduler(queueScheduler1);
      assertFalse(simplePageProcessor0.equals((Object)simplePageProcessor1));
      assertFalse(queueScheduler1.equals((Object)queueScheduler0));
      assertFalse(queueScheduler1.equals((Object)queueScheduler2));
      assertNotNull(spider5);
      assertFalse(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertFalse(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertFalse(spider4.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(0L, spider4.getPageCount());
      assertFalse(spider5.isSpawnUrl());
      assertTrue(spider5.isExitWhenComplete());
      assertEquals(0L, spider5.getPageCount());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertNotSame(simplePageProcessor0, simplePageProcessor1);
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider4);
      assertSame(spider0, spider5);
      assertSame(spider0, spider1);
      assertSame(spider2, spider0);
      assertSame(spider2, spider5);
      assertSame(spider2, spider4);
      assertSame(spider2, spider3);
      assertSame(spider2, spider1);
      assertNotSame(queueScheduler1, queueScheduler0);
      assertNotSame(queueScheduler1, queueScheduler2);
      assertSame(spider4, spider2);
      assertSame(spider4, spider5);
      assertSame(spider4, spider1);
      assertSame(spider4, spider3);
      assertSame(spider4, spider0);
      assertSame(spider5, spider1);
      assertSame(spider5, spider4);
      assertSame(spider5, spider0);
      assertSame(spider5, spider3);
      assertSame(spider5, spider2);
      
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Spider spider6 = spider0.setUUID((String) null);
      assertFalse(simplePageProcessor0.equals((Object)simplePageProcessor1));
      assertNotNull(spider6);
      assertFalse(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider6.isExitWhenComplete());
      assertFalse(spider6.isSpawnUrl());
      assertEquals(0L, spider6.getPageCount());
      assertEquals(Spider.Status.Init, spider6.getStatus());
      assertNotSame(simplePageProcessor0, simplePageProcessor1);
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider6);
      assertSame(spider0, spider4);
      assertSame(spider0, spider5);
      assertSame(spider0, spider1);
      assertSame(spider6, spider1);
      assertSame(spider6, spider4);
      assertSame(spider6, spider2);
      assertSame(spider6, spider5);
      assertSame(spider6, spider0);
      assertSame(spider6, spider3);
      
      spider6.stop();
      assertFalse(simplePageProcessor0.equals((Object)simplePageProcessor1));
      assertFalse(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider6.isExitWhenComplete());
      assertFalse(spider6.isSpawnUrl());
      assertEquals(0L, spider6.getPageCount());
      assertEquals(Spider.Status.Init, spider6.getStatus());
      assertNotSame(simplePageProcessor0, simplePageProcessor1);
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider6);
      assertSame(spider0, spider4);
      assertSame(spider0, spider5);
      assertSame(spider0, spider1);
      assertSame(spider6, spider1);
      assertSame(spider6, spider4);
      assertSame(spider6, spider2);
      assertSame(spider6, spider5);
      assertSame(spider6, spider0);
      assertSame(spider6, spider3);
      
      boolean boolean0 = spider5.isExitWhenComplete();
      assertFalse(simplePageProcessor0.equals((Object)simplePageProcessor1));
      assertFalse(queueScheduler1.equals((Object)queueScheduler0));
      assertFalse(queueScheduler1.equals((Object)queueScheduler2));
      assertTrue(boolean0);
      assertFalse(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertFalse(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertFalse(spider4.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(0L, spider4.getPageCount());
      assertFalse(spider5.isSpawnUrl());
      assertTrue(spider5.isExitWhenComplete());
      assertEquals(0L, spider5.getPageCount());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertNotSame(simplePageProcessor0, simplePageProcessor1);
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider6);
      assertSame(spider0, spider4);
      assertSame(spider0, spider5);
      assertSame(spider0, spider1);
      assertSame(spider2, spider0);
      assertSame(spider2, spider6);
      assertSame(spider2, spider5);
      assertSame(spider2, spider4);
      assertSame(spider2, spider3);
      assertSame(spider2, spider1);
      assertNotSame(queueScheduler1, queueScheduler0);
      assertNotSame(queueScheduler1, queueScheduler2);
      assertSame(spider4, spider2);
      assertSame(spider4, spider5);
      assertSame(spider4, spider1);
      assertSame(spider4, spider3);
      assertSame(spider4, spider0);
      assertSame(spider4, spider6);
      assertSame(spider5, spider1);
      assertSame(spider5, spider4);
      assertSame(spider5, spider6);
      assertSame(spider5, spider0);
      assertSame(spider5, spider3);
      assertSame(spider5, spider2);
      
      spider4.run();
      assertFalse(simplePageProcessor0.equals((Object)simplePageProcessor1));
      assertFalse(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertFalse(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Stopped, spider2.getStatus());
      assertFalse(spider4.isSpawnUrl());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(0L, spider4.getPageCount());
      assertEquals(Spider.Status.Stopped, spider4.getStatus());
      assertNotSame(simplePageProcessor0, simplePageProcessor1);
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider6);
      assertSame(spider0, spider4);
      assertSame(spider0, spider5);
      assertSame(spider0, spider1);
      assertSame(spider2, spider0);
      assertSame(spider2, spider6);
      assertSame(spider2, spider5);
      assertSame(spider2, spider4);
      assertSame(spider2, spider3);
      assertSame(spider2, spider1);
      assertSame(spider4, spider2);
      assertSame(spider4, spider5);
      assertSame(spider4, spider1);
      assertSame(spider4, spider3);
      assertSame(spider4, spider0);
      assertSame(spider4, spider6);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("E");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Spider spider1 = spider0.setPipelines(linkedList0);
      assertNotNull(spider1);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(0, linkedList0.size());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      boolean boolean0 = false;
      Spider spider2 = spider1.setExitWhenComplete(false);
      assertNotNull(spider2);
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(0, linkedList0.size());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertFalse(spider1.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertFalse(spider2.isExitWhenComplete());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Spider spider3 = spider2.setUUID("E");
      assertNotNull(spider3);
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(0, linkedList0.size());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertFalse(spider1.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertFalse(spider2.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertFalse(spider3.isExitWhenComplete());
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider3);
      assertSame(spider1, spider2);
      assertSame(spider2, spider3);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      
      spider0.setEmptySleepTime(3141);
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      
      Request request0 = new Request((String) null);
      assertNotNull(request0);
      assertEquals(0L, request0.getPriority());
      assertNull(request0.getMethod());
      assertNull(request0.getUrl());
      assertFalse(request0.isBinaryContent());
      assertNull(request0.getCharset());
      
      Request request1 = request0.setPriority((-260L));
      assertNotNull(request1);
      assertNull(request0.getMethod());
      assertNull(request0.getUrl());
      assertFalse(request0.isBinaryContent());
      assertNull(request0.getCharset());
      assertEquals((-260L), request0.getPriority());
      assertFalse(request1.isBinaryContent());
      assertNull(request1.getUrl());
      assertEquals((-260L), request1.getPriority());
      assertNull(request1.getMethod());
      assertNull(request1.getCharset());
      assertSame(request0, request1);
      assertSame(request1, request0);
      
      Request request2 = request1.setCharset("EDFnXayGeP?rT'frU=l");
      assertNotNull(request2);
      assertNull(request0.getMethod());
      assertNull(request0.getUrl());
      assertEquals("EDFnXayGeP?rT'frU=l", request0.getCharset());
      assertFalse(request0.isBinaryContent());
      assertEquals((-260L), request0.getPriority());
      assertFalse(request1.isBinaryContent());
      assertNull(request1.getUrl());
      assertEquals("EDFnXayGeP?rT'frU=l", request1.getCharset());
      assertEquals((-260L), request1.getPriority());
      assertNull(request1.getMethod());
      assertFalse(request2.isBinaryContent());
      assertEquals((-260L), request2.getPriority());
      assertEquals("EDFnXayGeP?rT'frU=l", request2.getCharset());
      assertNull(request2.getUrl());
      assertNull(request2.getMethod());
      assertSame(request0, request1);
      assertSame(request0, request2);
      assertSame(request1, request0);
      assertSame(request1, request2);
      assertSame(request2, request1);
      assertSame(request2, request0);
      
      Request request3 = request2.setUrl("EDFnXayGeP?rT'frU=l");
      assertNotNull(request3);
      assertNull(request0.getMethod());
      assertEquals("EDFnXayGeP?rT'frU=l", request0.getCharset());
      assertFalse(request0.isBinaryContent());
      assertEquals("EDFnXayGeP?rT'frU=l", request0.getUrl());
      assertEquals((-260L), request0.getPriority());
      assertFalse(request1.isBinaryContent());
      assertEquals("EDFnXayGeP?rT'frU=l", request1.getUrl());
      assertEquals("EDFnXayGeP?rT'frU=l", request1.getCharset());
      assertEquals((-260L), request1.getPriority());
      assertNull(request1.getMethod());
      assertFalse(request2.isBinaryContent());
      assertEquals("EDFnXayGeP?rT'frU=l", request2.getUrl());
      assertEquals((-260L), request2.getPriority());
      assertEquals("EDFnXayGeP?rT'frU=l", request2.getCharset());
      assertNull(request2.getMethod());
      assertEquals((-260L), request3.getPriority());
      assertNull(request3.getMethod());
      assertEquals("EDFnXayGeP?rT'frU=l", request3.getUrl());
      assertFalse(request3.isBinaryContent());
      assertEquals("EDFnXayGeP?rT'frU=l", request3.getCharset());
      assertSame(request0, request3);
      assertSame(request0, request1);
      assertSame(request0, request2);
      assertSame(request1, request0);
      assertSame(request1, request3);
      assertSame(request1, request2);
      assertSame(request2, request3);
      assertSame(request2, request1);
      assertSame(request2, request0);
      assertSame(request3, request2);
      assertSame(request3, request1);
      assertSame(request3, request0);
      
      // Undeclared exception!
      try { 
        spider0.onError(request2);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f7S5me");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      assertEquals(5, PriorityScheduler.INITIAL_CAPACITY);
      assertNotNull(priorityScheduler0);
      
      Spider spider1 = spider0.setScheduler(priorityScheduler0);
      assertEquals(5, PriorityScheduler.INITIAL_CAPACITY);
      assertNotNull(spider1);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      Request request0 = new Request("");
      assertNotNull(request0);
      assertNull(request0.getCharset());
      assertFalse(request0.isBinaryContent());
      assertNull(request0.getMethod());
      assertEquals("", request0.getUrl());
      assertEquals(0L, request0.getPriority());
      
      Request[] requestArray0 = new Request[0];
      Spider spider2 = spider0.addRequest(requestArray0);
      assertNotNull(spider2);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertEquals(0, requestArray0.length);
      
      spider2.stop();
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertEquals(0, requestArray0.length);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "f7S5me";
      stringArray0[1] = "f7S5me";
      stringArray0[2] = "f7S5me";
      stringArray0[3] = "f7S5me";
      // Undeclared exception!
      try { 
        spider1.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("fq7S5e");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Spider spider1 = spider0.setUUID("fq7S5e");
      assertNotNull(spider1);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      assertNotNull(forkJoinPool_ForkJoinWorkerThreadFactory0);
      
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Iterator<Pipeline> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      
      Spider spider2 = spider1.thread(1786);
      assertNotNull(spider2);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      
      // Undeclared exception!
      try { 
        spider1.initComponent();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f7S5me");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, (String) null);
      assertNotNull(phantomJSDownloader0);
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      assertNotNull(resultItemsCollectorPipeline0);
      
      spider0.stop();
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      
      spider0.stop();
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      
      boolean boolean0 = spider0.isSpawnUrl();
      assertTrue(boolean0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      
      // Undeclared exception!
      try { 
        spider0.extractAndAddRequests((Page) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, (String) null);
      assertNotNull(phantomJSDownloader0);
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      
      Page page0 = new Page();
      assertNotNull(page0);
      assertTrue(page0.isDownloadSuccess());
      assertNull(page0.getRawText());
      assertEquals(200, page0.getStatusCode());
      assertNull(page0.getCharset());
      
      Page page1 = page0.setRawText((String) null);
      assertNotNull(page1);
      assertTrue(page0.isDownloadSuccess());
      assertNull(page0.getRawText());
      assertEquals(200, page0.getStatusCode());
      assertNull(page0.getCharset());
      assertNull(page1.getCharset());
      assertTrue(page1.isDownloadSuccess());
      assertNull(page1.getRawText());
      assertEquals(200, page1.getStatusCode());
      assertSame(page0, page1);
      assertSame(page1, page0);
      
      QueueScheduler queueScheduler0 = new QueueScheduler();
      assertNotNull(queueScheduler0);
      
      Spider.Status spider_Status0 = Spider.Status.fromValue(220);
      assertEquals(Spider.Status.Init, spider_Status0);
      
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" ZS8VeYDg");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      
      Spider spider1 = spider0.setSpawnUrl(false);
      assertNotNull(spider1);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      QueueScheduler queueScheduler1 = new QueueScheduler();
      assertFalse(queueScheduler1.equals((Object)queueScheduler0));
      assertNotNull(queueScheduler1);
      
      QueueScheduler queueScheduler2 = new QueueScheduler();
      assertFalse(queueScheduler2.equals((Object)queueScheduler0));
      assertFalse(queueScheduler2.equals((Object)queueScheduler1));
      assertNotNull(queueScheduler2);
      
      Spider spider2 = spider0.setScheduler(queueScheduler2);
      assertFalse(queueScheduler2.equals((Object)queueScheduler0));
      assertFalse(queueScheduler2.equals((Object)queueScheduler1));
      assertNotNull(spider2);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertFalse(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertNotSame(queueScheduler2, queueScheduler0);
      assertNotSame(queueScheduler2, queueScheduler1);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      
      spider2.stop();
      assertFalse(queueScheduler2.equals((Object)queueScheduler0));
      assertFalse(queueScheduler2.equals((Object)queueScheduler1));
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertFalse(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertNotSame(queueScheduler2, queueScheduler0);
      assertNotSame(queueScheduler2, queueScheduler1);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      
      Spider spider3 = spider1.setScheduler(queueScheduler0);
      assertFalse(queueScheduler0.equals((Object)queueScheduler1));
      assertFalse(queueScheduler0.equals((Object)queueScheduler2));
      assertNotNull(spider3);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isExitWhenComplete());
      assertFalse(spider3.isSpawnUrl());
      assertNotSame(queueScheduler0, queueScheduler1);
      assertNotSame(queueScheduler0, queueScheduler2);
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider3);
      assertSame(spider3, spider0);
      assertSame(spider3, spider1);
      assertSame(spider3, spider2);
      
      Spider spider4 = spider1.downloader(phantomJSDownloader0);
      assertNotNull(spider4);
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertFalse(spider4.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isExitWhenComplete());
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider4);
      assertSame(spider0, spider1);
      assertSame(spider1, spider2);
      assertSame(spider1, spider4);
      assertSame(spider1, spider0);
      assertSame(spider1, spider3);
      assertSame(spider4, spider0);
      assertSame(spider4, spider2);
      assertSame(spider4, spider3);
      assertSame(spider4, spider1);
      
      List<Request> list0 = page1.getTargetRequests();
      assertNotNull(list0);
      assertTrue(page0.isDownloadSuccess());
      assertNull(page0.getRawText());
      assertEquals(200, page0.getStatusCode());
      assertNull(page0.getCharset());
      assertNull(page1.getCharset());
      assertTrue(page1.isDownloadSuccess());
      assertNull(page1.getRawText());
      assertEquals(200, page1.getStatusCode());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertSame(page0, page1);
      assertSame(page1, page0);
      
      Spider spider5 = spider4.startRequest(list0);
      assertNotNull(spider5);
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertTrue(page0.isDownloadSuccess());
      assertNull(page0.getRawText());
      assertEquals(200, page0.getStatusCode());
      assertNull(page0.getCharset());
      assertNull(page1.getCharset());
      assertTrue(page1.isDownloadSuccess());
      assertNull(page1.getRawText());
      assertEquals(200, page1.getStatusCode());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertFalse(spider4.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0L, spider5.getPageCount());
      assertTrue(spider5.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertFalse(spider5.isSpawnUrl());
      assertSame(page0, page1);
      assertSame(page1, page0);
      assertSame(spider0, spider3);
      assertSame(spider0, spider5);
      assertSame(spider0, spider2);
      assertSame(spider0, spider4);
      assertSame(spider0, spider1);
      assertSame(spider1, spider2);
      assertSame(spider1, spider4);
      assertSame(spider1, spider0);
      assertSame(spider1, spider3);
      assertSame(spider1, spider5);
      assertSame(spider4, spider0);
      assertSame(spider4, spider2);
      assertSame(spider4, spider3);
      assertSame(spider4, spider5);
      assertSame(spider4, spider1);
      assertSame(spider5, spider1);
      assertSame(spider5, spider3);
      assertSame(spider5, spider4);
      assertSame(spider5, spider0);
      assertSame(spider5, spider2);
      
      spider5.stop();
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertTrue(page0.isDownloadSuccess());
      assertNull(page0.getRawText());
      assertEquals(200, page0.getStatusCode());
      assertNull(page0.getCharset());
      assertNull(page1.getCharset());
      assertTrue(page1.isDownloadSuccess());
      assertNull(page1.getRawText());
      assertEquals(200, page1.getStatusCode());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertFalse(spider4.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0L, spider5.getPageCount());
      assertTrue(spider5.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertFalse(spider5.isSpawnUrl());
      assertSame(page0, page1);
      assertSame(page1, page0);
      assertSame(spider0, spider3);
      assertSame(spider0, spider5);
      assertSame(spider0, spider2);
      assertSame(spider0, spider4);
      assertSame(spider0, spider1);
      assertSame(spider1, spider2);
      assertSame(spider1, spider4);
      assertSame(spider1, spider0);
      assertSame(spider1, spider3);
      assertSame(spider1, spider5);
      assertSame(spider4, spider0);
      assertSame(spider4, spider2);
      assertSame(spider4, spider3);
      assertSame(spider4, spider5);
      assertSame(spider4, spider1);
      assertSame(spider5, spider1);
      assertSame(spider5, spider3);
      assertSame(spider5, spider4);
      assertSame(spider5, spider0);
      assertSame(spider5, spider2);
      
      Spider spider6 = spider4.setDownloader(phantomJSDownloader0);
      assertNotNull(spider6);
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(Spider.Status.Init, spider6.getStatus());
      assertFalse(spider6.isSpawnUrl());
      assertTrue(spider6.isExitWhenComplete());
      assertEquals(0L, spider6.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertFalse(spider4.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isExitWhenComplete());
      assertSame(spider6, spider3);
      assertSame(spider6, spider0);
      assertSame(spider6, spider5);
      assertSame(spider6, spider2);
      assertSame(spider6, spider4);
      assertSame(spider6, spider1);
      assertSame(spider0, spider3);
      assertSame(spider0, spider5);
      assertSame(spider0, spider6);
      assertSame(spider0, spider2);
      assertSame(spider0, spider4);
      assertSame(spider0, spider1);
      assertSame(spider1, spider2);
      assertSame(spider1, spider4);
      assertSame(spider1, spider3);
      assertSame(spider1, spider0);
      assertSame(spider1, spider6);
      assertSame(spider1, spider5);
      assertSame(spider4, spider6);
      assertSame(spider4, spider0);
      assertSame(spider4, spider2);
      assertSame(spider4, spider3);
      assertSame(spider4, spider5);
      assertSame(spider4, spider1);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f7S5me");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Spider spider1 = spider0.setUUID("f7S5me");
      assertNotNull(spider1);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      assertNotNull(forkJoinPool_ForkJoinWorkerThreadFactory0);
      
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[9];
      // Undeclared exception!
      try { 
        spider1.addUrl(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("r<#A&O@crN7t6H");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      
      long long0 = spider0.getPageCount();
      assertEquals(0L, long0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("E");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertNotNull(spider0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Spider spider1 = spider0.setPipelines(linkedList0);
      assertNotNull(spider1);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0, linkedList0.size());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      Spider spider2 = spider1.setExitWhenComplete(false);
      assertNotNull(spider2);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(0, linkedList0.size());
      assertEquals(0L, spider1.getPageCount());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider2.isSpawnUrl());
      assertFalse(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      
      Spider spider3 = spider2.setUUID("E");
      assertNotNull(spider3);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(0, linkedList0.size());
      assertEquals(0L, spider1.getPageCount());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider2.isSpawnUrl());
      assertFalse(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertFalse(spider3.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(spider2, spider0);
      assertSame(spider2, spider3);
      assertSame(spider2, spider1);
      assertSame(spider3, spider2);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      
      Request request0 = new Request((String) null);
      assertNotNull(request0);
      assertNull(request0.getCharset());
      assertNull(request0.getMethod());
      assertFalse(request0.isBinaryContent());
      assertNull(request0.getUrl());
      assertEquals(0L, request0.getPriority());
      
      Request request1 = request0.setPriority((-260L));
      assertNotNull(request1);
      assertNull(request0.getCharset());
      assertNull(request0.getMethod());
      assertFalse(request0.isBinaryContent());
      assertNull(request0.getUrl());
      assertEquals((-260L), request0.getPriority());
      assertEquals((-260L), request1.getPriority());
      assertFalse(request1.isBinaryContent());
      assertNull(request1.getCharset());
      assertNull(request1.getMethod());
      assertNull(request1.getUrl());
      assertSame(request0, request1);
      assertSame(request1, request0);
      
      spider2.stop();
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(0, linkedList0.size());
      assertEquals(0L, spider1.getPageCount());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider2.isSpawnUrl());
      assertFalse(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(spider2, spider0);
      assertSame(spider2, spider3);
      assertSame(spider2, spider1);
      
      boolean boolean0 = spider1.isSpawnUrl();
      assertTrue(boolean0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(0, linkedList0.size());
      assertEquals(0L, spider1.getPageCount());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      
      Spider spider4 = spider1.thread(1745);
      assertNotNull(spider4);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(0, linkedList0.size());
      assertEquals(0L, spider1.getPageCount());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertFalse(spider4.isExitWhenComplete());
      assertTrue(spider4.isSpawnUrl());
      assertEquals(0L, spider4.getPageCount());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider4);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertSame(spider1, spider4);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(spider4, spider3);
      assertSame(spider4, spider0);
      assertSame(spider4, spider2);
      assertSame(spider4, spider1);
      
      spider3.stop();
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(0, linkedList0.size());
      assertEquals(0L, spider1.getPageCount());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider2.isSpawnUrl());
      assertFalse(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertFalse(spider3.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider4);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertSame(spider1, spider4);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(spider2, spider0);
      assertSame(spider2, spider3);
      assertSame(spider2, spider1);
      assertSame(spider2, spider4);
      assertSame(spider3, spider2);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      assertSame(spider3, spider4);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f7S5me");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      
      Spider spider1 = spider0.setExitWhenComplete(false);
      assertNotNull(spider1);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      
      Spider spider2 = spider0.setUUID("");
      assertNotNull(spider2);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertFalse(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      
      Spider spider3 = spider1.setSpawnUrl(false);
      assertNotNull(spider3);
      assertEquals(0L, spider0.getPageCount());
      assertFalse(spider0.isExitWhenComplete());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider1.isExitWhenComplete());
      assertFalse(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertFalse(spider3.isExitWhenComplete());
      assertFalse(spider3.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider3);
      assertSame(spider1, spider2);
      assertSame(spider3, spider1);
      assertSame(spider3, spider2);
      assertSame(spider3, spider0);
      
      QueueScheduler queueScheduler0 = new QueueScheduler();
      assertNotNull(queueScheduler0);
      
      Spider spider4 = spider2.setScheduler(queueScheduler0);
      assertNotNull(spider4);
      assertEquals(0L, spider0.getPageCount());
      assertFalse(spider0.isExitWhenComplete());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertFalse(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertFalse(spider4.isExitWhenComplete());
      assertFalse(spider4.isSpawnUrl());
      assertEquals(0L, spider4.getPageCount());
      assertSame(spider0, spider4);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider2, spider4);
      assertSame(spider2, spider3);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertSame(spider4, spider1);
      assertSame(spider4, spider2);
      assertSame(spider4, spider3);
      assertSame(spider4, spider0);
      
      spider1.stop();
      assertEquals(0L, spider0.getPageCount());
      assertFalse(spider0.isExitWhenComplete());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider1.isExitWhenComplete());
      assertFalse(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertSame(spider0, spider4);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider4);
      assertSame(spider1, spider3);
      assertSame(spider1, spider2);
      
      boolean boolean0 = spider0.isExitWhenComplete();
      assertFalse(boolean0);
      assertEquals(0L, spider0.getPageCount());
      assertFalse(spider0.isExitWhenComplete());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertSame(spider0, spider4);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        spider4.test(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f7S5me");
      assertNotNull(simplePageProcessor0);
      
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("f7S5me");
      assertFalse(simplePageProcessor1.equals((Object)simplePageProcessor0));
      assertNotNull(simplePageProcessor1);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertFalse(simplePageProcessor0.equals((Object)simplePageProcessor1));
      assertNotNull(spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertNotSame(simplePageProcessor0, simplePageProcessor1);
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", (String) null);
      assertNotNull(phantomJSDownloader0);
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      assertNotNull(resultItemsCollectorPipeline0);
      
      Spider.Status spider_Status0 = Spider.Status.fromValue(2);
      assertEquals(Spider.Status.Stopped, spider_Status0);
      
      SimplePageProcessor simplePageProcessor2 = new SimplePageProcessor("ZyH7_6");
      assertFalse(simplePageProcessor2.equals((Object)simplePageProcessor1));
      assertFalse(simplePageProcessor2.equals((Object)simplePageProcessor0));
      assertNotNull(simplePageProcessor2);
      
      spider0.stop();
      assertFalse(simplePageProcessor0.equals((Object)simplePageProcessor1));
      assertFalse(simplePageProcessor0.equals((Object)simplePageProcessor2));
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertNotSame(simplePageProcessor0, simplePageProcessor1);
      assertNotSame(simplePageProcessor0, simplePageProcessor2);
  }
}
