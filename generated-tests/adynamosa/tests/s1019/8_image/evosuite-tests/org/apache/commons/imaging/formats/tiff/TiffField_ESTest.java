/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 23 05:51:56 GMT 2019
 */

package org.apache.commons.imaging.formats.tiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.PrintWriter;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import org.apache.commons.imaging.formats.tiff.TiffElement;
import org.apache.commons.imaging.formats.tiff.TiffField;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldType;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeAscii;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeByte;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeDouble;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeFloat;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeLong;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeRational;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeShort;
import org.apache.commons.imaging.formats.tiff.taginfos.TagInfo;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TiffField_ESTest extends TiffField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      Long long0 = new Long(1470);
      byte[] byteArray0 = fieldTypeRational0.writeData(long0, byteOrder0);
      TiffField tiffField0 = new TiffField((byte)0, 4238, fieldTypeRational0, 1470, (-1525L), byteArray0, byteOrder0, 2389);
      int int0 = tiffField0.getIntValueOrArraySum();
      assertEquals((-1525), tiffField0.getOffset());
      assertEquals(2389, tiffField0.getSortHint());
      assertEquals(1470, int0);
      assertEquals(0, tiffField0.getTag());
      assertEquals(4238, tiffField0.getDirectoryType());
      assertEquals(11760, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = new FieldTypeFloat(0, "/*Fte6A[Sj4");
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      ByteOrder byteOrder0 = charBuffer0.order();
      TiffField tiffField0 = new TiffField(4927, (-1282), fieldTypeFloat0, 1L, (-131L), (byte[]) null, byteOrder0, (-274));
      assertTrue(tiffField0.isLocalValue());
      
      tiffField0.getOversizeValueElement();
      assertEquals((-274), tiffField0.getSortHint());
      assertEquals(4927, tiffField0.getTag());
      assertEquals((-131), tiffField0.getOffset());
      assertEquals((-1282), tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[45];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(27, (-1), fieldTypeFloat0, 1L, 338, byteArray0, byteOrder0, (byte)0);
      String string0 = tiffField0.toString();
      assertEquals(27, tiffField0.getTag());
      assertEquals("27 (0x1b: GPSProcessingMethod): Invalid value: GPS text field not encoded as bytes. (1 Float)", string0);
      assertEquals((-1), tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(338, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[45];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(27, (-1), fieldTypeFloat0, 1L, 338, byteArray0, byteOrder0, (byte)0);
      TagInfo tagInfo0 = tiffField0.getTagInfo();
      assertEquals(27, tiffField0.getTag());
      assertEquals(338, tiffField0.getOffset());
      assertEquals(27, tagInfo0.tag);
      assertEquals((-1), tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      byte[] byteArray0 = new byte[5];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField((byte)0, (byte)0, fieldTypeLong0, (byte)0, 2443, byteArray0, byteOrder0, (-2531));
      int int0 = tiffField0.getTag();
      assertEquals(2443, tiffField0.getOffset());
      assertEquals((-2531), tiffField0.getSortHint());
      assertEquals(0, int0);
      assertEquals(0, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      byte[] byteArray0 = new byte[5];
      TiffField tiffField0 = new TiffField(553, 238, fieldTypeLong0, 1037, 288, byteArray0, (ByteOrder) null, (-1793));
      int int0 = tiffField0.getTag();
      assertEquals(238, tiffField0.getDirectoryType());
      assertEquals((-1793), tiffField0.getSortHint());
      assertEquals(553, int0);
      assertEquals(288, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeByte fieldTypeByte0 = FieldType.BYTE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)6;
      TiffField tiffField0 = new TiffField(1644, 1, fieldTypeByte0.ASCII, 255L, (byte) (-32), byteArray0, byteOrder0, 1644);
      String string0 = tiffField0.getStringValue();
      assertEquals(1644, tiffField0.getSortHint());
      assertEquals(1644, tiffField0.getTag());
      assertEquals((-32), tiffField0.getOffset());
      assertNotNull(string0);
      assertEquals(255, tiffField0.getBytesLength());
      assertEquals(1, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      byte[] byteArray0 = new byte[5];
      TiffField tiffField0 = new TiffField(2443, 46, fieldTypeLong0, 2443, 2443, byteArray0, (ByteOrder) null, (byte)0);
      int int0 = tiffField0.getSortHint();
      assertEquals(46, tiffField0.getDirectoryType());
      assertEquals(2443, tiffField0.getOffset());
      assertEquals(2443, tiffField0.getTag());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      byte[] byteArray0 = new byte[5];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField((byte)0, (byte)0, fieldTypeLong0, (byte)0, 2443, byteArray0, byteOrder0, (-2531));
      int int0 = tiffField0.getSortHint();
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals((-2531), int0);
      assertEquals(2443, tiffField0.getOffset());
      assertEquals(0, tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      TiffField tiffField0 = new TiffField(2147352037, (-2303), fieldTypeShort0, (byte)89, (byte)89, byteArray0, byteOrder0, 2147352037);
      int int0 = tiffField0.getOffset();
      assertEquals(2147352037, tiffField0.getTag());
      assertEquals((-2303), tiffField0.getDirectoryType());
      assertEquals(2147352037, tiffField0.getSortHint());
      assertEquals(89, int0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      byte[] byteArray0 = new byte[4];
      CharBuffer charBuffer0 = CharBuffer.allocate(64);
      ByteOrder byteOrder0 = charBuffer0.order();
      TiffField tiffField0 = new TiffField(41495, 41495, fieldTypeLong0, (-309L), (-309L), byteArray0, byteOrder0, 64);
      int int0 = tiffField0.getOffset();
      assertEquals(41495, tiffField0.getTag());
      assertEquals(41495, tiffField0.getDirectoryType());
      assertEquals(64, tiffField0.getSortHint());
      assertEquals((-309), int0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-2);
      TiffField tiffField0 = new TiffField((-1), 1037, fieldTypeLong0, 1037, (-1), byteArray0, (ByteOrder) null, (byte)0);
      tiffField0.getIntValueOrArraySum();
      assertEquals(4148, tiffField0.getBytesLength());
      assertEquals(1037, tiffField0.getDirectoryType());
      assertEquals((-1), tiffField0.getOffset());
      assertEquals((-1), tiffField0.getTag());
      assertEquals(0, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = new FieldTypeShort(654, "w4AB4y8>Bw");
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-1);
      TiffField tiffField0 = new TiffField(1285, (byte) (-1), fieldTypeShort0, 1285, (-1397L), byteArray0, byteOrder0, 2145372061);
      int int0 = tiffField0.getIntValueOrArraySum();
      assertEquals((-1397), tiffField0.getOffset());
      assertEquals((-1), tiffField0.getDirectoryType());
      assertEquals(2570, tiffField0.getBytesLength());
      assertEquals(2145372061, tiffField0.getSortHint());
      assertEquals((-256), int0);
      assertEquals(1285, tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[10];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(1213, (-22), fieldTypeFloat0, 1L, 1449, byteArray0, byteOrder0, 1449);
      tiffField0.getIntValue();
      assertEquals(1449, tiffField0.getOffset());
      assertEquals(4, tiffField0.getBytesLength());
      assertEquals(1213, tiffField0.getTag());
      assertEquals((-22), tiffField0.getDirectoryType());
      assertEquals(1449, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      Long long0 = new Long(1470);
      byte[] byteArray0 = fieldTypeRational0.writeData(long0, byteOrder0);
      TiffField tiffField0 = new TiffField(1470, (-1073), fieldTypeRational0, 1L, 1L, byteArray0, byteOrder0, 1470);
      tiffField0.getIntValue();
      assertEquals((-1073), tiffField0.getDirectoryType());
      assertEquals(1470, tiffField0.getSortHint());
      assertEquals(8, tiffField0.getBytesLength());
      assertEquals(1470, tiffField0.getTag());
      assertEquals(1, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      Long long0 = new Long(1470);
      byte[] byteArray0 = fieldTypeRational0.writeData(long0, byteOrder0);
      TiffField tiffField0 = new TiffField(0, 1954, fieldTypeRational0.UNDEFINED, 1L, 4L, byteArray0, (ByteOrder) null, 69);
      tiffField0.getIntValue();
      assertEquals(0, tiffField0.getTag());
      assertEquals(1954, tiffField0.getDirectoryType());
      assertEquals(69, tiffField0.getSortHint());
      assertEquals(4, tiffField0.getOffset());
      assertEquals(1, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FieldTypeShort fieldTypeShort0 = new FieldTypeShort((byte) (-39), (String) null);
      TiffField tiffField0 = new TiffField((byte)1, (byte) (-39), fieldTypeShort0, (byte) (-39), 4L, byteArray0, byteOrder0, 1);
      tiffField0.getFieldTypeName();
      assertEquals((-39), tiffField0.getDirectoryType());
      assertEquals(1, tiffField0.getTag());
      assertEquals(1, tiffField0.getSortHint());
      assertEquals(4, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[28];
      FieldTypeShort fieldTypeShort0 = new FieldTypeShort(1, "");
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((-1717986917), 50, fieldTypeShort0, 1L, 850L, byteArray0, byteOrder0, 1946);
      tiffField0.getFieldTypeName();
      assertEquals(1946, tiffField0.getSortHint());
      assertEquals(850, tiffField0.getOffset());
      assertEquals((-1717986917), tiffField0.getTag());
      assertEquals(50, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(459, (-839), (FieldType) null, 6376L, 6376L, byteArray0, byteOrder0, (byte) (-7));
      tiffField0.getFieldType();
      assertEquals(6376, tiffField0.getOffset());
      assertEquals(459, tiffField0.getTag());
      assertEquals((-839), tiffField0.getDirectoryType());
      assertEquals((-7), tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[45];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(27, (-1), fieldTypeFloat0, 1L, 338, byteArray0, byteOrder0, (byte)0);
      tiffField0.getFieldType();
      assertEquals(27, tiffField0.getTag());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(338, tiffField0.getOffset());
      assertEquals((-1), tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = new FieldTypeLong((-120), "");
      byte[] byteArray0 = new byte[6];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField((-120), (-120), fieldTypeLong0, 6720L, (-120), byteArray0, byteOrder0, (-392));
      tiffField0.getFieldType();
      assertEquals((-120), tiffField0.getDirectoryType());
      assertEquals((-120), tiffField0.getTag());
      assertEquals((-120), tiffField0.getOffset());
      assertEquals((-392), tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)29;
      TiffField tiffField0 = new TiffField(2866, (byte)29, fieldTypeFloat0, 1L, 1995, byteArray0, byteOrder0, (byte)22);
      tiffField0.getDoubleValue();
      assertEquals(2866, tiffField0.getTag());
      assertEquals(4, tiffField0.getBytesLength());
      assertEquals(1995, tiffField0.getOffset());
      assertEquals(22, tiffField0.getSortHint());
      assertEquals(29, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-19);
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(927, 8, fieldTypeFloat0.SBYTE, 1L, 325, byteArray0, byteOrder0, 48257);
      tiffField0.getDoubleValue();
      assertEquals(48257, tiffField0.getSortHint());
      assertEquals(8, tiffField0.getDirectoryType());
      assertEquals(927, tiffField0.getTag());
      assertEquals(1, tiffField0.getBytesLength());
      assertEquals(325, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      byte[] byteArray0 = new byte[7];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(5066, 5066, fieldTypeLong0, 5066, 5066, byteArray0, byteOrder0, (-893));
      int int0 = tiffField0.getDirectoryType();
      assertEquals(5066, tiffField0.getTag());
      assertEquals((-893), tiffField0.getSortHint());
      assertEquals(5066, tiffField0.getOffset());
      assertEquals(5066, int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[3];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField((-1717986917), (-54), fieldTypeFloat0, 1776L, 2L, byteArray0, byteOrder0, (-1717986917));
      int int0 = tiffField0.getDirectoryType();
      assertEquals((-1717986917), tiffField0.getSortHint());
      assertEquals((-1717986917), tiffField0.getTag());
      assertEquals(2, tiffField0.getOffset());
      assertEquals((-54), int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      byte[] byteArray0 = new byte[4];
      TiffField tiffField0 = new TiffField((-302), (byte)0, fieldTypeFloat0.RATIONAL, (byte)0, (-1L), byteArray0, byteOrder0, (-2089443548));
      tiffField0.getCount();
      assertEquals((-2089443548), tiffField0.getSortHint());
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals((-302), tiffField0.getTag());
      assertEquals((-1), tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.IFD;
      byte[] byteArray0 = new byte[8];
      char[] charArray0 = new char[4];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      ByteOrder byteOrder0 = charBuffer0.order();
      TiffField tiffField0 = new TiffField((byte)0, 50, fieldTypeLong0, 'G', 1746L, byteArray0, byteOrder0, (byte)0);
      tiffField0.getCount();
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(50, tiffField0.getDirectoryType());
      assertEquals(1746, tiffField0.getOffset());
      assertEquals(0, tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[1];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((byte)1, (byte) (-39), fieldTypeFloat0.SSHORT, (byte) (-39), 4L, byteArray0, byteOrder0, 1);
      tiffField0.getCount();
      assertEquals(1, tiffField0.getSortHint());
      assertEquals(1, tiffField0.getTag());
      assertEquals((-39), tiffField0.getDirectoryType());
      assertEquals(4, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      byte[] byteArray0 = new byte[2];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(50, 50, fieldTypeRational0, 35L, 50, byteArray0, byteOrder0, (byte)68);
      int int0 = tiffField0.getBytesLength();
      assertEquals(68, tiffField0.getSortHint());
      assertEquals(50, tiffField0.getOffset());
      assertEquals(280, int0);
      assertEquals(50, tiffField0.getTag());
      assertEquals(50, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      byte[] byteArray0 = new byte[2];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField((byte)68, 50, fieldTypeRational0, (-3023L), (-3023L), byteArray0, byteOrder0, 3);
      int int0 = tiffField0.getBytesLength();
      assertEquals((-24184), int0);
      assertEquals((-3023), tiffField0.getOffset());
      assertEquals(3, tiffField0.getSortHint());
      assertEquals(68, tiffField0.getTag());
      assertEquals(50, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      byte[] byteArray0 = new byte[5];
      TiffField tiffField0 = new TiffField((-1), 1037, fieldTypeLong0, 1037, (-1), byteArray0, (ByteOrder) null, (byte)85);
      tiffField0.getByteOrder();
      assertEquals(85, tiffField0.getSortHint());
      assertEquals((-1), tiffField0.getOffset());
      assertEquals((-1), tiffField0.getTag());
      assertEquals(1037, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.UNDEFINED;
      byte[] byteArray0 = new byte[9];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(2, 0, fieldTypeByte0, 233L, 2, byteArray0, byteOrder0, (byte)61);
      tiffField0.getByteOrder();
      assertEquals(2, tiffField0.getOffset());
      assertEquals(61, tiffField0.getSortHint());
      assertEquals(2, tiffField0.getTag());
      assertEquals(0, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = new FieldTypeByte(1303, "CustomRendered");
      byte[] byteArray0 = new byte[8];
      TiffField tiffField0 = new TiffField(46, 46, fieldTypeByte0, 1303, 280L, byteArray0, (ByteOrder) null, 4223);
      tiffField0.getByteArrayValue();
      assertEquals(46, tiffField0.getTag());
      assertEquals(1303, tiffField0.getBytesLength());
      assertEquals(4223, tiffField0.getSortHint());
      assertEquals(280, tiffField0.getOffset());
      assertEquals(46, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[3];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((byte)103, (byte)0, fieldTypeFloat0, 0L, (byte)50, byteArray0, byteOrder0, (byte)50);
      byte[] byteArray1 = tiffField0.getByteArrayValue();
      assertEquals(50, tiffField0.getOffset());
      assertEquals(103, tiffField0.getTag());
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals(0, byteArray1.length);
      assertEquals(50, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[55];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(36, (-268), fieldTypeFloat0.IFD, (-970L), 4L, byteArray0, byteOrder0, 2113);
      // Undeclared exception!
      try { 
        tiffField0.toString();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(0, 0, fieldTypeRational0, 0L, 0L, (byte[]) null, byteOrder0, 0);
      // Undeclared exception!
      try { 
        tiffField0.getValueDescription();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = new FieldTypeFloat(0, "/*Fte6A[Sj4");
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      ByteOrder byteOrder0 = charBuffer0.order();
      TiffField tiffField0 = new TiffField(4927, (-1282), fieldTypeFloat0, 1L, (-131L), (byte[]) null, byteOrder0, (-274));
      // Undeclared exception!
      try { 
        tiffField0.getValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[57];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(36, (-268), fieldTypeFloat0.IFD, (-970L), (-12L), byteArray0, byteOrder0, 2113);
      // Undeclared exception!
      try { 
        tiffField0.getValue();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[178];
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(37383, (-3306), fieldTypeLong0, (-3306), (-949L), byteArray0, byteOrder0, 23);
      // Undeclared exception!
      try { 
        tiffField0.getStringValue();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TiffField tiffField0 = new TiffField(2455, 2455, (FieldType) null, 1114L, (-600L), (byte[]) null, (ByteOrder) null, 281);
      // Undeclared exception!
      try { 
        tiffField0.getIntValueOrArraySum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.taginfos.TagInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[1];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((byte)1, (byte) (-39), fieldTypeFloat0.SHORT, (byte) (-39), 4L, byteArray0, byteOrder0, 1);
      // Undeclared exception!
      try { 
        tiffField0.getIntValueOrArraySum();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(459, (-839), (FieldType) null, 6376L, 6376L, byteArray0, byteOrder0, (byte) (-7));
      // Undeclared exception!
      try { 
        tiffField0.getIntValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.taginfos.TagInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      byte[] byteArray0 = new byte[4];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(263, 0, fieldTypeRational0.UNDEFINED, (-1073), 11L, byteArray0, byteOrder0, (-508));
      // Undeclared exception!
      try { 
        tiffField0.getIntValue();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      byte[] byteArray0 = new byte[91];
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      TiffField tiffField0 = new TiffField(33918, 50, fieldTypeShort0, (-120L), 132, byteArray0, byteOrder0, 6);
      // Undeclared exception!
      try { 
        tiffField0.getIntArrayValue();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      byte[] byteArray0 = new byte[49];
      TiffField tiffField0 = new TiffField(580, (byte)18, fieldTypeShort0.UNDEFINED, (-669L), 1579L, byteArray0, byteOrder0, (byte)104);
      // Undeclared exception!
      try { 
        tiffField0.getDoubleValue();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[10];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(1442, 655, fieldTypeFloat0.RATIONAL, 8L, 1442, byteArray0, byteOrder0, 1442);
      // Undeclared exception!
      try { 
        tiffField0.getDoubleValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [Lorg.apache.commons.imaging.common.RationalNumber; cannot be cast to java.lang.Number
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = new FieldTypeDouble(654, "s");
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      byte[] byteArray0 = new byte[0];
      TiffField tiffField0 = new TiffField((byte)3, (-1182), fieldTypeDouble0, (-532L), 3515L, byteArray0, byteOrder0, (-516));
      // Undeclared exception!
      try { 
        tiffField0.getDoubleArrayValue();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(1386, 1386, (FieldType) null, 1386, 1386, byteArray0, byteOrder0, (byte) (-80));
      // Undeclared exception!
      try { 
        tiffField0.getBytesLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = new FieldTypeDouble(0, "The offset cannot be negative");
      byte[] byteArray0 = new byte[9];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((-126), (-126), fieldTypeDouble0, (-1L), (-1799L), byteArray0, byteOrder0, (byte)78);
      // Undeclared exception!
      try { 
        tiffField0.getByteArrayValue();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.SLONG;
      byte[] byteArray0 = new byte[2];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((-893), (-893), fieldTypeLong0, (-2265L), (-2265L), byteArray0, byteOrder0, (byte) (-75));
      // Undeclared exception!
      try { 
        tiffField0.dump((PrintWriter) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      ByteOrder byteOrder0 = charBuffer0.order();
      TiffField tiffField0 = new TiffField(50, 4, (FieldType) null, 50, 4, byteArray0, byteOrder0, 4);
      // Undeclared exception!
      try { 
        tiffField0.dump((PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.taginfos.TagInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeByte fieldTypeByte0 = FieldType.BYTE;
      TiffField tiffField0 = new TiffField(38, 2429, fieldTypeByte0, 2429, 1L, (byte[]) null, byteOrder0, 797);
      // Undeclared exception!
      try { 
        tiffField0.dump();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      byte[] byteArray0 = new byte[4];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(519, (-1198), fieldTypeDouble0, (-626L), 0L, byteArray0, byteOrder0, (-1198));
      // Undeclared exception!
      try { 
        tiffField0.dump();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      byte[] byteArray0 = new byte[5];
      TiffField tiffField0 = new TiffField((-1190), (-1086), fieldTypeLong0, 255L, (-1190), byteArray0, (ByteOrder) null, 1037);
      boolean boolean0 = tiffField0.isLocalValue();
      assertEquals((-1086), tiffField0.getDirectoryType());
      assertEquals((-1190), tiffField0.getTag());
      assertEquals((-1190), tiffField0.getOffset());
      assertFalse(boolean0);
      assertEquals(1037, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = new FieldTypeByte(0, (String) null);
      byte[] byteArray0 = new byte[6];
      TiffField tiffField0 = new TiffField(0, 0, fieldTypeByte0, 0L, 0L, byteArray0, (ByteOrder) null, 50715);
      tiffField0.getFieldType();
      assertEquals(50715, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      byte[] byteArray0 = new byte[8];
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((byte)1, (byte)1, fieldTypeRational0, (byte) (-92), (-1265L), byteArray0, byteOrder0, 32844);
      // Undeclared exception!
      try { 
        tiffField0.dump((PrintWriter) mockPrintWriter0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FieldTypeAscii fieldTypeAscii0 = FieldType.ASCII;
      byte[] byteArray0 = new byte[3];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(1199, 1024, fieldTypeAscii0, 0L, 14, byteArray0, byteOrder0, 14);
      tiffField0.getValue();
      assertEquals(14, tiffField0.getSortHint());
      assertEquals(1199, tiffField0.getTag());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(1024, tiffField0.getDirectoryType());
      assertEquals(14, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.UNDEFINED;
      byte[] byteArray0 = new byte[6];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(273, 39, fieldTypeByte0, (byte)117, (byte)19, byteArray0, byteOrder0, (byte)88);
      TagInfo tagInfo0 = tiffField0.getTagInfo();
      assertEquals(39, tiffField0.getDirectoryType());
      assertEquals(273, tagInfo0.tag);
      assertEquals(88, tiffField0.getSortHint());
      assertEquals(273, tiffField0.getTag());
      assertEquals(19, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = new FieldTypeDouble(0, "The offset cannot be negative");
      byte[] byteArray0 = new byte[9];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((-126), (-126), fieldTypeDouble0, (-1L), (-1799L), byteArray0, byteOrder0, (byte)78);
      int int0 = tiffField0.getTag();
      assertEquals((-126), tiffField0.getDirectoryType());
      assertEquals((-1799), tiffField0.getOffset());
      assertEquals(78, tiffField0.getSortHint());
      assertEquals((-126), int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.SBYTE;
      byte[] byteArray0 = new byte[7];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField((-1313), (-1313), fieldTypeByte0, 0L, 0L, byteArray0, byteOrder0, (byte)50);
      int int0 = tiffField0.getBytesLength();
      assertEquals(50, tiffField0.getSortHint());
      assertEquals(0, int0);
      assertEquals((-1313), tiffField0.getTag());
      assertEquals((-1313), tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      byte[] byteArray0 = new byte[5];
      TiffField tiffField0 = new TiffField(2866, (byte)29, fieldTypeFloat0, 1L, 1995, byteArray0, byteOrder0, (byte)22);
      tiffField0.getDoubleValue();
      assertEquals(2866, tiffField0.getTag());
      assertEquals(1995, tiffField0.getOffset());
      assertEquals(22, tiffField0.getSortHint());
      assertEquals(4, tiffField0.getBytesLength());
      assertEquals(29, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      byte[] byteArray0 = new byte[129];
      FieldTypeLong fieldTypeLong0 = FieldType.SLONG;
      TiffField tiffField0 = new TiffField(1342, 2, fieldTypeLong0.SSHORT, 1342, 1342, byteArray0, byteOrder0, 1119);
      // Undeclared exception!
      try { 
        tiffField0.getIntValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [S cannot be cast to java.lang.Number
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      byte[] byteArray0 = new byte[5];
      TiffField tiffField0 = new TiffField((-1), 1037, fieldTypeLong0, 1037, (-1), byteArray0, (ByteOrder) null, (byte)0);
      tiffField0.getIntValueOrArraySum();
      assertEquals((-1), tiffField0.getTag());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(1037, tiffField0.getDirectoryType());
      assertEquals((-1), tiffField0.getOffset());
      assertEquals(4148, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[10];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(1449, 655, fieldTypeFloat0.RATIONAL, 8L, 1449, byteArray0, byteOrder0, 1449);
      // Undeclared exception!
      try { 
        tiffField0.getIntValueOrArraySum();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[3];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(34665, 50974, fieldTypeFloat0.UNDEFINED, 255L, (-1L), byteArray0, byteOrder0, 1934);
      try { 
        tiffField0.getIntValueOrArraySum();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [B@1b2d42dd for: 34665 (0x8769: ExifOffset): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      byte[] byteArray0 = new byte[5];
      TiffField tiffField0 = new TiffField(2866, (byte)29, fieldTypeFloat0, 1L, 1995, byteArray0, byteOrder0, (byte)22);
      tiffField0.getIntValueOrArraySum();
      assertEquals(29, tiffField0.getDirectoryType());
      assertEquals(2866, tiffField0.getTag());
      assertEquals(22, tiffField0.getSortHint());
      assertEquals(1995, tiffField0.getOffset());
      assertEquals(4, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      byte[] byteArray0 = new byte[8];
      TiffField tiffField0 = new TiffField(34024, 65106, ((FieldType) ((org.apache.commons.imaging.formats.tiff.fieldtypes.FieldType) fieldTypeFloat0).DOUBLE).BYTE, 1020L, 255L, byteArray0, byteOrder0, (byte)3);
      try { 
        tiffField0.getDoubleArrayValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [B@3274c550 for: 34024 (0x84e8: BackgroundColorIndicator): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      byte[] byteArray0 = new byte[9];
      TiffField tiffField0 = new TiffField(7, 1097, fieldTypeFloat0, 1776L, (-2626L), byteArray0, byteOrder0, (byte)0);
      tiffField0.getDoubleArrayValue();
      assertEquals(1097, tiffField0.getDirectoryType());
      assertEquals((-2626), tiffField0.getOffset());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(7, tiffField0.getTag());
      assertEquals(7104, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      byte[] byteArray0 = new byte[5];
      TiffField tiffField0 = new TiffField((-1), 1037, fieldTypeLong0, 1037, (-1), byteArray0, (ByteOrder) null, (byte)0);
      tiffField0.getDoubleArrayValue();
      assertEquals((-1), tiffField0.getOffset());
      assertEquals(4148, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(1037, tiffField0.getDirectoryType());
      assertEquals((-1), tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      byte[] byteArray0 = new byte[7];
      TiffField tiffField0 = new TiffField(285, 654, fieldTypeDouble0, 9772L, 2L, byteArray0, (ByteOrder) null, (-1204));
      tiffField0.getDoubleArrayValue();
      assertEquals(654, tiffField0.getDirectoryType());
      assertEquals(2, tiffField0.getOffset());
      assertEquals((-1204), tiffField0.getSortHint());
      assertEquals(285, tiffField0.getTag());
      assertEquals(78176, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[10];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(1442, 655, fieldTypeFloat0.RATIONAL, 8L, 1442, byteArray0, byteOrder0, 1442);
      double[] doubleArray0 = tiffField0.getDoubleArrayValue();
      assertEquals(1442, tiffField0.getTag());
      assertEquals(1442, tiffField0.getSortHint());
      assertEquals(655, tiffField0.getDirectoryType());
      assertArrayEquals(new double[] {Double.NaN}, doubleArray0, 0.01);
      assertEquals(64, tiffField0.getBytesLength());
      assertEquals(1442, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      byte[] byteArray0 = new byte[4];
      TiffField tiffField0 = new TiffField(4, 0, fieldTypeFloat0, 1L, 342L, byteArray0, byteOrder0, 33446);
      tiffField0.getDoubleArrayValue();
      assertEquals(342, tiffField0.getOffset());
      assertEquals(4, tiffField0.getBytesLength());
      assertEquals(33446, tiffField0.getSortHint());
      assertEquals(4, tiffField0.getTag());
      assertEquals(0, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      byte[] byteArray0 = new byte[91];
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      TiffField tiffField0 = new TiffField(50, 33918, fieldTypeShort0, 776L, (byte) (-29), byteArray0, byteOrder0, (byte) (-29));
      tiffField0.getDoubleArrayValue();
      assertEquals((-29), tiffField0.getOffset());
      assertEquals(50, tiffField0.getTag());
      assertEquals(33918, tiffField0.getDirectoryType());
      assertEquals(1552, tiffField0.getBytesLength());
      assertEquals((-29), tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.IFD;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      byte[] byteArray0 = new byte[7];
      TiffField tiffField0 = new TiffField((byte)3, (byte) (-1), fieldTypeLong0, 2044L, 2044L, byteArray0, byteOrder0, 0);
      tiffField0.getIntArrayValue();
      assertEquals(2044, tiffField0.getOffset());
      assertEquals(8176, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(3, tiffField0.getTag());
      assertEquals((-1), tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      byte[] byteArray0 = new byte[64];
      TiffField tiffField0 = new TiffField((byte)104, (byte)0, fieldTypeShort0, 23312L, 0L, byteArray0, byteOrder0, (byte)0);
      tiffField0.getIntArrayValue();
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(46624, tiffField0.getBytesLength());
      assertEquals(104, tiffField0.getTag());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(0, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[10];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(1442, 655, fieldTypeFloat0.RATIONAL, 8L, 1442, byteArray0, byteOrder0, 1442);
      // Undeclared exception!
      try { 
        tiffField0.getIntArrayValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[3];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField((byte)0, 50, fieldTypeFloat0, 2166L, 255L, byteArray0, byteOrder0, 8);
      try { 
        tiffField0.getIntArrayValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [F@5e429bcb for: -1 (0xffffffff: Unknown Tag): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      byte[] byteArray0 = new byte[5];
      TiffField tiffField0 = new TiffField(2866, (byte)29, fieldTypeFloat0, 1L, 1995, byteArray0, byteOrder0, (byte)22);
      assertEquals(1L, tiffField0.getCount());
      
      tiffField0.getIntArrayValue();
      assertEquals(1995, tiffField0.getOffset());
      assertEquals(2866, tiffField0.getTag());
      assertEquals(22, tiffField0.getSortHint());
      assertEquals(4, tiffField0.getBytesLength());
      assertEquals(29, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      byte[] byteArray0 = new byte[4];
      TiffField tiffField0 = new TiffField((-302), (byte)0, fieldTypeFloat0.RATIONAL, (byte)0, (-1L), byteArray0, byteOrder0, (-2089443548));
      tiffField0.getIntArrayValue();
      assertEquals((-1), tiffField0.getOffset());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals((-302), tiffField0.getTag());
      assertEquals((-2089443548), tiffField0.getSortHint());
      assertEquals(0, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeByte fieldTypeByte0 = FieldType.BYTE;
      byte[] byteArray0 = new byte[1];
      TiffField tiffField0 = new TiffField(1644, 1, fieldTypeByte0.ASCII, 255L, (byte) (-32), byteArray0, byteOrder0, 1644);
      String string0 = tiffField0.getStringValue();
      assertEquals(1, tiffField0.getDirectoryType());
      assertEquals((-32), tiffField0.getOffset());
      assertEquals(255, tiffField0.getBytesLength());
      assertEquals(1644, tiffField0.getSortHint());
      assertEquals(1644, tiffField0.getTag());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      byte[] byteArray0 = new byte[82];
      FieldTypeByte fieldTypeByte0 = FieldType.BYTE;
      TiffField tiffField0 = new TiffField((byte)6, (-1493), fieldTypeByte0.ASCII, (byte)46, 1020L, byteArray0, byteOrder0, 1644);
      try { 
        tiffField0.getStringValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expected String value(6 (0x6: GPSAltitude): ): [Ljava.lang.String;@321fb166
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      byte[] byteArray0 = new byte[5];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(1, 1, fieldTypeDouble0, 1, 4L, byteArray0, byteOrder0, 1352);
      String string0 = tiffField0.getTagName();
      assertEquals(1352, tiffField0.getSortHint());
      assertEquals("Unknown Tag (0x1)", string0);
      assertEquals(1, tiffField0.getDirectoryType());
      assertEquals(4, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.UNDEFINED;
      byte[] byteArray0 = new byte[6];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(273, 39, fieldTypeByte0, (byte)117, (byte)19, byteArray0, byteOrder0, (byte)88);
      String string0 = tiffField0.getTagName();
      assertEquals(273, tiffField0.getTag());
      assertEquals("PreviewImageStart", string0);
      assertEquals(88, tiffField0.getSortHint());
      assertEquals(39, tiffField0.getDirectoryType());
      assertEquals(19, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = new FieldTypeDouble(0, "The offset cannot be negative");
      byte[] byteArray0 = new byte[9];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((-126), (-126), fieldTypeDouble0, (-1L), (-1799L), byteArray0, byteOrder0, (byte)78);
      MockFile mockFile0 = new MockFile((String) null, "OwnerName");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        tiffField0.dump((PrintWriter) mockPrintWriter0, "OwnerName");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[212];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeByte fieldTypeByte0 = FieldType.BYTE;
      TiffField tiffField0 = new TiffField(2436, 2436, fieldTypeByte0.FLOAT, 2279L, 2436, byteArray0, byteOrder0, 2436);
      tiffField0.dump();
      assertEquals(2436, tiffField0.getOffset());
      assertEquals(9116, tiffField0.getBytesLength());
      assertEquals(2279L, tiffField0.getCount());
      assertEquals(2436, tiffField0.getDirectoryType());
      assertEquals(2436, tiffField0.getTag());
      assertEquals(2436, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      byte[] byteArray0 = new byte[64];
      TiffField tiffField0 = new TiffField((byte)104, 26624, fieldTypeShort0.BYTE, (byte)104, (byte)104, byteArray0, byteOrder0, (byte)104);
      String string0 = tiffField0.getValueDescription();
      assertEquals(26624, tiffField0.getDirectoryType());
      assertEquals(104, tiffField0.getOffset());
      assertNotNull(string0);
      assertEquals(104L, tiffField0.getCount());
      assertEquals(104, tiffField0.getBytesLength());
      assertEquals(104, tiffField0.getSortHint());
      assertEquals(104, tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[57];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(1170, 0, fieldTypeFloat0, 1502L, 0, byteArray0, byteOrder0, 50);
      String string0 = tiffField0.toString();
      assertEquals("1170 (0x492: Unknown Tag): 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 (1502 Float)", string0);
      assertEquals(6008, tiffField0.getBytesLength());
      assertEquals(50, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      byte[] byteArray0 = new byte[20];
      TiffField tiffField0 = new TiffField(50, 50, fieldTypeShort0.DOUBLE, (byte)3, 1020L, byteArray0, byteOrder0, (byte)115);
      String string0 = tiffField0.toString();
      assertEquals(1020, tiffField0.getOffset());
      assertEquals(50, tiffField0.getDirectoryType());
      assertEquals("50 (0x32: Unknown Tag): 0.0, 0.0 (3 Double)", string0);
      assertEquals(115, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = new FieldTypeDouble(1418, "Unknown value: ");
      byte[] byteArray0 = new byte[1];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(1418, 1418, fieldTypeDouble0, 539L, 539L, byteArray0, byteOrder0, (byte)0);
      String string0 = tiffField0.getValueDescription();
      assertEquals(1418, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(539L, tiffField0.getCount());
      assertEquals(539, tiffField0.getOffset());
      assertEquals(1418, tiffField0.getTag());
      assertEquals(4312, tiffField0.getBytesLength());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      byte[] byteArray0 = new byte[213];
      FieldTypeLong fieldTypeLong0 = FieldType.IFD;
      TiffField tiffField0 = new TiffField(1, 965, fieldTypeLong0, 682, (byte)5, byteArray0, byteOrder0, 1);
      tiffField0.dump();
      assertEquals(5, tiffField0.getOffset());
      assertEquals(1, tiffField0.getTag());
      assertEquals(1, tiffField0.getSortHint());
      assertEquals(682L, tiffField0.getCount());
      assertEquals(965, tiffField0.getDirectoryType());
      assertEquals(2728, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[55];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((-268), 23, fieldTypeFloat0.SLONG, 1128L, 23, byteArray0, byteOrder0, 338);
      String string0 = tiffField0.getValueDescription();
      assertEquals(1128L, tiffField0.getCount());
      assertEquals(23, tiffField0.getDirectoryType());
      assertEquals(338, tiffField0.getSortHint());
      assertNotNull(string0);
      assertEquals(23, tiffField0.getOffset());
      assertEquals(4512, tiffField0.getBytesLength());
      assertEquals((-268), tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      byte[] byteArray0 = new byte[91];
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      TiffField tiffField0 = new TiffField(50, 33918, fieldTypeShort0, 776L, (byte) (-29), byteArray0, byteOrder0, (byte) (-29));
      String string0 = tiffField0.getValueDescription();
      assertEquals(776L, tiffField0.getCount());
      assertEquals((-29), tiffField0.getSortHint());
      assertEquals((-29), tiffField0.getOffset());
      assertEquals(50, tiffField0.getTag());
      assertEquals(33918, tiffField0.getDirectoryType());
      assertEquals(1552, tiffField0.getBytesLength());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.UNDEFINED;
      byte[] byteArray0 = new byte[9];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      MockFile mockFile0 = new MockFile("HeightResolution", "Unknown: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      TiffField tiffField0 = new TiffField((byte) (-61), (-85), fieldTypeByte0, (byte)14, (byte)61, byteArray0, byteOrder0, (byte)14);
      tiffField0.dump((PrintWriter) mockPrintWriter0, (String) null);
      assertEquals(72L, mockFile0.length());
      assertEquals(61, tiffField0.getOffset());
      assertEquals(14, tiffField0.getSortHint());
      assertEquals((-85), tiffField0.getDirectoryType());
      assertEquals((-61), tiffField0.getTag());
      assertEquals(14, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((-508), 0, fieldTypeRational0, 8L, 1457L, byteArray0, byteOrder0, 1449);
      String string0 = tiffField0.toString();
      assertEquals(1449, tiffField0.getSortHint());
      assertEquals(1457, tiffField0.getOffset());
      assertEquals("-508 (0xfffffe04: Unknown Tag):  (8 Rational)", string0);
      assertEquals(64, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.IFD;
      byte[] byteArray0 = new byte[55];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(37414, (-826), fieldTypeLong0.ASCII, 37414, 115936L, byteArray0, byteOrder0, 37414);
      String string0 = tiffField0.getValueDescription();
      assertNotNull(string0);
      assertEquals(37414, tiffField0.getSortHint());
      assertEquals((-826), tiffField0.getDirectoryType());
      assertEquals(37414, tiffField0.getTag());
      assertEquals(37414, tiffField0.getBytesLength());
      assertEquals(115936, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      byte[] byteArray0 = new byte[5];
      TiffField tiffField0 = new TiffField(2866, (byte)29, fieldTypeFloat0, 1L, 1995, byteArray0, byteOrder0, (byte)22);
      tiffField0.toString();
      assertEquals(4, tiffField0.getBytesLength());
      assertEquals(1995, tiffField0.getOffset());
      assertEquals(29, tiffField0.getDirectoryType());
      assertEquals(2866, tiffField0.getTag());
      assertEquals(22, tiffField0.getSortHint());
      assertEquals(1L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[55];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(36, (-268), fieldTypeFloat0.IFD, (-970L), 4L, byteArray0, byteOrder0, 2113);
      TiffElement tiffElement0 = tiffField0.getOversizeValueElement();
      assertEquals(36, tiffField0.getTag());
      assertEquals(2113, tiffField0.getSortHint());
      assertEquals((-268), tiffField0.getDirectoryType());
      assertNull(tiffElement0);
      assertEquals(4, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = new FieldTypeDouble(0, "The offset cannot be negative");
      byte[] byteArray0 = new byte[9];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((-126), (-126), fieldTypeDouble0, (-1L), (-1799L), byteArray0, byteOrder0, (byte)78);
      TiffField.OversizeValueElement tiffField_OversizeValueElement0 = tiffField0.new OversizeValueElement((byte) (-20), (-1661));
      String string0 = tiffField_OversizeValueElement0.getElementDescription(true);
      assertEquals(78, tiffField0.getSortHint());
      assertNull(string0);
      assertEquals((-126), tiffField0.getDirectoryType());
      assertEquals((-126), tiffField0.getTag());
      assertEquals((-1799), tiffField0.getOffset());
      assertEquals((-1L), tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      byte[] byteArray0 = new byte[5];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField((byte)0, (byte)0, fieldTypeLong0, (byte)0, 2443, byteArray0, byteOrder0, (-2531));
      TiffField.OversizeValueElement tiffField_OversizeValueElement0 = tiffField0.new OversizeValueElement((byte)1, 5);
      String string0 = tiffField_OversizeValueElement0.getElementDescription();
      assertEquals(2443, tiffField0.getOffset());
      assertNotNull(string0);
      assertEquals((-2531), tiffField0.getSortHint());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals("OversizeValueElement, tag: Unknown Tag, fieldType: Long", string0);
      assertEquals(0, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = new FieldTypeDouble(0, "The offset cannot be negative");
      byte[] byteArray0 = new byte[9];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((-126), (-126), fieldTypeDouble0, (-1L), (-1799L), byteArray0, byteOrder0, (byte)78);
      boolean boolean0 = tiffField0.isLocalValue();
      assertEquals(78, tiffField0.getSortHint());
      assertTrue(boolean0);
      assertEquals((-126), tiffField0.getTag());
      assertEquals((-1L), tiffField0.getCount());
      assertEquals((-126), tiffField0.getDirectoryType());
      assertEquals((-1799), tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.IFD;
      byte[] byteArray0 = new byte[8];
      char[] charArray0 = new char[4];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      ByteOrder byteOrder0 = charBuffer0.order();
      TiffField tiffField0 = new TiffField((byte)0, 50, fieldTypeLong0, 'G', 1746L, byteArray0, byteOrder0, (byte)0);
      TiffElement tiffElement0 = tiffField0.getOversizeValueElement();
      assertEquals(50, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(1746L, tiffElement0.offset);
      assertEquals(71L, tiffField0.getCount());
      assertNotNull(tiffElement0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = new FieldTypeDouble(654, "U;}~[k1FF/q{UU,");
      byte[] byteArray0 = new byte[7];
      TiffField tiffField0 = new TiffField(24, (byte)0, fieldTypeDouble0, 255L, (byte)85, byteArray0, (ByteOrder) null, 654);
      tiffField0.getFieldTypeName();
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals(654, tiffField0.getSortHint());
      assertEquals(85, tiffField0.getOffset());
      assertEquals(24, tiffField0.getTag());
      assertEquals(255L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[1];
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, (int) (byte)0, (int) (byte)0);
      ByteOrder byteOrder0 = charBuffer0.order();
      TiffField tiffField0 = new TiffField(50, 2266, fieldTypeFloat0.SRATIONAL, (byte)0, 0L, byteArray0, byteOrder0, 60);
      tiffField0.getOffset();
      assertEquals(2266, tiffField0.getDirectoryType());
      assertEquals(60, tiffField0.getSortHint());
      assertEquals(50, tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = new FieldTypeDouble(654, "U;}~[k1FF/q{UU,");
      byte[] byteArray0 = new byte[7];
      TiffField tiffField0 = new TiffField(24, (byte)0, fieldTypeDouble0, 255L, (byte)85, byteArray0, (ByteOrder) null, 654);
      int int0 = tiffField0.getDirectoryType();
      assertEquals(85, tiffField0.getOffset());
      assertEquals(654, tiffField0.getSortHint());
      assertEquals(0, int0);
      assertEquals(24, tiffField0.getTag());
      assertEquals(255L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      byte[] byteArray0 = new byte[5];
      TiffField tiffField0 = new TiffField((-1190), (-1086), fieldTypeLong0, 255L, (-1190), byteArray0, (ByteOrder) null, 1037);
      int int0 = tiffField0.getSortHint();
      assertEquals(1037, int0);
      assertEquals((-1190), tiffField0.getTag());
      assertEquals((-1190), tiffField0.getOffset());
      assertFalse(tiffField0.isLocalValue());
      assertEquals((-1086), tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FieldTypeAscii fieldTypeAscii0 = FieldType.ASCII;
      byte[] byteArray0 = new byte[3];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(1199, 1024, fieldTypeAscii0, 0L, 14, byteArray0, byteOrder0, 14);
      String string0 = tiffField0.getDescriptionWithoutValue();
      assertEquals("1199 (0x4af: Unknown Tag): ", string0);
      assertEquals(14, tiffField0.getOffset());
      assertEquals(14, tiffField0.getSortHint());
      assertEquals(1024, tiffField0.getDirectoryType());
      assertEquals(0L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FieldTypeAscii fieldTypeAscii0 = new FieldTypeAscii(41, "");
      char[] charArray0 = new char[9];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      ByteOrder byteOrder0 = charBuffer0.order();
      byte[] byteArray0 = new byte[1];
      TiffField tiffField0 = new TiffField((byte) (-106), 0, fieldTypeAscii0, 1L, 1805L, byteArray0, byteOrder0, (-2722));
      tiffField0.dump();
      assertEquals(1L, tiffField0.getCount());
      assertEquals((-2722), tiffField0.getSortHint());
      assertEquals(1, tiffField0.getBytesLength());
      assertEquals(1805, tiffField0.getOffset());
      assertEquals((-106), tiffField0.getTag());
      assertEquals(0, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      byte[] byteArray0 = new byte[129];
      FieldTypeLong fieldTypeLong0 = FieldType.SLONG;
      TiffField tiffField0 = new TiffField(1342, 2, fieldTypeLong0.SSHORT, 1342, 1342, byteArray0, byteOrder0, 1119);
      String string0 = tiffField0.getValueDescription();
      assertEquals(1342, tiffField0.getOffset());
      assertEquals(2, tiffField0.getDirectoryType());
      assertEquals(1342L, tiffField0.getCount());
      assertNotNull(string0);
      assertEquals(1119, tiffField0.getSortHint());
      assertEquals(2684, tiffField0.getBytesLength());
      assertEquals(1342, tiffField0.getTag());
  }
}
