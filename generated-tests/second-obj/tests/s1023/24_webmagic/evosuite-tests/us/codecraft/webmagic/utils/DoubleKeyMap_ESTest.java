/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 09:04:38 GMT 2018
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DoubleKeyMap<String, String, String> doubleKeyMap0 = new DoubleKeyMap<String, String, String>();
      Map<Object, Map<String, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, String, Object> doubleKeyMap1 = new DoubleKeyMap<Object, String, Object>(map0);
      Object object0 = new Object();
      Object object1 = doubleKeyMap1.get(object0, "");
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>();
      doubleKeyMap0.remove("yxly`l2v]o/", (Object) "yxly`l2v]o/");
      HashMap<Object, Map<Object, Object>> hashMap0 = new HashMap<Object, Map<Object, Object>>();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>(hashMap0, class0);
      Integer integer0 = new Integer(1);
      HashMap<String, Map<String, String>> hashMap1 = new HashMap<String, Map<String, String>>();
      DoubleKeyMap<String, String, String> doubleKeyMap2 = new DoubleKeyMap<String, String, String>(hashMap1, class0);
      Map<Object, Map<String, Integer>> map0 = doubleKeyMap2.newMap();
      DoubleKeyMap<Object, String, Integer> doubleKeyMap3 = new DoubleKeyMap<Object, String, Integer>(map0);
      Map<Object, Object> map1 = doubleKeyMap3.newMap();
      // Undeclared exception!
      try { 
        doubleKeyMap1.put((Object) integer0, map1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HashMap<Object, Map<Object, Object>> hashMap0 = new HashMap<Object, Map<Object, Object>>();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>(hashMap0, class0);
      Object object0 = new Object();
      Integer integer0 = new Integer((-1589));
      doubleKeyMap0.put((Object) integer0, (Object) integer0, (Object) hashMap0);
      DoubleKeyMap<Integer, String, Integer> doubleKeyMap1 = new DoubleKeyMap<Integer, String, Integer>();
      Integer integer1 = new Integer(3828);
      doubleKeyMap1.get(integer1);
      Object object1 = new Object();
      Object object2 = new Object();
      DoubleKeyMap<String, Object, Object> doubleKeyMap2 = new DoubleKeyMap<String, Object, Object>();
      Integer integer2 = new Integer((-1589));
      doubleKeyMap2.put("7S5-Q*F?=p$Wuv", (Object) integer2, (Object) doubleKeyMap1);
      Integer integer3 = new Integer((-1589));
      Object object3 = doubleKeyMap2.get("7S5-Q*F?=p$Wuv", (Object) integer3);
      assertNotNull(object3);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HashMap<Integer, Map<Object, Object>> hashMap0 = new HashMap<Integer, Map<Object, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Object>();
      Integer integer0 = new Integer((-9));
      Map<Object, Object> map0 = new HashMap<Object, Object>();
      Object object0 = new Object();
      doubleKeyMap0.remove(integer0, object0);
      HashMap<Object, Map<String, Object>> hashMap1 = new HashMap<Object, Map<String, Object>>();
      DoubleKeyMap<Object, String, Object> doubleKeyMap1 = new DoubleKeyMap<Object, String, Object>(hashMap1, class0);
      Object object1 = new Object();
      HashMap<String, Object> hashMap2 = new HashMap<String, Object>();
      hashMap1.put(object1, hashMap2);
      DoubleKeyMap<Integer, String, Object> doubleKeyMap2 = new DoubleKeyMap<Integer, String, Object>();
      doubleKeyMap2.remove(integer0, "wrong proto type map ");
      doubleKeyMap1.put(object1, "JHVoN)'|6WL5H([WQx", object1);
      DoubleKeyMap<Object, String, Map<String, Object>> doubleKeyMap3 = new DoubleKeyMap<Object, String, Map<String, Object>>();
      DoubleKeyMap<String, Object, String> doubleKeyMap4 = null;
      try {
        doubleKeyMap4 = new DoubleKeyMap<String, Object, String>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HashMap<Object, Map<Object, Object>> hashMap0 = new HashMap<Object, Map<Object, Object>>();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>(hashMap0, class0);
      int int0 = (-1589);
      Object object0 = new Object();
      doubleKeyMap0.remove(object0, (Object) class0);
      Integer integer0 = new Integer((-1589));
      doubleKeyMap0.put((Object) integer0, (Object) integer0, (Object) hashMap0);
      DoubleKeyMap<Integer, String, Integer> doubleKeyMap1 = new DoubleKeyMap<Integer, String, Integer>();
      Integer integer1 = new Integer(3828);
      doubleKeyMap1.get(integer1);
      doubleKeyMap0.remove((Object) integer0, (Object) doubleKeyMap1);
      Class<Map> class1 = Map.class;
      DoubleKeyMap<Object, Object, String> doubleKeyMap2 = null;
      try {
        doubleKeyMap2 = new DoubleKeyMap<Object, Object, String>(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      HashMap<Integer, Map<String, Object>> hashMap0 = new HashMap<Integer, Map<String, Object>>();
      Integer integer0 = new Integer((-1398));
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      String string0 = "";
      hashMap1.put("", hashMap0);
      hashMap0.put(integer0, hashMap1);
      HashMap<Integer, Map<String, Object>> hashMap2 = new HashMap<Integer, Map<String, Object>>(hashMap0);
      DoubleKeyMap<Integer, String, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Object>(hashMap2);
      doubleKeyMap0.remove(integer0, "");
      HashMap<Map<String, Object>, Map<Map<String, Object>, Object>> hashMap3 = new HashMap<Map<String, Object>, Map<Map<String, Object>, Object>>();
      DoubleKeyMap<Map<String, Object>, Map<String, Object>, Object> doubleKeyMap1 = new DoubleKeyMap<Map<String, Object>, Map<String, Object>, Object>(hashMap3);
      doubleKeyMap1.get((Map<String, Object>) null);
      DoubleKeyMap<String, String, Map<String, Object>> doubleKeyMap2 = new DoubleKeyMap<String, String, Map<String, Object>>();
      doubleKeyMap2.remove("");
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Map<String, Object>, String> doubleKeyMap3 = null;
      try {
        doubleKeyMap3 = new DoubleKeyMap<String, Map<String, Object>, String>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }
}
