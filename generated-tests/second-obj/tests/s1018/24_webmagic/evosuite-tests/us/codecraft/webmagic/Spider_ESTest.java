/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 05:29:41 GMT 2018
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.pipeline.ConsolePipeline;
import us.codecraft.webmagic.pipeline.FilePipeline;
import us.codecraft.webmagic.pipeline.JsonFilePipeline;
import us.codecraft.webmagic.pipeline.MultiPagePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.processor.PageProcessor;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.PriorityScheduler;
import us.codecraft.webmagic.scheduler.QueueScheduler;
import us.codecraft.webmagic.scheduler.component.DuplicateRemover;
import us.codecraft.webmagic.scheduler.component.HashSetDuplicateRemover;
import us.codecraft.webmagic.selector.Html;
import us.codecraft.webmagic.selector.Json;
import us.codecraft.webmagic.selector.SmartContentSelector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("qIKbw");
      Spider spider0 = Spider.create(simplePageProcessor0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      spider0.pipeline(multiPagePipeline0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider0.scheduler(queueScheduler0);
      Page page0 = Page.fail();
      Page page1 = page0.setSkip(false);
      spider0.extractAndAddRequests(page1, false);
      spider0.setSpawnUrl(true);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.scheduler(priorityScheduler0);
      Spider spider2 = spider1.setSpawnUrl(false);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(5);
      Spider spider3 = spider2.thread((ExecutorService) forkJoinPool0, 3);
      spider3.getSpiderListeners();
      Spider spider4 = spider3.setSpiderListeners((List<SpiderListener>) null);
      Locale locale0 = Locale.PRC;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      // Undeclared exception!
      try { 
        spider4.getAll((Collection<String>) set0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("qIKbw");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      spider1.checkIfRunning();
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      
      Spider.Status.values();
      Spider.Status spider_Status0 = Spider.Status.Stopped;
      int int0 = spider_Status0.getValue();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f6");
      Spider spider0 = new Spider(simplePageProcessor0);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2984, threadFactory0, threadPoolExecutor_CallerRunsPolicy0);
      Spider spider1 = spider0.setExecutorService(scheduledThreadPoolExecutor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      scheduledThreadPoolExecutor0.setMaximumPoolSize(2984);
      spider1.scheduler(queueScheduler0);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Spider.Status.fromValue(40);
      String string0 = "";
      // Undeclared exception!
      try { 
        Spider.Status.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant us.codecraft.webmagic.Spider.Status.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Locale locale0 = Locale.JAPANESE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) set0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("]e(o^");
      Spider spider0 = new Spider(simplePageProcessor0);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(319, threadFactory0);
      scheduledThreadPoolExecutor0.toString();
      spider0.thread((ExecutorService) scheduledThreadPoolExecutor0, 319);
      Page page0 = Page.fail();
      Page page1 = page0.setSkip(false);
      // Undeclared exception!
      try { 
        spider0.extractAndAddRequests(page1, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("qIKbw");
      Spider spider0 = Spider.create(simplePageProcessor0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider1 = spider0.pipeline(multiPagePipeline0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider1.setUUID("qIKbw");
      Page.fail();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(360, threadFactory0);
      // Undeclared exception!
      try { 
        spider0.thread((ExecutorService) scheduledThreadPoolExecutor0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = ",A{&5u]+|H/vN+2ACJ";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(",A{&5u]+|H/vN+2ACJ");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.thread((-4910));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("*LVHNOEh");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Spider spider1 = spider0.startUrls(linkedList0);
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) linkedList0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("qIKbw");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      spider0.setPipelines(linkedList0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "qIKbw";
      stringArray0[1] = "/3@!a>{;Gj@JI";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Spider.Status.values();
      Spider.Status.values();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(true);
      Spider spider2 = spider1.setSpawnUrl(true);
      Spider spider3 = spider2.setSpiderListeners((List<SpiderListener>) null);
      spider3.startRequest((List<Request>) null);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = ", targetRequests=";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", targetRequests=");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request[] requestArray0 = new Request[1];
      spider0.getUUID();
      Request request0 = new Request(", targetRequests=");
      requestArray0[0] = request0;
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = ", targetRequests=";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", targetRequests=");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request[] requestArray0 = new Request[1];
      Request request0 = new Request();
      requestArray0[0] = request0;
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", extras=");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.thread(5);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("us.codecraft.webmagic.model.HttpRequestBody", "us.codecraft.webmagic.model.HttpRequestBody");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      spider2.thread(5);
      spider2.clearPipeline();
      Page page0 = Page.fail();
      Json json0 = page0.getJson();
      Class<Pipeline> class0 = Pipeline.class;
      json0.toList(class0);
      // Undeclared exception!
      try { 
        spider0.get("us.codecraft.webmagic.model.HttpRequestBody");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("*LVHNOEh");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.scheduler(priorityScheduler0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("us.codecraft.webmagic.model.HttpRequestBody", "us.codecraft.webmagic.model.HttpRequestBody");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      Spider spider3 = spider2.thread(5);
      spider1.setSpawnUrl(false);
      spider3.runAsync();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "*LVHNOEh");
      FileSystemHandling.shouldAllThrowIOExceptions();
      queueScheduler0.poll(spider1);
      // Undeclared exception!
      try { 
        spider1.onSuccess((Request) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("qIKbw");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      spider0.setPipelines(linkedList0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("G$_MRo", "");
      spider0.downloader(phantomJSDownloader0);
      boolean boolean0 = spider0.isExitWhenComplete();
      assertEquals(0L, spider0.getPageCount());
      assertTrue(boolean0);
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", extras=");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.scheduler(priorityScheduler0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(", extras=", ", extras=");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      Spider spider3 = spider2.thread(5);
      Spider spider4 = spider3.setSpawnUrl(false);
      spider4.pageProcessor = (PageProcessor) simplePageProcessor0;
      spider4.runAsync();
      spider2.getStatus();
      PriorityScheduler priorityScheduler1 = new PriorityScheduler();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler(", extras=");
      FileCacheQueueScheduler fileCacheQueueScheduler1 = new FileCacheQueueScheduler("z}u}G");
      DuplicateRemover duplicateRemover0 = fileCacheQueueScheduler1.getDuplicateRemover();
      fileCacheQueueScheduler0.setDuplicateRemover(duplicateRemover0);
      // Undeclared exception!
      try { 
        spider3.setScheduler(fileCacheQueueScheduler0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Spider is already running!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("qIKbw");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("qIKbw");
      spider0.setScheduler(fileCacheQueueScheduler0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      spider0.setScheduler(fileCacheQueueScheduler0);
      spider0.setEmptySleepTime(1);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", extras=");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.scheduler(priorityScheduler0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("us.codecraft.webmagic.model.HttpRequestBody", "us.codecraft.webmagic.model.HttpRequestBody");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      Spider spider3 = spider2.thread(5);
      Spider spider4 = spider3.setSpawnUrl(false);
      spider4.pageProcessor = (PageProcessor) simplePageProcessor0;
      spider4.runAsync();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider5 = spider3.setSpawnUrl(false);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      spider3.pipeline(jsonFilePipeline0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      spider4.startUrls(linkedList0);
      spider5.getCollectorPipeline();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", extras=");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.scheduler(priorityScheduler0);
      Page page0 = Page.fail();
      page0.getJson();
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      PriorityScheduler priorityScheduler1 = new PriorityScheduler();
      Request request0 = new Request();
      request0.setExtras((Map<String, Object>) null);
      spider1.stop();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ", timeOut=");
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("]e(o^");
      Spider spider0 = new Spider(simplePageProcessor0);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(319, threadFactory0);
      Spider spider1 = spider0.thread((ExecutorService) scheduledThreadPoolExecutor0, 319);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider2 = spider1.scheduler(queueScheduler0);
      Page page0 = Page.fail();
      page0.setSkip(false);
      Request request0 = new Request("]e(o^");
      request0.setBinaryContent(false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "bSN3)40zL\"usPT^");
      spider0.runAsync();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Request request1 = new Request();
      request0.setExtras((Map<String, Object>) null);
      PriorityScheduler priorityScheduler1 = new PriorityScheduler();
      priorityScheduler1.pushWhenNoDuplicate(request0, spider1);
      spider0.stop();
      spider2.thread(319);
      Spider spider3 = spider0.setScheduler(queueScheduler0);
      spider3.setEmptySleepTime((-506));
      spider2.setEmptySleepTime((-2551));
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader("bSN3)40zL\"usPT^");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", targetRequests=");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request[] requestArray0 = new Request[1];
      Request request0 = new Request();
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", extras=");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.scheduler(priorityScheduler0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(", extras=", ", extras=");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      Spider spider3 = spider2.thread(5);
      Page.fail();
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      phantomJSDownloader0.setRetryNum((-1127));
      Spider spider4 = spider1.setPipelines(linkedList0);
      priorityScheduler0.getTotalRequestsCount(spider3);
      spider4.runAsync();
      PriorityScheduler priorityScheduler1 = new PriorityScheduler();
      Request request0 = new Request();
      spider4.initComponent();
      request0.setExtras((Map<String, Object>) null);
      Request request1 = request0.addHeader("_cycle_tried_times", ", extras=");
      // Undeclared exception!
      try { 
        spider3.onError(request1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", extras=");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.scheduler(priorityScheduler0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(", extras=", ", extras=");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      Spider spider3 = spider2.thread(5);
      Page page0 = Page.fail();
      page0.getJson();
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      phantomJSDownloader0.setRetryNum((-1127));
      Spider spider4 = spider1.setPipelines(linkedList0);
      priorityScheduler0.getTotalRequestsCount(spider3);
      spider4.runAsync();
      PriorityScheduler priorityScheduler1 = new PriorityScheduler();
      Request request0 = new Request();
      spider4.initComponent();
      request0.setExtras((Map<String, Object>) null);
      Request request1 = request0.addHeader("_cycle_tried_times", ", extras=");
      // Undeclared exception!
      try { 
        spider3.onError(request1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("qIKbw");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("/3@!a>{;Gj@JI");
      Spider spider1 = spider0.setScheduler(fileCacheQueueScheduler0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      ForkJoinTask.getPool();
      Spider spider2 = spider1.thread((ExecutorService) null, 1342);
      Spider spider3 = spider2.clearPipeline();
      spider3.uuid = "/3@!a>{;Gj@JI";
      spider2.checkIfRunning();
      spider0.getStartTime();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("n}", "");
      spider1.downloader(phantomJSDownloader0);
      spider0.isExitWhenComplete();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("]e(o^");
      Spider spider0 = new Spider(simplePageProcessor0);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(319, threadFactory0);
      scheduledThreadPoolExecutor0.toString();
      Spider spider1 = spider0.thread((ExecutorService) scheduledThreadPoolExecutor0, 319);
      Page.fail();
      String[] stringArray0 = new String[0];
      spider0.addUrl(stringArray0);
      Spider.Status.values();
      Request request0 = new Request();
      Request request1 = request0.setCharset("java.util.concurrent.ScheduledThreadPoolExecutor@60b76b33[Running, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0]");
      // Undeclared exception!
      try { 
        spider1.onError(request1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", extras=");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Spider spider1 = spider0.scheduler(priorityScheduler0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("us.codecraft.webmagic.model.HttpRequestBoy", "us.codecraft.webmagic.model.HttpRequestBoy");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      Spider spider3 = spider2.thread(5);
      boolean boolean0 = false;
      Spider spider4 = spider3.setSpawnUrl(false);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      List<Request> list0 = spider2.getAll((Collection<String>) linkedList0);
      spider4.startRequests = list0;
      spider4.pageProcessor = (PageProcessor) simplePageProcessor0;
      Page page0 = Page.fail();
      page0.getJson();
      Request request0 = new Request();
      priorityScheduler0.poll(spider0);
      List<Pipeline> list1 = spider3.getAll((Collection<String>) linkedList0);
      Spider spider5 = spider4.setPipelines(list1);
      // Undeclared exception!
      try { 
        priorityScheduler0.push((Request) null, spider5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("]e(o^");
      Spider spider0 = new Spider(simplePageProcessor0);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("]e(o^");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      Spider spider1 = spider0.scheduler(duplicateRemovedScheduler0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("]e(o^", "us.codecraft.webmagic.model.HttpRequestBoy");
      Spider spider2 = spider0.downloader(phantomJSDownloader0);
      spider2.setDownloader(phantomJSDownloader0);
      spider2.thread(4090);
      spider2.setSpawnUrl(false);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(31);
      Spider spider3 = spider1.thread((ExecutorService) scheduledThreadPoolExecutor0, 31);
      spider3.getAll((Collection<String>) linkedList0);
      Page.fail();
      Request request0 = new Request();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "]e(o^");
      // Undeclared exception!
      try { 
        spider3.onError(request0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", extras=");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Spider spider1 = spider0.setSpawnUrl(false);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("us.codecraft.webmagic.model.HttpRequestBoy", "us.codecraft.webmagic.model.HttpRequestBoy");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      Spider spider3 = spider2.thread(5);
      spider0.sleep(5);
      Spider spider4 = spider3.setSpawnUrl(false);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      List<Request> list0 = spider2.getAll((Collection<String>) linkedList0);
      spider4.startRequests = list0;
      spider4.pageProcessor = (PageProcessor) simplePageProcessor0;
      Page page0 = Page.fail();
      Json json0 = page0.getJson();
      page0.getJson();
      Request request0 = new Request();
      request0.setBinaryContent(true);
      Class<String> class0 = String.class;
      json0.toList(class0);
      // Undeclared exception!
      try { 
        spider3.startUrls((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }
}
