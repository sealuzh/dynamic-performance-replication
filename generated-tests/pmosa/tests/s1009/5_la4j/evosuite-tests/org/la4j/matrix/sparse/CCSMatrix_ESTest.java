/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 14:41:54 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.text.NumberFormat;
import java.util.Locale;
import java.util.Random;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CCSMatrix_ESTest extends CCSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 4;
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CCSMatrix.random(4, 4, (double) 4, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 2582);
      cCSMatrix0.setAll(0);
      CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket("ern(p?+bt!|F*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      ColumnMajorSparseMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      // Undeclared exception!
      try { 
        cCSMatrix0.getColumn(13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 14
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        CCSMatrix.randomSymmetric(16, 1.0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 1000;
      CCSMatrix cCSMatrix0 = new CCSMatrix(1000, 1000);
      cCSMatrix0.toDenseMatrix();
      cCSMatrix0.copyOfShape(1000, 1000);
      cCSMatrix0.getOrElse(1000, 1000, 0.0);
      cCSMatrix0.getColumn(int0);
      cCSMatrix0.getColumn(int0);
      int int1 = 13;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.is(matrixPredicate0);
      cCSMatrix0.updateRow(int1, vectorFunction0);
      int int2 = 853;
      int int3 = 9;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.updateAt(int2, int3, matrixFunction0);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.transformRow(int3, vectorFunction1);
      int int4 = 0;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.transpose();
      cCSMatrix0.eachNonZeroInColumn(int4, vectorProcedure0);
      int int5 = 0;
      cCSMatrix0.getOrElse(int0, int5, int2);
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(int2);
      MatrixPredicate matrixPredicate1 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.non(matrixPredicate1);
      cCSMatrix0.iteratorOfColumn(int2);
      int int6 = 0;
      cCSMatrix1.blankOfShape(int6, int2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.rotate();
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket("Sides of blocks are incompatible!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      SparseMatrix.zero(32, 4547, 4547);
      cCSMatrix0.copyOfShape(32, 0);
      // Undeclared exception!
      try { 
        cCSMatrix0.getColumn(32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 33
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.toColumnMajorSparseMatrix();
      // Undeclared exception!
      try { 
        cCSMatrix0.set(3508, 2374, (-1.0));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '3508' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CCSMatrix.fromCSV("");
      double[][] doubleArray0 = new double[9][4];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-582.7716092566457);
      doubleArray1[2] = 1615.263031093;
      doubleArray1[3] = 868.06;
      doubleArray1[4] = 2.0;
      doubleArray1[5] = (-2136.86751879387);
      doubleArray1[6] = Double.POSITIVE_INFINITY;
      doubleArray1[7] = (-601.10161912699);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (-601.10161912699);
      doubleArray2[1] = 868.06;
      doubleArray2[2] = Double.POSITIVE_INFINITY;
      doubleArray2[3] = 868.06;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 2.0;
      doubleArray2[6] = (-582.7716092566457);
      doubleArray2[7] = 868.06;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = (-601.10161912699);
      doubleArray3[1] = (-2136.86751879387);
      doubleArray3[2] = 2.0;
      doubleArray3[3] = (-582.7716092566457);
      doubleArray3[4] = 0.0;
      doubleArray3[5] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = 868.06;
      doubleArray4[1] = Double.POSITIVE_INFINITY;
      doubleArray4[2] = (-601.10161912699);
      doubleArray4[3] = (-3467.842839484);
      doubleArray4[4] = 1615.263031093;
      doubleArray4[5] = 2.0;
      doubleArray4[6] = 868.06;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = (-582.7716092566457);
      doubleArray5[1] = Double.POSITIVE_INFINITY;
      doubleArray5[2] = (-582.7716092566457);
      doubleArray5[3] = 868.06;
      doubleArray5[4] = Double.POSITIVE_INFINITY;
      doubleArray5[5] = 868.06;
      doubleArray5[6] = Double.POSITIVE_INFINITY;
      doubleArray5[7] = 2.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[9];
      doubleArray6[0] = 2.0;
      doubleArray6[1] = (-3467.842839484);
      doubleArray6[2] = 868.06;
      doubleArray6[3] = 2.0;
      doubleArray6[4] = (-2136.86751879387);
      doubleArray6[5] = Double.POSITIVE_INFINITY;
      doubleArray6[6] = (-601.10161912699);
      doubleArray6[7] = (-7658.0);
      doubleArray6[8] = (-3467.842839484);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[6];
      doubleArray7[0] = (-582.7716092566457);
      doubleArray7[1] = 0.0;
      doubleArray7[2] = Double.POSITIVE_INFINITY;
      doubleArray7[3] = 0.0;
      doubleArray7[4] = (-2136.86751879387);
      doubleArray7[5] = 0.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[0];
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[7];
      doubleArray9[0] = Double.POSITIVE_INFINITY;
      doubleArray9[1] = 868.06;
      doubleArray9[2] = (-601.10161912699);
      doubleArray9[3] = Double.POSITIVE_INFINITY;
      doubleArray9[4] = (-601.10161912699);
      doubleArray9[5] = (-582.7716092566457);
      doubleArray9[6] = (-3467.842839484);
      doubleArray0[8] = doubleArray9;
      // Undeclared exception!
      try { 
        CCSMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1);
      cCSMatrix0.blank();
      cCSMatrix0.determinant();
      // Undeclared exception!
      try { 
        cCSMatrix0.maxInColumn(2601);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2601
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("");
      // Undeclared exception!
      try { 
        cCSMatrix0.iteratorOfColumn(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0, 0);
      Matrix matrix0 = cCSMatrix0.shuffle();
      matrix0.kroneckerProduct(cCSMatrix0);
      cCSMatrix0.iteratorOfColumn(0);
      Matrix matrix1 = matrix0.multiply((double) 0);
      double double0 = cCSMatrix0.min();
      assertEquals(0.0, double0, 0.01);
      
      Matrix.block(matrix0, cCSMatrix0, matrix0, matrix0);
      Matrix matrix2 = cCSMatrix0.blankOfShape(1, 0);
      assertEquals(0, matrix2.columns());
      assertTrue(cCSMatrix0.equals((Object)matrix1));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.maxInRow(2199);
      double double0 = cCSMatrix0.min();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      CCSMatrix.from1DArray(940, 950, doubleArray0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)78;
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CCSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2);
      double double0 = cCSMatrix0.min();
      assertEquals(2, cCSMatrix0.cardinality());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (-1862.334347303);
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (double) 1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(1, 1, doubleArray0);
      cCSMatrix0.toDenseMatrix();
      cCSMatrix0.iteratorOfColumn(1);
      cCSMatrix0.swapColumns(1, 1);
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(1, cCSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 8;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 8;
      doubleArray0[1] = 4730.7708;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (double) 8;
      doubleArray0[4] = (double) 8;
      doubleArray0[5] = (double) 8;
      doubleArray0[6] = (double) 8;
      doubleArray0[7] = (double) 8;
      int[] intArray0 = new int[2];
      intArray0[0] = 8;
      intArray0[1] = 8;
      CCSMatrix cCSMatrix0 = new CCSMatrix(8, 8, 8, doubleArray0, intArray0, intArray0);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(3, (-1922.343));
      cCSMatrix1.removeFirstColumn();
      // Undeclared exception!
      try { 
        cCSMatrix0.subtract(0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 8;
      doubleArray0[1] = 4730.7708;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (double) 8;
      doubleArray0[4] = (double) 8;
      doubleArray0[5] = (double) 8;
      doubleArray0[6] = (double) 8;
      doubleArray0[7] = (double) 8;
      int[] intArray0 = new int[2];
      intArray0[0] = 8;
      intArray0[1] = 8;
      CCSMatrix cCSMatrix0 = new CCSMatrix(8, 8, 8, doubleArray0, intArray0, intArray0);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(3, (-1922.343));
      cCSMatrix1.removeFirstColumn();
      MockRandom mockRandom0 = new MockRandom((-728L));
      // Undeclared exception!
      try { 
        CCSMatrix.random(32, 1837, (-361.6974408662), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1000;
      // Undeclared exception!
      try { 
        CCSMatrix.from1DArray(1568, 2, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      byte[] byteArray0 = new byte[3];
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      cCSMatrix0.toMatrixMarket(numberFormat0);
      CompressedVector compressedVector0 = (CompressedVector)cCSMatrix0.getRow(3741);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      int int0 = 13;
      ((CCSMatrix) columnMajorSparseMatrix0).getRow(13);
      CCSMatrix.diagonal(4, 4);
      int int1 = 0;
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.random(4, 0, (-1229.6683397787838), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1169);
      cCSMatrix0.nonZeroColumnMajorIterator();
      cCSMatrix0.maxInColumn(194);
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      CCSMatrix.block(cCSMatrix1, cCSMatrix0, cCSMatrix0, cCSMatrix1);
      CCSMatrix.block(cCSMatrix1, cCSMatrix0, cCSMatrix1, cCSMatrix0);
      int int0 = (-448);
      int int1 = 2;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.updateAt(int0, int1, matrixFunction0);
      String string0 = "";
      Matrix.fromMatrixMarket(string0);
      cCSMatrix1.columnMajorIterator();
      byte[] byteArray0 = cCSMatrix1.toBinary();
      CCSMatrix.fromBinary(byteArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1185, 1185);
      cCSMatrix0.maxInColumn(0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1679, 1679, 512);
      cCSMatrix0.getOrElse(0, 31, 512);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(29, 2);
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix0, matrix0, matrix0, matrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2582);
      cCSMatrix0.setAll(0);
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      VectorAccumulator vectorAccumulator0 = null;
      cCSMatrix1.foldNonZeroInRows(vectorAccumulator0);
      String string0 = "%%MatrixMarket matrix coordinate real general ";
      CCSMatrix.fromCSV(string0);
      cCSMatrix0.rotate();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (-1862.334347303);
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (double) 1;
      doubleArray0[8] = (double) 1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(1, 1, doubleArray0);
      double double0 = cCSMatrix0.getOrElse(0, 0, Double.POSITIVE_INFINITY);
      assertEquals(1.0, double0, 0.01);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(0, vectorProcedure0);
      assertEquals(1.0, cCSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      CCSMatrix.zero(32, 32);
      cCSMatrix0.setAll(32);
      // Undeclared exception!
      try { 
        cCSMatrix0.removeColumn(5);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      cCSMatrix0.foldNonZero(matrixAccumulator0);
      CCSMatrix cCSMatrix1 = CCSMatrix.fromCSV("");
      assertTrue(cCSMatrix1.equals((Object)cCSMatrix0));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(2232, 32);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cCSMatrix0.is(matrixPredicate0);
      cCSMatrix1.setAll(2232);
      CCSMatrix cCSMatrix2 = CCSMatrix.block(cCSMatrix0, cCSMatrix1, cCSMatrix1, cCSMatrix1);
      int int0 = 1647;
      int int1 = 147;
      cCSMatrix2.swapRows(int0, int1);
      String string0 = "ern(p?+bt!|F*";
      CCSMatrix.fromMatrixMarket(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(1, (double) 1, (Random) mockRandom0);
      mockRandom0.longs();
      cCSMatrix0.setAll(1836.0);
      assertEquals(1836.0, cCSMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      double double0 = cCSMatrix0.max();
      assertEquals(0.0, double0, 0.01);
      
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 2582);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInColumn(0, vectorProcedure0);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(2582, cCSMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      SparseMatrix.zero(32, 32, 32);
      int[] intArray0 = new int[2];
      intArray0[0] = 32;
      intArray0[1] = 32;
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '32' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (-1862.334347303);
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (double) 1;
      doubleArray0[8] = (double) 1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(1, 1, doubleArray0);
      double double0 = cCSMatrix0.max();
      assertEquals(1.0, double0, 0.01);
      
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
      assertEquals(1, cCSMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(497, 497, 8);
      cCSMatrix0.nonZeroAt(1080, 9);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2255);
      cCSMatrix0.isZeroAt(2242, 2242);
      int int0 = (-1366);
      cCSMatrix0.maxInColumn((-1366));
      double double0 = 532.0;
      CCSMatrix.diagonal(int0, double0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(32, 4, 32);
      cCSMatrix0.toBinary();
      // Undeclared exception!
      try { 
        cCSMatrix0.each((MatrixProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(17, 17);
      cCSMatrix0.product();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.eachNonZeroInColumn((-2118), vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2118
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(16, 2274);
      cCSMatrix0.setAll(2274);
      CCSMatrix.block(cCSMatrix1, cCSMatrix1, cCSMatrix0, cCSMatrix1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      byte[] byteArray0 = cCSMatrix0.toBinary();
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 1169;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1169);
      cCSMatrix0.nonZeroColumnMajorIterator();
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix.random(1169, 1169, 0.0, (Random) mockRandom0);
      int int1 = 194;
      cCSMatrix0.maxInColumn(194);
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      CCSMatrix cCSMatrix2 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      int int2 = (-448);
      int int3 = 2;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.updateAt(int2, int3, matrixFunction0);
      String string0 = "";
      Matrix.fromMatrixMarket(string0);
      cCSMatrix0.columnMajorIterator();
      cCSMatrix0.toBinary();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix2.eachInColumn(int1, vectorProcedure0);
      cCSMatrix1.copyOfShape(int0, int1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1);
      CCSMatrix cCSMatrix0 = CCSMatrix.random(1, 1, (double) 1, (Random) mockRandom0);
      Matrix matrix0 = cCSMatrix0.blankOfShape(1, 1);
      assertTrue(matrix0.equals((Object)cCSMatrix0));
      assertEquals(1.0, cCSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(2255, 2255);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.transformColumn(8, vectorFunction0);
      cCSMatrix0.minInColumn(887);
      int[] intArray0 = new int[6];
      intArray0[0] = 2255;
      intArray0[1] = 887;
      intArray0[2] = 887;
      intArray0[3] = 2255;
      intArray0[4] = 2255;
      intArray0[5] = 2255;
      cCSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1455, 1455, 1455);
      cCSMatrix0.setColumn(1455, 49.0);
      int int0 = 1385;
      cCSMatrix0.maxInColumn(int0);
      int[] intArray0 = new int[1];
      intArray0[0] = int0;
      cCSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(7, 16, 7);
      // Undeclared exception!
      try { 
        cCSMatrix1.updateAt(7, 7, (MatrixFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      RowMajorSparseMatrix.diagonal(1, (-1.0));
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1, (-1.0));
      cCSMatrix0.toRowVector();
      int int0 = 887;
      // Undeclared exception!
      try { 
        cCSMatrix0.minInColumn(215);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 215
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (-1862.334347303);
      doubleArray0[3] = (double) 1;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (double) 1;
      doubleArray0[8] = (double) 1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(1, 1, doubleArray0);
      int int0 = cCSMatrix0.rank();
      assertEquals(1, int0);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldNonZeroInRows(vectorAccumulator0);
      double double0 = cCSMatrix0.max();
      assertEquals(1.0, double0, 0.01);
      
      cCSMatrix0.getRow(1);
      Matrix matrix0 = cCSMatrix0.copyOfShape(1, 1);
      assertEquals(1, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2255);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)6).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(6, 3, matrixFunction0);
      cCSMatrix0.minInColumn(887);
      byte[] byteArray0 = new byte[1];
      CCSMatrix.fromBinary(byteArray0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (-1862.334347303);
      doubleArray0[3] = (double) 1;
      doubleArray0[5] = (double) 1;
      doubleArray0[8] = (double) 1;
      doubleArray0[7] = (double) 1;
      doubleArray0[8] = (double) 1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(1, 1, doubleArray0);
      double[][] doubleArray1 = new double[6][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      CCSMatrix cCSMatrix1 = CCSMatrix.from2DArray(doubleArray1);
      assertEquals(0.6666666666666666, cCSMatrix1.density(), 0.01);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((-3441.712466)).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldNonZeroInRows(vectorAccumulator0);
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(1, cCSMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 2020, 0);
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(2020);
      // Undeclared exception!
      try { 
        CCSMatrix.block(columnMajorSparseMatrix0, columnMajorSparseMatrix0, sparseMatrix0, columnMajorSparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 3;
      CCSMatrix cCSMatrix0 = new CCSMatrix(3, 3);
      // Undeclared exception!
      try { 
        cCSMatrix0.foldNonZeroInRows((VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.SparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      RowMajorSparseMatrix.diagonal(1, (-1.0));
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(1);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)1).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      columnMajorSparseMatrix0.update(matrixFunction0);
      // Undeclared exception!
      try { 
        ((CCSMatrix) columnMajorSparseMatrix0).minInColumn(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(1, (-1.0));
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(1);
      columnMajorSparseMatrix0.toRowVector();
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, columnMajorSparseMatrix0);
      CCSMatrix cCSMatrix0 = CCSMatrix.block(matrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0, rowMajorSparseMatrix0);
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = 1;
      intArray0[7] = 1;
      intArray0[8] = 1;
      cCSMatrix0.select(intArray0, intArray0);
      // Undeclared exception!
      try { 
        CCSMatrix.zero(8, 8, 99);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 64.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(48, 3254);
      int[] intArray0 = new int[7];
      intArray0[0] = 3;
      intArray0[1] = 3254;
      intArray0[2] = 3254;
      intArray0[3] = 3254;
      intArray0[4] = 3254;
      intArray0[5] = 3254;
      intArray0[6] = 48;
      cCSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 4;
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(4, (-1.0));
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(4);
      ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      cCSMatrix0.max();
      cCSMatrix0.iteratorOfColumn(4);
      cCSMatrix0.blankOfShape(2640, 4);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = 2629;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(2629, Double.POSITIVE_INFINITY);
      cCSMatrix0.getRow(32);
      int int1 = (-947);
      int int2 = 982;
      cCSMatrix0.nonZeroAt((-947), 982);
      CCSMatrix cCSMatrix1 = CCSMatrix.fromCSV((String) null);
      String string0 = "D";
      CCSMatrix cCSMatrix2 = CCSMatrix.fromCSV(string0);
      cCSMatrix2.toColumnMajorSparseMatrix();
      double double0 = 1878.1983113;
      ColumnMajorSparseMatrix.diagonal(int1, double0);
      String string1 = "";
      SparseMatrix.fromMatrixMarket(string1);
      CCSMatrix.identity(int0);
      int int3 = (-1490);
      cCSMatrix1.nonZeroAt(int2, int3);
      int int4 = (-1223);
      CCSMatrix.identity(int4);
      int int5 = (-459);
      int int6 = 4726;
      CCSMatrix.zero(int3, int5, int6);
      String string2 = "Yk]lZHy_bddp4cZ:9";
      CCSMatrix.fromMatrixMarket(string2);
      CCSMatrix.fromMatrixMarket(string0);
      cCSMatrix1.iteratorOrNonZeroColumns();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(2255, 2255);
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[8];
      intArray1[0] = 2255;
      intArray1[1] = 2255;
      intArray1[2] = 2255;
      intArray1[3] = 2255;
      intArray1[4] = 1368;
      intArray1[5] = 2255;
      intArray1[6] = 2255;
      intArray1[7] = 2255;
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = 1;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(10);
      cCSMatrix0.determinant();
      // Undeclared exception!
      try { 
        cCSMatrix0.update((MatrixFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(3201, 3201);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(2425, 2425, matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(350);
      cCSMatrix0.toBinary();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(0, 334, matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(2255, 2255);
      cCSMatrix0.minInColumn(887);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(887, vectorProcedure0);
      cCSMatrix0.maxInColumn(7);
      cCSMatrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[3] = (-1862.334347303);
      doubleArray0[2] = (-1862.334347303);
      doubleArray0[3] = (-1862.334347303);
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (-1862.334347303);
      doubleArray0[6] = (-1862.334347303);
      CCSMatrix.from1DArray(1, 1, doubleArray0);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(928);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(1, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(4, 4);
      Matrix matrix0 = sparseVector0.toColumnMatrix();
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix0, matrix0, matrix0, matrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '5' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int int0 = 10;
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(4, 2843.6549471);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(4);
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.toRowVector();
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix0, rowMajorSparseMatrix0, matrix0, columnMajorSparseMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '5' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      RowMajorSparseMatrix.diagonal(1, (-1.0));
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(1);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      columnMajorSparseMatrix0.update(matrixFunction0);
      // Undeclared exception!
      try { 
        ((CCSMatrix) columnMajorSparseMatrix0).minInColumn(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      int int0 = 1;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      RowMajorSparseMatrix.diagonal(1, 1);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(1);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)1).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      columnMajorSparseMatrix0.update(matrixFunction0);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      int int1 = (-1541);
      // Undeclared exception!
      try { 
        DenseMatrix.zero(1, (-1541));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      int int0 = 2255;
      CCSMatrix cCSMatrix0 = new CCSMatrix(2255, 2255);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(2255, 2255);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '2256' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (-1862.334347303);
      doubleArray0[3] = (double) 1;
      doubleArray0[5] = (double) 1;
      doubleArray0[8] = (double) 1;
      doubleArray0[7] = (double) 1;
      doubleArray0[8] = (double) 1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(1, 1, doubleArray0);
      double[][] doubleArray1 = new double[6][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      cCSMatrix0.shuffle();
      doubleArray1[4] = doubleArray0;
      double[][] doubleArray2 = new double[3][8];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray0;
      CCSMatrix cCSMatrix1 = CCSMatrix.from2DArray(doubleArray2);
      cCSMatrix0.determinant();
      cCSMatrix0.copyOfShape(1, 2431);
      cCSMatrix1.set((-1494), (-66), (-1862.334347303));
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(2255, 2255);
      cCSMatrix0.subtract((-966.0));
      cCSMatrix0.copyOfShape(2255, 1559);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[3];
      intArray0[0] = 6;
      intArray0[1] = 6;
      intArray0[2] = 3419;
      CCSMatrix cCSMatrix0 = new CCSMatrix(6, 6, 6, doubleArray0, intArray0, intArray0);
      // Undeclared exception!
      try { 
        cCSMatrix0.copyOfShape(1, 1366);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(2255, 2255);
      cCSMatrix0.minInColumn(1722);
      cCSMatrix0.copyOfShape(1722, 7);
      cCSMatrix0.set(0, 1722, 1441.851092338447);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity((byte)49);
      cCSMatrix0.minInColumn(3);
      CCSMatrix cCSMatrix1 = new CCSMatrix();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)49;
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(1559);
      cCSMatrix1.copyOfShape(37, 13);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      double[][] doubleArray1 = new double[1][7];
      doubleArray1[0] = doubleArray0;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray1);
      cCSMatrix0.copyOfShape(1, 1);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1172);
      cCSMatrix0.maxInColumn(194);
      CCSMatrix.diagonal(194, 194);
      cCSMatrix0.copyOfShape(196, 2220);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (double) 1;
      doubleArray0[8] = (double) 1;
      double[][] doubleArray1 = new double[4][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray1);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1.0, 1.0, (-1781.92), 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateColumn(1, vectorFunction0);
      // Undeclared exception!
      try { 
        cCSMatrix0.swapRows(36, 24);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '36' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2255);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(6, 3, matrixFunction0);
      cCSMatrix0.minInColumn(887);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.transformColumn((byte)49, vectorFunction0);
      cCSMatrix0.iteratorOfColumn(13);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1217);
      cCSMatrix0.minInColumn(887);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)1217, (double)887, (double)2, (-1553.564502342369), 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.transformColumn(2, vectorFunction0);
      cCSMatrix0.iteratorOfColumn(8);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      int int0 = 2255;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2255);
      int int1 = 887;
      cCSMatrix0.minInColumn(887);
      cCSMatrix0.shuffle();
      CCSMatrix cCSMatrix1 = new CCSMatrix(int0, int0, int0);
      cCSMatrix0.iteratorOfColumn(int1);
      cCSMatrix1.shuffle();
      int int2 = (-3026);
      CCSMatrix.identity(int2);
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)48;
      byteArray0[1] = byte1;
      byte byte2 = (byte)62;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-74);
      byteArray0[3] = byte3;
      CCSMatrix cCSMatrix2 = CCSMatrix.fromBinary(byteArray0);
      int int3 = (-520);
      cCSMatrix2.copyOfShape(int1, int3);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2255);
      cCSMatrix0.minInColumn(887);
      CCSMatrix cCSMatrix1 = new CCSMatrix(2255, 2255, 2255);
      cCSMatrix0.iteratorOfColumn(887);
      CCSMatrix cCSMatrix2 = CCSMatrix.zero(2255, 2878, 887);
      int[] intArray0 = new int[19];
      intArray0[0] = 887;
      cCSMatrix0.select(intArray0, intArray0);
      cCSMatrix2.iteratorOrNonZeroColumns();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix2.eachInColumn(887, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      int int0 = 1;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (-1862.334347303);
      doubleArray0[3] = (double) 1;
      doubleArray0[5] = (double) 1;
      doubleArray0[8] = (double) 1;
      doubleArray0[7] = (double) 1;
      doubleArray0[8] = (double) 1;
      double[][] doubleArray1 = new double[6][5];
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (double) 1;
      doubleArray2[1] = (double) 1;
      doubleArray2[2] = (-1862.334347303);
      doubleArray2[3] = (-1862.334347303);
      doubleArray2[4] = (-1862.334347303);
      doubleArray2[5] = (double) 1;
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray1);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      CCSMatrix.diagonal(1, 2043.42);
      int int1 = 0;
      CCSMatrix cCSMatrix1 = null;
      try {
        cCSMatrix1 = new CCSMatrix(1, 0, 479, doubleArray0, (int[]) null, (int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 0.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (-1862.334347303);
      doubleArray0[3] = (double) 1;
      doubleArray0[5] = (double) 1;
      doubleArray0[7] = (double) 1;
      doubleArray0[8] = (double) 1;
      double[][] doubleArray1 = new double[5][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray1);
      cCSMatrix0.maxInColumn(1);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (-1862.334347303);
      doubleArray0[3] = (double) 1;
      doubleArray0[5] = (double) 1;
      doubleArray0[8] = (double) 1;
      doubleArray0[7] = (double) 1;
      doubleArray0[8] = (double) 1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(1, 1, doubleArray0);
      ColumnMajorSparseMatrix.zero(1, 1);
      double[][] doubleArray1 = new double[6][2];
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cCSMatrix0.is(matrixPredicate0);
      CCSMatrix.from2DArray(doubleArray1);
      Matrix.identity(641);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)72;
      byteArray0[5] = (byte)72;
      byteArray0[6] = (byte)72;
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      byteArray0[0] = (byte)48;
      CCSMatrix.fromBinary(byteArray0);
      CCSMatrix.zero((int) (byte)48, (int) (byte)48);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (-1862.334347303);
      doubleArray0[3] = (double) 1;
      doubleArray0[5] = (double) 1;
      doubleArray0[8] = (double) 1;
      doubleArray0[7] = (double) 1;
      CCSMatrix.from1DArray(1, 1, doubleArray0);
      double[][] doubleArray1 = new double[6][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray1);
      double[][] doubleArray2 = new double[6][2];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray0;
      doubleArray2[3] = doubleArray0;
      doubleArray2[4] = doubleArray0;
      doubleArray2[5] = doubleArray0;
      cCSMatrix0.minInColumn(1);
  }
}
