/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 10:21:57 GMT 2018
 */

package org.la4j.decomposition;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.decomposition.SingularValueDecompositor;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.SparseMatrix;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SingularValueDecompositor_ESTest extends SingularValueDecompositor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(4, 4, 4);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(4, 752, 752);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(4, 2, 2);
      assertNotNull(denseMatrix0);
      assertEquals(2, denseMatrix0.columns());
      assertEquals(4, denseMatrix0.rows());
      
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      assertNotNull(singularValueDecompositor0);
      assertEquals(2, denseMatrix0.columns());
      assertEquals(4, denseMatrix0.rows());
      
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      assertNotNull(matrixArray0);
      assertEquals(2, denseMatrix0.columns());
      assertEquals(4, denseMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(752, 4, (-946.1154803798));
      assertNotNull(denseMatrix0);
      assertEquals(4, denseMatrix0.columns());
      assertEquals(752, denseMatrix0.rows());
      
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      assertNotNull(singularValueDecompositor0);
      assertEquals(4, denseMatrix0.columns());
      assertEquals(752, denseMatrix0.rows());
      
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      assertNotNull(matrixArray0);
      assertEquals(4, denseMatrix0.columns());
      assertEquals(752, denseMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(4, 752, 100.0);
      assertNotNull(denseMatrix0);
      assertEquals(752, denseMatrix0.columns());
      assertEquals(4, denseMatrix0.rows());
      
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      assertNotNull(singularValueDecompositor0);
      assertEquals(752, denseMatrix0.columns());
      assertEquals(4, denseMatrix0.rows());
      
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      assertNotNull(matrixArray0);
      assertEquals(752, denseMatrix0.columns());
      assertEquals(4, denseMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      int int0 = 32;
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(8);
      assertNotNull(sparseMatrix0);
      assertEquals(8, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(1.0, sparseMatrix0.max(), 0.01);
      assertEquals(8, sparseMatrix0.rows());
      assertEquals(0.125, sparseMatrix0.density(), 0.01);
      assertEquals(8, sparseMatrix0.cardinality());
      
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(sparseMatrix0);
      assertNotNull(singularValueDecompositor0);
      assertEquals(8, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(1.0, sparseMatrix0.max(), 0.01);
      assertEquals(8, sparseMatrix0.rows());
      assertEquals(0.125, sparseMatrix0.density(), 0.01);
      assertEquals(8, sparseMatrix0.cardinality());
      
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      assertNotNull(matrixArray0);
      assertEquals(8, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(1.0, sparseMatrix0.max(), 0.01);
      assertEquals(8, sparseMatrix0.rows());
      assertEquals(0.125, sparseMatrix0.density(), 0.01);
      assertEquals(8, sparseMatrix0.cardinality());
      
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("");
      assertNotNull(denseMatrix0);
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      
      boolean boolean0 = singularValueDecompositor0.applicableTo(sparseMatrix0);
      assertTrue(boolean0);
      assertEquals(8, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(1.0, sparseMatrix0.max(), 0.01);
      assertEquals(8, sparseMatrix0.rows());
      assertEquals(0.125, sparseMatrix0.density(), 0.01);
      assertEquals(8, sparseMatrix0.cardinality());
      
      // Undeclared exception!
      try { 
        singularValueDecompositor0.fail("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("org.la4j.decomposition.AbstractDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(752, 4, 8.932540236408312E-44);
      assertNotNull(denseMatrix0);
      assertEquals(4, denseMatrix0.columns());
      assertEquals(752, denseMatrix0.rows());
      
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      assertNotNull(singularValueDecompositor0);
      assertEquals(4, denseMatrix0.columns());
      assertEquals(752, denseMatrix0.rows());
      
      boolean boolean0 = singularValueDecompositor0.applicableTo(denseMatrix0);
      assertTrue(boolean0);
      assertEquals(4, denseMatrix0.columns());
      assertEquals(752, denseMatrix0.rows());
      
      // Undeclared exception!
      singularValueDecompositor0.decompose();
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(3, 3, 359.244);
      assertNotNull(denseMatrix0);
      assertEquals(3, denseMatrix0.columns());
      assertEquals(3, denseMatrix0.rows());
      
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      assertNotNull(singularValueDecompositor0);
      assertEquals(3, denseMatrix0.columns());
      assertEquals(3, denseMatrix0.rows());
      
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      assertNotNull(matrixArray0);
      assertEquals(3, denseMatrix0.columns());
      assertEquals(3, denseMatrix0.rows());
      
      org.evosuite.runtime.Random.setNextRandom(3);
      org.evosuite.runtime.Random.setNextRandom(3);
  }
}
