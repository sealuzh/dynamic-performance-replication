/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 12:33:43 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HashMap<Double, Boolean> hashMap0 = new HashMap<Double, Boolean>();
      HashMap<Object, Boolean> hashMap1 = new HashMap<Object, Boolean>(hashMap0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      Byte byte0 = new Byte((byte) (-72));
      jSONObject0.append("has", byte0);
      jSONObject0.append("-R^z(/&8:", (Object) null);
      String string0 = jSONObject0.toString((int) (byte) (-72), (int) (byte) (-72));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      Double double0 = new Double((-87.4));
      hashMap0.put(jSONObject0, double0);
      JSONObject jSONObject1 = jSONObject0.put("@U d", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.optJSONObject("@U d");
      assertNotSame(jSONObject2, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("get", (-1L));
      int int0 = jSONObject1.optInt("get");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.put("get", 0.0);
      double double0 = jSONObject0.optDouble("get");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Float, JSONArray> hashMap0 = new HashMap<Float, JSONArray>();
      JSONObject jSONObject1 = jSONObject0.put("&p~q/3-e]y\"Cd{x", (Map) hashMap0);
      Object object0 = jSONObject1.opt("&p~q/3-e]y\"Cd{x");
      assertNotSame(jSONObject1, object0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HashMap<Double, Boolean> hashMap0 = new HashMap<Double, Boolean>();
      HashMap<Object, Boolean> hashMap1 = new HashMap<Object, Boolean>(hashMap0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      Byte byte0 = new Byte((byte) (-72));
      JSONObject jSONObject1 = jSONObject0.append("has", byte0);
      int int0 = jSONObject1.length();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Byte byte0 = new Byte((byte)34);
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.append("", byte0);
      jSONObject0.getString("");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("\n", 269L);
      long long0 = jSONObject0.getLong("\n");
      assertEquals(269L, long0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-11));
      String string0 = JSONObject.valueToString(byte0, (byte) (-11), (byte) (-11));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = JSONObject.valueToString("L.Ynz", 0, 0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HashMap<Long, JSONObject> hashMap0 = new HashMap<Long, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = jSONObject0.remove((String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("", true);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("SphVEQX", (-379));
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[7];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("UI[{q]c4\"1;{McA", (-964.4400737577851));
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Pj");
      String string0 = jSONObject0.optString((String) null);
      assertNotNull(string0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong(" of ", 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      long long0 = jSONObject0.optLong("getreverseBytes", (-1L));
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Long long0 = new Long((-1L));
      JSONObject jSONObject0 = new JSONObject(long0);
      int int0 = jSONObject0.optInt("", 8);
      assertEquals(8, int0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      int int0 = jSONObject0.optInt("] is not a JSONArray.");
      assertEquals(1, jSONObject0.length());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("lTy(\u0004A%'6", 1212.6555);
      assertEquals(1212.6555, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ">=/{8Q0$id]| RX");
      double double0 = jSONObject0.optDouble("] is not a JSONObject.", (double) (-64L));
      assertEquals(3, jSONObject0.length());
      assertEquals((-64.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      boolean boolean0 = jSONObject0.optBoolean("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Pj");
      jSONObject0.has((String) null);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Byte byte0 = new Byte((byte)34);
      JSONObject jSONObject0 = new JSONObject(byte0);
      try { 
        jSONObject0.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "SizkVQnY0 Js");
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HashMap<Long, JSONObject> hashMap0 = new HashMap<Long, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Pj");
      try { 
        jSONObject0.getJSONArray("Pj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Pj\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = JSONObject.doubleToString(722.5228690747);
      assertEquals("722.5228690747", string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HashMap<Short, Double> hashMap0 = new HashMap<Short, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      try { 
        jSONObject0.getDouble("dwyq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"dwyq\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Float, JSONArray> hashMap0 = new HashMap<Float, JSONArray>();
      jSONObject0.put("&p~q/3-e]y\"Cd{x", (Map) hashMap0);
      String string0 = jSONObject0.toString(1815, (-30733247));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 60, 3163);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Double double0 = new Double(970.7242466);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.toString(34, 34);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = JSONObject.quote("get");
      assertEquals("\"get\"", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Pj");
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertEquals(3, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      String string0 = jSONObject0.optString("Null key.", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HashMap<Double, Boolean> hashMap0 = new HashMap<Double, Boolean>();
      HashMap<Object, Boolean> hashMap1 = new HashMap<Object, Boolean>(hashMap0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      double double0 = jSONObject0.optDouble("wai", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Byte byte0 = new Byte((byte)34);
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.opt("] not found.");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Byte byte0 = new Byte((byte)34);
      String string0 = JSONObject.numberToString(byte0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("\n", 269L);
      try { 
        jSONObject0.getBoolean("\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\n\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.get("{\"java.lang.String@0000000002\": java.lang.Integer@0000000003}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\\"java.lang.String@0000000002\\\": java.lang.Integer@0000000003}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HashMap<Double, Boolean> hashMap0 = new HashMap<Double, Boolean>();
      HashMap<Object, Boolean> hashMap1 = new HashMap<Object, Boolean>(hashMap0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Byte byte0 = new Byte((byte)34);
      JSONObject jSONObject0 = new JSONObject(byte0);
      long long0 = jSONObject0.optLong("'", (long) (byte)83);
      assertEquals(1, jSONObject0.length());
      assertEquals(83L, long0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "SizkVQnY0 Js");
      Iterator iterator0 = jSONObject0.keys();
      JSONObject.testValidity(iterator0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("lmy.=\"?Xh:ve1?n5", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter(2059);
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "\"JSONObject[\"");
      jSONObject0.toString((-563));
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      String string0 = JSONObject.valueToString(linkedList0, (byte) (-11), 0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Float, JSONArray> hashMap0 = new HashMap<Float, JSONArray>();
      jSONObject0.putOpt("'", hashMap0);
      jSONObject0.toString(1815, (-30733247));
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 88, 88);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HashMap<Double, Boolean> hashMap0 = new HashMap<Double, Boolean>();
      HashMap<Object, Boolean> hashMap1 = new HashMap<Object, Boolean>(hashMap0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      jSONObject0.append("-R^z(/&8:", (Object) null);
      String string0 = jSONObject0.toString((int) (byte) (-72), (int) (byte) (-72));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Y'eCX");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String[] stringArray0 = new String[8];
      JSONObject jSONObject0 = new JSONObject("-N2/.6Cq_XR=", stringArray0);
      jSONObject0.put("va", (Collection) null);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.append("null", float0);
      StringWriter stringWriter0 = new StringWriter(44);
      jSONObject0.write(stringWriter0);
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Float float0 = new Float((-1915.0F));
      JSONObject jSONObject0 = new JSONObject(float0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ">=/{8Q0$id]| RX");
      JSONArray jSONArray0 = jSONObject0.names();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(3, jSONArray1.length());
      assertNotSame(jSONArray1, jSONArray0);
      assertEquals(3, jSONObject0.length());
      assertNotNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Float float0 = new Float(0.0F);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONObject0.put("", (Collection) linkedList0);
      assertEquals(9, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.put("Ub~G_xZ.jriZcwh", (Object) double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      try { 
        jSONObject0.getJSONObject("/,gSPCb'oT$</ S]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"/,gSPCb'oT$<\\/ S]\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ">=/{8Q0$id]| RX");
      long long0 = jSONObject0.optLong(">=/{8Q0$id]| RX");
      assertEquals(0L, long0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Unclosed comment";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-1430));
      linkedList0.add(integer0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = new JSONArray();
      jSONArray1.put(47, (long) 47);
      JSONObject jSONObject0 = jSONArray0.toJSONObject(jSONArray1);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.append((String) null, hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HashMap<Short, Double> hashMap0 = new HashMap<Short, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("w", 2244.3245229631);
      String string0 = jSONObject1.optString("w");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject1 = jSONObject0.put("@U d", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.optJSONObject("@U d");
      assertNotSame(jSONObject1, jSONObject2);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("Bl})UY_fK>");
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Byte byte0 = new Byte((byte)34);
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.append("", byte0);
      jSONObject0.optJSONArray("");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.optLong("toL");
      jSONObject0.put("toL", 0L);
      jSONObject0.toString(13);
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Long long0 = new Long((-64L));
      String string0 = JSONObject.numberToString(long0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[7];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HashMap<Short, Double> hashMap0 = new HashMap<Short, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "s&)O;h-/");
      Double double0 = new Double((-592.9604));
      JSONObject jSONObject1 = jSONObject0.put("s&)O;h-/", (Object) double0);
      jSONObject1.getLong("s&)O;h-/");
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Float, JSONArray> hashMap0 = new HashMap<Float, JSONArray>();
      jSONObject0.put("Bl})UY_fK>", (Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.getJSONObject("Bl})UY_fK>");
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.put("va", (Object) jSONArray0);
      try { 
        jSONObject0.getJSONObject("va");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"va\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Byte byte0 = new Byte((byte)34);
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.append("", byte0);
      jSONObject0.getJSONArray("");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("", 8448);
      try { 
        jSONObject1.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.put("toL", 0L);
      jSONObject1.getInt("toL");
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("1ld}\"n", (Object) "tri");
      int int0 = jSONObject1.optInt("1ld}\"n", 65);
      assertEquals(65, int0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("wheel.json.JSONArray", true);
      boolean boolean0 = jSONObject0.optBoolean("wheel.json.JSONArray", true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("X c;<'N\"yij", (Object) "X c;<'N\"yij");
      boolean boolean0 = jSONObject1.optBoolean("X c;<'N\"yij");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("wheel.json.JSONArray", false);
      boolean boolean0 = jSONObject0.optBoolean("wheel.json.JSONArray", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-1369.016258));
      assertEquals("-1369.016258", string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HashMap<Double, Boolean> hashMap0 = new HashMap<Double, Boolean>();
      HashMap<Object, Boolean> hashMap1 = new HashMap<Object, Boolean>(hashMap0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      JSONObject jSONObject1 = jSONObject0.append("-R^z(/&8:", (Object) null);
      JSONObject jSONObject2 = jSONObject1.append("-R^z(/&8:", (Object) null);
      assertEquals(1, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "s&)O;h-/");
      jSONObject0.put("IKP=#X0z&6#VG/LyetX", (Object) "s&)O;h-/");
      try { 
        jSONObject0.append("IKP=#X0z&6#VG/LyetX", "s&)O;h-/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[IKP=#X0z&6#VG/LyetX] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject1 = jSONObject0.put("<_uggPznM'a&k47z.H:", (Collection) linkedList0);
      JSONObject jSONObject2 = jSONObject1.accumulate("<_uggPznM'a&k47z.H:", "] is not a JSONObject.");
      assertSame(jSONObject2, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ">=/{8Q0$id]| RX");
      JSONArray jSONArray0 = jSONObject0.names();
      jSONObject0.accumulate("java.lang.Long@0000000075", jSONArray0);
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ">=/{8Q0$id]| RX");
      Boolean boolean0 = Boolean.valueOf(true);
      jSONObject0.accumulate(">=/{8Q0$id]| RX", boolean0);
      long long0 = jSONObject0.optLong(">=/{8Q0$id]| RX");
      assertEquals(4, jSONObject0.length());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      jSONObject0.put("fo", (Map) hashMap0);
      jSONObject0.accumulate("fo", float0);
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("get", (-1L));
      double double0 = jSONObject1.optDouble("get");
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{%l:*6#R.M:$");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 12 of {%l:*6#R.M:$
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{TT4uT'K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 8 of {TT4uT'K
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("8M8[nr;$?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of 8M8[nr;$?
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Long long0 = new Long((-1L));
      JSONObject jSONObject0 = new JSONObject(long0);
      Object object0 = JSONObject.NULL;
      jSONObject0.putOpt("", object0);
      boolean boolean0 = jSONObject0.isNull("");
      assertEquals(2, jSONObject0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Long long0 = new Long((-1L));
      JSONObject jSONObject0 = new JSONObject(long0);
      String string0 = JSONObject.quote((String) null);
      jSONObject0.putOpt("", string0);
      boolean boolean0 = jSONObject0.isNull("");
      assertEquals(2, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String[] stringArray0 = new String[8];
      JSONObject jSONObject0 = new JSONObject("-N2/.6Cq_XR=", stringArray0);
      int int0 = jSONObject0.optInt("");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String[] stringArray0 = new String[8];
      JSONObject jSONObject0 = new JSONObject("-N2/.6Cq_XR=", stringArray0);
      int int0 = jSONObject0.optInt("7-c5[iAD)t\"_Eo1MHl", (-26729013));
      assertEquals((-26729013), int0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Byte byte0 = new Byte((byte)34);
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.put("LcKoMNZk}Q%@g", 55);
      jSONObject0.get("LcKoMNZk}Q%@g");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Double double0 = new Double(970.7242466);
      JSONObject jSONObject0 = new JSONObject(double0);
      boolean boolean0 = jSONObject0.isNull("sh");
      assertEquals(3, jSONObject0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\n\"java.lang.String@0000000006\": [null],\n\"java.lang.String@0000000004\": [java.lang.Byte@0000000008]\n}");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HashMap<Double, Boolean> hashMap0 = new HashMap<Double, Boolean>();
      HashMap<Object, Boolean> hashMap1 = new HashMap<Object, Boolean>(hashMap0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      jSONObject0.put("wai", (Map) hashMap0);
      Object object0 = jSONObject0.get("wai");
      assertNotSame(object0, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put(",V-\ndPU#gL:I", 0.0);
      assertEquals(1, jSONObject0.length());
      
      double double0 = jSONObject0.getDouble(",V-\ndPU#gL:I");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HashMap<Double, Boolean> hashMap0 = new HashMap<Double, Boolean>();
      HashMap<Object, Boolean> hashMap1 = new HashMap<Object, Boolean>(hashMap0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      Object object0 = jSONObject0.remove("C)");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HashMap<Double, Boolean> hashMap0 = new HashMap<Double, Boolean>();
      HashMap<Object, Boolean> hashMap1 = new HashMap<Object, Boolean>(hashMap0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      jSONObject0.put("", 0L);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("bq|3j++D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"bq|3j++D\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HashMap<Long, JSONObject> hashMap0 = new HashMap<Long, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.has("A JSONArray text must start with '['");
      assertFalse(boolean0);
  }
}
