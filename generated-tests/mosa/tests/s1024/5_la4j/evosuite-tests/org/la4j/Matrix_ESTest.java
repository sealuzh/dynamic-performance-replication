/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 15:06:08 GMT 2018
 */

package org.la4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.AdvancedMatrixPredicate;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesAddition;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.VectorFactory;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Matrix_ESTest extends Matrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      // Undeclared exception!
      try { 
        CCSMatrix.zero((-2838), (-2838), (-2838));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2838x-2838
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(261, 261);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.transform(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      // Undeclared exception!
      try { 
        SparseMatrix.fromMatrixMarket("^B,s0<e3qY|x>T");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          CCSMatrix cCSMatrix0 = CCSMatrix.identity(1000);
          // Undeclared exception!
          cCSMatrix0.insert((Matrix) cCSMatrix0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(798, 798);
      Matrix matrix0 = basic2DMatrix0.sliceBottomRight(798, 798);
      Matrix matrix1 = basic2DMatrix0.insert(matrix0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      matrix1.eachInRow(19, vectorProcedure0);
      matrix0.multiplyByItsTranspose();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(2, 2);
      basic2DMatrix0.rotate();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1643);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.constant(6, 1643, 392);
      basic2DMatrix0.subtract((-966.0));
      basic2DMatrix0.insert((Matrix) cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = new CCSMatrix(388, 1643);
      RowMajorSparseMatrix.fromCSV("");
      cCSMatrix0.iteratorOfRow(1643);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(18, 18);
      ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      rowMajorSparseMatrix0.toDenseMatrix();
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      matrix0.equals((Matrix) rowMajorSparseMatrix0, 1.0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      CCSMatrix cCSMatrix0 = CCSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.GAUSS_JORDAN;
      cCSMatrix0.withInverter(linearAlgebra_InverterFactory0);
      cCSMatrix0.withInverter(linearAlgebra_InverterFactory0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = 2801;
      MockRandom mockRandom0 = new MockRandom(0L);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.random(2801, 2801, 0.0, (Random) mockRandom0);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.GAUSS_JORDAN;
      rowMajorSparseMatrix0.withInverter(linearAlgebra_InverterFactory0);
      int int1 = 37;
      Matrix.zero(37, 0);
      Matrix matrix0 = null;
      // Undeclared exception!
      try { 
        mockRandom0.ints(0, (-97));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(771, 771);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        basic2DMatrix0.foldColumn((-773), vectorAccumulator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -773
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      Matrix.unit(13, 6);
      MockRandom mockRandom0 = new MockRandom();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.randomSymmetric(13, mockRandom0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        basic2DMatrix0.updateColumn((-308), vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = Matrix.unit(1000, 771);
      Matrix matrix1 = matrix0.sliceBottomRight(1000, 771);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      matrix1.updateColumn(10, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(0, 0);
      matrix0.sum();
      matrix0.sliceBottomRight(0, 0);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(0);
      Matrix matrix1 = cCSMatrix0.insert(matrix0);
      matrix1.swapRows(0, 0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(0, 0);
      basic2DMatrix0.infinityNorm();
      // Undeclared exception!
      try { 
        SparseMatrix.fromMatrixMarket("ZSgPE'%d");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(0, 0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      matrix0.infinityNorm();
      matrix0.sum();
      SparseMatrix sparseMatrix0 = matrix0.toSparseMatrix();
      matrix0.updateColumn(0, vectorFunction0);
      matrix0.max();
      matrix0.iterator();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      matrix0.update(matrixFunction0);
      Matrix.fromCSV("");
      sparseMatrix0.add(0.0);
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.SMART;
      cCSMatrix0.withInverter(linearAlgebra_InverterFactory0);
      cCSMatrix0.swapRows(2570, 4);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(9, (-1302.0588618224137));
      Matrix matrix0 = columnMajorSparseMatrix0.shuffle();
      matrix0.product();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = 1;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1;
      Matrix matrix0 = Matrix.from1DArray(1, 1, doubleArray0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      matrix0.update(matrixFunction0);
      // Undeclared exception!
      try { 
        matrix0.getRow(2101);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(771, 771);
      Matrix matrix0 = basic2DMatrix0.sliceBottomRight(771, 771);
      matrix0.product();
      // Undeclared exception!
      try { 
        basic2DMatrix0.removeColumn(771);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..770
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      int int0 = 0;
      RowMajorSparseMatrix.identity(0);
      MockRandom mockRandom0 = new MockRandom((-1L));
      // Undeclared exception!
      try { 
        Matrix.randomSymmetric((-10), mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(1022, 0.0, (Random) mockRandom0);
      Matrix matrix0 = columnMajorSparseMatrix0.removeFirstColumn();
      matrix0.diagonalProduct();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      columnMajorSparseMatrix0.removeFirstRow();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(2761, 2761);
      basic2DMatrix0.sliceBottomRight(2761, 2761);
      CRSMatrix cRSMatrix0 = new CRSMatrix(2761, 2761, 2761);
      // Undeclared exception!
      basic2DMatrix0.removeColumn(45);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CCSMatrix cCSMatrix0 = null;
      try {
        cCSMatrix0 = new CCSMatrix(370, (-22), 370);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 370x-22
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(416, 416);
      Matrix matrix0 = basic2DMatrix0.sliceBottomRight(416, 416);
      CCSMatrix cCSMatrix0 = new CCSMatrix(416, 416, 416);
      // Undeclared exception!
      try { 
        matrix0.hadamardProduct(basic2DMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 0x0 does not equal to 416x416.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      int int0 = 2;
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      double[][] doubleArray0 = new double[0][0];
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        cCSMatrix0.insert(matrix0, (-138), (-1498));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -138x-1498
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1906;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from1DArray(0, 1906, doubleArray0);
      columnMajorSparseMatrix0.toColumnVector();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(18, 18);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      matrix0.equals((Matrix) rowMajorSparseMatrix0, 1.0);
      matrix0.norm();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = new CCSMatrix(38, 38, 38);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = cCSMatrix0.toColumnMajorSparseMatrix();
      Matrix.zero(38, 38);
      columnMajorSparseMatrix0.multiply((double) 38);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.CHOLESKY;
      columnMajorSparseMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.zero(Integer.MAX_VALUE, 441);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(0, (-1301.294455));
      Matrix matrix0 = columnMajorSparseMatrix0.shuffle();
      Matrix matrix1 = columnMajorSparseMatrix0.kroneckerProduct(matrix0);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.EIGEN;
      matrix1.withDecompositor(linearAlgebra_DecompositorFactory0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(902, 902);
      cCSMatrix0.removeFirstRow();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = new CCSMatrix(388, 1643);
      // Undeclared exception!
      try { 
        cCSMatrix0.swapRows(1643, 388);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1643' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(0, 0);
      columnMajorSparseMatrix0.toCSV();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1000);
      cCSMatrix0.blankOfRows(1000);
      cCSMatrix0.toCSV();
      cCSMatrix0.insert((Matrix) cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(5, (-8));
      DecimalFormat decimalFormat0 = new DecimalFormat();
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      cCSMatrix0.toCSV(numberFormat0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(0, 0);
      basic2DMatrix0.toMatrixMarket();
      basic2DMatrix0.infinityNorm();
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix.diagonal(10, 0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int int0 = 776;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(776, 0.0);
      SparseVector sparseVector0 = SparseVector.zero(551);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.setRow(1000, (Vector) sparseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 551. Should be: 776.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(264, 264);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(27, (-2102.7));
      DecimalFormat decimalFormat0 = new DecimalFormat();
      String string0 = cCSMatrix1.toCSV((NumberFormat) decimalFormat0);
      RowMajorSparseMatrix.fromCSV(string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = Matrix.unit(1000, 771);
      Matrix matrix1 = matrix0.sliceBottomRight(1000, 771);
      matrix0.columnMajorIterator();
      matrix0.insert(matrix1);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      matrix1.foldRow(1000, vectorAccumulator0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.CHOLESKY;
      cCSMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      DenseMatrix denseMatrix0 = DenseMatrix.identity(0);
      ColumnMajorSparseMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.foldRows(vectorAccumulator0);
      cCSMatrix0.toSparseMatrix();
      VectorAccumulator vectorAccumulator1 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.foldColumns(vectorAccumulator1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = 261;
      CCSMatrix cCSMatrix0 = new CCSMatrix(261, 261);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldRows(vectorAccumulator0);
      int int1 = 5;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(int1);
      basic2DMatrix0.sliceTopLeft(int1, int0);
      basic2DMatrix0.insert((Matrix) cCSMatrix0);
      cCSMatrix0.add((double) int1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(48);
      cCSMatrix0.divide((-861.270356433765));
      ColumnMajorSparseMatrix.fromMatrixMarket("This");
      cCSMatrix0.removeLastColumn();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      MockRandom mockRandom0 = new MockRandom(1L);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(9);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      // Undeclared exception!
      try { 
        cCSMatrix0.insertRow(9, sparseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..8
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Basic2DMatrix.zero(0, 0);
      CCSMatrix.identity(0);
      Matrix.identity(0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(0, (-1301.294455));
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0);
      columnMajorSparseMatrix0.kroneckerProduct(cCSMatrix0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      int int0 = 6;
      double double0 = 1160.1316;
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.removeLastColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(38);
      cCSMatrix0.toColumnMajorSparseMatrix();
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.RAW_QR;
      cCSMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      // Undeclared exception!
      try { 
        cCSMatrix0.minInRow(38);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '38' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInRow(17, vectorProcedure0);
      cCSMatrix0.toSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Matrix.unit(0, 0);
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 160);
      // Undeclared exception!
      try { 
        cCSMatrix0.removeFirstRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(4, 4);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.slice(30, 30, 4, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [30..4][30..4].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.diagonal(30, 38);
      basic2DMatrix0.toRowMajorSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0);
      cCSMatrix0.nonZeroRowMajorIterator();
      cCSMatrix0.swapColumns(0, 0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(0);
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 0;
      // Undeclared exception!
      try { 
        cCSMatrix0.sliceBottomRight((-2905), (-2905));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-2905' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(0, 0);
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.insert((Matrix) cCSMatrix0, 0, 0, 0, 1000);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 0 rows and 1000 cols at 0, 0 in a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(0, 0);
      basic2DMatrix0.infinityNorm();
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(10, 0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      cCSMatrix0.toCSV((NumberFormat) decimalFormat0);
      RowMajorSparseMatrix.fromCSV("0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n");
      // Undeclared exception!
      try { 
        basic2DMatrix0.insert((Matrix) cCSMatrix0, 0, (-4082), (-4082), 4, 2599, 1876);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: -4082, 4
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(38);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = cCSMatrix0.toColumnMajorSparseMatrix();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 38);
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      sparseVector0.to(vectorFactory0);
      columnMajorSparseMatrix0.insertRow(5, sparseVector0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(0, (-1301.294455));
      Matrix matrix0 = columnMajorSparseMatrix0.shuffle();
      Matrix matrix1 = columnMajorSparseMatrix0.kroneckerProduct(matrix0);
      CCSMatrix.identity(0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(sparseVector0).when(vectorFactory0).apply(anyInt());
      Vector vector0 = sparseVector0.to(vectorFactory0);
      // Undeclared exception!
      try { 
        matrix1.insertRow((-610), vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3298, 3298);
      Matrix matrix0 = cCSMatrix0.copyOfColumns(3298);
      Matrix matrix1 = cCSMatrix0.hadamardProduct(matrix0);
      matrix1.minInColumn(3298);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      sparseMatrix0.non(advancedMatrixPredicate0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(1000, 771);
      // Undeclared exception!
      try { 
        basic2DMatrix0.sliceBottomRight(771, 1000);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [771..1000][1000..771].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(0, (-1301.294455));
      Matrix matrix0 = columnMajorSparseMatrix0.shuffle();
      matrix0.trace();
      MockRandom mockRandom0 = new MockRandom(0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(0, (-1301.294455));
      columnMajorSparseMatrix0.setRow(0, 0.0);
      columnMajorSparseMatrix0.rank();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = Matrix.unit(1000, 771);
      Matrix matrix1 = matrix0.sliceBottomRight(1000, 771);
      matrix0.columnMajorIterator();
      matrix0.insert(matrix1);
      Matrix.block(matrix0, matrix1, matrix1, matrix1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = 0;
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)Matrix.unit(0, 0);
      basic2DMatrix0.infinityNorm();
      CRSMatrix cRSMatrix0 = (CRSMatrix)basic2DMatrix0.toSparseMatrix();
      Basic2DMatrix basic2DMatrix1 = (Basic2DMatrix)DenseMatrix.block(cRSMatrix0, basic2DMatrix0, basic2DMatrix0, cRSMatrix0);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      Basic2DMatrix basic2DMatrix2 = (Basic2DMatrix)inPlaceCopyMatrixToMatrix0.apply((RowMajorSparseMatrix) cRSMatrix0, (DenseMatrix) basic2DMatrix0);
      MockRandom mockRandom0 = new MockRandom(0L);
      CCSMatrix cCSMatrix0 = (CCSMatrix)ColumnMajorSparseMatrix.randomSymmetric(2, 0.0, (Random) mockRandom0);
      cRSMatrix0.equals((Matrix) basic2DMatrix0, 2.0);
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getIntegerInstance();
      cCSMatrix0.toCSV((NumberFormat) decimalFormat0);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      basic2DMatrix2.non(advancedMatrixPredicate0);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      ooPlaceMatricesMultiplication0.apply((DenseMatrix) basic2DMatrix1, (RowMajorSparseMatrix) cRSMatrix0);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.block(basic2DMatrix1, cCSMatrix0, (Matrix) null, cCSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(771, 771);
      Matrix matrix0 = basic2DMatrix0.sliceBottomRight(771, 771);
      basic2DMatrix0.insert(matrix0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.add(matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 771x771 does not equal to 0x0.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesAddition", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(261, 261);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.transformColumn(0, vectorFunction0);
      cCSMatrix0.swapColumns(17, 0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(2969, 2969);
      int int0 = (-2170);
      int int1 = (-29);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.sliceBottomRight(2380, (-29));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-29' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = new CCSMatrix(38, 38, 38);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cCSMatrix0.non(matrixPredicate0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = cCSMatrix0.toColumnMajorSparseMatrix();
      columnMajorSparseMatrix0.multiply((Matrix) cCSMatrix0);
      cCSMatrix0.getColumn(38);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = 0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(0, (-1301.294455));
      Matrix matrix0 = columnMajorSparseMatrix0.shuffle();
      // Undeclared exception!
      try { 
        matrix0.removeLastRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom(9967L);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(703, 0.0, (Random) mockRandom1);
      // Undeclared exception!
      try { 
        CCSMatrix.block(columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '704' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = Matrix.unit(747, 747);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      matrix0.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = Matrix.unit(1000, 771);
      Matrix matrix1 = matrix0.sliceBottomRight(1000, 771);
      matrix1.columnMajorIterator();
      Matrix matrix2 = matrix0.insert(matrix1);
      matrix1.insert(matrix2, 1000, 771, 771, (-1), 771, (-1));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = Matrix.unit(1000, 771);
      int int0 = (-17);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      matrix0.is(matrixPredicate0);
      // Undeclared exception!
      try { 
        matrix0.eachInRow((-17), vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -17
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(0, 0);
      basic2DMatrix0.infinityNorm();
      Double double0 = new Double(0);
      SparseMatrix sparseMatrix0 = basic2DMatrix0.toSparseMatrix();
      DenseMatrix denseMatrix0 = DenseMatrix.block(sparseMatrix0, basic2DMatrix0, basic2DMatrix0, sparseMatrix0);
      MockRandom mockRandom0 = new MockRandom(0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(10, 0.0, (Random) mockRandom0);
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      columnMajorSparseMatrix0.toCSV(numberFormat0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n");
      rowMajorSparseMatrix0.mkString(numberFormat0);
      // Undeclared exception!
      try { 
        denseMatrix0.insert((Matrix) rowMajorSparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 10 rows and 10 cols at 0, 0 in a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(1000, 771);
      Matrix matrix1 = matrix0.sliceBottomRight(1000, 771);
      matrix1.mkString("/n`G+KUyN{+4l", "row-major");
      matrix0.columnMajorIterator();
      // Undeclared exception!
      try { 
        matrix1.insert(matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 1000 rows and 771 cols at 0, 0 in a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = 34;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(34, 34);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        matrix0.setRow(34, Double.POSITIVE_INFINITY);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 35
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Matrix.unit(0, 0);
      CCSMatrix cCSMatrix0 = new CCSMatrix(261, 261);
      cCSMatrix0.setRow(0, (double) 0);
      // Undeclared exception!
      try { 
        cCSMatrix0.swapColumns(0, 261);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 262
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(0, 0);
      CCSMatrix cCSMatrix0 = new CCSMatrix(265, 265);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.transformRow(0, vectorFunction0);
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(265, (double) 0, (Random) null);
      cRSMatrix0.equals((Matrix) cCSMatrix0, (double) 265);
      NumberFormat.getCurrencyInstance();
      basic2DMatrix0.insert((Matrix) cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(798, 798);
      Matrix matrix0 = basic2DMatrix0.sliceBottomRight(798, 798);
      matrix0.manhattanNorm();
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) basic2DMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 798 rows and 798 cols at 0, 0 in a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(0, (-1301.294455));
      Vector vector0 = columnMajorSparseMatrix0.toRowVector();
      vector0.hadamardProduct(vector0);
      Matrix.diagonal(0, (-1301.294455));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(0, (-1335.6466862098516));
      columnMajorSparseMatrix0.setRow(0, 0.0);
      columnMajorSparseMatrix0.copyOfColumns(0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      columnMajorSparseMatrix0.is(matrixPredicate0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.toColumnVector();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      CCSMatrix cCSMatrix0 = null;
      try {
        cCSMatrix0 = new CCSMatrix(3, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = Matrix.unit(1000, 771);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(771, 771);
      matrix0.columnMajorIterator();
      Basic2DMatrix basic2DMatrix1 = Basic2DMatrix.identity(771);
      basic2DMatrix1.swapRows((-203), (-203));
      basic2DMatrix0.insert((Matrix) basic2DMatrix1, 771, 67);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      int int0 = 2;
      NumberFormat.getIntegerInstance();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.diagonal(2, 2188.209421902225);
      int[] intArray0 = new int[1];
      Matrix matrix0 = basic2DMatrix0.select(intArray0, intArray0);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) basic2DMatrix0, 2145571374, 2, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 2145571374, 2
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        Matrix.constant((-1418), (-921), (-1418));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(0, 0);
      CCSMatrix cCSMatrix0 = new CCSMatrix(261, 261);
      int int0 = 16;
      matrix0.maxInColumn(1306);
      cCSMatrix0.swapColumns(16, 0);
      cCSMatrix0.removeFirstRow();
      matrix0.iteratorOfRow(int0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      Matrix matrix0 = denseVector0.toRowMatrix();
      // Undeclared exception!
      try { 
        matrix0.trace();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = 1000;
      CCSMatrix.zero(1000, 1000, 1000);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        Matrix.random((-653), 1000, mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(1000, 771);
      basic2DMatrix0.maxInRow(132);
      Matrix matrix0 = basic2DMatrix0.sliceBottomRight(1000, 771);
      basic2DMatrix0.columnMajorIterator();
      basic2DMatrix0.insert(matrix0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.power(804);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(0, 0);
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(261, (double) 0, (Random) null);
      cRSMatrix0.equals((Matrix) cCSMatrix0, (double) 261);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) cRSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 261 rows and 261 cols at 0, 0 in a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(980, 980);
      // Undeclared exception!
      basic2DMatrix0.power(980);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      CCSMatrix cCSMatrix1 = new CCSMatrix(2, 2);
      cCSMatrix1.removeFirstRow();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.diagonal(2, 2188.209421902225);
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply((DenseMatrix) basic2DMatrix0);
      matrix0.toCSV(numberFormat0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("4,788,260,         0\n        0, 4,788,260\n");
      matrix0.norm();
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.determinant();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not compute determinant of non-square matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(0, 0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Double double0 = new Double(0);
      SparseMatrix sparseMatrix0 = matrix0.toSparseMatrix();
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(0, 0);
      MockRandom mockRandom0 = new MockRandom(0L);
      sparseMatrix0.equals(matrix0, (double) 0L);
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      sparseMatrix0.toCSV(numberFormat0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 0, 0);
      rowMajorSparseMatrix0.iteratorOfRow(0);
      matrix0.subtract((Matrix) sparseMatrix0);
      basic2DMatrix0.add((Matrix) rowMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = Matrix.unit(1000, 771);
      matrix0.sliceBottomRight(1000, 771);
      matrix0.columnMajorIterator();
      // Undeclared exception!
      try { 
        matrix0.setColumn(771, (double) 771);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)Matrix.unit(0, 0);
      basic2DMatrix0.infinityNorm();
      CRSMatrix cRSMatrix0 = (CRSMatrix)basic2DMatrix0.toSparseMatrix();
      DenseMatrix.block(cRSMatrix0, basic2DMatrix0, basic2DMatrix0, cRSMatrix0);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      inPlaceCopyMatrixToMatrix0.partiallyApply((DenseMatrix) basic2DMatrix0);
      inPlaceCopyMatrixToMatrix0.apply((RowMajorSparseMatrix) cRSMatrix0, (DenseMatrix) basic2DMatrix0);
      MockRandom mockRandom0 = new MockRandom(0L);
      DenseMatrix.constant(2, 772, 2);
      CCSMatrix cCSMatrix0 = (CCSMatrix)ColumnMajorSparseMatrix.randomSymmetric(2, 0.0, (Random) mockRandom0);
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      cRSMatrix0.equals((Matrix) basic2DMatrix0, 2.4361769768929333);
      cCSMatrix1.columnMajorIterator();
      Basic2DMatrix basic2DMatrix1 = (Basic2DMatrix)basic2DMatrix0.insert((Matrix) cRSMatrix0);
      cCSMatrix1.equals((Object) cRSMatrix0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      basic2DMatrix1.is(matrixPredicate0);
      cCSMatrix0.removeLastRow();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Matrix.unit(0, 0);
      CCSMatrix cCSMatrix0 = new CCSMatrix(261, 261);
      cCSMatrix0.swapColumns(17, 0);
      cCSMatrix0.iteratorOfRow(261);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SMART;
      cCSMatrix0.withSolver(linearAlgebra_SolverFactory0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)Matrix.unit(0, 0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Double double0 = new Double(0);
      CRSMatrix cRSMatrix0 = (CRSMatrix)basic2DMatrix0.toSparseMatrix();
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      inPlaceCopyMatrixToMatrix0.apply((RowMajorSparseMatrix) cRSMatrix0, (DenseMatrix) basic2DMatrix0);
      MockRandom mockRandom0 = new MockRandom(0L);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 10;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(10, 0, doubleArray0);
      cCSMatrix0.rank();
      // Undeclared exception!
      try { 
        cCSMatrix0.power((-756));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The exponent should be positive: -756.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(0, 0);
      basic2DMatrix0.infinityNorm();
      Double double0 = new Double(0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.power((-1717986917));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The exponent should be positive: -1717986917.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)Matrix.unit(0, 0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Double double0 = new Double(0);
      CRSMatrix cRSMatrix0 = (CRSMatrix)basic2DMatrix0.toSparseMatrix();
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      Basic2DMatrix basic2DMatrix1 = (Basic2DMatrix)inPlaceCopyMatrixToMatrix0.apply((RowMajorSparseMatrix) cRSMatrix0, (DenseMatrix) basic2DMatrix0);
      basic2DMatrix0.sliceBottomRight((-610), 0);
      basic2DMatrix0.columnMajorIterator();
      basic2DMatrix1.insert((Matrix) basic2DMatrix0);
      basic2DMatrix0.setColumn((-610), (double) 0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      MockRandom mockRandom0 = new MockRandom(0L);
      mockRandom0.nextGaussian();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(10, 0.0, (Random) mockRandom0);
      columnMajorSparseMatrix0.rank();
      columnMajorSparseMatrix0.removeFirstColumn();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(0, 0);
      basic2DMatrix0.infinityNorm();
      SparseMatrix sparseMatrix0 = basic2DMatrix0.toSparseMatrix();
      DenseMatrix.block(sparseMatrix0, basic2DMatrix0, basic2DMatrix0, sparseMatrix0);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      MockRandom mockRandom0 = new MockRandom((-1L));
      ColumnMajorSparseMatrix.randomSymmetric(5, 1.0, (Random) mockRandom0);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(5);
      cCSMatrix0.rank();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = Matrix.unit(1000, 771);
      Matrix matrix1 = matrix0.sliceBottomRight(1000, 771);
      matrix1.infinityNorm();
      matrix1.min();
      matrix0.columnMajorIterator();
      matrix0.insert(matrix1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(0, 0);
      basic2DMatrix0.infinityNorm();
      SparseMatrix sparseMatrix0 = basic2DMatrix0.toSparseMatrix();
      DenseMatrix.block(sparseMatrix0, basic2DMatrix0, basic2DMatrix0, sparseMatrix0);
      MockRandom mockRandom0 = new MockRandom(0);
      sparseMatrix0.equals((Matrix) basic2DMatrix0, 2.0);
      NumberFormat.getIntegerInstance();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      basic2DMatrix0.transform(matrixFunction0);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.RAW_LU;
      sparseMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(0, 0);
      CCSMatrix cCSMatrix0 = new CCSMatrix(261, 261);
      cCSMatrix0.swapColumns(17, 0);
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(254);
      cRSMatrix0.equals(matrix0, (double) 254);
      cCSMatrix0.equals((Object) cRSMatrix0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(0, 0);
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0);
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(0, (double) 0, (Random) null);
      CRSMatrix cRSMatrix1 = CRSMatrix.randomSymmetric(0, (double) 0, (Random) null);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.foldNonZeroInRows(vectorAccumulator0);
      cRSMatrix0.equals((Object) cRSMatrix1);
      Matrix matrix1 = matrix0.insert((Matrix) cRSMatrix0);
      Integer integer0 = new Integer(0);
      matrix1.equals((Object) integer0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(2984, 2984);
      int int0 = 8;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(2984);
      Matrix matrix0 = Matrix.unit(2984, 2984);
      String string0 = "Z";
      SparseVector sparseVector0 = SparseVector.zero(8);
      Vector vector0 = matrix0.multiply((Vector) sparseVector0);
      Matrix.fromMatrixMarket(string0);
      Vector vector1 = vector0.add((double) int0);
      columnMajorSparseMatrix0.insertColumn(int0, vector1);
      rowMajorSparseMatrix0.add(matrix0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(261, 261);
      cCSMatrix0.swapColumns(17, 0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      // Undeclared exception!
      cCSMatrix0.foldColumns(vectorAccumulator0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(771, 771);
      Matrix matrix0 = basic2DMatrix0.sliceBottomRight(771, 771);
      matrix0.blankOfRows(771);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) basic2DMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 771 rows and 771 cols at 0, 0 in a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(0, 0);
      basic2DMatrix0.infinityNorm();
      Double double0 = new Double(0);
      SparseMatrix sparseMatrix0 = basic2DMatrix0.toSparseMatrix();
      DenseMatrix denseMatrix0 = DenseMatrix.block(sparseMatrix0, basic2DMatrix0, basic2DMatrix0, sparseMatrix0);
      MockRandom mockRandom0 = new MockRandom(0);
      sparseMatrix0.equals((Matrix) basic2DMatrix0, 2.0);
      NumberFormat.getIntegerInstance();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      basic2DMatrix0.transform(matrixFunction0);
      denseMatrix0.insert((Matrix) basic2DMatrix0);
      sparseMatrix0.minInColumn(0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      NumberFormat.getIntegerInstance();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.diagonal(2, 2188.209421902225);
      basic2DMatrix0.blankOfColumns(708);
      int[] intArray0 = new int[1];
      basic2DMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(0, 0);
      basic2DMatrix0.infinityNorm();
      Double double0 = new Double(0);
      SparseMatrix sparseMatrix0 = basic2DMatrix0.toSparseMatrix();
      DenseMatrix.block(sparseMatrix0, basic2DMatrix0, basic2DMatrix0, sparseMatrix0);
      MockRandom mockRandom0 = new MockRandom(0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(10, 0.0, (Random) mockRandom0);
      NumberFormat.getIntegerInstance();
      CRSMatrix.identity(40);
      sparseMatrix0.equals((Matrix) columnMajorSparseMatrix0, 0.0);
      columnMajorSparseMatrix0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(34, 34, 34);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cCSMatrix0.non(matrixPredicate0);
      Matrix matrix0 = cCSMatrix0.add((double) 34);
      Matrix matrix1 = cCSMatrix0.add(matrix0);
      matrix1.divide(0.9444444444444444);
      Matrix matrix2 = cCSMatrix0.insert(matrix1);
      matrix0.add(matrix2);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = 771;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(771);
      // Undeclared exception!
      basic2DMatrix0.multiply((double) 771);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(0, 0);
      basic2DMatrix0.infinityNorm();
      Double double0 = new Double(0);
      basic2DMatrix0.updateRow((-1434), (VectorFunction) null);
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[9];
      intArray1[0] = 0;
      intArray1[1] = (-1434);
      intArray1[2] = 0;
      intArray1[3] = (-1584);
      intArray1[4] = (-1584);
      intArray1[5] = (-1775);
      intArray1[6] = 0;
      intArray1[7] = 0;
      intArray1[8] = (-1434);
      // Undeclared exception!
      try { 
        basic2DMatrix0.select(intArray0, intArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(29, 2);
      // Undeclared exception!
      try { 
        cRSMatrix0.foldColumns((VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vectors$24", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(261, 261);
      MockRandom mockRandom0 = new MockRandom();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.random(214, 17, mockRandom0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(true, false, false, false, false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      // Undeclared exception!
      basic2DMatrix0.non(matrixPredicate0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(0, 0);
      basic2DMatrix0.infinityNorm();
      Double double0 = new Double(0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      basic2DMatrix0.updateRow((-1584), vectorFunction0);
      int[] intArray0 = new int[2];
      // Undeclared exception!
      try { 
        basic2DMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(17, 190.0);
      // Undeclared exception!
      try { 
        cCSMatrix0.insertColumn(34, sparseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..16
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Matrix.unit(0, 0);
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(261, 0, 0);
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(261, (double) 0, (Random) null);
      cRSMatrix0.equals((Matrix) cCSMatrix0, (double) 261);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.LU;
      // Undeclared exception!
      try { 
        cCSMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrix can not be used with this decompositor.
         //
         verifyException("org.la4j.decomposition.AbstractDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int int0 = 9;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(9, 9);
      Double double0 = new Double(9);
      int int1 = (-1551);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        basic2DMatrix0.updateRow((-1551), vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1551
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(0, 0);
      matrix0.shuffle();
      matrix0.infinityNorm();
      matrix0.toString();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(34, 34, 34);
      double[] doubleArray0 = new double[0];
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        cCSMatrix0.insertColumn(3, sparseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 0. Should be: 34.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(34, 34, 34);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 34;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = (double) 34;
      doubleArray0[3] = (-2680.0);
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        cCSMatrix0.insertColumn((-1966), sparseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..33
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(18, 34.0);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      matrix0.add((Matrix) rowMajorSparseMatrix0);
      rowMajorSparseMatrix0.equals(matrix0, 67860.0);
      rowMajorSparseMatrix0.blank();
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.get(Integer.MAX_VALUE, 18);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '2147483647' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.diagonal(2, 2188.209421902225);
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      ooPlaceMatrixByItsTransposeMultiplication0.apply((DenseMatrix) basic2DMatrix0);
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply((DenseMatrix) basic2DMatrix0);
      matrix0.toCSV(numberFormat0);
      Matrix matrix1 = matrix0.insert((Matrix) basic2DMatrix0);
      matrix1.transpose();
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.diagonal(2, 2188.209421902225);
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply((DenseMatrix) basic2DMatrix0);
      matrix0.toCSV((NumberFormat) decimalFormat0);
      Basic2DMatrix basic2DMatrix1 = new Basic2DMatrix(2, 2);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      // Undeclared exception!
      try { 
        SparseMatrix.fromMatrixMarket("%%MatrixMarket");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(34, 34, 34);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(34, 768.2);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.apply((RowMajorSparseMatrix) cRSMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      // Undeclared exception!
      try { 
        cCSMatrix0.insert(matrix0, 10, (-1719), 48, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: 10, -1719
         //
         verifyException("org.la4j.Matrix", e);
      }
  }
}
