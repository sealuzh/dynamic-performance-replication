/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 19:42:37 GMT 2019
 */

package org.la4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ChoiceFormat;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.AdvancedMatrixPredicate;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixMatrixOperation;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesAddition;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceVectorsSubtraction;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Matrix_ESTest extends Matrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(1000, 1);
      Matrix.diagonal(1635, 1000);
      denseMatrix0.subtract((double) 1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(4, 4);
      sparseMatrix0.rank();
      int int0 = 7;
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.random(2413, 1, mockRandom0);
      matrix0.columns();
      matrix0.rank();
      // Undeclared exception!
      try { 
        matrix0.blankOfRows((-1851));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(2, 1.0);
      matrix0.max();
      matrix0.hashCode();
      MatrixFactory<SparseMatrix> matrixFactory0 = (MatrixFactory<SparseMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      matrix0.determinant();
      // Undeclared exception!
      try { 
        matrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = 48;
      CRSMatrix cRSMatrix0 = (CRSMatrix)Matrix.identity(48);
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)cRSMatrix0.subtract(4066.3863080099);
      int int1 = 1790;
      ((Matrix)cRSMatrix0).ensureDimensionsAreCorrect(48, 1790);
      basic2DMatrix0.equals((Matrix) cRSMatrix0, (double) 48);
      cRSMatrix0.toMatrixMarket();
      basic2DMatrix0.infinityNorm();
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.removeFirstRow();
      ChoiceFormat choiceFormat0 = new ChoiceFormat("_&2IrD+d&]mAtV");
      choiceFormat0.applyPattern("0/dWbnxbmY8tB~l");
      // Undeclared exception!
      try { 
        cRSMatrix1.mkString((NumberFormat) choiceFormat0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[][] doubleArray0 = new double[9][8];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.5;
      doubleArray1[1] = (-776.7878501);
      doubleArray1[2] = 2.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 1.1102230246251565E-14;
      doubleArray1[6] = 3.144562311607757E-11;
      doubleArray1[7] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (-776.7878501);
      doubleArray2[1] = 0.5;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 3.144562311607757E-11;
      doubleArray4[2] = 3.144562311607757E-11;
      doubleArray4[3] = 0.5;
      doubleArray4[4] = (-776.7878501);
      doubleArray4[5] = 0.0;
      doubleArray4[6] = 1.1102230246251565E-14;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      doubleArray5[0] = 2.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[1];
      doubleArray6[0] = 0.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[8];
      doubleArray7[0] = 0.5;
      doubleArray7[1] = 0.0;
      doubleArray7[2] = 0.0;
      doubleArray7[3] = (-1557.1311);
      doubleArray7[4] = 0.0;
      doubleArray7[5] = 0.0;
      doubleArray7[6] = (-776.7878501);
      doubleArray7[7] = 0.5;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[9];
      doubleArray8[0] = 1.1102230246251565E-14;
      doubleArray8[1] = 0.0;
      doubleArray8[2] = 2361.89313;
      doubleArray8[3] = (-776.7878501);
      doubleArray8[4] = 1.1102230246251565E-14;
      doubleArray8[5] = (-1557.1311);
      doubleArray8[6] = 3.144562311607757E-11;
      doubleArray8[7] = 0.0;
      doubleArray8[8] = 0.0;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[0];
      doubleArray0[8] = doubleArray9;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        matrix0.power((-3901));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The exponent should be positive: -3901.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(1611);
      DenseMatrix denseMatrix0 = DenseMatrix.constant(1611, 3, 1.0);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.LU;
      rowMajorSparseMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insert((Matrix) denseMatrix0, 3, (-2613), 5, 3121, 2865, 47);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 5, 3121
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = 3;
      Matrix matrix0 = Matrix.identity(3);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      matrix0.update(matrixFunction0);
      // Undeclared exception!
      try { 
        matrix0.minInRow(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(21L);
      Matrix matrix0 = Matrix.random(0, 846, mockRandom0);
      matrix0.maxInColumn((-540));
      Matrix matrix1 = Matrix.diagonal(9, 1.0);
      matrix0.setRow((-735), (double) (-540));
      matrix1.equals(matrix0, (double) (-735));
      // Undeclared exception!
      try { 
        Matrix.fromCSV("UQd]Q&V|5");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DenseMatrix.unit(17, 32);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 463.231443884;
      doubleArray2[1] = 0.75;
      doubleArray2[2] = 1.0;
      doubleArray2[3] = 1.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 0.0;
      doubleArray0[1] = doubleArray2;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = ooPlaceMatricesAddition0.applySymmetric(denseMatrix0, sparseMatrix0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      boolean boolean0 = matrix0.equals((Object) rowMajorSparseMatrix0);
      assertFalse(boolean0);
      assertFalse(denseMatrix0.equals((Object)matrix0));
      assertEquals(5, matrix0.columns());
      assertTrue(rowMajorSparseMatrix0.equals((Object)sparseMatrix0));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DenseMatrix.fromCSV("0.000");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.fromMatrixMarket("%%MatrixMarket vector array real\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected object: vector.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = 1135;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1135, 1135);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      rowMajorSparseMatrix0.updateColumn(920, vectorFunction0);
      int int1 = 1578;
      double double0 = (-966.0);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.transformRow(1578, vectorFunction1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1578
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(0, 1.0);
      double double0 = matrix0.determinant();
      assertEquals(0, matrix0.rows());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(5, 5, mockRandom0);
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(denseMatrix0);
      Matrix matrix1 = matrix0.transpose();
      denseMatrix0.setAll(5);
      Matrix matrix2 = matrix1.power(5);
      assertFalse(matrix2.equals((Object)matrix0));
      assertTrue(matrix1.equals((Object)matrix0));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 247;
      doubleArray0[1] = (double) 247;
      doubleArray0[2] = (-104.0);
      doubleArray0[3] = (double) 247;
      doubleArray0[4] = (double) 247;
      doubleArray0[5] = 2872.66162961759;
      doubleArray0[6] = (double) 247;
      doubleArray0[7] = (double) 247;
      doubleArray0[8] = (double) 247;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(247, 247, doubleArray0);
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        denseMatrix0.insertRow(225, sparseVector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV(",");
      rowMajorSparseMatrix0.rank();
      Matrix matrix0 = rowMajorSparseMatrix0.blank();
      matrix0.hashCode();
      // Undeclared exception!
      try { 
        Matrix.constant((-1879048191), 0, 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-2300.9461823311926);
      doubleArray1[1] = (-3064.012838747);
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 0.0;
      doubleArray0[0] = doubleArray1;
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      MockRandom mockRandom0 = new MockRandom(30L);
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(0, mockRandom0);
      DenseVector denseVector0 = DenseVector.constant(1556, 2724.371864934976);
      Vector vector0 = ooPlaceMatrixByVectorMultiplication0.apply(denseMatrix0, denseVector0);
      // Undeclared exception!
      try { 
        sparseMatrix0.setColumn((-1714), vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 0. Should be: 1.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CRSMatrix cRSMatrix0 = (CRSMatrix)SparseMatrix.zero(47, 57, 47);
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)cRSMatrix0.toDenseMatrix();
      basic2DMatrix0.equals((Matrix) cRSMatrix0, (double) 57);
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      CompressedVector compressedVector0 = (CompressedVector)SparseVector.fromMap(hashMap0, 1950);
      CompressedVector compressedVector1 = (CompressedVector)ooPlaceMatrixByVectorMultiplication0.apply((RowMajorSparseMatrix) cRSMatrix0, (SparseVector) compressedVector0);
      // Undeclared exception!
      try { 
        cRSMatrix0.setRow(47, (Vector) compressedVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 47. Should be: 57.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(1331);
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1331;
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.eachNonZero(matrixProcedure0);
      doubleArray0[1] = (double) (-1883);
      sparseMatrix0.nonZeroIteratorOfColumn((-1883));
      doubleArray0[2] = (double) 1331;
      doubleArray0[3] = (double) 1331;
      doubleArray0[4] = (double) (-1883);
      doubleArray0[5] = (double) 1331;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Vector vector0 = ooPlaceVectorsSubtraction0.apply(denseVector0, denseVector0);
      // Undeclared exception!
      try { 
        sparseMatrix0.insertColumn((-1883), vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..1330
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(30, 30, 30);
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(columnMajorSparseMatrix0);
      matrix0.euclideanNorm();
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SWEEP;
      matrix0.withSolver(linearAlgebra_SolverFactory0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.swapColumns(3506, 22);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3507
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 100;
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      doubleArray0[2] = (double) 100;
      doubleArray0[3] = (double) Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.from1DArray(100, Integer.MAX_VALUE, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = 1048;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(1048, 1048, 1048);
      double double0 = 583.1785181098;
      // Undeclared exception!
      columnMajorSparseMatrix0.removeFirstRow();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = sparseVector0.toColumnMatrix();
      Matrix matrix1 = ooPlaceOuterProduct0.apply(sparseVector0, sparseVector0);
      matrix0.insert(matrix1);
      DenseMatrix denseMatrix0 = DenseMatrix.block(matrix1, matrix1, matrix1, matrix1);
      int int0 = (-1994705483);
      // Undeclared exception!
      try { 
        denseMatrix0.copyOfRows((-1994705483));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1994705483x2
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[][] doubleArray0 = new double[9][7];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-1473.74399437);
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 1396.487772853235;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 1396.487772853235;
      doubleArray2[1] = (-1473.74399437);
      doubleArray2[2] = 1396.487772853235;
      doubleArray2[3] = (-1473.74399437);
      doubleArray2[4] = 1396.487772853235;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = 1.0;
      doubleArray3[1] = 1.0;
      doubleArray3[2] = 1.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = 1900.26;
      doubleArray4[1] = 1.0;
      doubleArray4[2] = 1396.487772853235;
      doubleArray4[3] = 1396.487772853235;
      doubleArray4[4] = 1396.487772853235;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      doubleArray6[0] = 1900.26;
      doubleArray6[1] = 1.0;
      doubleArray6[2] = 1396.487772853235;
      doubleArray6[3] = (-1473.74399437);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[2];
      doubleArray7[0] = (-1473.74399437);
      doubleArray7[1] = 1900.26;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[8];
      doubleArray8[0] = 1900.26;
      doubleArray8[1] = 1900.26;
      doubleArray8[2] = 1.0;
      doubleArray8[3] = (-1473.74399437);
      doubleArray8[4] = 1396.487772853235;
      doubleArray8[5] = (-1473.74399437);
      doubleArray8[6] = 1.0;
      doubleArray8[7] = 1.0;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[7];
      doubleArray9[0] = 1.0;
      doubleArray9[1] = 1396.487772853235;
      doubleArray9[2] = 0.0;
      doubleArray9[3] = 1900.26;
      doubleArray9[4] = 1900.26;
      doubleArray9[5] = 1900.26;
      doubleArray9[6] = (-1473.74399437);
      doubleArray0[8] = doubleArray9;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.SMART;
      matrix0.withInverter(linearAlgebra_InverterFactory0);
      assertEquals(3, matrix0.columns());
      assertEquals(9, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[][] doubleArray0 = new double[4][5];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = (-1026.82306545);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 2635.74555;
      doubleArray1[4] = (-1.0);
      doubleArray1[5] = 1026.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 2635.74555;
      doubleArray2[1] = (-1.0);
      doubleArray2[2] = (-2695.192299067);
      doubleArray2[3] = 2635.74555;
      doubleArray2[4] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = (-1.0);
      doubleArray3[2] = 1026.0;
      doubleArray3[3] = (-2695.192299067);
      doubleArray3[4] = 2635.74555;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = 1829.2448406;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 2635.74555;
      doubleArray4[3] = (-1026.82306545);
      doubleArray4[4] = 2635.74555;
      doubleArray4[5] = (-1.0);
      doubleArray0[3] = doubleArray4;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        denseMatrix0.rank();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      int int0 = 16;
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 16);
      sparseVector0.toRowMatrix();
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      DenseMatrix.diagonal(3035, (-52.0));
      // Undeclared exception!
      try { 
        SparseMatrix.fromMatrixMarket("%%MatrixMarket");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      int int0 = 13;
      MockRandom mockRandom0 = new MockRandom((-1158L));
      DenseMatrix denseMatrix0 = DenseMatrix.random(13, 13, mockRandom0);
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(denseMatrix0);
      mockRandom0.doubles();
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      matrix0.mkString(numberFormat0, "org.la4j.matrix.sparse.CCSMatrix$4", " rows and ");
      // Undeclared exception!
      try { 
        matrix0.getColumn(13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[][] doubleArray0 = new double[4][3];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      inPlaceCopyMatrixToMatrix0.apply(denseMatrix0, denseMatrix0);
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 1.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 1.0;
      doubleArray3[1] = (-1387.8243516879527);
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 1.0;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = 1.0;
      doubleArray4[4] = 0.0;
      doubleArray4[5] = 1.0;
      doubleArray0[3] = doubleArray4;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.applySimple((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        matrix0.minInColumn((-1913002755));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-1913002755' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(7);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.random(7, 7, 1.0, (Random) mockRandom0);
      rowMajorSparseMatrix0.columnMajorIterator();
      rowMajorSparseMatrix0.euclideanNorm();
      mockRandom0.ints(4, 7);
      mockRandom0.longs(2L, 1L, 1530L);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      rowMajorSparseMatrix0.foldRows(vectorAccumulator0);
      Matrix matrix0 = Matrix.randomSymmetric(7, mockRandom0);
      rowMajorSparseMatrix0.toBinary();
      Matrix matrix1 = rowMajorSparseMatrix0.kroneckerProduct(matrix0);
      // Undeclared exception!
      try { 
        matrix1.foldColumn(4, (VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vectors$24", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(702, 702);
      double double0 = denseMatrix0.trace();
      assertEquals(702.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = 4041;
      Matrix matrix0 = Matrix.diagonal(4041, 0.0);
      matrix0.add((double) 4041);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = 13;
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.randomSymmetric(13, mockRandom0);
      double double0 = 0.0;
      String string0 = ";m@v)";
      // Undeclared exception!
      try { 
        matrix0.update((MatrixFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.random(5, 5, mockRandom0);
      matrix0.blankOfRows(0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = 0;
      int int1 = 51;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 51);
      Matrix matrix0 = rowMajorSparseMatrix0.transpose();
      Matrix matrix1 = matrix0.blankOfShape(51, 0);
      matrix1.toCSV();
      rowMajorSparseMatrix0.transpose();
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      SparseVector sparseVector0 = SparseVector.zero(0, 51);
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      sparseVector0.toCSV(numberFormat0);
      Vector vector0 = ooPlaceVectorHadamardProduct0.apply(sparseVector0, sparseVector0);
      vector0.subtract((Vector) sparseVector0);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insertRow(0, vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int int0 = 0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(37, 0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.trace();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(456);
      linkedList0.add(integer0);
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      denseVector0.shuffle();
      Matrix matrix0 = denseVector0.toColumnMatrix();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = matrix0.toColumnMajorSparseMatrix();
      Matrix matrix1 = columnMajorSparseMatrix0.divide(456);
      matrix0.toString();
      matrix1.euclideanNorm();
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.EIGEN;
      denseVector0.blank();
      denseVector0.max();
      matrix0.hashCode();
      matrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      Matrix matrix2 = matrix1.removeFirstRow();
      // Undeclared exception!
      try { 
        matrix2.removeLastRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(4, 4, 0.5);
      int[] intArray0 = new int[7];
      intArray0[0] = 596;
      intArray0[1] = 4;
      intArray0[2] = 4;
      intArray0[3] = 4;
      intArray0[4] = 4;
      intArray0[5] = 4;
      intArray0[6] = 4;
      // Undeclared exception!
      try { 
        denseMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(1000);
      rowMajorSparseMatrix0.rowMajorIterator();
      // Undeclared exception!
      rowMajorSparseMatrix0.norm();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(8, 3716, 3716);
      DenseMatrix denseMatrix0 = DenseMatrix.zero(3716, 100);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.add((Matrix) denseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 8x3716 does not equal to 3716x100.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesAddition", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = 1648;
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(1648, 0.0);
      // Undeclared exception!
      try { 
        denseMatrix0.subtract((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.DenseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 2257.9892752;
      doubleArray1[5] = 1.0;
      doubleArray0[0] = doubleArray1;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(columnMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) columnMajorSparseMatrix0, 2554, 9, 9, 9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 2554, 9
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      int int0 = 1756;
      SparseVector sparseVector0 = SparseVector.zero(1756, 1756);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, sparseVector0);
      matrix0.toColumnMajorSparseMatrix();
      int int1 = (-3088);
      // Undeclared exception!
      try { 
        matrix0.insertRow((-3088), sparseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..1755
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = 2;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (-2935.3319);
      doubleArray0[6] = (double) 2;
      SparseMatrix.from1DArray(2, 2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int int0 = 891;
      Matrix matrix0 = Matrix.zero(891, 37);
      matrix0.toMatrixMarket();
      SparseMatrix sparseMatrix0 = matrix0.toSparseMatrix();
      double[] doubleArray0 = new double[0];
      Matrix.from1DArray(37, 37, doubleArray0);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) sparseMatrix0, 37, 37, 37, 891);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 37 rows and 891 cols at 37, 37 in a 891x37 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      int int0 = 879;
      DenseMatrix.from1DArray(879, 879, (double[]) null);
      SparseMatrix sparseMatrix0 = null;
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[][] doubleArray0 = new double[0][0];
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        matrix0.removeLastColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(37);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      sparseMatrix0.nonZeroColumnMajorIterator();
      sparseMatrix0.updateRow(0, vectorFunction0);
      Matrix matrix0 = sparseMatrix0.multiply((double) 37);
      int[] intArray0 = new int[9];
      intArray0[0] = 397;
      intArray0[1] = 37;
      intArray0[2] = 37;
      intArray0[3] = 0;
      intArray0[4] = 1341;
      intArray0[5] = 0;
      intArray0[6] = 37;
      intArray0[7] = 37;
      intArray0[8] = 37;
      // Undeclared exception!
      try { 
        matrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '397' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(32, 57, 32);
      sparseMatrix0.swapColumns(57, 57);
      DenseMatrix denseMatrix0 = sparseMatrix0.toDenseMatrix();
      boolean boolean0 = denseMatrix0.equals((Matrix) sparseMatrix0, (double) 57);
      assertEquals(57, denseMatrix0.columns());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      Integer integer0 = new Integer((-1));
      linkedList0.add(integer0);
      Matrix matrix1 = matrix0.transformRow((-1), (VectorFunction) null);
      int int0 = 1140;
      // Undeclared exception!
      try { 
        matrix1.insert(matrix0, (-292), 1140, 955, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: 955x-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = 0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(0);
      columnMajorSparseMatrix0.infinityNorm();
      columnMajorSparseMatrix0.manhattanNorm();
      columnMajorSparseMatrix0.setColumn(0, 0.0);
      Matrix matrix0 = columnMajorSparseMatrix0.shuffle();
      matrix0.toCSV();
      matrix0.sum();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      columnMajorSparseMatrix0.foldColumns(vectorAccumulator0);
      matrix0.multiplyByItsTranspose();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.eachInColumn(0, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      DenseMatrix denseMatrix0 = DenseMatrix.unit(10, 10);
      denseMatrix0.max();
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(denseMatrix0, denseMatrix0);
      matrix0.infinityNorm();
      // Undeclared exception!
      try { 
        matrix0.copyOfRows((-571));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -571x10
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(142, 142);
      Matrix matrix0 = rowMajorSparseMatrix0.rotate();
      // Undeclared exception!
      try { 
        matrix0.removeColumn(142);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..141
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = 10;
      long long0 = (-3324L);
      MockRandom mockRandom0 = new MockRandom((-3324L));
      Matrix matrix0 = Matrix.random(10, 10, mockRandom0);
      matrix0.mkString("\"&L\":$)@u#&-L_y)k*v", "\"&L\":$)@u#&-L_y)k*v");
      int int1 = (-2147475222);
      // Undeclared exception!
      try { 
        matrix0.blankOfColumns((-2147475222));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[][] doubleArray0 = new double[1][4];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-1377.22);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-731.0);
      doubleArray1[3] = 704.173545463664;
      doubleArray1[4] = (-1478.2);
      doubleArray1[5] = (-2210.257338703208);
      doubleArray1[6] = 1.0;
      doubleArray1[7] = 0.0;
      doubleArray1[8] = 2150.1209318332;
      doubleArray0[0] = doubleArray1;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.removeRow(2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 187.0970101574583;
      doubleArray1[1] = (-5050.2607);
      doubleArray1[2] = 1.000245979083963;
      doubleArray1[3] = 2633.42;
      doubleArray1[4] = 134.2;
      doubleArray0[0] = doubleArray1;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      decimalFormat0.setPositiveSuffix("org.la4j.Matrices$27");
      decimalFormat0.setParseIntegerOnly(false);
      matrix0.toMatrixMarket((NumberFormat) decimalFormat0);
      SparseMatrix sparseMatrix0 = matrix0.toSparseMatrix();
      sparseMatrix0.rowMajorIterator();
      // Undeclared exception!
      try { 
        sparseMatrix0.updateColumn(4781, (VectorFunction) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '4781' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      int int0 = 2;
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(2, (-3758.2524118289));
      denseMatrix0.toBinary();
      Matrix matrix0 = denseMatrix0.subtract((-3758.2524118289));
      ooPlaceMatrixByItsTransposeMultiplication0.apply(denseMatrix0);
      // Undeclared exception!
      try { 
        matrix0.set(2, 3257, (-2856.20299));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      Vector vector0 = ooPlaceVectorsSubtraction0.apply(sparseVector0, sparseVector0);
      ooPlaceOuterProduct0.ensureApplicableTo(vector0, sparseVector0);
      DenseVector denseVector0 = DenseVector.constant(1, 2432.0);
      DenseVector denseVector1 = DenseVector.zero(1);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, denseVector1);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = 1974.34073;
      doubleArray0[3] = 2432.0;
      doubleArray0[4] = 2432.0;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = 2432.0;
      Vector.fromArray(doubleArray0);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.CHOLESKY;
      matrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      // Undeclared exception!
      try { 
        matrix0.blankOfShape((-737), 1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(1, 638);
      Matrix matrix0 = sparseVector0.toRowMatrix();
      matrix0.sum();
      // Undeclared exception!
      try { 
        matrix0.sliceTopLeft(2509, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(232, 232, 232);
      // Undeclared exception!
      try { 
        denseMatrix0.sliceTopLeft(910, 910);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      SparseVector sparseVector0 = SparseVector.zero(731);
      MockRandom mockRandom0 = new MockRandom();
      DenseVector denseVector0 = DenseVector.random(54, mockRandom0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, denseVector0);
      int int0 = (-2652);
      mockRandom0.nextInt(731);
      // Undeclared exception!
      try { 
        matrix0.swapColumns((-2652), 7);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-2652' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(8);
      Matrix matrix1 = matrix0.copyOfColumns(8);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      CRSMatrix cRSMatrix0 = (CRSMatrix)matrix0.transformColumn(6, vectorFunction0);
      assertTrue(matrix0.equals((Object)matrix1));
      assertEquals(7, cRSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(21L);
      CRSMatrix cRSMatrix0 = (CRSMatrix)Matrix.diagonal(9, 0);
      cRSMatrix0.setColumn(0, (double) 0);
      assertEquals(8, cRSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(2867, (-541.56599978612));
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.updateRow(0, (VectorFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = 4;
      Matrix matrix0 = Matrix.diagonal(4, 4);
      int int1 = 1;
      VectorFunction vectorFunction0 = null;
      // Undeclared exception!
      try { 
        matrix0.transformColumn(1, (VectorFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2134.10016126908);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (-2298.0623318911);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 1.0;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, sparseVector0);
      // Undeclared exception!
      try { 
        matrix0.non((AdvancedMatrixPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextBoolean();
      Matrix matrix0 = Matrix.randomSymmetric(5, mockRandom0);
      matrix0.columnMajorIterator();
      byte[] byteArray0 = new byte[0];
      mockRandom0.nextBytes(byteArray0);
      String string0 = matrix0.mkString("mb]Xr0jz", "mb]Xr0jz");
      assertEquals("0.000mb]Xr0jz0.100mb]Xr0jz0.200mb]Xr0jz0.300mb]Xr0jz0.400mb]Xr0jz0.100mb]Xr0jz0.500mb]Xr0jz0.600mb]Xr0jz0.700mb]Xr0jz0.800mb]Xr0jz0.200mb]Xr0jz0.600mb]Xr0jz0.900mb]Xr0jz0.000mb]Xr0jz0.100mb]Xr0jz0.300mb]Xr0jz0.700mb]Xr0jz0.000mb]Xr0jz0.200mb]Xr0jz0.300mb]Xr0jz0.400mb]Xr0jz0.800mb]Xr0jz0.100mb]Xr0jz0.300mb]Xr0jz0.400mb]Xr0jz", string0);
      
      double double0 = matrix0.determinant();
      assertEquals(0.002339999999999998, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      MockRandom mockRandom0 = new MockRandom(0L);
      DenseMatrix denseMatrix0 = DenseMatrix.random(7, 7, mockRandom0);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.apply(denseMatrix0, denseMatrix0);
      double double0 = matrix0.diagonalProduct();
      assertEquals(7, denseMatrix0.columns());
      assertEquals(7, matrix0.rows());
      assertEquals(7, denseMatrix0.rows());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(1, 1);
      double double0 = matrix0.manhattanNorm();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      SparseVector sparseVector0 = SparseVector.zero(25);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, sparseVector0);
      matrix0.insertColumn(9, sparseVector0);
      matrix0.toRowVector();
      // Undeclared exception!
      try { 
        Matrix.constant((-1228), (-1228), 25);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      int int0 = 15;
      mockRandom0.nextInt(15);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(355, 0.0, (Random) mockRandom0);
      Matrix matrix0 = columnMajorSparseMatrix0.rotate();
      // Undeclared exception!
      try { 
        matrix0.setRow(355, (double) 355);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 356
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(32, mockRandom0);
      Matrix matrix0 = denseMatrix0.multiply(1.0);
      denseMatrix0.swapColumns(32, 32);
      // Undeclared exception!
      try { 
        denseMatrix0.insert(matrix0, 32, 1381, 32, 2772, (-750), 32);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -750x32
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      int int0 = 2;
      int int1 = 8;
      double double0 = 417.467294214;
      DenseMatrix denseMatrix0 = DenseMatrix.constant(8, 8, 417.467294214);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.apply(denseMatrix0, denseMatrix0);
      matrix0.rotate();
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.GAUSSIAN;
      matrix0.withSolver(linearAlgebra_SolverFactory0);
      DenseMatrix denseMatrix1 = DenseMatrix.identity(2);
      Matrix matrix1 = ooPlaceMatricesSubtraction0.apply(denseMatrix1, denseMatrix1);
      Matrix matrix2 = matrix1.copyOfRows(2);
      matrix1.transpose();
      matrix2.toMatrixMarket();
      // Undeclared exception!
      try { 
        denseMatrix0.multiply((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.DenseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[][] doubleArray0 = new double[6][3];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-2108.43);
      doubleArray1[1] = (-2840.6662584747783);
      doubleArray1[2] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = 1.0;
      doubleArray3[1] = (-2840.6662584747783);
      doubleArray3[2] = 1.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = (-2840.6662584747783);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      doubleArray6[0] = 1.0;
      doubleArray6[1] = (-2108.43);
      doubleArray6[2] = (-3316.5);
      doubleArray6[3] = (-2108.43);
      doubleArray6[4] = (-2108.43);
      doubleArray6[5] = (-2108.43);
      doubleArray6[6] = (-2840.6662584747783);
      doubleArray0[5] = doubleArray6;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        denseMatrix0.removeLastColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[][] doubleArray0 = new double[8][1];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 1.0;
      doubleArray3[1] = (-966.0);
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 1754.02;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = (-2370.0666146);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = (-2370.0666146);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[7];
      doubleArray7[0] = 0.0;
      doubleArray7[1] = 1754.02;
      doubleArray7[2] = 1754.02;
      doubleArray7[3] = (-2370.0666146);
      doubleArray7[4] = 0.0;
      doubleArray7[5] = 1754.02;
      doubleArray7[6] = 0.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[3];
      doubleArray8[0] = 0.0;
      doubleArray8[1] = (-966.0);
      doubleArray8[2] = (-966.0);
      doubleArray0[7] = doubleArray8;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = columnMajorSparseMatrix0.rotate();
      int[] intArray0 = new int[7];
      intArray0[0] = (-782);
      intArray0[1] = (-1587);
      intArray0[2] = (-2151);
      intArray0[3] = (-356);
      intArray0[4] = (-1545);
      intArray0[5] = (-2146747955);
      intArray0[6] = (-2146741856);
      // Undeclared exception!
      try { 
        matrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-782' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(5, 5);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(5, 2179.138);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, columnMajorSparseMatrix0);
      double double0 = matrix0.sum();
      assertEquals(0.0, double0, 0.01);
      assertEquals(5, columnMajorSparseMatrix0.rows());
      assertEquals(5, columnMajorSparseMatrix0.columns());
      assertTrue(rowMajorSparseMatrix0.equals((Object)matrix0));
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(7, 7);
      Matrix matrix0 = columnMajorSparseMatrix0.multiplyByItsTranspose();
      matrix0.blank();
      columnMajorSparseMatrix0.columns();
      columnMajorSparseMatrix0.removeFirstColumn();
      // Undeclared exception!
      try { 
        Matrix.fromCSV("Check your map: Index must be 0..n-1");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = 10;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(10);
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(10, mockRandom0);
      denseMatrix0.iteratorOfRow(10);
      // Undeclared exception!
      columnMajorSparseMatrix0.kroneckerProduct(denseMatrix0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = 96;
      int int1 = 37;
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.random(96, 37, mockRandom0);
      DenseVector denseVector0 = DenseVector.zero(37);
      Matrix matrix1 = denseVector0.toColumnMatrix();
      int int2 = 587;
      int int3 = (-1459);
      int int4 = 2936;
      int int5 = 355;
      // Undeclared exception!
      try { 
        matrix0.insert(matrix1, 2936, 355);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 2936 rows and 355 cols at 0, 0 in a 96x37 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(2336, 2075);
      Matrix matrix0 = columnMajorSparseMatrix0.transpose();
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) columnMajorSparseMatrix0, (-2772), (-2772));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -2772x-2772
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(37, 37);
      double[][] doubleArray0 = new double[9][3];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 37;
      doubleArray1[1] = (double) 37;
      doubleArray1[2] = (double) 37;
      doubleArray1[3] = (double) 37;
      doubleArray1[4] = (double) 37;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) 37;
      doubleArray2[1] = (double) 37;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = 773.72;
      doubleArray3[1] = (double) 37;
      doubleArray3[2] = (double) 37;
      doubleArray3[3] = (double) 37;
      doubleArray3[4] = (double) 37;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = (double) 37;
      doubleArray4[1] = (double) 37;
      doubleArray4[2] = 773.72;
      doubleArray4[3] = (double) 37;
      doubleArray4[4] = (double) 37;
      doubleArray4[5] = 773.72;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      doubleArray5[0] = 773.72;
      doubleArray5[1] = (double) 37;
      doubleArray5[2] = 773.72;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[4];
      doubleArray7[0] = 0.0;
      doubleArray7[1] = (double) 37;
      doubleArray7[2] = 773.72;
      doubleArray7[3] = (double) 37;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[9];
      doubleArray8[0] = (double) 37;
      doubleArray8[1] = (double) 37;
      doubleArray8[2] = (double) 37;
      doubleArray8[3] = (double) 37;
      doubleArray8[4] = 0.0;
      doubleArray8[5] = 773.72;
      doubleArray8[6] = 0.0;
      doubleArray8[7] = (double) 37;
      doubleArray8[8] = (double) 37;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[7];
      doubleArray9[0] = (double) 37;
      doubleArray9[1] = 773.72;
      doubleArray9[2] = 773.72;
      doubleArray9[3] = 0.0;
      doubleArray9[4] = 773.72;
      doubleArray9[5] = 1.0;
      doubleArray9[6] = (double) 37;
      doubleArray0[8] = doubleArray9;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        matrix0.hadamardProduct(denseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 37x37 does not equal to 9x5.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = 6;
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(6, mockRandom0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      denseMatrix0.is(matrixPredicate0);
      // Undeclared exception!
      try { 
        mockRandom0.longs((-1575L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size must be non-negative
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 3);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, sparseVector0);
      matrix0.equals((Object) "Ist-yfS");
      // Undeclared exception!
      try { 
        matrix0.sliceBottomRight(3, 895);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [3..3][895..3].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(2502, 277, 277);
      double double0 = new Integer(4251);
      DenseVector denseVector0 = DenseVector.unit(2502);
      denseVector0.toDiagonalMatrix();
      denseVector0.toCSV();
      // Undeclared exception!
      try { 
        denseMatrix0.multiply((Vector) denseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given vector should have the same length as number of columns in the given matrix: 2502 does not equal to 277.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(44L);
      Matrix matrix0 = Matrix.random(7, 7, mockRandom0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 7;
      doubleArray0[1] = (double) 44L;
      doubleArray0[2] = (double) 7;
      doubleArray0[3] = (double) 44L;
      doubleArray0[4] = (double) 44L;
      String[] stringArray0 = new String[7];
      stringArray0[0] = " matrix.";
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      matrix0.transform(matrixFunction0);
      stringArray0[1] = "z%";
      stringArray0[2] = "yu.";
      stringArray0[3] = "Ist-yfS";
      stringArray0[4] = "E]rxPB4L";
      stringArray0[5] = "]sh_6(h~ S(G";
      stringArray0[6] = "";
      ChoiceFormat choiceFormat0 = null;
      try {
        choiceFormat0 = new ChoiceFormat(doubleArray0, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array and limit arrays must be of the same length.
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(4116L);
      mockRandom0.nextFloat();
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(9, mockRandom0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte) (-78);
      byteArray0[7] = (byte)31;
      mockRandom0.nextBytes(byteArray0);
      Matrix matrix0 = denseMatrix0.transpose();
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      numberFormat0.setGroupingUsed(false);
      matrix0.mkString(numberFormat0);
      // Undeclared exception!
      try { 
        denseMatrix0.foldRows((VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vectors$24", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 1.0;
      double double0 = 24.9;
      doubleArray1[1] = 24.9;
      doubleArray1[2] = (-2031.0742);
      doubleArray0[0] = doubleArray1;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      int int0 = 37;
      // Undeclared exception!
      try { 
        matrix0.minInRow(37);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(21L);
      Matrix matrix0 = Matrix.random(0, 846, mockRandom0);
      matrix0.maxInColumn((-540));
      assertEquals(0, matrix0.rows());
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)Matrix.diagonal(9, 1.0);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.1111111111111111, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2481L);
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(3, mockRandom0);
      denseMatrix0.min();
      // Undeclared exception!
      try { 
        denseMatrix0.foldColumns((VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vectors$24", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = 405;
      long long0 = (-621L);
      MockRandom mockRandom0 = new MockRandom((-621L));
      // Undeclared exception!
      Matrix.randomSymmetric(405, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1597.19105772116;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 1597.19105772116;
      doubleArray2[1] = 1597.19105772116;
      doubleArray2[2] = 1.0;
      doubleArray2[3] = 0.0;
      doubleArray0[1] = doubleArray2;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        matrix0.slice(43, 32, 5, 43);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [43..5][32..43].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      Matrix matrix0 = denseVector0.toRowMatrix();
      matrix0.toCSV();
      Vector vector0 = matrix0.toRowVector();
      SparseMatrix sparseMatrix0 = matrix0.toSparseMatrix();
      sparseMatrix0.columnMajorIterator();
      int int0 = 32;
      Integer integer0 = new Integer((-2147479502));
      linkedList0.add(integer0);
      denseVector0.add(vector0);
      DenseVector.fromCSV(" ");
      int int1 = 3392;
      long long0 = (-227L);
      // Undeclared exception!
      try { 
        sparseMatrix0.setColumn(32, 1.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '32' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = 670;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(670, 670);
      int int1 = 378;
      double double0 = 1.0;
      // Undeclared exception!
      sparseMatrix0.removeRow(378);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(6, 13, 13);
      // Undeclared exception!
      try { 
        denseMatrix0.determinant();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not compute determinant of non-square matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.block((Matrix) null, (Matrix) null, (Matrix) null, (Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(13, (-1.0));
      columnMajorSparseMatrix0.columns();
      Matrix matrix0 = columnMajorSparseMatrix0.copyOfRows(13);
      Matrix matrix1 = columnMajorSparseMatrix0.sliceBottomRight(13, 13);
      matrix1.rank();
      assertEquals(0, matrix1.rows());
      assertEquals(0, matrix1.columns());
      
      Matrix matrix2 = Matrix.fromCSV("");
      Matrix matrix3 = matrix0.shuffle();
      assertTrue(matrix3.equals((Object)columnMajorSparseMatrix0));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 13;
      doubleArray0[1] = (double) 3;
      Matrix matrix4 = Matrix.from1DArray(13, 3, doubleArray0);
      org.evosuite.runtime.Random.setNextRandom(13);
      matrix0.product();
      matrix2.setRow(19, 1.0);
      matrix4.columnMajorIterator();
      assertEquals(3, matrix4.columns());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(32, 0.0);
      Matrix matrix0 = columnMajorSparseMatrix0.rotate();
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.block(matrix0, columnMajorSparseMatrix0, matrix0, columnMajorSparseMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '33' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = 1;
      Matrix matrix0 = Matrix.unit(1, 17);
      // Undeclared exception!
      try { 
        matrix0.power(17);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of rows in the left-hand matrix should be equal to the number of columns in the right-hand matrix: 1 does not equal to 17.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.zero(Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 32;
      doubleArray0[1] = (double) 17;
      doubleArray0[2] = (double) 32;
      doubleArray0[3] = (double) 32;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 32;
      doubleArray0[6] = (double) 32;
      Matrix matrix0 = Matrix.from1DArray(17, 32, doubleArray0);
      // Undeclared exception!
      try { 
        matrix0.slice(17, 1000, 17, 17);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [17..17][1000..17].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = 27;
      Matrix matrix0 = Matrix.zero(27, 27);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix0.transformRow(27, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = (-5597.810231702475);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 1.0;
      doubleArray2[1] = (-5597.810231702475);
      doubleArray2[2] = (-5597.810231702475);
      doubleArray2[3] = 1.0;
      doubleArray2[4] = 1.0;
      doubleArray2[5] = 1.0;
      doubleArray2[6] = 1.0;
      doubleArray2[7] = (-5597.810231702475);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (-5597.810231702475);
      doubleArray3[1] = 1.0;
      doubleArray3[2] = (-5597.810231702475);
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 1.0;
      doubleArray0[2] = doubleArray3;
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      sparseMatrix0.swapRows(0, 0);
      assertEquals(1.0, sparseMatrix0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        Matrix.zero(0, (-3005));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Matrix matrix0 = Matrix.constant(37, 37, 37);
      // Undeclared exception!
      try { 
        matrix0.eachInRow(3117, (VectorProcedure) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(2502, 277, 277);
      // Undeclared exception!
      try { 
        denseMatrix0.maxInColumn((-477));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Matrix.diagonal(22, 0.0);
      int int0 = 3;
      double[][] doubleArray0 = new double[7][8];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 3;
      doubleArray1[1] = (double) 3;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) 22;
      doubleArray2[1] = (double) 3;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (double) 22;
      doubleArray2[4] = (double) 3;
      doubleArray2[5] = (double) 3;
      doubleArray2[6] = 0.0;
      doubleArray2[7] = (double) 3;
      doubleArray2[8] = (double) 22;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = (double) 22;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      doubleArray5[0] = (double) 22;
      doubleArray5[1] = (double) 22;
      doubleArray5[2] = (double) 3;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[3];
      doubleArray7[0] = (double) 22;
      doubleArray7[1] = 0.0;
      doubleArray7[2] = 0.0;
      doubleArray0[6] = doubleArray7;
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)Matrix.fromCSV(" ");
      int[] intArray0 = new int[4];
      int int0 = 48;
      intArray0[0] = 48;
      intArray0[1] = (-206);
      intArray0[2] = (-1789569705);
      // Undeclared exception!
      try { 
        ((Matrix)basic2DMatrix0).ensureIndexesAreInBounds(1563, (-1789569705));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1563' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.fromCSV("/^aRi!4zhro");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Matrix matrix0 = Matrix.constant(4, 4, 4);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = matrix0.toRowMajorSparseMatrix();
      assertEquals(4, matrix0.columns());
      assertEquals(16, rowMajorSparseMatrix0.cardinality());
      assertEquals(4.0, rowMajorSparseMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = 48;
      MockRandom mockRandom0 = new MockRandom(0L);
      SparseVector sparseVector0 = SparseVector.random(48, 0.0, (Random) mockRandom0);
      Matrix matrix0 = sparseVector0.toColumnMatrix();
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.block(matrix0, matrix0, matrix0, matrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '49' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(1237, 1237);
      Matrix matrix1 = matrix0.copyOfShape(1237, 1237);
      int int0 = (-772);
      // Undeclared exception!
      try { 
        matrix1.blankOfShape(1237, (-772));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 1237x-772
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("");
      denseMatrix0.setColumn(3, (double) 3);
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        SparseMatrix.fromMatrixMarket("Can not remove from this iterator.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      Matrix.random(1801, 1801, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      SparseVector sparseVector0 = SparseVector.zero(6);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, sparseVector0);
      // Undeclared exception!
      try { 
        matrix0.insertColumn(9, sparseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..5
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      SparseMatrix sparseMatrix0 = null;
      DenseMatrix denseMatrix0 = DenseMatrix.zero(251, 251);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(251);
      ooPlaceMatrixHadamardProduct0.apply(denseMatrix0, rowMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        ooPlaceMatrixHadamardProduct0.applySymmetric((SparseMatrix) null, (SparseMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = 0;
      Matrix matrix0 = Matrix.unit(0, 0);
      matrix0.iteratorOfColumn(4);
      matrix0.hashCode();
      // Undeclared exception!
      try { 
        SparseMatrix.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = (-2657);
      int int1 = 425;
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.zero((-2657), (-2657), 425);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2657x-2657
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(0, 0, mockRandom0);
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(denseMatrix0);
      int int1 = 16;
      matrix0.maxInRow(16);
      // Undeclared exception!
      try { 
        mockRandom0.nextBytes((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int int0 = 456;
      Integer integer0 = new Integer(456);
      linkedList0.add(integer0);
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      denseVector0.shuffle();
      Matrix matrix0 = denseVector0.toColumnMatrix();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = matrix0.toColumnMajorSparseMatrix();
      Matrix matrix1 = columnMajorSparseMatrix0.divide(456);
      matrix0.toString();
      matrix1.euclideanNorm();
      denseVector0.blank();
      denseVector0.max();
      matrix0.hashCode();
      matrix1.removeFirstRow();
      matrix1.removeLastRow();
      NumberFormat.getInstance();
      Matrix matrix2 = Matrix.constant(456, 456, 456.0);
      matrix2.toColumnVector();
      // Undeclared exception!
      matrix2.determinant();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = (-1932735282);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.identity((-1932735282));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      int int0 = 4;
      DenseMatrix denseMatrix0 = DenseMatrix.identity(4);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.apply(denseMatrix0, denseMatrix0);
      Matrix matrix1 = matrix0.transpose();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix1.foldColumn(4, vectorAccumulator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 17);
      DenseVector denseVector0 = DenseVector.constant(17, 1566.0);
      ooPlaceOuterProduct0.apply(sparseVector0, denseVector0);
      MatrixMatrixOperation<Vector> matrixMatrixOperation0 = (MatrixMatrixOperation<Vector>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        SparseMatrix.identity((-487));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int int0 = 8;
      Matrix matrix0 = Matrix.from1DArray(8, 8, (double[]) null);
      matrix0.blankOfRows(8);
      // Undeclared exception!
      try { 
        matrix0.min();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(1357);
      Matrix matrix1 = Matrix.unit(1357, 1357);
      // Undeclared exception!
      matrix0.insert(matrix1);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      int int0 = (-1747);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.diagonal((-1747), 3.144562311607757E-11);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }
}
