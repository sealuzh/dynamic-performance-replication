/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 03:10:14 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import okio.Buffer;
import okio.BufferedSink;
import okio.ByteString;
import okio.HashingSink;
import okio.HashingSource;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteString_ESTest extends ByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.EMPTY.indexOf(byteArray0);
      assertEquals((-1), int0);
      
      ByteString byteString1 = byteString0.sha1();
      int int1 = byteString0.indexOf(byteString1);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("Unexpeted cod8 oiot: ", charset0);
      String string0 = byteString0.base64();
      assertEquals("VW5leHBldGVkIGNvZDggb2lvdDog", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      ByteString byteString1 = byteString0.substring((int) (byte)0);
      int int0 = byteString1.indexOf(byteString0);
      assertEquals(0, int0);
      
      String string0 = byteString0.toString();
      assertEquals("[hex=cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e]", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha1();
      ByteString byteString2 = byteString0.hmacSha256(byteString1);
      byteString0.EMPTY.hex();
      String string0 = byteString2.toString();
      assertEquals("[hex=0e4838836a88eee82888468846306a8286a2048088638e0a2646ca0ac8e48cee]", string0);
      
      int int0 = ByteString.codePointIndexToCharIndex("[hex=0e4b3b536adb9eef2dbf46d846306a7256a204f0bf635e0a2646ca0ac1948ce9]", 39);
      assertEquals(39, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = ByteString.codePointIndexToCharIndex("beginIndex < 0: ", 50);
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)6;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      ByteString byteString2 = new ByteString(byteArray0);
      byteString1.EMPTY.hmacSha512(byteString2);
      int int0 = byteString0.lastIndexOf(byteString1, 69);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.EMPTY.hex();
      assertEquals("", string0);
      
      ByteString byteString1 = new ByteString(byteArray0);
      ByteString byteString2 = byteString1.EMPTY.sha256();
      boolean boolean0 = byteString0.equals(byteString1);
      assertTrue(boolean0);
      
      int int0 = byteString2.lastIndexOf(byteString1);
      assertEquals((-1), int0);
      
      ByteString byteString3 = ByteString.encodeUtf8("");
      assertFalse(byteString3.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("Unexpected code point: ", charset0);
      byteString0.utf8();
      byteString0.utf8();
      ByteString byteString1 = byteString0.sha1();
      byteString1.string(charset0);
      int int0 = byteString0.indexOf(byteString1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)23;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.lastIndexOf(byteArray0);
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 1684);
      byteArrayInputStream0.skip((byte)0);
      ByteString byteString0 = ByteString.read(byteArrayInputStream0, 6);
      ByteString byteString1 = byteString0.sha1();
      byteString0.lastIndexOf(byteArray0, 6);
      ByteString byteString2 = new ByteString(byteArray0);
      ByteString byteString3 = byteString1.sha512();
      String string0 = byteString3.toString();
      assertEquals(12, byteArrayInputStream0.available());
      assertEquals("[hex=83388e8883838888e8e388888e8e3888883883e83e888e8888388388383888888e8e88883388883e8e338388888e88e8388838e888e8e888883e8888838e3388]", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      byteString0.toString();
      ByteString byteString1 = hashingSink0.hash();
      byteString0.lastIndexOf(byteString1);
      byte[] byteArray0 = byteString0.toByteArray();
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      ByteString byteString1 = byteString0.substring((int) (byte)0);
      hashingSink0.toString();
      int int0 = byteString1.compareTo(byteString0);
      assertEquals(0, int0);
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("oKR");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: oKR
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)54;
      ByteString byteString0 = new ByteString(byteArray0);
      Object object0 = new Object();
      boolean boolean0 = byteString0.EMPTY.equals(object0);
      assertFalse(boolean0);
      
      byteString0.utf8();
      ByteString byteString1 = byteString0.sha512();
      byte[] byteArray1 = new byte[9];
      int int0 = byteString1.lastIndexOf(byteArray1, (int) (byte)9);
      assertEquals((-1), int0);
      
      byteString0.base64();
      ByteString byteString2 = ByteString.decodeHex("66");
      assertEquals(1, byteString2.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)15;
      ByteString byteString0 = ByteString.of(byteArray0);
      ByteString byteString1 = byteString0.sha1();
      byteString0.equals(byteArray0);
      byteString0.utf8();
      byteString1.sha512();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      byteString0.base64();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("DwAAAAAAAAAA");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: w
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.lastIndexOf(byteArray0, 40);
      byteString0.base64();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("bEl-=Fl*AV[~wnF.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: bEl-=Fl*AV[~wnF.
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.utf8();
      byteString0.lastIndexOf(byteArray0, 100);
      byteString0.base64();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("AA==");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: =
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.asByteBuffer();
      int int0 = byteString0.indexOf(byteArray0, 27);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("Unexpected code point: ", charset0);
      byteString0.utf8();
      ByteString byteString1 = byteString0.sha1();
      byteString0.string(charset0);
      byteString0.indexOf(byteString1, 21);
      ByteString byteString2 = byteString1.hmacSha1(byteString0);
      assertNotSame(byteString2, byteString1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.hex();
      String string0 = byteString0.toString();
      assertEquals("[hex=8888]", string0);
      
      boolean boolean0 = byteString0.endsWith(byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      Charset.defaultCharset();
      byteString0.toString();
      ByteString byteString1 = byteString0.md5();
      assertNotSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.hmacSha256(byteString0);
      byteString1.hashCode();
      byteString0.EMPTY.hex();
      String string0 = byteString1.toString();
      assertEquals("[hex=838838833e8888888e88888888888e8888888888383888883883888888383e88]", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      HashingSource hashingSource0 = HashingSource.sha1(buffer1);
      ByteString byteString0 = hashingSource0.hash();
      ByteString byteString1 = byteString0.EMPTY.md5();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      byteString0.write(outputStream0);
      assertNotSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      // Undeclared exception!
      try { 
        byteString0.substring((-296));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("Unexpected code poiot: ", charset0);
      byteString0.hex();
      ByteString byteString1 = byteString0.sha512();
      ByteString byteString2 = byteString1.hmacSha512(byteString0);
      assertNotSame(byteString0, byteString2);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("Unepected ctde poot: ", charset0);
      boolean boolean0 = byteString0.equals(charset0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("", charset0);
      String string0 = byteString0.toString();
      assertEquals("[size=0]", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)22, 1684);
      byteArrayInputStream0.skip((byte)22);
      try { 
        ByteString.read(byteArrayInputStream0, 6);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.EMPTY.hex();
      assertEquals("", string0);
      
      ByteString byteString1 = new ByteString(byteArray0);
      boolean boolean0 = byteString0.equals(byteString1);
      assertTrue(boolean0);
      
      boolean boolean1 = byteString0.startsWith(byteString1);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-32);
      byteString0.endsWith(byteArray0);
      String string0 = byteString0.utf8();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.substring(1684, 1684);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(18)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      int int0 = 0;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)31;
      // Undeclared exception!
      try { 
        ByteString.read(pipedInputStream0, (-1336));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1336
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      // Undeclared exception!
      try { 
        byteString0.substring(95);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("p");
      byteString0.hashCode();
      ByteString byteString1 = byteString0.toAsciiUppercase();
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("Y2\"Vlb3Cw;E)", charset0);
      byteString0.hashCode();
      String string0 = byteString0.toString();
      assertEquals("[text=Y2\"Vlb3Cw;E)]", string0);
      
      ByteString byteString1 = byteString0.toAsciiUppercase();
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      String string0 = byteString0.base64Url();
      assertEquals("1B2M2Y8AsgTpgAmY7PhCfg==", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("Unexpected code point: ", charset0);
      ByteString byteString1 = byteString0.EMPTY.toAsciiUppercase();
      byteString0.toString();
      ByteString byteString2 = byteString1.sha256();
      assertNotSame(byteString1, byteString2);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteString byteString0 = ByteString.of(byteArray0);
      ByteString byteString1 = ByteString.decodeBase64("0us*nn;WaIZQ.");
      assertNull(byteString1);
      
      boolean boolean0 = byteString0.endsWith(byteArray0);
      assertTrue(boolean0);
      
      ByteBuffer byteBuffer0 = byteString0.asByteBuffer();
      ByteString byteString2 = ByteString.of(byteBuffer0);
      assertTrue(byteString2.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        ByteString.decodeBase64((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // base64 == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      ByteString byteString1 = byteString0.substring((int) (byte)0);
      byteString1.EMPTY.lastIndexOf(byteString0);
      Charset.defaultCharset();
      byteString1.toString();
      // Undeclared exception!
      try { 
        ByteString.read((InputStream) null, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Charset.defaultCharset();
      byteString0.toString();
      byteString0.write(buffer0);
      assertEquals(64, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      ByteString byteString0 = ByteString.of(byteArray0, 0, 0);
      ByteString byteString1 = new ByteString(byteArray0);
      int int0 = byteString0.compareTo(byteString1);
      assertEquals((-1), int0);
      
      int int1 = byteString0.size();
      assertEquals(0, int1);
      
      int int2 = byteString1.compareTo(byteString0);
      assertEquals(1, int2);
      
      int int3 = byteString0.lastIndexOf(byteArray0, (int) (byte)0);
      assertTrue(int3 == int0);
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      ByteString byteString1 = byteString0.substring(54);
      assertEquals(10, byteString1.size());
      
      String string0 = byteString0.toString();
      assertEquals("[hex=e8838838888888888883388888888888883883888888888e83838e38838e8ee83888883e888883888883888388888e38838e388838388888883833888e388838]", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("Unexpected code point: ", charset0);
      byteString0.utf8();
      byteString0.sha1();
      byteString0.string(charset0);
      // Undeclared exception!
      try { 
        ByteString.of((ByteBuffer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      String string0 = byteString0.toString();
      assertEquals("[hex=e8838838888888888883388888888888883883888888888e83838e38838e8ee83888883e888883888883888388888e38838e388838388888883833888e388838]", string0);
      
      ByteString byteString1 = byteString0.toAsciiLowercase();
      boolean boolean0 = byteString0.startsWith(byteString1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.hex();
      ByteString byteString1 = new ByteString(byteArray0);
      boolean boolean0 = byteString1.EMPTY.rangeEquals(1907, byteString0, 1557, 1907);
      assertFalse(boolean0);
      
      String string0 = byteString0.toString();
      assertEquals("[hex=8888]", string0);
      assertTrue(byteString0.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      byte[] byteArray0 = new byte[0];
      byteString0.startsWith(byteArray0);
      byteString0.write(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.utf8();
      byteString0.lastIndexOf(byteArray0, 100);
      ByteString byteString1 = byteString0.sha1();
      byteString1.lastIndexOf(byteString0, 0);
      byteString1.internalArray();
      byteString0.hashCode();
      byteString0.toString();
      // Undeclared exception!
      try { 
        byteString0.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteString byteString0 = ByteString.encodeString("Unexpected code point: ", charset0);
      byteString0.hashCode();
      byteString0.utf8();
      ByteString byteString1 = byteString0.sha512();
      int int0 = byteString0.compareTo(byteString1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte byte0 = (byte)15;
      byte byte1 = (byte)54;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)54;
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ByteString.encodeUtf8((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ByteString.decodeBase64("");
      // Undeclared exception!
      try { 
        ByteString.decodeHex((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hex == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 1684);
      byteArrayInputStream0.skip(0L);
      ByteString byteString0 = ByteString.read(byteArrayInputStream0, 6);
      byteString0.EMPTY.hashCode();
      ByteString byteString1 = byteString0.sha1();
      byteString0.lastIndexOf(byteArray0, 6);
      ByteString byteString2 = new ByteString(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteString0.toString();
      byteString1.toAsciiUppercase();
      Buffer buffer0 = new Buffer();
      HashingSink.hmacSha1(buffer0, byteString2);
      byteString0.toString();
      byteString1.compareTo(byteString2);
      assertEquals(12, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null, (int) (byte)15, 989);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteString byteString0 = ByteString.of(byteArray0);
      byteString0.utf8();
      ByteString byteString1 = byteString0.sha1();
      byteString0.internalArray();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      String string0 = byteString1.toString();
      assertEquals("[hex=e38e8888833888ee888e8e8888833e8888888388]", string0);
      
      boolean boolean0 = byteString0.startsWith(byteString1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)15;
      ByteString byteString0 = ByteString.of(byteArray0);
      byteString0.utf8();
      ByteString byteString1 = byteString0.sha1();
      byteString0.internalArray();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      byteString0.toString();
      boolean boolean0 = byteString0.endsWith(byteString1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.encodeString("8>hNl|X]tZ}S", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("not acquired", charset0);
      ByteString byteString1 = byteString0.sha1();
      byteString1.toString();
      ByteString byteString2 = byteString1.toAsciiUppercase();
      Buffer buffer0 = new Buffer();
      String string0 = byteString2.toString();
      assertEquals("[hex=8383e88888388888833833888e88338888888388]", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.EMPTY.hex();
      assertEquals("", string0);
      
      ByteString byteString1 = new ByteString(byteArray0);
      ByteString byteString2 = byteString1.EMPTY.sha256();
      boolean boolean0 = byteString0.equals(byteString2);
      assertTrue(byteString1.equals((Object)byteString0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha512();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      byteString1.base64();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("E+^%U{zIh");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: +
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("Unexpected code point: ", charset0);
      byteString0.hashCode();
      byteString0.hashCode();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("Unexpected code point: ", charset0);
      byteString0.EMPTY.toAsciiLowercase();
      byteString0.hashCode();
      String string0 = byteString0.toString();
      assertEquals("[text=Unexpected code point: ]", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      byteString0.EMPTY.base64();
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        ByteString.encodeString((String) null, (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      Object object0 = new Object();
      ByteString byteString1 = ByteString.of(byteArray0);
      ByteString byteString2 = byteString0.sha1();
      byteString2.internalArray();
      ByteString byteString3 = byteString0.hmacSha256(byteString2);
      byteString3.hashCode();
      byteString3.toString();
      byteString0.utf8();
      byteString1.sha1();
      // Undeclared exception!
      try { 
        byteString0.string((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteString byteString0 = ByteString.encodeString("UnexpectedIco\"e point: ", charset0);
      ByteString byteString1 = byteString0.sha1();
      byteString0.toString();
      ByteString byteString2 = byteString1.toAsciiUppercase();
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.hmacSha1(buffer0, byteString2);
      hashingSink0.hash();
      byteString1.toString();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      ByteString byteString1 = byteString0.substring((int) (byte)0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)0;
      ByteString byteString2 = new ByteString(byteArray0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      byteString0.equals(fileSystemHandling0);
      byteString2.toString();
      byteString1.toAsciiUppercase();
      byteString0.toString();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      BufferedSink bufferedSink0 = buffer0.write((Source) null, 0L);
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      HashingSink hashingSink1 = HashingSink.hmacSha512(bufferedSink0, byteString0);
      HashingSink.sha512(hashingSink1);
      ByteString byteString1 = hashingSink0.hash();
      ByteString byteString2 = byteString1.substring(5);
      byteString2.toString();
  }
}
