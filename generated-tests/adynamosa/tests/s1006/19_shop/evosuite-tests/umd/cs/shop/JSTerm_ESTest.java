/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 22 06:14:22 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.Collection;
import java.util.Comparator;
import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      StringReader stringReader0 = new StringReader("(>Q(Sue\"/");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      streamTokenizer0.resetSyntax();
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("(PuZK+`q-");
      SystemInUtil.addInputLine("c)gDh");
      SystemInUtil.addInputLine("(PuZK+`q-");
      StringReader stringReader0 = new StringReader("(PuZK+`q-");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm();
      streamTokenizer0.slashSlashComments(false);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.addElement("c)gDh");
      SystemInUtil.addInputLine("(PuZK+`q-");
      SystemInUtil.addInputLine("t");
      jSTerm1.clonePF();
      SystemInUtil.addInputLine("c)gDh");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.cloneS();
      jSTerm0.isGround();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm1.matches(jSTerm2, jSSubstitution0);
      jSTerm0.matches(jSTerm2);
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      StringReader stringReader0 = new StringReader("(>Q(Sue\"/");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StringReader stringReader0 = new StringReader("s8?[e(`N]");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      SystemInUtil.addInputLine((String) null);
      streamTokenizer0.slashStarComments(true);
      jSTerm0.standarizerPredicateForm();
      jSTerm0.makeEval(true);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.setSize(43);
      jSTerm1.matches(jSTerm0);
      jSTerm0.matches(jSTerm1);
      jSTerm1.equals(jSTerm0);
      jSTerm0.toStr();
      jSTerm1.call();
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm1.isFunction());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("CCuwKo+`q-");
      jSTerm0.isGround();
      jSTerm0.makeVariable();
      jSTerm0.makeEval(true);
      StringReader stringReader0 = new StringReader("CCuwKo+`q-");
      SystemInUtil.addInputLine("CCuwKo+`q-");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.toStr();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.add((Object) "CCuwKo+`q-");
      jSSubstitution2.listIterator();
      stringReader0.reset();
      JSTerm jSTerm1 = jSTerm0.call();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution3);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSTerm1.matches(jSTerm0, jSSubstitution4);
      streamTokenizer0.lowerCaseMode(true);
      StringReader stringReader1 = new StringReader("cu0");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      jSSubstitution1.listIterator();
      jSTerm1.parallelStream();
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("(CuwK+`q-");
      jSTerm0.isGround();
      SystemInUtil.addInputLine("(CuwK+`q-");
      jSTerm0.makeEval(true);
      System.setCurrentTimeMillis(16L);
      StringReader stringReader0 = new StringReader("(CuwK+`q-");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.isGround();
      jSTerm0.toStr();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.spliterator();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.parallelStream();
      jSSubstitution0.ensureCapacity((-4));
      jSTerm1.clonePF();
      jSTerm0.toStr();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.listIterator();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.parseNumbers();
      jSTerm1.parallelStream();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution2);
      streamTokenizer0.lowerCaseMode(true);
      jSTerm2.matches(jSTerm1);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm2.isEmpty();
      jSTerm1.matches(jSTerm2);
      jSTerm0.equals(jSTerm1);
      JSTerm jSTerm3 = jSTerm0.cloneT();
      jSTerm3.toStr();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm4 = null;
      try {
        jSTerm4 = new JSTerm(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("(CuwK+`q-");
      jSTerm0.isGround();
      SystemInUtil.addInputLine("(CuwK+`q-");
      jSTerm0.makeEval(true);
      System.setCurrentTimeMillis(16L);
      StringReader stringReader0 = new StringReader("(CuwK+`q-");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSJshopVars.minus = (-2332);
      jSTerm0.makeFunction();
      streamTokenizer0.whitespaceChars((-2332), (-2332));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.listIterator();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSSubstitution0.listIterator();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.listIterator();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.parallelStream();
      jSTerm2.standardizerTerm();
      streamTokenizer0.lowerCaseMode(true);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm3.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("(CuwK+`q-");
      jSTerm0.isGround();
      SystemInUtil.addInputLine("(CuwK+`q-");
      jSTerm0.makeEval(true);
      System.setCurrentTimeMillis(16L);
      StringReader stringReader0 = new StringReader("(CuwK+`q-");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.isGround();
      jSTerm0.toStr();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      jSTerm1.lastElement();
      jSTerm0.addElement("(CuwK+`q-");
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm1.print();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.clear();
      // Undeclared exception!
      try { 
        jSTerm2.add((-4), (Object) jSTerm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = "(CuwK+`q-";
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("(CuwK+`q-");
      jSTerm0.isGround();
      SystemInUtil.addInputLine("(CuwK+`q-");
      jSTerm0.makeEval(true);
      System.setCurrentTimeMillis(16L);
      StringReader stringReader0 = new StringReader("(CuwK+`q-");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSJshopVars.minus = (-2332);
      jSTerm0.makeFunction();
      streamTokenizer0.whitespaceChars((-2332), (-2332));
      JSJshopVars.minus = (-4);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("(CuwK+`q-");
      jSTerm0.standardizerTerm();
      jSTerm0.isEmpty();
      JSTerm jSTerm1 = new JSTerm();
      SystemInUtil.addInputLine("(CuwK+`q-");
      System.setCurrentTimeMillis((-10L));
      StringReader stringReader0 = new StringReader("(CuwK+`q-");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-2332), 35);
      JSJshopVars.minus = 3973;
      jSTerm1.makeFunction();
      JSJshopVars.minus = (-4);
      jSTerm0.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      SystemInUtil.addInputLine("(CuwK+`q-");
      jSSubstitution1.listIterator();
      jSTerm0.parallelStream();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.clone();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution2);
      JSTerm jSTerm3 = jSTerm2.cloneT();
      jSTerm0.stream();
      jSTerm0.parallelStream();
      streamTokenizer0.slashSlashComments(false);
      jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.addElement((Object) null);
      jSTerm2.matches(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm3.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(+uA?`-");
      JSTerm jSTerm0 = new JSTerm();
      SystemInUtil.addInputLine("(+uA?`-");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.spliterator();
      jSTerm0.equals(jSTerm0);
      JSJshopVars.slash = (-4);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      jSTerm0.addElement(jSTerm0);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution1);
      jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = new JSTerm();
      System.setCurrentTimeMillis(1243L);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm1.matches(jSTerm2, jSSubstitution2);
      SystemInUtil.addInputLine("(+uA?`-");
      jSSubstitution2.listIterator();
      jSTerm2.parallelStream();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm4 = jSTerm3.cloneT();
      jSSubstitution2.listIterator();
      jSTerm4.parallelStream();
      JSTerm jSTerm5 = new JSTerm();
      streamTokenizer0.lowerCaseMode(false);
      jSTerm3.matches(jSTerm1);
      jSTerm3.print();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm5.isEval();
      // Undeclared exception!
      try { 
        jSTerm3.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSSubstitution");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.whitespaceChars((-1), (-1));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.parallelStream();
      jSTerm1.add((Object) streamTokenizer0);
      jSTerm0.addElement(jSTerm1);
      jSTerm0.makeFunction();
      JSTerm jSTerm2 = jSTerm0.call();
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine((String) null);
      jSTerm0.isGround();
      jSSubstitution0.spliterator();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      jSSubstitution1.ensureCapacity((-1));
      jSTerm2.toStr();
      SystemInUtil.addInputLine("umd.cs.shop.JSSubstitution");
      JSJshopVars.whiteSpace = (-5717);
      jSSubstitution1.listIterator();
      SystemInUtil.addInputLine((String) null);
      jSTerm0.parallelStream();
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution0);
      streamTokenizer0.lowerCaseMode(true);
      jSTerm3.matches(jSTerm2);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm3.equals(jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm3.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("(CunK+`q-");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.isEval();
      JSTerm jSTerm2 = new JSTerm();
      System.setCurrentTimeMillis((-10L));
      jSTerm0.print();
      StringReader stringReader0 = new StringReader("(CunK+`q-");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar((-2850));
      JSTerm jSTerm3 = new JSTerm();
      Consumer<JSSubstitution> consumer0 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      JSJshopVars.rightPar = (-3);
      jSTerm1.forEach(consumer0);
      jSTerm3.isFunction();
      jSTerm0.makeVariable();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      Integer integer0 = new Integer((-4));
      jSTerm3.matches(jSTerm0, (JSSubstitution) null);
      Integer integer1 = new Integer((-2850));
      Integer integer2 = new Integer((-3));
      streamTokenizer1.resetSyntax();
      jSTerm1.isGround();
      jSTerm3.stream();
      JSTerm jSTerm4 = new JSTerm();
      JSTerm jSTerm5 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm5.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeEval(true);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      jSTerm0.isEval();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSSubstitution");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.whitespaceChars(63, (-1));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSJshopVars.leftBrac = (-1);
      jSTerm1.add((Object) streamTokenizer0);
      JSJshopVars.greaterT = (-1);
      jSTerm0.addElement(jSTerm1);
      streamTokenizer0.ordinaryChars(2, (-1));
      jSTerm0.makeFunction();
      JSTerm jSTerm2 = jSTerm0.call();
      System.setCurrentTimeMillis((-1));
      JSJshopVars.coma = (-2);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = jSTerm2.matches(jSTerm0, jSSubstitution0);
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSSubstitution0.add((Object) jSTerm3);
      jSTerm0.isGround();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm3.toStr();
      jSSubstitution3.listIterator();
      JSTerm jSTerm4 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSJshopVars.percent = 1551;
      jSTerm4.matches(jSTerm2);
      jSTerm0.isEval();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.iterator();
      JSTerm jSTerm5 = jSTerm0.applySubstitutionT(jSSubstitution2);
      jSTerm5.matches(jSTerm0, jSSubstitution1);
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm2.isFunction());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSSubstitution");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.whitespaceChars(63, (-4));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSJshopVars.leftBrac = (-1);
      jSTerm1.add((Object) streamTokenizer0);
      JSJshopVars.greaterT = (-1);
      jSTerm0.addElement(jSTerm1);
      jSTerm0.makeFunction();
      JSTerm jSTerm2 = jSTerm0.call();
      System.setCurrentTimeMillis((-1));
      JSJshopVars.coma = (-2);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm2.matches(jSTerm0, jSSubstitution0);
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSSubstitution0.add((Object) jSTerm3);
      jSTerm3.cloneT();
      streamTokenizer0.ordinaryChar((-1));
      jSTerm0.isGround();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm3.toStr();
      JSJshopVars.backquote = (-3943);
      jSSubstitution2.listIterator();
      JSTerm jSTerm4 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSJshopVars.percent = 1551;
      jSTerm4.matches(jSTerm2);
      jSTerm0.isEval();
      boolean boolean0 = jSTerm3.isEval();
      assertEquals("[%%%, [%%%, Token[EOF], line 1]]", jSTerm0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSSubstitution");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      char[] charArray0 = new char[2];
      charArray0[1] = '_';
      stringReader0.read(charArray0);
      JSJshopVars.leftBrac = (-1);
      JSJshopVars.greaterT = (-1);
      jSTerm0.addElement(jSTerm1);
      jSTerm0.makeFunction();
      jSTerm0.isVariable();
      jSTerm0.isGround();
      JSTerm jSTerm2 = jSTerm0.call();
      jSTerm2.add((Object) stringReader0);
      System.setCurrentTimeMillis((-1));
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm2.matches(jSTerm0, jSSubstitution0);
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm4 = jSTerm3.cloneT();
      streamTokenizer0.ordinaryChar((-1));
      jSTerm0.isGround();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm4.call();
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      Integer integer0 = new Integer(124);
      jSTerm0.equals(jSTerm4);
      jSTerm4.matches(jSTerm1, jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm3.set((-1), "VKen[ieF_.Flu_-%JOI");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSSubstitution");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSJshopVars.leftBrac = (-1);
      jSTerm1.isEval();
      JSJshopVars.greaterT = (-1);
      jSTerm0.addElement(jSTerm1);
      jSTerm0.makeFunction();
      jSTerm0.isVariable();
      jSTerm0.isGround();
      JSTerm jSTerm2 = jSTerm0.call();
      System.setCurrentTimeMillis((-1));
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm2.matches(jSTerm0, jSSubstitution0);
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm4 = jSTerm3.cloneT();
      jSTerm1.isGround();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      Integer integer0 = new Integer(1004);
      jSTerm4.equals(jSTerm3);
      jSTerm2.matches(jSTerm1, jSSubstitution0);
      JSTerm jSTerm5 = null;
      try {
        jSTerm5 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSSubstitution");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSJshopVars.leftBrac = (-1);
      jSTerm1.isEval();
      JSJshopVars.greaterT = (-1);
      jSTerm0.addElement(jSTerm1);
      jSTerm0.makeFunction();
      jSTerm0.isVariable();
      jSTerm0.isGround();
      JSTerm jSTerm2 = jSTerm0.call();
      System.setCurrentTimeMillis((-1));
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm2.matches(jSTerm0, jSSubstitution0);
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm3.isGround();
      streamTokenizer0.pushBack();
      JSTerm jSTerm4 = new JSTerm();
      jSTerm0.standardizerTerm();
      stringReader0.markSupported();
      jSTerm1.print();
      System.setCurrentTimeMillis(865L);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm5 = null;
      try {
        jSTerm5 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("(CuL|-");
      jSTerm0.makeVariable();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.isConstant();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm2.isEval();
      jSTerm1.addElement(jSSubstitution0);
      Object object0 = new Object();
      jSTerm2.addElement("(CuL|-");
      jSTerm2.firstElement();
      jSTerm1.addElement(object0);
      jSTerm2.makeFunction();
      jSTerm2.isVariable();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm2, jSSubstitution1);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSSubstitution");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSJshopVars.leftBrac = (-49);
      jSTerm1.isEval();
      JSJshopVars.greaterT = (-49);
      jSTerm0.addElement(jSTerm1);
      jSTerm0.makeFunction();
      jSTerm0.isVariable();
      jSTerm0.isGround();
      JSTerm jSTerm2 = jSTerm0.call();
      System.setCurrentTimeMillis((-1));
      jSTerm1.makeEval(true);
      jSTerm2.call();
      jSTerm1.applySubstitutionT((JSSubstitution) null);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("(CuL|-");
      jSTerm0.makeVariable();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.addAll((Collection) jSTerm1);
      JSJshopVars.interrogation = 1324;
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm3 = new JSTerm();
      StringReader stringReader0 = new StringReader("UAZj&Uj0<usR");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm2.firstElement();
      JSTerm jSTerm4 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm5 = new JSTerm();
      streamTokenizer0.lowerCaseMode(true);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm6 = new JSTerm();
      jSTerm3.matches(jSTerm6, jSSubstitution0);
      Object object0 = new Object();
      jSSubstitution3.removeElement(jSTerm4);
      JSTerm jSTerm7 = new JSTerm();
      jSTerm4.matches(jSTerm2, jSSubstitution2);
      JSTerm jSTerm8 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm6.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSSubstitution");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSJshopVars.leftBrac = 0;
      jSTerm1.isEval();
      JSJshopVars.greaterT = 0;
      jSTerm0.addElement(jSTerm1);
      jSTerm0.makeFunction();
      jSTerm0.isVariable();
      jSTerm0.isGround();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      JSTerm jSTerm2 = jSTerm0.call();
      System.setCurrentTimeMillis(0L);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm2.matches(jSTerm0, jSSubstitution0);
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSSubstitution");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      stringReader0.read();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm();
      StringReader stringReader1 = new StringReader(".");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      streamTokenizer0.nextToken();
      streamTokenizer3.resetSyntax();
      JSTerm jSTerm2 = new JSTerm();
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      jSTerm2.isEval();
      // Undeclared exception!
      try { 
        jSTerm2.parseList(streamTokenizer3);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSSubstitution");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      streamTokenizer0.slashStarComments(true);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSJshopVars.leftBrac = 0;
      jSTerm1.isEval();
      JSJshopVars.greaterT = 0;
      jSTerm0.addElement(jSTerm1);
      jSTerm0.makeFunction();
      jSTerm1.isVariable();
      jSTerm1.isEval();
      streamTokenizer0.slashStarComments(false);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm2.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSSubstitution");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      streamTokenizer0.slashStarComments(true);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSJshopVars.leftBrac = 0;
      jSTerm1.isEval();
      JSJshopVars.greaterT = 0;
      jSTerm0.addElement(jSTerm1);
      jSTerm0.makeFunction();
      jSTerm1.isVariable();
      jSTerm0.isGround();
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      jSTerm0.isVariable();
      jSTerm1.isConstant();
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(*hTuA+`-");
      JSJshopVars.apostrophe = (-1083929126);
      stringReader0.close();
      jSTerm0.add((Object) "(*hTuA+`-");
      jSTerm0.isEval();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.eolIsSignificant(false);
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      assertFalse(jSSubstitution0.fail());
      
      jSTerm1.firstElement();
      jSTerm1.toStr();
      jSTerm0.addElement(streamTokenizer1);
      JSTerm jSTerm2 = new JSTerm();
      StringBuffer stringBuffer0 = jSTerm1.toStr();
      assertEquals("((*hTuA+`- )", stringBuffer0.toString());
      
      jSTerm2.isVariable();
      jSTerm0.equals(jSTerm1);
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      boolean boolean0 = jSTerm2.equals(jSTerm3);
      assertFalse(boolean0);
      assertFalse(jSTerm1.isEval());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("(CuL|-");
      jSTerm0.makeVariable();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.addAll((Collection) jSTerm1);
      JSJshopVars.interrogation = 1324;
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.matches(jSTerm2);
      StringReader stringReader0 = new StringReader("g");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      jSTerm0.firstElement();
      JSTerm jSTerm4 = new JSTerm();
      jSTerm0.cloneT();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm5 = new JSTerm();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm1.matches(jSTerm5, jSSubstitution2);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = jSTerm5.matches(jSTerm2, jSSubstitution0);
      JSTerm jSTerm6 = new JSTerm();
      jSTerm1.matches(jSTerm1, jSSubstitution4);
      jSTerm1.standardizerTerm();
      System.setCurrentTimeMillis((-1921L));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSSubstitution");
      StringReader stringReader1 = new StringReader("Expecting elements of the list");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Integer integer0 = new Integer(32);
      jSTerm0.add((Object) integer0);
      jSTerm0.isEval();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      assertEquals(1, jSTerm2.size());
      
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      streamTokenizer0.eolIsSignificant(false);
      JSSubstitution jSSubstitution0 = jSTerm2.matches(jSTerm1);
      assertFalse(jSSubstitution0.fail());
      
      jSTerm2.isVariable();
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isFunction());
      
      JSTerm jSTerm3 = new JSTerm();
      jSTerm0.call();
      JSTerm jSTerm4 = new JSTerm(streamTokenizer2);
      jSTerm4.firstElement();
      JSTerm jSTerm5 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) null);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = jSTerm3.matches(jSTerm1, jSSubstitution1);
      JSTerm jSTerm6 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution4 = jSTerm6.matches(jSTerm1, jSSubstitution1);
      assertTrue(jSSubstitution4.fail());
      assertNotSame(jSSubstitution1, jSSubstitution3);
      assertNotSame(jSTerm1, jSTerm2);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSSubstitution");
      StringReader stringReader1 = new StringReader("Expecting elements of the list");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Integer integer0 = new Integer(32);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) streamTokenizer0);
      Integer integer1 = new Integer(47);
      jSTerm0.isEmpty();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm2.isGround();
      jSTerm2.print();
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = jSTerm3.matches(jSTerm0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm4 = new JSTerm();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm5 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm5.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(CuL|-");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("(CuL|-");
      jSTerm0.makeVariable();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.wordChars(41, 94);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.makeFunction();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm1);
      predicate0.or(predicate0);
      streamTokenizer0.wordChars(94, 41);
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      JSTerm jSTerm4 = new JSTerm();
      jSTerm4.addAll((Collection) jSTerm1);
      JSTerm jSTerm5 = jSTerm4.cloneT();
      jSTerm4.equals(jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.isEval();
      jSTerm5.matches(jSTerm2, jSSubstitution0);
      boolean boolean0 = jSTerm3.isGround();
      assertTrue(jSTerm0.isVariable());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(CuA+`-");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("(CuA+`-");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.makeVariable();
      StringReader stringReader1 = new StringReader("(CuA+`-");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.wordChars((-2), 41);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm2.addAll((Collection) jSTerm1);
      JSTerm jSTerm3 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm4 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm5 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution1 = jSTerm2.matches(jSTerm4);
      jSTerm3.isVariable();
      JSTerm jSTerm6 = new JSTerm();
      JSTerm jSTerm7 = jSTerm1.call();
      // Undeclared exception!
      try { 
        jSTerm7.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(CuL|-");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("(CuL|-");
      jSTerm0.makeVariable();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.wordChars(41, 94);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.makeFunction();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm1);
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      jSTerm2.removeIf(predicate3);
      jSTerm1.isVariable();
      jSTerm0.matches(jSTerm1);
      jSTerm2.isVariable();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm2);
      jSTerm1.call();
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution0);
      boolean boolean0 = jSTerm3.isVariable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(CH K+`-");
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Unexpected ) while reading Predicate");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.resetSyntax();
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) stringReader0);
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm0.isEval();
      assertEquals(1, jSTerm0.size());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(CuA+`-");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(jSTerm0);
      jSTerm0.add((Object) "(CuA+`-");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      StringReader stringReader1 = new StringReader(")k@7M#YPifC");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      jSTerm1.parseList(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addElement(jSSubstitution0);
      jSTerm0.print();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.addElement(jSSubstitution0);
      jSTerm1.add((Object) jSTerm0);
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm2.addElement(jSSubstitution1);
      jSTerm1.print();
      jSTerm2.isGround();
      StringReader stringReader0 = new StringReader("-");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("t:AGBI");
      Object object0 = jSTerm0.clone();
      jSTerm0.add(object0);
      jSTerm0.toStr();
      jSTerm0.addAll((Collection) jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(CuL|-");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("(CuL|-");
      jSTerm0.makeVariable();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashStarComments(true);
      JSJshopVars.equalT = 41;
      streamTokenizer0.wordChars((-1), (-1222));
      streamTokenizer0.wordChars(1446, (-721));
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.addAll((Collection) jSTerm0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm0.equals(jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.isEval();
      jSTerm2.matches(jSTerm1, jSSubstitution0);
      assertEquals("[(CuL|-0, (CuL|-]", jSTerm1.toString());
      assertNotSame(jSTerm0, jSTerm1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(CuA+`-");
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      jSTerm0.addElement(object0);
      JSJshopVars.slash = (-2153);
      jSTerm0.add((Object) null);
      jSTerm0.isEval();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(CuL|-");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("(CuL|-");
      jSTerm0.makeVariable();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashStarComments(true);
      JSJshopVars.equalT = 41;
      streamTokenizer0.wordChars(1446, (-744));
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.addAll((Collection) jSTerm0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm0.equals(jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm2.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StringReader stringReader0 = new StringReader("epZ63Z|a;");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChar((-1));
      jSTerm0.makeVariable();
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.wordChars((-1), 60);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.addAll((Collection) jSTerm1);
      JSTerm jSTerm2 = jSTerm0.call();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.clone();
      JSTerm jSTerm4 = new JSTerm();
      jSTerm4.addElement(jSTerm2);
      jSTerm1.toStr();
      jSTerm0.standardizerTerm();
      boolean boolean0 = jSTerm2.equals(jSTerm3);
      assertFalse(jSTerm0.isConstant());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StringReader stringReader0 = new StringReader("epZ63Z|a;");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChar((-1));
      jSTerm0.makeVariable();
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.wordChars((-1), 60);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.addAll((Collection) jSTerm1);
      JSTerm jSTerm2 = jSTerm0.call();
      jSTerm1.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm2.sort((Comparator) null);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm2.applySubstitutionT(jSSubstitution1);
      // Undeclared exception!
      try { 
        jSTerm2.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSSubstitution");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      stringReader0.read();
      streamTokenizer0.slashStarComments(false);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertFalse(jSTerm1.isFunction());
      
      jSTerm0.isEval();
      StringReader stringReader1 = new StringReader("ikQ[Cn!oW_$4V");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer1.quoteChar(46);
      jSTerm1.makeFunction();
      jSTerm1.toStr();
      jSTerm0.toStr();
      jSTerm0.isVariable();
      streamTokenizer0.parseNumbers();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.equals(jSTerm1);
      jSTerm1.print();
      assertTrue(jSTerm1.isFunction());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(CuA+`-");
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      jSTerm0.addElement(object0);
      jSTerm0.add((Object) null);
      Integer integer0 = new Integer(1);
      jSTerm0.add((Object) "(CuA+`-");
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringReader stringReader0 = new StringReader("l{]C]YS\")SR/V{vTrY");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.ensureCapacity((-1));
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm0.isFunction();
      JSJshopVars.leftBrac = (-1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Integer integer0 = new Integer(446);
      jSSubstitution0.addElement(integer0);
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      assertFalse(jSTerm2.isFunction());
      
      jSTerm1.isFunction();
      streamTokenizer0.quoteChar((-1));
      jSTerm2.makeFunction();
      assertTrue(jSTerm2.isFunction());
      
      jSTerm0.toStr();
      jSTerm0.toStr();
      jSTerm1.isVariable();
      JSTerm jSTerm3 = new JSTerm();
      boolean boolean0 = jSTerm1.equals(jSTerm0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(CuA+`-");
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.addElement(jSTerm0);
      jSTerm0.add((Object) "(CuA+`-");
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.addElement(jSTerm2);
      // Undeclared exception!
      try { 
        jSTerm1.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(CuL|-");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("(CuL|-");
      jSTerm0.listIterator();
      JSJshopVars.interrogation = 40;
      JSJshopVars.slash = 2630;
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals(9, stringBuffer0.length());
      
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertFalse(jSSubstitution1.fail());
      
      boolean boolean0 = jSTerm1.isGround();
      assertTrue(boolean0);
      assertFalse(jSTerm1.isConstant());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSSubstitution");
      StringReader stringReader1 = new StringReader("list ");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.clone();
      jSTerm0.addElement("umd.cs.shop.JSSubstitution");
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals(29, stringBuffer0.length());
      
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertFalse(jSTerm1.isConstant());
      assertTrue(boolean0);
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(CuA+`-");
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.addElement(jSTerm0);
      jSTerm0.add((Object) "(CuA+`-");
      int int0 = 1;
      Integer integer0 = new Integer(1);
      jSTerm1.add((Object) stringReader0);
      jSTerm0.cloneT();
      // Undeclared exception!
      try { 
        jSTerm1.isGround();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(CuA+`-");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("(CuA+`-");
      jSTerm0.add((Object) "(CuA+`-");
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSSubstitution");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      streamTokenizer0.slashStarComments(true);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSJshopVars.leftBrac = 0;
      jSTerm1.isEval();
      JSJshopVars.greaterT = 0;
      streamTokenizer0.quoteChar(63);
      jSTerm0.makeFunction();
      jSTerm0.toStr();
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(jSTerm0.isFunction());
      assertTrue(boolean0);
      
      jSTerm0.matches(jSTerm1);
      boolean boolean1 = jSTerm0.equals(jSTerm1);
      assertFalse(jSTerm0.isConstant());
      assertFalse(boolean1);
      
      jSTerm0.call();
      assertFalse(jSTerm0.isConstant());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(CuA+`-");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("(CuA+`-");
      jSTerm0.add((Object) "(CuA+`-");
      jSTerm0.isEval();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StringReader stringReader0 = new StringReader(")1@~3P^oZ+@o;");
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      StringReader stringReader1 = new StringReader(")1@~3P^oZ+@o;");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm2 = jSTerm1.parseList(streamTokenizer0);
      assertTrue(jSTerm2.isConstant());
      assertFalse(jSTerm2.isFunction());
      assertEquals("[nil]", jSTerm2.toString());
      
      jSTerm0.isEval();
      assertFalse(jSTerm0.equals((Object)jSTerm2));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSSubstitution");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      streamTokenizer0.slashStarComments(true);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSJshopVars.leftBrac = 0;
      jSTerm0.isEval();
      JSJshopVars.greaterT = 0;
      jSTerm0.makeFunction();
      jSTerm0.isVariable();
      jSTerm0.isGround();
      jSTerm0.matches(jSTerm0, jSSubstitution0);
      jSTerm0.isVariable();
      jSTerm0.isConstant();
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isGround();
      jSTerm0.clone();
      StringReader stringReader0 = new StringReader("?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringReader stringReader0 = new StringReader("UH");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertFalse(jSSubstitution1.fail());
      assertFalse(jSTerm1.isEval());
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm1.isFunction());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(CuA+`-");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(CuA+`-");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("(CuA+`-");
      jSTerm0.add((Object) "(CuA+`-");
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(CuA+`-");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("(CuA+`-");
      jSTerm0.print();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StringReader stringReader0 = new StringReader("xM<Np35nyKmx~'j~i(p");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1, (JSSubstitution) null);
      assertTrue(jSSubstitution0.fail());
      assertNotNull(jSSubstitution0);
      
      jSTerm0.isVariable();
      jSTerm0.isGround();
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(boolean0);
      assertFalse(jSTerm0.isEval());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StringReader stringReader0 = new StringReader("xM<Np35nyKmx~'j~i(p");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.isVariable();
      boolean boolean0 = jSTerm0.isFunction();
      assertFalse(jSTerm0.isConstant());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("+FAx+.(}");
      StringReader stringReader1 = new StringReader("+FAx+.(}");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution0);
      JSJshopVars.minus = 1;
      JSTerm jSTerm1 = jSTerm0.cloneT();
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isConstant());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.isFunction();
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("%I*");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.isFunction();
      boolean boolean0 = jSTerm1.isGround();
      assertTrue(boolean0);
      
      StringBuffer stringBuffer0 = jSTerm1.toStr();
      assertEquals(3, stringBuffer0.length());
      assertFalse(jSTerm1.isEval());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.addElement("(CuA+`-");
      jSTerm1.print();
      assertFalse(jSTerm1.isFunction());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(*hTuA+`-");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StringReader stringReader0 = new StringReader("l{]C]YS\")SR/V{vTrY");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.ensureCapacity((-1));
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm0.isFunction();
      JSJshopVars.leftBrac = (-1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Integer integer0 = new Integer(446);
      jSSubstitution0.addElement(integer0);
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm1.isFunction();
      jSTerm0.matches(jSTerm2);
      // Undeclared exception!
      try { 
        jSSubstitution0.addAll((-2), (Collection) jSTerm2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: -2
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSSubstitution");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      streamTokenizer0.slashStarComments(false);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSJshopVars.leftBrac = 0;
      jSTerm1.isEval();
      JSJshopVars.greaterT = 0;
      streamTokenizer0.quoteChar(63);
      jSTerm0.makeVariable();
      jSTerm0.makeFunction();
      jSTerm0.toStr();
      jSTerm0.isGround();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = jSTerm1.call();
      assertFalse(jSTerm0.isConstant());
      assertEquals(1, jSTerm2.capacity());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      boolean boolean0 = jSTerm0.isGround();
      StringReader stringReader0 = new StringReader("?;%~$QjvkWZB");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      boolean boolean1 = jSTerm0.equals(jSTerm1);
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals("[?%%%]", jSTerm1.toString());
      assertFalse(boolean1 == boolean0);
      assertTrue(jSTerm1.isVariable());
      assertFalse(jSTerm1.isConstant());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isFunction();
      JSTerm jSTerm1 = new JSTerm();
      StringReader stringReader0 = new StringReader("ua");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.equals(jSTerm2);
      // Undeclared exception!
      try { 
        jSTerm2.applySubstitutionT((JSSubstitution) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSSubstitution");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      streamTokenizer0.slashStarComments(true);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSJshopVars.leftBrac = 0;
      jSTerm1.isEval();
      JSJshopVars.greaterT = 0;
      jSTerm0.makeFunction();
      jSTerm1.isVariable();
      jSTerm0.isGround();
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      
      jSTerm0.isVariable();
      jSTerm1.isConstant();
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("(CuA+`-");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSSubstitution");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertNotSame(jSTerm1, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSSubstitution");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      streamTokenizer0.slashStarComments(true);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.toStr();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.rightBrac = 1;
      jSTerm0.isFunction();
      System.setCurrentTimeMillis(720L);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader(">=");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("x%bFmQ_c-ge>`B\"LV");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.listIterator();
      jSTerm0.spliterator();
      jSTerm0.makeVariable();
      jSTerm0.trimToSize();
      jSTerm0.print();
      jSTerm0.cloneT();
      assertEquals(1, jSTerm0.capacity());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      StringReader stringReader0 = new StringReader("I8JYy%kLc>Td1/p1bx ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm2.print();
      StringReader stringReader1 = new StringReader("list");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isVariable();
      jSTerm0.isGround();
      int int0 = 0;
      jSTerm0.makeEval(true);
      jSTerm0.iterator();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Integer integer0 = new Integer(60);
      jSTerm0.isVariable();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.isConstant();
      JSTerm jSTerm2 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm2.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.apostrophe = 2480;
      jSTerm0.listIterator();
      JSJshopVars.percent = (-18);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      StringReader stringReader0 = new StringReader("Q1T8@h8P`I8|`p.DH");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      jSSubstitution0.parallelStream();
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSSubstitution");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSJshopVars.leftBrac = 0;
      jSTerm1.isEval();
      JSJshopVars.greaterT = 0;
      jSTerm0.makeFunction();
      jSTerm1.equals(jSTerm0);
      JSTerm jSTerm2 = jSTerm1.call();
      jSTerm0.equals(jSTerm2);
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      int int0 = 1;
      JSJshopVars.rightPar = 1;
      Stream stream0 = jSTerm1.stream();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      jSSubstitution0.add((Object) stream0);
      // Undeclared exception!
      try { 
        jSTerm1.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.apostrophe = 2480;
      jSTerm0.listIterator();
      JSJshopVars.percent = (-18);
      jSTerm0.isGround();
      JSTerm jSTerm1 = null;
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.listIterator();
      jSTerm0.spliterator();
      jSTerm0.makeVariable();
      jSTerm0.trimToSize();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = "v";
      StringReader stringReader0 = new StringReader("v");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      int int0 = (-1900);
      streamTokenizer0.ordinaryChar((-1900));
      jSTerm0.isEval();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      int int1 = 1570;
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader(".");
      char[] charArray0 = new char[7];
      charArray0[0] = '!';
      charArray0[1] = 'v';
      charArray0[2] = 'U';
      charArray0[3] = 'V';
      charArray0[4] = 'u';
      charArray0[5] = '}';
      charArray0[6] = 'd';
      stringReader0.read(charArray0, 0, 0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      System.setCurrentTimeMillis(1L);
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("cua");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "cua");
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StringReader stringReader0 = new StringReader("epZ63Z|a;");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChar((-1));
      jSTerm0.makeVariable();
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.wordChars((-1), 60);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.addAll((Collection) jSTerm1);
      JSTerm jSTerm2 = jSTerm0.call();
      jSTerm1.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm2.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StringReader stringReader0 = new StringReader("tv+BG77@\"O'B>QHj1");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.mark(2219);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '_';
      charArray0[1] = 'I';
      charArray0[2] = '+';
      charArray0[3] = 'R';
      charArray0[4] = '$';
      charArray0[5] = 'x';
      charArray0[6] = 'R';
      charArray0[7] = ']';
      stringReader0.read(charArray0);
      jSTerm0.spliterator();
      System.setCurrentTimeMillis((-1));
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertNotSame(jSTerm0, jSTerm1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeEval(false);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      jSTerm0.isEval();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.matches(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm1.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.lessT = (-2);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" XxDnVkb2uIqwv^m+");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      jSTerm0.matches(jSTerm1);
      jSTerm0.isVariable();
      JSTerm jSTerm2 = jSTerm0.call();
      JSJshopVars.percent = (-1);
      JSJshopVars.leftBrac = 63;
      jSTerm2.matches(jSTerm1);
      jSTerm0.isGround();
      // Undeclared exception!
      try { 
        jSTerm1.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator.identity();
      JSTerm jSTerm1 = null;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashStarComments(false);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSSubstitution");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      streamTokenizer0.slashStarComments(true);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSJshopVars.leftBrac = 0;
      jSTerm1.isEval();
      JSJshopVars.greaterT = 0;
      jSTerm0.makeFunction();
      jSTerm0.toStr();
      boolean boolean0 = jSTerm1.isVariable();
      assertFalse(jSTerm0.isConstant());
      assertFalse(boolean0);
  }
}
