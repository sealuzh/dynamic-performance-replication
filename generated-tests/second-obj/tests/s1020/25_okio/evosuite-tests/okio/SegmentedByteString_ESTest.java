/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 07:17:04 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import okio.Buffer;
import okio.BufferedSink;
import okio.ByteString;
import okio.RealBufferedSink;
import okio.Segment;
import okio.SegmentedByteString;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SegmentedByteString_ESTest extends SegmentedByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.sha256();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("&b&|?~];");
      segmentedByteString0.write(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        segmentedByteString0.toAsciiUppercase();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        segmentedByteString0.string(charset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      realBufferedSink0.writeIntLe(1);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1);
      byte[] byteArray0 = segmentedByteString0.internalArray();
      assertNotNull(byteArray0);
      
      segmentedByteString0.rangeEquals((int) (byte) (-78), byteArray0, (int) (byte) (-78), 101);
      assertEquals(1, segmentedByteString0.size());
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.md5();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      segmentedByteString0.write(buffer0);
      segmentedByteString0.hashCode();
      ByteString byteString0 = ByteString.EMPTY;
      // Undeclared exception!
      try { 
        segmentedByteString0.hmacSha256(byteString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUnsafe();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.hmacSha1((ByteString) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      segmentedByteString0.hashCode();
      segmentedByteString0.hashCode();
      // Undeclared exception!
      try { 
        segmentedByteString0.sha1();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      Charset.defaultCharset();
      segmentedByteString0.rangeEquals((-817), (ByteString) null, 2549, (-817));
      // Undeclared exception!
      try { 
        segmentedByteString0.toAsciiLowercase();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      ByteString byteString0 = ByteString.EMPTY;
      // Undeclared exception!
      try { 
        segmentedByteString0.indexOf(byteString0, 2720);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.base64Url();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = 0;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      segmentedByteString0.hashCode();
      int int1 = 0;
      // Undeclared exception!
      try { 
        segmentedByteString0.substring(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        segmentedByteString0.lastIndexOf(byteArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer.segmentSizes();
      realBufferedSink0.writeIntLe(2);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSink0.buffer, 2);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0.buffer);
      segmentedByteString0.toString();
      Object object0 = new Object();
      Object object1 = new Object();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      segmentedByteString0.equals(segmentedByteString0);
      realBufferedSink1.buffer.write(realBufferedSink0.buffer, (long) 2);
      // Undeclared exception!
      try { 
        Charset.forName("@L&eH");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // @L&eH
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      realBufferedSink0.writeIntLe(1);
      Segment segment0 = realBufferedSink0.buffer.head;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1);
      segmentedByteString0.toAsciiUppercase();
      // Undeclared exception!
      try { 
        segmentedByteString0.getByte(8189);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=8189 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      buffer0.segmentSizes();
      realBufferedSink0.writeIntLe((-498));
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSink0.buffer, 1);
      ByteString byteString0 = buffer0.sha1();
      String string0 = segmentedByteString0.base64();
      assertEquals("Dg==", string0);
      
      buffer0.sha512();
      int int0 = segmentedByteString0.compareTo(byteString0);
      assertEquals((-1), int0);
      
      int int1 = segmentedByteString0.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      realBufferedSink0.writeIntLe(1);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1);
      realBufferedSink0.toString();
      ByteString byteString0 = buffer1.sha512();
      realBufferedSink0.flush();
      realBufferedSink0.write((ByteString) segmentedByteString0);
      segmentedByteString0.rangeEquals(1, byteString0, 110, 1);
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer.segmentSizes();
      realBufferedSink0.writeByte(1);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSink0.buffer, 1);
      realBufferedSink0.writeHexadecimalUnsignedLong(1);
      Object object0 = new Object();
      ByteString.encodeUtf8("");
      Buffer buffer1 = realBufferedSink0.buffer;
      String string0 = segmentedByteString0.utf8;
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = segmentedByteString0.rangeEquals((int) (byte)47, byteArray0, 1, (-473));
      assertEquals(1, segmentedByteString0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      realBufferedSink0.writeIntLe(1);
      Segment segment0 = realBufferedSink0.buffer.head;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1);
      segmentedByteString0.base64();
      ByteString byteString0 = buffer1.sha512();
      realBufferedSink0.flush();
      realBufferedSink0.write((ByteString) segmentedByteString0);
      buffer1.writeByte((-2039));
      segmentedByteString0.rangeEquals(0, byteString0, 110, 1);
      Object object0 = new Object();
      SegmentedByteString segmentedByteString1 = null;
      try {
        segmentedByteString1 = new SegmentedByteString(realBufferedSink0.buffer, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=0 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      realBufferedSink0.writeIntLe(1);
      Segment segment0 = realBufferedSink0.buffer.head;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1);
      ByteString byteString0 = buffer0.sha1();
      segmentedByteString0.base64();
      realBufferedSink0.writeHexadecimalUnsignedLong(1L);
      realBufferedSink0.flush();
      segmentedByteString0.compareTo(byteString0);
      segmentedByteString0.rangeEquals(1, byteString0, (-639), (-639));
      segmentedByteString0.size();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      realBufferedSink0.writeIntLe(1);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte) (-13);
      boolean boolean0 = segmentedByteString0.rangeEquals(1, byteArray0, (int) (byte) (-13), (int) (byte) (-16));
      assertFalse(boolean0);
      assertEquals(1, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      realBufferedSink0.writeIntLe(1);
      Segment segment0 = realBufferedSink0.buffer.head;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1);
      buffer1.sha1();
      segmentedByteString0.base64();
      buffer1.write((ByteString) segmentedByteString0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "AQ==");
      realBufferedSink0.writeHexadecimalUnsignedLong(1095216660480L);
      realBufferedSink0.flush();
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = segmentedByteString0.rangeEquals(0, byteArray0, (int) (byte)31, 0);
      assertEquals(15L, buffer0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      realBufferedSink0.buffer.segmentSizes();
      buffer0.segmentSizes();
      realBufferedSink0.writeByte(1);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1);
      // Undeclared exception!
      try { 
        segmentedByteString0.substring(1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      buffer0.clone();
      realBufferedSink0.writeIntLe(1);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1);
      realBufferedSink0.close();
      PipedInputStream pipedInputStream0 = new PipedInputStream(278);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      segmentedByteString0.write(pipedOutputStream0);
      assertEquals(1, pipedInputStream0.available());
      
      segmentedByteString0.toAsciiLowercase();
      assertEquals(1, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeIntLe(2);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSink0.buffer, 2);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0.buffer);
      ByteBuffer byteBuffer0 = segmentedByteString0.asByteBuffer();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)27;
      segmentedByteString0.startsWith(byteArray0);
      segmentedByteString0.hex();
      Object object0 = new Object();
      segmentedByteString0.equals(byteBuffer0);
      int int0 = 3;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.write(((RealBufferedSink) bufferedSink0).buffer, 7069L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      realBufferedSink0.writeIntLe(1);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 2);
      realBufferedSink0.buffer.emit();
      String string0 = segmentedByteString0.hex();
      assertEquals("0100", string0);
      
      realBufferedSink0.writeHexadecimalUnsignedLong(1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object object0 = new Object();
      ByteString byteString0 = ByteString.encodeUtf8("0100");
      Buffer buffer2 = realBufferedSink0.buffer;
      int int0 = ObjectStreamConstants.baseWireHandle;
      Object object1 = new Object();
      Object object2 = new Object();
      boolean boolean0 = segmentedByteString0.equals(byteString0);
      assertFalse(boolean0);
      
      segmentedByteString0.asByteBuffer();
      assertEquals(2, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer.segmentSizes();
      BufferedSink bufferedSink0 = realBufferedSink0.writeIntLe(2);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSink0.buffer, 2);
      RealBufferedSink realBufferedSink1 = (RealBufferedSink)realBufferedSink0.writeIntLe(2);
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(((RealBufferedSink) bufferedSink0).buffer, 2);
      String string0 = segmentedByteString1.utf8();
      assertEquals("\u0002\u0000", string0);
      
      Object object0 = new Object();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object object1 = new Object();
      Object object2 = new Object();
      boolean boolean0 = segmentedByteString1.equals(segmentedByteString0);
      assertTrue(boolean0);
      
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer0);
      realBufferedSink1.toString();
      Object object3 = new Object();
      boolean boolean1 = segmentedByteString1.equals("\u0002\u0000");
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink1 = (RealBufferedSink)realBufferedSink0.writeByte(1);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSink0.buffer, 1);
      segmentedByteString0.utf8();
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(realBufferedSink1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteString byteString0 = ByteString.encodeUtf8("\u0001");
      Buffer buffer1 = realBufferedSink1.buffer;
      byte[] byteArray0 = new byte[1];
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      boolean boolean0 = realBufferedSink0.closed;
      realBufferedSink2.flush();
      byteString0.compareTo((ByteString) segmentedByteString0);
      segmentedByteString0.rangeEquals((int) (byte)35, byteString0, 1, (-1515));
      segmentedByteString0.rangeEquals(1, byteArray0, (-1515), (int) (byte)35);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object3 = new Object();
      ByteString byteString1 = new ByteString(byteArray0);
      segmentedByteString0.equals(byteString1);
      SegmentedByteString segmentedByteString1 = null;
      try {
        segmentedByteString1 = new SegmentedByteString(realBufferedSink0.buffer, (-766));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-766
         //
         verifyException("okio.Util", e);
      }
  }
}
