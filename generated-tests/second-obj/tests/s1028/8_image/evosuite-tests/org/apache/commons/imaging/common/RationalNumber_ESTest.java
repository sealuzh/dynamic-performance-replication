/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 13:51:19 GMT 2018
 */

package org.apache.commons.imaging.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.imaging.common.RationalNumber;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RationalNumber_ESTest extends RationalNumber_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(8.514064120390685E-9);
      float float0 = rationalNumber0.floatValue();
      assertEquals(8.514064139901876E-9, rationalNumber0.doubleValue(), 0.01);
      assertEquals(117452721, rationalNumber0.divisor);
      assertEquals(8.514064E-9F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-2.147483647E9));
      String string0 = rationalNumber0.toDisplayString();
      assertEquals(1, rationalNumber0.divisor);
      assertEquals("-2147483647", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2.147483647E9);
      long long0 = rationalNumber0.longValue();
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(2147483647L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0.0);
      assertEquals(0.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(1, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-1.0));
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("-1", string0);
      
      float float0 = rationalNumber0.floatValue();
      assertEquals(1, rationalNumber0.divisor);
      assertEquals((-1.0), rationalNumber0.doubleValue(), 0.01);
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber(1001, 0);
      float float0 = rationalNumber0.floatValue();
      assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
      
      String string0 = rationalNumber0.toString();
      assertEquals("Invalid rational (1001/0)", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1483.25);
      float float0 = rationalNumber0.floatValue();
      assertEquals(1483.25F, float0, 0.01F);
      
      int int0 = rationalNumber0.intValue();
      assertEquals(1483, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(1L, 1L);
      String string0 = rationalNumber0.toString();
      assertEquals("1", string0);
      
      rationalNumber0.floatValue();
      RationalNumber rationalNumber1 = RationalNumber.valueOf(0.6666666666666666);
      assertEquals(3, rationalNumber1.divisor);
      assertEquals(0.6666667F, rationalNumber1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber((-240), (-415));
      String string0 = rationalNumber0.toString();
      assertEquals("-240/-415 (0.578)", string0);
      
      long long0 = rationalNumber0.longValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(5.835758474859176E-5);
      float float0 = rationalNumber0.floatValue();
      assertEquals(5.8356676E-5F, float0, 0.01F);
      assertEquals(5.835667600373483E-5, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber((-1), (-1));
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod((-1), (-1));
      RationalNumber rationalNumber2 = new RationalNumber(1, 1);
      RationalNumber rationalNumber3 = new RationalNumber(1, 1);
      rationalNumber3.toString();
      RationalNumber rationalNumber4 = RationalNumber.valueOf(1114.002145);
      assertEquals(1114.0F, rationalNumber4.floatValue(), 0.01F);
      
      String string0 = rationalNumber1.toString();
      assertEquals(1, rationalNumber1.numerator);
      assertEquals("1", string0);
      
      float float0 = rationalNumber3.floatValue();
      assertEquals(1.0, rationalNumber3.doubleValue(), 0.01);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(734L, 734L);
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(1, (-2147483649L));
      RationalNumber rationalNumber2 = RationalNumber.valueOf(734L);
      String string0 = rationalNumber0.toDisplayString();
      RationalNumber.factoryMethod(658L, 1);
      RationalNumber rationalNumber3 = RationalNumber.valueOf(1);
      RationalNumber rationalNumber4 = RationalNumber.factoryMethod(1, (-2147483649L));
      RationalNumber rationalNumber5 = rationalNumber2.negate();
      String string1 = rationalNumber2.toString();
      assertEquals("734", string1);
      
      String string2 = rationalNumber1.toDisplayString();
      assertEquals(4.656612875245797E-10, rationalNumber1.doubleValue(), 0.01);
      assertEquals("0", string2);
      
      RationalNumber rationalNumber6 = rationalNumber0.negate();
      assertEquals((-1), rationalNumber6.numerator);
      
      String string3 = rationalNumber3.toString();
      assertTrue(string3.equals((Object)string0));
      
      rationalNumber5.doubleValue();
      assertEquals((-734.0F), rationalNumber5.floatValue(), 0.01F);
      
      rationalNumber3.doubleValue();
      float float0 = rationalNumber4.floatValue();
      assertEquals(4.656613E-10F, float0, 0.01F);
      
      String string4 = rationalNumber4.toString();
      assertEquals("1/2147483647 (0)", string4);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(2147483647L, 2147483658L);
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(357913943, 3L);
      assertEquals(357913943, rationalNumber1.numerator);
      
      RationalNumber rationalNumber2 = rationalNumber0.negate();
      assertEquals((-357913941), rationalNumber2.numerator);
      assertEquals((-1.0F), rationalNumber2.floatValue(), 0.01F);
      
      float float0 = rationalNumber0.floatValue();
      assertEquals(0.9999999944120646, rationalNumber0.doubleValue(), 0.01);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        RationalNumber.factoryMethod(2147483658L, 0L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Invalid value, numerator: 2147483658, divisor: 0
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-17L), (-17L));
      RationalNumber.factoryMethod(1, 1);
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(2147483658L, 1);
      assertEquals((byte)10, rationalNumber1.byteValue());
      assertEquals((-2.147483638E9), rationalNumber1.doubleValue(), 0.01);
      
      int int0 = rationalNumber0.intValue();
      assertEquals(1, int0);
      
      double double0 = rationalNumber0.doubleValue();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-1993L), 1906L);
      assertEquals((-1906), rationalNumber0.divisor);
      
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(1906L, 1906L);
      assertEquals(1, rationalNumber1.divisor);
      
      RationalNumber rationalNumber2 = RationalNumber.valueOf(1906L);
      RationalNumber rationalNumber3 = new RationalNumber(1, 1993);
      RationalNumber rationalNumber4 = new RationalNumber(1, 1993);
      RationalNumber rationalNumber5 = rationalNumber2.negate();
      RationalNumber rationalNumber6 = RationalNumber.factoryMethod((-2147483670L), (-1906));
      RationalNumber rationalNumber7 = new RationalNumber(1, 1);
      rationalNumber5.toString();
      RationalNumber.valueOf(1906);
      RationalNumber rationalNumber8 = RationalNumber.valueOf((-1906));
      rationalNumber8.toString();
      String string0 = rationalNumber8.toDisplayString();
      assertEquals("-1906", string0);
      
      RationalNumber rationalNumber9 = RationalNumber.valueOf(1);
      rationalNumber9.intValue();
      rationalNumber7.toString();
      RationalNumber rationalNumber10 = new RationalNumber(1, 2124638077);
      RationalNumber.valueOf(1);
      String string1 = rationalNumber2.toString();
      assertEquals("1,906", string1);
      
      long long0 = rationalNumber6.longValue();
      assertEquals((byte)40, rationalNumber6.byteValue());
      assertEquals(1126696.573976915, rationalNumber6.doubleValue(), 0.01);
      assertEquals(1126696L, long0);
      
      int int0 = rationalNumber9.intValue();
      assertEquals(1, int0);
      assertEquals(1L, rationalNumber9.longValue());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber(977, 977);
      rationalNumber0.negate();
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      RationalNumber rationalNumber2 = rationalNumber1.negate();
      RationalNumber rationalNumber3 = RationalNumber.valueOf(977);
      rationalNumber3.negate();
      rationalNumber2.negate();
      RationalNumber rationalNumber4 = RationalNumber.valueOf(977);
      String string0 = rationalNumber4.toString();
      assertEquals("977", string0);
      
      rationalNumber2.longValue();
      RationalNumber rationalNumber5 = RationalNumber.factoryMethod(0L, 3334L);
      assertEquals(0.0F, rationalNumber5.floatValue(), 0.01F);
      assertEquals(1, rationalNumber5.divisor);
      
      RationalNumber rationalNumber6 = RationalNumber.valueOf(2.147483641214025E9);
      assertEquals(2147483641L, rationalNumber6.longValue());
      
      rationalNumber0.floatValue();
      float float0 = rationalNumber1.floatValue();
      assertEquals((-1.0F), float0, 0.01F);
  }
}
