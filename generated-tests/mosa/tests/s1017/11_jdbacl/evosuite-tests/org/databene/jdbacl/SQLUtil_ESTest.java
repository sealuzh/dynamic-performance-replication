/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 08:55:22 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayReader;
import java.io.FilterOutputStream;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.util.LinkedList;
import java.util.List;
import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.sql.execute.NoPutResultSet;
import org.apache.derby.iapi.store.raw.RawStoreFactory;
import org.apache.derby.iapi.store.raw.data.DataFactory;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.store.access.btree.BTree;
import org.apache.derby.impl.store.raw.RawStore;
import org.databene.commons.version.VersionNumber;
import org.databene.commons.version.VersionNumberComponent;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBProcedure;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.gds.impl.GDSType;
import org.firebirdsql.jca.FBManagedConnectionFactory;
import org.firebirdsql.jdbc.FBBlob;
import org.h2.jdbcx.JdbcConnectionPool;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, (String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "z[qA(8Lc";
      stringArray0[1] = " AND ";
      stringArray0[2] = "kj r=w{";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("z[qA(8Lc = 'z[qA(8Lc' AND  AND  = ' AND ' AND kj r=w{ = 'kj r=w{'", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("op_info_blob ");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("op_info_blob ", defaultDBTable0, (DBDataType) null, integer0);
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      JdbcConnectionPool jdbcConnectionPool0 = JdbcConnectionPool.create("op_info_blob ", "", "op_info_blob ");
      jdbcConnectionPool0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append(false);
      SQLUtil.addOptionalCondition(":}Siz4bkGle.]", stringBuilder1);
      assertEquals("false or :}Siz4bkGle.]", stringBuilder1.toString());
      assertEquals("false or :}Siz4bkGle.]", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("ah;?G\" WCr}");
      String string0 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("ah;?G\" WCr}", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[2] = null;
      String string0 = SQLUtil.join((String) null, (String) null, stringArray0, "callselect null as table_cat, null as table_schem, rdb$relation_name as table_name, rdb$grantor as grantor, rdb$user as grantee, rdb$privilege as privilege, rdb$grant_option as is_grantable from rdb$user_privileges where", stringArray0[1], stringArray0);
      assertEquals("callselect null as table_cat, null as table_schem, rdb$relation_name as table_name, rdb$grantor as grantor, rdb$user as grantee, rdb$privilege as privilege, rdb$grant_option as is_grantable from rdb$user_privileges where as null on null.null = null.null and null.null = null.null and null.null = null.null", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "2aFh8##", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT 2aFh8## PRIMARY KEY ()", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("alter tabledrop index+t-sc");
      String string0 = SQLUtil.substituteMarkers("alter tabledrop index+t-sc", "alter tabledrop index+t-sc", dBCatalog0);
      assertEquals("alter tabledrop index+t-sc", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = BTree.PROPERTY_NKEYFIELDS;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("alter tabwedo", true, defaultDBTable0, "nKeyFields");
      String string1 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT \"alter tabwedo\" ", string1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("alter tabledrop index+t-sc");
      String string0 = SQLUtil.typeAndName(dBCatalog0);
      assertEquals("catalog alter tabledrop index+t-sc", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("insertorg.hsqldb.databasecommandinterpreter");
      assertFalse(boolean0);
      
      String string0 = SQLUtil.substituteMarkers("]5", "insertorg.hsqldb.databasecommandinterpreter", "insertorg.hsqldb.databasecommandinterpreter");
      assertEquals("]5", string0);
      
      String string1 = SQLUtil.normalize("]5", false);
      assertEquals("] 5", string1);
      
      String[] stringArray0 = new String[0];
      String string2 = SQLUtil.innerJoin("]5", stringArray0, "] 5", "]5", stringArray0);
      assertEquals("] 5 as ]5 on ", string2);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = null;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (, )", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SQLUtil.normalize("drop materializWd viewob5 nt7kc/(xii~;{", true);
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("drop index``~", (String[]) null, "drop index``~", "drop index``~", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "SALT ";
      stringArray0[1] = "SALT ";
      stringArray0[2] = "SALT ";
      stringArray0[3] = "SALT ";
      stringArray0[4] = "SALT ";
      stringArray0[5] = "SALT ";
      String string0 = SQLUtil.renderColumnListWithTableName("SALT ", stringArray0);
      assertEquals("SALT .SALT , SALT .SALT , SALT .SALT , SALT .SALT , SALT .SALT , SALT .SALT ", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "%a-.", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT %a-. PRIMARY KEY ()", string0);
      
      String string1 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT %a-. ", string1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("g");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("g", false, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      assertEquals("CONSTRAINT g ", stringBuilder0.toString());
      
      SQLUtil.isQuery("g");
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder1 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("", stringBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = NoPutResultSet.NEXT;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("call", defaultDBTable0, (-1), "=x6K0 szS=>F-M\"");
      String string1 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("=X6K0 SZS=>F-M\"", string1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(1387, "alter tableah;?g\" wcr}");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("~s@Sx`}(otC");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter tableah;?g\" wcr}", defaultDBTable0, dBDataType0, integer0, integer0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("ALTER TABLEAH;?G\" WCR}(3,3)", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter materialized view");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("alter materialized view", false, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      assertEquals("CONSTRAINT \"alter materialized view\" ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("g");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DBDataType dBDataType0 = DBDataType.getInstance(32, "g");
      Integer.toUnsignedLong(32);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer0);
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      defaultDBColumn0.setSize(integer1);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals(" G(3) NULL", string0);
      
      String string1 = SQLUtil.renderValue("");
      assertEquals("''", string1);
      
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      String string2 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals(", ", string2);
      
      String string3 = SQLUtil.ownerDotComponent(dBColumnArray0[0]);
      assertEquals("g.", string3);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition(":}Siz4bkGle.]", stringBuilder0);
      StringBuilder stringBuilder1 = new StringBuilder(":}Siz4bkGle.]");
      System.setCurrentTimeMillis((-1L));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("g");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "g", false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SQLUtil.normalize("D#~Hvic^B!nG", true);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = SQLUtil.normalize("x5.0C>>d@yp%~/[", false);
      assertEquals("x5.0C > > d @ yp % ~ / [", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-588051016), "rNjQ;\"/a ~^0$[B$U<");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("rNjQ;\"/a ~^0$[B$U<", defaultDBTable0, dBDataType0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("rNjQ;\"/a ~^0$[B$U< RNJQ;\"/A ~^0$[B$U< NULL", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter tableah;?g\" wcr}");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      StringBuilder stringBuilder0 = new StringBuilder("' in class ");
      SQLUtil.addRequiredCondition("0I18SEVh6[2r;Af", stringBuilder0);
      assertEquals("' in class  and 0I18SEVh6[2r;Af", stringBuilder0.toString());
      
      String string0 = SQLUtil.normalize("0I18SEVh6[2r;Af", true);
      assertEquals("0  I18SEVh6 [ 2r ; Af", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("updateorg.hsqldb.databasecommandinterpreter");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = SQLUtil.normalize("lZD?nhDE'", true);
      assertEquals("lZD ? nhDE ''", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = SQLUtil.normalize("ep] jT=9s\"|hsFaT", true);
      assertEquals("ep ] jT = 9s \"|hsFaT\"", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      boolean boolean0 = FBBlob.SEGMENTED;
      String string0 = SQLUtil.normalize("5KN9i4C2H!g5*%&D", true);
      assertEquals("5K  N9i4C2H ! g5 * % & D", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("0I18SEVh6[2r;Af", stringBuilder0);
      String string0 = RawStore.TEST_REENCRYPT_CRASH_AFTER_CHECKPOINT;
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("call");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = SQLUtil.normalize("H$W(Y{GlQ!pn)}-VMh", true);
      assertEquals("H $ W (Y { GlQ ! pn) } - VMh", string0);
      
      DBSchema dBSchema0 = new DBSchema("H $ W (Y { GlQ ! pn) } - VMh");
      DBPackage dBPackage0 = new DBPackage("XSCB3.S", dBSchema0);
      DBProcedure dBProcedure0 = new DBProcedure("H $ W (Y { GlQ ! pn) } - VMh", dBPackage0);
      CompositeDBObject<?> compositeDBObject0 = dBProcedure0.getOwner();
      String string1 = SQLUtil.ownerDotComponent(compositeDBObject0);
      assertEquals("H $ W (Y { GlQ ! pn) } - VMh.XSCB3.S", string1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = SQLUtil.normalize("select null as TABLE_CAT,  null as TABLE_SCHEM, RDB$RELATION_NAME as TABLE_NAME, RDB$GRANTOR as GRANTOR,  RDB$USER as GRANTEE,  RDB$PRIVILEGE as PRIVILEGE,  RDB$GRANT_OPTION as IS_GRANTABLE from RDB$USER_PRIVILEGES where ", false);
      assertEquals("select null as TABLE_CAT, null as TABLE_SCHEM, RDB $ RELATION_NAME as TABLE_NAME, RDB $ GRANTOR as GRANTOR, RDB $ USER as GRANTEE, RDB $ PRIVILEGE as PRIVILEGE, RDB $ GRANT_OPTION as IS_GRANTABLE from RDB $ USER_PRIVILEGES where", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("updateorg.hsqldbMdatabasGcomm(ndinterpreter");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: updateorg.hsqldbMdatabasGcomm(ndinterpreter
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("fg");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "?", false, (String[]) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("@R\"n<7@PV");
      PrintWriter printWriter0 = mockPrintWriter0.format("@R\"n<7@PV", (Object[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("?", (String[]) null, "select", "alter tableoo,3lqma#b", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("privilege,");
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("privilege,");
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      String string0 = SQLUtil.normalize("-<8@XV#YV!p>v", false);
      assertEquals("- < 8 @ XV # YV ! p > v", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SQLUtil.renderColumnNames((String[]) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("()");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("/@~>");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("()");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select null as TABLE_CAT,  null as TABLE_SCHEM, RDB$RELATION_NAME as TABLE_NAME, RDB$GRANTOR as GRANTOR,  RDB$USER as GRANTEE,  RDB$PRIVILEGE as PRIVILEGE,  RDB$GRANT_OPTION as IS_GRANTABLE from RDB$USER_PRIVILEGES where ");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("op_accept ");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("alter materialized viewr1pt(n~s*", true, "scope", "op_accept ");
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      String string0 = DataFactory.DB_EX_LOCKFILE_NAME;
      assertEquals("dbex.lck", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
      
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "table null");
      DBDataType dBDataType0 = DBDataType.getInstance("NCLOB");
      Integer integer0 = Integer.getInteger("NCLOB", (-327017486));
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("table null", defaultDBTable0, dBDataType0, integer0, integer1);
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("table null NCLOB NULL", string1);
      
      defaultDBTable0.getPrimaryKeyConstraint();
      String string2 = SQLUtil.renderValue("table null NCLOB NULL");
      assertEquals("'table null NCLOB NULL'", string2);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "g";
      stringArray0[1] = "g";
      stringArray0[2] = "g";
      stringArray0[3] = "g";
      stringArray0[4] = "g";
      stringArray0[5] = "g";
      SQLUtil.renderColumnNames(stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("8XIdXZOF!");
      SQLUtil.removeComments("g");
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("CuE ,^FkGh>_;B|V2", defaultDBTable0, (-1943), "(g, g, g, g, g, g)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"g\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SQLUtil.normalize("-<8@XV#YV!p>v", false);
      Character character0 = new Character('Q');
      SQLUtil.substituteMarkers("- < 8 @ XV # YV ! p > v", "- < 8 @ XV # YV ! p > v", character0);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("--");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("create unique indexalter tabwedop nd");
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[1] = "create unique indexalter tabwedop nd";
      stringArray0[2] = "create unique indexalter tabwedop nd";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable1, stringArray0, defaultDBTable1, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (, create unique indexalter tabwedop nd, create unique indexalter tabwedop nd) REFERENCES create unique indexalter tabwedop nd(, create unique indexalter tabwedop nd, create unique indexalter tabwedop nd)", string0);
      
      String string1 = RawStoreFactory.PAGE_RESERVED_SPACE_PARAMETER;
      String string2 = SQLUtil.join("alter table", "create table ", stringArray0, (String) null, "create unique indexalter tabwedop nd", stringArray0);
      assertEquals("alter table join null as create unique indexalter tabwedop nd on create table .null = create unique indexalter tabwedop nd.null and create table .create unique indexalter tabwedop nd = create unique indexalter tabwedop nd.create unique indexalter tabwedop nd and create table .create unique indexalter tabwedop nd = create unique indexalter tabwedop nd.create unique indexalter tabwedop nd", string2);
      
      boolean boolean0 = SQLUtil.isDML("alter materialized viewalter tabwedop nd");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter tabwedop nd");
      assertNull(boolean0);
      
      TableContainer tableContainer0 = new TableContainer("}zd&!d~D_DTf+m&p~F");
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("[doZ>^AV1oZ3]p|ZRvb", (DBSchema) null);
      String[] stringArray0 = new String[13];
      stringArray0[0] = " WHERE ";
      stringArray0[1] = "[doZ>^AV1oZ3]p|ZRvb";
      stringArray0[2] = "alter tabwedop nd";
      stringArray0[3] = "alter tabwedop nd";
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("select into");
      assertTrue(boolean1);
      assertNotNull(boolean1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = LanguageConnectionContext.lccStr;
      SQLUtil.parseColumnTypeAndSize("update");
      String string1 = SQLUtil.normalize("{8#F@37*/j", false);
      assertEquals("{ 8 # F @ 3  7 */ j", string1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("done updates");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DBSchema dBSchema0 = new DBSchema("#`={-wm7rs{3V'");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.h2.store.FileLock", dBSchema0);
      String[] stringArray0 = new String[3];
      stringArray0[1] = "org.h2.store.FileLock";
      stringArray0[2] = "truncatealte";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "!a%$^gS=0AD3}IIG&kS", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("#`={-wm7rs{3V'", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      PrintWriter printWriter0 = mockPrintWriter0.format("org.h2.store.FileLock", (Object[]) stringArray0);
      SQLUtil.renderCreateTable(dBTable0, false, nameSpec0, printWriter0);
      // Undeclared exception!
      try { 
        SQLUtil.normalize(stringArray0[0], true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = new Integer(32);
      DBDataType dBDataType0 = DBDataType.getInstance(32, "g");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      JdbcConnectionPool.create("g", "x]ZH[_", "create unique index");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("create unique index");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter tabwedop nd");
      assertNull(boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '7';
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      LinkedList<VersionNumberComponent> linkedList0 = new LinkedList<VersionNumberComponent>(constraintDescriptorList0);
      VersionNumber versionNumber0 = new VersionNumber(linkedList0, constraintDescriptorList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase(" = ", "alter tabwedop nd", versionNumber0);
      defaultDatabase0.getCatalog("alter tabwedop nd");
      DBSchema dBSchema0 = new DBSchema("alter tablealter tabwedop nd", (DBCatalog) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("n'8[,|t0EJr[!4~+", dBSchema0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "alter tabwedop nd";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      TableContainer tableContainer0 = new TableContainer("select", (CompositeDBObject<? extends DBObject>) null);
      tableContainer0.getTable("select");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("select", (DBTable) null, 123, "select");
      genericDescriptorList0.add((Object) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) genericDescriptorList0);
      assertEquals("select", string0);
      
      boolean boolean0 = SQLUtil.isDDL("select");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      char[] charArray0 = new char[16];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(charArrayReader0);
      charArrayReader0.read();
      streamTokenizer0.nval = (-1235.339385283);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 1235.339385283", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("--", false, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      String string0 = SQLUtil.normalize("--", false);
      assertEquals("--", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("--", false, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte)47;
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream(byteArray0);
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream1 = new DynamicByteArrayOutputStream(dynamicByteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(dynamicByteArrayOutputStream1, false);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "drop materializWd viewob5 nt7kc/(xii~;{");
      SQLUtil.normalize("drop materializWd viewob5 nt7kc/(xii~;{", true);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("selectdate", true, "drop materializWd viewob5 nt7kc / (xii ~ ; {", "selectdate");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      // Undeclared exception!
      SQLUtil.isProcedureCall("/*");
  }
}
