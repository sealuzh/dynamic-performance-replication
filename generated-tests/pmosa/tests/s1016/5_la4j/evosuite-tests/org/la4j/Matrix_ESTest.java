/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 10:44:56 GMT 2018
 */

package org.la4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ChoiceFormat;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.iterator.ColumnMajorMatrixIterator;
import org.la4j.linear.LinearSystemSolver;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic1DMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.AdvancedMatrixPredicate;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixMatrixOperation;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesAddition;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.operation.ooplace.OoPlaceVectorsAddition;
import org.la4j.operation.ooplace.OoPlaceVectorsSubtraction;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.VectorFactory;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Matrix_ESTest extends Matrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = 0;
      DenseMatrix denseMatrix0 = DenseMatrix.constant(0, 0, (-89.51441615086));
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.removeColumn(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      int int0 = 10;
      DenseMatrix denseMatrix0 = DenseMatrix.identity(10);
      denseMatrix0.removeFirstRow();
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      Matrix matrix0 = Matrix.random(1, 0, mockRandom0);
      Matrix matrix1 = matrix0.removeRow(0);
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix1.rows());
      assertEquals(1, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 0, 0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      cCSMatrix0.swapRows(0, 1325);
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Matrix matrix0 = Matrix.fromCSV("");
      Matrix matrix1 = matrix0.multiplyByItsTranspose();
      matrix1.toSparseMatrix();
      // Undeclared exception!
      try { 
        matrix1.blankOfRows((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = 3091.653454534924;
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.from1DArray((-242), 3, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -242x3
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = 37;
      MockRandom mockRandom0 = new MockRandom(37);
      mockRandom0.nextLong();
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(37, mockRandom0);
      // Undeclared exception!
      try { 
        Matrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      SparseVector sparseVector0 = SparseVector.zero(0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, sparseVector0);
      matrix0.copy();
      DenseVector denseVector1 = DenseVector.constant(0, 0);
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      DenseVector.fromArray(doubleArray0);
      SparseVector sparseVector1 = SparseVector.fromMap(hashMap0, 0);
      sparseVector1.subtract(0.0);
      Matrix matrix1 = ooPlaceOuterProduct0.apply(denseVector1, sparseVector1);
      DenseMatrix denseMatrix0 = matrix1.toDenseMatrix();
      matrix1.hashCode();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.GAUSS_JORDAN;
      denseMatrix0.withInverter(linearAlgebra_InverterFactory0);
      matrix0.iteratorOfColumn(0);
      Matrix matrix2 = matrix0.sliceBottomRight(0, (-1114));
      matrix0.max();
      matrix2.iterator();
      denseMatrix0.toDenseMatrix();
      matrix1.toBinary();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      matrix1.updateColumn(0, vectorFunction0);
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)denseMatrix0.subtract(matrix1);
      // Undeclared exception!
      try { 
        basic2DMatrix0.ensureIndexesAreInBounds(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(3);
      // Undeclared exception!
      try { 
        sparseMatrix0.foldColumn(3, (VectorAccumulator) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '3' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(340, 340);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        basic2DMatrix0.updateColumn(340, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(106);
      // Undeclared exception!
      try { 
        denseMatrix0.sliceTopLeft(3081, (-100));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..3081][0..-100].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(3611);
      denseMatrix0.iteratorOfColumn(3611);
      assertEquals(3611, denseMatrix0.rows());
      assertEquals(3611, denseMatrix0.columns());
      
      Matrix matrix0 = denseMatrix0.sliceBottomRight(3611, 3611);
      assertEquals(0, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(0, 3049.8297132, (Random) mockRandom0);
      cRSMatrix0.hashCode();
      assertEquals(0, cRSMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = 4;
      Matrix matrix0 = Matrix.identity(4);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix0.transformRow(4, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.minInRow(240);
      Matrix matrix0 = basic2DMatrix0.divide(794.84628239);
      assertEquals(0, matrix0.rows());
      assertNotSame(matrix0, basic2DMatrix0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>(linkedList0);
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList1);
      Integer integer0 = new Integer((-185));
      linkedList0.add(integer0);
      DenseVector denseVector0 = DenseVector.fromCSV("");
      denseVector0.toString();
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, denseVector0);
      // Undeclared exception!
      try { 
        matrix0.copyOfRows((-2484));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2484x0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(9, 9);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      matrix0.is(advancedMatrixPredicate0);
      // Undeclared exception!
      try { 
        matrix0.maxInColumn(9);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '9' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 0);
      Matrix matrix0 = columnMajorSparseMatrix0.transform((MatrixFunction) null);
      matrix0.multiply((Matrix) columnMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.foldColumn(0, (VectorAccumulator) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[0];
      SparseMatrix sparseMatrix0 = SparseMatrix.from1DArray(0, 0, doubleArray0);
      sparseMatrix0.columnMajorIterator();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = sparseMatrix0.toColumnMajorSparseMatrix();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      columnMajorSparseMatrix0.blankOfColumns(0);
      Matrix matrix0 = columnMajorSparseMatrix0.transform(matrixFunction0);
      matrix0.transpose();
      int int1 = (-600);
      // Undeclared exception!
      try { 
        Matrix.fromCSV("org.la4j.LinearAlgebra$InverterFactory$3");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(0, 0);
      double double0 = basic2DMatrix0.sum();
      assertEquals(0.0, double0, 0.01);
      
      String string0 = basic2DMatrix0.toString();
      assertEquals("", string0);
      assertEquals(0, basic2DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(3, 3);
      matrix0.toCSV();
      // Undeclared exception!
      try { 
        matrix0.get(852, (-2909));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("");
      rowMajorSparseMatrix0.toCSV();
      rowMajorSparseMatrix0.product();
      rowMajorSparseMatrix0.sliceBottomRight(0, 0);
      double[][] doubleArray0 = new double[6][4];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = 1.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 1.0;
      doubleArray3[1] = (double) 0;
      doubleArray3[2] = (double) 0;
      doubleArray3[3] = (double) 0;
      doubleArray3[4] = (double) 0;
      doubleArray3[5] = 1.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = 1.0;
      doubleArray4[1] = 1.0;
      doubleArray4[2] = 1.0;
      doubleArray4[3] = (double) 0;
      doubleArray4[4] = 1.0;
      doubleArray4[5] = 1.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      doubleArray5[0] = 1.0;
      doubleArray5[1] = 1.0;
      doubleArray5[2] = 1.0;
      doubleArray5[3] = 1.0;
      doubleArray5[4] = 200.28127263;
      doubleArray5[5] = (double) 0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      doubleArray0[5] = doubleArray6;
      Matrix.from2DArray(doubleArray0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.eachInRow(0, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(10);
      cRSMatrix0.equals((Object) null);
      MockRandom mockRandom0 = new MockRandom((-1499));
      // Undeclared exception!
      try { 
        DenseMatrix.random((-4103), (-1499), mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Matrix matrix0 = Matrix.constant(7, 7, 7);
      int int0 = (-1893);
      int int1 = 0;
      // Undeclared exception!
      try { 
        matrix0.copyOfShape((-1893), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1893x0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(3, 3);
      // Undeclared exception!
      try { 
        matrix0.non((MatrixPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom(0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(0, 1030.6841885728272, (Random) mockRandom0);
      columnMajorSparseMatrix0.setAll(0);
      long long0 = (-1L);
      MockRandom mockRandom1 = new MockRandom(1L);
      columnMajorSparseMatrix0.subtract((double) 1L);
      Matrix.diagonal(0, (-1L));
      int int1 = (-137);
      // Undeclared exception!
      try { 
        Matrix.zero((-137), 1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      MockRandom mockRandom0 = new MockRandom(16);
      DenseVector denseVector0 = DenseVector.random(16, mockRandom0);
      Matrix matrix0 = denseVector0.toRowMatrix();
      MatrixOperation<DenseMatrix> matrixOperation0 = (MatrixOperation<DenseMatrix>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(matrixOperation0).apply(any(org.la4j.matrix.DenseMatrix.class));
      matrix0.apply(matrixOperation0);
      assertEquals(16, matrix0.columns());
      
      String string0 = matrix0.toCSV();
      assertEquals("0.000, 0.100, 0.200, 0.300, 0.400, 0.500, 0.600, 0.700, 0.800, 0.900, 0.000, 0.100, 0.200, 0.300, 0.400, 0.500\n", string0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-3745.76996877383);
      doubleArray0[1] = (double) 3280;
      doubleArray0[2] = (double) 3280;
      doubleArray0[1] = (double) 16;
      doubleArray0[4] = (double) 3280;
      doubleArray0[5] = (double) 3280;
      doubleArray0[6] = (double) 218;
      Matrix matrix1 = Matrix.from1DArray(4013, 218, doubleArray0);
      assertEquals(218, matrix1.columns());
      assertEquals(4013, matrix1.rows());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(13, 13);
      CRSMatrix cRSMatrix0 = (CRSMatrix)sparseVector0.toDiagonalMatrix();
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      Basic1DMatrix basic1DMatrix0 = (Basic1DMatrix)DenseMatrix.from1DArray(9, 13, (double[]) null);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      // Undeclared exception!
      try { 
        ooPlaceMatricesSubtraction0.applySimple((SparseMatrix) cRSMatrix0, (DenseMatrix) basic1DMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 0);
      columnMajorSparseMatrix0.foldRows((VectorAccumulator) null);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.foldColumn(32, (VectorAccumulator) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[][] doubleArray0 = new double[0][1];
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      double double0 = matrix0.trace();
      assertEquals(0.0, double0, 0.01);
      
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      String string0 = matrix0.mkString(numberFormat0);
      assertEquals(0, matrix0.columns());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = 3;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(3, 3);
      SparseMatrix sparseMatrix0 = rowMajorSparseMatrix0.toSparseMatrix();
      sparseMatrix0.trace();
      int int1 = 6;
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      SparseVector.fromMap(hashMap0, 12);
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.fromMatrixMarket("x&Kmu");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(6, (-3603.4183));
      Matrix matrix0 = cCSMatrix0.subtract((double) 6);
      assertEquals(6, matrix0.columns());
      
      String string0 = matrix0.toCSV();
      assertEquals("-3609.418,    -6.000,    -6.000,    -6.000,    -6.000,    -6.000\n   -6.000, -3609.418,    -6.000,    -6.000,    -6.000,    -6.000\n   -6.000,    -6.000, -3609.418,    -6.000,    -6.000,    -6.000\n   -6.000,    -6.000,    -6.000, -3609.418,    -6.000,    -6.000\n   -6.000,    -6.000,    -6.000,    -6.000, -3609.418,    -6.000\n   -6.000,    -6.000,    -6.000,    -6.000,    -6.000, -3609.418\n", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(3, 3, mockRandom0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = denseMatrix0.toRowMajorSparseMatrix();
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      String string0 = rowMajorSparseMatrix0.mkString(numberFormat0);
      assertEquals("  0 0.1 0.2\n0.3 0.4 0.5\n0.6 0.7 0.8\n", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(0);
      cRSMatrix0.determinant();
      cRSMatrix0.swapRows(0, 0);
      // Undeclared exception!
      try { 
        cRSMatrix0.removeLastRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      MockRandom mockRandom2 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(17, 17, mockRandom2);
      denseMatrix0.toRowMajorSparseMatrix();
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.FORWARD_BACK_SUBSTITUTION;
      LinearSystemSolver linearSystemSolver0 = denseMatrix0.withSolver(linearAlgebra_SolverFactory0);
      assertEquals(17, linearSystemSolver0.unknowns());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = "";
      double[] doubleArray0 = new double[1];
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(0, 2803, doubleArray0);
      // Undeclared exception!
      try { 
        denseMatrix0.removeFirstRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(0, 0, (-89.51441615086));
      ColumnMajorSparseMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix.random(0, 0, mockRandom0);
      DenseMatrix denseMatrix1 = DenseMatrix.randomSymmetric(0, mockRandom0);
      denseMatrix1.toRowMajorSparseMatrix();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      denseMatrix0.eachInRow(37, vectorProcedure0);
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(3, 3, mockRandom0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = denseMatrix0.toRowMajorSparseMatrix();
      double double0 = rowMajorSparseMatrix0.infinityNorm();
      assertEquals(0.8, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = 2408;
      int[] intArray0 = new int[0];
      CCSMatrix cCSMatrix0 = new CCSMatrix(2408, 17, 2408, (double[]) null, intArray0, intArray0);
      // Undeclared exception!
      try { 
        cCSMatrix0.removeFirstColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = 293;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(293, 293);
      int int1 = 8;
      // Undeclared exception!
      try { 
        cRSMatrix0.swapColumns(3342, 8);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '3342' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(3, 3, mockRandom0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = denseMatrix0.toRowMajorSparseMatrix();
      CRSMatrix cRSMatrix0 = (CRSMatrix)rowMajorSparseMatrix0.removeFirstColumn();
      assertEquals(0.8, cRSMatrix0.max(), 0.01);
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(3, 10, mockRandom0);
      mockRandom0.nextLong();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = denseMatrix0.toRowMajorSparseMatrix();
      assertEquals(27, rowMajorSparseMatrix0.cardinality());
      
      Matrix matrix0 = denseMatrix0.copyOfColumns(3);
      assertEquals(3, matrix0.rows());
      assertEquals(3, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(3, 3, mockRandom0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = denseMatrix0.toRowMajorSparseMatrix();
      String string0 = rowMajorSparseMatrix0.mkString("]`4V4]>RkzX5)V=,8X", "GyIr|1XGV ");
      assertEquals("0.000GyIr|1XGV 0.100GyIr|1XGV 0.200]`4V4]>RkzX5)V=,8X0.300GyIr|1XGV 0.400GyIr|1XGV 0.500]`4V4]>RkzX5)V=,8X0.600GyIr|1XGV 0.700GyIr|1XGV 0.800]`4V4]>RkzX5)V=,8X", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(3, 3, mockRandom0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = denseMatrix0.toRowMajorSparseMatrix();
      rowMajorSparseMatrix0.product();
      assertEquals(3, rowMajorSparseMatrix0.columns());
      
      rowMajorSparseMatrix0.kroneckerProduct(denseMatrix0);
      assertEquals(3, rowMajorSparseMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = 3;
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(3, 3, mockRandom0);
      int int1 = 176;
      // Undeclared exception!
      try { 
        denseMatrix0.maxInRow(176);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.power((-1789));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The exponent should be positive: -1789.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(3, 3, mockRandom0);
      denseMatrix0.toRowMajorSparseMatrix();
      // Undeclared exception!
      try { 
        denseMatrix0.minInColumn(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(4, 4);
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 26;
      double double0 = cRSMatrix0.determinant();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(4, (-1529.14));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 37;
      doubleArray0[1] = (double) 37;
      doubleArray0[2] = (double) 5;
      doubleArray0[3] = (double) 5;
      rowMajorSparseMatrix0.determinant();
      doubleArray0[4] = (double) 37;
      // Undeclared exception!
      try { 
        CCSMatrix.from1DArray(37, 5, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = 4;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(5879, 4);
      rowMajorSparseMatrix0.determinant();
      String string0 = "7";
      SparseMatrix.fromMatrixMarket(string0);
      int int1 = 8;
      Random random0 = null;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.random(int1, int0, random0);
      basic2DMatrix0.toString();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(0, 26);
      cRSMatrix0.minInColumn(2813);
      double double0 = cRSMatrix0.determinant();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.nonZeroIterator();
      double double0 = cRSMatrix0.diagonalProduct();
      assertEquals(1.0, double0, 0.01);
      
      double double1 = cRSMatrix0.determinant();
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1, 1);
      double double0 = cRSMatrix0.determinant();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.constant(1647, 1647, 2);
      basic2DMatrix0.toColumnVector();
      CRSMatrix cRSMatrix0 = new CRSMatrix(2, 2);
      cRSMatrix0.iteratorOfNonZeroRows();
      double double0 = cRSMatrix0.determinant();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs((long) 3, 1L, 1443L);
      DenseMatrix denseMatrix0 = DenseMatrix.random(3, 3, mockRandom0);
      denseMatrix0.toRowMajorSparseMatrix();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      double[] doubleArray0 = denseMatrix0.foldRows(vectorAccumulator0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(2006, 2006);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      // Undeclared exception!
      cCSMatrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(4, 1892);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(0, 1892);
      // Undeclared exception!
      try { 
        basic2DMatrix0.insert((Matrix) cCSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 4 rows and 1892 cols at 0, 0 in a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(242, 242);
      // Undeclared exception!
      try { 
        basic2DMatrix0.insert((Matrix) null, 242, 242, 3, (-16), 3, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: 3, -16
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 496);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(0, 3);
      // Undeclared exception!
      try { 
        basic2DMatrix0.insert((Matrix) cCSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 0 rows and 496 cols at 0, 0 in a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 173);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.random(0, 0, (Random) null);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) basic2DMatrix0, 173, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot get 173 rows and 0 cols at 0, 0 from a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromCSV("");
      Object object0 = new Object();
      columnMajorSparseMatrix0.equals(object0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.iteratorOfColumn(7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      CCSMatrix cCSMatrix0 = null;
      try {
        cCSMatrix0 = new CCSMatrix(Integer.MAX_VALUE, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(3, 3, mockRandom0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = denseMatrix0.toRowMajorSparseMatrix();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      boolean boolean0 = rowMajorSparseMatrix0.is(matrixPredicate0);
      assertFalse(boolean0);
      assertEquals(0.8, rowMajorSparseMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(4013);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      matrix0.transformRow(3, vectorFunction0);
      Integer integer0 = new Integer(1000);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(33, 33);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 33;
      doubleArray0[1] = (double) 33;
      doubleArray0[2] = (double) 33;
      doubleArray0[3] = (double) 33;
      doubleArray0[4] = (double) 33;
      doubleArray0[5] = (double) 33;
      doubleArray0[6] = (double) 33;
      doubleArray0[7] = (double) 33;
      doubleArray0[8] = (double) 33;
      Vector vector0 = Vector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        cCSMatrix0.multiply(vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given vector should have the same length as number of columns in the given matrix: 9 does not equal to 33.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(0, 0, mockRandom0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = denseMatrix0.toRowMajorSparseMatrix();
      Matrix matrix0 = rowMajorSparseMatrix0.power(0);
      // Undeclared exception!
      try { 
        matrix0.removeLastColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Matrix matrix0 = Matrix.fromCSV("23");
      matrix0.manhattanNorm();
      // Undeclared exception!
      try { 
        matrix0.sliceTopLeft(1520, (-3877));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..1520][0..-3877].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix1 = ColumnMajorSparseMatrix.fromCSV("");
      columnMajorSparseMatrix0.equals((Object) columnMajorSparseMatrix1);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        Matrix.randomSymmetric((-600), mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      int int0 = (-2147483184);
      // Undeclared exception!
      try { 
        Matrix.unit((-622), (-2147483184));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      DenseMatrix denseMatrix0 = DenseMatrix.unit(56, 56);
      Matrix matrix0 = ooPlaceMatricesAddition0.apply(denseMatrix0, denseMatrix0);
      Matrix matrix1 = Matrix.diagonal(56, 56);
      matrix0.equals((Matrix) denseMatrix0, 0.0);
      denseMatrix0.equals(matrix1, (double) 56);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Matrix matrix0 = Matrix.fromCSV("23");
      String string0 = matrix0.toCSV();
      assertEquals("23.000\n", string0);
      
      double double0 = matrix0.min();
      assertEquals(23.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("         ");
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = denseMatrix0.toColumnMajorSparseMatrix();
      assertEquals(0, denseMatrix0.columns());
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      denseMatrix0.foldRow(36, vectorAccumulator0);
      Matrix matrix0 = columnMajorSparseMatrix0.hadamardProduct(denseMatrix0);
      assertEquals(1, matrix0.rows());
      assertEquals(0, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 0, 0);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.EIGEN;
      cCSMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(0, 0);
      basic2DMatrix0.insert((Matrix) cCSMatrix0);
      Matrix matrix0 = basic2DMatrix0.add((double) 0);
      assertTrue(matrix0.equals((Object)basic2DMatrix0));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1L));
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(27, mockRandom0);
      DenseMatrix denseMatrix1 = DenseMatrix.diagonal(27, (-1.0));
      mockRandom0.doubles((long) 27);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      denseMatrix0.foldColumns(vectorAccumulator0);
      DenseMatrix.diagonal(27, 3769.062);
      Matrix matrix0 = denseMatrix0.add((double) (-1L));
      matrix0.rows();
      denseMatrix1.columns();
      // Undeclared exception!
      try { 
        matrix0.select((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(0, 0, mockRandom0);
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(0);
      Matrix matrix0 = cRSMatrix0.power(0);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) denseMatrix0, 2406, 2406);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 2406 rows and 2406 cols at 0, 0 in a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(8, 8);
      Matrix matrix0 = cRSMatrix0.rotate();
      // Undeclared exception!
      try { 
        matrix0.sliceBottomRight(32, 8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [32..8][8..8].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.zero(32, 3328);
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 32;
      doubleArray0[1] = 1448.5884819;
      doubleArray0[2] = (double) 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(43, 0, doubleArray0);
      // Undeclared exception!
      try { 
        cCSMatrix0.insert((Matrix) denseMatrix0, 3, 3328, 0, 3328);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 3, 3328
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(1, 1);
      DenseMatrix denseMatrix0 = DenseMatrix.identity(1);
      Matrix matrix1 = matrix0.add((Matrix) denseMatrix0);
      assertEquals(0.0, matrix0.min(), 0.01);
      assertEquals(1, matrix1.columns());
      assertEquals(1, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 0, 0);
      DenseMatrix denseMatrix0 = cCSMatrix0.toDenseMatrix();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      boolean boolean0 = denseMatrix0.is(matrixPredicate0);
      assertFalse(boolean0);
      
      denseMatrix0.toRowMajorSparseMatrix();
      double double0 = denseMatrix0.trace();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix1 = ColumnMajorSparseMatrix.fromCSV("");
      boolean boolean0 = columnMajorSparseMatrix0.equals((Object) columnMajorSparseMatrix1);
      assertTrue(boolean0);
      
      columnMajorSparseMatrix0.swapRows(0, 0);
      assertTrue(columnMajorSparseMatrix0.equals((Object)columnMajorSparseMatrix1));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(10, 10, mockRandom0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = denseMatrix0.toRowMajorSparseMatrix();
      // Undeclared exception!
      rowMajorSparseMatrix0.power(10);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(0);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.insert((Matrix) cCSMatrix0);
      Matrix matrix0 = basic2DMatrix0.power(1);
      assertNotSame(matrix0, basic2DMatrix0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      DenseMatrix denseMatrix0 = DenseMatrix.unit(56, 56);
      Matrix matrix0 = Matrix.diagonal(56, 56);
      denseMatrix0.equals((Matrix) denseMatrix0, 0.0);
      denseMatrix0.equals(matrix0, (double) 56);
      denseMatrix0.setRow(56, (Vector) null);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      SparseVector sparseVector0 = SparseVector.zero(0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, sparseVector0);
      matrix0.copy();
      DenseVector.constant(0, 0);
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      // Undeclared exception!
      try { 
        SparseMatrix.fromMatrixMarket("%%MatrixMarket");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.setColumn((-57), (double) (-57));
      // Undeclared exception!
      try { 
        cRSMatrix0.foldColumn(22, (VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(5);
      // Undeclared exception!
      try { 
        cRSMatrix0.setColumn(5, 0.964);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '5' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      SparseVector sparseVector0 = SparseVector.zero(0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, sparseVector0);
      Integer integer0 = new Integer((-2050));
      linkedList0.add(integer0);
      Matrix matrix1 = matrix0.copy();
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      // Undeclared exception!
      try { 
        matrix1.set((-2050), 34, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-2050' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(4, 4);
      cRSMatrix0.toRowVector();
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      boolean boolean0 = cRSMatrix0.non(advancedMatrixPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.zero(3, 3);
      int[] intArray0 = new int[1];
      intArray0[0] = 3;
      int[] intArray1 = new int[8];
      intArray1[0] = 3;
      intArray1[1] = 3;
      intArray1[2] = 3;
      intArray1[3] = 3;
      intArray1[4] = 3;
      intArray1[5] = 3;
      intArray1[6] = 3;
      intArray1[7] = 3;
      // Undeclared exception!
      try { 
        matrix0.select(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.zero(5, 5);
      int[] intArray0 = new int[2];
      intArray0[0] = 5;
      // Undeclared exception!
      try { 
        matrix0.select(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector.fromCollection(linkedList0);
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(0, 0);
      Matrix matrix0 = basic2DMatrix0.insert((Matrix) cCSMatrix0);
      basic2DMatrix0.toRowMajorSparseMatrix();
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      matrix0.non(advancedMatrixPredicate0);
      Locale locale0 = Locale.ITALIAN;
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale0);
      cCSMatrix0.mkString(numberFormat0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.removeRow(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = 13;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(13, 13);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      basic2DMatrix0.non(matrixPredicate0);
      basic2DMatrix0.determinant();
      basic2DMatrix0.toCSV();
      int int1 = (-1184308450);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2.0, 2.0, 2.0, (double)(-1184308450), (double)(-1184308450)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      basic2DMatrix0.update(matrixFunction0);
      basic2DMatrix0.trace();
      int int2 = 3;
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      DenseVector.unit(3);
      MockRandom mockRandom0 = new MockRandom(975L);
      basic2DMatrix0.toCSV();
      basic2DMatrix0.norm();
      // Undeclared exception!
      try { 
        SparseVector.random(3, (double) 3, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(13, 13);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      basic2DMatrix0.non(matrixPredicate0);
      basic2DMatrix0.determinant();
      basic2DMatrix0.toCSV();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2.0, 2.0, 2.0, (double)(-1184308450), (double)(-1184308450)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      basic2DMatrix0.update(matrixFunction0);
      basic2DMatrix0.trace();
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      DenseVector.unit(3);
      MockRandom mockRandom0 = new MockRandom(975L);
      basic2DMatrix0.toCSV();
      basic2DMatrix0.norm();
      // Undeclared exception!
      try { 
        basic2DMatrix0.get((-1184308450), 13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = 13;
      int int1 = 340;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(13, 340);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      basic2DMatrix0.non(matrixPredicate0);
      basic2DMatrix0.toCSV();
      // Undeclared exception!
      basic2DMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(0, 0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(30);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.eachInColumn((-2020), vectorProcedure0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-2020' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(13, 340);
      basic2DMatrix0.toString();
      ColumnMajorMatrixIterator columnMajorMatrixIterator0 = basic2DMatrix0.columnMajorIterator();
      assertNotNull(columnMajorMatrixIterator0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(38, 38);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(38, 38);
      basic2DMatrix0.insert((Matrix) cCSMatrix0);
      cCSMatrix0.equals((Object) basic2DMatrix0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(725, 0);
      Matrix matrix0 = basic2DMatrix0.insert((Matrix) cCSMatrix0);
      boolean boolean0 = cCSMatrix0.equals((Object) basic2DMatrix0);
      assertFalse(boolean0);
      assertTrue(basic2DMatrix0.equals((Object)matrix0));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0, 0);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(0);
      basic2DMatrix0.insert((Matrix) cCSMatrix0);
      basic2DMatrix0.rotate();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(3, 3);
      int[] intArray0 = new int[1];
      Matrix.zero(3, 3);
      Matrix matrix1 = matrix0.select(intArray0, intArray0);
      matrix1.subtract((double) 3);
      Matrix matrix2 = matrix1.rotate();
      matrix2.norm();
      matrix1.max();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix0.foldColumn((-231), vectorAccumulator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(3, 3, mockRandom0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = denseMatrix0.toRowMajorSparseMatrix();
      denseMatrix0.columns();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)3, 0.75, 0.5, 0.75, (double)3).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      rowMajorSparseMatrix0.update(matrixFunction0);
      denseMatrix0.transpose();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.from1DArray(0, 0, doubleArray0);
      basic2DMatrix0.transpose();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(37);
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, sparseVector0);
      Matrix matrix1 = matrix0.copy();
      DenseVector.constant(0, 0);
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 37;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 37;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      DenseVector denseVector1 = DenseVector.fromArray(doubleArray0);
      SparseVector.fromMap(hashMap0, 332);
      sparseVector0.subtract(0.0);
      Matrix matrix2 = ooPlaceOuterProduct0.apply(denseVector1, sparseVector0);
      matrix1.hashCode();
      matrix1.iteratorOfColumn(0);
      matrix2.sliceBottomRight(4, 3);
      MockRandom mockRandom0 = new MockRandom(3);
      // Undeclared exception!
      try { 
        Basic2DMatrix.random(0, (-2028178999), mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(7);
      Matrix matrix0 = cCSMatrix0.sliceTopLeft(1, 1);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      matrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(340, 340);
      CRSMatrix cRSMatrix0 = new CRSMatrix(340, 340);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        basic2DMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(0, 0);
      Matrix matrix0 = basic2DMatrix0.insert((Matrix) cCSMatrix0);
      DenseVector denseVector0 = DenseVector.constant(0, (-1.0));
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      SparseMatrix.diagonal(0, 1.0);
      CCSMatrix.from1DArray(0, 0, (double[]) null);
      DenseMatrix denseMatrix0 = DenseMatrix.identity(0);
      matrix0.toString();
      // Undeclared exception!
      try { 
        denseMatrix0.insertColumn(0, denseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(0, 0);
      basic2DMatrix0.insert((Matrix) cCSMatrix0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = basic2DMatrix0.toRowMajorSparseMatrix();
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      MockRandom mockRandom0 = new MockRandom();
      DenseVector denseVector0 = DenseVector.random(2569, mockRandom0);
      Vector vector0 = ooPlaceVectorByMatrixMultiplication0.apply(denseVector0, rowMajorSparseMatrix0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      basic2DMatrix0.updateRow(6, vectorFunction0);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Vector vector1 = vector0.transform(vectorFunction1);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insertColumn(2569, vector1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1, 1);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.updateRow(1, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0);
      DenseVector denseVector0 = DenseVector.constant(0, (-1.0));
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      SparseMatrix.diagonal(0, 1.0);
      CCSMatrix.from1DArray(0, 0, (double[]) null);
      DenseMatrix denseMatrix0 = DenseMatrix.identity(99);
      // Undeclared exception!
      try { 
        denseMatrix0.insertColumn(1, denseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 0. Should be: 99.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.constant(1075, 1075);
      DenseMatrix denseMatrix0 = DenseMatrix.identity(8);
      // Undeclared exception!
      try { 
        denseMatrix0.insertColumn(0, denseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 1075. Should be: 8.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.constant(1075, (-44));
      DenseMatrix denseMatrix0 = DenseMatrix.identity(1075);
      // Undeclared exception!
      try { 
        denseMatrix0.insertColumn((-44), denseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..1074
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.setSeed(0);
      DenseMatrix denseMatrix0 = DenseMatrix.random(0, 0, mockRandom0);
      mockRandom0.doubles();
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      denseMatrix0.euclideanNorm();
      denseMatrix0.setRow(0, 0.5);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(4);
      // Undeclared exception!
      try { 
        cRSMatrix0.setRow(4, (-3712.85547962));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CRSMatrix.identity(16);
      CCSMatrix cCSMatrix0 = new CCSMatrix(16, 5, 13);
      cCSMatrix0.rank();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.rank();
      basic2DMatrix0.iterator();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(340, 340);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      basic2DMatrix0.non(matrixPredicate0);
      Basic2DMatrix basic2DMatrix1 = new Basic2DMatrix(340, 340);
      basic2DMatrix1.rank();
      basic2DMatrix0.insert((Matrix) basic2DMatrix1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(1, 1);
      matrix0.shuffle();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0, 0);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(7, 0);
      Matrix matrix0 = basic2DMatrix0.shuffle();
      basic2DMatrix0.infinityNorm();
      matrix0.equals((Object) basic2DMatrix0);
      cCSMatrix0.add((-1.0));
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CCSMatrix.zero(0, 0, 0);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(0, 0);
      basic2DMatrix0.toMatrixMarket();
      basic2DMatrix0.rank();
      Basic2DMatrix basic2DMatrix1 = new Basic2DMatrix();
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        DenseMatrix.random(1911, (-301), mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.constant(1075, 0);
      DenseMatrix denseMatrix0 = DenseMatrix.identity(1075);
      // Undeclared exception!
      denseMatrix0.insertColumn(0, denseVector0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 0, 0);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(0, 0);
      Matrix matrix0 = basic2DMatrix0.insert((Matrix) cCSMatrix0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      matrix0.transformColumn(0, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = 7;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(7);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.transformColumn(7, vectorFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '7' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 0, 0);
      cCSMatrix0.minInRow(0);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(229, 0);
      basic2DMatrix0.insert((Matrix) cCSMatrix0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.apply((MatrixOperation<Matrix>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.DenseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int int0 = 340;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      basic2DMatrix0.non(matrixPredicate0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.removeFirstRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(85, 85);
      basic2DMatrix0.rank();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(0, 0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(0, (-3259.635868));
      // Undeclared exception!
      try { 
        basic2DMatrix0.insert((Matrix) rowMajorSparseMatrix0, (-769), 0, (-5770), 7, 0, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: -5770, 7
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 0, 0);
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0);
      cRSMatrix0.determinant();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(558, 0);
      basic2DMatrix0.insert((Matrix) cCSMatrix0);
      // Undeclared exception!
      try { 
        cRSMatrix0.insert((Matrix) cCSMatrix0, 558, 705, 0, 558);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 558, 705
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 0, 0);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(0, 0);
      Matrix matrix0 = basic2DMatrix0.insert((Matrix) cCSMatrix0);
      basic2DMatrix0.multiply(matrix0);
      // Undeclared exception!
      try { 
        cCSMatrix0.insert((Matrix) basic2DMatrix0, (-1), (-2075900858));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -1x-2075900858
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(14, 14);
      // Undeclared exception!
      try { 
        cCSMatrix0.swapColumns(14, (-1215));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 15
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int int0 = 0;
      DenseVector denseVector0 = DenseVector.constant(265, 0);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(265, 265);
      int int1 = (-3623);
      // Undeclared exception!
      try { 
        basic2DMatrix0.insertRow((-3623), denseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..264
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CCSMatrix.zero(0, 0, 0);
      MockRandom mockRandom0 = new MockRandom();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(0, (double) 4, (Random) mockRandom0);
      rowMajorSparseMatrix0.swapColumns(37, 37);
      // Undeclared exception!
      try { 
        SparseMatrix.fromMatrixMarket("~x|~:B._ PHJ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(0, 0);
      basic2DMatrix0.insert((Matrix) cCSMatrix0);
      DenseVector denseVector0 = DenseVector.constant(0, 0);
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Basic2DMatrix basic2DMatrix1 = Basic2DMatrix.identity(0);
      // Undeclared exception!
      try { 
        basic2DMatrix1.insertRow(0, denseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.constant(134, 30, 414.7);
      Vector vector0 = basic2DMatrix0.toColumnVector();
      // Undeclared exception!
      try { 
        basic2DMatrix0.insertRow(0, vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 134. Should be: 30.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      CCSMatrix.zero(2, 2, 2);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.constant(1647, 4726, (-951.585676486));
      Vector vector0 = basic2DMatrix0.toColumnVector();
      // Undeclared exception!
      try { 
        basic2DMatrix0.insertRow(2, vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 1647. Should be: 4726.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.constant(1647, 1647, 2);
      Vector vector0 = basic2DMatrix0.toColumnVector();
      // Undeclared exception!
      basic2DMatrix0.insertRow(2, vector0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.constant(28, 28, 22);
      Vector vector0 = basic2DMatrix0.toColumnVector();
      Matrix matrix0 = basic2DMatrix0.insertRow(22, vector0);
      matrix0.copyOfShape(22, 22);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.constant(14, 14);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(14);
      Vector vector0 = denseVector0.subtract(2928.659475026122);
      Matrix matrix0 = basic2DMatrix0.insertColumn(7, vector0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.insert(matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 14 rows and 15 cols at 0, 0 in a 14x14 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      CRSMatrix.identity(16);
      // Undeclared exception!
      try { 
        SparseMatrix.fromMatrixMarket("%%MatrixMarket matrix coordinate real general ");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      CRSMatrix.identity(16);
      // Undeclared exception!
      try { 
        SparseMatrix.fromMatrixMarket("%%MatrixMarket matrix coordinate real general ");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      // Undeclared exception!
      try { 
        SparseMatrix.fromMatrixMarket("%%MatrixMarket matrix cNohdinate real general ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown format: cNohdinate.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int int0 = 1319;
      int int1 = 5;
      Matrix matrix0 = Matrix.zero(1319, 5);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(1319, 1319, 5);
      int int2 = 11;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Matrix matrix1 = matrix0.transformRow(11, vectorFunction0);
      Matrix matrix2 = matrix0.insert((Matrix) columnMajorSparseMatrix0);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      String string0 = "_zzHZX\\i4fbee+f";
      Matrix.fromCSV(string0);
      int int3 = 6;
      int int4 = (-252);
      matrix2.sliceBottomRight(int3, int4);
      Matrix matrix3 = matrix2.transformRow(int0, vectorFunction1);
      matrix1.multiplyByItsTranspose();
      matrix0.setAll(int0);
      MatrixFactory<SparseMatrix> matrixFactory0 = (MatrixFactory<SparseMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      columnMajorSparseMatrix0.to(matrixFactory0);
      Matrix matrix4 = matrix3.copyOfRows(int1);
      int int5 = 6;
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      SparseVector sparseVector0 = null;
      int int6 = 1623;
      matrix3.setRow(int6, (double) int6);
      Vector vector0 = ooPlaceVectorsAddition0.apply(sparseVector0, sparseVector0);
      matrix2.setColumn(int5, vector0);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.SVD;
      matrix4.withDecompositor(linearAlgebra_DecompositorFactory0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix5 = matrix1.transform(matrixFunction0);
      String string1 = "      ";
      Matrix.fromMatrixMarket(string1);
      matrix0.trace();
      int int7 = 2236;
      int int8 = 1482;
      matrix2.insert(matrix5, int2, int7, int8, int1);
      int int9 = (-2577);
      VectorProcedure vectorProcedure0 = null;
      matrix4.eachInRow(int9, vectorProcedure0);
  }
}
