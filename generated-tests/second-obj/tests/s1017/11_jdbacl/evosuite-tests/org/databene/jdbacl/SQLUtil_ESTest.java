/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 04:18:29 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayReader;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.sql.Connection;
import java.util.List;
import org.apache.derby.catalog.Dependable;
import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
import org.apache.derby.iapi.sql.compile.CompilerContext;
import org.apache.derby.iapi.sql.compile.Optimizer;
import org.apache.derby.iapi.sql.dictionary.PermDescriptor;
import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
import org.apache.derby.iapi.store.raw.RawStoreFactory;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.sql.compile.JoinNode;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBTrigger;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.gds.impl.jni.LocalGDSImpl;
import org.firebirdsql.jdbc.FBBlob;
import org.firebirdsql.jdbc.FBConnectionProperties;
import org.h2.jdbcx.JdbcConnectionPool;
import org.h2.table.Table;
import org.h2.tools.Csv;
import org.h2.tools.SimpleResultSet;
import org.hsqldb.lib.FileUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("//", (DBSchema) null);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "//";
      stringArray0[1] = "//";
      stringArray0[2] = "//";
      stringArray0[3] = "Z(QIwg6vm7aWg";
      stringArray0[4] = "//";
      stringArray0[5] = "//";
      stringArray0[6] = "//";
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM // WHERE // = '//' AND // = '//' AND // = '//' AND Z(QIwg6vm7aWg = 'Z(QIwg6vm7aWg' AND // = '//' AND // = '//' AND // = '//'", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SQLUtil.isDML("org.h2.table.TableFilter");
      boolean boolean0 = SQLUtil.isDML("|MgJ(m>");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "|MgJ(m>";
      stringArray0[1] = "org.h2.table.TableFilter";
      stringArray0[2] = "|MgJ(m>";
      stringArray0[3] = "|MgJ(m>";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("|MgJ(m> = '|MgJ(m>' AND org.h2.table.TableFilter = 'org.h2.table.TableFilter' AND |MgJ(m> = '|MgJ(m>' AND |MgJ(m> = '|MgJ(m>'", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("op_info_blob ");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("op_info_blob ", defaultDBTable0, (DBDataType) null, integer0);
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      JdbcConnectionPool jdbcConnectionPool0 = JdbcConnectionPool.create("op_info_blob ", "", "op_info_blob ");
      jdbcConnectionPool0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      boolean boolean0 = FileUtil.fsIsIgnoreCase;
      String[] stringArray0 = new String[8];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(, , , , , , , )", string0);
      
      String string1 = SQLUtil.normalize("]GE]\"8[6", false);
      assertEquals("] GE ] \"8[6\"", string1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SQLUtil.removeComments("J");
      SQLUtil.renderColumnNames((String[]) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("g");
      defaultDBTable0.getUniqueConstraint((String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SQLUtil.normalize("AV8:| =rrz/;", true);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      System.setCurrentTimeMillis(1275L);
      SQLUtil.mutatesDataOrStructure("executen:$fqu");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("delete");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "6SBD;<qf@c";
      String string1 = " C8?501.bl";
      StringBuilder stringBuilder0 = new StringBuilder(" C8?501.bl");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("6SBD;<qf@c", stringBuilder0);
      stringBuilder1.reverse();
      // Undeclared exception!
      try { 
        stringBuilder0.append((CharSequence) " C8?501.bl", 10000, 92);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start 10000, end 92, s.length() 11
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "+m:c_*7Y_U{uZ~L";
      stringArray0[1] = "+m:c_*7Y_U{uZ~L";
      stringArray0[2] = "+m:c_*7Y_U{uZ~L";
      stringArray0[3] = "+m:c_*7Y_U{uZ~L";
      SQLUtil.innerJoin("+m:c_*7Y_U{uZ~L", stringArray0, "+m:c_*7Y_U{uZ~L", "+m:c_*7Y_U{uZ~L", stringArray0);
      System.setCurrentTimeMillis((-551L));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      boolean boolean0 = FileUtil.fsNormalizesPosixSeparator;
      SQLUtil.removeComments("J");
      boolean boolean1 = SQLUtil.isDDL("J");
      assertFalse(boolean1);
      
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("J", true, "J", "J");
      dBCheckConstraint0.setName("J");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT J ", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("O4FeI0;#=(g`BA/h*w");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "O4FeI0;#=(g`BA/h*w", false, (String[]) null);
      SQLUtil.removeComments("O4FeI0;#=(g`BA/h*w");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ()", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", false, (String[]) null);
      String string0 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT  ", string0);
      
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      dBPrimaryKeyConstraint0.setOwner(defaultDBTable0);
      defaultDBTable1.getUniqueConstraint((String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT  PRIMARY KEY ()", string1);
      
      String string2 = SQLUtil.substituteMarkers("Y", "Y", "CONSTRAINT  PRIMARY KEY ()");
      assertEquals("'CONSTRAINT  PRIMARY KEY ()'", string2);
      
      boolean boolean0 = SQLUtil.isProcedureCall("XYsP<^.jD \"{4[9j");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "create materialized view");
      SQLUtil.parseColumnTypeAndSize("Illegal column type format: ");
      DBSchema dBSchema0 = new DBSchema("Illegal column type format: ");
      DBTrigger dBTrigger0 = new DBTrigger("alter materialized view}'/\"e]{czm|tmup", dBSchema0);
      SQLUtil.typeAndName(dBTrigger0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter materialized view}'/\"e]{czm|tmup");
      defaultDBTable0.setName("trigger alter materialized view}'/\"e]{czm|tmup");
      // Undeclared exception!
      try { 
        defaultDBTable0.getCatalog();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "alter materialized viewlog10";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = stringBuilder0.append((-2287.584F));
      int int0 = 95;
      // Undeclared exception!
      try { 
        stringBuilder1.insert(95, (CharSequence) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 95
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "iw='NJ]HTR";
      SQLUtil.leftJoin("iw='NJ]HTR", stringArray0, "iw='NJ]HTR", "iw='NJ]HTR", stringArray0);
      SQLUtil.parseColumnTypeAndSize("left join iw='NJ]HTR as iw='NJ]HTR on iw='NJ]HTR.iw='NJ]HTR = iw='NJ]HTR.iw='NJ]HTR");
      Random.setNextRandom((-1573));
      String string0 = Table.EXTERNAL_TABLE_ENGINE;
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "|-@1*A{~";
      stringArray0[1] = "|-@1*A{~";
      stringArray0[2] = "|-@1*A{~";
      stringArray0[3] = "|-@1*A{~";
      String string0 = SQLUtil.renderColumnListWithTableName("|-@1*A{~", stringArray0);
      assertEquals("|-@1*A{~.|-@1*A{~, |-@1*A{~.|-@1*A{~, |-@1*A{~.|-@1*A{~, |-@1*A{~.|-@1*A{~", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("");
      boolean boolean0 = FileUtil.fsNormalizesPosixSeparator;
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("");
      assertNull(boolean1);
      
      SQLUtil.parseColumnTypeAndSize("Illegal column type format: ");
      DBSchema dBSchema0 = new DBSchema("Illegal column type format: ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("UB?+bk@", dBSchema0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "UB?+bk@";
      stringArray0[1] = "Illegal column type format: ";
      stringArray0[2] = "Illegal column type format: ";
      VersionNumber versionNumber0 = VersionNumber.valueOf("o8/1}vk:Lt");
      versionNumber0.toString();
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("(W_\"}\"6iCO>FCt4&|[", (String) null, versionNumber0);
      versionNumber0.toString();
      SQLUtil.ownerDotComponent(dBSchema0);
      String string0 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("Illegal column type format: .UB?+bk@", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[6];
      boolean boolean0 = FBBlob.SEGMENTED;
      DBSchema dBSchema0 = new DBSchema("Arunc[");
      SQLUtil.normalize("^pa($X-O4VjV", true);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[1];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("O4FeI0;#=(g`BA/h*w");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", false, (String[]) null);
      String string0 = FBConnectionProperties.BUFFERS_NUMBER_PROPERTY;
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = new DBPrimaryKeyConstraint(defaultDBTable0, "O4FeI0;#=(g`BA/h*w", true, stringArray0);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("buffersNumber", true, "buffersNumber", "buffersNumber");
      assertEquals("buffersNumber", dBCheckConstraint0.getTableName());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("]`n:");
      String[] stringArray0 = new String[18];
      stringArray0[0] = "]`n:";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("]`n:", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("I){-0P", stringBuilder0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder2 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder1, nameSpec0);
      // Undeclared exception!
      try { 
        stringBuilder2.insert(3777, "`1bjD6[-vh8Uc|w|:t#");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 3777
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("42Z54.U", 202);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      String string0 = " t/2<*(<V@\\FS^`K-";
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize(" t/2<*(<V@FS^`K-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format:  t/2<*(<V@FS^`K-
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      String string0 = SchemaDescriptor.SYSSTAT_SCHEMA_UUID;
      DBSchema dBSchema0 = new DBSchema("[m4#-2vlm");
      SQLUtil.normalize("AV[iy mrSz/!", false);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("inner", 127);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      boolean boolean0 = FileUtil.fsNormalizesPosixSeparator;
      String[] stringArray0 = new String[8];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(, , , , , , , )", string0);
      
      String string1 = SQLUtil.normalize("GE][6", true);
      assertEquals("GE ] [ 6", string1);
      
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("create tableselectvrifyqey.djt", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string2 = SQLUtil.constraintName(dBForeignKeyConstraint0);
      assertEquals("CONSTRAINT \"create tableselectvrifyqey.djt\" ", string2);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SQLUtil.normalize("T'=<>$GMO~q{|7", false);
      DBCatalog dBCatalog0 = new DBCatalog((String) null);
      DBSchema dBSchema0 = dBCatalog0.getSchema("renameselectverifykey.dat");
      assertNull(dBSchema0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      boolean boolean0 = FileUtil.fsIsIgnoreCase;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.parseColumnTypeAndSize("g");
      DBSchema dBSchema0 = new DBSchema("g");
      String string0 = SQLUtil.normalize("create tableverifykey.dat", false);
      assertEquals("create tableverifykey.dat", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(231, "seg");
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter materialized view$", (DBTable) null, dBDataType0, integer0, integer1);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("SEG(1,1)", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      boolean boolean0 = FBBlob.SEGMENTED;
      DBSchema dBSchema0 = new DBSchema("Arunc[");
      String string0 = SQLUtil.normalize("^pa($X-O4VjV", true);
      assertEquals("^ pa ($ X - O4VjV", string0);
      
      Integer integer0 = new Integer(6);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("^ pa ($ X - O4VjV");
      DBDataType dBDataType0 = DBDataType.getInstance(1487, "selectv");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("^pa($X-O4VjV", defaultDBTable0, dBDataType0, integer0);
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("^pa($X-O4VjV SELECTV(6) NULL", string1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SQLUtil.removeComments("J");
      String string0 = SQLUtil.renderValue((Object) null);
      assertEquals("null", string0);
      
      DBDataType.getInstance(34, "null");
      Integer integer0 = RawTransaction.COMMIT;
      SQLUtil.parseColumnTypeAndSize("J");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("truncatej");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", false, (String[]) null);
      String string0 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT  ", string0);
      
      String string1 = Dependable.ALIAS;
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      dBPrimaryKeyConstraint0.setOwner(defaultDBTable0);
      defaultDBTable1.getUniqueConstraint((String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string2 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ()", string2);
      
      String string3 = SQLUtil.substituteMarkers("Y", "Y", "PRIMARY KEY ()");
      assertEquals("'PRIMARY KEY ()'", string3);
      
      boolean boolean0 = SQLUtil.isProcedureCall("XYsP<^.jD \"{4[9j");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "&\"W]";
      stringArray0[1] = "FOREIGN KEY ";
      stringArray0[2] = "&\"W]";
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = "&\"W]";
      stringArray0[6] = "&\"W]";
      stringArray0[7] = null;
      String string0 = SQLUtil.join((String) null, "&\"W]", stringArray0, "XJ023.S", "XJ023.S", stringArray0);
      assertEquals("XJ023.S as XJ023.S on &\"W].&\"W] = XJ023.S.&\"W] and &\"W].FOREIGN KEY  = XJ023.S.FOREIGN KEY  and &\"W].&\"W] = XJ023.S.&\"W] and &\"W].null = XJ023.S.null and &\"W].null = XJ023.S.null and &\"W].&\"W] = XJ023.S.&\"W] and &\"W].&\"W] = XJ023.S.&\"W] and &\"W].null = XJ023.S.null", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[7];
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("drop materialized view");
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(charArrayReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
      
      charArrayReader0.ready();
      streamTokenizer0.slashSlashComments(true);
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      Boolean.valueOf((String) null);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(charArrayReader1);
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer1.ordinaryChars((byte)46, (-4));
      charArrayReader1.markSupported();
      String string1 = SQLUtil.normalize("drop materialized view", true);
      assertEquals("drop materialized view", string1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String[] stringArray0 = new String[6];
      boolean boolean0 = FBBlob.SEGMENTED;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DBSchema dBSchema0 = new DBSchema("Arunc[");
      DBDataType.getInstance((-244380591), "Arunc[");
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.normalize("^pa($X-O4VjV", true);
      SQLUtil.mutatesStructure("renamen:$fu");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("renamen:$fu");
      // Undeclared exception!
      try { 
        DBDataType.getInstance("VT[1e[w");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      boolean boolean0 = FileUtil.fsNormalizesPosixSeparator;
      DBSchema dBSchema0 = new DBSchema("Arunc[");
      String string0 = SQLUtil.normalize("-tcp", false);
      assertEquals("- tcp", string0);
      
      PipedReader pipedReader0 = new PipedReader(1104);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string1 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      boolean boolean0 = FileUtil.fsNormalizesPosixSeparator;
      String string0 = CompilerContext.CONTEXT_ID;
      // Undeclared exception!
      SQLUtil.mutatesStructure("/*");
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("}");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("4!r6}oq8qC$RT'MH<0(", false, "4!r6}oq8qC$RT'MH<0(", "XID");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "UR1;`9kPrkiyb+)&!");
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0);
      SQLUtil.constraintName(dBCheckConstraint0);
      Integer integer0 = new Integer(2147483645);
      SQLUtil.isQuery("4!r6}oq8qC$RT'MH<0(");
      DBDataType.getInstance(2147483645, "CjiS+6Jdn");
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DBColumn[] dBColumnArray0 = new DBColumn[5];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      String string0 = "bn'H^NWx~h+r>y[8AZ7";
      DBCatalog dBCatalog0 = new DBCatalog("z");
      TableContainer tableContainer0 = new TableContainer("z", dBCatalog0);
      tableContainer0.getTable("bn'H^NWx~h+r>y[8AZ7");
      int int0 = 118;
      DBDataType dBDataType0 = DBDataType.getInstance(118, "z");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("bn'H^NWx~h+r>y[8AZ7", (DBTable) null, dBDataType0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("z", (DBTable) null, 118, "XRE20.D");
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      SQLUtil.renderColumnNames(dBColumnArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) "bn'H^NWx~h+r>y[8AZ7, z");
      int int1 = (-2177);
      // Undeclared exception!
      try { 
        stringBuilder1.insert((-371735726), (-2177));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -371735726
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Csv csv0 = Csv.getInstance();
      SimpleResultSet simpleResultSet0 = new SimpleResultSet(csv0);
      Character character0 = Character.valueOf('');
      String string0 = SQLUtil.substituteMarkers("trunncate", "trunncate", character0);
      assertEquals("''", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      boolean boolean0 = FileUtil.fsIsIgnoreCase;
      String[] stringArray0 = new String[8];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("UR1;`9kPrkib+)&!", false, "g", "XID");
      dBCheckConstraint0.setDoc("UR1;`9kPrkib+)&!");
      dBCheckConstraint0.setDoc("g");
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(, , , , , , , )", string0);
      
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("8a+bp");
      defaultDBTable0.getUniqueConstraint(stringArray0);
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "XID");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK XID", string1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)123;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "OfYoNWA?7S4g8<8?5H";
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.renderColumnListWithTableName("(OfYoNWA?7S4g8<8?5H)", stringArray0);
      TableContainer tableContainer0 = new TableContainer((String) null);
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, (DBSchema) null);
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.isDML("(OfYoNWA?7S4g8<8?5H).OfYoNWA?7S4g8<8?5H");
      DBDataType.getInstance((int) (byte)111, "(OfYoNWA?7S4g8<8?5H).OfYoNWA?7S4g8<8?5H");
      Integer.remainderUnsigned((byte)78, 189);
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("derby.op", defaultDBTable0, 78, "(OfYoNWA?7S4g8<8?5H).OfYoNWA?7S4g8<8?5H");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"OfYoNWA?7S4g8<8?5H\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String[] stringArray0 = new String[6];
      boolean boolean0 = FBBlob.SEGMENTED;
      DBSchema dBSchema0 = new DBSchema("Arunc[");
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(, , , , , )", string0);
      
      String string1 = SQLUtil.normalize("(, , , , , )", false);
      assertEquals("(,,,,,)", string1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      boolean boolean0 = FileUtil.fsNormalizesPosixSeparator;
      String string0 = PermDescriptor.SEQUENCE_TYPE;
      boolean boolean1 = FBBlob.SEGMENTED;
      SQLUtil.normalize("getStatementExecutionPlanText", true);
      boolean boolean2 = FBBlob.SEGMENTED;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DBDataType dBDataType0 = DBDataType.getInstance((int) (byte) (-65), "create materialized viewsequence");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("getStatementExecutionPlanText", defaultDBTable0, dBDataType0);
      defaultDBColumn0.getNotNullConstraint();
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dynamicByteArrayOutputStream0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      defaultDBTable0.getPrimaryKeyConstraint();
      SQLUtil.typeAndName((DBObject) null);
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SQLUtil.normalize("P|GSf&_Ohv", true);
      boolean boolean0 = FBBlob.SEGMENTED;
      String string0 = Optimizer.NO_TIMEOUT;
      SQLUtil.mutatesDataOrStructure("P|GSf&_Ohv");
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("alter sessionverifykey.dat");
      assertFalse(boolean1.equals((Object)boolean0));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.normalize("AV8EC| =rrQ/;", true);
      boolean boolean0 = FBBlob.SEGMENTED;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DBDataType dBDataType0 = DBDataType.getInstance(338, "+kpel7AJvtH %?");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Ow/*7;kP<2t?", defaultDBTable0, dBDataType0);
      defaultDBColumn0.getNotNullConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dynamicByteArrayOutputStream0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = defaultDBTable0.getPrimaryKeyConstraint();
      assertNull(dBPrimaryKeyConstraint0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("42Z54.U", 202);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      SQLUtil.parseColumnTypeAndSize("");
      SQLUtil.normalize("J'sf", true);
      boolean boolean0 = FBBlob.SEGMENTED;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DBDataType dBDataType0 = DBDataType.getInstance(59, "J 'sf'");
      CompositeDBObject<DefaultDBColumn> compositeDBObject0 = (CompositeDBObject<DefaultDBColumn>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("Ow/*7;kP<2t?", compositeDBObject0);
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("+kpel7AJvtH %?", (DBSchema) null);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0);
      defaultDBColumn0.getNotNullConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dynamicByteArrayOutputStream0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = defaultDBTable0.getPrimaryKeyConstraint();
      assertNull(dBPrimaryKeyConstraint0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("n:$fqu", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      String[] stringArray0 = new String[19];
      SQLUtil.parseColumnTypeAndSize("\"");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("\"");
      defaultDBTable0.getIndexes();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint(" pos: ", true, "\"", "XID");
      dBCheckConstraint0.setDoc(" pos: ");
      dBCheckConstraint0.toString();
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "truncate");
      DBDataType.getInstance((-882), "\"");
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.normalize("truncate", true);
      SQLUtil.mutatesStructure("N:$FQu");
      byte[] byteArray0 = new byte[0];
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      defaultDBTable0.getUniqueConstraint(stringArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SQLUtil.mutatesDataOrStructure("2r7&.#");
      SQLUtil.isQuery("=]O");
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("truncate", defaultDBTable0, 52, "(, , , , , , , , , , , , , , , , , , )");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", true, (String[]) null);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      String string0 = Dependable.ALIAS;
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("verifykey.da", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      dBPrimaryKeyConstraint0.setOwner(defaultDBTable0);
      DefaultDBTable defaultDBTable2 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("CONSTRAINT  ", false, defaultDBTable2, (String[]) null, defaultDBTable1, (String[]) null);
      dBForeignKeyConstraint0.setTable(defaultDBTable2);
      dBForeignKeyConstraint0.getOwner();
      SQLUtil.typeAndName(defaultDBTable2);
      DefaultDBTable defaultDBTable3 = new DefaultDBTable((String) null);
      defaultDBTable1.setName("");
      // Undeclared exception!
      try { 
        defaultDBTable1.getCatalog();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      boolean boolean0 = FileUtil.fsIsIgnoreCase;
      String[] stringArray0 = new String[8];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.parseColumnTypeAndSize("g");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("UR1;`9kPrkib+)&!", false, "g", "XID");
      dBCheckConstraint0.setDoc("g");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, (StringBuilder) null, nameSpec0);
      String[] stringArray1 = null;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, (String[]) null, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.setTable(defaultDBTable0);
      dBForeignKeyConstraint0.getOwner();
      SQLUtil.typeAndName(dBForeignKeyConstraint0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("g");
      defaultDBTable0.setName("XID");
      // Undeclared exception!
      try { 
        defaultDBTable1.getCatalog();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress(" = ", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("selectvrifyqey.dJt");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      defaultDBTable0.getColumns();
      JoinNode.joinTypeToString(53);
      String string0 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = SchemaDescriptor.SYSSTAT_SCHEMA_UUID;
      String string1 = FBConnectionProperties.DEFAULT_ISOLATION_PROPERTY;
      StringBuilder stringBuilder0 = new StringBuilder("defaultIsolation");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType.getInstance(1487, "selectv");
      SQLUtil.removeComments("n5N55");
      SQLUtil.addRequiredCondition("*lPlzTcaYz-", stringBuilder0);
      SQLUtil.isProcedureCall("rename");
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = SchemaDescriptor.SYSSTAT_SCHEMA_UUID;
      String[] stringArray0 = new String[6];
      DBSchema dBSchema0 = new DBSchema("Z");
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "N6,!", true, stringArray0);
      Integer integer0 = new Integer((-1805769326));
      Integer integer1 = RawTransaction.ABORT;
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      SQLUtil.renderColumnNames(stringArray0);
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("AL^:~\"0ugDG7d9<s*N", true, "p=", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error parsing SQL
         //
         verifyException("org.databene.jdbacl.sql.SQLParserUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = SchemaDescriptor.SYSSTAT_SCHEMA_UUID;
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "AV8:| =rrz/;");
      DBSchema dBSchema0 = new DBSchema("Z");
      SQLUtil.normalize("*lPlzTcaYz-", false);
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      String string1 = SchemaDescriptor.SYSPROC_SCHEMA_UUID;
      SQLUtil.addRequiredCondition("AV8:| =rrz/;", stringBuilder0);
      SQLUtil.isQuery("!W>");
      // Undeclared exception!
      try { 
        defaultDBTable0.getUniqueConstraint("i2,Hw");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      char[] charArray0 = new char[7];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(charArrayReader0);
      streamTokenizer0.nval = 2985.649492114005;
      SQLUtil.renderNumber(streamTokenizer0);
      boolean boolean0 = FileUtil.fsNormalizesPosixSeparator;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "2985.649492114005";
      Integer.getInteger("2985.649492114005", 252);
      String string0 = null;
      try {  
      string0 = LocalGDSImpl.LOCAL_TYPE_NAME;
      } catch(NoClassDefFoundError e) {}
  }
}
