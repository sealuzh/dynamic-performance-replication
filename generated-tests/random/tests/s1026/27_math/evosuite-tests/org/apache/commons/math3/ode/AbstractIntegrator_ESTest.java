/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 14:08:42 GMT 2019
 */

package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.solvers.RiddersSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondaryEquations;
import org.apache.commons.math3.ode.events.EventFilter;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.events.FilterType;
import org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator;
import org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator;
import org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.EulerIntegrator;
import org.apache.commons.math3.ode.nonstiff.GillIntegrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.nonstiff.LutherIntegrator;
import org.apache.commons.math3.ode.nonstiff.MidpointIntegrator;
import org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.apache.commons.math3.ode.sampling.StepNormalizerBounds;
import org.apache.commons.math3.ode.sampling.StepNormalizerMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractIntegrator_ESTest extends AbstractIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-124);
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte)48;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator((-434.6935));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      firstOrderConverter0.computeDerivatives((-434.6935), doubleArray0, doubleArray0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      SecondaryEquations secondaryEquations0 = mock(SecondaryEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondaryEquations0).getDimension();
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) (byte) (-124);
      doubleArray1[1] = (double) (byte)48;
      doubleArray1[2] = (-434.6935);
      doubleArray1[3] = (double) (byte) (-124);
      doubleArray1[4] = (double) (byte) (-124);
      doubleArray1[5] = 1000.0;
      doubleArray1[6] = (double) (byte)48;
      firstOrderConverter0.computeDerivatives(1000.0, doubleArray1, doubleArray1);
      expandableStatefulODE0.addSecondaryEquations(secondaryEquations0);
      // Undeclared exception!
      eulerIntegrator0.integrate(expandableStatefulODE0, (-434.6935));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double double0 = (-1.686490951669855E-7);
      double double1 = 1643.2527277438;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1.686490951669855E-7), (-1.686490951669855E-7), (-1.686490951669855E-7), 1643.2527277438);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      firstOrderConverter0.computeDerivatives(7.174547784678893E-8, doubleArray0, doubleArray0);
      firstOrderConverter0.computeDerivatives((-3833.961331938), doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[0];
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1.686490951669855E-7), doubleArray1, (-1.686490951669855E-7), doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(1936607.425231087);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      double double0 = eulerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1936607.425231087, doubleArray0, 1994.6659290910468, doubleArray0);
      assertEquals(Integer.MAX_VALUE, eulerIntegrator0.getMaxEvaluations());
      assertEquals(1994.6659290910468, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 556.0;
      double[] doubleArray1 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(556.0, 556.0, doubleArray0, doubleArray1);
      double double0 = 4.547473508864641E-10;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(657.9154024546336, 4.547473508864641E-10, doubleArray0, doubleArray1);
      boolean boolean0 = false;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 4.547473508864641E-10, doubleArray1, 2007.127, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double double0 = (-1034.72579976782);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-2156.45777594), (-2156.45777594), (-1034.72579976782), (-2156.45777594));
      int int0 = 555;
      double double1 = (-2994.8105);
      graggBulirschStoerIntegrator0.setOrderControl(555, 555, (-2994.8105));
      graggBulirschStoerIntegrator0.getMaxEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) 555, doubleArray0, (-1.0), doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      FilterType filterType0 = FilterType.TRIGGER_ONLY_INCREASING_EVENTS;
      EventFilter eventFilter0 = new EventFilter(eventHandler0, filterType0);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) Integer.MAX_VALUE;
      doubleArray1[1] = (double) 555;
      doubleArray1[2] = (double) Integer.MAX_VALUE;
      doubleArray1[3] = (-919.59652);
      doubleArray1[4] = (-1034.72579976782);
      // Undeclared exception!
      try { 
        eventFilter0.g((-919.59652), doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.events.FilterType$2", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-400.7), (-400.7), (-400.7), (-400.7));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      highamHall54Integrator0.setStepSizeControl(0.0, 0.0, (-3398.1384667761395), (-1310.32835205));
      double[] doubleArray0 = new double[0];
      firstOrderConverter0.computeDerivatives(0.0, doubleArray0, doubleArray0);
      // Undeclared exception!
      highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-400.7), doubleArray0, 1727.82985437, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LutherIntegrator lutherIntegrator0 = new LutherIntegrator((-1115.874473161932));
      lutherIntegrator0.getEventHandlers();
      lutherIntegrator0.getCurrentStepStart();
      lutherIntegrator0.getName();
      lutherIntegrator0.setMaxEvaluations(1092);
      assertEquals(1092, lutherIntegrator0.getMaxEvaluations());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-3179.83);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-3179.83), (-3179.83), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.clearEventHandlers();
      graggBulirschStoerIntegrator0.setStepSizeControl(2128.52985437, 2.2737367544323206E-10, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setStepSizeControl((-2190.0), (-517.5411627689587), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setInterpolationControl(false, 1455);
      graggBulirschStoerIntegrator0.setOrderControl(1455, (-3179.83), 2128.52985437);
      graggBulirschStoerIntegrator0.getMaxEvaluations();
      int int0 = graggBulirschStoerIntegrator0.getMaxEvaluations();
      assertEquals(Integer.MAX_VALUE, int0);
      
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(8.468222063292654E102, 1628.16, (-452.46242989909), 2700.311963595863);
      dormandPrince54Integrator0.getOrder();
      assertEquals(Integer.MAX_VALUE, dormandPrince54Integrator0.getMaxEvaluations());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(8.938334752179552E-9, 8.938334752179552E-9, 8.938334752179552E-9, 0.0);
      dormandPrince853Integrator0.setMinReduction(1661.297456427);
      dormandPrince853Integrator0.getStepHandlers();
      dormandPrince853Integrator0.getEventHandlers();
      dormandPrince853Integrator0.setSafety(0.0);
      dormandPrince853Integrator0.getOrder();
      dormandPrince853Integrator0.getStepHandlers();
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1661.297456427, 0.0, 8.938334752179552E-9, 0.0);
      dormandPrince54Integrator0.getOrder();
      assertEquals(Integer.MAX_VALUE, dormandPrince54Integrator0.getMaxEvaluations());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(5.3757942693, (-3072.109115798437), 714.027863, 5.3757942693);
      graggBulirschStoerIntegrator0.setMaxEvaluations(748);
      graggBulirschStoerIntegrator0.setInterpolationControl(false, 2053);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-3072.109115798437);
      doubleArray0[1] = 5.3757942693;
      doubleArray0[2] = (double) 2053;
      doubleArray0[3] = (-3072.109115798437);
      doubleArray0[4] = (double) 2053;
      doubleArray0[5] = 5.3757942693;
      doubleArray0[6] = (double) 2053;
      doubleArray0[7] = (double) 748;
      doubleArray0[8] = 5.3757942693;
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.computeDerivatives((-1488.616), doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(0.0);
      gillIntegrator0.getEvaluations();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 0.1;
      doubleArray0[4] = 0.0;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 0.1, doubleArray0, doubleArray0);
      highamHall54Integrator0.setMaxEvaluations((-139));
      highamHall54Integrator0.getOrder();
      highamHall54Integrator0.getCurrentSignedStepsize();
      highamHall54Integrator0.getOrder();
      double double0 = 649.3436221974137;
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(249, (-720.594), 649.3436221974137, doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(152.0);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 728.287863134423;
      doubleArray0[1] = 70.0;
      doubleArray0[2] = 152.0;
      doubleArray0[3] = 728.287863134423;
      doubleArray0[4] = 152.0;
      doubleArray0[5] = 152.0;
      doubleArray0[6] = 152.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(728.287863134423, 152.0, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setInitialStepSize(1678.23);
      graggBulirschStoerIntegrator0.setInterpolationControl(true, (-1681));
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 728.287863134423, 0.0, 728.287863134423);
      highamHall54Integrator0.getOrder();
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.FIRST;
      StepNormalizer stepNormalizer0 = new StepNormalizer(70.0, fixedStepHandler0, stepNormalizerMode0, stepNormalizerBounds0);
      highamHall54Integrator0.addStepHandler(stepNormalizer0);
      highamHall54Integrator0.getCurrentStepStart();
      assertEquals(Integer.MAX_VALUE, highamHall54Integrator0.getMaxEvaluations());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(4196.7641, (-1450.396), (-1938.8632739815348), 1000.0);
      graggBulirschStoerIntegrator0.getEvaluations();
      double double0 = (-2132.23091606);
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = null;
      try {
        adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(0, (-2132.23091606), (-1.0), (-2132.23091606), 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // multistep method needs at least 0 previous steps, got 2
         //
         verifyException("org.apache.commons.math3.ode.MultistepIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-254.23032);
      doubleArray0[2] = (-254.23032);
      doubleArray0[2] = 2627.74;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-254.23032), (-254.23032), doubleArray0, doubleArray0);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1.0), 0.0, (-254.23032), 2627.74);
      dormandPrince853Integrator0.getOrder();
      highamHall54Integrator0.clearStepHandlers();
      dormandPrince853Integrator0.setSafety(2627.74);
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(8, 271.5, (-4004.5660309), 2627.74, (-254.23032));
      dormandPrince853Integrator0.setStepSizeControl((-1.0), 2416.95, 0.0, (-4004.5660309));
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-853.058), (-284.9594), (-1.0), 2628.463929947642);
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 8);
      FilterType filterType0 = FilterType.TRIGGER_ONLY_INCREASING_EVENTS;
      EventFilter eventFilter0 = new EventFilter((EventHandler) null, filterType0);
      graggBulirschStoerIntegrator0.addEventHandler((EventHandler) eventFilter0, 2628.463929947642, (-254.23032), 1145, (UnivariateSolver) null);
      double double0 = graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
      assertEquals(Integer.MAX_VALUE, graggBulirschStoerIntegrator0.getMaxEvaluations());
      assertEquals(493.0384324220578, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double double0 = 2529.276251221;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(4811.050378219999, 1.653701058949654E-58, 2529.276251221, 1.653701058949654E-58);
      highamHall54Integrator0.getOrder();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = null;
      try {
        graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-2546.94682819196), 5, (double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-3);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[1] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(2470.2074462147);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = 2470.2074462147;
      doubleArray0[2] = (double) (byte) (-3);
      try { 
        threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) (byte)1, doubleArray0, 1.0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-8.193572619487537E139));
      midpointIntegrator0.clearStepHandlers();
      midpointIntegrator0.clearEventHandlers();
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Integer.MAX_VALUE, midpointIntegrator0.getMaxEvaluations());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 257;
      doubleArray0[1] = 1430.411555;
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(257, 257, 1430.411555, doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(5.65391060729083E76, (-6484.79682776), (-6484.79682776), 0.0);
      int int0 = 3023;
      graggBulirschStoerIntegrator0.setOrderControl(3023, 3023, (-6484.79682776));
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(802.7, 5.65391060729083E76, doubleArray0, doubleArray0);
      highamHall54Integrator0.getOrder();
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(5, (-1964.11311507972), 5.65391060729083E76, 556.0, 556.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      adamsBashforthIntegrator0.integrate(expandableStatefulODE0, 1784.6684);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1.16354361977249E-8, 1.16354361977249E-8, 4.169293918423203E144, 1.16354361977249E-8);
      graggBulirschStoerIntegrator0.getEventHandlers();
      graggBulirschStoerIntegrator0.getCurrentStepStart();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)59;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)51;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 1.16354361977249E-8, 384.240703387, 418.53255516114314);
      dormandPrince54Integrator0.setInitialStepSize(460.8570382851);
      dormandPrince54Integrator0.getOrder();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2.7866921183936055E-8, (double[]) null, 2953.88, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double double0 = 1250.4104182404838;
      double double1 = 2522.444;
      double double2 = (-1088.51244);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1250.4104182404838, 442.4014, 2522.444, (-1088.51244));
      int int0 = 434;
      double double3 = (-1.0);
      graggBulirschStoerIntegrator0.setStabilityCheck(true, 434, 434, (-1.0));
      double double4 = 641.0;
      graggBulirschStoerIntegrator0.setControlFactors((-3692.0389826), (-3692.0389826), 442.4014, 641.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      FilterType filterType0 = FilterType.TRIGGER_ONLY_DECREASING_EVENTS;
      EventFilter eventFilter0 = new EventFilter(eventHandler0, filterType0);
      RiddersSolver riddersSolver0 = new RiddersSolver();
      graggBulirschStoerIntegrator0.addEventHandler((EventHandler) eventFilter0, (-8.893078799284047E-8), (-917.0), 434, (UnivariateSolver) riddersSolver0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (double) 434);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(1306.0);
      int int0 = 1436;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      FilterType filterType0 = FilterType.TRIGGER_ONLY_DECREASING_EVENTS;
      EventFilter eventFilter0 = new EventFilter(eventHandler0, filterType0);
      gillIntegrator0.addEventHandler((EventHandler) eventFilter0, (double) 1436, 700.879, 1035);
      gillIntegrator0.getEventHandlers();
      // Undeclared exception!
      try { 
        gillIntegrator0.computeDerivatives(1436, (double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
