/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 18:24:36 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.EnumDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.NumberDeserializer;
import com.alibaba.fastjson.parser.deserializer.OptionalCodec;
import com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.parser.deserializer.TimeDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.ImageCapabilities;
import java.awt.JobAttributes;
import java.awt.PageAttributes;
import java.awt.Point;
import java.awt.Rectangle;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.sql.BatchUpdateException;
import java.sql.DataTruncation;
import java.sql.Date;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLWarning;
import java.sql.Timestamp;
import java.text.ChoiceFormat;
import java.text.Collator;
import java.text.DateFormatSymbols;
import java.text.SimpleDateFormat;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.Currency;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.UUID;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockIllegalAccessException;
import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) float0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLFeatureNotSupportedException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException("L");
      illegalThreadStateException0.fillInStackTrace();
      ThreadGroup threadGroup0 = new ThreadGroup("L");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "lemur");
      MockThread mockThread0 = new MockThread(threadGroup1, "lemur");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      threadGroup0.destroy();
      Class<?> class0 = TypeUtils.loadClass("java.time.LocalDate", classLoader1);
      assertFalse(class0.isEnum());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      TypeUtils.getSerializeFeatures(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      TypeUtils.loadClass("v");
      Boolean boolean0 = Boolean.TRUE;
      TypeUtils.getKoltinConstructorParameters(class0);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(hashMap0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"j\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64("Ljava.util.concurrent.ConcurrentSkipListMap");
      Long long1 = new Long(1677L);
      Long long2 = TypeUtils.castToLong(long1);
      assertFalse(long2.equals((Object)long0));
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      LinkedHashMap<UUID, BufferCapabilities> linkedHashMap0 = new LinkedHashMap<UUID, BufferCapabilities>();
      TreeMap<UUID, BufferCapabilities> treeMap0 = new TreeMap<UUID, BufferCapabilities>(linkedHashMap0);
      Class<Short> class0 = Short.TYPE;
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      TypeUtils.unwrapOptional(class1);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class short
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("%<D&@ <nfc;av=v");
      Locale locale1 = Locale.JAPAN;
      locale0.getDisplayName(locale1);
      WeakHashMap<UUID, BufferCapabilities> weakHashMap0 = new WeakHashMap<UUID, BufferCapabilities>();
      TreeMap<UUID, BufferCapabilities> treeMap0 = new TreeMap<UUID, BufferCapabilities>(weakHashMap0);
      byte[] byteArray0 = TypeUtils.castToBytes("%<d&@ <nfc;av=v");
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-2), (byte)119, (byte) (-36), (byte) (-3), (byte) (-85), (byte) (-64)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      String string0 = ParserConfig.AUTOTYPE_ACCEPT;
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("%<D&@ <nfc;av=v");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong(5450448828334921485L);
      atomicLong0.incrementAndGet();
      Byte byte0 = new Byte((byte)81);
      TypeUtils.isHibernateInitialized(byte0);
      TypeUtils.castToChar((Object) null);
      String string0 = "q";
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException();
      SQLDataException sQLDataException0 = new SQLDataException("toString", "q", (byte)81, illegalMonitorStateException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(sQLDataException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : java.sql.SQLDataException: toString
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError("Xd-jrX");
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(noSuchFieldError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.NoSuchFieldError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<Rectangle> class0 = Rectangle.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      boolean boolean0 = TypeUtils.isNumber("fastjson.parser.autoTypeAccept");
      assertFalse(boolean0);
      
      boolean boolean1 = TypeUtils.isKotlin(class0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      Class<JavaObjectDeserializer> class0 = JavaObjectDeserializer.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>(51, 51);
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0, true);
      boolean boolean0 = TypeUtils.isHibernateInitialized(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Hashtable<MapDeserializer, MockDateFormat> hashtable0 = new Hashtable<MapDeserializer, MockDateFormat>();
      MapDeserializer mapDeserializer0 = MapDeserializer.instance;
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      MockDateFormat.getTimeInstance();
      hashtable0.put(mapDeserializer0, mockDateFormat0);
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(hashtable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : {com.alibaba.fastjson.parser.deserializer.MapDeserializer@1=org.evosuite.runtime.mock.java.text.MockDateFormat@16f8e5fc}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TreeSet<MockMinguoDate> treeSet0 = new TreeSet<MockMinguoDate>();
      TypeUtils.loadClass("Ljava.awt.Point");
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      TypeUtils.isNumber("size");
      TypeUtils.getCollectionItemType((Type) null);
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithJavaBean);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : sun.misc.Launcher$AppClassLoader@6bc7c054
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<TimeDeserializer> class0 = TimeDeserializer.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, (Map<String, String>) null, false);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ThreadGroup threadGroup0 = new ThreadGroup("Xd-jrX");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "oracle.sql.DATE");
      MockThread mockThread0 = new MockThread(threadGroup1, "Xd-jrX");
      mockThread0.getContextClassLoader();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TypeUtils.loadClass("Xd-jrX", classLoader0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Class<?>) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      // Undeclared exception!
      try { 
        TypeUtils.buildBeanInfo((Class<?>) null, (Map<String, String>) treeMap0, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      TypeUtils.isGenericParamType(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : byte
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      LinkedHashMap<UUID, BufferCapabilities> linkedHashMap0 = new LinkedHashMap<UUID, BufferCapabilities>();
      TreeMap<UUID, BufferCapabilities> treeMap0 = new TreeMap<UUID, BufferCapabilities>(linkedHashMap0);
      TypeUtils.isNumber("[Z");
      Class<Short> class0 = Short.TYPE;
      TypeUtils.getCollectionItemType(class0);
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithFieldName);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeUtils.isPath(class0);
      TypeUtils.getCollectionItemType(class0);
      JSONObject jSONObject0 = new JSONObject();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-111);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Class<MockCalendar> class0 = MockCalendar.class;
      TypeUtils.computeGetters(class0, (Map<String, String>) null, false);
      Class<JavaBeanDeserializer> class1 = JavaBeanDeserializer.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class1, (Map<String, String>) null, propertyNamingStrategy0, false);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<NoSuchFieldException> class0 = NoSuchFieldException.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      TypeUtils.getCollectionItemType(class0);
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      Long long0 = new Long(140758963191807L);
      Byte byte0 = TypeUtils.castToByte(long0);
      Byte.toUnsignedLong((byte)13);
      TypeUtils.castToBoolean(byte0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lan\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      ThreadGroup threadGroup0 = new ThreadGroup((String) null);
      Boolean boolean0 = new Boolean((String) null);
      Long long0 = new Long((-1473L));
      TypeUtils.castToByte(long0);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Class<MockDate> class0 = MockDate.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, map0, false);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) javaBeanDeserializer0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLTransactionRollbackException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("Ljava.util.concurrent.ConcurrentSkipListMap");
      LinkedHashMap<OptionalCodec, Exception> linkedHashMap0 = new LinkedHashMap<OptionalCodec, Exception>();
      linkedHashMap0.clear();
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      TypeUtils.castToJavaBean((Object) linkedHashMap0, class0);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      MockThread mockThread0 = new MockThread("yyyyMMdd");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      classLoader0.getParent();
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("oy!XZ_M.V", classLoader1);
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("Rgda`mNw\"n\"1.Usou");
      Class<SQLWarning> class0 = SQLWarning.class;
      String string0 = "5(UZr";
      // Undeclared exception!
      try { 
        ParserConfig.getFieldFromCache("Rgda`mNw\"n\"1.Usou", (Map<String, Field>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) concurrentHashMap0, (Map<String, Field>) hashMap0, true, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Long long0 = new Long((-1473L));
      Class<SQLException> class0 = SQLException.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, map0, true);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      java.util.IdentityHashMap<String, String> identityHashMap1 = new java.util.IdentityHashMap<String, String>();
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) identityHashMap1, propertyNamingStrategy0, false);
      Boolean boolean0 = new Boolean("SELF_SUPPRESSION_MESSAGE");
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException("=ihJnfSM+:g]I!");
      assertEquals("java.lang.NegativeArraySizeException: =ihJnfSM+:g]I!", negativeArraySizeException0.toString());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      TreeMap<BatchUpdateException, JavaBeanDeserializer> treeMap0 = new TreeMap<BatchUpdateException, JavaBeanDeserializer>();
      TypeUtils.castToJavaBean((Object) treeMap0, class0);
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException("Ljava.awt.Point");
      LinkedHashMap<TimeUnit, String> linkedHashMap0 = new LinkedHashMap<TimeUnit, String>();
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(linkedHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TypeUtils.isHibernateInitialized((Object) null);
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[4];
      String string0 = null;
      int int0 = (-3675);
      StackTraceElement stackTraceElement0 = new StackTraceElement("kotlin.ranges.LongRange", "[double", (String) null, (-3675));
      stackTraceElementArray0[0] = stackTraceElement0;
      String string1 = null;
      StackTraceElement stackTraceElement1 = null;
      try {
        stackTraceElement1 = new StackTraceElement((String) null, (String) null, "U_<SbES:Pbg=Zdq", 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Declaring class is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<Rectangle> class0 = Rectangle.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      Class<TimeDeserializer> class1 = TimeDeserializer.class;
      TypeUtils.getSerializeFeatures(class1);
      Type[] typeArray0 = new Type[7];
      int[] intArray0 = new int[0];
      throwableDeserializer0.smartMatch("ALe03/jZLvpDfBvl^@", intArray0);
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class1;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) class1;
      typeArray0[6] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[3], class0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) throwableDeserializer0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      Class<JavaBeanDeserializer> class1 = JavaBeanDeserializer.class;
      TypeUtils.isKotlin(class1);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      StackTraceElementDeserializer stackTraceElementDeserializer0 = new StackTraceElementDeserializer();
      System.setCurrentTimeMillis(199L);
      SQLDataException sQLDataException0 = new SQLDataException((Throwable) null);
      TypeUtils.castToBigDecimal((Object) null);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TypeUtils.decapitalize("Ljava.util.concurrent.ConcurrentSkipListSet");
      TreeSet<MockMinguoDate> treeSet0 = new TreeSet<MockMinguoDate>();
      Class<Integer> class0 = Integer.TYPE;
      ThreadGroup threadGroup0 = new ThreadGroup("ljava.util.concurrent.ConcurrentSkipListSet");
      MockThread mockThread0 = new MockThread((Runnable) null);
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0);
      mockThread0.getStackTrace();
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) treeSet0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError(",3ausVJbeuRs$\".`<0");
      Byte byte0 = new Byte((byte)0);
      Dimension dimension0 = new Dimension();
      Dimension dimension1 = new Dimension(dimension0);
      TypeUtils.loadClass("undefined");
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) dimension1, (Type) null, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TypeUtils.castToString((Object) null);
      TypeUtils.castToSqlDate((Object) null);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("Xd-rX");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException("L");
      illegalThreadStateException0.fillInStackTrace();
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(illegalThreadStateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : java.lang.IllegalThreadStateException: L
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ThreadGroup threadGroup0 = new ThreadGroup("com.alibaba.fastjson.JSONPath$Operator");
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "j");
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      TypeUtils.loadClass("com.alibaba.fastjson.JSONException", classLoader1, false);
      TypeUtils.toLocale("L");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ThreadGroup threadGroup0 = new ThreadGroup("Xd-jrX");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "oracle.sql.DATE");
      MockThread mockThread0 = new MockThread(threadGroup1, "Xd-jrX");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      TypeUtils.loadClass("Xd-jrX", classLoader1);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ThreadGroup threadGroup0 = new ThreadGroup("Ljava.awt.Font");
      MockThread mockThread0 = new MockThread(threadGroup0, "");
      MockThread mockThread1 = new MockThread();
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      TypeUtils.loadClass("Ljava.awt.Rectangle", classLoader0);
      TypeUtils.loadClass("Ljava.awt.Font", classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError(",3ausVJbeuRs$\".`<0");
      PageAttributes pageAttributes0 = new PageAttributes();
      PageAttributes pageAttributes1 = new PageAttributes(pageAttributes0);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(pageAttributes1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : color=monochrome,media=iso-a4,orientation-requested=portrait,origin=physical,print-quality=normal,printer-resolution=[72,72,3]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      classLoader0.setPackageAssertionStatus("PascalCase", true);
      classLoader0.clearAssertionStatus();
      TypeUtils.loadClass((String) null);
      TypeUtils.castToSqlDate((Object) null);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TypeUtils.loadClass("Xd-jrX");
      Locale locale0 = new Locale("Xd-jrX", "Xd-jrX", "Xd-jrX");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("Xd-jrX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : Xd-jrX
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<IllegalStateException> class0 = IllegalStateException.class;
      TypeUtils.isProxy(class0);
      java.util.IdentityHashMap<String, Object> identityHashMap0 = new java.util.IdentityHashMap<String, Object>();
      Class<Currency> class1 = Currency.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) identityHashMap0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. java.util.Currency
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TypeUtils.loadClass("");
      TreeMap<UUID, BufferCapabilities> treeMap0 = new TreeMap<UUID, BufferCapabilities>();
      ConcurrentHashMap<UUID, BufferCapabilities> concurrentHashMap0 = new ConcurrentHashMap<UUID, BufferCapabilities>(treeMap0);
      TreeMap<UUID, BufferCapabilities> treeMap1 = new TreeMap<UUID, BufferCapabilities>(concurrentHashMap0);
      MapDeserializer mapDeserializer0 = MapDeserializer.instance;
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(mapDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : com.alibaba.fastjson.parser.deserializer.MapDeserializer@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TypeUtils.loadClass("");
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean("Tg(R4{Z$8WS.XR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : Tg(R4{Z$8WS.XR
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      classLoader0.setPackageAssertionStatus("PascalCase", true);
      classLoader0.clearAssertionStatus();
      TypeUtils.loadClass((String) null);
      TypeUtils.toLocale("");
      TypeUtils.castToSqlDate("");
      TypeUtils.fnv1a_64_lower("gG&?8gLe`9#~QLzt");
      TypeUtils.isHibernateInitialized("can not cast to byte, value : ");
      Class<NumberDeserializer> class0 = NumberDeserializer.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo(class0, map0, propertyNamingStrategy0);
      TypeUtils.fnv1a_64("can not cast to byte, value : ");
      Class<?> class1 = TypeUtils.getCollectionItemClass((Type) null);
      TypeUtils.isNumber("gG&?8gLe`9#~QLzt");
      TypeUtils.isGenericParamType(class1);
      Timestamp timestamp0 = new Timestamp(420087773621546063L);
      ParserConfig parserConfig0 = null;
      TypeUtils.loadClass("expect string", classLoader1, false);
      TypeUtils.createCollection(class1);
      Class<MockGregorianCalendar> class2 = MockGregorianCalendar.class;
      ThrowableDeserializer throwableDeserializer0 = null;
      try {
        throwableDeserializer0 = new ThrowableDeserializer((ParserConfig) null, class2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      TypeUtils.toLocale("L");
      Class<String> class0 = String.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>(47);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) weakHashMap0, (Map<String, Field>) hashMap0, false, propertyNamingStrategy0);
      TypeUtils.isProxy(class0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      Class<MockCalendar> class0 = MockCalendar.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) concurrentHashMap0, false);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TreeSet<MockMinguoDate> treeSet0 = new TreeSet<MockMinguoDate>();
      Class<Integer> class0 = Integer.TYPE;
      Class<JavaBeanDeserializer> class1 = JavaBeanDeserializer.class;
      TypeUtils.isKotlin(class1);
      TypeUtils.isGenericParamType(class1);
      TypeUtils.unwrapOptional(class0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TreeSet<MockMinguoDate> treeSet0 = new TreeSet<MockMinguoDate>();
      TypeUtils.loadClass("]=Mh");
      Class<JSONObject> class0 = JSONObject.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      // Undeclared exception!
      try { 
        ParserConfig.getFieldFromCache("]=Mh", (Map<String, Field>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Feature[] featureArray0 = new Feature[6];
      Feature feature0 = Feature.AutoCloseSource;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SortFeidFastMatch;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.AllowComment;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.AllowUnQuotedFieldNames;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.InternFieldNames;
      featureArray0[5] = feature4;
      JSONObject jSONObject0 = new JSONObject();
      Hashtable<String, MockMinguoDate> hashtable0 = new Hashtable<String, MockMinguoDate>();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class1).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
          doReturn((String) null).when(genericArrayType0).toString();
          doReturn((Type) null, (Type) null).when(genericArrayType0).getGenericComponentType();
          Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
          GenericArrayType genericArrayType1 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
          doReturn((String) null).when(genericArrayType1).toString();
          doReturn(type0).when(genericArrayType1).getGenericComponentType();
          TypeUtils.checkPrimitiveArray(genericArrayType1);
          Feature[] featureArray0 = new Feature[6];
          Feature feature0 = Feature.AutoCloseSource;
          featureArray0[0] = feature0;
          Feature feature1 = Feature.DisableASM;
          featureArray0[1] = feature1;
          Feature feature2 = Feature.AllowComment;
          featureArray0[2] = feature2;
          Feature feature3 = Feature.AllowUnQuotedFieldNames;
          featureArray0[3] = feature3;
          Feature feature4 = Feature.SortFeidFastMatch;
          featureArray0[4] = feature4;
          Feature feature5 = Feature.InternFieldNames;
          featureArray0[5] = feature5;
          // Undeclared exception!
          try { 
            JSON.parseObject("E]'S^dmFHI}E7", featureArray0);
            fail("Expecting exception: RuntimeException");
          
          } catch(RuntimeException e) {
             //
             // syntax error, pos 1, json : E]'S^dmFHI}E7
             //
             verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ThreadGroup threadGroup0 = new ThreadGroup("Ljava.awt.Font");
      MockThread mockThread0 = new MockThread(threadGroup0, "");
      TypeUtils.loadClass("2A%MG");
      TypeUtils.toLocale("java.java.lang.NoSuchFieldException");
      TypeUtils.isKotlin((Class) null);
      TypeUtils.isGenericParamType((Type) null);
      TypeUtils.isNumber("Ljava.awt.Font");
      JSONObject jSONObject0 = new JSONObject(true);
      Class<Timestamp> class0 = Timestamp.class;
      ParserConfig parserConfig0 = null;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) jSONObject0, class0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.sql.Timestamp
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ThreadGroup threadGroup0 = new ThreadGroup("Ljava.awt.Font");
      MockThread mockThread0 = new MockThread(threadGroup0, "");
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      TypeUtils.clearClassMapping();
      MockException mockException0 = new MockException("_.~X? n#*");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("nativeMethod", "<t]ZnI", 45380, mockException0);
      TypeUtils.castToChar("");
      TypeUtils.decapitalize("<t]ZnI");
      TypeUtils.unwrapOptional((Type) null);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      classLoader0.setPackageAssertionStatus("PascalCase", false);
      classLoader0.clearAssertionStatus();
      TypeUtils.loadClass((String) null);
      TypeUtils.toLocale("");
      TypeUtils.castToSqlDate("");
      TypeUtils.isHibernateInitialized("can not cast to byte, value : ");
      TypeUtils.getCollectionItemClass((Type) null);
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("getSymbotTable");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : getSymbotTable
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setDefaultAssertionStatus(false);
      classLoader0.getParent();
      ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      TypeUtils typeUtils0 = new TypeUtils();
      ArrayList<IllegalAccessError> arrayList0 = new ArrayList<IllegalAccessError>();
      arrayList0.listIterator();
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      TypeUtils.castToJavaBean((Object) null, class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      LinkedHashMap<OptionalCodec, Exception> linkedHashMap0 = new LinkedHashMap<OptionalCodec, Exception>();
      TypeUtils.decapitalize("");
      TreeSet<MockMinguoDate> treeSet0 = new TreeSet<MockMinguoDate>();
      Class<Integer> class0 = Integer.TYPE;
      ThreadGroup threadGroup0 = new ThreadGroup("7STIPMe");
      Class<ChronoLocalDate> class1 = ChronoLocalDate.class;
      TypeUtils.isPath(class1);
      Class<SQLDataException> class2 = SQLDataException.class;
      Class<StackTraceElementDeserializer> class3 = StackTraceElementDeserializer.class;
      TypeUtils.getKoltinConstructorParameters(class3);
      Class<JavaBeanDeserializer> class4 = JavaBeanDeserializer.class;
      TypeUtils.isKotlin(class3);
      TypeUtils.isGenericParamType(class4);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.sql.SQLDataException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeUtils.getClassFromMapping("`");
      Class<Byte> class0 = Byte.class;
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) "`", class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.Byte
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setDefaultAssertionStatus(true);
      classLoader0.clearAssertionStatus();
      TypeUtils.toLocale("kI[R4}.f_M=");
      Class<Point> class0 = Point.class;
      TypeUtils.isKotlin(class0);
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      WeakHashMap<Double, SQLInvalidAuthorizationSpecException> weakHashMap0 = new WeakHashMap<Double, SQLInvalidAuthorizationSpecException>();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StackOverflowError stackOverflowError0 = new StackOverflowError();
      stackOverflowError0.printStackTrace();
      NumberDeserializer numberDeserializer0 = new NumberDeserializer();
      TypeUtils.castToString(numberDeserializer0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(stackOverflowError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.lang.StackOverflowError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("Ljava.util.concurrent.ConcurrentSkipListMap", "Ljava.util.concurrent.ConcurrentSkipListMap");
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(identityHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {Ljava.util.concurrent.ConcurrentSkipListMap=Ljava.util.concurrent.ConcurrentSkipListMap}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<Rectangle> class0 = Rectangle.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      Rectangle rectangle0 = new Rectangle();
      TypeUtils.unwrapOptional(class0);
      Class<PropertyNamingStrategy> class1 = PropertyNamingStrategy.class;
      TypeUtils.isKotlin(class1);
      TypeUtils.isGenericParamType((Type) null);
      TypeUtils.isNumber("");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ThreadGroup threadGroup0 = new ThreadGroup("Ljava.awt.Rectangle");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "2sh$I[Ws#Tt,51}");
      MockThread mockThread0 = new MockThread(threadGroup1, (Runnable) null);
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      classLoader0.clearAssertionStatus();
      classLoader0.setDefaultAssertionStatus(true);
      Double double0 = new Double(3501.26987);
      TypeUtils.castToDate(double0);
      TypeUtils.loadClass("\"x#?BTec");
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Class<MockCalendar> class0 = MockCalendar.class;
      TypeUtils.isKotlin(class0);
      TypeUtils.isGenericParamType(class0);
      TypeUtils.isNumber("Ljava.awt.Rectangle");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      ThreadGroup threadGroup0 = new ThreadGroup((String) null);
      TypeUtils.castToDouble((Object) null);
      LinkageError linkageError0 = new LinkageError((String) null);
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError((String) null);
      TypeUtils.castToTimestamp((Object) null);
      System.setCurrentTimeMillis((-1L));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Class<Object> class0 = Object.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) concurrentHashMap0, (Map<String, Field>) hashMap0, false, propertyNamingStrategy0);
      TypeUtils.castToByte((Object) null);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException();
      ParserConfig parserConfig0 = new ParserConfig();
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) null, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLFeatureNotSupportedException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException();
      TypeUtils.isNumber("du\"P/1F+");
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.isGenericParamType(parameterizedTypeImpl0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ThreadGroup threadGroup0 = new ThreadGroup("scanFieldIntArray");
      MockThread mockThread0 = new MockThread(threadGroup0, "clear");
      MockThread mockThread1 = new MockThread();
      MockThread mockThread2 = new MockThread(threadGroup0, mockThread1, "Ljava.awt.Font");
      ClassLoader classLoader0 = mockThread2.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("clear", (ClassLoader) aSMClassLoader0);
      TypeUtils.loadClass("long", (ClassLoader) aSMClassLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TypeUtils.toLocale("false");
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException("7Z6Y''SJ1Qnn)8Wixj");
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      Boolean boolean0 = new Boolean("Z_uM; ");
      TypeUtils.castToInt((Object) null);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<Rectangle> class0 = Rectangle.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      Rectangle rectangle0 = new Rectangle();
      TypeUtils.unwrapOptional(class0);
      Class<PropertyNamingStrategy> class1 = PropertyNamingStrategy.class;
      TypeUtils.isKotlin(class1);
      TypeUtils.isGenericParamType((Type) null);
      TypeUtils.isNumber("fastjson.parser.autoTypeSupport");
      TypeUtils.castToFloat((Object) null);
      boolean boolean0 = new Boolean(false);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ThreadGroup threadGroup0 = new ThreadGroup("Ljava.awt.Font");
      ThreadGroup[] threadGroupArray0 = new ThreadGroup[4];
      threadGroupArray0[0] = threadGroup0;
      threadGroupArray0[1] = threadGroup0;
      threadGroupArray0[2] = threadGroup0;
      threadGroupArray0[3] = threadGroup0;
      threadGroup0.enumerate(threadGroupArray0);
      MockThread mockThread0 = new MockThread(threadGroup0, "");
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      ClassLoader.getSystemClassLoader();
      Class<Properties> class0 = Properties.class;
      TypeUtils.isKotlin(class0);
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      WeakHashMap<Double, SQLInvalidAuthorizationSpecException> weakHashMap0 = new WeakHashMap<Double, SQLInvalidAuthorizationSpecException>();
      TypeUtils.getGenericParamType(class0);
      TypeUtils.castToBoolean((Object) null);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TreeSet<MockMinguoDate> treeSet0 = new TreeSet<MockMinguoDate>();
      String string0 = "Ljava.awt.Point";
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "Ljava.awt.Point", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLTransactionRollbackException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      classLoader0.setDefaultAssertionStatus(true);
      String string0 = "PascaCase";
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("PascaCase");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"PascaCase\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ThreadGroup threadGroup0 = new ThreadGroup("Ljava.awt.Font");
      MockThread mockThread0 = new MockThread(threadGroup0, "");
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      Boolean boolean0 = new Boolean("");
      TypeUtils.castToInt(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError(",3ausVJbeuRs$\".`<0");
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      concurrentHashMap0.keySet(",3ausVJbeuRs$\".`<0");
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) concurrentHashMap0, false);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(",3ausVJbeuRs$\".`<0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : ,3ausVJbeuRs$\".`<0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<DataTruncation> class0 = DataTruncation.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      Class<Long> class2 = Long.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.values();
      hashMap0.put("0Y-u'O`]@[!", "0Y-u'O`]@[!");
      TypeUtils.computeGetters((Class<?>) class2, (Map<String, String>) hashMap0);
      TypeUtils.getSerializeFeatures(class0);
      TypeUtils.decapitalize((String) null);
      IndexOutOfBoundsException indexOutOfBoundsException0 = new IndexOutOfBoundsException();
      Class<ParameterizedTypeImpl> class3 = ParameterizedTypeImpl.class;
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) indexOutOfBoundsException0, class3, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TreeSet<MockMinguoDate> treeSet0 = new TreeSet<MockMinguoDate>();
      ThreadGroup threadGroup0 = new ThreadGroup("(+%!`S,*40ca+r}G|D");
      Double double0 = new Double((-993.97));
      TypeUtils.castToDouble(double0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      StackTraceElementDeserializer stackTraceElementDeserializer0 = new StackTraceElementDeserializer();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(mockJapaneseDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate@38e18630
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ParserConfig.getGlobalInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      classLoader0.setDefaultAssertionStatus(false);
      TypeUtils.castToDate((Object) null);
      TypeUtils.loadClass("fastjson.parser.autoTypeAccept");
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TypeUtils.isKotlin((Class) null);
      TypeUtils.isGenericParamType((Type) null);
      TypeUtils.isNumber("fastjson.parser.autoTypeAccept");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      classLoader0.setPackageAssertionStatus("PascalCase", false);
      TypeUtils.loadClass((String) null);
      TypeUtils.toLocale("");
      TypeUtils.castToSqlDate("");
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      TypeUtils.isKotlin(class0);
      TypeUtils.isGenericParamType(class0);
      TypeUtils.isNumber("-!E:C.N!%;BofeSo5M*");
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<InternalError> class0 = InternalError.class;
      TypeUtils.isPath(class0);
      // Undeclared exception!
      try { 
        TypeUtils.loadClass("[Eg{KZ+)wYc'AS", (ClassLoader) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<TimeDeserializer> class0 = TimeDeserializer.class;
      TypeUtils.getParserFeatures(class0);
      TypeUtils.getGenericParamType(class0);
      ChoiceFormat choiceFormat0 = new ChoiceFormat("");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Class<DateFormatSymbols> class1 = DateFormatSymbols.class;
      TypeUtils.isKotlin(class1);
      Boolean boolean0 = new Boolean("fastjson.parser.autoTypeSupport");
      TypeUtils.isNumber("4");
      ParserConfig parserConfig1 = new ParserConfig(classLoader0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TreeSet<MockMinguoDate> treeSet0 = new TreeSet<MockMinguoDate>();
      Class<Integer> class0 = Integer.TYPE;
      Locale locale0 = Locale.FRANCE;
      locale0.getDisplayName();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      mockGregorianCalendar0.isWeekDateSupported();
      TypeUtils.castToDate(mockGregorianCalendar0);
      TypeUtils.loadClass("9L2Yf*eg.c>Bzln^VA");
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Class<PageAttributes> class1 = PageAttributes.class;
      TypeUtils.isKotlin(class1);
      TypeUtils.isNumber("9L2Yf*eg.c>Bzln^VA");
      TypeUtils.getCollectionItemType(class0);
      TypeUtils typeUtils0 = new TypeUtils();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<NoSuchFieldException> class0 = NoSuchFieldException.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      Type type0 = TypeUtils.getCollectionItemType(class0);
      TypeUtils.isGenericParamType(type0);
      TypeUtils.castToDate((Object) null);
      TypeUtils.loadClass("Ljava.awt.Rectangle;");
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Class<MockCalendar> class2 = MockCalendar.class;
      Class<EnumDeserializer> class3 = EnumDeserializer.class;
      TypeUtils.isKotlin(class3);
      TypeUtils.isGenericParamType(class2);
      // Undeclared exception!
      try { 
        TypeUtils.isNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ThreadGroup threadGroup0 = new ThreadGroup("1");
      MockThread mockThread0 = new MockThread("1");
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0);
      MockThread mockThread2 = new MockThread(mockThread1, "1");
      MockThread mockThread3 = new MockThread(mockThread2);
      ClassLoader classLoader0 = mockThread3.getContextClassLoader();
      classLoader0.setDefaultAssertionStatus(true);
      ClassLoader classLoader1 = classLoader0.getParent();
      ClassLoader.getSystemClassLoader();
      classLoader1.clearAssertionStatus();
      TypeUtils.loadClass((String) null);
      TypeUtils.castToSqlDate("1");
      TypeUtils.fnv1a_64_lower("syntax error : ");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      StackTraceElementDeserializer stackTraceElementDeserializer0 = new StackTraceElementDeserializer();
      ArrayList<Currency> arrayList0 = new ArrayList<Currency>();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TreeSet<MockMinguoDate> treeSet0 = new TreeSet<MockMinguoDate>();
      ThreadGroup threadGroup0 = new ThreadGroup("gettoString");
      MockThread mockThread0 = new MockThread(threadGroup0, (Runnable) null, "gettoString", (-3837L));
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ClassLoader.getSystemClassLoader();
      classLoader1.clearAssertionStatus();
      TypeUtils.loadClass("^_3avW0;6F^_)g} 9");
      TypeUtils.castToSqlDate((Object) null);
      TypeUtils.fnv1a_64_lower("lso_ FNJgx!b^cQ@F");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      StackTraceElementDeserializer stackTraceElementDeserializer0 = new StackTraceElementDeserializer();
      MapDeserializer mapDeserializer0 = MapDeserializer.instance;
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(mapDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : com.alibaba.fastjson.parser.deserializer.MapDeserializer@2
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TypeUtils.toLocale("Xd-rX");
      Class<String> class0 = String.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      weakHashMap0.getOrDefault(imageCapabilities0, "'gJ-w\u0001,,");
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>(47);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) weakHashMap0, (Map<String, Field>) hashMap0, true, propertyNamingStrategy0);
      Class<Collator> class1 = Collator.class;
      TypeUtils.isProxy(class1);
      TypeUtils.fnv1a_64_lower("5>#zXIU-o+l\" ");
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      ThreadGroup threadGroup0 = new ThreadGroup((String) null);
      TypeUtils.castToDouble((Object) null);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      StackTraceElementDeserializer stackTraceElementDeserializer0 = new StackTraceElementDeserializer();
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      VerifyError verifyError0 = new VerifyError("getTimeZone");
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(verifyError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : java.lang.VerifyError: getTimeZone
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      TypeUtils.computeGetters(class0, (Map<String, String>) null, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "V0Ubj=^B7DW");
      Integer integer0 = new Integer(1970);
      TypeUtils.castToSqlTime(integer0);
      Locale locale0 = Locale.FRANCE;
      Collator collator0 = Collator.getInstance(locale0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(collator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.text.RuleBasedCollator@ea51b32a
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ThreadGroup threadGroup0 = new ThreadGroup("X-jr");
      Boolean boolean0 = new Boolean("X-jr");
      Long long0 = new Long((-1473L));
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("X-jr");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"X-jr\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<Rectangle> class0 = Rectangle.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      Rectangle rectangle0 = new Rectangle();
      TypeUtils.unwrapOptional(class0);
      Class<PropertyNamingStrategy> class1 = PropertyNamingStrategy.class;
      Class<NoSuchMethodException> class2 = NoSuchMethodException.class;
      parserConfig0.createJavaBeanDeserializer(class2, class2);
      TypeUtils.isKotlin(class1);
      TypeUtils.isGenericParamType((Type) null);
      TypeUtils.isNumber("fastjson.parser.autoTypeSupport");
      Boolean boolean0 = new Boolean(false);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) hashtable0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      ThreadGroup threadGroup0 = new ThreadGroup((String) null);
      TypeUtils.castToDouble((Object) null);
      TypeUtils.loadClass((String) null);
      TypeUtils.toLocale("");
      Double double0 = new Double((-2489.7));
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : -2489.7
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TypeUtils.castToSqlTime((Object) null);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("ItQp!'q", (ClassLoader) aSMClassLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setDefaultAssertionStatus(false);
      classLoader0.getParent();
      ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      TypeUtils typeUtils0 = new TypeUtils();
      ArrayList<IllegalAccessError> arrayList0 = new ArrayList<IllegalAccessError>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>(37);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Class<AtomicInteger> class0 = AtomicInteger.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, map0, (Map<String, Field>) hashMap0, true, propertyNamingStrategy0);
      Class<Short> class1 = Short.class;
      TypeUtils.isProxy(class1);
      // Undeclared exception!
      try { 
        TypeUtils.fnv1a_64_lower((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ThreadGroup threadGroup0 = new ThreadGroup("Ljava.awt.Font");
      MockThread mockThread0 = new MockThread(threadGroup0, "");
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("u~NP2[");
      SQLWarning sQLWarning0 = new SQLWarning("d", "d", (-1935372665), sQLNonTransientConnectionException0);
      LinkageError linkageError0 = new LinkageError((String) null, sQLWarning0);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("Ljava.awt.Font");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : Ljava.awt.Font
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TypeUtils.castToBigInteger((Object) null);
      TypeUtils.toLocale("false");
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException("7Z6Y''SJ1Qnn)8Wixj");
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      Boolean boolean0 = new Boolean("false");
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("iOjB,91e0VWvrU");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"iOjB91e0VWvrU\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      Class<SQLException> class0 = SQLException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0, false, true);
      aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) treeMap0, propertyNamingStrategy0, true);
      Boolean boolean0 = new Boolean("f B");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ThreadGroup threadGroup0 = new ThreadGroup("Ljava.awt.Font");
      MockThread mockThread0 = new MockThread(threadGroup0, "");
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("u~NP2[");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      aSMClassLoader0.setClassAssertionStatus("Ljava.awt.Font", false);
      classLoader0.clearAssertionStatus();
      classLoader1.setPackageAssertionStatus("u~NP2[", false);
      TypeUtils.loadClass("!~Xh;z?<ZnHDO", classLoader0, true);
      Date date0 = new Date((-1935372665));
      TypeUtils.castToSqlTime(date0);
      TypeUtils.isKotlin((Class) null);
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      TypeUtils.castToTimestamp(date0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setClassAssertionStatus("[int", true);
      classLoader0.setDefaultAssertionStatus(false);
      Class<NoSuchMethodError> class0 = NoSuchMethodError.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      TypeUtils.toLocale("PascalCase");
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException();
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1231), 255, (-1049), (-1231), (-3305), (-1049));
      TypeUtils.castToSqlTime(mockGregorianCalendar0);
      Class<Dimension> class1 = Dimension.class;
      TypeUtils.isKotlin(class1);
      TypeUtils.loadClass("PascalCase", classLoader0);
      TypeUtils.getRawClass(class0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<Rectangle> class0 = Rectangle.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      Class<TimeDeserializer> class1 = TimeDeserializer.class;
      TypeUtils.getSerializeFeatures(class1);
      Type[] typeArray0 = new Type[7];
      int[] intArray0 = new int[0];
      throwableDeserializer0.smartMatch("ALe03/jZLvpDfBvl^@", intArray0);
      typeArray0[0] = (Type) class0;
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException("fastjson.parser.autoTypeSupport");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashMap0, false);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Xbjr");
      LinkageError linkageError0 = new LinkageError("parse unwrapped field error.", sQLNonTransientConnectionException0);
      TypeUtils.castToLong((Object) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal("u~NP2[");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      identityHashMap0.put("V+5Al^6P4 kw:", "V+5Al^6P4 kw:");
      identityHashMap0.put("Ljava.util.concurrent.ConcurrentSkipListMap", "Ljava.util.concurrent.ConcurrentSkipListMap");
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) identityHashMap0, propertyNamingStrategy0, true);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(identityHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {V+5Al^6P4 kw:=V+5Al^6P4 kw:, Ljava.util.concurrent.ConcurrentSkipListMap=Ljava.util.concurrent.ConcurrentSkipListMap}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : _
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          ThreadGroup threadGroup0 = new ThreadGroup("X-jr");
          Boolean boolean0 = new Boolean("X-jr");
          Class<OptionalCodec> class0 = OptionalCodec.class;
          TypeUtils.getSerializeFeatures(class0);
          ParserConfig parserConfig0 = ParserConfig.global;
          ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
          int[] intArray0 = new int[3];
          intArray0[0] = 0;
          intArray0[1] = 0;
          intArray0[2] = 0;
          throwableDeserializer0.smartMatch("fastjson.parser.autoTypeSupport", intArray0);
          Type[] typeArray0 = new Type[8];
          typeArray0[0] = (Type) class0;
          typeArray0[1] = (Type) class0;
          typeArray0[2] = (Type) class0;
          typeArray0[3] = (Type) class0;
          typeArray0[4] = (Type) class0;
          typeArray0[5] = (Type) class0;
          typeArray0[6] = (Type) class0;
          typeArray0[3] = (Type) class0;
          ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[7], typeArray0[4]);
          NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
          // Undeclared exception!
          try { 
            TypeUtils.cast((Object) noSuchMethodError0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
            fail("Expecting exception: RuntimeException");
          
          } catch(RuntimeException e) {
             //
             // type not match. java.lang.NoSuchMethodError -> com.alibaba.fastjson.parser.deserializer.OptionalCodec
             //
             verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      System.setCurrentTimeMillis(5450448828334921485L);
      Class<ImageCapabilities> class0 = ImageCapabilities.class;
      Random.setNextRandom(1);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      classLoader0.setPackageAssertionStatus("IE4UC", false);
      classLoader0.getParent();
      classLoader0.setClassAssertionStatus("getFastMatchToken", true);
      classLoader0.clearAssertionStatus();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(":'RIPH3.EoW", "5C&kd-Cx#RSm,&FUMJ`");
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      ParserConfig parserConfig0 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLTimeoutException0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match. java.sql.SQLTimeoutException -> java.awt.ImageCapabilities
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      System.setCurrentTimeMillis(5450448828334921485L);
      ClassLoader.getSystemClassLoader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Byte byte0 = new Byte((byte) (-1));
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("IE4UC");
      Class<Character> class0 = Character.TYPE;
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLFeatureNotSupportedException0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : java.sql.SQLFeatureNotSupportedException: IE4UC
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ThreadGroup threadGroup0 = new ThreadGroup("Ljava.awt.Font");
      TypeUtils.isNumber("Ljava.awt.Point");
      Class<Byte> class0 = Byte.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) concurrentHashMap0, false);
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      TypeUtils.clearClassMapping();
  }
}
