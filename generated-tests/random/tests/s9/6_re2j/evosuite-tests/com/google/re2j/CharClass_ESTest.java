/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 17:42:14 GMT 2019
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.CharClass;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharClass_ESTest extends CharClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = 66640;
      // Undeclared exception!
      charClass0.appendFoldedRange(7088, 66640);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 2241;
      intArray0[1] = 66639;
      intArray0[2] = 1;
      intArray0[3] = (-2020);
      intArray0[4] = (-8066572);
      intArray0[5] = (-3267);
      intArray0[6] = 197;
      intArray0[7] = 1128;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {2241, 66639, 1, (-2020), (-8066572), (-3267), 197, 1128}, intArray0);
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[6][9];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      int[] intArray2 = new int[5];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 66639;
      intArray2[1] = 2241;
      intArray2[2] = 1128;
      intArray2[3] = (-8066572);
      intArray2[4] = (-2128);
      intArray1[2] = intArray2;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      CharClass charClass1 = charClass0.appendTableWithSign(intArray1, 656);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass1, charClass0);
      assertSame(charClass0, charClass1);
      assertFalse(intArray0.equals((Object)intArray2));
      assertEquals(8, intArray0.length);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {2241, 66639, 1, (-2020), (-8066572), (-3267), 197, 1128}, intArray0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendNegatedClass(intArray0);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertFalse(intArray0.equals((Object)intArray2));
      assertEquals(8, intArray0.length);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {2241, 66639, 1, (-2020), (-8066572), (-3267), 197, 1128}, intArray0);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass0.appendClassWithSign(intArray0, 66639);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertFalse(intArray0.equals((Object)intArray2));
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {2241, 66639, 1, (-2020), (-8066572), (-3267), 197, 1128}, intArray0);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass1.appendNegatedTable(intArray1);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertEquals(8, intArray0.length);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {2241, 66639, 1, (-2020), (-8066572), (-3267), 197, 1128}, intArray0);
      assertNotNull(charClass4);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendRange((-6099), (-1286));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int int0 = 42537;
      int int1 = (-2147452013);
      CharClass charClass2 = charClass0.appendFoldedRange(42537, (-2147452013));
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.appendLiteral(42537, 42537);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertNotNull(charClass3);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 42537;
      intArray0[1] = 42537;
      intArray0[2] = 42537;
      intArray0[3] = 42537;
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 42537);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-2250);
      intArray0[1] = (-431);
      intArray0[2] = 1992;
      intArray0[3] = (-2577935);
      intArray0[4] = (-895);
      intArray0[5] = 93;
      intArray0[6] = 120258;
      intArray0[7] = (-2573);
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-2250), (-431), 1992, (-2577935), (-895), 93, 120258, (-2573)}, intArray0);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(32, 2796);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-2250), (-431), 1992, (-2577935), (-895), 93, 120258, (-2573)}, intArray0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-2250), (-431), 1992, (-2577935), (-2250), 93, 120258, (-2573)}, intArray0);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.appendClass(intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-2250), (-431), 1992, (-2577935), (-2250), 93, 120258, (-2573)}, intArray0);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass3.negateClass();
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-2250), (-431), 1992, (-2577935), (-2250), 93, 120258, (-2573)}, intArray0);
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass4.cleanClass();
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-2250), (-431), 1992, (-2577935), (-2250), 93, 120258, (-2573)}, intArray0);
      assertNotNull(charClass5);
      
      int[] intArray1 = charClass5.toArray();
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(8, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {(-2250), (-431), 1992, (-2577935), (-2250), 93, 120258, (-2573)}, intArray0);
      assertArrayEquals(new int[] {(-2577934), 1114111}, intArray1);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[7];
      int int0 = (-606);
      intArray0[0] = (-606);
      int int1 = 66639;
      intArray0[1] = 66639;
      int int2 = 917535;
      intArray0[2] = 917535;
      intArray0[3] = 64976;
      int int3 = (-1363);
      intArray0[4] = (-1363);
      int int4 = 2142;
      intArray0[5] = 2142;
      int int5 = 7;
      intArray0[6] = 7;
      // Undeclared exception!
      charClass0.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      String string0 = charClass1.toString();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      int[][] intArray0 = new int[7][5];
      int[] intArray1 = new int[2];
      intArray1[0] = (-931021);
      intArray1[1] = 2384;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[0];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray0[1] = intArray2;
      int[] intArray3 = new int[2];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = 2384;
      intArray3[1] = (-931021);
      intArray0[2] = intArray3;
      int[] intArray4 = new int[9];
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray2));
      
      intArray4[0] = (-931021);
      intArray4[1] = (-2);
      intArray4[2] = (-931021);
      intArray4[3] = 2384;
      intArray4[4] = 2384;
      intArray4[5] = 2384;
      intArray4[6] = 2384;
      intArray4[7] = 7;
      intArray4[8] = (-931021);
      intArray0[3] = intArray4;
      int[] intArray5 = new int[5];
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray1));
      
      intArray5[0] = (-931021);
      intArray5[1] = 2384;
      intArray5[2] = 2384;
      intArray5[3] = 662;
      intArray5[4] = (-2);
      intArray0[4] = intArray5;
      int[] intArray6 = new int[3];
      assertFalse(intArray6.equals((Object)intArray2));
      assertFalse(intArray6.equals((Object)intArray3));
      assertFalse(intArray6.equals((Object)intArray1));
      assertFalse(intArray6.equals((Object)intArray4));
      assertFalse(intArray6.equals((Object)intArray5));
      
      intArray6[0] = 3072;
      intArray6[1] = (-2);
      intArray6[2] = (-931021);
      intArray0[5] = intArray6;
      int[] intArray7 = new int[6];
      assertFalse(intArray7.equals((Object)intArray2));
      assertFalse(intArray7.equals((Object)intArray1));
      assertFalse(intArray7.equals((Object)intArray4));
      assertFalse(intArray7.equals((Object)intArray6));
      assertFalse(intArray7.equals((Object)intArray5));
      assertFalse(intArray7.equals((Object)intArray3));
      
      intArray7[0] = 662;
      intArray7[1] = 2384;
      intArray7[2] = 2384;
      intArray7[3] = (-2);
      intArray7[4] = (-2);
      intArray7[5] = 662;
      intArray0[6] = intArray7;
      // Undeclared exception!
      try { 
        charClass1.appendNegatedTable(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = 64;
      intArray0[0] = 64;
      int int1 = 7405;
      intArray0[1] = 7405;
      intArray0[2] = (-2275);
      int int2 = 1618;
      intArray0[3] = 1618;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {64, 7405, (-2275), 1618}, intArray0);
      assertNotNull(charClass0);
      
      String string0 = charClass0.toString();
      assertEquals(4, intArray0.length);
      assertEquals("[0x40-0x1ced 0xfffff71d-0x652]", string0);
      assertArrayEquals(new int[] {64, 7405, (-2275), 1618}, intArray0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 1160);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(1114111, 1114111);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      int[][] intArray0 = new int[5][8];
      int[] intArray1 = new int[6];
      intArray1[0] = 1114111;
      intArray1[1] = 1114111;
      intArray1[2] = 1114111;
      intArray1[3] = 1114111;
      intArray1[4] = 1114111;
      intArray1[5] = 1114111;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[3];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 1114111;
      intArray2[1] = 1114111;
      intArray2[2] = 1114111;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[9];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = 1114111;
      intArray3[1] = 1114111;
      intArray3[2] = 1114111;
      intArray3[3] = 1114111;
      intArray3[4] = 1114111;
      intArray3[5] = (-965);
      intArray3[6] = 1114111;
      intArray3[7] = 1114111;
      intArray3[8] = 1114111;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[6];
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray3));
      
      intArray4[0] = (-965);
      intArray4[1] = 1114111;
      intArray4[2] = 1114111;
      intArray4[3] = (-965);
      intArray4[4] = (-965);
      intArray4[5] = (-941452);
      intArray0[3] = intArray4;
      int[] intArray5 = new int[7];
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray3));
      
      intArray5[0] = (-941452);
      intArray5[1] = 1114111;
      intArray5[2] = (-941452);
      intArray5[3] = 2238;
      intArray5[4] = 1114111;
      intArray5[5] = 1114111;
      intArray5[6] = (-965);
      intArray0[4] = intArray5;
      CharClass charClass3 = charClass2.appendNegatedTable(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertEquals(5, intArray0.length);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass3.appendNegatedClass(intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray1, intArray4);
      assertNotSame(intArray1, intArray5);
      assertNotSame(intArray1, intArray2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertFalse(intArray1.equals((Object)intArray3));
      assertFalse(intArray1.equals((Object)intArray4));
      assertFalse(intArray1.equals((Object)intArray5));
      assertFalse(intArray1.equals((Object)intArray2));
      assertEquals(5, intArray0.length);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {1114111, 1114111, 1114111, 1114111, 1114111, 1114111}, intArray1);
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass4.appendTable(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray1, intArray4);
      assertNotSame(intArray1, intArray5);
      assertNotSame(intArray1, intArray2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass5);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertFalse(intArray1.equals((Object)intArray3));
      assertFalse(intArray1.equals((Object)intArray4));
      assertFalse(intArray1.equals((Object)intArray5));
      assertFalse(intArray1.equals((Object)intArray2));
      assertEquals(5, intArray0.length);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {1114111, 1114111, 1114111, 1114111, 1114111, 1114111}, intArray1);
      assertNotNull(charClass5);
      
      CharClass charClass6 = charClass5.negateClass();
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray1, intArray4);
      assertNotSame(intArray1, intArray5);
      assertNotSame(intArray1, intArray2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass6);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass6);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertFalse(intArray1.equals((Object)intArray3));
      assertFalse(intArray1.equals((Object)intArray4));
      assertFalse(intArray1.equals((Object)intArray5));
      assertFalse(intArray1.equals((Object)intArray2));
      assertEquals(5, intArray0.length);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {1114111, 1114111, 1114111, 1114111, 1114111, 1114111}, intArray1);
      assertNotNull(charClass6);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(66640, 66640);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 66640;
      intArray0[1] = 66640;
      CharClass charClass2 = charClass1.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {66640, 66640}, intArray0);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {66640, 66640}, intArray0);
      assertNotNull(charClass3);
      
      int[][] intArray1 = new int[6][3];
      int[] intArray2 = new int[7];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 66640;
      intArray2[1] = 1750;
      intArray2[2] = 66640;
      intArray2[3] = 66640;
      intArray2[4] = 66640;
      intArray2[5] = 66640;
      intArray2[6] = 66640;
      intArray1[0] = intArray2;
      intArray1[1] = intArray0;
      int[] intArray3 = new int[0];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      
      intArray1[2] = intArray3;
      intArray1[3] = intArray0;
      int[] intArray4 = new int[3];
      assertFalse(intArray4.equals((Object)intArray0));
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray2));
      
      intArray4[0] = 1750;
      intArray4[1] = 1750;
      intArray4[2] = (-3343);
      intArray1[4] = intArray4;
      intArray1[5] = intArray0;
      // Undeclared exception!
      try { 
        charClass3.appendTableWithSign(intArray1, 66640);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[1][3];
      int[] intArray1 = new int[5];
      intArray1[0] = 1792;
      intArray1[1] = 0;
      intArray1[2] = (-1651);
      intArray1[3] = (-531);
      intArray1[4] = 0;
      intArray0[0] = intArray1;
      CharClass charClass1 = charClass0.appendTable(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(1, intArray0.length);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendFoldedRange(1792, (-531));
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(1, intArray0.length);
      assertNotNull(charClass2);
      
      int[] intArray2 = new int[7];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 0;
      intArray2[1] = (-531);
      intArray2[2] = 1792;
      intArray2[3] = (-531);
      intArray2[4] = 0;
      intArray2[5] = (-1651);
      intArray2[6] = (-1651);
      // Undeclared exception!
      try { 
        charClass2.appendFoldedClass(intArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 9280;
      intArray0[1] = 2017;
      intArray0[2] = 0;
      intArray0[3] = 1768;
      intArray0[4] = 74864;
      intArray0[5] = 745;
      int int0 = 0;
      intArray0[6] = 0;
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 1768);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1232;
      intArray0[1] = 3563;
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, 1302);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {1232, 3563}, intArray0);
      assertNotNull(charClass1);
      
      int[] intArray1 = charClass1.toArray();
      assertSame(charClass0, charClass1);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass1, charClass0);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {1232, 3563}, intArray0);
      assertArrayEquals(new int[] {1232, 3563}, intArray1);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[5];
      intArray0[0] = (-4309);
      int int0 = 2207;
      intArray0[1] = 2207;
      intArray0[2] = 1353;
      int int1 = (-44);
      intArray0[3] = (-44);
      int int2 = 64;
      intArray0[4] = 64;
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-531);
      int int0 = (-236);
      intArray0[1] = (-236);
      intArray0[2] = (-2163);
      CharClass charClass0 = new CharClass(intArray0);
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign(intArray0, (-112));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendLiteral(91, 2546);
      int[] intArray0 = new int[8];
      intArray0[0] = 2546;
      intArray0[1] = 1751;
      intArray0[2] = 2546;
      intArray0[3] = 91;
      intArray0[4] = 91;
      intArray0[5] = 91;
      intArray0[6] = 91;
      intArray0[7] = 91;
      CharClass charClass2 = charClass1.appendClassWithSign(intArray0, 2546);
      int[][] intArray1 = new int[6][7];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      CharClass charClass3 = charClass2.appendTableWithSign(intArray1, (-4020));
      CharClass charClass4 = charClass3.appendTableWithSign(intArray1, 2546);
      assertSame(charClass2, charClass4);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = null;
      int int0 = 1304;
      // Undeclared exception!
      try { 
        CharClass.charClassToString((int[]) null, 1304);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[2][2];
      int[] intArray1 = new int[8];
      intArray1[0] = 753;
      charClass0.appendFoldedClass(intArray1);
      intArray1[1] = 2;
      intArray1[2] = 65;
      intArray1[3] = 2041;
      intArray1[4] = (-2479);
      intArray1[5] = (-2655);
      intArray1[6] = 0;
      intArray1[7] = (-4875);
      intArray0[0] = intArray1;
      int[] intArray2 = new int[4];
      intArray2[0] = 2;
      intArray2[1] = (-2479);
      intArray2[2] = 0;
      intArray2[3] = (-4875);
      intArray0[1] = intArray2;
      CharClass charClass1 = charClass0.appendTableWithSign(intArray0, (-2479));
      CharClass charClass2 = charClass1.appendFoldedClass(intArray2);
      CharClass charClass3 = charClass2.appendRange(66640, 2041);
      CharClass charClass4 = charClass3.appendClassWithSign(intArray1, 272);
      CharClass charClass5 = charClass4.cleanClass();
      assertSame(charClass5, charClass1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = 104;
      intArray0[0] = 104;
      intArray0[1] = 1043;
      intArray0[2] = (-2340);
      intArray0[3] = (-456);
      int int1 = (-566);
      intArray0[4] = (-566);
      intArray0[5] = 455;
      intArray0[6] = (-515);
      intArray0[7] = 43011;
      CharClass charClass0 = new CharClass(intArray0);
      charClass0.cleanClass();
      int[][] intArray1 = new int[9][4];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      intArray1[8] = intArray0;
      // Undeclared exception!
      charClass0.appendNegatedTable(intArray1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 748;
      intArray0[1] = (-27688633);
      intArray0[2] = 834;
      int int0 = 1305;
      intArray0[3] = 1305;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.negateClass();
      CharClass charClass2 = charClass1.cleanClass();
      CharClass charClass3 = charClass2.appendFoldedRange(748, 833);
      int[][] intArray1 = new int[4][4];
      intArray1[0] = intArray0;
      int int1 = (-982);
      charClass0.appendClassWithSign(intArray0, (-982));
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      CharClass charClass4 = charClass3.appendNegatedTable(intArray1);
      // Undeclared exception!
      charClass4.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendFoldedRange((-737), (-737));
      CharClass charClass2 = charClass1.negateClass();
      CharClass charClass3 = charClass2.appendRange((-737), 3831);
      int[] intArray0 = new int[4];
      intArray0[0] = (-737);
      intArray0[1] = (-737);
      intArray0[2] = (-737);
      intArray0[3] = 3831;
      CharClass charClass4 = charClass3.appendClassWithSign(intArray0, 489);
      int[][] intArray1 = new int[7][3];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      // Undeclared exception!
      charClass4.appendNegatedTable(intArray1);
  }
}
