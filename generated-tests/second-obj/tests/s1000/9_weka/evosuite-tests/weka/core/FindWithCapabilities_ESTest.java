/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 15:12:56 GMT 2018
 */

package weka.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Locale;
import java.util.Properties;
import java.util.Vector;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.Capabilities;
import weka.core.CapabilitiesHandler;
import weka.core.ClassCache;
import weka.core.ClassDiscovery;
import weka.core.EuclideanDistance;
import weka.core.FindWithCapabilities;
import weka.core.GlobalInfoJavadoc;
import weka.core.Instances;
import weka.core.OptionHandlerJavadoc;
import weka.core.SingleIndex;
import weka.core.SparseInstance;
import weka.core.TestInstances;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FindWithCapabilities_ESTest extends FindWithCapabilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_GenericPropertiesCreator = true;
      findWithCapabilities0.find();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "jXxt`<B[";
      stringArray0[1] = "";
      stringArray0[2] = "\tMust handle missing attribute values.";
      stringArray0[3] = "";
      stringArray0[4] = "NO_CLASS";
      stringArray0[5] = "P/#@[9GX[f";
      stringArray0[6] = "-binary-atts";
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.handles(capabilities_Capability0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      capabilities0.enable(capabilities_Capability0);
      Capabilities capabilities1 = capabilities0.getAttributeCapabilities();
      findWithCapabilities0.setCapabilities(capabilities0);
      capabilities0.enableAllClasses();
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getHandler();
      capabilities1.disable(capabilities_Capability0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate("$*-eg9&zZ7T`");
      Instances instances0 = testInstances0.getData();
      Capabilities capabilities0 = Capabilities.forInstances(instances0, true);
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.getOptions();
      capabilities0.setOwner(findWithCapabilities0);
      try { 
        findWithCapabilities0.setOptions(testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("a");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getMatches();
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_CLASS;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.disableNot(capabilities_Capability1);
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      capabilities0.getFailReason();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for index
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enable(capabilities_Capability0);
      TestInstances testInstances0 = new TestInstances();
      FindWithCapabilities.main(testInstances0.DEFAULT_WORDS);
      findWithCapabilities0.getMatches();
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      capabilities0.getFailReason();
      findWithCapabilities0.setCapabilities(capabilities0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      findWithCapabilities0.setClassIndex("-1");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Handler = null;
      String string0 = File.pathSeparator;
      findWithCapabilities0.getNotCapabilities();
      String string1 = GlobalInfoJavadoc.GLOBALINFO_ENDTAG;
      findWithCapabilities0.setFilename(":");
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getFilename();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      assertEquals(":", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-unary-atts";
      stringArray0[1] = "numeric-atts";
      stringArray0[2] = "";
      stringArray0[3] = "problem with the following packages after upgrading them:";
      stringArray0[4] = "";
      stringArray0[5] = "2#gk<w9~iw\"j]";
      stringArray0[6] = "2#gk<w9~iw\"j]";
      stringArray0[7] = "Vj2D4cX>e/";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getMatches();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Locale.getISOLanguages();
      // Undeclared exception!
      try { 
        findWithCapabilities1.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      String[] stringArray0 = new String[7];
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte)0;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      stringArray0[0] = "KBC$j$";
      stringArray0[1] = "KBC$j$";
      stringArray0[2] = "a";
      stringArray0[3] = "#/PD&6Qu6cU";
      stringArray0[4] = "-binary-class";
      stringArray0[5] = "p \"/>Zo=o^.A$N'aQ4";
      stringArray0[6] = "-dir <dir>";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      boolean boolean1 = findWithCapabilities0.isEnabled(capabilities_Capability0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.m_Handler = (CapabilitiesHandler) findWithCapabilities1;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "QW7=[*}b(;q,)S");
      FileSystemHandling.shouldAllThrowIOExceptions();
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities0.m_Filename = "Can't delete class attribute";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      findWithCapabilities1.setFilename("not-binary-atts");
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities1.setCapabilities(capabilities0);
      capabilities0.enableAllAttributes();
      findWithCapabilities0.disable(capabilities_Capability1);
      capabilities0.createMessage((String) null);
      findWithCapabilities0.m_GenericPropertiesCreator = true;
      findWithCapabilities1.enableNot(capabilities_Capability1);
      capabilities0.disableAllAttributeDependencies();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability2);
      findWithCapabilities1.setFilename(" (");
      findWithCapabilities1.getCapabilities();
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getMisses();
      findWithCapabilities1.getMatches();
      findWithCapabilities0.getNotCapabilities();
      assertEquals("Can't delete class attribute", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = new Vector<String>();
      findWithCapabilities0.m_Misses = vector0;
      findWithCapabilities0.getRevision();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      vector0.add("8034");
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.find();
      findWithCapabilities0.setFilename("8034");
      findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities1.m_Capabilities;
      capabilities0.getFailReason();
      findWithCapabilities0.setCapabilities(capabilities0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[6];
      findWithCapabilities0.getHandler();
      findWithCapabilities0.m_Handler = null;
      stringArray0[0] = "Normalized again (doubles): ";
      stringArray0[1] = "lT_&4&yhW\"r65!v?X";
      stringArray0[2] = ">";
      stringArray0[3] = "*@#2*><#t-\"R`";
      findWithCapabilities0.listOptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "/##N6A;O?(1 Uz");
      stringArray0[4] = "-superclass";
      stringArray0[5] = "Nh~1&.] (R";
      findWithCapabilities0.setOptions(stringArray0);
      findWithCapabilities0.getFilename();
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.getHandler();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.find();
      findWithCapabilities0.setClassIndex("TV<0I!f");
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.listOptions();
      findWithCapabilities0.m_Superclass = "ZeroR: No model built yet.";
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.setFilename("8034");
      findWithCapabilities0.getFilename();
      findWithCapabilities0.disableNot(capabilities_Capability0);
      assertEquals("8034", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_GenericPropertiesCreator = true;
      findWithCapabilities0.getMatches();
      findWithCapabilities0.m_Superclass = "Vj2D~;/4cX>e/";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      capabilities0.disableAll();
      Properties properties0 = new Properties();
      EuclideanDistance euclideanDistance0 = new EuclideanDistance();
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 2;
      intArray0[3] = 2;
      intArray0[4] = 0;
      intArray0[5] = 3344;
      intArray0[6] = 2;
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance(2, (double[]) null, intArray0, (-2098751418));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMisses();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Relation: ";
      findWithCapabilities0.setClassIndex("Relation: ");
      SingleIndex singleIndex0 = new SingleIndex("-not-numeric-class");
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      stringArray0[1] = "tqCo";
      stringArray0[2] = "[DefaultPackageManager] Can't remove ";
      stringArray0[3] = "-not-nominal-atts";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      capabilities0.disableAllAttributeDependencies();
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      Vector<String> vector0 = findWithCapabilities0.find();
      capabilities0.m_MissingValuesTest = false;
      Function<String, Vector<String>> function0 = (Function<String, Vector<String>>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(function0).apply(anyString());
      hashtable0.computeIfAbsent("weka/core/Capabilities.props", function0);
      ClassDiscovery.m_Cache = hashtable0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Vector<String> vector0 = new Vector<String>();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "jXxt`<B[";
      stringArray0[1] = "P/#@[9GX[f";
      stringArray0[2] = "jXxt`<B[";
      stringArray0[3] = "-binary-atts";
      stringArray0[4] = "";
      stringArray0[5] = "jXxt`<B[";
      stringArray0[6] = "-not-unary-atts";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      findWithCapabilities0.disableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      ClassCache classCache0 = null;
      try {
        classCache0 = new ClassCache();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.instrumentation.InstrumentingClassLoader cannot be cast to java.net.URLClassLoader
         //
         verifyException("weka.core.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.m_Handler = (CapabilitiesHandler) findWithCapabilities1;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "QW7=[*}b(;q,)S");
      FileSystemHandling.shouldAllThrowIOExceptions();
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities0.m_Filename = "Can't delete class attribute";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      findWithCapabilities0.setClassIndex("not-binary-atts");
      findWithCapabilities1.setFilename("not-binary-atts");
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities1.setCapabilities(capabilities0);
      capabilities0.enableAllAttributes();
      findWithCapabilities0.disable(capabilities_Capability1);
      capabilities0.createMessage((String) null);
      findWithCapabilities0.m_GenericPropertiesCreator = true;
      findWithCapabilities1.enableNot(capabilities_Capability1);
      capabilities0.disableAllAttributeDependencies();
      findWithCapabilities1.setNotCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability2);
      findWithCapabilities1.setFilename(" (");
      findWithCapabilities1.getCapabilities();
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getMisses();
      findWithCapabilities1.getMatches();
      findWithCapabilities0.getNotCapabilities();
      assertEquals("Can't delete class attribute", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.disable(capabilities_Capability0);
      String[] stringArray0 = Locale.getISOCountries();
      Vector<String> vector0 = findWithCapabilities1.find();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getMisses();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.m_Packages = vector0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      findWithCapabilities1.m_Handler = (CapabilitiesHandler) findWithCapabilities0;
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability1);
      findWithCapabilities0.getMatches();
      String[] stringArray1 = findWithCapabilities1.getOptions();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability2);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.m_NotCapabilities = null;
      HashMap<String, Vector<String>> hashMap0 = new HashMap<String, Vector<String>>();
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>(hashMap0);
      ClassDiscovery.m_Cache = hashtable0;
      try { 
        findWithCapabilities1.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.m_Handler = (CapabilitiesHandler) findWithCapabilities1;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "QW7=J[*}b(;q,)S");
      FileSystemHandling.shouldAllThrowIOExceptions();
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities0.m_Filename = "Can't delete class attribute";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      findWithCapabilities1.setFilename("not-binary-atts");
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities1.setCapabilities(capabilities0);
      capabilities0.enableAllAttributes();
      findWithCapabilities0.disable(capabilities_Capability1);
      capabilities0.createMessage((String) null);
      findWithCapabilities0.m_GenericPropertiesCreator = true;
      findWithCapabilities1.enableNot(capabilities_Capability1);
      capabilities0.disableAllAttributeDependencies();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability2);
      findWithCapabilities1.setClassIndex("not-date-atts");
      findWithCapabilities1.setFilename(" (");
      Capabilities capabilities1 = findWithCapabilities1.getCapabilities();
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getMisses();
      findWithCapabilities1.getMatches();
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities1.setNotCapabilities(capabilities1);
      assertEquals(" (", findWithCapabilities1.getFilename());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.disable(capabilities_Capability0);
      String[] stringArray0 = TestInstances.DEFAULT_WORDS;
      findWithCapabilities1.find();
      FindWithCapabilities.main(stringArray0);
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.m_Packages = vector0;
      findWithCapabilities1.m_Handler = (CapabilitiesHandler) findWithCapabilities0;
      vector0.addElement("-not-string-class");
      String[] stringArray1 = new String[6];
      stringArray1[0] = "-not-string-class";
      stringArray1[1] = "7568+Ta-cceC99a";
      stringArray1[2] = "7568+Ta-cceC99a";
      stringArray1[3] = "-not-string-class";
      stringArray1[4] = "-not-string-class";
      stringArray1[5] = "-not-string-class";
      findWithCapabilities1.getMatches();
      findWithCapabilities1.getOptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      HashMap<String, Vector<String>> hashMap0 = new HashMap<String, Vector<String>>();
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>(hashMap0);
      try { 
        findWithCapabilities3.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Partitioned options: ";
      stringArray0[1] = "T<I";
      stringArray0[2] = "-c";
      stringArray0[3] = "\tThe dataset to base the capabilities on.\n\tThe other parameters can be used to override the ones\n\tdetermined from the handler.\n\tEither '-t' or '-W' can be used.";
      findWithCapabilities0.listOptions();
      stringArray0[4] = "h~mY";
      stringArray0[5] = "DATE_ATTRIBUTES";
      FindWithCapabilities.main(stringArray0);
      SingleIndex singleIndex0 = new SingleIndex("T<I");
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      stringArray0[6] = "weka.core.FindWithCapabilities: -not-numeric-class";
      stringArray0[7] = ":\"(";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Types differ: ";
      stringArray0[1] = "Types differ: ";
      stringArray0[2] = "-not-binary-class";
      stringArray0[3] = "Types differ: ";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getFilename();
      String string0 = TestInstances.DEFAULT_SEPARATORS;
      String[] stringArray1 = new String[1];
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      try { 
        findWithCapabilities0.setOptions(stringArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[0];
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      findWithCapabilities0.m_Packages = vector0;
      vector0.add("zt#TsAWB=");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities capabilities1 = capabilities0.getOtherCapabilities();
      findWithCapabilities0.m_NotCapabilities = capabilities1;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getNotCapabilities();
      vector0.add("weka/core/Capabilities.props");
      findWithCapabilities0.handles(capabilities_Capability0);
      String string0 = findWithCapabilities0.getFilename();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      findWithCapabilities0.setClassIndex("-1");
      findWithCapabilities0.getMisses();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.getClassIndex();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      assertFalse(capabilities0.hasDependencies());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "|";
      stringArray0[1] = "TZYc}m!b'\"N";
      stringArray0[2] = "-numeric-atts";
      stringArray0[3] = "DI8TFYfe.WzF;/";
      stringArray0[4] = "/N'bX";
      stringArray0[5] = "mU]T~O2=VvE UW?dk";
      stringArray0[6] = "W";
      stringArray0[7] = "~nbh0#WXh$,W? PCd]k";
      stringArray0[8] = "dIiPs&qx\"RNAxwny";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles/props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.m_GenericPropertiesCreator = false;
      findWithCapabilities0.getMatches();
      findWithCapabilities0.find();
      findWithCapabilities0.getMatches();
      Locale.getISOCountries();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities1.enableNot(capabilities_Capability2);
      findWithCapabilities0.find();
      findWithCapabilities1.getRevision();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities2.isEnabledNot(capabilities_Capability3);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      String[] stringArray1 = new String[7];
      stringArray1[0] = "Vj2D~;/4cX>e/";
      stringArray1[1] = "8034";
      stringArray1[2] = "Vj2D~;/4cX>e/";
      stringArray1[3] = "Vj2D~;/4cX>e/";
      stringArray1[4] = "Vj2D~;/4cX>e/";
      findWithCapabilities2.m_Matches = vector0;
      stringArray1[5] = "8034";
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities2.getMatches();
      findWithCapabilities1.getOptions();
      findWithCapabilities4.setHandler(findWithCapabilities3);
      assertFalse(findWithCapabilities4.equals((Object)findWithCapabilities1));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[3];
      String string0 = "A superclass has to be specified!";
      findWithCapabilities0.getOptions();
      stringArray0[0] = "A superclass has to be specified!";
      FindWithCapabilities.main(stringArray0);
      stringArray0[1] = "h!}%~wW#;";
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.disable(capabilities_Capability0);
      stringArray0[2] = "-not-missing-att-values";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      findWithCapabilities0.find();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getMisses();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability1);
      findWithCapabilities0.getMatches();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities2.disableNot(capabilities_Capability2);
      HashMap<String, Vector<String>> hashMap0 = new HashMap<String, Vector<String>>();
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>(hashMap0);
      String[] stringArray1 = new String[0];
      try { 
        findWithCapabilities0.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "General options";
      stringArray0[1] = "y*V\">(Y:=APh";
      stringArray0[2] = "Nu:4nf.2Hhvk";
      stringArray0[3] = "Relational class";
      stringArray0[4] = "-not-relational-class";
      stringArray0[5] = "&S6J+s,RmRuv=iY`gC";
      stringArray0[6] = "5.7 < 5.70001 ? ";
      stringArray0[7] = "relational-atts";
      FindWithCapabilities.main(stringArray0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-not-date-class";
      stringArray0[1] = "Implementing Minkowski distance (or similarity) function.\n\nOne object defines not one distance but the data model in which the distances between objects of that data model can be computed.\n\nAttention: For efficiency reasons the use of consistency checks (like are the data models of the two instances exactly the same), is low.\n\nFor more information, see:\n\n";
      stringArray0[2] = "\tMust handle date attributes.";
      stringArray0[3] = "$Revision: 8034 $";
      stringArray0[4] = "ZK)U7c|2B6q";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      CapabilitiesHandler capabilitiesHandler0 = testInstances0.m_Handler;
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Random.setNextRandom(0);
      System.setCurrentTimeMillis(0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.m_GenericPropertiesCreator = false;
      findWithCapabilities0.m_Filename = "Yw<PMG/(A~XLS";
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_CLASS_VALUES;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities0.getMatches();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "weka/core/Capabilities.props";
      stringArray0[1] = "weka/core/Capabilities.props";
      stringArray0[2] = "Yw<PMG/(A~XLS";
      stringArray0[3] = "Yw<PMG/(A~XLS";
      stringArray0[4] = "weka/core/Capabilities.props";
      stringArray0[5] = "Yw<PMG/(A~XLS";
      stringArray0[6] = "weka/core/Capabilities.props";
      stringArray0[7] = "weka/core/Capabilities.props";
      stringArray0[8] = "-not-relational-atts";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getRevision();
      findWithCapabilities0.getHandler();
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.listOptions();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.find();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka/Capabilities.props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getMisses();
      FindWithCapabilities.main(stringArray0);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability2);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities2.enableNot(capabilities_Capability3);
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray1);
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      findWithCapabilities3.getRevision();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      boolean boolean1 = findWithCapabilities3.isEnabled(capabilities_Capability1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities1.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities1.getOptions();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities2.getOptions();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities3.disableNot(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities1.enable(capabilities_Capability2);
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities4.isEnabled(capabilities_Capability3);
      findWithCapabilities4.find();
      Random.setNextRandom(99);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.disable(capabilities_Capability0);
      findWithCapabilities0.listOptions();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.find();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka/Capabilities.props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      findWithCapabilities0.getMisses();
      findWithCapabilities1.m_Handler = (CapabilitiesHandler) findWithCapabilities0;
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities1.getOptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      HashMap<String, Vector<String>> hashMap0 = new HashMap<String, Vector<String>>();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities1.getRevision();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities4.enable(capabilities_Capability2);
      FileSystemHandling.createFolder(evoSuiteFile0);
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities7 = new FindWithCapabilities();
      findWithCapabilities4.getOptions();
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities3.disableNot(capabilities_Capability3);
      Capabilities capabilities0 = findWithCapabilities6.getCapabilities();
      assertEquals(1, capabilities0.getMinimumNumberInstances());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Vector<String> vector0 = findWithCapabilities0.find();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka/Capabilities.props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      String[] stringArray1 = findWithCapabilities1.getOptions();
      findWithCapabilities1.getMisses();
      findWithCapabilities1.m_Handler = (CapabilitiesHandler) findWithCapabilities0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities1.enable(capabilities_Capability0);
      FindWithCapabilities.main(stringArray0);
      String[] stringArray2 = findWithCapabilities1.getOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      HashMap<String, Vector<String>> hashMap0 = new HashMap<String, Vector<String>>();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray2);
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/users/apanichella/wekafiles/props/Capabilities.props");
      FileSystemHandling.createFolder(evoSuiteFile1);
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      findWithCapabilities5.enableNot(capabilities_Capability1);
      findWithCapabilities5.m_Matches = vector0;
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities1.disableNot(capabilities_Capability2);
      findWithCapabilities5.isEnabled(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      findWithCapabilities0.getNotCapabilities();
      FindWithCapabilities findWithCapabilities7 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities8 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities1.isEnabled(capabilities_Capability3);
      String[] stringArray3 = new String[1];
      stringArray3[0] = "weka/core/Capabilities.props";
      FindWithCapabilities.main(stringArray3);
      FindWithCapabilities.main(stringArray3);
      assertFalse(stringArray3.equals((Object)stringArray1));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.m_GenericPropertiesCreator = false;
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Vector<String> vector0 = findWithCapabilities0.m_Misses;
      findWithCapabilities0.find();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getMatches();
      Locale.getISOCountries();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.disableNot(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability2);
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      try { 
        findWithCapabilities2.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getHandler();
      SingleIndex singleIndex0 = new SingleIndex();
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getMisses();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities2.enableNot(capabilities_Capability0);
      FindWithCapabilities.main((String[]) null);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      System.setCurrentTimeMillis((-1117L));
      String string0 = File.pathSeparator;
      String string1 = OptionHandlerJavadoc.OPTIONS_STARTTAG;
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      findWithCapabilities5.getNotCapabilities();
      boolean boolean1 = findWithCapabilities1.isEnabled(capabilities_Capability1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = Locale.getISOCountries();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities1.disable(capabilities_Capability0);
      findWithCapabilities1.listOptions();
      findWithCapabilities0.getOptions();
      findWithCapabilities0.find();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka/Capabilities.props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Locale.getISOLanguages();
      Vector<String> vector0 = findWithCapabilities1.getMisses();
      assertTrue(vector0.isEmpty());
      
      String[] stringArray1 = new String[8];
      stringArray1[0] = "-string-class";
      stringArray1[1] = "W`SO<lbI1";
      stringArray1[2] = "-string-class";
      stringArray1[3] = "N3KlLsxv4!$kJQZ.ri";
      stringArray1[4] = "-string-class";
      stringArray1[5] = "N3KlLsxv4!$kJQZ.ri";
      stringArray1[6] = "N3KlLsxv4!$kJQZ.ri";
      stringArray1[7] = "[.r<J+-d2rQoZ#G8]K";
      FindWithCapabilities.main(stringArray1);
      FindWithCapabilities.main(stringArray0);
      String[] stringArray2 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HashMap<String, Vector<String>> hashMap0 = new HashMap<String, Vector<String>>();
      FindWithCapabilities.main(stringArray2);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      String string0 = findWithCapabilities5.getRevision();
      assertEquals("8034", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      findWithCapabilities0.getOptions();
      HashMap<String, Vector<String>> hashMap0 = new HashMap<String, Vector<String>>();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      findWithCapabilities0.getRevision();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.setClassIndex("]");
      // Undeclared exception!
      try { 
        findWithCapabilities4.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      HashMap<String, Vector<String>> hashMap0 = new HashMap<String, Vector<String>>();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities4.m_Capabilities;
      try { 
        Capabilities.forInstances((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.disable(capabilities_Capability0);
      Vector<String> vector0 = findWithCapabilities1.find();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.setFilename("qg(WMQ");
      findWithCapabilities2.m_Packages = vector0;
      findWithCapabilities1.m_Handler = (CapabilitiesHandler) findWithCapabilities0;
      findWithCapabilities0.getMatches();
      String[] stringArray0 = findWithCapabilities1.getOptions();
      FindWithCapabilities.main(stringArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.getOptions();
      HashMap<String, Vector<String>> hashMap0 = new HashMap<String, Vector<String>>();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      findWithCapabilities2.getRevision();
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_CLASS;
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.enable(capabilities_Capability2);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FindWithCapabilities findWithCapabilities7 = new FindWithCapabilities();
      SingleIndex singleIndex0 = findWithCapabilities2.m_ClassIndex;
      findWithCapabilities1.getOptions();
      FindWithCapabilities findWithCapabilities8 = new FindWithCapabilities();
      try { 
        findWithCapabilities2.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-myr";
      stringArray0[1] = "V)(?rVp;B`L;5JI&";
      stringArray0[2] = "\tMust handle unary attributes.";
      stringArray0[3] = "Nu:4nf.2Hhvk";
      stringArray0[4] = "-missing-class-values";
      stringArray0[5] = "<G!@BhM/6%k";
      stringArray0[6] = "y*V\">(Y:=APh";
      stringArray0[7] = "y*V\">(Y:=APh";
      stringArray0[8] = ".*.";
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      boolean boolean0 = findWithCapabilities0.isEnabled(capabilities_Capability0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.find();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka/Capabilities.props");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      String[] stringArray1 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "relational-class");
      findWithCapabilities2.getMisses();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities1.enableNot(capabilities_Capability2);
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray1);
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities3.enableNot(capabilities_Capability3);
      findWithCapabilities5.getRevision();
      Capabilities.Capability capabilities_Capability4 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      boolean boolean1 = findWithCapabilities0.isEnabledNot(capabilities_Capability4);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = TestInstances.DEFAULT_WORDS;
      findWithCapabilities0.getMatches();
      String[] stringArray1 = findWithCapabilities0.getOptions();
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      ClassDiscovery.m_Cache = hashtable0;
      findWithCapabilities0.setFilename("Get position of option -o: ");
      Vector<String> vector0 = findWithCapabilities0.find();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getMisses();
      FindWithCapabilities.main(stringArray1);
      String[] stringArray2 = findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_ATTRIBUTES;
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability2);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities.main(stringArray2);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities1.enableNot(capabilities_Capability3);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      SingleIndex singleIndex0 = new SingleIndex("I<43sH~8n9Av%");
      findWithCapabilities3.m_Packages = vector0;
      FindWithCapabilities.main(stringArray2);
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities3.enableNot(capabilities_Capability2);
      findWithCapabilities4.find();
      findWithCapabilities2.getRevision();
      findWithCapabilities4.isEnabledNot(capabilities_Capability1);
      Capabilities capabilities0 = new Capabilities(findWithCapabilities4);
      findWithCapabilities4.setNotCapabilities(capabilities0);
      assertFalse(capabilities0.hasDependencies());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      findWithCapabilities0.getMatches();
      Vector<String> vector0 = findWithCapabilities0.m_Matches;
      findWithCapabilities0.m_Superclass = "-relational-class";
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      findWithCapabilities0.getOptions();
      String[] stringArray1 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray1);
      findWithCapabilities2.getOptions();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities1.getMisses();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities1.enableNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      findWithCapabilities2.getOptions();
      FindWithCapabilities findWithCapabilities7 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities8 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities9 = new FindWithCapabilities();
      findWithCapabilities9.getNotCapabilities();
      findWithCapabilities6.setClassIndex("I|sZ");
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka/Capabilities.props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getMisses();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_ATTRIBUTES;
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.enableNot(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities1.disableNot(capabilities_Capability2);
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      Capabilities.Capability capabilities_Capability4 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities3.enable(capabilities_Capability4);
      findWithCapabilities3.isEnabled(capabilities_Capability3);
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities5.getNotCapabilities();
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities7 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability5 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities5.disableNot(capabilities_Capability5);
      Capabilities.Capability capabilities_Capability6 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities2.isEnabled(capabilities_Capability6);
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities3.getOptions();
      boolean boolean0 = capabilities0.m_MinimumNumberInstancesTest;
      assertTrue(boolean0 == boolean1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Vector<String> vector0 = findWithCapabilities0.find();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka/Capabilities.props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities0.getOptions();
      String[] stringArray1 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities1.disableNot(capabilities_Capability2);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "relational-class");
      findWithCapabilities2.getMisses();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      FileSystemHandling.createFolder(evoSuiteFile0);
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability3);
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities1.enableNot(capabilities_Capability0);
      findWithCapabilities3.getRevision();
      Capabilities.Capability capabilities_Capability4 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities3.isEnabledNot(capabilities_Capability4);
      findWithCapabilities0.setClassIndex("Refreshing GOE props...");
      Vector<String> vector1 = findWithCapabilities0.getMatches();
      assertEquals("[]", vector1.toString());
      assertSame(vector1, vector0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "General options";
      stringArray0[1] = "y*V\">(Y:=APh";
      stringArray0[2] = "General options";
      stringArray0[3] = "Relational class";
      stringArray0[4] = "-not-relational-class";
      stringArray0[5] = "-not-relational-class";
      stringArray0[6] = "5.7 < 5.70001 ? ";
      stringArray0[7] = "y*V\">(Y:=APh";
      FindWithCapabilities.main(stringArray0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.m_GenericPropertiesCreator = false;
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getMatches();
      findWithCapabilities0.find();
      findWithCapabilities0.m_Superclass = "Vj2D~;/4cX>e/";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getMatches();
      Locale.getISOCountries();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      findWithCapabilities0.disableNot(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities2.disableNot(capabilities_Capability2);
      capabilities0.getClassCapabilities();
      Capabilities capabilities1 = findWithCapabilities1.m_Capabilities;
      TestInstances testInstances0 = new TestInstances();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles/props/Capabilities.props");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      HashMap<String, Vector<String>> hashMap0 = new HashMap<String, Vector<String>>();
      FindWithCapabilities.main(stringArray1);
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities1.getRevision();
      Capabilities capabilities2 = findWithCapabilities1.getNotCapabilities();
      assertFalse(capabilities2.equals((Object)capabilities1));
  }
}
