/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 16:06:05 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DoubleKeyMap<String, String, String> doubleKeyMap0 = new DoubleKeyMap<String, String, String>();
      String string0 = doubleKeyMap0.put("us.codecraft.webmagic.utils.DoubleKeyMap", (String) null, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Object, HashMap<Integer, Integer>> doubleKeyMap0 = new DoubleKeyMap<String, Object, HashMap<Integer, Integer>>(class0);
      Map<String, Map<String, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<String, Object, Object> doubleKeyMap1 = new DoubleKeyMap<String, Object, Object>(class0);
      DoubleKeyMap<HashMap<String, Object>, Object, String> doubleKeyMap2 = new DoubleKeyMap<HashMap<String, Object>, Object, String>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>(map0);
      String string0 = doubleKeyMap2.put(hashMap0, (Object) doubleKeyMap1, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<HashMap<Object, Object>, Object>, Object, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Map<HashMap<Object, Object>, Object>, Object, Object>((Map<Map<HashMap<Object, Object>, Object>, Map<Object, Object>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<Object, Map<Object, HashMap<String, Object>>> hashMap0 = new HashMap<Object, Map<Object, HashMap<String, Object>>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Object, HashMap<String, Object>> doubleKeyMap0 = new DoubleKeyMap<Object, Object, HashMap<String, Object>>(hashMap0, class0);
      Map<Object, HashMap<String, Object>> map0 = doubleKeyMap0.get((Object) hashMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleKeyMap<Map<HashMap<Object, Object>, Object>, String, Object> doubleKeyMap0 = new DoubleKeyMap<Map<HashMap<Object, Object>, Object>, String, Object>();
      HashMap<HashMap<Object, Object>, Object> hashMap0 = new HashMap<HashMap<Object, Object>, Object>();
      doubleKeyMap0.put((Map<HashMap<Object, Object>, Object>) hashMap0, "", (Object) "");
      Object object0 = doubleKeyMap0.remove((Map<HashMap<Object, Object>, Object>) hashMap0, (String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, Map<Object, Integer>> hashMap0 = new HashMap<String, Map<Object, Integer>>();
      DoubleKeyMap<String, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Object, Integer>(hashMap0);
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      hashMap0.put("", hashMap1);
      Integer integer0 = new Integer(0);
      Integer integer1 = doubleKeyMap0.put("", (Object) "", integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Object, HashMap<Integer, Integer>> doubleKeyMap0 = new DoubleKeyMap<String, Object, HashMap<Integer, Integer>>(class0);
      DoubleKeyMap<String, Object, Object> doubleKeyMap1 = new DoubleKeyMap<String, Object, Object>(class0);
      Object object0 = doubleKeyMap1.get("", (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<Object, Object, HashMap<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<Object, Object, HashMap<Object, Object>>();
      HashMap<Object, Object> hashMap0 = doubleKeyMap0.remove((Object) null, (Object) "");
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Object, Map<HashMap<Object, Object>, Object>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, Object, Map<HashMap<Object, Object>, Object>>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Object, Map<Object, HashMap<Object, Object>>> hashMap0 = new HashMap<Object, Map<Object, HashMap<Object, Object>>>();
      DoubleKeyMap<Object, Object, HashMap<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<Object, Object, HashMap<Object, Object>>();
      Map<Object, HashMap<Object, Object>> map0 = doubleKeyMap0.remove((Object) hashMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<String, Map<String, Integer>> hashMap0 = new HashMap<String, Map<String, Integer>>();
      DoubleKeyMap<String, String, Integer> doubleKeyMap0 = new DoubleKeyMap<String, String, Integer>(hashMap0);
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      hashMap0.put("", hashMap1);
      doubleKeyMap0.remove("", "@fkN t[%Z/L4e(&fv&H");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleKeyMap<Integer, Map<Object, String>, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Map<Object, String>, Object>();
      Integer integer0 = new Integer(1477);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      doubleKeyMap0.put(integer0, (Map<Object, String>) hashMap0, (Object) integer0);
      Object object0 = doubleKeyMap0.get(integer0, (Map<Object, String>) hashMap0);
      assertEquals(1477, object0);
  }
}
