/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 04:02:35 GMT 2018
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("7");
      Token token0 = xPathLexer0.or();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("7?c`$qAt.E!ZTY#~=");
      xPathLexer0.nextToken();
      xPathLexer0.getXPath();
      Token token0 = xPathLexer0.getPreviousToken();
      assertEquals(30, token0.getTokenType());
      assertEquals("7", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.mod();
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8.,(+>B$ixf");
      xPathLexer0.consume();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      assertFalse(xPathLexer2.equals((Object)xPathLexer0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("HwHg(S#XcslEV%S");
      Token token0 = xPathLexer0.literal();
      assertNotNull(token0);
      assertEquals(27, token0.getTokenType());
      assertEquals("w", token0.getTokenText());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals("g", token1.getTokenText());
      assertEquals(2, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("c?");
      Token token0 = xPathLexer0.nextToken();
      token0.toString();
      xPathLexer0.consume();
      assertEquals("c?", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Q;]S8;yj{w9.WS(>@]");
      xPathLexer0.plus();
      xPathLexer0.nextToken();
      xPathLexer0.relationalOperator();
      xPathLexer0.setXPath("Q;]S8;yj{w9.WS(>@]");
      String string0 = "";
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8.,(+>B$ixf");
      Token token0 = xPathLexer0.equals();
      assertEquals("8", token0.getTokenText());
      assertEquals(21, token0.getTokenType());
      
      xPathLexer0.consume();
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      assertEquals(",", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(1, token2.getTokenType());
      assertEquals("(", token2.getTokenText());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      String string0 = token3.toString();
      assertEquals("[ (15) ()", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("=Z]8-Y?4");
      XPathLexer xPathLexer1 = new XPathLexer("=Z]8-Y?4");
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.leftBracket();
      Token token0 = xPathLexer0.relationalOperator();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("X=2o");
      Token token0 = xPathLexer0.identifier();
      Token token1 = xPathLexer0.colon();
      assertEquals("=", token1.getTokenText());
      assertEquals(18, token1.getTokenType());
      
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (15) (X)", string0);
      
      xPathLexer0.setPreviousToken(token0);
      Token token2 = xPathLexer0.minus();
      assertEquals("2", token2.getTokenText());
      assertEquals(6, token2.getTokenType());
      
      Token token3 = xPathLexer0.star();
      assertEquals("o", token3.getTokenText());
      assertEquals(20, token3.getTokenType());
      
      xPathLexer0.div();
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertNull(token4);
      
      Token token5 = xPathLexer0.notEquals();
      assertEquals(22, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8.,(+>B$ixf");
      Token token0 = xPathLexer0.pipe();
      assertEquals("8", token0.getTokenText());
      assertEquals(17, token0.getTokenType());
      
      xPathLexer0.consume();
      Token token1 = xPathLexer0.nextToken();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer("kf ff*$&O5KQf6");
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      assertEquals("(", token2.getTokenText());
      
      Token token3 = xPathLexer1.nextToken();
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(5, token4.getTokenType());
      assertEquals("+", token4.getTokenText());
      
      Token token5 = xPathLexer1.identifierOrOperatorName();
      assertNull(token5);
      
      Token token6 = xPathLexer1.minus();
      assertEquals(" ", token6.getTokenText());
      assertEquals(6, token6.getTokenType());
      
      String string0 = token1.toString();
      assertEquals("[ (32) (,)", string0);
      
      xPathLexer0.consume();
      xPathLexer1.setPreviousToken((Token) null);
      Token token7 = xPathLexer1.dollar();
      assertEquals(26, token7.getTokenType());
      assertEquals("f", token7.getTokenText());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("[", token0.getTokenText());
      assertEquals(3, token0.getTokenType());
      
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      assertEquals(" ", token1.getTokenText());
      
      xPathLexer0.isIdentifierChar(':');
      xPathLexer0.setXPath("");
      xPathLexer0.leftBracket();
      boolean boolean0 = xPathLexer0.isIdentifierChar(':');
      assertFalse(boolean0);
      
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals((-1), token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("<n->b^8~#*,xHI`^.WQ");
      xPathLexer0.and();
      xPathLexer0.consume();
      xPathLexer0.comma();
      xPathLexer0.identifier();
      xPathLexer0.rightBracket();
      xPathLexer0.consume((-2905));
      // Undeclared exception!
      try { 
        xPathLexer0.or();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("X=2Y");
      Token token0 = xPathLexer0.pipe();
      token0.toString();
      xPathLexer0.minus();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (17) (X)", string0);
      
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.minus();
      assertEquals("2", token1.getTokenText());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('[');
      assertFalse(boolean0);
      
      Token token2 = xPathLexer0.star();
      assertEquals("Y", token2.getTokenText());
      assertEquals(20, token2.getTokenType());
      
      xPathLexer0.div();
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
      
      Token token5 = xPathLexer0.minus();
      assertEquals(6, token5.getTokenType());
      
      Token token6 = xPathLexer0.equals();
      assertEquals(21, token6.getTokenType());
      
      xPathLexer0.getXPath();
      xPathLexer0.getPreviousToken();
      Token token7 = xPathLexer0.getPreviousToken();
      assertNotSame(token7, token3);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8.,(+>B$ixf");
      xPathLexer0.consume();
      Token token0 = xPathLexer0.nextToken();
      assertEquals(".", token0.getTokenText());
      assertEquals(13, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(",", token1.getTokenText());
      assertEquals(32, token1.getTokenType());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      String string0 = token2.toString();
      assertEquals("[ (15) ()", string0);
      
      Token token3 = xPathLexer0.identifier();
      assertEquals(15, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("X=2o");
      Token token0 = xPathLexer0.leftParen();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.minus();
      xPathLexer0.isIdentifierStartChar(' ');
      xPathLexer0.number();
      xPathLexer0.operatorName();
      xPathLexer0.consume((-1625));
      xPathLexer0.getXPath();
      xPathLexer0.getPreviousToken();
      xPathLexer0.getPreviousToken();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-2976));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "{\"Y;A8nU@17~\"oI $tp";
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("F)x3t_J");
      xPathLexer0.nextToken();
      String string1 = null;
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("6 C2.JJ2");
      xPathLexer0.doubleColon();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.equals();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("c?");
      xPathLexer0.leftBracket();
      Token token0 = xPathLexer0.nextToken();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.and();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("=vZ]8-Y ?4I");
      xPathLexer0.dots();
      XPathLexer xPathLexer1 = new XPathLexer("[ (");
      xPathLexer1.div();
      xPathLexer0.nextToken();
      xPathLexer0.consume();
      xPathLexer1.notEquals();
      xPathLexer0.operatorName();
      xPathLexer0.whitespace();
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Wf");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("W", token0.getTokenText());
      assertEquals(3, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("=vZ]8-Y?4I");
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token1 = xPathLexer1.nextToken();
      assertEquals("=", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer1.identifierOrOperatorName();
      assertEquals("vZ", token3.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token4 = xPathLexer3.equals();
      assertEquals(21, token4.getTokenType());
      
      Token token5 = xPathLexer3.rightBracket();
      assertEquals(4, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      token0.toString();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.nextToken();
      xPathLexer1.and();
      Token token1 = xPathLexer1.getPreviousToken();
      xPathLexer1.colon();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.relationalOperator();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8.,(+>B$ixf");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.leftParen();
      Token token0 = xPathLexer1.colon();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("7?c`$qAt.E!ZTi#~=");
      xPathLexer0.whitespace();
      xPathLexer0.colon();
      xPathLexer0.getXPath();
      xPathLexer0.plus();
      xPathLexer0.pipe();
      xPathLexer0.nextToken();
      xPathLexer0.pipe();
      xPathLexer0.equals();
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("X=2o");
      Token token0 = xPathLexer0.leftParen();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (1) (X)", string0);
      
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.minus();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar(' ');
      assertFalse(boolean0);
      
      xPathLexer0.relationalOperator();
      String string1 = token1.toString();
      assertEquals("[ (6) (=)", string1);
      
      XPathLexer xPathLexer1 = new XPathLexer("PpoZLf wz\"");
      Token token2 = xPathLexer1.number();
      assertEquals(30, token2.getTokenType());
      
      xPathLexer1.setXPath("-5:+U.+Y2;:");
      xPathLexer1.getPreviousToken();
      xPathLexer1.nextToken();
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      assertEquals("2", token3.getTokenText());
      
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
      assertEquals("o", token4.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token5 = xPathLexer2.plus();
      assertEquals(5, token5.getTokenType());
      
      Token token6 = xPathLexer2.minus();
      assertEquals(6, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("mIl-Bo)");
      Token token0 = xPathLexer0.pipe();
      xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.not();
      xPathLexer0.doubleColon();
      char char0 = '>';
      Token token1 = xPathLexer0.plus();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("b'r}hvD+1BV");
      xPathLexer0.leftParen();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.notEquals();
      xPathLexer0.currentPosition();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      
      Token token1 = xPathLexer0.literal();
      assertNull(token1);
      
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      
      xPathLexer0.consume();
      Token token3 = xPathLexer0.nextToken();
      assertEquals((-1), token3.getTokenType());
      
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
      
      xPathLexer0.leftParen();
      xPathLexer0.and();
      xPathLexer0.setXPath("4Y*IB$ ");
      Token token5 = xPathLexer0.leftBracket();
      assertEquals("4", token5.getTokenText());
      assertEquals(3, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertNotSame(token6, token3);
      assertEquals("Y*IB$ ", token6.getTokenText());
      
      Token token7 = xPathLexer0.notEquals();
      assertEquals(22, token7.getTokenType());
      assertEquals("Y*", token7.getTokenText());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("kVJ%`");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      assertEquals("kV", token0.getTokenText());
      
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.star();
      assertEquals("%", token3.getTokenText());
      assertEquals(20, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fw{r;J$yOCUTP/W&");
      xPathLexer0.plus();
      Token token0 = xPathLexer0.comma();
      token0.toString();
      xPathLexer0.mod();
      Token token1 = xPathLexer0.rightBracket();
      token1.toString();
      xPathLexer0.isIdentifierChar('D');
      xPathLexer0.nextToken();
      token0.toString();
      token1.toString();
      xPathLexer0.rightParen();
      xPathLexer0.hasMoreChars();
      String string0 = "";
      xPathLexer0.consume((-2224));
      // Undeclared exception!
      try { 
        xPathLexer0.dots();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Zc+ |+E#KMW'YzL,z");
      xPathLexer0.dots();
      xPathLexer0.doubleColon();
      xPathLexer0.notEquals();
      xPathLexer0.mod();
      xPathLexer0.slashes();
      xPathLexer0.operatorName();
      xPathLexer0.at();
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer0.rightBracket();
      xPathLexer0.colon();
      xPathLexer0.getXPath();
      xPathLexer0.consume((-2));
      assertEquals("Zc+ |+E#KMW'YzL,z", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("! 2G(B");
      xPathLexer0.leftParen();
      xPathLexer0.nextToken();
      xPathLexer0.at();
      xPathLexer0.number();
      xPathLexer0.consume(110);
      xPathLexer0.number();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.not();
      xPathLexer0.isIdentifierStartChar('W');
      int int0 = (-403);
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-403));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("nvZ]8-Y L ?4I");
      xPathLexer0.colon();
      xPathLexer0.comma();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("");
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.rightBracket();
      xPathLexer0.rightBracket();
      xPathLexer3.not();
      xPathLexer2.pipe();
      String string0 = null;
      XPathLexer xPathLexer4 = null;
      try {
        xPathLexer4 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("nvZ]8-Y ?4I");
      xPathLexer0.plus();
      xPathLexer0.rightParen();
      xPathLexer0.comma();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.or();
      xPathLexer1.mod();
      Token token0 = xPathLexer1.rightBracket();
      xPathLexer1.isIdentifierChar('Q');
      xPathLexer0.nextToken();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("1,>B~mbgCmXmw}h&'");
      Token token0 = xPathLexer0.doubleColon();
      Token token1 = xPathLexer0.relationalOperator();
      assertEquals(9, token1.getTokenType());
      assertEquals(">", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      
      xPathLexer0.nextToken();
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(4, token3.getTokenType());
      assertEquals("~", token3.getTokenText());
      
      String string0 = token0.toString();
      assertEquals("[ (19) (1,)", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.identifier();
      xPathLexer0.identifierOrOperatorName();
      Token token0 = xPathLexer0.plus();
      xPathLexer0.consume();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(5, token0.getTokenType());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals(26, token1.getTokenType());
      
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      
      xPathLexer0.setXPath("");
      xPathLexer0.identifier();
      xPathLexer0.setXPath("?oK6rhVO0xci");
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token3.getTokenType());
      assertEquals("", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = "lNH*0f*W2Ep-#ysk}`";
      String string1 = "B1O3K+";
      XPathLexer xPathLexer0 = new XPathLexer("B1O3K+");
      xPathLexer0.doubleColon();
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      xPathLexer0.leftBracket();
      Token token0 = xPathLexer0.pipe();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("lNH*0f*W2Ep-#ysk}`");
      Token token0 = xPathLexer0.pipe();
      token0.toString();
      token0.toString();
      Token token1 = xPathLexer0.nextToken();
      token1.toString();
      String string0 = "";
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token2 = xPathLexer1.equals();
      // Undeclared exception!
      try { 
        token2.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("W=a\"");
      xPathLexer1.relationalOperator();
      xPathLexer1.nextToken();
      xPathLexer0.nextToken();
      xPathLexer1.and();
      xPathLexer0.setXPath("");
      assertEquals("", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("oyA/Gc95!;ji|");
      xPathLexer0.consume();
      Token token0 = xPathLexer0.equals();
      xPathLexer0.whitespace();
      xPathLexer0.nextToken();
      token0.toString();
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      String string0 = "9moPZlfM\"Pfm5J";
      Token token0 = xPathLexer0.dots();
      XPathLexer xPathLexer1 = new XPathLexer("9moPZlfM\"Pfm5J");
      xPathLexer1.nextToken();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("X=2o");
      Token token0 = xPathLexer0.leftParen();
      String string0 = token0.toString();
      assertEquals("[ (1) (X)", string0);
      
      Token token1 = xPathLexer0.minus();
      token1.toString();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar(' ');
      assertFalse(boolean0);
      
      xPathLexer0.relationalOperator();
      String string1 = token1.toString();
      assertEquals("[ (6) (=)", string1);
      
      XPathLexer xPathLexer1 = new XPathLexer("PpoZLf wz\"");
      xPathLexer1.number();
      xPathLexer1.setXPath("-5:+U.+Y2;:");
      xPathLexer1.getPreviousToken();
      xPathLexer1.setPreviousToken((Token) null);
      xPathLexer1.relationalOperator();
      xPathLexer1.nextToken();
      xPathLexer0.nextToken();
      xPathLexer1.hasMoreChars();
      Token token2 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
      assertEquals("5", token2.getTokenText());
      
      Token token3 = xPathLexer0.getPreviousToken();
      assertEquals("2", token3.getTokenText());
      assertEquals(30, token3.getTokenType());
      
      Token token4 = xPathLexer0.star();
      assertEquals(20, token4.getTokenType());
      assertEquals("o", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8.,(+>B$ixf");
      Token token0 = xPathLexer0.dots();
      assertEquals("8.", token0.getTokenText());
      assertEquals(14, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightBracket();
      String string0 = token1.toString();
      assertEquals("[ (4) (,)", string0);
      
      xPathLexer0.setPreviousToken(token1);
      Token token2 = xPathLexer0.slashes();
      assertEquals(11, token2.getTokenType());
      assertEquals("(", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Ms8F{j+:FM]");
      Token token0 = xPathLexer0.leftParen();
      assertEquals("M", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      
      xPathLexer0.and();
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      assertEquals("{", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("lNH*0f*W2Ep-#ysk}`");
      Token token0 = xPathLexer0.doubleColon();
      xPathLexer0.nextToken();
      token0.toString();
      token0.toString();
      XPathLexer xPathLexer1 = new XPathLexer("[ (19) (lN)");
      xPathLexer1.setPreviousToken(token0);
      xPathLexer0.getXPath();
      xPathLexer1.consume((-1));
      xPathLexer0.setPreviousToken(token0);
      // Undeclared exception!
      try { 
        xPathLexer1.relationalOperator();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.nextToken();
      xPathLexer0.div();
      xPathLexer0.relationalOperator();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("6!%)cw.|hZv}");
      xPathLexer1.nextToken();
      xPathLexer0.dots();
      xPathLexer1.minus();
      XPathLexer xPathLexer2 = new XPathLexer("X=2o");
      xPathLexer2.consume();
      xPathLexer1.dots();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("! 2G(B");
      xPathLexer0.nextToken();
      xPathLexer0.at();
      xPathLexer0.consume((-2975));
      // Undeclared exception!
      try { 
        xPathLexer0.number();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      String string0 = "1.>9g?(Xmw}h&'";
      Token token0 = xPathLexer0.rightBracket();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setPreviousToken(token0);
      xPathLexer1.notEquals();
      xPathLexer1.number();
      xPathLexer1.at();
      xPathLexer0.relationalOperator();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer0.and();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.dollar();
      xPathLexer1.relationalOperator();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = null;
      try {
        xPathLexer4 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("bW5'%g7Um#VW]rb");
      xPathLexer0.dots();
      xPathLexer0.div();
      xPathLexer0.comma();
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.rightParen();
      xPathLexer0.rightBracket();
      XPathLexer xPathLexer2 = new XPathLexer("bW5'%g7Um#VW]rb");
      token0.toString();
      Token token1 = xPathLexer2.getPreviousToken();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.slashes();
      xPathLexer0.or();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("\"/:wusk^/VKg");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals(4, token0.getTokenType());
      assertEquals("\"", token0.getTokenText());
      
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      assertEquals("/", token1.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer("\"/:wusk^/VKg");
      xPathLexer1.hasMoreChars();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("wusk", token2.getTokenText());
      
      xPathLexer0.setXPath(">]w$}7(X9v^6IH7");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.relationalOperator();
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertNull(token3);
      
      Token token4 = xPathLexer1.dollar();
      assertEquals("\"", token4.getTokenText());
      assertEquals(26, token4.getTokenType());
      
      Token token5 = xPathLexer0.leftBracket();
      assertEquals(3, token5.getTokenType());
      assertEquals(">", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("axu$cG$?,?E2kU+)v");
      xPathLexer0.minus();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.setPreviousToken((Token) null);
      assertEquals("axu$cG$?,?E2kU+)v", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("uU>9g?(mw}&'");
      xPathLexer0.mod();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Zc+ |+E#KMW'YzL,z");
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      assertEquals("Z", token0.getTokenText());
      
      Token token1 = xPathLexer0.doubleColon();
      assertEquals("c+", token1.getTokenText());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      assertEquals(" ", token2.getTokenText());
      
      xPathLexer0.mod();
      xPathLexer0.operatorName();
      Token token3 = xPathLexer0.at();
      assertEquals("|", token3.getTokenText());
      assertEquals(16, token3.getTokenType());
      
      xPathLexer0.and();
      Token token4 = xPathLexer0.nextToken();
      assertEquals(5, token4.getTokenType());
      assertEquals("+", token4.getTokenText());
      
      Token token5 = xPathLexer0.leftParen();
      assertEquals("E", token5.getTokenText());
      
      Token token6 = xPathLexer0.colon();
      assertEquals("#", token6.getTokenText());
      assertEquals(18, token6.getTokenType());
      
      Token token7 = xPathLexer0.rightParen();
      assertEquals("K", token7.getTokenText());
      assertEquals(2, token7.getTokenType());
      
      xPathLexer0.consume((-2));
      Token token8 = xPathLexer0.nextToken();
      assertEquals("#KMW'YzL,z", token8.getTokenText());
      
      Token token9 = xPathLexer0.not();
      assertEquals(23, token9.getTokenType());
      assertEquals("#", token9.getTokenText());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Sa)6+v+ph-|mZuJw})C");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("Sa", token0.getTokenText());
      
      Token token1 = xPathLexer0.number();
      assertEquals("", token1.getTokenText());
      assertEquals(30, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftBracket();
      Token token3 = xPathLexer0.equals();
      assertEquals(21, token3.getTokenType());
      assertEquals("6", token3.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      Token token4 = xPathLexer0.colon();
      assertEquals("+", token4.getTokenText());
      assertEquals(18, token4.getTokenType());
      
      xPathLexer0.setPreviousToken(token2);
      assertEquals(")", token2.getTokenText());
      assertEquals(3, token2.getTokenType());
      
      xPathLexer0.mod();
      Token token5 = xPathLexer0.rightBracket();
      assertEquals("v", token5.getTokenText());
      assertEquals(4, token5.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('A');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("h^Y4VJ-[Tgsy");
      xPathLexer0.operatorName();
      xPathLexer1.nextToken();
      xPathLexer1.nextToken();
      xPathLexer1.colon();
      xPathLexer1.nextToken();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.consume();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.at();
      xPathLexer4.slashes();
      Token token0 = xPathLexer3.not();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer3.not();
      XPathLexer xPathLexer6 = new XPathLexer();
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer3.leftParen();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("y^0b</");
      xPathLexer0.getPreviousToken();
      Token token0 = xPathLexer0.dollar();
      assertEquals("y", token0.getTokenText());
      assertEquals(26, token0.getTokenType());
      
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("^0b</", token2.getTokenText());
      
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      assertEquals("^", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("kVJ%`");
      xPathLexer0.getPreviousToken();
      Token token0 = xPathLexer0.dollar();
      assertEquals("k", token0.getTokenText());
      assertEquals(26, token0.getTokenType());
      
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.star();
      assertEquals("%", token3.getTokenText());
      assertEquals(20, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("kVJ%`");
      xPathLexer0.getPreviousToken();
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("kVJ", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      assertEquals("%", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8.,(+>B$ixf");
      xPathLexer0.relationalOperator();
      xPathLexer0.rightParen();
      xPathLexer0.plus();
      XPathLexer xPathLexer1 = new XPathLexer("8.,(+>B$ixf");
      xPathLexer1.comma();
      xPathLexer1.star();
      xPathLexer0.doubleColon();
      xPathLexer0.nextToken();
      xPathLexer0.dots();
      xPathLexer1.notEquals();
      Token token0 = xPathLexer1.or();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("npb1d>os RIr$TQG");
      xPathLexer0.nextToken();
      xPathLexer0.currentPosition();
      Token token0 = xPathLexer0.at();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.notEquals();
      Token token1 = xPathLexer1.number();
      token0.toString();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = "oyA/Gc95!;i|";
      XPathLexer xPathLexer0 = new XPathLexer("oyA/Gc95!;i|");
      Token token0 = xPathLexer0.notEquals();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer1.leftParen();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8.,(+>B$ixf");
      xPathLexer0.consume();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.colon();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@Is3J7aa>k|sC]");
      xPathLexer0.colon();
      xPathLexer0.minus();
      xPathLexer0.getXPath();
      xPathLexer0.equals();
      xPathLexer0.nextToken();
      xPathLexer0.isIdentifierStartChar('2');
      xPathLexer0.rightParen();
      xPathLexer0.getPreviousToken();
      xPathLexer0.div();
      xPathLexer0.consume((-513));
      // Undeclared exception!
      try { 
        xPathLexer0.div();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("=Z]8-Y?4");
      XPathLexer xPathLexer1 = new XPathLexer("zne");
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.leftBracket();
      Token token0 = xPathLexer0.relationalOperator();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("6!%)cw.|hZv}");
      xPathLexer0.minus();
      xPathLexer0.nextToken();
      xPathLexer0.comma();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token0 = xPathLexer2.colon();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Q;]S8;yj{w9.WS(>@]");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.relationalOperator();
      xPathLexer1.setXPath("Ayxgz[");
      xPathLexer1.whitespace();
      String string0 = "";
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("axuc$?5,?E2kU+)Ov");
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token0 = xPathLexer1.at();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.notEquals();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer3.at();
      XPathLexer xPathLexer5 = new XPathLexer("/-m>Gu");
      xPathLexer5.number();
      XPathLexer xPathLexer6 = new XPathLexer();
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer2.slashes();
      XPathLexer xPathLexer8 = new XPathLexer();
      XPathLexer xPathLexer9 = new XPathLexer();
      xPathLexer8.operatorName();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("6@%Xm");
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      assertEquals("6", token0.getTokenText());
      
      Token token1 = xPathLexer0.equals();
      assertEquals("@", token1.getTokenText());
      assertEquals(21, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("%Xm", token2.getTokenText());
      
      Token token3 = xPathLexer0.leftParen();
      assertEquals("%", token3.getTokenText());
      
      Token token4 = xPathLexer0.plus();
      assertEquals("X", token4.getTokenText());
      assertEquals(5, token4.getTokenType());
      
      xPathLexer0.operatorName();
      Token token5 = xPathLexer0.comma();
      assertEquals("m", token5.getTokenText());
      
      char char0 = xPathLexer0.LA(23);
      assertEquals('\uFFFF', char0);
      
      Token token6 = xPathLexer0.at();
      assertEquals(16, token6.getTokenType());
      
      xPathLexer0.and();
      Token token7 = xPathLexer0.not();
      assertEquals(23, token7.getTokenType());
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      Token token0 = xPathLexer0.not();
      xPathLexer0.setXPath("mT/|@cq<e");
      Token token1 = xPathLexer0.leftBracket();
      String string0 = token0.toString();
      assertEquals("[ (23) ())", string0);
      
      String string1 = token1.toString();
      assertEquals("[ (3) (m)", string1);
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.or();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.colon();
      assertEquals("/", token3.getTokenText());
      assertEquals(18, token3.getTokenType());
      
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertNull(token4);
      
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.mod();
      xPathLexer3.setPreviousToken((Token) null);
      xPathLexer2.mod();
      xPathLexer1.and();
      xPathLexer2.mod();
      Token token5 = xPathLexer0.not();
      assertEquals("|", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer("[| (");
      xPathLexer1.consume();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.or();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.nextToken();
      xPathLexer2.nextToken();
      xPathLexer3.at();
      xPathLexer0.literal();
      Token token0 = xPathLexer4.literal();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.notEquals();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.div();
      xPathLexer0.div();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
      
      xPathLexer0.not();
      xPathLexer0.minus();
      Token token2 = xPathLexer0.rightBracket();
      assertEquals(4, token2.getTokenType());
      
      Token token3 = xPathLexer0.pipe();
      assertEquals(17, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.setXPath("");
      xPathLexer0.or();
      xPathLexer1.getPreviousToken();
      XPathLexer xPathLexer3 = new XPathLexer("lxi");
      Token token4 = xPathLexer3.dollar();
      assertEquals("l", token4.getTokenText());
      assertEquals(26, token4.getTokenType());
      
      xPathLexer0.whitespace();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token5 = xPathLexer4.literal();
      assertNull(token5);
      
      Token token6 = xPathLexer1.not();
      assertEquals(23, token6.getTokenType());
      
      xPathLexer2.operatorName();
      Token token7 = xPathLexer1.minus();
      assertEquals(6, token7.getTokenType());
      
      Token token8 = xPathLexer0.dots();
      assertEquals(13, token8.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer(")");
      Token token9 = xPathLexer3.leftBracket();
      assertEquals(3, token9.getTokenType());
      assertEquals("x", token9.getTokenText());
      
      Token token10 = xPathLexer0.notEquals();
      assertEquals(22, token10.getTokenType());
      
      xPathLexer2.div();
      boolean boolean0 = xPathLexer2.isIdentifierChar('B');
      boolean boolean1 = xPathLexer3.isIdentifierStartChar('t');
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token2 = xPathLexer0.literal();
      assertNull(token2);
      
      xPathLexer0.or();
      Token token3 = xPathLexer0.colon();
      assertEquals(18, token3.getTokenType());
      
      Token token4 = xPathLexer0.equals();
      assertEquals(21, token4.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      boolean boolean0 = xPathLexer2.isIdentifierStartChar('_');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@k}WRZ63MJ&A,");
      Token token0 = xPathLexer0.nextToken();
      String string0 = token0.toString();
      assertEquals("[ (16) (@)", string0);
      
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.div();
      xPathLexer0.setXPath("@k}WRZ63MJ&A,");
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('b');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("g4)|?4#y<vu");
      xPathLexer0.nextToken();
      xPathLexer0.currentPosition();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.rightBracket();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":D");
      xPathLexer0.nextToken();
      xPathLexer0.slashes();
      Token token0 = xPathLexer0.rightBracket();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      int int0 = xPathLexer0.endPosition();
      assertEquals(0, int0);
      
      xPathLexer0.leftBracket();
      xPathLexer0.div();
      xPathLexer0.mod();
      xPathLexer0.setXPath("jm)");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("jm", token0.getTokenText());
      
      xPathLexer0.consume(1);
      xPathLexer0.slashes();
      xPathLexer0.slashes();
      xPathLexer0.or();
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      
      xPathLexer0.isIdentifierChar('$');
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(3, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      xPathLexer0.setXPath("1.>9g?(Xmw}h&'");
      xPathLexer0.rightBracket();
      xPathLexer0.consume();
      xPathLexer0.nextToken();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.number();
      xPathLexer0.consume(118);
      xPathLexer0.minus();
      xPathLexer0.nextToken();
      xPathLexer0.doubleColon();
      xPathLexer0.literal();
      xPathLexer0.setXPath("o#/amq@t");
      xPathLexer0.star();
      xPathLexer0.slashes();
      xPathLexer0.number();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.operatorName();
      xPathLexer0.rightParen();
      xPathLexer0.plus();
      xPathLexer0.isIdentifierChar('J');
      xPathLexer0.whitespace();
      xPathLexer0.colon();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-2531));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("_RY>dgc|");
      Token token0 = xPathLexer0.nextToken();
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      assertEquals(">", token1.getTokenText());
      
      Token token2 = xPathLexer0.leftBracket();
      xPathLexer0.currentPosition();
      xPathLexer0.and();
      String string0 = token0.toString();
      assertEquals("[ (15) (_RY)", string0);
      
      String string1 = token2.toString();
      assertEquals("[ (3) (d)", string1);
      
      Token token3 = xPathLexer0.minus();
      assertEquals("g", token3.getTokenText());
      assertEquals(6, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("axu$cG$?,?E2kU+)v");
      xPathLexer0.number();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.and();
      xPathLexer0.getXPath();
      XPathLexer xPathLexer2 = new XPathLexer();
      assertNull(xPathLexer2.getXPath());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.not();
      xPathLexer0.setXPath("1.>9g?(Xmw}h&'");
      xPathLexer0.rightBracket();
      xPathLexer0.consume();
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      token0.toString();
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.at();
      xPathLexer0.or();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      Token token1 = xPathLexer0.leftBracket();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":D");
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.rightBracket();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      String string0 = "<yP/Gk5!B;ji|";
      XPathLexer xPathLexer0 = new XPathLexer("<yP/Gk5!B;ji|");
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer("R<%d");
      xPathLexer0.mod();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.doubleColon();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.leftParen();
      xPathLexer0.dots();
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      
      Token token2 = xPathLexer0.whitespace();
      assertEquals((-2), token2.getTokenType());
      
      xPathLexer0.doubleColon();
      Token token3 = xPathLexer0.notEquals();
      assertEquals(22, token3.getTokenType());
      
      Token token4 = xPathLexer0.literal();
      assertNull(token4);
      
      Token token5 = xPathLexer0.pipe();
      assertEquals(17, token5.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.and();
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.leftParen();
      Token token6 = xPathLexer0.dots();
      assertEquals(13, token6.getTokenType());
      
      Token token7 = xPathLexer0.number();
      assertEquals(30, token7.getTokenType());
      
      xPathLexer0.setPreviousToken(token0);
      assertEquals(19, token0.getTokenType());
      
      Token token8 = xPathLexer0.not();
      assertEquals(23, token8.getTokenType());
      
      Token token9 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token9.getTokenType());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("1.9g?(Xmw}h&'");
      xPathLexer0.colon();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.identifierOrOperatorName();
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.whitespace();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer("");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.plus();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer("1.9g?(Xmw}h&'");
      xPathLexer2.or();
      xPathLexer4.mod();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer4.nextToken();
      Token token1 = xPathLexer0.notEquals();
      xPathLexer1.setPreviousToken(token1);
      XPathLexer xPathLexer6 = new XPathLexer();
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer7.equals();
      xPathLexer2.not();
      XPathLexer xPathLexer8 = new XPathLexer();
      xPathLexer8.nextToken();
      xPathLexer8.and();
      XPathLexer xPathLexer9 = new XPathLexer();
      xPathLexer7.nextToken();
      xPathLexer8.setPreviousToken(token0);
      XPathLexer xPathLexer10 = new XPathLexer();
      XPathLexer xPathLexer11 = new XPathLexer();
      XPathLexer xPathLexer12 = new XPathLexer();
      xPathLexer8.not();
      xPathLexer10.nextToken();
      Token token2 = xPathLexer6.or();
      assertNull(token2);
  }
}
