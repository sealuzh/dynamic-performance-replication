/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 10:45:52 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.util.Enumeration;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.ByteString;
import okio.HashingSink;
import okio.HashingSource;
import okio.RealBufferedSource;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteString_ESTest extends ByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("Lwq");
      assertEquals(2, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("okio.ByteString");
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      String string0 = byteString0.base64();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      ByteString byteString0 = realBufferedSource0.readByteString();
      HashingSink hashingSink0 = HashingSink.md5(buffer1);
      ByteString byteString1 = hashingSink0.hash();
      int int0 = byteString0.indexOf(byteString1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("\"S%}:2p");
      // Undeclared exception!
      try { 
        byteString0.substring((-499));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.indexOf(byteArray0);
      assertEquals(0, int0);
      
      ByteString byteString1 = new ByteString(byteArray0);
      int int1 = byteString0.indexOf(byteString1, (int) (byte)0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      byteString0.toString();
      byte[] byteArray1 = byteString1.toByteArray();
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Source source0 = null;
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = null;
      // Undeclared exception!
      try { 
        ByteString.decodeBase64((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // base64 == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ByteString byteString0 = new ByteString((byte[]) null);
      // Undeclared exception!
      try { 
        byteString0.sha1();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.security.MessageDigest", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("\"S%}:2p");
      String string0 = byteString0.toString();
      assertEquals("[text=\"S%}:2p]", string0);
      
      ByteString byteString1 = ByteString.encodeUtf8("[text=\"S%}:2p]");
      byteString0.md5();
      assertNotSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("u]EmS%~]\"p-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: u]EmS%~]\"p-
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("#|Wy#3 ^_'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: #
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.lastIndexOf(byteArray0, 105);
      assertEquals(0, int0);
      
      boolean boolean0 = byteString0.startsWith(byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = ByteString.codePointIndexToCharIndex("s.li1&mt = s.pos", 645);
      assertEquals(16, int0);
      
      byte[] byteArray0 = new byte[7];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      byteString0.hmacSha256(byteString1);
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("b-D]`");
      ByteString byteString1 = byteString0.sha512();
      assertEquals(5, byteString0.size());
      
      byteString1.EMPTY.hmacSha512(byteString0);
      String string0 = byteString1.toString();
      assertEquals("[hex=c40f2e206002000002fc00fae0020ce0ee002c000ea8800600c060a000acf00f00a0040eac0ca2804e4000e248420ce080020062c4080006c00ce60000000068]", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("byteString == null");
      int int0 = byteString0.compareTo(byteString0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("byteString == null");
      // Undeclared exception!
      try { 
        byteString0.EMPTY.substring(2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      realBufferedSource0.readByteString();
      ByteString byteString1 = byteString0.substring(0, 0);
      byteString1.asByteBuffer();
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-3);
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer0 = new Buffer();
      byteString0.write(buffer0);
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("byteString == null");
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString1 = realBufferedSource0.readByteString();
      int int0 = byteString0.compareTo(byteString1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("$' 9K<Ih}");
      byteString0.EMPTY.sha256();
      String string0 = byteString0.toString();
      assertEquals("[text=$' 9K<Ih}]", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("");
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertEquals(0, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("b:D];");
      ByteString byteString1 = byteString0.sha512();
      String string0 = byteString1.toString();
      assertEquals("[hex=ee42ef2fe222fe2fe2e224efe2ff2ef222224f22e2c2ec22222ef2eee22efe2222feee2f222222ceecc22f22ef4e222c222eee42c22efee22f2f42f224ef2422]", string0);
      
      boolean boolean0 = byteString0.startsWith(byteString1);
      assertFalse(boolean0);
      
      int int0 = byteString1.indexOf(byteString0, (-1477));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ByteString.codePointIndexToCharIndex("s.li1&mit == s.pos", 645);
      byte[] byteArray0 = new byte[7];
      ByteString byteString0 = ByteString.encodeUtf8("s.li1&mit == s.pos");
      byteString0.toAsciiUppercase();
      ByteString byteString1 = byteString0.md5();
      byteString1.base64();
      ByteString byteString2 = new ByteString(byteArray0);
      byteString0.compareTo(byteString1);
      byte[] byteArray1 = byteString2.toByteArray();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte)7;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.equals(byteArray0);
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString1 = hashingSource0.hash();
      byteString1.base64();
      ByteString byteString2 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer0, byteString1);
      ByteString byteString3 = hashingSink0.hash();
      byteString3.compareTo(byteString0);
      byte[] byteArray1 = byteString2.toByteArray();
      // Undeclared exception!
      try { 
        ByteString.of(byteArray1, 255, (int) (byte)7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=13 offset=255 byteCount=7
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      realBufferedSource0.readByteString();
      // Undeclared exception!
      try { 
        byteString0.substring(2, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(0)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("Eg5T.ag]n?T");
      ByteString byteString0 = ByteString.of(byteBuffer0);
      assertEquals(11, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ByteString.encodeUtf8("'yteString == null");
      ByteString byteString0 = ByteString.encodeUtf8("'yteString == null");
      // Undeclared exception!
      try { 
        byteString0.endsWith((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("byteString == null");
      ByteString byteString1 = byteString0.sha512();
      ByteString byteString2 = byteString0.toAsciiLowercase();
      String string0 = byteString0.toString();
      assertEquals("[text=byteString == null]", string0);
      
      boolean boolean0 = byteString1.endsWith(byteString2);
      assertNotSame(byteString2, byteString0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("b-D]`");
      ByteString byteString1 = byteString0.sha512();
      byteString1.EMPTY.hmacSha1(byteString0);
      String string0 = byteString1.toString();
      assertEquals("[hex=222f2e222ee22fefe2f2c2feef4222efee24222ecee224f2ff2224eef2e2fe4ff2ef22fee222e2222e2e4ce2222242ef2f42fc2222e224222e22e224fe4e2f22]", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      try { 
        ByteString.read(sequenceInputStream0, 112);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        ByteString.decodeHex("data == null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: t
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("offset=%s > size=%s");
      ByteString byteString1 = byteString0.sha512();
      String string0 = byteString0.toString();
      assertEquals("[text=offset=%s > size=%s]", string0);
      
      boolean boolean0 = byteString0.rangeEquals((-2864), byteString1, 36, 45);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("b:D];");
      ByteString byteString1 = byteString0.sha512();
      String string0 = byteString1.toString();
      assertEquals("[hex=ee42ef2fe222fe2fe2e224efe2ff2ef222224f22e2c2ec22222ef2eee22efe2222feee2f222222ceecc22f22ef4e222c222eee42c22efee22f2f42f224ef2422]", string0);
      
      int int0 = byteString1.lastIndexOf(byteString0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)8;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.endsWith(byteArray0);
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("!m0lD3o 4!");
      ByteString byteString1 = byteString0.sha512();
      ByteString byteString2 = byteString1.toAsciiUppercase();
      assertNotSame(byteString2, byteString1);
      
      Object object0 = new Object();
      String string0 = byteString0.toString();
      assertEquals("[text=!m0lD3o 4!]", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ByteString.codePointIndexToCharIndex("~Br|1M(D1{=e\"", 10);
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("U:zf@6lzk");
      assertNull(byteString0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("byteString == null");
      Object object0 = new Object();
      ByteString byteString1 = byteString0.sha512();
      boolean boolean0 = byteString0.endsWith(byteString1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("[text=");
      ByteString byteString1 = ByteString.encodeUtf8("");
      boolean boolean0 = byteString1.equals(byteString0);
      assertFalse(boolean0);
      
      ByteString byteString2 = ByteString.encodeUtf8("[text=");
      assertTrue(byteString2.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = ByteString.codePointIndexToCharIndex("9fhen2rg9g#", (-3270));
      assertEquals(11, int0);
      
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(true);
      ByteString byteString0 = ByteString.encodeUtf8("9fhen2rg9g#");
      Buffer buffer1 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSource0.readByteString();
      ByteString byteString1 = realBufferedSource0.readByteString(0L);
      int int1 = byteString1.compareTo(byteString0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      ByteString byteString1 = realBufferedSource0.readByteString();
      boolean boolean0 = byteString0.startsWith(byteString1);
      assertTrue(boolean0);
      assertTrue(byteString1.equals((Object)byteString0));
      
      byteString0.hashCode();
      assertTrue(byteString0.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("ib-D]`");
      ByteString byteString1 = byteString0.sha512();
      int int0 = byteString1.lastIndexOf(byteString0, 807);
      assertEquals((-1), int0);
      
      String string0 = byteString1.toString();
      assertEquals("[hex=ce22ef2222422f22ef4eefeff2ec4e4ff2cfee2f22fce2eef2fc4222e2fef442ec424ffe2ee2eef2ec4e2ff24f2fc2ffe24422e4eeeef2eef22ff4f22e22222f]", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hex == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("+B???S0f4l", charset0);
      assertEquals(10, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = "4\"Zv>cn]L";
      // Undeclared exception!
      try { 
        ByteString.encodeString("4\"Zv>cn]L", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer0, byteString0);
      ByteString byteString1 = hashingSource0.hash();
      byteString1.internalArray();
      byteString0.base64Url();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("1B2M2Y8AsgTpgAmY7PhCfg==");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: M
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = null;
      ByteString byteString0 = new ByteString((byte[]) null);
      // Undeclared exception!
      try { 
        byteString0.lastIndexOf((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      ByteString byteString0 = ByteString.encodeUtf8("b:D];");
      ByteString byteString1 = byteString0.sha512();
      byteString1.EMPTY.asByteBuffer();
      byteString0.toString();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        ByteString.encodeString((String) null, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null, 114, 46);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      ByteString byteString0 = realBufferedSource0.readByteString();
      // Undeclared exception!
      try { 
        byteString0.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("byteString == null");
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteString byteString1 = byteString0.sha512();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byteString1.EMPTY.write(pipedOutputStream0);
      String string0 = byteString1.toString();
      assertEquals("[hex=f2224efe22f2222ee22eeee2effe2fff22c2c2ecfe22ffe4ecfc2efce224fe222ee2e2f22fe22e4ff2fff2c2e2222f222f2f4f22ffe2f22ee2f24ef222fff22f]", string0);
      
      byteString1.EMPTY.toString();
      String string1 = byteString0.toString();
      assertEquals("[text=byteString == null]", string1);
      
      boolean boolean0 = byteString1.endsWith(byteString0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte) (-100);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)86;
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      ByteString byteString1 = byteString0.toAsciiUppercase();
      assertSame(byteString1, byteString0);
      
      int int0 = ByteString.codePointIndexToCharIndex("Eh|29[M|GCsc_e]", 53);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toString();
      byteString0.EMPTY.hex();
      Object object0 = new Object();
      byteString0.equals(object0);
      // Undeclared exception!
      try { 
        ByteString.of((ByteBuffer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readByteString();
      ByteString byteString1 = realBufferedSource0.readByteString();
      ByteString byteString2 = byteString0.substring(0, 0);
      byteString1.asByteBuffer();
      assertTrue(byteString1.equals((Object)byteString2));
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("byteString == null");
      ByteString.codePointIndexToCharIndex("byteString == null", 5583);
      ByteString byteString1 = ByteString.encodeUtf8("byteString == null");
      byteString1.lastIndexOf(byteString0);
      byteString0.equals(byteString1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 8);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 5583);
      // Undeclared exception!
      try { 
        ByteString.read(bufferedInputStream0, (-4037));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -4037
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      byteString0.toString();
      byte[] byteArray0 = byteString0.toByteArray();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteString.read(byteArrayInputStream0, 8);
      assertEquals(24, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteString byteString0 = realBufferedSource0.readByteString();
      byteString0.asByteBuffer();
      // Undeclared exception!
      try { 
        byteString0.string((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString((byte[]) null);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        byteString0.string(charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "7QD");
      ByteString byteString0 = ByteString.encodeUtf8("\"S%}:2p");
      byteString0.EMPTY.hashCode();
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("byteString == null");
      byteString0.toString();
      byteString0.hex();
      ByteString byteString1 = byteString0.substring(14, 14);
      // Undeclared exception!
      try { 
        byteString0.hmacSha256(byteString1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)83;
      ByteString byteString0 = ByteString.encodeUtf8("\r");
      byteString0.base64Url();
      ByteString byteString1 = ByteString.encodeUtf8("");
      String string0 = byteString0.toString();
      assertEquals("[text=\\r]", string0);
      
      int int0 = byteString1.lastIndexOf(byteArray0, (int) (byte)83);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      byte[] byteArray0 = byteString0.toByteArray();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        ByteString.read(byteArrayInputStream0, 468);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.encodeUtf8((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        ByteString.read((InputStream) null, 121);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("byteString == null");
      ByteString.codePointIndexToCharIndex("byteString == null", 5583);
      ByteString byteString1 = ByteString.encodeUtf8("byteString == null");
      boolean boolean0 = byteString1.equals(byteString0);
      assertTrue(boolean0);
      
      byteString1.rangeEquals((-96), byteString0, 5583, 5583);
      byteString1.toString();
      byteString1.toByteArray();
      ByteString byteString2 = byteString1.toAsciiLowercase();
      String string0 = byteString2.toString();
      assertEquals("[text=bytestring == null]", string0);
      
      boolean boolean1 = byteString0.equals(byteString2);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("<4 &2FO\"s[/ yha");
      ByteString byteString1 = byteString0.sha512();
      byteString1.toString();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ByteString.codePointIndexToCharIndex("byteString == null", 46);
      ByteString byteString0 = ByteString.encodeUtf8(":3nO8 !`%?Sr");
      byteString0.equals(":3nO8 !`%?Sr");
      ByteString byteString1 = byteString0.sha512();
      byteString0.toString();
      byteString0.EMPTY.hmacSha256(byteString1);
      byteString1.toString();
      byteString0.asByteBuffer();
      ByteString byteString2 = ByteString.encodeUtf8("[hex=3b04b3d2293642281fe5847a220626831e7a3e07e74eac35a23c59ee5f902551581e755c5ed6c4e322b1540eb47024cd1dfe4c88f99f9179dd1d17adedc70fa4]");
      byteString2.toString();
  }
}
