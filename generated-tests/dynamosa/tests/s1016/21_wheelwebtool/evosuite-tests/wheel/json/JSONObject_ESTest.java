/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 03 23:16:11 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = "{6nn-r";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{6nn-r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 6 of {6nn-r
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(" c?sQ'P,_\"yB\"*'", (-581L));
      jSONObject1.put("-1312.7335250", (Collection) null);
      String string0 = jSONObject1.toString((-1406), (-1406));
      jSONObject1.getLong(" c?sQ'P,_\"yB\"*'");
      Long long0 = new Long(0L);
      String string1 = JSONObject.numberToString(long0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "] is notca numbr.";
      JSONObject.quote("] is notca numbr.");
      JSONObject jSONObject1 = jSONObject0.put("\"] is notca numbr.\"", 34);
      jSONObject1.putOpt("] is notca numbr.", "] is notca numbr.");
      try { 
        jSONObject0.getDouble("] is notca numbr.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is notca numbr.\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = new Boolean("[");
      JSONObject jSONObject1 = jSONObject0.accumulate("[", boolean0);
      assertEquals(1, jSONObject0.length());
      
      boolean boolean1 = jSONObject1.getBoolean("[");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(83);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("D Q,;p>gDde@s_AP");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject1 = jSONObject0.put(".$&Ys}0#P#ph", (Collection) linkedList0);
      HashMap<Short, Float> hashMap0 = new HashMap<Short, Float>();
      JSONObject jSONObject2 = new JSONObject();
      jSONObject1.toString((-1902), (-1902));
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("wheel.json.JSONObject@0000000001", "wheel.json.JSONObject@0000000001");
      try { 
        jSONObject1.getBoolean("wheel.json.JSONObject@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONObject@0000000001\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Float[] floatArray0 = new Float[0];
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.accumulate("null", object0);
      jSONObject1.remove("null");
      linkedList0.toArray(floatArray0);
      linkedList0.listIterator();
      jSONObject0.putOpt("null", (Object) null);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      jSONObject2.names();
      String[] stringArray1 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject((Object) "]p!V@'^vTodDw8]");
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject.getNames(jSONObject1);
      JSONArray jSONArray1 = new JSONArray();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      JSONObject jSONObject2 = jSONObject0.put("7wPx)g)wPB-", (Collection) linkedList1);
      linkedList0.poll();
      jSONObject2.toString((-657), (-657));
      jSONObject2.isNull("A?$i}Y@s&");
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      JSONObject jSONObject3 = new JSONObject((Map) hashMap0);
      jSONObject2.optBoolean(",", true);
      JSONObject.valueToString("0", (-657), (-657));
      jSONObject2.optLong("7wPx)g)wPB-");
      try { 
        jSONObject1.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Object object0 = JSONObject.NULL;
      Boolean boolean0 = new Boolean("D.AY-jc,XN`RD}N?>");
      Boolean boolean1 = hashMap0.getOrDefault(object0, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.remove((Object) boolean0, (Object) boolean1);
      jSONObject0.put("D.AY-jc,XN`RD}N?>", (Map) hashMap0);
      jSONObject0.put("isreplace", (-163.784837172));
      jSONObject0.toString(0, (-241));
      String string0 = jSONObject0.optString("I>", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("]QxH<f~o7q", (-1L));
      JSONObject jSONObject2 = new JSONObject();
      boolean boolean0 = jSONObject2.optBoolean("]QxH<f~o7q", true);
      assertTrue(boolean0);
      
      String string0 = jSONObject0.toString(0, (-664));
      boolean boolean1 = jSONObject2.isNull("{\"java.lang.String@0000000002\": java.lang.Long@0000000003}");
      assertTrue(boolean1 == boolean0);
      
      HashMap<Short, Integer> hashMap1 = new HashMap<Short, Integer>();
      JSONObject jSONObject3 = new JSONObject((Map) hashMap0);
      String string1 = jSONObject0.optString("AJaaLBC{LK.$8?-82");
      assertEquals("", string1);
      
      long long0 = jSONObject1.optLong("2=00-_)cl=S?/*f'");
      assertEquals(0L, long0);
      
      String string2 = jSONObject1.toString((-664), 0);
      assertTrue(string2.equals((Object)string0));
      
      double double0 = jSONObject0.optDouble("AJaaLBC{LK.$8?-82", (-320.74397463497223));
      assertEquals((-320.74397463497223), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      JSONObject.quote("000");
      jSONObject1.toString();
      Float float0 = new Float(0.0);
      jSONObject0.putOpt("] is not a JSONObject.", float0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("]QxH<f~o7q", (-1L));
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.optBoolean("]QxH<f~o7q", true);
      JSONObject.getNames((Object) hashMap0);
      jSONObject0.toString(0, (-664));
      boolean boolean0 = new Boolean("]QxH<f~o7q");
      HashMap<Short, Integer> hashMap1 = new HashMap<Short, Integer>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      jSONObject0.optString("AJaaLBC{LK.$8?-82");
      try { 
        jSONObject1.getJSONArray("61^hKcu%U4S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"61^hKcu%U4S\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONArray", (Collection) linkedList0);
      assertSame(jSONObject0, jSONObject1);
      
      Byte byte0 = new Byte((byte)11);
      JSONObject.getNames((Object) byte0);
      jSONObject0.optDouble("(Z/tQik6:.JZv~2#sl)");
      JSONArray jSONArray0 = (JSONArray)jSONObject1.opt("wheel.json.JSONArray");
      assertEquals(0, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = JSONObject.quote("Expected '");
      assertEquals("\"Expected '\"", string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      JSONObject jSONObject1 = new JSONObject("{}");
      JSONObject jSONObject2 = jSONObject0.append("{}", jSONObject1);
      assertSame(jSONObject2, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("toS", "toS");
      boolean boolean0 = jSONObject1.isNull("toS");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
      
      try { 
        jSONObject0.getJSONArray("toS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"toS\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Short short0 = Short.valueOf((short)630);
      JSONObject.numberToString(short0);
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      HashMap<String, JSONObject> hashMap1 = new HashMap<String, JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Short@0000000001", (Map) hashMap1);
      JSONObject jSONObject2 = jSONObject0.optJSONObject("java.lang.Short@0000000001");
      assertFalse(jSONObject2.equals((Object)jSONObject1));
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "aL:`@LdY;>9Y@w;";
      jSONObject0.put("aL:`@LdY;>9Y@w;", true);
      jSONObject0.optBoolean("aL:`@LdY;>9Y@w;");
      int int0 = (-2255);
      jSONObject0.optDouble("aL:`@LdY;>9Y@w;", 0.0);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-2255));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Double double0 = new Double(0.0);
      Double.isFinite(462.43633208520953);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.optLong("", 0L);
      StringWriter stringWriter0 = new StringWriter(123);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringWriter0.append((CharSequence) stringBuffer0);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "", 842, 123);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("ad", 1.0);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
      
      JSONTokener jSONTokener0 = new JSONTokener("null");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of null
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      short short0 = (short)630;
      Short short1 = new Short((short) (-1));
      JSONObject jSONObject0 = new JSONObject(short1);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Short short0 = Short.valueOf((short)630);
      JSONObject.numberToString(short0);
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(hashMap0);
      jSONObject0.has("java.lang.Short@0000000001");
      String string1 = jSONObject0.toString((int) (short)630, 265);
      assertTrue(string1.equals((Object)string0));
      
      JSONObject jSONObject1 = new JSONObject("{}");
      boolean boolean0 = jSONObject1.isNull("+,~)4\"\"|~,:>");
      assertTrue(boolean0);
      
      HashMap<Short, Integer> hashMap1 = new HashMap<Short, Integer>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      String string2 = jSONObject1.optString("{}");
      assertEquals("", string2);
      
      long long0 = jSONObject2.optLong("val");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0, 869, 2103);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((Object) jSONObject0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNotSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(1, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("-td");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"-td\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[8];
      stringArray0[1] = stringArray0[0];
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      hashMap0.remove((Object) jSONObject0, (Object) stringArray0[0]);
      HashMap<Integer, JSONObject> hashMap1 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject2 = jSONObject0.put("pa", (Map) hashMap1);
      String string0 = jSONObject2.toString(6, 6);
      String string1 = jSONObject2.optString("{\"java.lang.String@0000000004\": {}}", "pSq:vng%W|2Z>");
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = jSONObject2.optBoolean("pa", false);
      assertFalse(boolean1);
      
      String string2 = JSONObject.doubleToString(6);
      assertEquals("6", string2);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = "";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.accumulate("ma", jSONArray0);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONArray.", 1L);
      assertSame(jSONObject0, jSONObject1);
      
      try { 
        jSONObject1.getJSONObject("] is not a JSONArray.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONArray.\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Object object0 = JSONObject.NULL;
      Boolean boolean0 = new Boolean("D.AY-jc,XN`RD}N?>");
      hashMap0.getOrDefault(object0, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[7];
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      jSONObject1.put("M^DGLih*X2WJQ~/]", 0.0);
      stringArray0[0] = "JSONArray[";
      stringArray0[1] = "";
      stringArray0[2] = "%%|@YvHdM=E(mpfhKel";
      Integer.getInteger("M^DGLih*X2WJQ~/]");
      Boolean boolean1 = new Boolean(true);
      hashMap0.put((Integer) null, boolean1);
      stringArray0[3] = "Unclosed comment";
      stringArray0[4] = "] is not a JSONArray.";
      stringArray0[5] = "!;3K:Jq";
      Integer integer0 = new Integer((-265));
      Boolean boolean2 = Boolean.FALSE;
      hashMap0.put(integer0, boolean2);
      stringArray0[6] = ">c(,";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      jSONObject2.remove("] is not a JSONArray.");
      assertEquals(1, jSONObject2.length());
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject1.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONrray", (Collection) linkedList0);
      jSONObject1.optBoolean("@eXhh-$kF");
      jSONObject0.optDouble((String) null);
      HashMap<Short, Float> hashMap0 = new HashMap<Short, Float>();
      jSONObject1.put("@eXhh-$kF", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.getJSONObject("@eXhh-$kF");
      assertFalse(jSONObject2.equals((Object)jSONObject0));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Float float0 = new Float(2615.147F);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Byte.compare((byte)0, (byte)0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "(]c#.4w";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      jSONObject0.toString();
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      jSONObject0.toJSONArray(jSONArray0);
      Byte.toUnsignedInt((byte) (-34));
      jSONObject0.names();
      jSONObject0.optBoolean("/{D", true);
      jSONObject0.optLong("i");
      jSONObject0.optLong("(]c#.4w");
      Double double0 = new Double((byte)0);
      JSONObject.testValidity(double0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = " at character ";
      stringArray0[2] = "6eT";
      stringArray0[3] = "istoString";
      stringArray0[4] = "wheel.json.JSONTokener";
      stringArray0[5] = "_a";
      stringArray0[6] = "I{(8b2~i]h_Ocv:OpM";
      stringArray0[7] = "O;~";
      stringArray0[8] = "+548W]Jmu*A:e]s";
      JSONObject jSONObject0 = new JSONObject(jSONArray0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("wheel.json.JSONTokener");
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("gettrim", "gettrim");
      JSONArray jSONArray0 = (JSONArray)jSONObject1.get("gettrim");
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Short short0 = Short.valueOf((short)630);
      JSONObject.numberToString(short0);
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(hashMap0);
      jSONObject0.opt("{}");
      jSONObject0.optLong("gettoUnsignedLong");
      jSONObject0.optLong("i");
      Double double0 = new Double((short)630);
      JSONObject.testValidity((Object) null);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("]p!V@'^vTodDw8]", 6L);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject.getNames(jSONObject0);
      JSONArray jSONArray1 = new JSONArray();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      JSONObject jSONObject2 = jSONObject1.put(",", (Collection) linkedList1);
      linkedList1.poll();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) ",");
      StringWriter stringWriter2 = stringWriter1.append('c');
      jSONObject2.write(stringWriter2);
      try { 
        jSONObject2.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, (-2536), (-2536));
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = "}%R}un]bC:'";
      JSONTokener jSONTokener0 = new JSONTokener("}%R}un]bC:'");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of }%R}un]bC:'
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("]p!V@'^vTodDw8]", (-1534L));
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.isNull("]p!V@'^vTodDw8]");
      jSONObject0.getDouble("]p!V@'^vTodDw8]");
      jSONObject1.optJSONArray("]p!V@'^vTodDw8]");
      try { 
        jSONObject0.getBoolean("to");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"to\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("/0m7,)c", (-170L));
      jSONObject1.optDouble("/0m7,)c");
      HashMap<Short, Float> hashMap0 = new HashMap<Short, Float>();
      jSONObject1.put("`kYNCn[Nc)h?", (Map) hashMap0);
      String string0 = jSONObject1.toString((-2264), 4837);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("H,Z#-kVM%r", (Object) null);
      jSONObject0.optLong("H,Z#-kVM%r");
      jSONObject1.keys();
      try { 
        jSONObject0.getBoolean("-1.0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"-1.0\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("]QxH<f~o7q", (-1L));
      JSONObject jSONObject2 = new JSONObject();
      jSONObject2.optBoolean("]QxH<f~o7q", true);
      JSONObject.valueToString(jSONObject1, 16, 13);
      jSONObject0.toString(0, (-664));
      jSONObject2.isNull("{\"java.lang.String@0000000002\": java.lang.Long@0000000003}");
      HashMap<Short, Integer> hashMap1 = new HashMap<Short, Integer>();
      JSONObject jSONObject3 = new JSONObject((Map) hashMap0);
      jSONObject0.optString("AJaaLBC{LK.$8?-82");
      jSONObject3.optString("getgetBytes", "istrim");
      try { 
        jSONObject1.get("I");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"I\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Number number0 = null;
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Boolean boolean0 = new Boolean("6jy**3rcvF:i ~\"-Ha");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.has("lO$v");
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.append("6jy**3rcvF:i ~\"-Ha", object0);
      JSONObject.valueToString(jSONObject1);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject1.optBoolean("has");
      jSONObject1.accumulate("6jy**3rcvF:i ~\"-Ha", "has");
      JSONObject.quote("AenVm)&QSToFtk,I");
      boolean boolean1 = jSONObject1.optBoolean("lO$v");
      assertEquals(2, jSONObject0.length());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Object object0 = JSONObject.NULL;
      Boolean boolean0 = new Boolean("D.AY-jc,XN`RD}N?>");
      Boolean boolean1 = hashMap0.getOrDefault(object0, boolean0);
      Boolean.compare(false, true);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.remove((Object) boolean0, (Object) boolean1);
      jSONObject0.put("D.AY-jc,XN`RD}N?>", (Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("isreplace", (-163.784837172));
      jSONObject1.optBoolean((String) null);
      String string0 = JSONObject.valueToString(jSONObject1, 0, 0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      String string1 = "]p!V@'^vTodDw?8]";
      jSONObject0.put("]p!V@'^vTodDw?8]", 0L);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.accumulate("", jSONArray0);
      int int0 = 1;
      // Undeclared exception!
      try { 
        linkedList0.removeLast();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("1-<P'</^@.\"nn/A~S!A", (-2492));
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONArray.", 1L);
      try { 
        jSONObject1.getJSONObject("] is not a JSONArray.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONArray.\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "]p!V@'^vTodDw\\8]";
      JSONObject jSONObject1 = jSONObject0.put("&a&f<5-.@um(F", 0L);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      JSONObject.getNames(jSONObject0);
      JSONArray jSONArray1 = new JSONArray();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      JSONObject jSONObject2 = jSONObject1.put("&a&f<5-.@um(F", (Collection) null);
      jSONObject2.optJSONArray("isputOpt");
      try { 
        jSONObject1.getJSONObject("&a&f<5-.@um(F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"&a&f<5-.@um(F\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.remove("A%&77p^Twpt=>");
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("]QxH<f~o7q", (-1L));
      JSONObject jSONObject1 = new JSONObject();
      boolean boolean0 = jSONObject1.optBoolean("]QxH<f~o7q", true);
      assertTrue(boolean0);
      
      JSONObject.getNames((Object) hashMap0);
      jSONObject0.toString(0, (-651));
      Boolean boolean1 = new Boolean("]QxH<f~o7q");
      HashMap<Short, Integer> hashMap1 = new HashMap<Short, Integer>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject1.optDouble("-eq7^%84La*m8(5sypC", 1965.3636521126425);
      assertEquals(1965.3636521126425, double0, 0.01);
      
      String string0 = JSONObject.doubleToString(65);
      assertEquals("65", string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      JSONObject.quote("");
      JSONObject jSONObject1 = jSONObject0.put("", (-278.8109406034778));
      jSONObject0.names();
      jSONObject1.toString((-62164681), 18);
      jSONObject1.has("");
      jSONObject1.append("\"\"", "\"\"");
      assertEquals(5, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("]p!V@'^vTodDw8]", 6L);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, stringArray0.length);
      
      JSONArray jSONArray1 = new JSONArray();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      JSONObject jSONObject2 = jSONObject1.put(",", (Collection) linkedList1);
      linkedList1.poll();
      String string0 = jSONObject2.toString((-664), (-664));
      boolean boolean0 = jSONObject1.isNull("{\n\"java.lang.String@0000000002\": java.lang.Long@0000000003,\n\"java.lang.String@0000000007\": []\n}");
      assertTrue(boolean0);
      
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      JSONObject jSONObject3 = new JSONObject((Map) null);
      jSONObject3.optBoolean(")n7)2$M=VQKcg+Nz", true);
      String string1 = jSONObject2.optString("{\n\"java.lang.String@0000000002\": java.lang.Long@0000000003,\n\"java.lang.String@0000000007\": []\n}");
      assertFalse(string1.equals((Object)string0));
      
      jSONObject1.optLong("");
      int int0 = jSONObject0.getInt("]p!V@'^vTodDw8]");
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Object object0 = JSONObject.NULL;
      Boolean boolean0 = new Boolean("D.AY-jc,XN`RD}N?>");
      Boolean boolean1 = hashMap0.getOrDefault(object0, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.remove((Object) boolean0, (Object) boolean1);
      jSONObject0.put("", (Map) hashMap0);
      Byte.toUnsignedInt((byte) (-34));
      Boolean.getBoolean("D.AY-jc,XN`RD}N?>");
      JSONObject jSONObject1 = jSONObject0.put("hASX~M#+7", false);
      jSONObject0.optBoolean("JSONArray[", true);
      byte byte0 = (byte)10;
      Byte.toUnsignedInt((byte)10);
      JSONObject jSONObject2 = new JSONObject();
      jSONObject1.optDouble(",");
      jSONObject2.optDouble((String) null);
      int int0 = new Byte((byte)10);
      JSONObject.doubleToString(10);
      try { 
        jSONObject1.getJSONArray("JSONArray[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JSONArray[\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Object object0 = JSONObject.NULL;
      Boolean boolean0 = new Boolean("D.AY-jc,XN`RD}N?>");
      hashMap0.getOrDefault(object0, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[7];
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.put("M^DGLih*X2WJQ~/]", 0.0);
      stringArray0[0] = "JSONArray[";
      stringArray0[1] = "";
      stringArray0[2] = "%%|@YvHdM=E(mpfhKel";
      Integer.getInteger("M^DGLih*X2WJQ~/]");
      Boolean boolean1 = new Boolean(true);
      hashMap0.put((Integer) null, boolean1);
      HashMap<Double, Object> hashMap1 = new HashMap<Double, Object>();
      Boolean boolean2 = new Boolean(true);
      JSONObject.getNames((Object) boolean2);
      JSONObject jSONObject3 = jSONObject2.put("", (Map) hashMap0);
      JSONObject jSONObject4 = jSONObject0.optJSONObject("");
      assertFalse(jSONObject4.equals((Object)jSONObject3));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("]QxH<f~o7q", (-1L));
      JSONObject jSONObject2 = new JSONObject();
      jSONObject2.optBoolean("]QxH<f~o7q", true);
      String string0 = jSONObject0.toString(0, (-642));
      jSONObject2.isNull("{\"java.lang.String@0000000002\": java.lang.Long@0000000003}");
      HashMap<Short, Integer> hashMap1 = new HashMap<Short, Integer>();
      JSONObject jSONObject3 = new JSONObject((Map) hashMap0);
      jSONObject0.optString("AJaaLBC{LK.$8?-82");
      jSONObject1.optLong("2=00-_)cl=S?/*f'");
      Byte byte0 = new Byte((byte) (-72));
      String string1 = JSONObject.numberToString(byte0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Unterminated string";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONArray jSONArray0 = jSONObject1.names();
      assertNull(jSONArray0);
      
      Object object0 = JSONObject.NULL;
      boolean boolean0 = jSONObject1.isNull("Unterminated string");
      assertTrue(boolean0);
      
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      jSONObject1.put("@V.Ph", 1149.59701772);
      jSONObject2.remove("@V.Ph");
      String string0 = JSONObject.doubleToString((-24668172));
      assertEquals("-2.4668172E7", string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject.valueToString((Object) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of null
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Byte.compare((byte)0, (byte)0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "(]c#.4w";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      String string0 = jSONObject0.toString();
      assertEquals("{}", string0);
      
      Byte.toUnsignedInt((byte) (-34));
      JSONObject jSONObject1 = jSONObject0.put("", true);
      String string1 = jSONObject1.toString(70, 222);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "]p!V@'^vTodDw\\8]";
      jSONObject0.put("]p!V@'^vTodDw8]", 6L);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      JSONObject.getNames(jSONObject0);
      JSONArray jSONArray1 = new JSONArray();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      JSONObject jSONObject1 = jSONObject0.put(",", (Collection) linkedList0);
      jSONObject1.optJSONArray((String) null);
      try { 
        jSONObject1.getJSONObject("F&U?}-?r;k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"F&U?}-?r;k\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      assertEquals(1, jSONObject1.length());
      
      jSONObject1.toString(46, 46);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      
      int int0 = jSONObject0.optInt("Null pointer");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      JSONObject.getNames(jSONObject1);
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject2 = new JSONObject();
      JSONObject jSONObject3 = jSONObject2.put(",", (Collection) null);
      jSONObject3.optJSONArray((String) null);
      String string0 = "F&U?}-?r;k";
      try { 
        jSONObject0.getJSONObject("-8$l7aoDJ7>y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"-8$l7aoDJ7>y\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.optBoolean("@eXhh-$kF");
      jSONObject0.optDouble((String) null);
      HashMap<Short, Float> hashMap0 = new HashMap<Short, Float>();
      Float float0 = new Float(0.0F);
      hashMap0.put((Short) null, float0);
      jSONObject0.put("@eXhh-$kF", (Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.toString((-8323580), 115);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("&a&f<5-.@um(F", 0L);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      JSONObject.getNames(jSONObject0);
      JSONArray jSONArray1 = new JSONArray();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      JSONObject jSONObject2 = jSONObject1.put("&a&f<5-.@um(F", (Collection) null);
      jSONObject2.optString("] not found.");
      JSONArray jSONArray2 = jSONObject0.getJSONArray("&a&f<5-.@um(F");
      assertEquals(0, jSONArray2.length());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Object object0 = JSONObject.NULL;
      Boolean boolean0 = new Boolean("D.AY-jc,XN`RD}N?>");
      Boolean boolean1 = hashMap0.getOrDefault(object0, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[7];
      hashMap0.remove((Object) boolean0, (Object) boolean1);
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      jSONObject1.put("M^DGLih*X2WJQ~/]", 0.0);
      stringArray0[0] = "JSONArray[";
      Integer integer0 = new Integer((-265));
      Boolean boolean2 = Boolean.FALSE;
      Boolean boolean3 = new Boolean((String) null);
      hashMap0.put(integer0, boolean3);
      JSONObject jSONObject2 = new JSONObject((Object) "] is not a JSONArray.");
      JSONObject jSONObject3 = new JSONObject(jSONObject2, stringArray0);
      jSONObject3.remove((String) null);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject3.toJSONArray(jSONArray0);
      assertEquals(3, jSONObject2.length());
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONrray", (Collection) linkedList0);
      jSONObject1.optBoolean("@eXhh-$kF");
      jSONObject0.optDouble((String) null);
      jSONObject0.optDouble((String) null);
      HashMap<Short, Float> hashMap0 = new HashMap<Short, Float>();
      Short short0 = new Short((short)45);
      Float float0 = new Float(Double.NaN);
      hashMap0.put(short0, float0);
      jSONObject1.put("@eXhh-$kF", (Map) hashMap0);
      try { 
        jSONObject1.toString((-8323580), 115);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put("@26V`|d-ur]L6", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HashMap<JSONObject, Long> hashMap0 = new HashMap<JSONObject, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(hashMap0, (-3821), (-3821));
      String[] stringArray0 = JSONObject.getNames((Object) hashMap0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HashMap<Float, Double> hashMap0 = new HashMap<Float, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (-1L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Object object0 = JSONObject.NULL;
      Boolean boolean0 = new Boolean("D.AY-jc,XN`RD}N?>");
      Boolean boolean1 = hashMap0.getOrDefault(object0, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[7];
      hashMap0.remove((Object) boolean0, (Object) boolean1);
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      jSONObject1.put("M^DGLih*X2WJQ~/]", 0.0);
      stringArray0[0] = "JSONArray[";
      stringArray0[1] = "";
      stringArray0[2] = "%%|@YvHdM=E(mpfhKel";
      String string0 = jSONObject1.toString(18, 0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Short short0 = Short.valueOf((short)630);
      JSONObject.numberToString(short0);
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(hashMap0);
      jSONObject0.has("java.lang.Short@0000000001");
      try { 
        jSONObject0.append((String) null, short0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      jSONObject0.put("isput", (Object) null);
      String string0 = jSONObject0.toString();
      assertEquals(0, jSONObject0.length());
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double double0 = 3665.62732;
      JSONObject.doubleToString(3665.62732);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "3665.62732";
      stringArray0[1] = "3665.62732";
      JSONObject jSONObject0 = new JSONObject("3665.62732", stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOpt("n", "3665.62732");
      try { 
        jSONObject1.put((String) null, 3665.62732);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = "4c.pNVpJ$";
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Short short0 = new Short((short)1995);
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.put("'", (Collection) linkedList0);
      String string0 = jSONObject0.toString((int) (short)1995, (int) (short)1995);
      JSONObject jSONObject1 = new JSONObject(string0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("wheel.json.JSONException", 0L);
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0, 32, 32);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Short short0 = Short.valueOf((short)630);
      JSONObject.numberToString(short0);
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      long long0 = jSONObject0.optLong("]_t-p'6'!Jf?Xa*xx_");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong((String) null);
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[2];
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      jSONObject0.optDouble("");
      jSONObject0.optInt("", (-1274));
      Short short0 = new Short((short)102);
      Short.compare((short)0, (short)102);
      Short.toUnsignedInt((short)0);
      short short1 = (short)2520;
      Short.compare((short)2520, (short)0);
      JSONObject.valueToString(short0, (short)102, (-1249));
      try { 
        jSONObject0.getJSONObject("java.lang.Short@0000000003");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.Short@0000000003\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("istoOctalString");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("&a&f<5-.@um(F", 0L);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Float float0 = new Float(0.0F);
      JSONObject.numberToString(float0);
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      jSONObject0.keys();
      Double double0 = new Double(0.0);
      JSONObject.valueToString(double0, (-1156), (-1156));
      boolean boolean0 = jSONObject0.has("ha");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toJSONArray((JSONArray) null);
      JSONObject jSONObject1 = jSONObject0.accumulate("", "");
      jSONObject0.optLong("");
      Iterator iterator0 = jSONObject1.keys();
      jSONObject0.optBoolean("vqtt_6%!}V;e");
      JSONObject jSONObject2 = jSONObject0.accumulate("", iterator0);
      jSONObject2.remove((String) null);
      jSONObject1.names();
      JSONObject.getNames(jSONObject2);
      String string0 = jSONObject0.toString((-1537));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 160);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      JSONObject.getNames(jSONObject0);
      JSONArray jSONArray1 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray1);
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.put("", (Collection) null);
      jSONObject1.toString();
      String string0 = jSONObject0.toString(23, 12);
      String string1 = jSONObject0.optString("", "03/wk)M/@Du#Wc");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.optLong("");
      jSONObject0.keys();
      try { 
        jSONObject0.getBoolean("getnotify");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getnotify\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "4c.pNVpJ$";
      Object object0 = JSONObject.NULL;
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.putOpt((String) null, jSONArray0);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject.doubleToString(2397.90619322244);
      Object object0 = new Object();
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.doubleToString(2744.154782173253);
      assertEquals("2744.154782173253", string0);
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      boolean boolean0 = jSONObject0.optBoolean(":/p[aH/4C$<1%`fQ#R");
      assertFalse(boolean0);
      
      int int0 = jSONObject0.optInt((String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "JSONArray[";
      stringArray0[1] = "";
      stringArray0[2] = "%%|@YvHdM=E(mpfhKel";
      Integer.getInteger("M^DGLih*X2WJQ~/]");
      Boolean boolean0 = new Boolean(true);
      hashMap0.put((Integer) null, boolean0);
      stringArray0[3] = "Unclosed comment";
      stringArray0[4] = "] is not a JSONArray.";
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      String string0 = jSONObject1.toString(3306, 13);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      JSONObject jSONObject1 = jSONObject0.put("isfloatToRawIntBits", (Map) hashMap0);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("8xA&Gq$q'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"8xA&Gq$q'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Short short0 = new Short((short)630);
      String string0 = JSONObject.numberToString(short0);
      assertNotNull(string0);
      
      String[] stringArray0 = JSONObject.getNames((Object) "java.lang.Short@0000000001");
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject("java.lang.Short@0000000001", stringArray0);
      jSONObject0.put("q*/aU9h8anyRw]~})cJ", (Object) "java.lang.Short@0000000001");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("o.XkwxFTqeBnek", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[8];
      stringArray0[1] = stringArray0[0];
      JSONObject jSONObject1 = new JSONObject();
      try { 
        jSONObject1.put(stringArray0[1], 2752L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(2, jSONObject0.length());
      
      String string0 = JSONObject.valueToString(linkedList0, 822, 822);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "`A[3";
      stringArray0[1] = "].H;GBtkz]G^:";
      stringArray0[2] = "ap";
      stringArray0[3] = "' and instead saw '";
      stringArray0[4] = "";
      stringArray0[5] = "W7gG2a ";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      String string0 = jSONObject0.toString(0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      String string0 = ":/p[aH/4C$<1%`fQ#R";
      jSONObject0.put("BdVgxec_-Y", (Object) null);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "i5O8![00";
      stringArray0[2] = ".";
      stringArray0[3] = ":/p[aH/4C$<1%`fQ#R";
      stringArray0[4] = "i5O8![00";
      stringArray0[5] = "BdVgxec_-Y";
      stringArray0[6] = "BdVgxec_-Y";
      try { 
        jSONObject0.getString("BdVgxec_-Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"BdVgxec_-Y\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "JSONArray[";
      stringArray0[1] = "";
      stringArray0[2] = "%%|@YvHdM=E(mpfhKel";
      Integer.getInteger("M^DGLih*X2WJQ~/]");
      Boolean boolean0 = new Boolean(true);
      hashMap0.put((Integer) null, boolean0);
      stringArray0[3] = "Unclosed comment";
      stringArray0[4] = "] is not a JSONArray.";
      stringArray0[5] = "!;3K:Jq";
      JSONObject jSONObject0 = new JSONObject((Object) "%%|@YvHdM=E(mpfhKel");
      jSONObject0.opt("JSONArray[");
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Double double0 = new Double((-626.67));
      JSONObject jSONObject0 = new JSONObject(double0);
      Double.min(1626.0, 0.0);
      JSONObject jSONObject1 = jSONObject0.put("K81bDWZG&AK|zB", (-626.67));
      Long long0 = new Long(0L);
      JSONObject.valueToString(long0);
      jSONObject0.toString((-4986), (-4986));
      Long long1 = Long.getLong("'", 997L);
      Object object0 = JSONObject.NULL;
      int int0 = (-2260);
      jSONObject1.toString();
      Long.divideUnsigned((-1L), 2443L);
      JSONObject.valueToString(object0, (-2260), 104);
      Long long2 = new Long(997L);
      Double.max(7550857173028879L, 2443L);
      Long.getLong("'", long2);
      jSONObject1.append("NaF2JigU[1Jc>)", long1);
      try { 
        jSONObject0.getDouble("o[A8MPgcV)G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"o[A8MPgcV)G\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      JSONObject.quote("000");
      jSONObject1.toString();
      jSONObject1.names();
      Boolean boolean0 = new Boolean("Unterminated string");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "\"000\"";
      stringArray0[1] = "\"000\"";
      String string0 = "\\u";
      stringArray0[2] = string0;
      stringArray0[3] = "\"000\"";
      stringArray0[4] = "{}";
      stringArray0[5] = "\"000\"";
      stringArray0[6] = "] not found.";
      stringArray0[7] = "{}";
      stringArray0[8] = "\"000\"";
      JSONObject jSONObject2 = new JSONObject(boolean0, stringArray0);
      JSONObject jSONObject3 = jSONObject1.append("] not found.", jSONObject2);
      jSONObject3.optDouble(".*Z7`Y!PoI\"");
      jSONObject0.optBoolean("Unterminated string", false);
      jSONObject1.optString("\u0003JfU&Zv");
      jSONObject1.optLong("Unterminated string");
      try { 
        jSONObject3.getBoolean("] not found.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] not found.\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Object object0 = JSONObject.NULL;
      Boolean boolean0 = new Boolean("D.AY-jc,XN`RD}N?>");
      hashMap0.getOrDefault(object0, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[7];
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.put("M^DGLih*X2WJQ~/]", 0.0);
      stringArray0[0] = "JSONArray[";
      stringArray0[1] = "";
      stringArray0[2] = "%%|@YvHdM=E(mpfhKel";
      JSONObject.quote("JSONArray[");
      jSONObject0.toString();
      jSONObject2.putOpt("D.AY-jc,XN`RD}N?>", "M^DGLih*X2WJQ~/]");
      assertEquals(3, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(10, 123);
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      Collection<String> collection0 = hashMap0.values();
      try { 
        jSONObject0.put((String) null, collection0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      Boolean boolean0 = new Boolean("");
      JSONObject jSONObject1 = jSONObject0.put("", (Object) boolean0);
      stringArray0[6] = "isintern";
      jSONObject1.names();
      jSONObject1.optBoolean("", true);
      long long0 = jSONObject0.optLong("Unterminated string");
      jSONObject0.optLong("(oZCGc>l<C$>M`=`Kw/");
      Object object0 = JSONObject.NULL;
      Long long1 = Long.valueOf(2073L);
      JSONObject.testValidity(long1);
      assertFalse(long1.equals((Object)long0));
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Object object0 = JSONObject.NULL;
      Boolean boolean0 = new Boolean("D.AY-jc,XN`RD}N?>");
      Boolean boolean1 = hashMap0.getOrDefault(object0, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[7];
      hashMap0.remove((Object) boolean0, (Object) boolean1);
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.put("M^DGLih*X2WJQ~/]", 0.0);
      stringArray0[0] = "JSONArray[";
      stringArray0[1] = "";
      stringArray0[2] = "%%|@YvHdM=E(mpfhKel";
      HashMap<Double, Object> hashMap1 = new HashMap<Double, Object>();
      JSONObject.getNames((Object) "M^DGLih*X2WJQ~/]");
      JSONObject jSONObject3 = jSONObject2.put("pL0+*q^ha[ynp'%H3", (Map) hashMap1);
      jSONObject3.put("nj`Tt2u[>d", (Object) "JSONArray[");
      JSONObject jSONObject4 = jSONObject3.optJSONObject((String) null);
      assertNull(jSONObject4);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      String string0 = JSONObject.valueToString(boolean0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.toString(10, 10);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "JSONArray[";
      stringArray0[1] = "";
      stringArray0[2] = "%%|@YvHdM=E(mpfhKel";
      Integer.getInteger("M^DGLih*X2WJQ~/]");
      Boolean boolean0 = new Boolean(true);
      stringArray0[3] = "Unclosed comment";
      stringArray0[4] = "] is not a JSONArray.";
      stringArray0[5] = "!;3K:Jq";
      JSONObject jSONObject0 = new JSONObject((Object) "%%|@YvHdM=E(mpfhKel");
      jSONObject0.put("", 2305L);
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("]p!V@'^vTodDw8]", 6L);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(1.0);
      linkedList0.add(double0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, stringArray0.length);
      
      JSONArray jSONArray1 = new JSONArray();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      JSONObject jSONObject2 = jSONObject1.put(",", (Collection) linkedList1);
      String string0 = jSONObject2.toString((-664), (-664));
      boolean boolean0 = jSONObject1.isNull("{\n\"java.lang.String@0000000002\": java.lang.Long@0000000003,\n\"java.lang.String@0000000007\": []\n}");
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      JSONObject jSONObject3 = new JSONObject((Map) null);
      String string1 = jSONObject3.toString();
      assertEquals("{}", string1);
      assertFalse(string1.equals((Object)string0));
      
      jSONObject1.getString("]p!V@'^vTodDw8]");
      boolean boolean1 = jSONObject3.optBoolean(")n7)2$M=VQKcg+Nz", true);
      assertTrue(boolean1 == boolean0);
      
      String string2 = jSONObject2.optString("{\n\"java.lang.String@0000000002\": java.lang.Long@0000000003,\n\"java.lang.String@0000000007\": []\n}");
      assertFalse(string2.equals((Object)string0));
      
      jSONObject1.optLong("");
      int int0 = jSONObject0.getInt("]p!V@'^vTodDw8]");
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>(linkedList0);
      Double double0 = new Double(0.0);
      linkedList1.add(double0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      jSONObject0.toJSONArray(jSONArray0);
      JSONArray jSONArray1 = jSONObject0.names();
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.quote("PIOy</>J");
      assertEquals("\"PIOy<\\/>J\"", string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toJSONArray((JSONArray) null);
      JSONObject jSONObject1 = jSONObject0.accumulate("", "");
      JSONObject jSONObject2 = jSONObject1.put("", (-2244));
      jSONObject1.keys();
      JSONObject.getNames((Object) jSONObject0);
      JSONArray jSONArray0 = jSONObject1.names();
      JSONObject jSONObject3 = jSONObject2.putOpt("", jSONArray0);
      assertSame(jSONObject3, jSONObject2);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate(",:]}/\"[{;=#", ",:]}/\"[{;=#");
      jSONObject1.optJSONArray(",:]}/\"[{;=#");
      Float float0 = new Float(0.0);
      Integer integer0 = new Integer(12);
      hashMap0.put(float0, integer0);
      JSONObject.quote(",:]}/\"[{;=#");
      JSONObject jSONObject2 = jSONObject1.accumulate(",:]}/\"[{;=#", jSONObject0);
      jSONObject2.remove("Expected a ',' or '}'");
      jSONObject2.toString();
      JSONObject.getNames(jSONObject1);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('w');
      // Undeclared exception!
      jSONObject1.write(stringWriter1);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = JSONObject.quote("_\"6- ~");
      assertEquals("\"_\\\"6- ~\"", string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONObject$1", 4342L);
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      jSONObject0.optJSONArray("Null key.");
      Byte byte0 = new Byte((byte) (-81));
      JSONObject.numberToString(byte0);
      double double0 = jSONObject0.optDouble("wheel.json.JSONObject$1", (double) (byte) (-81));
      assertEquals(4342.0, double0, 0.01);
      
      String[] stringArray0 = JSONObject.getNames(jSONObject1);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject.getNames((Object) "jx=/+k");
      JSONObject jSONObject0 = new JSONObject((Object) "jx=/+k");
      // Undeclared exception!
      jSONObject0.toString(1798, 1798);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
      
      JSONTokener jSONTokener0 = new JSONTokener("null");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of null
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("&a&f<5-.@um(F", 0L);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      JSONObject.getNames(jSONObject0);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      jSONObject0.optString("&a&f<5-.@um(F");
      try { 
        jSONObject0.getJSONArray("&a&f<5-.@um(F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"&a&f<5-.@um(F\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      jSONObject0.optBoolean("vK", true);
      Object object0 = new Object();
      JSONObject.getNames(object0);
      jSONObject1.toString((-664), 0);
      Boolean boolean0 = new Boolean("toJ");
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      jSONObject1.optString("");
      Short short0 = new Short((short)2106);
      Integer integer0 = new Integer((-664));
      hashMap0.put(short0, integer0);
      try { 
        jSONObject1.getJSONArray("getoptJSONArray");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getoptJSONArray\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "]p!V@'^vTodDw\\8]";
      jSONObject0.put("]p!V@'^vTodDw8]", 6L);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      JSONObject.getNames(jSONObject0);
      JSONArray jSONArray1 = new JSONArray();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      JSONObject jSONObject1 = jSONObject0.put(",", (Collection) linkedList0);
      jSONObject1.optJSONArray(",");
      try { 
        jSONObject1.getJSONObject("F&U?}-?r;k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"F&U?}-?r;k\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(object0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("]QxH<f~o7q", (-1L));
      JSONObject jSONObject1 = new JSONObject();
      jSONObject0.toString(1944, 2);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      HashMap<JSONObject, Float> hashMap0 = new HashMap<JSONObject, Float>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString((Object) null);
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      assertEquals(1, jSONObject1.length());
      
      jSONObject0.put("Qcm?'xh|'#.jco9", true);
      boolean boolean0 = jSONObject0.getBoolean("Qcm?'xh|'#.jco9");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(" c?sQ'P,_\"yB\"*'", (-581L));
      JSONObject jSONObject2 = jSONObject1.put("-1312.7335250", (Collection) null);
      jSONObject2.optInt(" c?sQ'P,_\"yB\"*'");
      String string0 = jSONObject1.toString((-1), 1899);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONArray", (Collection) linkedList0);
      jSONObject1.optBoolean("@eXhh-$kF");
      jSONObject0.optDouble((String) null);
      HashMap<Short, Float> hashMap0 = new HashMap<Short, Float>();
      jSONObject1.put("@eXhh-$kF", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter(1301);
      StringWriter stringWriter1 = stringWriter0.append('y');
      Writer writer0 = jSONObject0.write(stringWriter1);
      assertSame(stringWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = JSONObject.doubleToString(646.614281534892);
      assertEquals("646.614281534892", string0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("\"\"");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = " at character ";
      stringArray0[1] = "0";
      stringArray0[2] = "0";
      stringArray0[3] = " at character ";
      stringArray0[4] = " at character ";
      stringArray0[5] = "0";
      JSONObject jSONObject0 = new JSONObject(" at character ", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("0", 1L);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      long long0 = jSONObject0.getLong("0");
      assertEquals(1L, long0);
      
      JSONObject jSONObject2 = jSONObject0.put("Bad value from toJSONString: ", (Collection) linkedList0);
      jSONObject0.put("isisNaN", (Collection) linkedList0);
      jSONObject1.optString("0");
      boolean boolean0 = jSONObject2.optBoolean((String) null, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("] is notca numbr.", 1L);
      double double0 = jSONObject0.getDouble("] is notca numbr.");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("B+(<Wc>*", 4342L);
      JSONObject jSONObject1 = jSONObject0.put("-1312.7335250", (Collection) null);
      String string0 = jSONObject0.toString();
      jSONObject1.toString(69, 42);
      String string1 = JSONObject.quote("{\n                                                                                                               \"java.lang.String@0000000005\": [],\n                                                                                                               \"java.lang.String@0000000002\": java.lang.Long@0000000003\n                                          }");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals(3, jSONObject0.length());
      
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Boolean boolean0 = new Boolean("{\"java.lang.String@0000000004\":[],\"java.lang.String@0000000007\":\"java.lang.Class@0000000008\",\"java.lang.String@0000000002\":java.lang.Boolean@0000000003}");
      hashMap0.put((Integer) null, boolean0);
      JSONObject jSONObject1 = new JSONObject((Object) hashMap0);
      jSONObject0.opt("");
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[0] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      Boolean boolean0 = new Boolean("");
      Boolean.logicalAnd(false, false);
      jSONObject0.put("", (Object) boolean0);
      jSONObject0.getBoolean("");
      stringArray0[6] = "isintern";
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("1.0");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of 1.0
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(" 6S86l7J|Qb$S3&", 0L);
      jSONObject1.optInt(" 6S86l7J|Qb$S3&");
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.toString();
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Boolean boolean0 = new Boolean("{\"java.lang.String@0000000004\":[],\"java.lang.String@0000000007\":\"java.lang.Class@0000000008\",\"java.lang.String@0000000002\":java.lang.Boolean@0000000003}");
      hashMap0.put((Integer) null, boolean0);
      try { 
        jSONObject0.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("[{J0npRTTC,l*:oUb", (-10384350));
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Short short0 = new Short((short)1477);
      String string0 = JSONObject.valueToString(short0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((Object) null);
      try { 
        jSONObject0.toJSONArray(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("}{", (Collection) null);
      JSONObject.valueToString(jSONObject0);
      jSONObject0.accumulate("}{", jSONObject1);
      try { 
        jSONObject1.getBoolean("}{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"}{\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.keys();
      JSONObject jSONObject1 = new JSONObject();
      JSONObject.getNames((Object) hashMap0);
      jSONObject0.toString(0, (-664));
      HashMap<Short, Integer> hashMap1 = new HashMap<Short, Integer>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      jSONObject2.putOpt("{}", (Object) null);
      jSONObject0.optString("AJaaLBC{LK.$8?-82");
      try { 
        jSONObject1.getJSONArray("61^hKcu%U4S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"61^hKcu%U4S\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float.sum(480.0F, 0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.accumulate("\f", (Object) null);
      jSONObject1.optBoolean("\"\"");
      String string0 = "";
      try { 
        jSONObject1.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("]QxH<f~o7q", (-1L));
      JSONObject jSONObject2 = jSONObject1.put(" of ", (-1L));
      JSONObject jSONObject3 = new JSONObject();
      boolean boolean0 = jSONObject3.optBoolean("flo", true);
      jSONObject0.toString(0, 0);
      boolean boolean1 = jSONObject3.isNull("]QxH<f~o7q");
      assertTrue(boolean1 == boolean0);
      
      HashMap<Short, Integer> hashMap1 = new HashMap<Short, Integer>();
      JSONObject jSONObject4 = new JSONObject((Map) hashMap0);
      jSONObject2.optString("getcompare");
      long long0 = jSONObject1.optLong("]QxH<f~o7q");
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Double double0 = new Double(0.0);
      Double.isFinite(462.43633208520953);
      JSONObject jSONObject0 = new JSONObject(double0);
      Double.isFinite(0.0);
      JSONObject jSONObject1 = jSONObject0.put("-S-k'nD]sJG,OsDFx", 601.85018905);
      jSONObject0.optLong("-S-k'nD]sJG,OsDFx");
      Double double1 = new Double(3667.457960986);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONObject1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = "{QlW1fg8MU=L";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{QlW1fg8MU=L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 12 of {QlW1fg8MU=L
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Unterminated string";
      Object object0 = JSONObject.NULL;
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      Object object1 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object1);
      jSONObject0.optDouble("");
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{QlW1fg8MU=L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 12 of {QlW1fg8MU=L
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      jSONObject0.put("(", (Collection) linkedList0);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.getJSONArray("(");
      assertFalse(jSONArray1.equals((Object)jSONArray0));
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("acc");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("add", false);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("r<G");
      String string0 = "ishashCode";
      linkedList0.addLast("ishashCode");
      linkedList0.add("ishashCode");
      linkedList0.removeLastOccurrence(jSONArray0);
      int int0 = 2058;
      jSONArray0.optLong(2058, 0L);
      jSONArray0.put((Collection) linkedList0);
      jSONArray0.put(true);
      // Undeclared exception!
      JSONObject.valueToString(jSONArray0, 814, 814);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Short.valueOf((short)630);
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      Short short0 = new Short((short) (-1318));
      Integer integer0 = new Integer((short) (-1318));
      hashMap0.put(short0, integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optLong("<Ns`& Q");
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "]QxH<f~o7q";
      JSONObject jSONObject1 = jSONObject0.put("]QxH<f~o7q", (-1L));
      Boolean boolean0 = new Boolean("isintern");
      String string1 = null;
      try { 
        jSONObject1.put((String) null, (Object) "]QxH<f~o7q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      jSONObject0.toJSONArray((JSONArray) null);
      JSONObject jSONObject1 = jSONObject0.accumulate("", "");
      jSONObject0.optLong("");
      jSONObject1.keys();
      try { 
        jSONObject0.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Short short0 = new Short((short)1209);
      JSONObject jSONObject0 = new JSONObject(short0);
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      jSONObject0.put(",", (Collection) linkedList0);
      linkedList0.poll();
      String string0 = jSONObject0.toString(1909, (int) (short)1209);
      Float float0 = new Float(799.42F);
      JSONObject jSONObject1 = new JSONObject(string0);
      try { 
        jSONObject1.get(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\njava.lang.String@0000000006\\\": [],\\njava.lang.String@0000000002\\\": \\\"java.lang.Class@0000000003\\\"\\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         }\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "]p!V@'^vTodDw\\8]";
      JSONObject jSONObject1 = jSONObject0.put("]p!V@'^vTodDw8]", 6L);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject.getNames(jSONObject0);
      JSONArray jSONArray1 = new JSONArray();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      jSONObject0.put(",", (Collection) linkedList0);
      linkedList1.poll();
      String string1 = "";
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      stringWriter1.append('c');
      jSONObject1.write(stringWriter1);
      jSONObject1.get(",");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      HashMap<String, JSONArray> hashMap1 = new HashMap<String, JSONArray>(hashMap0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap1);
      Byte byte0 = new Byte((byte)18);
      JSONObject.valueToString(byte0);
      jSONObject1.opt("");
      Double double0 = new Double((-13.443557177));
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, jSONObject0.length());
      
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject1 = jSONObject0.put(".$&Ys}0#P#ph", (Collection) linkedList0);
      HashMap<Short, Float> hashMap0 = new HashMap<Short, Float>();
      jSONObject0.put("Km'kC\"w-Iq([PU+", (Map) hashMap0);
      JSONArray jSONArray0 = jSONObject1.optJSONArray(".$&Ys}0#P#ph");
      assertEquals(0, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Object object0 = JSONObject.NULL;
      Boolean boolean0 = new Boolean("D.AY-jc,XN`RD}N?>");
      Boolean boolean1 = hashMap0.getOrDefault(object0, boolean0);
      Boolean.compare(false, true);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.remove((Object) boolean0, (Object) boolean1);
      jSONObject0.put("D.AY-jc,XN`RD}N?>", (Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("isreplace", (-163.784837172));
      jSONObject1.optBoolean((String) null);
      String string0 = jSONObject0.toString(0, (-241));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.keys();
      try { 
        jSONObject0.getString("nl!DVR5Q%I");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"nl!DVR5Q%I\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Long long0 = new Long((-64L));
      String[] stringArray0 = new String[3];
      stringArray0[0] = "] is not a JSONObject.";
      stringArray0[1] = "] not found.";
      stringArray0[2] = "\t";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      try { 
        jSONObject0.getDouble("JSONArray[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JSONArray[\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      jSONObject0.toJSONArray((JSONArray) null);
      jSONObject0.accumulate("", "");
      Long long0 = new Long((-1L));
      Long.min((-1L), (-1L));
      try { 
        jSONObject0.append("", long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("]p!V@'^vTodDw8]", 6L);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      JSONArray jSONArray1 = new JSONArray();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      JSONObject jSONObject1 = jSONObject0.put(",", (Collection) linkedList0);
      linkedList1.poll();
      StringWriter stringWriter0 = new StringWriter();
      Boolean boolean0 = Boolean.FALSE;
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Integer integer0 = new Integer((-1118));
      hashMap0.put(integer0, boolean0);
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      jSONObject2.remove("qX6`3;p");
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      JSONObject.quote("Ue,hpEMa/");
      LinkedList<Long> linkedList3 = new LinkedList<Long>();
      JSONArray jSONArray2 = new JSONArray((Collection) linkedList3);
      assertFalse(jSONArray2.equals((Object)jSONArray0));
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("getdescendingIterator");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getdescendingIterator\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("A JSONArray text must start with '['", (-1L));
      JSONObject jSONObject2 = new JSONObject();
      boolean boolean0 = jSONObject2.optBoolean("0-%", true);
      jSONObject1.toString(34, (-664));
      boolean boolean1 = jSONObject2.isNull("en");
      assertTrue(boolean1 == boolean0);
      
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      JSONObject jSONObject3 = new JSONObject((Map) hashMap0);
      jSONObject0.optString("A JSONArray text must start with '['");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Dl4*Z&%%glWr|";
      stringArray0[1] = "]QxH<f~o7q";
      stringArray0[2] = "{\"java.lang.String@0000000002\": java.lang.Long@0000000003}";
      stringArray0[3] = "2=00-_)cl=S?/*f'";
      stringArray0[4] = "java.lang.Long@0000000003";
      JSONObject jSONObject4 = new JSONObject(jSONObject1, stringArray0);
      long long0 = jSONObject4.optLong("A JSONArray text must start with '['");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Short, Byte> hashMap0 = new HashMap<Short, Byte>();
      JSONObject jSONObject1 = jSONObject0.put("iscompare", (Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      JSONObject jSONObject2 = jSONObject1.optJSONObject("iscompare");
      assertEquals(0, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("]QxH<f~o7q", (-1L));
      JSONObject jSONObject2 = new JSONObject((Object) "]QxH<f~o7q");
      jSONObject1.toString(59, 2);
      boolean boolean0 = new Boolean("{\"java.lang.String@0000000002\": java.lang.Long@0000000003}");
      jSONObject1.put("{\"java.lang.String@0000000002\": java.lang.Long@0000000003}", (-757.182));
      JSONObject jSONObject3 = new JSONObject((Map) hashMap0);
      jSONObject3.optString("{\"java.lang.String@0000000002\": java.lang.Long@0000000003}");
      jSONObject2.optLong("2=00-_)cl=S?/*f'");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>(linkedList0);
      JSONObject jSONObject4 = jSONObject3.put("", (Collection) linkedList1);
      assertEquals(1, jSONObject4.length());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "L@i^.aS");
      jSONObject0.has("L@i^.aS");
      JSONObject jSONObject1 = jSONObject0.append("L@i^.aS", "L@i^.aS");
      JSONObject.valueToString("L@i^.aS");
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      JSONArray jSONArray1 = new JSONArray();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject2 = jSONObject1.put("for", (Collection) linkedList0);
      jSONObject2.optJSONArray("");
      try { 
        jSONObject2.getJSONObject("\"k\t'?z|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"k\\t'?z|\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("YBnpNnh]?P#?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"YBnpNnh]?P#?\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{QlW1fg8MUq4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 12 of {QlW1fg8MUq4
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Byte.compare((byte)0, (byte)0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "(]c#.4w";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      jSONObject0.toString();
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[14];
      charArray0[0] = 'T';
      charArray0[1] = 'E';
      charArray0[2] = 'l';
      charArray0[3] = 'E';
      charArray0[4] = 'F';
      charArray0[5] = '5';
      charArray0[6] = '%';
      stringWriter0.write(charArray0);
      Float.isFinite(1806.27F);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringWriter0.append((CharSequence) stringBuffer0);
      jSONObject0.write(stringWriter0);
      try { 
        jSONObject0.getJSONArray("61^hKcu%U4S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"61^hKcu%U4S\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("JSONObject[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of JSONObject[
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "isintern";
      stringArray0[7] = "";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject1.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONArray", (Collection) linkedList0);
      jSONObject1.append("wheel.json.JSONArray", linkedList0);
      String string0 = JSONObject.quote("wheel.json.JSONArray");
      assertEquals("\"wheel.json.JSONArray\"", string0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals("{}", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      String string0 = "] is not a number.";
      JSONObject.getNames((Object) "] is not a number.");
      stringArray0[0] = "] is not a number.";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      String string1 = "\\b";
      String string2 = "+S";
      JSONObject jSONObject2 = jSONObject1.put("\b", (Object) "+S");
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject3 = jSONObject2.put("] is not a number.", object0);
      jSONObject3.optString("] is not a number.", "] is not a number.");
      jSONObject1.optBoolean("] is not a number.");
      try { 
        jSONObject3.getInt("true");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"true\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      jSONObject0.toString((-581), (-581));
      StringWriter stringWriter0 = new StringWriter();
      HashMap<Byte, Long> hashMap0 = new HashMap<Byte, Long>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject1.write(stringWriter0);
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Short short0 = Short.valueOf((short)630);
      JSONObject.numberToString(short0);
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("]_t-p'6'!Jf?Xa*xx_");
      assertEquals("", string0);
      
      long long0 = jSONObject0.optLong("<Ns`& Q");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String string0 = JSONObject.quote("\f");
      assertEquals("\"\\f\"", string0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("toS", "toS");
      jSONObject0.optLong("toS");
      jSONObject1.toString();
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("hLX~[Z\"J't>%", (Object) "hLX~[Z\"J't>%");
      JSONObject.getNames(jSONObject0);
      try { 
        jSONObject1.append("hLX~[Z\"J't>%", "hLX~[Z\"J't>%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[hLX~[Z\"J't>%] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      assertNotNull(object0);
      
      Object object1 = JSONObject.NULL;
      JSONObject.getNames(object1);
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.toString();
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Boolean boolean0 = new Boolean("{\"java.lang.String@0000000004\":[],\"java.lang.String@0000000007\":\"java.lang.Class@0000000008\",\"java.lang.String@0000000002\":java.lang.Boolean@0000000003}");
      JSONObject jSONObject1 = new JSONObject((Object) hashMap0);
      jSONObject1.optLong((String) null);
      try { 
        jSONObject1.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.doubleToString(2247.250817243588);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String string0 = JSONObject.valueToString(jSONArray0);
      jSONObject0.put("2247.250817243588", 2247.250817243588);
      JSONObject.valueToString(linkedList0, 11, 23);
      String string1 = jSONObject0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "(]c#.4w";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      jSONObject0.optLong("2=00-_)cl=S?/*f'");
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float((-2323.4709567969153));
      JSONObject jSONObject1 = new JSONObject();
      jSONObject0.optJSONArray((String) null);
      Float float1 = new Float((-2417.646568));
      JSONObject.numberToString(float1);
      jSONObject0.put("J[^ +X}PN#IyT,iQJ", (Object) float0);
      boolean boolean0 = jSONObject1.has((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      HashMap<JSONObject, Short> hashMap0 = new HashMap<JSONObject, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "jDyTf#F6";
      stringArray0[1] = "co";
      stringArray0[2] = "true";
      stringArray0[3] = "wheel.json.JSONArray";
      stringArray0[4] = "4uR^')Yj4.i>XM-p";
      stringArray0[5] = "true";
      stringArray0[6] = "6NfGa$VMT~M-HxDr";
      stringArray0[7] = "pWzX!0a_f(>y\"O'nder";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      double double0 = jSONObject1.optDouble((String) null, (-2526.9293));
      assertEquals((-2526.9293), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("get", "get");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Object object0 = JSONObject.NULL;
      Boolean boolean0 = new Boolean("D.AY-jc,XN`RD}N?>");
      Boolean boolean1 = hashMap0.getOrDefault(object0, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[7];
      hashMap0.remove((Object) boolean0, (Object) boolean1);
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.put("M^DGLih*X2WJQ~/]", 0.0);
      stringArray0[0] = "JSONArray[";
      stringArray0[1] = "";
      stringArray0[2] = "%%|@YvHdM=E(mpfhKel";
      HashMap<Double, Object> hashMap1 = new HashMap<Double, Object>();
      JSONObject.getNames((Object) "M^DGLih*X2WJQ~/]");
      JSONObject jSONObject3 = jSONObject2.put("pL0+*q^ha[ynp'%H3", (Map) hashMap1);
      JSONObject jSONObject4 = jSONObject3.optJSONObject((String) null);
      assertNull(jSONObject4);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toJSONArray((JSONArray) null);
      JSONObject jSONObject1 = jSONObject0.accumulate("", "");
      jSONObject0.optLong("");
      jSONObject1.keys();
      jSONObject1.optDouble("", 0.0);
      String string0 = "@YtzBi:6x$wq8jxgY(x";
      try { 
        jSONObject1.getDouble("@YtzBi:6x$wq8jxgY(x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"@YtzBi:6x$wq8jxgY(x\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      byte byte0 = (byte)35;
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("6x/WW1", "6x/WW1");
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("toL", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Float float0 = new Float((-974.98F));
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      Short short0 = new Short((short)59);
      jSONObject1.append("min", short0);
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Byte byte0 = new Byte((byte)35);
      Byte.toUnsignedInt((byte)66);
      JSONObject jSONObject0 = new JSONObject(byte0);
      try { 
        jSONObject0.getLong(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Boolean boolean0 = new Boolean("=p.");
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Short short0 = new Short((short)47);
      Boolean boolean1 = Boolean.valueOf("");
      hashMap0.getOrDefault(short0, boolean1);
      HashMap<JSONArray, Object> hashMap1 = new HashMap<JSONArray, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      hashMap0.remove((Object) short0, (Object) "false");
      JSONObject jSONObject1 = jSONObject0.put("R(isjiliL8Tf>t 7O", (Map) hashMap1);
      jSONObject0.put("=p.", 0.0);
      jSONObject1.optLong("=p.", (long) (short)47);
      jSONObject1.toString(0, (-40846334));
      try { 
        jSONObject1.getLong(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONObject.testValidity((Object) null);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(32, 32);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull("t-l-?v3>Q!E#/ws]");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "isintern";
      stringArray0[7] = "";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.names();
      jSONObject1.optBoolean("'", true);
      jSONObject0.optLong("vP'nQW'sx9 2%");
      jSONObject1.optLong("q*+{}");
      JSONObject.testValidity("isintern");
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      String string0 = JSONObject.quote("yMqpWm&'i3C3");
      assertEquals("\"yMqpWm&'i3C3\"", string0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "yMqpWm&'i3C3";
      stringArray0[1] = "\"yMqpWm&'i3C3\"";
      stringArray0[2] = "\"yMqpWm&'i3C3\"";
      JSONObject jSONObject0 = new JSONObject("\"yMqpWm&'i3C3\"", stringArray0);
      jSONObject0.put("yMqpWm&'i3C3", 0.0);
      double double0 = jSONObject0.optDouble("yMqpWm&'i3C3");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("(]!76[]!3%(nTIf", (-996));
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      double double0 = jSONObject0.optDouble("(]!76[]!3%(nTIf");
      assertEquals((-996.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Object object0 = JSONObject.NULL;
      Boolean boolean0 = new Boolean("D.AY-jc,XN`RD}N?>");
      hashMap0.getOrDefault(object0, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject();
      boolean boolean1 = jSONObject1.optBoolean("Gh", false);
      String string0 = jSONObject0.toString(4051, 0);
      assertEquals("{}", string0);
      
      boolean boolean2 = jSONObject1.isNull("p!lS&?4poNbIQJ%");
      assertFalse(boolean2 == boolean1);
      
      HashMap<Short, Integer> hashMap1 = new HashMap<Short, Integer>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      String string1 = jSONObject0.optString((String) null);
      assertNotNull(string1);
      
      long long0 = jSONObject2.optLong("isN");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.testValidity(object0);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Short short0 = new Short((short)18);
      JSONObject jSONObject0 = new JSONObject(short0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      jSONObject0.toString((int) (short)18, (int) (short)18);
      JSONObject jSONObject1 = new JSONObject("{\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"}");
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("xTwl", "xTwl");
      jSONObject0.accumulate("xTwl", jSONObject1);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      String string0 = "wheel.json.JSONTokener";
      jSONObject0.remove("");
      try { 
        jSONObject0.getDouble("wheel.json.JSONTokener");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONTokener\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("]p!V@'^vTodDw8]", 6L);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      
      JSONArray jSONArray1 = new JSONArray();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      jSONObject1.put(",", (Collection) linkedList1);
      String string0 = jSONObject0.toString((-664), (-664));
      jSONObject1.isNull("");
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      String string1 = jSONObject0.optString("{\n\"java.lang.String@0000000002\": java.lang.Long@0000000003,\n\"java.lang.String@0000000007\": []\n}");
      assertFalse(string1.equals((Object)string0));
      
      JSONObject jSONObject3 = new JSONObject((Map) null);
      long long0 = jSONObject3.optLong("eW6");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Byte.compare((byte)0, (byte)0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "(]c#.4w";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      jSONObject0.toString();
      Byte.toUnsignedInt((byte) (-34));
      JSONObject jSONObject1 = jSONObject0.put("", true);
      jSONObject1.optBoolean("", true);
      Byte.toUnsignedInt((byte)0);
      String string0 = "\\u";
      jSONObject0.optDouble(string0);
      jSONObject0.optInt("(]c#.4w");
      JSONObject.doubleToString(0.0);
      try { 
        jSONObject0.getJSONArray((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("{qdYJE+ -xQ/q4b|C.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 12 of {qdYJE+ -xQ/q4b|C.
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      jSONObject0.put("P@mE", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.keys();
      JSONObject jSONObject1 = new JSONObject();
      JSONObject.getNames((Object) hashMap0);
      jSONObject1.keys();
      try { 
        jSONObject1.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Float float0 = new Float(700.5336061805056);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.put("ishashCode", 700.5336061805056);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("]QxH<f~o7q", (-1L));
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.optBoolean("]QxH<f~o7q", true);
      JSONObject.valueToString("]QxH<f~o7q", 0, (-6254807));
      jSONObject1.toString(13, (-148));
      jSONObject1.isNull("\"java.lang.String@0000000002\"");
      HashMap<Short, Integer> hashMap1 = new HashMap<Short, Integer>();
      HashMap<Short, JSONArray> hashMap2 = new HashMap<Short, JSONArray>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap2);
      jSONObject2.optString("]QxH<f~o7q");
      String string0 = null;
      Short short0 = new Short((short) (-977));
      Byte byte0 = new Byte((byte) (-97));
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(byte0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Byte.toUnsignedInt((byte)81);
      Float float0 = new Float((-416.75586F));
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject1 = new JSONObject(jSONArray0);
      JSONObject.valueToString(jSONObject1);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "false";
      stringArray0[1] = "K1[`tA:`vlZzS";
      stringArray0[2] = "false";
      JSONArray jSONArray1 = new JSONArray();
      Byte byte0 = new Byte((byte)69);
      JSONObject jSONObject2 = jSONObject1.accumulate("#4", byte0);
      assertEquals(2, jSONObject1.length());
      
      String string0 = jSONObject2.optString("false", "getsplit");
      assertEquals(2, jSONObject1.length());
      assertEquals("getsplit", string0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Long long0 = new Long(882L);
      JSONObject jSONObject0 = new JSONObject(long0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "`^.jAI^bKLf2%";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      String string0 = "9?j%NtBU/g,$mGL";
      stringArray0[4] = "9?j%NtBU/g,$mGL";
      stringArray0[5] = "null";
      stringArray0[6] = "";
      stringArray0[7] = "s;)8vG/yM\"?L3t@5`$+";
      stringArray0[8] = "[]";
      JSONObject jSONObject1 = new JSONObject();
      String string1 = "";
      HashMap<Byte, JSONObject> hashMap0 = new HashMap<Byte, JSONObject>();
      JSONObject jSONObject2 = jSONObject1.put("{", (Map) hashMap0);
      try { 
        jSONObject2.getLong("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Short short0 = new Short((short) (-1450));
      String string0 = JSONObject.valueToString(short0, (short) (-1450), (short) (-1450));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("]p!V@'^vTodDw8]", (-1534L));
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toString(6, 318);
      boolean boolean0 = jSONObject1.isNull("]p!V@'^vTodDw8]");
      assertFalse(boolean0);
      
      int int0 = jSONObject0.getInt("]p!V@'^vTodDw8]");
      assertEquals((-1534), int0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = JSONObject.valueToString("hyO?Q6'9<}b{Nd4");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Object object0 = JSONObject.NULL;
      Boolean.getBoolean("D.AY-jc,XN`RD}N?>");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[7];
      Integer.getInteger("JSONArray[");
      Integer integer0 = new Integer(44);
      Integer integer1 = new Integer(113);
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.remove("qX6`3;p");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject.quote("sZ}7$U9o:^q54|Zv^=W");
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>(linkedList0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      jSONObject0.optBoolean("D.AY-jc,XN`RD}N?>");
      long long0 = jSONObject1.optLong("qX6`3;p", 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONxce3tion", 0L);
      long long0 = jSONObject1.getLong("wheel.json.JSONxce3tion");
      assertEquals(0L, long0);
      
      boolean boolean0 = jSONObject0.isNull("wheel.json.JSONxce3tion");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.getNames((Object) jSONArray0);
      JSONObject.quote("H>j({Q;K{\"/]6gGk{");
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.putOpt("w|", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] is notca numbr.", 1L);
      String string0 = JSONObject.quote("] is notca numbr.");
      assertEquals("\"] is notca numbr.\"", string0);
      
      jSONObject1.put("\"] is notca numbr.\"", 34);
      double double0 = jSONObject0.getDouble("] is notca numbr.");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Byte byte0 = new Byte((byte)35);
      JSONObject jSONObject0 = new JSONObject(byte0);
      String string0 = "isintern";
      Boolean boolean0 = new Boolean("isintern");
      JSONObject.quote("isintern");
      String string1 = null;
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "\\";
      String string1 = ">";
      jSONObject0.optBoolean(">", false);
      jSONObject0.optLong("");
      jSONObject0.keys();
      try { 
        jSONObject0.getDouble("JSON does not allow non-finite numbers.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JSON does not allow non-finite numbers.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      JSONObject.doubleToString(0.25561178059157647);
      String[] stringArray0 = new String[6];
      stringArray0[0] = " at character ";
      stringArray0[1] = "0.25561178059157647";
      stringArray0[2] = "0.25561178059157647";
      stringArray0[3] = " at character ";
      stringArray0[4] = " at character ";
      stringArray0[2] = "0.25561178059157647";
      JSONObject jSONObject0 = new JSONObject(" at character ", stringArray0);
      jSONObject0.isNull((String) null);
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject1.getJSONObject("Unterminated string");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Unterminated string\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Object object0 = JSONObject.NULL;
      Boolean boolean0 = new Boolean("D.AY-jc,XN`RD}N?>");
      hashMap0.getOrDefault(object0, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.getNames(jSONObject0);
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject1 = jSONObject0.put("D.AY-jc,XN`RD}N?>", (Collection) linkedList0);
      linkedList0.poll();
      jSONObject1.toString(2, (-664));
      jSONObject0.isNull("D.AY-jc,XN`RD}N?>");
      HashMap<Short, Integer> hashMap1 = new HashMap<Short, Integer>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      jSONObject2.optBoolean("W=a\"", true);
      jSONObject1.optString(")n7)2$M=VQKcg+Nz");
      jSONObject2.optLong("Id*ebk");
      try { 
        jSONObject1.getInt("is");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"is\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = "Dl4*Z&%%\\glWr|";
      jSONObject0.optInt("Dl4*Z&%%glWr|", 812);
      jSONObject0.optLong((String) null);
      jSONObject0.optLong((String) null, (-737L));
      jSONObject0.optInt((String) null, 74);
      jSONObject0.optDouble("xaX k}]QYm[4X#~37q");
      String string1 = ",\n";
      jSONObject0.optBoolean(",\n");
      jSONObject0.append(",\n", (Object) null);
      JSONObject.getNames(jSONObject0);
      jSONObject0.optLong((String) null, 1072L);
      JSONObject jSONObject1 = jSONObject0.putOpt("xaX k}]QYm[4X#~37q", (Object) null);
      JSONObject jSONObject2 = jSONObject1.put(",\n", 74);
      jSONObject2.toString((-1359));
      try { 
        jSONObject1.getInt("xaX k}]QYm[4X#~37q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"xaX k}]QYm[4X#~37q\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("]QxH<f~o7q", 715L);
      JSONObject jSONObject1 = new JSONObject((Object) "]QxH<f~o7q");
      jSONObject0.optDouble("]QxH<f~o7q");
      jSONObject0.toString(49, 59);
      jSONObject0.isNull("]QxH<f~o7q");
      try { 
        jSONObject0.get("{\"java.lang.String@0000000002\": java.lang.Long@0000000003}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\\"java.lang.String@0000000002\\\": java.lang.Long@0000000003}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Double double0 = new Double(0.0);
      Double.isFinite(462.43633208520953);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.put("-S-k'nD]sJG,OsDFx", 601.85018905);
      jSONObject1.append("\b", double0);
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0, (-648), (-648));
      jSONObject0.remove("-S-k'nD]sJG,OsDFx");
      jSONObject0.optDouble("istrim");
      try { 
        jSONObject0.getInt("-S-k'nD]sJG,OsDFx");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"-S-k'nD]sJG,OsDFx\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String string0 = JSONObject.valueToString("' and instead saw '", 590, 590);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      String string0 = JSONObject.quote("D.AY-jc,XN`RD}N?>");
      assertEquals("\"D.AY-jc,XN`RD}N?>\"", string0);
      
      jSONObject0.toString();
      JSONObject jSONObject1 = jSONObject0.putOpt("\"D.AY-jc,XN`RD}N?\\>\"", (Object) null);
      assertEquals(2, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Integer integer0 = new Integer(8);
      String string0 = JSONObject.numberToString(integer0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("QqYq>|J*&YN$}`ML");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"QqYq>|J*&YN$}`ML\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Short short0 = new Short((short)18);
      JSONObject jSONObject0 = new JSONObject(short0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      jSONObject0.put(",", (Collection) linkedList0);
      jSONObject0.toString((int) (short)18, (int) (short)18);
      assertEquals(2, jSONObject0.length());
      
      JSONObject jSONObject1 = new JSONObject("{\n                                    \"java.lang.String@0000000005\": [],\n                                    \"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"\n                  }");
      assertEquals(2, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      short short0 = (short)630;
      Short short1 = Short.valueOf((short)630);
      JSONObject.numberToString(short1);
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      int int0 = jSONObject0.length();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter(1139);
      jSONObject0.optBoolean("] is not a Boolean.", false);
      stringWriter0.close();
      jSONObject0.optDouble("4/.o", (-1.0));
      StringWriter stringWriter1 = stringWriter0.append('0');
      jSONObject0.write(stringWriter1);
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Integer integer0 = new Integer(1139);
      Boolean boolean0 = Boolean.valueOf("4/.o");
      hashMap0.replace(integer0, boolean0, boolean0);
      Boolean boolean1 = Boolean.TRUE;
      hashMap0.put(integer0, boolean1);
      HashMap<Integer, Boolean> hashMap1 = new HashMap<Integer, Boolean>();
      hashMap0.putAll(hashMap1);
      JSONObject jSONObject1 = jSONObject0.put("4/.o", (Map) hashMap0);
      jSONObject1.getJSONObject("4/.o");
      try { 
        jSONObject0.getJSONArray("4/.o");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"4/.o\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("IJ=Wp+5Twz%dkSH':", "IJ=Wp+5Twz%dkSH':");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(")WCs^hz3LZDj", 408L);
      jSONObject1.optBoolean("H*B", true);
      jSONObject0.toString(0, 0);
      jSONObject0.isNull("%uL0A");
      jSONObject0.put(")WCs^hz3LZDj", (double) 408L);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) ")WCs^hz3LZDj", 3, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      JSONObject jSONObject1 = jSONObject0.append("Unclosed comment", (Object) null);
      jSONObject1.optLong(" 1x)$qQRO");
      String string1 = "0";
      try { 
        jSONObject1.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Double double0 = new Double((short)620);
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("isvalueOf", true);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      jSONObject0.toJSONArray((JSONArray) null);
      JSONObject jSONObject1 = jSONObject0.accumulate("", "");
      jSONObject0.optLong("");
      jSONObject0.optInt("");
      jSONObject1.keys();
      try { 
        jSONObject0.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("D", "D");
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float.sum(480.0F, 0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.accumulate("\f", (Object) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "\"\"";
      stringArray0[1] = "\"\"";
      stringArray0[2] = "\"\"";
      stringArray0[3] = "isintern";
      stringArray0[4] = "\"\"";
      stringArray0[5] = "isintern";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      jSONObject0.names();
      HashMap<JSONArray, Object> hashMap0 = new HashMap<JSONArray, Object>();
      JSONObject jSONObject3 = new JSONObject((Map) hashMap0);
      String string0 = "f";
      JSONTokener jSONTokener0 = new JSONTokener("q}K");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of q}K
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Object object0 = JSONObject.NULL;
      Boolean.getBoolean("D.AY-jc,XN`RD}N?>");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[7];
      JSONObject.getNames(jSONObject0);
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject1 = jSONObject0.put(",", (Collection) linkedList0);
      linkedList0.poll();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      stringWriter1.append('c');
      Byte byte0 = new Byte((byte) (-20));
      JSONObject jSONObject2 = new JSONObject(byte0, stringArray0);
      jSONObject2.write(stringWriter1);
      JSONObject.quote((String) null);
      String string0 = "X";
      jSONObject1.optLong("X");
      try { 
        jSONObject0.put((String) null, 108);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 2078, 2078);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("wheel.json.JSONObject$1", 4342L);
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      jSONObject0.optJSONArray("Null key.");
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      JSONObject jSONObject2 = jSONObject0.put("Null key.", 0);
      assertEquals(2, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Double double0 = new Double(0.0);
      Double.isFinite(462.43633208520953);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject.quote("ma");
      jSONObject0.toString();
      Object object0 = new Object();
      jSONObject0.putOpt("Q]ijn$ED`+Y+a", object0);
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "L@i^.aS");
      jSONObject0.has("L@i^.aS");
      JSONObject jSONObject1 = jSONObject0.append("L@i^.aS", "L@i^.aS");
      JSONObject.valueToString("L@i^.aS");
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Long.getLong("L@i^.aS", 1470L);
      Long.remainderUnsigned((-1785L), (-871L));
      Double double0 = new Double((-871L));
      JSONObject jSONObject2 = jSONObject1.append("L@i^.aS", double0);
      Boolean boolean0 = new Boolean("\"java.lang.String@0000000024\"");
      jSONObject2.accumulate("\"java.lang.String@0000000024\"", "\"java.lang.String@0000000024\"");
      jSONObject1.optBoolean("true");
      jSONObject2.put("", (-2093064));
      assertEquals(6, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("] not found.", "] not found.");
      jSONObject0.optInt("] not found.");
      JSONObject.valueToString(jSONObject0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      String string0 = "] is not a number.";
      JSONObject.getNames((Object) "] is not a number.");
      stringArray0[0] = "] is not a number.";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      String string1 = "\\b";
      String string2 = "+S";
      JSONObject jSONObject2 = jSONObject1.put("\b", (Object) "+S");
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject3 = jSONObject2.put("] is not a number.", object0);
      try { 
        jSONObject3.append("] is not a number.", jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[] is not a number.] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "L@i^.aS");
      jSONObject0.has("L@i^.aS");
      JSONObject jSONObject1 = jSONObject0.append("L@i^.aS", "L@i^.aS");
      JSONObject.quote("L@i^.aS");
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject1.optBoolean("z/!<(7)x.Ar");
      jSONObject1.accumulate("L@i^.aS", jSONArray0);
      jSONObject0.put("in", 0.0);
      assertEquals(5, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.accumulate("uAx3i58ygL*3?;e", jSONArray0);
      try { 
        jSONObject1.getBoolean("uAx3i58ygL*3?;e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"uAx3i58ygL*3?;e\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONObject$1", 4342L);
      jSONObject1.optInt("wheel.json.JSONObject$1");
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      String string0 = "Null key.";
      jSONObject0.optJSONArray("Null key.");
      JSONTokener jSONTokener0 = new JSONTokener("wheel.json.JSONObject$1");
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of wheel.json.JSONObject$1
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "L@i^.aS");
      // Undeclared exception!
      jSONObject0.toString(1878);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Long long0 = new Long(882L);
      JSONObject jSONObject0 = new JSONObject(long0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "`^.jAI^bKLf2%";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      String string0 = "9?j%NtBU/g,$mGL";
      stringArray0[4] = "9?j%NtBU/g,$mGL";
      stringArray0[5] = "null";
      stringArray0[6] = "";
      stringArray0[7] = "s;)8vG/yM\"?L3t@5`$+";
      stringArray0[8] = "[]";
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      String string1 = "";
      HashMap<Byte, JSONObject> hashMap0 = new HashMap<Byte, JSONObject>();
      JSONObject jSONObject2 = jSONObject1.put("{", (Map) hashMap0);
      try { 
        jSONObject2.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      Boolean boolean0 = new Boolean("");
      jSONObject0.put("", (Object) boolean0);
      String string0 = JSONObject.quote((String) null);
      stringArray0[6] = "isintern";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.put("", (double) 0L);
      JSONObject jSONObject2 = new JSONObject();
      jSONObject2.toString((-2072), 0);
      String string1 = jSONObject0.optString((String) null, "gettoUnsignedString");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("%bS!");
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("#v");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"#v\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      Boolean boolean0 = new Boolean("");
      jSONObject0.put("", (Object) boolean0);
      stringArray0[6] = "isintern";
      stringArray0[7] = "";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.names();
      jSONObject1.optBoolean("'", true);
      jSONObject0.optDouble("\b");
      jSONObject1.optLong("q*+{}");
      JSONObject.testValidity("isintern");
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "isintern";
      stringArray0[7] = "";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.names();
      jSONObject1.optBoolean("'", true);
      jSONObject0.optLong("vP'nQW'sx9 2%");
      try { 
        jSONObject1.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.doubleToString(3014.530240531339);
      JSONTokener jSONTokener0 = new JSONTokener("lon");
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject0.optString("3014.530240531339");
      jSONObject1.optLong("lon");
      Object object0 = new Object();
      JSONObject jSONObject2 = jSONObject0.accumulate("3014.530240531339", object0);
      try { 
        jSONObject2.getLong("-^B`eEB>-:O0l{u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"-^B`eEB>-:O0l{u\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "L@i^.aS");
      Boolean boolean0 = new Boolean((String) null);
      JSONObject jSONObject1 = jSONObject0.append("L@i^.aS", "L@i^.aS");
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject1.optBoolean("z/!<(7t.Ar");
      jSONObject1.accumulate("L@i^.aS", jSONArray0);
      jSONObject0.optJSONArray("L@i^.aS");
      try { 
        jSONObject1.getJSONObject("L@i^.aS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"L@i^.aS\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      String string0 = "{";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      jSONObject0.write(stringWriter0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Unterminated string";
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      Object object0 = JSONObject.NULL;
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject0.put("Unterminated string", 1149.59701772);
      jSONObject1.remove("Unterminated string");
      String string0 = JSONObject.doubleToString((-24668172));
      assertEquals("-2.4668172E7", string0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("va", 0.0);
      JSONObject.getNames(jSONObject0);
      jSONObject1.getInt("va");
      Boolean boolean0 = Boolean.valueOf("'");
      JSONObject jSONObject2 = jSONObject1.putOpt("va", boolean0);
      assertSame(jSONObject1, jSONObject2);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[5];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      HashMap<Byte, Byte> hashMap0 = new HashMap<Byte, Byte>();
      Byte byte0 = new Byte((byte)1);
      hashMap0.put(byte0, byte0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Byte cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject((Map) null);
      String string0 = "e+)?";
      jSONObject1.put("{}", (Map) null);
      try { 
        jSONObject1.getJSONObject("rT7iL[O/D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"rT7iL[O/D\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[8];
      stringArray0[1] = "";
      stringArray0[2] = "";
      jSONObject0.optBoolean("");
      try { 
        jSONObject0.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "L@i^.aS");
      String string0 = jSONObject0.toString(125, 125);
      jSONObject0.optDouble("L@i^.aS");
      jSONObject0.optBoolean(string0);
      jSONObject0.optLong(string0, (long) 15);
      StringWriter stringWriter0 = new StringWriter(120);
      JSONObject.getNames((Object) string0);
      jSONObject0.optJSONArray(string0);
      // Undeclared exception!
      jSONObject0.getLong(string0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optBoolean("B8%K6Sm,>d3sfI", false);
      try { 
        jSONObject0.get("wheel.json.JSONObject$Null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONObject$Null\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      jSONObject0.put("r)~pYz,t", (Map) hashMap0);
      jSONObject0.getJSONObject("r)~pYz,t");
      Integer integer0 = new Integer(29);
      String string0 = JSONObject.numberToString(integer0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      String string0 = JSONObject.quote("<x=E/@5s");
      assertEquals("\"<x=E/@5s\"", string0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Byte byte0 = new Byte((byte)80);
      Byte.toUnsignedLong((byte)80);
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.opt("Expected a ':' after a key");
      Float float0 = new Float(0.0F);
      JSONObject jSONObject1 = jSONObject0.put("Expected a ':' after a key", (Object) float0);
      jSONObject1.put("Xj&0", false);
      jSONObject0.put(",:]}/\"[{;=#", (Map) null);
      assertEquals(4, jSONObject0.length());
      
      String string0 = JSONObject.valueToString((Object) null, (byte)80, 12);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = " at character ";
      stringArray0[1] = "0";
      stringArray0[2] = "0";
      stringArray0[3] = " at character ";
      stringArray0[4] = " at character ";
      stringArray0[5] = "0";
      JSONObject jSONObject0 = new JSONObject(" at character ", stringArray0);
      jSONObject0.put("0", 1L);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      jSONObject0.getLong("0");
      jSONObject0.optInt(" at character ", 4173);
      JSONObject jSONObject1 = new JSONObject((Map) null);
      String string0 = "AJaaLBC{LK.$8?-82";
      jSONObject0.optString("AJaaLBC{LK.$8?-82");
      try { 
        jSONObject1.put((String) null, (-862));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("]QxH<f~o7q", (-1L));
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.optBoolean("]QxH<f~o7q", true);
      JSONObject.valueToString(hashMap0, 123, (-664));
      jSONObject0.toString(0, (-664));
      jSONObject0.isNull("{\"java.lang.String@0000000002\": java.lang.Long@0000000003}");
      HashMap<Short, Integer> hashMap1 = new HashMap<Short, Integer>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      jSONObject0.optString("java.lang.Short@0000000001.");
      String string0 = "getgetBytes";
      jSONObject0.optString("i/1|('", "]QxH<f~o7q");
      String string1 = "I";
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      JSONObject.doubleToString((-2049.209315245558));
      JSONTokener jSONTokener0 = new JSONTokener("RG7Xr.FMOn|*E#");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of RG7Xr.FMOn|*E#
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{QlW1fg8M=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing value at character 9 of {QlW1fg8M=
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("]p!V@'^vTodDw8]", 6L);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      JSONObject.getNames((Object) linkedList0);
      JSONArray jSONArray1 = new JSONArray();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      JSONObject jSONObject1 = jSONObject0.put(",", (Collection) linkedList0);
      linkedList1.poll();
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      HashMap<Double, Double> hashMap1 = new HashMap<Double, Double>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap1);
      jSONObject2.optLong("]p!V@'^vTodDw8]");
      try { 
        jSONObject1.getInt(",");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("1xsBs4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"1xsBs4\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "L@i^.aS");
      jSONObject0.has("L@i^.aS");
      JSONObject jSONObject1 = jSONObject0.append("L@i^.aS", "L@i^.aS");
      JSONObject.valueToString("L@i^.aS");
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Long.getLong("L@i^.aS", 1470L);
      Long.remainderUnsigned((-1785L), (-871L));
      Double double0 = new Double(0.0);
      JSONObject jSONObject2 = jSONObject1.append("L@i^.aS", double0);
      Integer integer0 = new Integer(3554);
      boolean boolean0 = new Boolean("\"java.lang.String@0000000024\"");
      jSONObject2.accumulate("\b", "\"java.lang.String@0000000024\"");
      assertEquals(5, jSONObject1.length());
      
      String string0 = JSONObject.doubleToString(3329.915484969771);
      assertEquals("3329.915484969771", string0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "]p!V@'^vTodDw\\8]";
      jSONObject0.put("&a&<-.@um(F", (-3L));
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      String[] stringArray0 = new String[2];
      stringArray0[1] = "&a&<-.@um(F";
      JSONObject jSONObject1 = new JSONObject("&a&<-.@um(F", stringArray0);
      JSONObject jSONObject2 = new JSONObject(linkedList0);
      JSONObject jSONObject3 = new JSONObject();
      try { 
        jSONObject3.getLong("toU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"toU\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      JSONObject.quote("");
      jSONObject0.toString();
      jSONObject0.putOpt("{\"java.lang.String@0000000004\":[],\"java.lang.String@0000000007\":\"java.lang.Class@0000000008\",\"java.lang.String@0000000002\":java.lang.Boolean@0000000003}", "");
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      JSONObject.quote("000");
      String string0 = jSONObject1.toString();
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      HashMap<Integer, Boolean> hashMap1 = new HashMap<Integer, Boolean>();
      Boolean.valueOf(true);
      Integer integer0 = new Integer(390);
      Boolean boolean0 = Boolean.FALSE;
      hashMap1.put(integer0, boolean0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      jSONObject0.remove("{}");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String string1 = JSONObject.quote("\"000\"");
      assertEquals("\"\\\"000\\\"\"", string1);
      
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      boolean boolean1 = jSONObject0.optBoolean("\"\"000\"\"");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("-*-v!C&ApM");
      JSONObject.getNames(jSONObject0);
      String string0 = "pa";
      try { 
        jSONObject0.getDouble("pa");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"pa\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = " at character ";
      stringArray0[1] = "0";
      stringArray0[2] = "0";
      stringArray0[3] = " at character ";
      stringArray0[4] = " at character ";
      stringArray0[5] = "0";
      JSONObject jSONObject0 = new JSONObject(" at character ", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("0", 1L);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      jSONObject0.getLong("0");
      JSONObject jSONObject2 = jSONObject0.put("Bad value from toJSONString: ", (Collection) linkedList0);
      jSONObject1.optDouble("Bad value from toJSONString: ", (double) 1L);
      Boolean boolean0 = Boolean.valueOf(true);
      linkedList0.add(boolean0);
      jSONObject0.toString();
      try { 
        jSONObject2.accumulate((String) null, jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      JSONObject jSONObject1 = jSONObject0.put("{}", 0.0);
      jSONObject1.optString("{}");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Double double0 = new Double(0.0);
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.accumulate("h A&LDs&MY,;`v<oV@", object0);
      boolean boolean0 = jSONObject1.isNull("h A&LDs&MY,;`v<oV@");
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Short short0 = Short.valueOf((short)630);
      JSONObject.numberToString(short0);
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(hashMap0);
      jSONObject0.opt("{}");
      HashMap<String, JSONObject> hashMap1 = new HashMap<String, JSONObject>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.toString();
      jSONObject0.putOpt("{\"java.lang.String@0000000004\":[],\"java.lang.String@0000000007\":\"java.lang.Class@0000000008\",\"java.lang.String@0000000002\":java.lang.Boolean@0000000003}", "");
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Object object0 = JSONObject.NULL;
      Boolean boolean0 = new Boolean("D.AY-jc,XN`RD}N?>");
      Boolean.getBoolean("D.AY-jc,XN`RD}N?>");
      Boolean boolean1 = hashMap0.getOrDefault(object0, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[7];
      hashMap0.remove((Object) boolean0, (Object) boolean1);
      Integer.getInteger("JSONArray[");
      Boolean boolean2 = new Boolean(false);
      Integer integer0 = new Integer(44);
      Boolean.valueOf(false);
      Integer integer1 = new Integer(113);
      Boolean boolean3 = Boolean.FALSE;
      hashMap0.put(integer0, boolean1);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.remove("qX6`3;p");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String string0 = JSONObject.quote(",j#O");
      assertEquals("\",j#O\"", string0);
      
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject1.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      String string1 = jSONObject0.toString(113);
      assertEquals("{}", string1);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      linkedList0.add((Double) null);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Object object0 = JSONObject.NULL;
      Boolean boolean0 = new Boolean("D.AY-jc,XN`RD}N?>");
      Boolean boolean1 = hashMap0.getOrDefault(object0, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[7];
      hashMap0.remove((Object) boolean0, (Object) boolean1);
      Boolean boolean2 = new Boolean("isintern");
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONObject$Null", object0);
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      jSONObject2.names();
      jSONObject2.optBoolean("get", false);
      jSONObject0.optDouble("E]l<8x:0'R!;N\u0001qvq4");
      jSONObject1.optLong("D.AY-jc,XN`RD}N?>");
      Object object1 = new Object();
      JSONObject.testValidity(object1);
      Short short0 = new Short((short) (-1072));
      JSONObject jSONObject3 = jSONObject2.put("false", (Object) short0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject3.length());
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONArray", (Object) "wheel.json.JSONArray");
      Boolean boolean0 = Boolean.valueOf("wheel.json.JSONArray");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Y";
      stringArray0[1] = "wheel.json.JSONArray";
      stringArray0[2] = "wheel.json.JSONArray";
      stringArray0[3] = "wheel.json.JSONArray";
      stringArray0[4] = "wheel.json.JSONArray";
      JSONObject jSONObject2 = new JSONObject(boolean0, stringArray0);
      String[] stringArray1 = new String[7];
      stringArray1[0] = "wheel.json.JSONArray";
      stringArray1[1] = "wheel.json.JSONArray";
      stringArray1[2] = "Y";
      stringArray1[3] = "Y";
      stringArray1[4] = "wheel.json.JSONArray";
      stringArray1[5] = "wheel.json.JSONArray";
      stringArray1[6] = "Y";
      JSONObject jSONObject3 = new JSONObject(jSONObject2, stringArray1);
      JSONObject.getNames((Object) jSONObject3);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      jSONObject1.write(writer0);
      String string0 = null;
      jSONObject0.optInt((String) null, 13);
      jSONObject0.optInt("9n^AlnU[kSpeGJLu#", 0);
      jSONObject0.toString();
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "L@i^.aS");
      jSONObject0.has("L@i^.aS");
      Double double0 = new Double(Double.NaN);
      assertEquals(Double.NaN, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "L@i^.aS");
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(3, jSONObject0.length());
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 754, 13);
      assertEquals("null", string0);
  }
}
