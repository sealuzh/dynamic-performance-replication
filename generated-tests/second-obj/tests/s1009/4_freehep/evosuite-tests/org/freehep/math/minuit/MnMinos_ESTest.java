/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 22:44:30 GMT 2018
 */

package org.freehep.math.minuit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.freehep.math.minuit.FCNBase;
import org.freehep.math.minuit.FunctionMinimum;
import org.freehep.math.minuit.MinimumParameters;
import org.freehep.math.minuit.MinimumSeed;
import org.freehep.math.minuit.MinimumState;
import org.freehep.math.minuit.MnAlgebraicVector;
import org.freehep.math.minuit.MnApplication;
import org.freehep.math.minuit.MnMinos;
import org.freehep.math.minuit.MnStrategy;
import org.freehep.math.minuit.MnUserTransformation;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MnMinos_ESTest extends MnMinos_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 2;
      MnMinos mnMinos0 = new MnMinos((FCNBase) null, (FunctionMinimum) null);
      // Undeclared exception!
      try { 
        mnMinos0.minos(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnMinos", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnMinos mnMinos0 = new MnMinos(fCNBase0, (FunctionMinimum) null, (MnStrategy) null);
      // Undeclared exception!
      try { 
        mnMinos0.range((-238));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnMinos", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MinimumState minimumState0 = new MinimumState(14);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      LinkedList<MinimumState> linkedList0 = new LinkedList<MinimumState>();
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, linkedList0, 0.1);
      functionMinimum0.add(minimumState0);
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, 14);
      linkedList0.add(minimumState0);
      int int0 = (-903);
      // Undeclared exception!
      try { 
        mnMinos0.loval((-903));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MinimumState minimumState0 = new MinimumState(6);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, 6);
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0);
      // Undeclared exception!
      try { 
        mnMinos0.lower(6, 0.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 6, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<MinimumState> linkedList0 = new LinkedList<MinimumState>();
      FunctionMinimum.MnReachedCallLimit functionMinimum_MnReachedCallLimit0 = new FunctionMinimum.MnReachedCallLimit();
      FunctionMinimum functionMinimum0 = new FunctionMinimum((MinimumSeed) null, linkedList0, 4.0, functionMinimum_MnReachedCallLimit0);
      MnMinos mnMinos0 = new MnMinos((FCNBase) null, functionMinimum0);
      // Undeclared exception!
      try { 
        mnMinos0.upval(2005);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MinimumParameters minimumParameters0 = new MinimumParameters(1876);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 1876, 1876);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, 655.45506372471);
      List<MinimumState> list0 = functionMinimum0.states();
      FunctionMinimum.MnAboveMaxEdm functionMinimum_MnAboveMaxEdm0 = new FunctionMinimum.MnAboveMaxEdm();
      FunctionMinimum functionMinimum1 = new FunctionMinimum(minimumSeed0, list0, 1876, functionMinimum_MnAboveMaxEdm0);
      MnMinos mnMinos0 = new MnMinos((FCNBase) null, functionMinimum1);
      // Undeclared exception!
      try { 
        mnMinos0.upval(1118, (-2240.0), 1876);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MinimumState minimumState0 = new MinimumState(4);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 4;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, 680.4525736766855);
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, 200);
      // Undeclared exception!
      try { 
        mnMinos0.range(4, 0.02);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(5);
      mnAlgebraicVector0.toString();
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, 5);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 5, 0);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      mnUserTransformation0.add("", 0.0, 0, 0.3, 1.8143935122054957);
      mnAlgebraicVector0.clone();
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, 1.0);
      functionMinimum0.states();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnStrategy mnStrategy0 = new MnStrategy();
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, mnStrategy0);
      // Undeclared exception!
      try { 
        mnMinos0.minos(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(3);
      MnAlgebraicVector mnAlgebraicVector1 = new MnAlgebraicVector(3);
      mnAlgebraicVector0.toString();
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector1, 3);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 3, 0);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      mnUserTransformation0.add(">B47X[(qt~RnaC_l5K3", 3, 1.0, 3, (-2485.293893549));
      mnUserTransformation0.add("", 0.0, 0, 0.3, 0);
      MnAlgebraicVector mnAlgebraicVector2 = new MnAlgebraicVector(0);
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, 1.0);
      mnUserTransformation0.setUpperLimit(0, (-38.62059));
      functionMinimum0.states();
      functionMinimum0.add(minimumState0);
      MnStrategy mnStrategy0 = new MnStrategy(0);
      mnUserTransformation0.fix(0);
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, 0);
      // Undeclared exception!
      try { 
        mnMinos0.upper(0, 0.1, 0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, (-1751.84)).when(fCNBase0).valueOf(any(double[].class));
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(3);
      mnAlgebraicVector0.toString();
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, 3);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 3, 0);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      mnUserTransformation0.add("LAVector parameters:\n\n0.00000 0.00000 0.00000 \n", 3, 0, 3, 0);
      mnUserTransformation0.add((String) null, 3, 0);
      mnUserTransformation0.add("", 0.0, 0, 0.3, 2.447419475110882);
      mnAlgebraicVector0.clone();
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, 0.0);
      mnUserTransformation0.setUpperLimit(0, (-38.62059));
      LinkedList<MinimumState> linkedList0 = new LinkedList<MinimumState>();
      functionMinimum0.add(minimumState0);
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, 0);
      MnApplication.DEFAULT_STRATEGY = 3;
      // Undeclared exception!
      try { 
        mnMinos0.minos(0, 0.3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(3);
      MnAlgebraicVector mnAlgebraicVector1 = new MnAlgebraicVector(3);
      mnAlgebraicVector1.toString();
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector1, 3);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 3, 0);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      mnUserTransformation0.add("LAVector parameters:\n\n0.00000 0.00000 0.00000 \n", 3, 0.0, 3, (-2485.293893549));
      mnUserTransformation0.add((String) null, 0.0, 0);
      mnUserTransformation0.add("", 0.0, 0, 1277.26036888781, 2.447419475110882);
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, 1.0);
      mnUserTransformation0.setUpperLimit(0, 1277.26036888781);
      LinkedList<MinimumState> linkedList0 = new LinkedList<MinimumState>();
      functionMinimum0.add(minimumState0);
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, 0);
      MnApplication.DEFAULT_STRATEGY = 3;
      // Undeclared exception!
      mnMinos0.range(0, 3.0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(3);
      MnAlgebraicVector mnAlgebraicVector1 = new MnAlgebraicVector(3);
      mnAlgebraicVector1.toString();
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector1, 3);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 3, 0);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      mnUserTransformation0.add("LAVector parameters:\n\n0.00000 0.00000 0.00000 \n", 3, 1.0, 3, 0.0);
      mnUserTransformation0.add((String) null, 1.0, 0);
      mnUserTransformation0.add("", 0.0, 0, (-0.5395517515795571), 2.447419475110882);
      mnAlgebraicVector0.clone();
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, 1.0);
      mnUserTransformation0.setUpperLimit(0, (-38.62059));
      functionMinimum0.add(minimumState0);
      mnAlgebraicVector1.clone();
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, 3);
      double double0 = mnMinos0.upper(1, 2.447419475110882, 3);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = mnMinos0.lower(0);
      assertEquals((-38.62059), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1277.26036888781, 1277.26036888781, 1277.26036888781, 1277.26036888781, 481.434305).when(fCNBase0).valueOf(any(double[].class));
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(3);
      MnAlgebraicVector mnAlgebraicVector1 = new MnAlgebraicVector(3);
      mnAlgebraicVector1.toString();
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector1, 3);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 3, 0);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      mnUserTransformation0.add("LAVector parameters:\n\n0.00000 0.00000 0.00000 \n", 3, 0.0, 3, (-2485.293893549));
      mnUserTransformation0.add((String) null, 0.0, 0);
      mnUserTransformation0.add("[", (-11.501899419823259), 0, 0.3, 2.447419475110882);
      mnAlgebraicVector0.clone();
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, 1.0);
      mnUserTransformation0.setUpperLimit(0, 0.3);
      LinkedList<MinimumState> linkedList0 = new LinkedList<MinimumState>();
      MnStrategy mnStrategy0 = new MnStrategy();
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, mnStrategy0);
      mnMinos0.loval(0, (-2485.293893549), (-742));
      // Undeclared exception!
      try { 
        mnMinos0.minos((-8), (double) (-8), 7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1277.26036888781, 1277.26036888781, 1277.26036888781, 1277.26036888781, 1277.26036888781).when(fCNBase0).valueOf(any(double[].class));
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(3);
      MnAlgebraicVector mnAlgebraicVector1 = new MnAlgebraicVector(3);
      mnAlgebraicVector0.toString();
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector1, 3);
      mnAlgebraicVector0.clone();
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 3, 0);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      mnUserTransformation0.add("LAVector parameters:\n\n0.00000 0.00000 0.00000 \n", 3, 0.2, 3, 0);
      mnUserTransformation0.add((String) null, 0.2, 0);
      mnUserTransformation0.add("m", 1277.26036888781, 0, 0, 2.447419475110882);
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, 1277.26036888781);
      LinkedList<MinimumState> linkedList0 = new LinkedList<MinimumState>();
      MnStrategy mnStrategy0 = new MnStrategy();
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, 0);
      double double0 = mnMinos0.upper(0, (-2.0), 1);
      assertEquals(1.5, double0, 0.01);
      
      double double1 = mnMinos0.upper(0);
      assertEquals(0.0, double1, 0.01);
      
      mnMinos0.lower(1, (double) 1, 0);
      mnAlgebraicVector1.toString();
      double double2 = mnMinos0.lower(1);
      assertEquals(-0.0, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      int int0 = 3;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(3);
      MnAlgebraicVector mnAlgebraicVector1 = new MnAlgebraicVector(3);
      mnAlgebraicVector0.toString();
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector1, 3);
      int int1 = 0;
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 3, 0);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      mnUserTransformation0.add(">B47X[(qt~RnaC_l5K3", 3, 1.0, 3, (-2485.293893549));
      mnUserTransformation0.add("", 0.0, 0, 0.3, 0);
      MnAlgebraicVector mnAlgebraicVector2 = new MnAlgebraicVector(0);
      mnUserTransformation0.add("MnMinos could not find lower value for parameter ", 0.0, 1.0831007786451317);
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, 1.0831007786451317);
      mnUserTransformation0.setUpperLimit(0, 0.0);
      functionMinimum0.states();
      functionMinimum0.add(minimumState0);
      MnStrategy mnStrategy0 = new MnStrategy(0);
      mnUserTransformation0.fix(0);
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, 0);
      // Undeclared exception!
      try { 
        mnMinos0.range(0, 3007.9075216088595, 3);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(8);
      MnAlgebraicVector mnAlgebraicVector1 = new MnAlgebraicVector(8);
      mnAlgebraicVector0.toString();
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector1, 8);
      int int0 = 0;
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 8, 0);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      mnUserTransformation0.add(">B47X[(qt~RnaC_l5K3", 8, 1.0, 8, (-2485.293893549));
      mnUserTransformation0.add("", 0.0, 0, 0.3, 0);
      MnAlgebraicVector mnAlgebraicVector2 = new MnAlgebraicVector(0);
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, 1.0831007786451317);
      mnUserTransformation0.setUpperLimit(0, 0.0);
      functionMinimum0.states();
      functionMinimum0.add(minimumState0);
      MnStrategy mnStrategy0 = new MnStrategy(0);
      mnUserTransformation0.fix(0);
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, 0);
      // Undeclared exception!
      try { 
        mnMinos0.lower(0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
