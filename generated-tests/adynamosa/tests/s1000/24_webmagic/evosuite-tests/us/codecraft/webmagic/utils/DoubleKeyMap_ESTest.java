/*
 * This file was automatically generated by EvoSuite
 * Sun Jul 21 19:43:03 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Integer, String> doubleKeyMap0 = new DoubleKeyMap<String, Integer, String>(class0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DoubleKeyMap<String, Object, HashMap<String, Object>> doubleKeyMap0 = new DoubleKeyMap<String, Object, HashMap<String, Object>>();
      Map<Integer, Map<String, Map<Object, Map<Integer, HashMap<Map<Object, HashMap<String, Object>>, String>>>>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Integer, String, Map<Object, Map<Integer, HashMap<Map<Object, HashMap<String, Object>>, String>>>> doubleKeyMap1 = new DoubleKeyMap<Integer, String, Map<Object, Map<Integer, HashMap<Map<Object, HashMap<String, Object>>, String>>>>(map0);
      Integer integer0 = new Integer(0);
      HashMap<Object, Map<Integer, HashMap<Map<Object, HashMap<String, Object>>, String>>> hashMap0 = new HashMap<Object, Map<Integer, HashMap<Map<Object, HashMap<String, Object>>, String>>>();
      doubleKeyMap1.put(integer0, "wrong proto type map ", (Map<Object, Map<Integer, HashMap<Map<Object, HashMap<String, Object>>, String>>>) hashMap0);
      Map<String, Map<Object, Map<Integer, HashMap<Map<Object, HashMap<String, Object>>, String>>>> map1 = doubleKeyMap1.remove(integer0);
      assertEquals(1, map1.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleKeyMap<Integer, Object, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, String>();
      Integer integer0 = new Integer(1);
      doubleKeyMap0.put(integer0, (Object) integer0, "*W]a5b2Iy!Y<.R`,Jr}");
      Map<Object, String> map0 = doubleKeyMap0.get(integer0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleKeyMap<HashMap<Integer, Object>, HashMap<Integer, String>, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Object>, HashMap<Integer, String>, Integer>();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = doubleKeyMap0.remove(hashMap0, (HashMap<Integer, String>) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<Integer, Map<String, Map<Object, Map<Integer, HashMap<Map<Object, HashMap<String, Object>>, String>>>>> hashMap0 = new HashMap<Integer, Map<String, Map<Object, Map<Integer, HashMap<Map<Object, HashMap<String, Object>>, String>>>>>();
      DoubleKeyMap<Integer, String, Map<Object, Map<Integer, HashMap<Map<Object, HashMap<String, Object>>, String>>>> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Map<Object, Map<Integer, HashMap<Map<Object, HashMap<String, Object>>, String>>>>(hashMap0);
      Integer integer0 = new Integer(0);
      HashMap<Integer, Map<Object, Object>> hashMap1 = new HashMap<Integer, Map<Object, Object>>();
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Integer, Object, Object>(hashMap1);
      Object object0 = doubleKeyMap1.remove(integer0, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<Map<Object, HashMap<String, Object>>, HashMap<Object, String>, Map<Object, HashMap<String, Object>>> doubleKeyMap0 = new DoubleKeyMap<Map<Object, HashMap<String, Object>>, HashMap<Object, String>, Map<Object, HashMap<String, Object>>>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Map<Object, HashMap<String, Object>> map0 = doubleKeyMap0.remove((Map<Object, HashMap<String, Object>>) null, hashMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Object>();
      Integer integer0 = new Integer(0);
      Object object0 = new Object();
      Object object1 = doubleKeyMap0.remove(object0, integer0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<String, Object, HashMap<String, Object>> doubleKeyMap0 = new DoubleKeyMap<String, Object, HashMap<String, Object>>();
      Map<Integer, Map<String, Map<Object, Map<Integer, HashMap<Map<Object, HashMap<String, Object>>, String>>>>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Integer, String, Map<Object, Map<Integer, HashMap<Map<Object, HashMap<String, Object>>, String>>>> doubleKeyMap1 = new DoubleKeyMap<Integer, String, Map<Object, Map<Integer, HashMap<Map<Object, HashMap<String, Object>>, String>>>>(map0);
      Map<String, Map<Object, Map<Integer, HashMap<Map<Object, HashMap<String, Object>>, String>>>> map1 = doubleKeyMap1.remove((Integer) null);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Object, Map<Object, HashMap<Object, Integer>>> hashMap0 = new HashMap<Object, Map<Object, HashMap<Object, Integer>>>();
      DoubleKeyMap<Object, Object, HashMap<Object, Integer>> doubleKeyMap0 = new DoubleKeyMap<Object, Object, HashMap<Object, Integer>>(hashMap0);
      Object object0 = new Object();
      Map<Object, HashMap<Object, Integer>> map0 = doubleKeyMap0.remove(object0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleKeyMap<String, String, String> doubleKeyMap0 = new DoubleKeyMap<String, String, String>();
      String string0 = doubleKeyMap0.put("us.codecraft.webmagic.utils.DoubleKeyMap", "us.codecraft.webmagic.utils.DoubleKeyMap", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Map> class0 = Map.class;
      HashMap<Integer, Map<Map<Object, HashMap<String, Object>>, Object>> hashMap0 = new HashMap<Integer, Map<Map<Object, HashMap<String, Object>>, Object>>();
      DoubleKeyMap<Integer, Map<Object, HashMap<String, Object>>, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Map<Object, HashMap<String, Object>>, Object>(hashMap0, class0);
      Integer integer0 = new Integer(0);
      DoubleKeyMap<String, HashMap<Integer, Object>, HashMap<String, Object>> doubleKeyMap1 = new DoubleKeyMap<String, HashMap<Integer, Object>, HashMap<String, Object>>();
      Map<Object, HashMap<String, Object>> map0 = doubleKeyMap1.newMap();
      // Undeclared exception!
      try { 
        doubleKeyMap0.put(integer0, map0, (Object) doubleKeyMap1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer((-1916));
      DoubleKeyMap<Integer, String, Map<Object, Map<Integer, HashMap<Map<Object, HashMap<String, Object>>, String>>>> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Map<Object, Map<Integer, HashMap<Map<Object, HashMap<String, Object>>, String>>>>((Map<Integer, Map<String, Map<Object, Map<Integer, HashMap<Map<Object, HashMap<String, Object>>, String>>>>>) null);
      HashMap<Object, Map<Integer, HashMap<Map<Object, HashMap<String, Object>>, String>>> hashMap0 = new HashMap<Object, Map<Integer, HashMap<Map<Object, HashMap<String, Object>>, String>>>();
      Map<Object, Map<Integer, HashMap<Map<Object, HashMap<String, Object>>, String>>> map0 = doubleKeyMap0.put(integer0, (String) null, (Map<Object, Map<Integer, HashMap<Map<Object, HashMap<String, Object>>, String>>>) hashMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleKeyMap<String, Object, HashMap<String, Object>> doubleKeyMap0 = new DoubleKeyMap<String, Object, HashMap<String, Object>>();
      Integer integer0 = new Integer(0);
      DoubleKeyMap<HashMap<String, Map<Object, HashMap<String, Object>>>, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<HashMap<String, Map<Object, HashMap<String, Object>>>, Object, Integer>();
      HashMap<String, Map<Object, HashMap<String, Object>>> hashMap0 = new HashMap<String, Map<Object, HashMap<String, Object>>>();
      Integer integer1 = doubleKeyMap1.put(hashMap0, (Object) doubleKeyMap0, integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Integer>();
      DoubleKeyMap<Object, String, String> doubleKeyMap1 = new DoubleKeyMap<Object, String, String>();
      String string0 = doubleKeyMap1.put((Object) doubleKeyMap0, "", "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>();
      Object object0 = doubleKeyMap0.get("V9QopbTE^H;\"\b", (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer integer0 = new Integer(0);
      HashMap<Object, Map<Integer, Map<String, String>>> hashMap0 = new HashMap<Object, Map<Integer, Map<String, String>>>();
      DoubleKeyMap<Object, Integer, Map<String, String>> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Map<String, String>>(hashMap0);
      Map<String, String> map0 = doubleKeyMap0.get((Object) null, integer0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DoubleKeyMap<Object, HashMap<String, Integer>, Map<Map<Object, HashMap<String, Object>>, Map<Integer, Object>>> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<String, Integer>, Map<Map<Object, HashMap<String, Object>>, Map<Integer, Object>>>();
      Map<Map<Object, HashMap<String, Object>>, Map<Integer, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Map<Object, HashMap<String, Object>>, Integer, Object> doubleKeyMap1 = new DoubleKeyMap<Map<Object, HashMap<String, Object>>, Integer, Object>(map0);
      DoubleKeyMap<Object, HashMap<Object, String>, String> doubleKeyMap2 = new DoubleKeyMap<Object, HashMap<Object, String>, String>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      String string0 = doubleKeyMap2.get((Object) doubleKeyMap1, hashMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DoubleKeyMap<HashMap<String, Integer>, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Integer>, Integer, Object>();
      Map<Integer, Object> map0 = doubleKeyMap0.get((HashMap<String, Integer>) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Object>();
      Object object0 = new Object();
      Map<Integer, Object> map0 = doubleKeyMap0.get(object0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<Object, HashMap<String, Object>> hashMap0 = new HashMap<Object, HashMap<String, Object>>();
      DoubleKeyMap<Map<Object, HashMap<String, Object>>, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Map<Object, HashMap<String, Object>>, Object, Object>();
      Map<Map<String, Object>, Map<String, Map<Object, HashMap<String, Object>>>> map0 = doubleKeyMap0.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<String, Object>, String, Map<Object, HashMap<String, Object>>> doubleKeyMap1 = new DoubleKeyMap<Map<String, Object>, String, Map<Object, HashMap<String, Object>>>(map0, class0);
      // Undeclared exception!
      try { 
        doubleKeyMap1.put((Map<String, Object>) null, "H$l[J", (Map<Object, HashMap<String, Object>>) hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, Object, Integer>((Map<Object, Map<Object, Integer>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DoubleKeyMap<Integer, String, Map<Object, Map<Integer, HashMap<Map<Object, HashMap<String, Object>>, String>>>> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Map<Object, Map<Integer, HashMap<Map<Object, HashMap<String, Object>>, String>>>>();
      Integer integer0 = new Integer(0);
      HashMap<Object, Map<Integer, HashMap<Map<Object, HashMap<String, Object>>, String>>> hashMap0 = new HashMap<Object, Map<Integer, HashMap<Map<Object, HashMap<String, Object>>, String>>>();
      doubleKeyMap0.put(integer0, "wrong proto type map ", (Map<Object, Map<Integer, HashMap<Map<Object, HashMap<String, Object>>, String>>>) hashMap0);
      Map<Object, Map<Integer, HashMap<Map<Object, HashMap<String, Object>>, String>>> map0 = doubleKeyMap0.remove(integer0, "");
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, String>();
      Integer integer0 = new Integer((-652));
      doubleKeyMap0.put(integer0, integer0, "47:smtN}Lg57ER{1d");
      String string0 = doubleKeyMap0.put(integer0, integer0, "");
      assertEquals("47:smtN}Lg57ER{1d", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DoubleKeyMap<HashMap<String, Object>, HashMap<String, Integer>, HashMap<Integer, Map<Object, HashMap<String, Object>>>> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, HashMap<String, Integer>, HashMap<Integer, Map<Object, HashMap<String, Object>>>>();
      Integer integer0 = new Integer((-3110));
      HashMap<Integer, Map<Object, Object>> hashMap0 = new HashMap<Integer, Map<Object, Object>>();
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Integer, Object, Object>(hashMap0);
      Object object0 = doubleKeyMap1.get(integer0, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Integer integer0 = new Integer(0);
      HashMap<Object, Map<Integer, HashMap<Map<Object, HashMap<String, Object>>, String>>> hashMap0 = new HashMap<Object, Map<Integer, HashMap<Map<Object, HashMap<String, Object>>, String>>>();
      HashMap<Object, Map<Integer, Map<String, String>>> hashMap1 = new HashMap<Object, Map<Integer, Map<String, String>>>();
      DoubleKeyMap<Object, Integer, Map<String, String>> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Map<String, String>>(hashMap1);
      HashMap<Object, HashMap<String, Object>> hashMap2 = new HashMap<Object, HashMap<String, Object>>();
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      doubleKeyMap0.put((Object) hashMap2, integer0, (Map<String, String>) hashMap3);
      Map<String, String> map0 = doubleKeyMap0.get((Object) hashMap0, integer0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, String, String>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DoubleKeyMap<HashMap<String, Object>, HashMap<String, Integer>, HashMap<Integer, Map<Object, HashMap<String, Object>>>> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, HashMap<String, Integer>, HashMap<Integer, Map<Object, HashMap<String, Object>>>>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      HashMap<Integer, Map<Object, HashMap<String, Object>>> hashMap2 = new HashMap<Integer, Map<Object, HashMap<String, Object>>>();
      doubleKeyMap0.put(hashMap0, hashMap1, hashMap2);
      HashMap<Integer, Map<Object, HashMap<String, Object>>> hashMap3 = doubleKeyMap0.remove(hashMap0, hashMap1);
      assertSame(hashMap3, hashMap2);
      assertNotNull(hashMap3);
  }
}
