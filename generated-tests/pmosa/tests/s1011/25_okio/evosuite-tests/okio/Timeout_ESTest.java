/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 19:39:43 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InterruptedIOException;
import java.util.concurrent.TimeUnit;
import okio.Timeout;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Timeout_ESTest extends Timeout_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Timeout timeout0 = new Timeout();
      timeout0.clearDeadline();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      timeout0.timeout(2528L, timeUnit0);
      assertEquals(9100800000000000L, timeout0.timeoutNanos());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Timeout timeout0 = new Timeout();
      long long0 = (-1771L);
      timeout0.deadlineNanoTime(950L);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      // Undeclared exception!
      try { 
        timeout0.timeout((-1771L), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout < 0: -1771
         //
         verifyException("okio.Timeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Timeout timeout0 = Timeout.NONE;
      Timeout timeout1 = timeout0.clearDeadline();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Timeout timeout2 = timeout1.timeout(0L, timeUnit0);
      timeout2.NONE.clearTimeout();
      timeout1.clearDeadline();
      Timeout timeout3 = timeout1.clearTimeout();
      // Undeclared exception!
      try { 
        timeout3.deadline(0L, timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duration <= 0: 0
         //
         verifyException("okio.Timeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Timeout timeout0 = Timeout.NONE;
      Timeout timeout1 = timeout0.clearDeadline();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      Timeout timeout2 = timeout1.deadline(2304L, timeUnit0);
      Timeout timeout3 = timeout2.deadlineNanoTime(2304L);
      Timeout timeout4 = timeout3.clearTimeout();
      Timeout timeout5 = timeout4.timeout(2304L, timeUnit0);
      Timeout timeout6 = timeout5.deadlineNanoTime(212L);
      assertSame(timeout6, timeout4);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Timeout timeout0 = Timeout.NONE;
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      Timeout timeout1 = timeout0.timeout(3437L, timeUnit0);
      TimeUnit timeUnit1 = TimeUnit.HOURS;
      Timeout timeout2 = timeout1.deadline(3437L, timeUnit1);
      Timeout timeout3 = timeout2.clearTimeout();
      // Undeclared exception!
      try { 
        timeout3.deadlineNanoTime();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No deadline
         //
         verifyException("okio.Timeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Timeout timeout0 = new Timeout();
      timeout0.NONE.throwIfReached();
      timeout0.NONE.throwIfReached();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        timeout0.waitUntilNotified(object0);
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Timeout timeout0 = new Timeout();
      Timeout timeout1 = timeout0.clearTimeout();
      timeout1.clearDeadline();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      timeout1.timeout(1000000L, timeUnit0);
      timeout0.clearDeadline();
      Object object0 = new Object();
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        timeout0.waitUntilNotified(object1);
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Timeout timeout0 = new Timeout();
      timeout0.throwIfReached();
      Timeout timeout1 = timeout0.deadlineNanoTime((-7291L));
      Timeout timeout2 = timeout1.clearTimeout();
      // Undeclared exception!
      try { 
        timeout2.NONE.waitUntilNotified(timeout0);
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Timeout timeout0 = new Timeout();
      timeout0.deadlineNanoTime(91L);
      try { 
        timeout0.throwIfReached();
        fail("Expecting exception: InterruptedIOException");
      
      } catch(InterruptedIOException e) {
         //
         // deadline reached
         //
         verifyException("okio.Timeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Timeout timeout0 = new Timeout();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      Timeout timeout1 = timeout0.deadline(1000000L, timeUnit0);
      Timeout timeout2 = timeout1.clearTimeout();
      timeout2.throwIfReached();
      Timeout timeout3 = timeout0.timeout(1000000L, timeUnit0);
      timeout3.deadlineNanoTime((-2098L));
      Timeout timeout4 = timeout1.clearTimeout();
      timeout3.clearTimeout();
      Object object0 = new Object();
      Object object1 = new Object();
      try { 
        timeout4.waitUntilNotified(object1);
        fail("Expecting exception: InterruptedIOException");
      
      } catch(InterruptedIOException e) {
         //
         // timeout
         //
         verifyException("okio.Timeout", e);
      }
  }
}
