/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 17:42:19 GMT 2018
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>();
      Map<String, Map<String, Object>> map0 = doubleKeyMap0.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, String, Object> doubleKeyMap1 = new DoubleKeyMap<String, String, Object>(map0, class0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      // Undeclared exception!
      try { 
        doubleKeyMap1.put("D9^?!\"(N',:8qYmL!", (Map<String, Object>) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Object, Integer>(class0);
      doubleKeyMap0.remove(":j9[?l;!J#y", (Object) "U");
      doubleKeyMap0.newMap();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      DoubleKeyMap<Object, Integer, String> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, String>(class0);
      Integer integer2 = new Integer(0);
      doubleKeyMap1.remove((Object) "woRNX<0SAR]8Avuh", integer2);
      doubleKeyMap1.get((Object) doubleKeyMap0);
      Object object0 = new Object();
      HashMap<String, Map<Object, Integer>> hashMap0 = new HashMap<String, Map<Object, Integer>>();
      DoubleKeyMap<String, Object, Integer> doubleKeyMap2 = new DoubleKeyMap<String, Object, Integer>(hashMap0);
      Object object1 = new Object();
      doubleKeyMap2.remove((String) null, object1);
      DoubleKeyMap<String, Object, String> doubleKeyMap3 = new DoubleKeyMap<String, Object, String>((Map<String, Map<Object, String>>) null);
      DoubleKeyMap<String, Integer, Object> doubleKeyMap4 = new DoubleKeyMap<String, Integer, Object>();
      Integer integer3 = new Integer(0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      doubleKeyMap4.put("", (Integer) null, (Object) hashMap1);
      Integer integer4 = new Integer(1);
      Integer integer5 = new Integer(0);
      Object object2 = doubleKeyMap4.get("", integer5);
      assertNull(object2);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DoubleKeyMap<String, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Object, Integer>((Map<String, Map<Object, Integer>>) null);
      doubleKeyMap0.put("wrong proto type map ", (Object) null, (Integer) null);
      doubleKeyMap0.remove("wrong proto type map ", (Object) null);
      DoubleKeyMap<String, Object, String> doubleKeyMap1 = new DoubleKeyMap<String, Object, String>((Map<String, Map<Object, String>>) null);
      doubleKeyMap1.put(";6s", (Object) "wrong proto type map ", "wrong proto type map ");
      DoubleKeyMap<Object, String, String> doubleKeyMap2 = new DoubleKeyMap<Object, String, String>();
      doubleKeyMap2.put((Object) doubleKeyMap1, "wrong proto type map ", "wrong proto type map ");
      String string0 = doubleKeyMap2.put((Object) null, (String) null, "wrong proto type map ");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DoubleKeyMap<String, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Object, Integer>((Map<String, Map<Object, Integer>>) null);
      doubleKeyMap0.remove("", (Object) null);
      Integer integer0 = new Integer((-1));
      doubleKeyMap0.put("", (Object) "", integer0);
      doubleKeyMap0.remove("", (Object) null);
      DoubleKeyMap<String, Object, String> doubleKeyMap1 = new DoubleKeyMap<String, Object, String>((Map<String, Map<Object, String>>) null);
      DoubleKeyMap<String, Integer, Object> doubleKeyMap2 = new DoubleKeyMap<String, Integer, Object>();
      Integer integer1 = new Integer(0);
      Object object0 = doubleKeyMap2.get("tv^O\u0006VFFV]$<`]", integer1);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DoubleKeyMap<String, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Object, Integer>();
      doubleKeyMap0.remove(":j9[?l;!J#y", (Object) "Ug");
      DoubleKeyMap<String, Object, String> doubleKeyMap1 = new DoubleKeyMap<String, Object, String>((Map<String, Map<Object, String>>) null);
      doubleKeyMap1.put("", (Object) "", "");
      doubleKeyMap1.put("", (Object) null, "");
      DoubleKeyMap<String, Integer, Object> doubleKeyMap2 = new DoubleKeyMap<String, Integer, Object>();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      doubleKeyMap2.get(":j9[?l;!J#y", integer1);
      HashMap<Map<String, Object>, Map<String, Object>> hashMap0 = new HashMap<Map<String, Object>, Map<String, Object>>();
      DoubleKeyMap<Map<String, Object>, String, Object> doubleKeyMap3 = new DoubleKeyMap<Map<String, Object>, String, Object>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      // Undeclared exception!
      try { 
        doubleKeyMap3.put((Map<String, Object>) hashMap1, (Map<String, Object>) hashMap1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
