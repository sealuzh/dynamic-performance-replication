/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 16:23:04 GMT 2019
 */

package org.apache.commons.imaging.common.mylzw;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.nio.ByteOrder;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.imaging.common.mylzw.MyLzwCompressor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MyLzwCompressor_ESTest extends MyLzwCompressor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      MyLzwCompressor myLzwCompressor0 = new MyLzwCompressor(0, byteOrder0, true);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(myLzwCompressor0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte) (-5);
      try { 
        myLzwCompressor0.compress(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CodeFromString
         //
         verifyException("org.apache.commons.imaging.common.mylzw.MyLzwCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      MyLzwCompressor myLzwCompressor0 = new MyLzwCompressor((-608), byteOrder0, true);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(myLzwCompressor0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-127);
      byte byte0 = (byte)0;
      try { 
        myLzwCompressor0.compress(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CodeFromString
         //
         verifyException("org.apache.commons.imaging.common.mylzw.MyLzwCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      MyLzwCompressor.Listener myLzwCompressor_Listener0 = mock(MyLzwCompressor.Listener.class, new ViolatedAssumptionAnswer());
      MyLzwCompressor myLzwCompressor0 = new MyLzwCompressor(255, byteOrder0, false, myLzwCompressor_Listener0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(myLzwCompressor0);
      
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-1);
      try { 
        myLzwCompressor0.compress(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CodeFromString
         //
         verifyException("org.apache.commons.imaging.common.mylzw.MyLzwCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      MyLzwCompressor.Listener myLzwCompressor_Listener0 = mock(MyLzwCompressor.Listener.class, new ViolatedAssumptionAnswer());
      MyLzwCompressor myLzwCompressor0 = new MyLzwCompressor(1065, byteOrder0, true, myLzwCompressor_Listener0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(myLzwCompressor0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-114);
      byteArray0[5] = (byte) (-118);
      byte[] byteArray1 = myLzwCompressor0.compress(byteArray0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-121), (byte)78, (byte) (-7), (byte)8, (byte) (-114), (byte) (-118)}, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(6, byteArray0.length);
      assertEquals(1066, byteArray1.length);
      
      // Undeclared exception!
      myLzwCompressor0.compress(byteArray1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertSame(byteOrder1, byteOrder0);
      assertNotNull(byteOrder1);
      
      MyLzwCompressor myLzwCompressor0 = new MyLzwCompressor(0, byteOrder0, true);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(myLzwCompressor0);
      
      byte[] byteArray0 = new byte[0];
      try { 
        myLzwCompressor0.compress(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CodeFromString
         //
         verifyException("org.apache.commons.imaging.common.mylzw.MyLzwCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          ByteOrder byteOrder0 = ByteOrder.nativeOrder();
          assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
          assertNotNull(byteOrder0);
          
          MyLzwCompressor myLzwCompressor0 = new MyLzwCompressor(8, byteOrder0, true);
          assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
          assertNotNull(myLzwCompressor0);
          
          byte[] byteArray0 = new byte[5];
          byteArray0[0] = (byte) (-84);
          byteArray0[1] = (byte)48;
          byteArray0[2] = (byte)0;
          byteArray0[3] = (byte)0;
          byteArray0[4] = (byte) (-87);
          byte[] byteArray1 = myLzwCompressor0.compress(byteArray0);
          assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
          assertNotSame(byteArray0, byteArray1);
          assertNotSame(byteArray1, byteArray0);
          assertArrayEquals(new byte[] {(byte) (-84), (byte)48, (byte)0, (byte)0, (byte) (-87)}, byteArray0);
          assertArrayEquals(new byte[] {(byte)0, (byte)89, (byte) (-63), (byte)0, (byte)0, (byte)32, (byte)85, (byte)64}, byteArray1);
          assertNotNull(byteArray1);
          assertFalse(byteArray1.equals((Object)byteArray0));
          assertEquals(5, byteArray0.length);
          assertEquals(8, byteArray1.length);
          
          byte[] byteArray2 = new byte[5];
          assertFalse(byteArray2.equals((Object)byteArray1));
          assertFalse(byteArray2.equals((Object)byteArray0));
          
          byteArray2[0] = (byte) (-30);
          byteArray2[1] = (byte)8;
          byteArray2[2] = (byte)8;
          byteArray2[3] = (byte)13;
          byteArray2[4] = (byte)1;
          byte[] byteArray3 = myLzwCompressor0.compress(byteArray2);
          assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
          assertNotSame(byteArray2, byteArray3);
          assertNotSame(byteArray2, byteArray1);
          assertNotSame(byteArray2, byteArray0);
          assertNotSame(byteArray3, byteArray0);
          assertNotSame(byteArray3, byteArray2);
          assertNotSame(byteArray3, byteArray1);
          assertArrayEquals(new byte[] {(byte) (-30), (byte)8, (byte)8, (byte)13, (byte)1}, byteArray2);
          assertArrayEquals(new byte[] {(byte)0, (byte) (-59), (byte)33, (byte)64, (byte) (-48), (byte)32, (byte)64, (byte)64}, byteArray3);
          assertNotNull(byteArray3);
          assertFalse(byteArray2.equals((Object)byteArray1));
          assertFalse(byteArray2.equals((Object)byteArray0));
          assertFalse(byteArray3.equals((Object)byteArray0));
          assertFalse(byteArray3.equals((Object)byteArray2));
          assertFalse(byteArray3.equals((Object)byteArray1));
          assertEquals(5, byteArray2.length);
          assertEquals(8, byteArray3.length);
          
          byte[] byteArray4 = myLzwCompressor0.compress(byteArray2);
          assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
          assertNotSame(byteArray4, byteArray3);
          assertNotSame(byteArray4, byteArray0);
          assertNotSame(byteArray4, byteArray2);
          assertNotSame(byteArray4, byteArray1);
          assertNotSame(byteArray2, byteArray3);
          assertNotSame(byteArray2, byteArray1);
          assertNotSame(byteArray2, byteArray4);
          assertNotSame(byteArray2, byteArray0);
          assertArrayEquals(new byte[] {(byte)0, (byte) (-59), (byte)33, (byte)64, (byte) (-48), (byte)32, (byte)64, (byte)64}, byteArray4);
          assertArrayEquals(new byte[] {(byte) (-30), (byte)8, (byte)8, (byte)13, (byte)1}, byteArray2);
          assertNotNull(byteArray4);
          assertFalse(byteArray4.equals((Object)byteArray3));
          assertFalse(byteArray4.equals((Object)byteArray0));
          assertFalse(byteArray4.equals((Object)byteArray2));
          assertFalse(byteArray4.equals((Object)byteArray1));
          assertFalse(byteArray2.equals((Object)byteArray3));
          assertFalse(byteArray2.equals((Object)byteArray1));
          assertFalse(byteArray2.equals((Object)byteArray0));
          assertEquals(8, byteArray4.length);
          assertEquals(5, byteArray2.length);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertNotSame(byteOrder1, byteOrder0);
      assertNotNull(byteOrder1);
      assertFalse(byteOrder1.equals((Object)byteOrder0));
      
      MyLzwCompressor.Listener myLzwCompressor_Listener0 = mock(MyLzwCompressor.Listener.class, new ViolatedAssumptionAnswer());
      ByteOrder byteOrder2 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder2.toString());
      assertNotSame(byteOrder2, byteOrder0);
      assertSame(byteOrder2, byteOrder1);
      assertNotNull(byteOrder2);
      assertFalse(byteOrder2.equals((Object)byteOrder0));
      
      ByteOrder byteOrder3 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder3.toString());
      assertNotSame(byteOrder3, byteOrder0);
      assertSame(byteOrder3, byteOrder2);
      assertSame(byteOrder3, byteOrder1);
      assertNotNull(byteOrder3);
      assertFalse(byteOrder3.equals((Object)byteOrder0));
      
      MyLzwCompressor myLzwCompressor0 = new MyLzwCompressor(0, byteOrder0, false, myLzwCompressor_Listener0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(myLzwCompressor0);
      assertFalse(byteOrder0.equals((Object)byteOrder2));
      assertFalse(byteOrder0.equals((Object)byteOrder3));
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-38);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte) (-57);
      try { 
        myLzwCompressor0.compress(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CodeFromString
         //
         verifyException("org.apache.commons.imaging.common.mylzw.MyLzwCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      MyLzwCompressor.Listener myLzwCompressor_Listener0 = mock(MyLzwCompressor.Listener.class, new ViolatedAssumptionAnswer());
      MyLzwCompressor myLzwCompressor0 = new MyLzwCompressor(1065, byteOrder0, true, myLzwCompressor_Listener0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(myLzwCompressor0);
      
      byte[] byteArray0 = new byte[0];
      try { 
        myLzwCompressor0.compress(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CodeFromString
         //
         verifyException("org.apache.commons.imaging.common.mylzw.MyLzwCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertSame(byteOrder1, byteOrder0);
      assertNotNull(byteOrder1);
      
      ByteOrder byteOrder2 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder2.toString());
      assertSame(byteOrder2, byteOrder1);
      assertSame(byteOrder2, byteOrder0);
      assertNotNull(byteOrder2);
      
      ByteOrder byteOrder3 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder3.toString());
      assertSame(byteOrder3, byteOrder1);
      assertSame(byteOrder3, byteOrder0);
      assertSame(byteOrder3, byteOrder2);
      assertNotNull(byteOrder3);
      
      ByteOrder byteOrder4 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder4.toString());
      assertSame(byteOrder4, byteOrder0);
      assertSame(byteOrder4, byteOrder3);
      assertSame(byteOrder4, byteOrder2);
      assertSame(byteOrder4, byteOrder1);
      assertNotNull(byteOrder4);
      
      MyLzwCompressor myLzwCompressor0 = new MyLzwCompressor(1, byteOrder0, false);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(myLzwCompressor0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byte byte0 = (byte)46;
      try { 
        myLzwCompressor0.compress(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CodeFromString
         //
         verifyException("org.apache.commons.imaging.common.mylzw.MyLzwCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      MyLzwCompressor.Listener myLzwCompressor_Listener0 = mock(MyLzwCompressor.Listener.class, new ViolatedAssumptionAnswer());
      MyLzwCompressor myLzwCompressor0 = new MyLzwCompressor(1065, byteOrder0, true, myLzwCompressor_Listener0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(myLzwCompressor0);
      
      // Undeclared exception!
      try { 
        myLzwCompressor0.compress((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.mylzw.MyLzwCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      MyLzwCompressor.Listener myLzwCompressor_Listener0 = mock(MyLzwCompressor.Listener.class, new ViolatedAssumptionAnswer());
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertSame(byteOrder1, byteOrder0);
      assertNotNull(byteOrder1);
      
      ByteOrder byteOrder2 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder2.toString());
      assertSame(byteOrder2, byteOrder1);
      assertSame(byteOrder2, byteOrder0);
      assertNotNull(byteOrder2);
      
      MyLzwCompressor myLzwCompressor0 = new MyLzwCompressor(0, byteOrder0, false, myLzwCompressor_Listener0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(myLzwCompressor0);
      
      ByteOrder byteOrder3 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder3.toString());
      assertSame(byteOrder3, byteOrder0);
      assertSame(byteOrder3, byteOrder2);
      assertSame(byteOrder3, byteOrder1);
      assertNotNull(byteOrder3);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = myLzwCompressor0.compress(byteArray0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertSame(byteOrder0, byteOrder1);
      assertSame(byteOrder0, byteOrder2);
      assertSame(byteOrder0, byteOrder3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)5}, byteArray1);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(9, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      byte[] byteArray2 = myLzwCompressor0.compress(byteArray0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertSame(byteOrder0, byteOrder1);
      assertSame(byteOrder0, byteOrder2);
      assertSame(byteOrder0, byteOrder3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)5}, byteArray2);
      assertNotNull(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(9, byteArray0.length);
      assertEquals(1, byteArray2.length);
      
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)0;
      try { 
        myLzwCompressor0.compress(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CodeFromString
         //
         verifyException("org.apache.commons.imaging.common.mylzw.MyLzwCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MyLzwCompressor myLzwCompressor0 = new MyLzwCompressor(0, (ByteOrder) null, true);
      assertNotNull(myLzwCompressor0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)8;
      try { 
        myLzwCompressor0.compress(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CodeFromString
         //
         verifyException("org.apache.commons.imaging.common.mylzw.MyLzwCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertSame(byteOrder1, byteOrder0);
      assertNotNull(byteOrder1);
      
      MyLzwCompressor.Listener myLzwCompressor_Listener0 = mock(MyLzwCompressor.Listener.class, new ViolatedAssumptionAnswer());
      MyLzwCompressor myLzwCompressor0 = new MyLzwCompressor(8, byteOrder0, false, myLzwCompressor_Listener0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(myLzwCompressor0);
      
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = myLzwCompressor0.compress(byteArray0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertSame(byteOrder0, byteOrder1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)1, (byte)4, (byte)4}, byteArray1);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1, byteArray0.length);
      assertEquals(4, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertSame(byteOrder1, byteOrder0);
      assertNotNull(byteOrder1);
      
      ByteOrder byteOrder2 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder2.toString());
      assertSame(byteOrder2, byteOrder0);
      assertSame(byteOrder2, byteOrder1);
      assertNotNull(byteOrder2);
      
      ByteOrder byteOrder3 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder3.toString());
      assertSame(byteOrder3, byteOrder0);
      assertSame(byteOrder3, byteOrder1);
      assertSame(byteOrder3, byteOrder2);
      assertNotNull(byteOrder3);
      
      MyLzwCompressor myLzwCompressor0 = new MyLzwCompressor(8, byteOrder0, false);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(myLzwCompressor0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)32;
      byte[] byteArray1 = myLzwCompressor0.compress(byteArray0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertSame(byteOrder0, byteOrder3);
      assertSame(byteOrder0, byteOrder1);
      assertSame(byteOrder0, byteOrder2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)32}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)65, (byte)4, (byte)4}, byteArray1);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      byte[] byteArray2 = myLzwCompressor0.compress(byteArray0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertSame(byteOrder0, byteOrder3);
      assertSame(byteOrder0, byteOrder1);
      assertSame(byteOrder0, byteOrder2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)32}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)65, (byte)4, (byte)4}, byteArray2);
      assertNotNull(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(1, byteArray0.length);
      assertEquals(4, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      MyLzwCompressor.Listener myLzwCompressor_Listener0 = mock(MyLzwCompressor.Listener.class, new ViolatedAssumptionAnswer());
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertSame(byteOrder1, byteOrder0);
      assertNotNull(byteOrder1);
      
      MyLzwCompressor myLzwCompressor0 = new MyLzwCompressor(2, byteOrder0, false, myLzwCompressor_Listener0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(myLzwCompressor0);
      
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = myLzwCompressor0.compress(byteArray0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertSame(byteOrder0, byteOrder1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-124), (byte)11}, byteArray1);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      byte[] byteArray2 = myLzwCompressor0.compress(byteArray0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertSame(byteOrder0, byteOrder1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-124), (byte)11}, byteArray2);
      assertNotNull(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray2.length);
      
      byte[] byteArray3 = myLzwCompressor0.compress(byteArray0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertSame(byteOrder0, byteOrder1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-124), (byte)11}, byteArray3);
      assertNotNull(byteArray3);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      MyLzwCompressor.Listener myLzwCompressor_Listener0 = mock(MyLzwCompressor.Listener.class, new ViolatedAssumptionAnswer());
      MyLzwCompressor myLzwCompressor0 = new MyLzwCompressor(8, byteOrder0, false, myLzwCompressor_Listener0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)47;
      byte byte0 = (byte) (-123);
      byteArray0[1] = (byte) (-123);
      myLzwCompressor0.compress(byteArray0);
      myLzwCompressor0.compress(byteArray0);
      byte[] byteArray1 = null;
      // Undeclared exception!
      try { 
        myLzwCompressor0.compress((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.mylzw.MyLzwCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      MyLzwCompressor myLzwCompressor0 = new MyLzwCompressor(1, byteOrder0, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      try { 
        myLzwCompressor0.compress(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CodeFromString
         //
         verifyException("org.apache.commons.imaging.common.mylzw.MyLzwCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      MyLzwCompressor.Listener myLzwCompressor_Listener0 = mock(MyLzwCompressor.Listener.class, new ViolatedAssumptionAnswer());
      MyLzwCompressor myLzwCompressor0 = new MyLzwCompressor(1065, byteOrder0, true, myLzwCompressor_Listener0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte) (-2);
      byte[] byteArray1 = myLzwCompressor0.compress(byteArray0);
      assertEquals(933, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      MyLzwCompressor.Listener myLzwCompressor_Listener0 = mock(MyLzwCompressor.Listener.class, new ViolatedAssumptionAnswer());
      MyLzwCompressor myLzwCompressor0 = new MyLzwCompressor(8, byteOrder0, false, myLzwCompressor_Listener0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-44);
      byte[] byteArray1 = myLzwCompressor0.compress(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-87), (byte)5, (byte)4}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      MyLzwCompressor.Listener myLzwCompressor_Listener0 = mock(MyLzwCompressor.Listener.class, new ViolatedAssumptionAnswer());
      MyLzwCompressor myLzwCompressor0 = new MyLzwCompressor(8, byteOrder0, false, myLzwCompressor_Listener0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)33;
      myLzwCompressor0.compress(byteArray0);
      MyLzwCompressor.Listener myLzwCompressor_Listener1 = mock(MyLzwCompressor.Listener.class, new ViolatedAssumptionAnswer());
      MyLzwCompressor myLzwCompressor1 = new MyLzwCompressor(405, byteOrder0, false, myLzwCompressor_Listener1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      MyLzwCompressor.Listener myLzwCompressor_Listener0 = mock(MyLzwCompressor.Listener.class, new ViolatedAssumptionAnswer());
      MyLzwCompressor myLzwCompressor0 = new MyLzwCompressor(1065, byteOrder0, true);
      byte[] byteArray0 = new byte[0];
      try { 
        myLzwCompressor0.compress(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CodeFromString
         //
         verifyException("org.apache.commons.imaging.common.mylzw.MyLzwCompressor", e);
      }
  }
}
