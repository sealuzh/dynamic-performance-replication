/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 22:06:16 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.InputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ClassReader;
import wheel.asm.ClassVisitor;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;
import wheel.asm.Frame;
import wheel.asm.MethodWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassReader_ESTest extends ClassReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader("Nh`");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Label");
      ClassReader classReader1 = new ClassReader(classReader0.b);
      assertEquals(1903, classReader1.header);
      
      classReader1.getClassName();
      int int0 = Frame.ARRAY_OF;
      classReader1.getInterfaces();
      String string0 = classReader0.getSuperName();
      assertEquals("java/lang/Object", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.read();
      sequenceInputStream0.mark((-2510));
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(sequenceInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
      char[] charArray0 = new char[7];
      charArray0[0] = 'h';
      charArray0[1] = 'C';
      int int0 = classReader0.getItem(175);
      assertEquals(824, int0);
      
      classReader0.getInterfaces();
      int int1 = classReader0.getAccess();
      assertEquals(7802, classReader0.header);
      assertEquals(32, int1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Label");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 28);
      classReader0.accept((ClassVisitor) classWriter0, 1);
      classReader0.getItem(169);
      classReader0.getInterfaces();
      classReader0.getAccess();
      classReader0.readInt(169);
      assertEquals(33, classReader0.getAccess());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Label");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 28);
      Attribute attribute0 = new Attribute("wheel.asm.Label");
      classWriter0.visitAttribute(attribute0);
      classReader0.getItem(28);
      classReader0.getInterfaces();
      classReader0.getAccess();
      classReader0.readClass(138, (char[]) null);
      classReader0.readByte(1000);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Label");
      char[] charArray0 = new char[7];
      ClassWriter classWriter0 = new ClassWriter(classReader0, 28);
      Attribute attribute0 = new Attribute("wheel.asm.Label");
      classReader0.accept((ClassVisitor) classWriter0, 31);
      classWriter0.visitAttribute(attribute0);
      classReader0.getSuperName();
      // Undeclared exception!
      try { 
        classReader0.readConst(2, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Label");
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader(classReader0.b, 4, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7214
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassReader");
      char[] charArray0 = new char[3];
      charArray0[0] = 'n';
      charArray0[1] = ')';
      charArray0[2] = 'a';
      // Undeclared exception!
      try { 
        classReader0.readConst(4, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
      char[] charArray0 = new char[7];
      charArray0[0] = 'h';
      charArray0[1] = 'C';
      classReader0.getInterfaces();
      charArray0[2] = '5';
      charArray0[3] = 'l';
      classReader0.getSuperName();
      // Undeclared exception!
      try { 
        classReader0.readConst(175, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Label");
      char[] charArray0 = new char[7];
      ClassWriter classWriter0 = new ClassWriter(classReader0, 28);
      Attribute attribute0 = new Attribute("wheel.asm.Label");
      classReader0.accept((ClassVisitor) classWriter0, 529);
      classWriter0.visitAttribute(attribute0);
      classReader0.getSuperName();
      // Undeclared exception!
      try { 
        classReader0.readConst(2, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
          char[] charArray0 = new char[7];
          charArray0[0] = 'h';
          ClassWriter classWriter0 = new ClassWriter(2249);
          classWriter0.cr = classReader0;
          FieldWriter fieldWriter0 = classWriter0.firstField;
          classReader0.copyPool(classWriter0);
          classReader0.getAccess();
          classReader0.getAccess();
          Attribute attribute0 = new Attribute("wheel.asm.MethodWriter");
          classReader0.getSuperName();
          // Undeclared exception!
          try { 
            classReader0.readConst(32, charArray0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
          
          } catch(ArrayIndexOutOfBoundsException e) {
             //
             // 7
             //
             verifyException("wheel.asm.ClassReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
      char[] charArray0 = new char[7];
      ClassWriter classWriter0 = new ClassWriter(1);
      classReader0.copyPool(classWriter0);
      classReader0.getSuperName();
      classReader0.readConst(2, charArray0);
      classReader0.getClassName();
      classReader0.getSuperName();
      classReader0.accept((ClassVisitor) classWriter0, 1978);
      classReader0.getAccess();
      classReader0.accept((ClassVisitor) classWriter0, 32);
      classReader0.readShort(classWriter0.COMPUTE_MAXS);
      classReader0.getSuperName();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Label");
      ClassReader classReader1 = new ClassReader(classReader0.b);
      classReader1.getClassName();
      ClassWriter classWriter0 = new ClassWriter(4);
      classReader1.accept((ClassVisitor) classWriter0, 1);
      Attribute[] attributeArray0 = new Attribute[1];
      Attribute attribute0 = new Attribute("wheel.asm.Label");
      attributeArray0[0] = attribute0;
      classReader0.accept((ClassVisitor) classWriter0, attributeArray0, 1244);
      classReader0.getItem(94);
      classReader1.getInterfaces();
      classReader0.getAccess();
      classReader0.readInt(1244);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
      char[] charArray0 = new char[6];
      ClassWriter classWriter0 = new ClassWriter(1);
      classReader0.copyPool(classWriter0);
      classReader0.getSuperName();
      classReader0.readConst(2, charArray0);
      classReader0.getClassName();
      // Undeclared exception!
      try { 
        classReader0.readConst(10, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
      char[] charArray0 = new char[7];
      charArray0[0] = 'h';
      charArray0[1] = 'C';
      classReader0.getSuperName();
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader(classReader0.b, 882, 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 64077
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Label");
      ClassWriter classWriter0 = new ClassWriter((-1));
      classReader0.accept((ClassVisitor) classWriter0, 710);
      Attribute attribute0 = new Attribute("wheel.asm.Label");
      Attribute[] attributeArray0 = new Attribute[2];
      attributeArray0[0] = attribute0;
      attributeArray0[1] = attribute0;
      classReader0.accept((ClassVisitor) classWriter0, attributeArray0, 248);
      classReader0.getItem((-1));
      classReader0.getInterfaces();
      classReader0.getAccess();
      int int0 = 732;
      classReader0.readInt(int0);
      int int1 = 1196;
      classReader0.getItem(int1);
  }
}
