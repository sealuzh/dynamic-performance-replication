/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 16:55:57 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONField;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.asm.Opcodes;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.EnumDeserializer;
import com.alibaba.fastjson.parser.deserializer.JSONPDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.ObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.OptionalCodec;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer;
import com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer;
import com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.parser.deserializer.TimeDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeWriter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.Point;
import java.awt.RenderingHints;
import java.io.CharArrayWriter;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.sql.DataTruncation;
import java.sql.Date;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.ChoiceFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.time.Clock;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.util.Currency;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.NavigableMap;
import java.util.Properties;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.UUID;
import java.util.Vector;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Map<String, String> map0 = new java.util.IdentityHashMap<String, String>();
      Class<InterruptedException> class0 = InterruptedException.class;
      TypeUtils.computeGetters(class0, map0);
      Locale locale0 = TypeUtils.toLocale("g");
      assertEquals("g", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TypeUtils.fnv1a_64("");
      Class<Double> class0 = Double.class;
      TypeUtils.isKotlin(class0);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0, false);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      Class<Double> class0 = Double.class;
      boolean boolean0 = TypeUtils.isKotlin(class0);
      assertFalse(boolean0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      Class<SqlDateDeserializer> class1 = SqlDateDeserializer.class;
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) identityHashMap0, false);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TypeUtils.loadClass("/J<f#r3iwq*x.n~-]p+");
      Integer integer0 = TypeUtils.castToInt((Object) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<InstantiationError> class0 = InstantiationError.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.lowerKey("d`.R1d");
      treeMap0.lowerKey("Ljava.awt.Rectangle");
      treeMap0.tailMap("Ljava.util.concurrent.ConcurrentSkipListSet", true);
      treeMap0.subMap("Ljava.util.concurrent.ConcurrentSkipListSet", true, "[F", false);
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0, true);
      Class<?> class1 = TypeUtils.loadClass("[F");
      assertFalse(class1.isInterface());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TypeUtils.clearClassMapping();
      Class<Double> class0 = Double.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class class1 = (Class)TypeUtils.getCollectionItemType(type0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(class1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lan\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TypeUtils.isNumber("[{]E");
      Class<Double> class0 = Double.TYPE;
      TypeUtils.isKotlin(class0);
      Class<?> class1 = TypeUtils.getRawClass(class0);
      assertFalse(class1.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      Type type0 = TypeUtils.unwrapOptional(class0);
      TypeUtils.getCollectionItemClass(type0);
      Type[] typeArray0 = new Type[6];
      typeArray0[2] = (Type) class0;
      Locale locale0 = TypeUtils.toLocale("J");
      assertEquals("j", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException();
      illegalMonitorStateException0.getSuppressed();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("com.alibaba.fastjson.parser.JSONLexerBase", "com.alibaba.fastjson.parser.JSONLexerBase", (byte)49, illegalMonitorStateException0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig.getGlobalInstance();
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, (PropertyNamingStrategy) null, true, false);
      ParserConfig parserConfig0 = ParserConfig.global;
      aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      assertEquals(0, javaBeanInfo0.parserFeatures);
      
      Short short0 = new Short((byte)49);
      Time time0 = TypeUtils.castToSqlTime(short0);
      assertNotNull(time0);
      
      Class<RenderingHints> class1 = RenderingHints.class;
      int int0 = TypeUtils.getSerializeFeatures(class1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Byte byte0 = new Byte((byte)47);
      Byte.compare((byte)47, (byte)8);
      Byte.toUnsignedInt((byte)47);
      Byte.compare((byte) (-76), (byte) (-76));
      TypeUtils.castToSqlTime(byte0);
      TypeUtils.castToDouble(byte0);
      String string0 = null;
      // Undeclared exception!
      try { 
        TypeUtils.fnv1a_64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Byte byte0 = new Byte((byte)45);
      int int0 = Opcodes.V1_5;
      Class<TimeUnit> class0 = TimeUnit.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) byte0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.concurrent.TimeUnit
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TypeUtils.decapitalize("Ljava.util.concurrent.ConcurrentSkipListMap");
      TypeUtils.fnv1a_64_lower("ljava.util.concurrent.ConcurrentSkipListMap");
      Class<BufferCapabilities> class0 = BufferCapabilities.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGettersWithFieldBase(class0, weakHashMap0, false, propertyNamingStrategy0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<Dimension> class0 = Dimension.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, true);
      Class<NoSuchMethodException> class1 = NoSuchMethodException.class;
      TypeUtils.castToJavaBean((Object) null, class1);
      Clock clock0 = MockClock.systemUTC();
      LocalTime localTime0 = MockLocalTime.now(clock0);
      Time time0 = Time.valueOf(localTime0);
      TypeUtils.castToSqlDate(time0);
      TypeUtils.castToSqlDate(time0);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      ParserConfig parserConfig0 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockJapaneseDate0, (ParameterizedType) null, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      TypeUtils.isKotlin(class0);
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      Class<?> class1 = javaBeanSerializer0.getType();
      Type type0 = TypeUtils.getGenericParamType(class1);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Double> class0 = Double.TYPE;
      Byte.compare((byte)13, (byte)13);
      Class<TimeUnit> class1 = TimeUnit.class;
      TypeUtils.castToJavaBean((Object) null, class1);
      TypeUtils.clearClassMapping();
      TypeUtils.loadClass("java.time.Duration");
      Integer integer0 = TypeUtils.castToInt((Object) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.getCollectionItemType(type0);
      TypeUtils.castToBigInteger((Object) null);
      java.util.IdentityHashMap<TimeUnit, TimeUnit> identityHashMap0 = new java.util.IdentityHashMap<TimeUnit, TimeUnit>();
      JavaObjectDeserializer javaObjectDeserializer0 = new JavaObjectDeserializer();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(javaObjectDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Float float0 = new Float(2787.019F);
      Long long0 = TypeUtils.castToLong(float0);
      assertEquals(2787L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TypeUtils.clearClassMapping();
      Class<Long> class0 = Long.class;
      TypeUtils.isProxy(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : class java.lang.Long
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Boolean boolean0 = new Boolean("com.alibaba.fastjson.uti.ASMClassLader");
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("com.alibaba.fastjson.uti.ASMClassLader");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : com.alibaba.fastjson.uti.ASMClassLader
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TypeUtils.clearClassMapping();
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TypeUtils.loadClass("java.time.Duration");
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("java.time.Duration");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.time.Duration\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TypeUtils.isNumber(":[{]&E");
      TypeUtils.fnv1a_64(")");
      Class<Double> class0 = Double.TYPE;
      TypeUtils.isKotlin(class0);
      Long long0 = new Long((-5808618445805089436L));
      TypeUtils.getRawClass(class0);
      TypeUtils.toLocale("j|U/s8|_{ns");
      InstantiationError instantiationError0 = new InstantiationError();
      String string0 = TypeUtils.castToString(instantiationError0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Jdk8DateCodec jdk8DateCodec0 = Jdk8DateCodec.instance;
      Class<Byte> class0 = Byte.TYPE;
      Class<Double> class1 = Double.TYPE;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<Boolean> class2 = Boolean.TYPE;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class1, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TypeUtils.castToSqlTime((Object) null);
      TypeUtils.decapitalize("Ljava.util.concurrent.ConcurrentSkipListMap");
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<Double> class0 = Double.class;
      TypeUtils.isKotlin(class0);
      Class<TypeNotPresentException> class1 = TypeNotPresentException.class;
      TypeUtils.isProxy(class1);
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class1, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.TypeNotPresentException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<Point> class0 = Point.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) null, (Map<String, Field>) identityHashMap0, false, propertyNamingStrategy0);
      TypeUtils.isGenericParamType(class0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TypeUtils.getClassFromMapping("QN~]q zHZ,-,gg/");
      TypeUtils.isGenericParamType((Type) null);
      TypeUtils.isGenericParamType((Type) null);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      TypeUtils.loadClass("8B@)ojfD_Z", classLoader0, false);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("_9YF]S%`T[", parserConfig0, 44);
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) parserConfig0, (Object) "_9YF]S%`T[");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("_9YF]S%`T[", (String) null);
      ParseContext parseContext1 = defaultJSONParser0.setContext(parseContext0, (Object) classLoader0, (Object) sQLNonTransientConnectionException0);
      Type type0 = parseContext1.type;
      TypeUtils.isGenericParamType((Type) null);
      TypeUtils.loadClass("com.alibaba.fastjson.serializer.LongCodec", classLoader0);
      TypeUtils.cast((Object) null, (Type) null, parserConfig0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      AtomicInteger atomicInteger0 = new AtomicInteger(2);
      atomicInteger0.decrementAndGet();
      TypeUtils.isHibernateInitialized(atomicInteger0);
      JavaBeanInfo.getBuilderClass((JSONType) null);
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TypeUtils.fnv1a_64(" KD,s5Ut.");
      Class<Double> class0 = Double.class;
      TypeUtils.isKotlin(class0);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) identityHashMap0, false);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TypeUtils.fnv1a_64("");
      Class<Double> class0 = Double.class;
      TypeUtils.isKotlin(class0);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) null, false);
      Jdk8DateCodec jdk8DateCodec0 = Jdk8DateCodec.instance;
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(jdk8DateCodec0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec@3
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Jdk8DateCodec jdk8DateCodec0 = Jdk8DateCodec.instance;
      Type[] typeArray0 = new Type[4];
      Class<Byte> class0 = Byte.TYPE;
      Class<Double> class1 = Double.TYPE;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<Boolean> class2 = Boolean.TYPE;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JobAttributes jobAttributes0 = new JobAttributes();
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) jobAttributes0, (ParameterizedType) parameterizedTypeImpl1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class int
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<InstantiationError> class0 = InstantiationError.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashtable0, propertyNamingStrategy0);
      JSONObject jSONObject0 = new JSONObject(true);
      Class<SQLDataException> class1 = SQLDataException.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      parserConfig0.setDefaultClassLoader(classLoader0);
      TypeUtils.castToJavaBean((Map<String, Object>) jSONObject0, class1, parserConfig0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      String string0 = "";
      Method method0 = null;
      String string1 = "(DZ)V";
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class0, "(DZ)V", fieldArray0);
      int int0 = (-999);
      int int1 = 65;
      int int2 = 16384;
      Class<JavaObjectDeserializer> class1 = JavaObjectDeserializer.class;
      // Undeclared exception!
      try { 
        TypeUtils.getSuperMethodAnnotation(class1, (Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<Time> class0 = Time.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      Class<?> class1 = javaBeanSerializer0.getType();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn("com.google.common.collect.TreeMultimap", (String) null).when(genericArrayType0).toString();
      doReturn(class1).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : com.google.common.collect.TreeMultimap
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      Hashtable<InterruptedException, SQLSyntaxErrorException> hashtable0 = new Hashtable<InterruptedException, SQLSyntaxErrorException>();
      TypeUtils.castToJavaBean((Object) hashtable0, class0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.getCollectionItemType(type0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lan\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TypeUtils.fnv1a_64("cause");
      Class<Double> class0 = Double.class;
      TypeUtils.getGenericParamType(class0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TypeUtils.loadClass("J,?|f4v&9G");
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      Thread thread0 = MockThread.currentThread();
      timeUnit0.timedJoin(thread0, 0L);
      timeUnit0.toHours(1L);
      timeUnit0.toHours(1121L);
      timeUnit0.toMinutes((-4171L));
      TypeUtils.castToString(timeUnit0);
      TypeUtils.castToLong((Object) null);
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      Hashtable<InterruptedException, SQLSyntaxErrorException> hashtable0 = new Hashtable<InterruptedException, SQLSyntaxErrorException>();
      IllegalArgumentException illegalArgumentException0 = TypeUtils.castToJavaBean((Object) hashtable0, class0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      Class<TimeUnit> class1 = TimeUnit.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) illegalArgumentException0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.concurrent.TimeUnit
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(illegalMonitorStateException0);
      sQLIntegrityConstraintViolationException0.printStackTrace();
      TypeUtils.loadClass("cause");
      TypeUtils.isHibernateInitialized(sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Double> class0 = Double.TYPE;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<Boolean> class1 = Boolean.TYPE;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, parameterizedTypeImpl0, class1);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.put("com.alibaba.fastjson.serializer.AppendableSerializer", "com.alibaba.fastjson.serializer.AppendableSerializer");
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) treeMap0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(typeArray0[0]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class boolean
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("iIg");
      illegalMonitorStateException0.getLocalizedMessage();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(illegalMonitorStateException0);
      TypeUtils.decapitalize("wNs<\"v!a27:^\"h");
      Class<PropertyProcessableDeserializer> class0 = PropertyProcessableDeserializer.class;
      TypeUtils.getSerializeFeatures(class0);
      AtomicInteger atomicInteger0 = new AtomicInteger(0);
      TypeUtils.castToBoolean((Object) null);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.forEachValue(7442624256860549330L, consumer0);
      concurrentHashMap0.keySet();
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) concurrentHashMap0, true);
      ParserConfig parserConfig0 = new ParserConfig();
      TypeUtils.decapitalize("fastjson.parser.deny");
      AtomicInteger atomicInteger0 = new AtomicInteger((-1795836997));
      NumberFormatException numberFormatException0 = new NumberFormatException();
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(numberFormatException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.lang.NumberFormatException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("iIg");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(illegalMonitorStateException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.sql.SQLIntegrityConstraintViolationException: java.lang.IllegalMonitorStateException: iIg
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TypeUtils.clearClassMapping();
      Class<Double> class0 = Double.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : double
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Constructor<TimeUnit>[] constructorArray0 = (Constructor<TimeUnit>[]) Array.newInstance(Constructor.class, 5);
      constructorArray0[0] = constructorArray0[2];
      // Undeclared exception!
      try { 
        TypeUtils.getKoltinConstructor(constructorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TypeUtils.isAnnotationPresentOneToMany((Method) null);
      TypeUtils typeUtils0 = new TypeUtils();
      // Undeclared exception!
      try { 
        TypeUtils.getKoltinConstructor((Constructor[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("@h;`9Z9^(vID%", "@h;`9Z9^(vID%", 54, illegalMonitorStateException0);
      TypeNotPresentException typeNotPresentException0 = new TypeNotPresentException("@h;`9Z9^(vID%", sQLInvalidAuthorizationSpecException0);
      illegalMonitorStateException0.initCause(typeNotPresentException0);
      String string0 = "0K\\sg>gEbn,=";
      TimeZone.getTimeZone("0Ksg>gEbn,=");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("0Ksg>gEbn,=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : 0Ksg>gEbn,=
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<Double> class0 = Double.class;
      TypeUtils.isKotlin(class0);
      TypeUtils.castToSqlDate("");
      ParserConfig parserConfig0 = new ParserConfig(false);
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException();
      // Undeclared exception!
      try { 
        TypeUtils.checkPrimitiveArray((GenericArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException();
      TypeUtils.decapitalize("@h;`9Z9^(vID%");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      sQLNonTransientException0.getSuppressed();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("@h;`9Z9^(vID%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : @h;`9Z9^(vID%
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Class<Double> class0 = Double.TYPE;
      Class<Byte> class1 = Byte.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.getCollectionItemType(class0);
      TypeUtils.castToBigInteger((Object) null);
      LinkedHashSet<SQLNonTransientConnectionException> linkedHashSet0 = new LinkedHashSet<SQLNonTransientConnectionException>();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(linkedHashSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TypeUtils.fnv1a_64("");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      aSMClassLoader0.getParent();
      classLoader0.setClassAssertionStatus("", true);
      aSMDeserializerFactory0.classLoader.clearAssertionStatus();
      ClassLoader.getSystemClassLoader();
      ASMClassLoader aSMClassLoader1 = aSMDeserializerFactory0.classLoader;
      aSMClassLoader1.setPackageAssertionStatus("", true);
      TypeUtils.loadClass("", (ClassLoader) null, false);
      TypeUtils.loadClass("Ljava.lang.AutoCloseable", (ClassLoader) aSMClassLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TypeUtils.fnv1a_64("cause");
      Class<Insets> class0 = Insets.class;
      TypeUtils.getParserFeatures(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : class java.awt.Insets
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = "methodName";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "methodName");
      Class<SQLException> class0 = SQLException.class;
      Class<Character> class1 = Character.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) ".0", (Type) class1, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : .0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TypeUtils.loadClass("J,?|f4v&9G");
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      MockThread mockThread0 = new MockThread("J,?|f4v&9G");
      timeUnit0.timedJoin(mockThread0, 0L);
      timeUnit0.toHours(1L);
      timeUnit0.toHours(1121L);
      TypeUtils.castToString(timeUnit0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.tailMap("J,?|f4v&9G", false);
      NavigableMap<String, String> navigableMap0 = treeMap0.subMap(".0", false, "java.util.concurrent.TimeUnit$3@0000000001", false);
      Class<SqlDateDeserializer> class0 = SqlDateDeserializer.class;
      boolean boolean0 = true;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) navigableMap0, true);
      TypeUtils.loadClass("java.util.concurrent.TimeUnit$3@0000000001");
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) navigableMap0, (Type) parameterizedTypeImpl0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "methodName");
      Class<SQLException> class0 = SQLException.class;
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class1;
      typeArray0[3] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[1], typeArray0[3]);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, class1, typeArray0[2]);
      TypeUtils.cast((Object) null, (ParameterizedType) parameterizedTypeImpl1, (ParserConfig) null);
      TypeUtils.decapitalize(".");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = ".0";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".0");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      sQLNonTransientException0.getSuppressed();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) ".0", type0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : Mock for GenericArrayType, hashCode: 1275365844
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Jdk8DateCodec jdk8DateCodec0 = Jdk8DateCodec.instance;
      Type[] typeArray0 = new Type[4];
      Class<Byte> class0 = Byte.TYPE;
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      typeArray0[0] = (Type) class1;
      Class<Double> class2 = Double.TYPE;
      typeArray0[1] = (Type) class2;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      typeArray0[2] = (Type) parameterizedTypeImpl0;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.put("getCalendar", (String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TypeUtils.createCollection(typeArray0[2]);
      TypeUtils.isNumber("getCalendar");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TypeUtils.isNumber("(Z)Ljava/lang/Boolean;");
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException();
      Throwable throwable0 = null;
      illegalMonitorStateException0.initCause((Throwable) null);
      String string0 = "0K\\sP>gEbn,=";
      TimeZone.getTimeZone("(Z)Ljava/lang/Boolean;");
      TypeUtils.castToSqlDate((Object) null);
      Short short0 = new Short((short)2);
      Jdk8DateCodec jdk8DateCodec0 = Jdk8DateCodec.instance;
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(jdk8DateCodec0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = "Ljava.util.concurrent.ConcurrentSkipListMap";
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("Ljava.util.concurrent.ConcurrentSkipListMap");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Ljava.util.concurrent.ConcurrentSkipListMap\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<SQLDataException> class0 = SQLDataException.class;
      TypeUtils.isPath(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.sql.SQLDataException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      Class<Short> class0 = Short.class;
      TypeUtils.decapitalize("");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      sQLNonTransientException0.getSuppressed();
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException("@h;`9Z9^(vID%");
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) noSuchFieldException0, (Type) class0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : java.lang.NoSuchFieldException: @h;`9Z9^(vID%
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<ImageCapabilities> class0 = ImageCapabilities.class;
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      TypeUtils.getSerializeFeatures(class0);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      hashtable0.clone();
      TypeUtils.decapitalize("");
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashtable0, true);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean("javax.persistence.ManyToMany");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : javax.persistence.ManyToMany
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("cause");
      TypeUtils.loadClass("cause");
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, (Type) null, (Type) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) illegalMonitorStateException0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Jdk8DateCodec jdk8DateCodec0 = Jdk8DateCodec.instance;
      Type[] typeArray0 = new Type[4];
      Class<Double> class0 = Double.TYPE;
      typeArray0[1] = (Type) class0;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      typeArray0[2] = (Type) parameterizedTypeImpl0;
      Class<Boolean> class1 = Boolean.TYPE;
      typeArray0[3] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, class1, typeArray0[1]);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) jdk8DateCodec0, (ParameterizedType) parameterizedTypeImpl1, parserConfig0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TypeUtils.clearClassMapping();
      Class<Long> class0 = Long.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      Type type1 = TypeUtils.getCollectionItemType(type0);
      Class<?> class1 = TypeUtils.getClass(type1);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(class1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lan\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TypeUtils.isNumber(":[{]&E");
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      BiConsumer<Object, Field> biConsumer0 = (BiConsumer<Object, Field>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Class<Double> class0 = Double.TYPE;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<Boolean> class1 = Boolean.TYPE;
      TypeUtils.getClass((Type) class1);
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, class0, parameterizedTypeImpl0);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) null, (ParameterizedType) parameterizedTypeImpl1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@dca
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      TypeUtils.decapitalize("org.springframework.util.LinkedCaseInsensitiveMap");
      TypeUtils.isKotlin(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      classLoader0.setPackageAssertionStatus("K$W$-,Fia[%16-,8k", false);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      ParserConfig parserConfig0 = new ParserConfig(true);
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException();
      Type type0 = TypeUtils.getCollectionItemType(class0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(type0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("fastjson.parser.autoTypeAccept", (ClassLoader) aSMDeserializerFactory0.classLoader, false);
      Type type1 = TypeUtils.unwrapOptional(class0);
      Type[] typeArray0 = new Type[8];
      typeArray0[2] = (Type) null;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) null;
      typeArray0[3] = (Type) null;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = type1;
      typeArray0[6] = (Type) class0;
      Vector<FieldInfo> vector0 = new Vector<FieldInfo>();
      TypeUtils.castToBytes("org.springframework.util.LinkedCaseInsensitiveMap");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException((String) null);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingToString;
      SerializerFeature serializerFeature1 = SerializerFeature.IgnoreErrorGetter;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature1;
      serializerFeatureArray0[3] = serializerFeature1;
      serializerFeatureArray0[4] = serializerFeature1;
      serializerFeatureArray0[5] = serializerFeature1;
      SerializeWriter serializeWriter0 = new SerializeWriter(serializerFeatureArray0);
      JSON.writeJSONString((Writer) serializeWriter0, (Object) serializeWriter0, serializerFeatureArray0);
      ParserConfig parserConfig0 = new ParserConfig(false);
      Class<MockCalendar>[] classArray0 = (Class<MockCalendar>[]) Array.newInstance(Class.class, 1);
      Class<MockCalendar> class0 = MockCalendar.class;
      classArray0[0] = class0;
      parserConfig0.initJavaBeanDeserializers(classArray0);
      MapDeserializer mapDeserializer0 = new MapDeserializer();
      TypeUtils.isHibernateInitialized(serializerFeature1);
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      TypeUtils.getParserFeatures(class1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("Ljava.lang.AutoCloseable", (ClassLoader) aSMClassLoader0, false);
      TypeUtils.castToFloat((Object) null);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      concurrentHashMap0.keySet();
      Class<Object> class0 = Object.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) concurrentHashMap0, false);
      ParserConfig parserConfig1 = new ParserConfig();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TypeUtils.isNumber(":[{]&E");
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.castToString((Object) null);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      Class<LinkageError> class2 = LinkageError.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class2, (Map<String, String>) hashtable0, true);
      Class<MockThaiBuddhistDate> class3 = MockThaiBuddhistDate.class;
      TypeUtils.getKoltinConstructorParameters(class3);
      TypeUtils.castToString(":[{]&E");
      SqlDateDeserializer sqlDateDeserializer0 = SqlDateDeserializer.instance_timestamp;
      BreakIterator.getCharacterInstance();
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(list0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Insets insets0 = new Insets(54, 54, (-2342), 20);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(insets0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : java.awt.Insets[top=54,left=54,bottom=-2342,right=20]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      classLoader0.setPackageAssertionStatus("fastjson.parser.autoTypeSupport", false);
      TypeUtils.loadClass("fastjson.parser.autoTypeSupport", classLoader0, true);
      TypeUtils.toLocale("S_b");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Byte.toUnsignedInt((byte)49);
      Byte.compare((byte)49, (byte)49);
      TypeUtils.clearClassMapping();
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      TypeUtils.decapitalize("`");
      Class<PropertyProcessableDeserializer> class0 = PropertyProcessableDeserializer.class;
      TypeUtils.getSerializeFeatures(class0);
      AtomicInteger atomicInteger0 = new AtomicInteger((byte)49);
      TypeUtils.castToBoolean(atomicInteger0);
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(properties0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<IllegalAccessException> class0 = IllegalAccessException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      Type type0 = TypeUtils.unwrapOptional(class1);
      TypeUtils.getCollectionItemClass(type0);
      TypeUtils.unwrapOptional(class1);
      Class<Integer> class2 = Integer.TYPE;
      Double double0 = new Double(Float.POSITIVE_INFINITY);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : int
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      Type type0 = TypeUtils.unwrapOptional(class0);
      TypeUtils.getCollectionItemType(type0);
      TypeUtils.getClassFromMapping("");
      ParserConfig parserConfig0 = new ParserConfig(false);
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException();
      TypeUtils.clearClassMapping();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.unwrapOptional(type0);
      Class<Integer> class1 = Integer.TYPE;
      Double double0 = new Double(2661.9044945934);
      TypeUtils.castToByte(double0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<BreakIterator> class0 = BreakIterator.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      SqlDateDeserializer sqlDateDeserializer0 = new SqlDateDeserializer(false);
      OptionalCodec optionalCodec0 = OptionalCodec.instance;
      parserConfig0.putDeserializer(class0, optionalCodec0);
      parserConfig0.setAutoTypeSupport(false);
      Class<BreakIterator> class1 = BreakIterator.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) "cause", class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.BreakIterator
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("cause");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLNonTransientException0.forEach(consumer0);
      sQLNonTransientException0.getSuppressed();
      Class<Short> class0 = Short.TYPE;
      TypeUtils.cast((Object) null, (Type) class0, (ParserConfig) null);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.put("cause", ")xXub&");
      treeMap0.higherKey("cause");
      treeMap0.put("k~n@K#j_W\":(`%L", "k~n@K#j_W\":(`%L");
      Class<SQLTransientException> class1 = SQLTransientException.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) hashMap0);
      TypeUtils.castToChar((Object) null);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      Class<Time> class0 = Time.class;
      Class<PropertyNamingStrategy> class1 = PropertyNamingStrategy.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class1);
      javaBeanSerializer0.getType();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(imageCapabilities0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : java.awt.ImageCapabilities@a8a71ab
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte)19;
      byteArray0[5] = (byte) (-71);
      byteArray0[6] = (byte) (-72);
      byteArray0[7] = (byte)34;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TypeUtils.getCollectionItemClass(type0);
      Class<ClassLoader> class0 = ClassLoader.class;
      Class<JSONPDeserializer> class1 = JSONPDeserializer.class;
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("gettoString", treeMap0);
      treeMap0.put("IfmKp", (Field) null);
      FieldInfo fieldInfo0 = new FieldInfo("IfmKp", class1, class0, class1, (Field) null, 77, (-1562), (-1562));
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getMethod();
      TypeUtils.isTransient((Method) null);
      Character character0 = Character.valueOf('C');
      TypeUtils.castToChar(character0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException();
      Class<Short> class0 = Short.class;
      TypeUtils.decapitalize("@h;`9Z9^(vID%");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.castToDouble((Object) null);
      LinkageError linkageError0 = new LinkageError();
      TypeUtils.getSerializeFeatures(class0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      TypeUtils.isKotlin(class0);
      TypeUtils.fnv1a_64_lower("EMPTY_THROWABLE_ARRAY");
      TypeUtils.toLocale("VW^2]TM%O>96W+~");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException();
      illegalMonitorStateException0.getSuppressed();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("com.alibaba.fastjson.parser.JSONLexerBase", "com.alibaba.fastjson.parser.JSONLexerBase", 51, illegalMonitorStateException0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, (PropertyNamingStrategy) null, true, false);
      ObjectDeserializer objectDeserializer0 = aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(objectDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.parser.deserializer.FastjsonASMDeserializer_1_SQLSyntaxErrorException@1d3
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<String> class0 = String.class;
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TypeUtils.fnv1a_64("");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Double> class0 = Double.class;
      TypeUtils.isKotlin(class0);
      TypeUtils.getGenericParamType(class0);
      TypeUtils.castToTimestamp((Object) null);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<?> class0 = TypeUtils.getCollectionItemClass((Type) null);
      TypeUtils.castToDate((Object) null);
      TypeUtils.unwrapOptional(class0);
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException("[]");
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(illegalThreadStateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : java.lang.IllegalThreadStateException: []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TypeUtils.clearClassMapping();
      Class<Long> class0 = Long.TYPE;
      TypeUtils.isProxy(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : long
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      concurrentHashMap0.put("+~5}tb_M", "");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("@h;`9Z9^(vID%", "o7/VTpO|9^qAJMK:", (-232), (Throwable) null);
      TypeNotPresentException typeNotPresentException0 = new TypeNotPresentException("za", (Throwable) null);
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException();
      illegalMonitorStateException0.initCause((Throwable) null);
      illegalMonitorStateException0.fillInStackTrace();
      TypeUtils.isHibernateInitialized((Object) null);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      TypeUtils.isNumber("");
      TypeUtils.fnv1a_64(")");
      Class<Double> class0 = Double.TYPE;
      Long long0 = new Long(47L);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      Class<Double> class2 = Double.TYPE;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<Boolean> class3 = Boolean.TYPE;
      Class<?> class4 = TypeUtils.getCollectionItemClass(class1);
      TypeUtils.getClass((Type) class4);
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, parameterizedTypeImpl0, class1);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("[{]E");
      // Undeclared exception!
      TypeUtils.cast((Object) sQLFeatureNotSupportedException0, (ParameterizedType) parameterizedTypeImpl1, parserConfig0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Class<Byte> class0 = Byte.TYPE;
      TypeUtils.getClass((Type) class0);
      Class<Double> class1 = Double.TYPE;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<Boolean> class2 = Boolean.TYPE;
      Type[] typeArray0 = new Type[5];
      typeArray0[0] = (Type) parameterizedTypeImpl0;
      typeArray0[1] = (Type) class0;
      Class<?> class3 = TypeUtils.getClass((Type) class1);
      typeArray0[2] = (Type) class3;
      typeArray0[3] = (Type) parameterizedTypeImpl0;
      typeArray0[4] = (Type) class2;
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, typeArray0[2], typeArray0[1]);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      TypeUtils.isGenericParamType(typeArray0[0]);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException();
      String string0 = "WriteMapNullValue";
      Class<Short> class0 = Short.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "WriteMapNullValue", (Type) class0, (ParserConfig) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"WriteMapNullValue\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException();
      String string0 = "@h;`9Z9^(vID%";
      Class<Short> class0 = Short.class;
      TypeUtils.decapitalize("@h;`9Z9^(vID%");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      sQLNonTransientException0.getSuppressed();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLNonTransientException0, (Type) class0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : java.sql.SQLNonTransientException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<Boolean> class0 = Boolean.TYPE;
      Type[] typeArray0 = new Type[8];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) parameterizedTypeImpl0;
      typeArray0[2] = (Type) parameterizedTypeImpl0;
      typeArray0[3] = (Type) parameterizedTypeImpl0;
      typeArray0[4] = (Type) parameterizedTypeImpl0;
      typeArray0[5] = (Type) parameterizedTypeImpl0;
      typeArray0[6] = (Type) class0;
      typeArray0[7] = (Type) parameterizedTypeImpl0;
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, typeArray0[1], typeArray0[2]);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "fastjson.parser.deny", (ParameterizedType) parameterizedTypeImpl1, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@702480d3
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Jdk8DateCodec jdk8DateCodec0 = Jdk8DateCodec.instance;
      Class<Byte> class0 = Byte.TYPE;
      Class<Double> class1 = Double.TYPE;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<Boolean> class2 = Boolean.TYPE;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      TypeUtils.getParserFeatures(class0);
      TypeUtils.decapitalize((String) null);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TypeUtils.isNumber("(Z)Ljava/lang/Boolean;");
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("(Z)Ljava/lang/Boolean;", hashMap0);
      ParserConfig.getFieldFromCache("(Z)Ljava/lang/Boolean;", hashMap0);
      Class<PropertyProcessableDeserializer> class0 = PropertyProcessableDeserializer.class;
      TypeUtils.getGenericParamType(class0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException();
      Byte byte0 = new Byte((byte) (-27));
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      classLoader1.setPackageAssertionStatus("", false);
      Class<?> class0 = TypeUtils.loadClass("com.alibaba.fastjson.util.TypeUtils", classLoader1);
      ParserConfig parserConfig0 = new ParserConfig(false);
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("d.Ou)bujzN~U6Vrt_");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"d.Ou)bujzN~U6Vrt_\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Byte byte0 = new Byte((byte)49);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("@h;`9Z9^(vID%", "@h;`9Z9^(vID%", 51, (Throwable) null);
      TypeNotPresentException typeNotPresentException0 = new TypeNotPresentException("n u&q,Tg", (Throwable) null);
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException();
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("n u&q,Tg", illegalMonitorStateException0);
      illegalMonitorStateException0.fillInStackTrace();
      TypeUtils.isHibernateInitialized(illegalMonitorStateException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("@h;`9Z9^(vID%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : @h;`9Z9^(vID%
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";Ljava/lang/String;)Z");
      int int0 = Character.MIN_CODE_POINT;
      Byte.compare((byte)49, (byte)49);
      TypeUtils.clearClassMapping();
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      TypeUtils.fnv1a_64_lower("G-7Dz|T.5`k");
      TypeUtils.getClassFromMapping("");
      Class<StackTraceElementDeserializer> class0 = StackTraceElementDeserializer.class;
      Class<JobAttributes> class1 = JobAttributes.class;
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("G-7Dz|T.5`k", concurrentHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("G-7Dz|T.5`k", class0, class1, class0, (Field) null, 0, 19, 45);
      BeanContext beanContext0 = new BeanContext((Class<?>) null, fieldInfo0);
      beanContext0.getMethod();
      TypeUtils.isAnnotationPresentManyToMany((Method) null);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Class<Byte> class0 = Byte.TYPE;
      TypeUtils.getClass((Type) class0);
      Class<Double> class1 = Double.TYPE;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<Boolean> class2 = Boolean.TYPE;
      Class<Character> class3 = Character.TYPE;
      NumberFormatException numberFormatException0 = new NumberFormatException();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) numberFormatException0, (Type) class2, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.lang.NumberFormatException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TypeUtils.fnv1a_64("cause");
      TypeUtils.loadClass("cause", (ClassLoader) null, true);
      TypeUtils.toLocale("cause");
      Constructor<ChoiceFormat>[] constructorArray0 = (Constructor<ChoiceFormat>[]) Array.newInstance(Constructor.class, 0);
      TypeUtils.getKoltinConstructor(constructorArray0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte byte0 = (byte) (-12);
      Byte byte1 = new Byte((byte) (-12));
      Byte.compare((byte)7, (byte)7);
      Class<TimeUnit> class0 = TimeUnit.class;
      Hashtable<Time, NoSuchMethodException> hashtable0 = new Hashtable<Time, NoSuchMethodException>();
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) hashtable0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. java.util.concurrent.TimeUnit
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Jdk8DateCodec jdk8DateCodec0 = Jdk8DateCodec.instance;
      Type[] typeArray0 = new Type[4];
      Class<Byte> class0 = Byte.TYPE;
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      typeArray0[0] = (Type) class1;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "H'Apk+%dR");
      ParserConfig parserConfig0 = null;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      sQLNonTransientException0.getSuppressed();
      Class<Character> class2 = Character.TYPE;
      DecimalFormat decimalFormat0 = new DecimalFormat();
      Currency currency0 = decimalFormat0.getCurrency();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) currency0, (Type) class0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : XXX
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = "com.google.common.collect.TreeMultimap";
      Class<Time> class0 = Time.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      javaBeanSerializer0.getType();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      sQLNonTransientException0.getSuppressed();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte) (-110);
      byteArray0[6] = (byte)93;
      byteArray0[7] = (byte) (-36);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("K", sQLNonTransientException0);
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLNonTransientConnectionException0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.sql.SQLNonTransientConnectionException: K
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      Type type0 = TypeUtils.unwrapOptional(class0);
      Class<?> class1 = TypeUtils.getCollectionItemClass(type0);
      Type[] typeArray0 = new Type[6];
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = type0;
      typeArray0[5] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[2], typeArray0[3]);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMDeserializerFactory0.classLoader);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory1);
      IllegalAccessError illegalAccessError0 = new IllegalAccessError("fastjson.parser.autoTypeAccept");
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) illegalAccessError0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match. java.lang.IllegalAccessError -> com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass((String) null, classLoader0, false);
      java.util.IdentityHashMap<RenderingHints.Key, MapDeserializer> identityHashMap0 = new java.util.IdentityHashMap<RenderingHints.Key, MapDeserializer>();
      RenderingHints.Key renderingHints_Key0 = mock(RenderingHints.Key.class, new ViolatedAssumptionAnswer());
      MapDeserializer mapDeserializer0 = new MapDeserializer();
      identityHashMap0.put(renderingHints_Key0, mapDeserializer0);
      RenderingHints renderingHints0 = new RenderingHints(identityHashMap0);
      BiFunction<Object, Object, SQLException> biFunction0 = (BiFunction<Object, Object, SQLException>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      renderingHints0.compute((Object) null, biFunction0);
      TypeUtils.isHibernateInitialized(renderingHints0);
      TypeUtils.castToByte((Object) null);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Type[] typeArray0 = new Type[0];
      Class<Character> class0 = Character.TYPE;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      ParserConfig parserConfig0 = ParserConfig.global;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        TypeUtils.loadClass("[SP#[iN3D^`@=|C", classLoader1, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Insets insets0 = new Insets((-2649), 125, (-2649), 61);
      TypeUtils.castToBigDecimal((Object) null);
      TimeDeserializer timeDeserializer0 = new TimeDeserializer();
      char[] charArray0 = new char[2];
      charArray0[0] = 'g';
      charArray0[1] = '7';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-2341));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Byte byte0 = new Byte((byte)45);
      int int0 = Opcodes.V1_5;
      Class<TimeUnit> class0 = TimeUnit.class;
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      Type type0 = TypeUtils.getGenericParamType(class0);
      Class<Object> class1 = Object.class;
      TypeUtils.cast((Object) type0, class1, (ParserConfig) null);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.computeGettersWithFieldBase(class0, hashMap0, false, propertyNamingStrategy0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<ImageCapabilities> class0 = ImageCapabilities.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".0");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "methodName");
      Class<SQLException> class1 = SQLException.class;
      Class<Character> class2 = Character.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "methodName", (Type) class1, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TypeUtils.isNumber(":[{]&E");
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      BiConsumer<Object, Field> biConsumer0 = (BiConsumer<Object, Field>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException((-278));
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("H>}jG`E|K(", "H>}jG`E|K(", stringIndexOutOfBoundsException0);
      sQLIntegrityConstraintViolationException0.getSuppressed();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) stringIndexOutOfBoundsException0, type0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : Mock for GenericArrayType, hashCode: 1589964859
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Class<Byte> class0 = Byte.TYPE;
          Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
          Class<MockThaiBuddhistDate> class1 = MockThaiBuddhistDate.class;
          TypeUtils.getSerializeFeatures(class1);
          JSONObject jSONObject0 = new JSONObject(true);
          jSONObject0.getJSONObject("fileName");
          CharArrayWriter charArrayWriter0 = new CharArrayWriter();
          charArrayWriter0.append('d');
          MockNullPointerException mockNullPointerException0 = new MockNullPointerException((String) null);
          SerializerFeature serializerFeature0 = SerializerFeature.WriteNonStringValueAsString;
          SerializerFeature serializerFeature1 = SerializerFeature.WriteMapNullValue;
          AtomicLong atomicLong0 = new AtomicLong(989);
          SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
          serializerFeatureArray0[0] = serializerFeature0;
          serializerFeatureArray0[1] = serializerFeature0;
          serializerFeatureArray0[2] = serializerFeature1;
          // Undeclared exception!
          try { 
            JSON.writeJSONString((Writer) charArrayWriter0, (Object) atomicLong0, serializerFeatureArray0);
            fail("Expecting exception: RuntimeException");
          
          } catch(RuntimeException e) {
             //
             // create asm serializer error, class byte
             //
             verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Byte byte0 = new Byte((byte)49);
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("@h;`9Z9^(vID%");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(illegalMonitorStateException0);
      sQLIntegrityConstraintViolationException0.printStackTrace();
      sQLIntegrityConstraintViolationException0.printStackTrace();
      TypeUtils.loadClass("K72\"zf}qg_,2&M");
      TypeUtils.castToInt(byte0);
      StackTraceElement stackTraceElement0 = new StackTraceElement("K72\"zf}qg_,2&M", "K72\"zf}qg_,2&M", "minusSign", 1878);
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(stackTraceElement0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : K72\"zf}qg_,2&M.K72\"zf}qg_,2&M(minusSign:1878)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException();
      String string0 = "@h;`9Z9^(vID%";
      Class<Short> class0 = Short.TYPE;
      TypeUtils.decapitalize("@h;`9Z9^(vID%");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      sQLNonTransientException0.getSuppressed();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "@h;`9Z9^(vID%", (Type) class0, (ParserConfig) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"@h;`9Z9^(vID%\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.forEachValue(7442624256860549351L, consumer0);
      concurrentHashMap0.put("D1Im,Kt&'v(Ys`W", "D1Im,Kt&'v(Ys`W");
      concurrentHashMap0.keySet();
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) concurrentHashMap0, true);
      ParserConfig parserConfig0 = new ParserConfig();
      TypeUtils.decapitalize("fastjson.parser.deny");
      Class<ThrowableDeserializer> class1 = ThrowableDeserializer.class;
      AtomicInteger atomicInteger0 = new AtomicInteger((-1795836997));
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      Type[] typeArray0 = new Type[6];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class1;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class1;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], typeArray0[3]);
      TypeUtils.castToShort((Object) null);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = "cause";
      ParserConfig parserConfig0 = ParserConfig.global;
      SqlDateDeserializer sqlDateDeserializer0 = new SqlDateDeserializer(false);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationException0.printStackTrace();
      sQLIntegrityConstraintViolationException0.printStackTrace();
      TypeUtils.loadClass("|}z3F1'#5+}Hv~?IO$:");
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(properties0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }
}
