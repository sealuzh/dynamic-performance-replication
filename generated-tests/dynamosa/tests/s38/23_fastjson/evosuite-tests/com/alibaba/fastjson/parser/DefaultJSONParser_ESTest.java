/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 04:31:04 GMT 2019
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.ExtraProcessor;
import com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider;
import com.alibaba.fastjson.parser.deserializer.FieldTypeResolver;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.PageAttributes;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.geom.Rectangle2D;
import java.io.StringReader;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.text.BreakIterator;
import java.text.ChoiceFormat;
import java.text.Collator;
import java.text.DateFormat;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.MessageFormat;
import java.text.RuleBasedCollator;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.ThaiBuddhistDate;
import java.time.format.TextStyle;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.Stack;
import java.util.TreeMap;
import java.util.function.ToDoubleFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import sun.awt.SunHints;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultJSONParser_ESTest extends DefaultJSONParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$.$ref", parserConfig0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      // Undeclared exception!
      try { 
        defaultJSONParser1.close();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : .
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Insets insets0 = new Insets(58, 11, 58, 11);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(")rQk})k}6&$-1SI");
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(insets0, jSONReaderScanner0, parserConfig0);
      defaultJSONParser0.accept(11, 4);
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"$ref\":\"@\"}", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(99);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual {
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("()V");
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) "()V", (Object) "()V");
      Rectangle rectangle0 = new Rectangle();
      ParseContext parseContext1 = defaultJSONParser0.setContext((ParseContext) null, (Object) "()V", (Object) rectangle0);
      assertFalse(parseContext1.equals((Object)parseContext0));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("TODO : ", parserConfig0);
      defaultJSONParser0.setResolveStatus(3655);
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      Comparator<DateFormatSymbols> comparator0 = Comparator.comparingDouble((ToDoubleFunction<? super DateFormatSymbols>) toDoubleFunction0);
      TreeMap<DateFormatSymbols, Dimension> treeMap0 = new TreeMap<DateFormatSymbols, Dimension>(comparator0);
      defaultJSONParser0.checkMapResolve(treeMap0, imageCapabilities0);
      assertEquals(3655, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("&kIUr!|rq#", parserConfig0);
      defaultJSONParser0.setResolveStatus((-381));
      HashSet<JavaBeanDeserializer> hashSet0 = new HashSet<JavaBeanDeserializer>();
      defaultJSONParser0.checkListResolve(hashSet0);
      assertEquals((-381), defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("kBxf~)61ND?-[", parserConfig0);
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) dateFormatSymbols0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Class<DecimalFormatSymbols> class1 = DecimalFormatSymbols.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class1);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}+/Bh5V:egn");
      defaultJSONParser0.parseObject((Type) class0, (Object) javaBeanSerializer0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : int
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("}+/Bh5V:egn", 1);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      Hashtable<BigDecimal, JavaBeanDeserializer> hashtable0 = new Hashtable<BigDecimal, JavaBeanDeserializer>();
      Hashtable hashtable1 = (Hashtable)defaultJSONParser0.parseObject((Map) hashtable0);
      assertTrue(hashtable1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"$ref\":\"@\"}", parserConfig0);
      JSONObject jSONObject0 = defaultJSONParser0.parseObject();
      assertEquals(1, jSONObject0.size());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      Object object0 = defaultJSONParser0.parseKey();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      Object object0 = defaultJSONParser0.parse();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"$ref\":\"@\"}", parserConfig0);
      defaultJSONParser0.parse();
      defaultJSONParser0.popContext();
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("&kIUr!|rq#", parserConfig0, 0);
      Feature feature0 = Feature.DisableSpecialKeyDetect;
      boolean boolean0 = defaultJSONParser0.isEnabled(feature0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("TODO : ", parserConfig0);
      defaultJSONParser0.setResolveStatus(3655);
      int int0 = defaultJSONParser0.getResolveStatus();
      assertEquals(3655, defaultJSONParser0.resolveStatus);
      assertEquals(3655, int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}+/Bh5V:egn");
      defaultJSONParser0.parseObject();
      JSONScanner jSONScanner0 = (JSONScanner)defaultJSONParser0.getLexer();
      assertNull(jSONScanner0.stringDefaultValue());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$.$ref", parserConfig0, (-1129));
      JSONScanner jSONScanner0 = (JSONScanner)defaultJSONParser0.getLexer();
      assertEquals("", jSONScanner0.stringDefaultValue());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      Type[] typeArray0 = new Type[8];
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("rQB_=}3v6s", parserConfig0);
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) dateFormatSymbols0, (Object) typeArray0[1]);
      ParseContext parseContext1 = defaultJSONParser0.getContext();
      assertSame(parseContext1, parseContext0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("%Q5`N");
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      parserConfig0.setAsmEnable(false);
      ParserConfig parserConfig1 = defaultJSONParser0.getConfig();
      assertFalse(ParserConfig.AUTO_SUPPORT);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("&kIUr!|rq#", parserConfig0, 0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.throwException(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$.$ref");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.throwException((-894));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", (-4130));
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      defaultJSONParser0.setResolveStatus(0);
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}+/Bh5V:egn");
      defaultJSONParser0.setDateFormat((String) null);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONScanner jSONScanner0 = new JSONScanner("");
      Locale locale0 = Locale.ENGLISH;
      MessageFormat messageFormat0 = new MessageFormat("fastjson.parser.autoTypeSupport", locale0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(messageFormat0, jSONScanner0, parserConfig0);
      defaultJSONParser0.setDateFormat("");
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      char[] charArray0 = new char[9];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 181);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      defaultJSONParser0.setDateFomrat((DateFormat) null);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Type[] typeArray0 = new Type[8];
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      StringReader stringReader0 = new StringReader("}+/Bh5V:egn");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 3045);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) typeArray0[2], (Object) classLoader0);
      assertNull(parseContext0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Type[] typeArray0 = new Type[8];
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      JSONScanner jSONScanner0 = new JSONScanner("TODO");
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(typeArray0[4], jSONScanner0, parserConfig0);
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) aSMDeserializerFactory0.classLoader, (Object) parserConfig0.fieldBased);
      assertNotNull(parseContext0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("..");
      ParseContext parseContext0 = defaultJSONParser0.setContext((ParseContext) null, (Object) null, (Object) jSONReaderScanner0);
      assertNotNull(parseContext0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("}+/Bh5V:egn", 1);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      Object object0 = new Object();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance(locale0);
      ParseContext parseContext0 = defaultJSONParser0.setContext((ParseContext) null, object0, (Object) decimalFormatSymbols0);
      assertNotNull(parseContext0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("()V");
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) "()V", (Object) "()V");
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, "0T]XkO~p+9z;$g*{");
      defaultJSONParser0.setContext(parseContext0, (Object) "()V", (Object) defaultJSONParser_ResolveTask0);
      Rectangle rectangle0 = new Rectangle();
      ParseContext parseContext1 = defaultJSONParser0.setContext((ParseContext) null, (Object) "()V", (Object) rectangle0);
      assertFalse(parseContext1.equals((Object)parseContext0));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",}e`YVXl(4.");
      ParserConfig parserConfig0 = new ParserConfig(false);
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      MapDeserializer mapDeserializer0 = new MapDeserializer();
      ParseContext parseContext0 = new ParseContext((ParseContext) null, throwableDeserializer0, mapDeserializer0);
      defaultJSONParser0.setContext(parseContext0);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("&kIUr!|rq#", parserConfig0, 0);
      defaultJSONParser0.setConfig((ParserConfig) null);
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0, 0);
      Object object0 = defaultJSONParser0.resolveReference((String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      char[] charArray0 = new char[7];
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 0, parserConfig0, 0);
      Object object0 = defaultJSONParser0.resolveReference("");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("}+/Bh5V:egn", 1);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      Boolean boolean0 = Boolean.valueOf("deserialize inet adress error");
      Object object0 = defaultJSONParser0.parseObject((Map) null, (Object) boolean0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}+/Bh5V:egn");
      Object object0 = defaultJSONParser0.parseObject((Map) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", (-4130));
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      BreakIterator breakIterator0 = BreakIterator.getWordInstance();
      LinkedHashMap<Integer, BreakIterator> linkedHashMap0 = new LinkedHashMap<Integer, BreakIterator>();
      linkedHashMap0.putIfAbsent((Integer) (-4130), breakIterator0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) linkedHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      Class<GridBagConstraints> class0 = GridBagConstraints.class;
      RenderingHints renderingHints0 = defaultJSONParser0.parseObject((Type) class0, (Object) null);
      assertNull(renderingHints0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("TODO : ", parserConfig0);
      Long long0 = new Long((-7766605818834748097L));
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) null, (Object) long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 4, json : TODO : 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Type[] typeArray0 = new Type[8];
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[5], typeArray0[1]);
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      JobAttributes jobAttributes0 = defaultJSONParser0.parseObject((Type) parameterizedTypeImpl0, (Object) aSMDeserializerFactory0.classLoader);
      assertNull(jobAttributes0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      PageAttributes pageAttributes0 = defaultJSONParser0.parseObject((Type) null);
      assertNull(pageAttributes0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      char[] charArray0 = new char[12];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 'F');
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but EOF, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{{Xy3&%vZ$SH", parserConfig0);
      Class<Byte> class0 = Byte.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : {pos 1, json : {{Xy3&%vZ$SH
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      char[] charArray0 = new char[3];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 54, 54);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      Double double0 = new Double(0.0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseExtra(double0, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("<opX_X", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseExtra((Object) null, "fastjson.parser.autoTypeSupport");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - o, info : pos 1, json : <opX_X
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseExtra(gridBagConstraints0, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", (-4130));
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      Type[] typeArray0 = new Type[5];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      Type[] typeArray0 = new Type[0];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Insets insets0 = new Insets(58, 11, 58, 11);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(")rQk})k}6&$-1SI");
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(insets0, jSONReaderScanner0, parserConfig0);
      Stack<MapDeserializer> stack0 = new Stack<MapDeserializer>();
      BreakIterator breakIterator0 = BreakIterator.getSentenceInstance();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) stack0, (Object) breakIterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual ), pos 0, fieldName [checksum=0xcba403eb]
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual EOF, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual EOF, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 51);
      Class<Byte> class0 = Byte.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      LinkedHashSet<Float> linkedHashSet0 = new LinkedHashSet<Float>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) class0, (Collection) linkedHashSet0, (Object) aSMDeserializerFactory0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but EOF, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",}e`YVXl(4.");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) class0, (Collection) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but ,, pos 1, json : ,}e`YVXl(4.
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      LinkedHashSet<JavaBeanDeserializer> linkedHashSet0 = new LinkedHashSet<JavaBeanDeserializer>(1);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) null, (Collection) linkedHashSet0, (Object) parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but EOF, pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONScanner jSONScanner0 = new JSONScanner("..");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      LinkedHashSet<JavaBeanDeserializer> linkedHashSet0 = new LinkedHashSet<JavaBeanDeserializer>(3744);
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fastjson.parser.deny", 1);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) parameterizedTypeImpl0, (Collection) linkedHashSet0, (Object) jSONReaderScanner0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but ., pos 1, json : ..
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}+/Bh5V:egn");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) class0, (Collection) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but }, pos 1, json : }+/Bh5V:egn
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null", parserConfig0);
      ArrayDeque<ImageCapabilities> arrayDeque0 = new ArrayDeque<ImageCapabilities>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) null, (Collection) arrayDeque0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but null, pos 4, json : null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("rQB_=}3v6s", parserConfig0);
      ArrayList<Collator> arrayList0 = new ArrayList<Collator>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Class<?>) class0, (Collection) arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : rQB_=}3v6s
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}/Bh5V:n");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Class<Double>) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but }, pos 1, json : }/Bh5V:n
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("&kIUr!|rq#", parserConfig0, 0);
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : &kIUr!|rq#
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual EOF, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(".^#fXh4f/R");
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      TextStyle textStyle0 = TextStyle.NARROW;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) textStyle0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual ., pos 0, fieldName NARROW
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("5c'", parserConfig0, 123);
      defaultJSONParser0.handleResovleTask((Object) null);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0, 1328);
      Insets insets0 = new Insets(6, 9, 1328, 1);
      defaultJSONParser0.handleResovleTask(insets0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("}+/Bh5V:egn", 1);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      defaultJSONParser0.getObject((String) null);
      assertEquals(13, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      Object object0 = defaultJSONParser0.getObject("");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("I", parserConfig0, 0);
      Feature feature0 = Feature.IgnoreNotMatch;
      defaultJSONParser0.config(feature0, true);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      Hashtable<RuleBasedCollator, Field> hashtable0 = new Hashtable<RuleBasedCollator, Field>(0);
      defaultJSONParser0.checkMapResolve(hashtable0, (Object) null);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("can not create ASMParser", 530);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now((ZoneId) zoneOffset0);
      defaultJSONParser0.checkMapResolve((Map) null, thaiBuddhistDate0);
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"$ref\":\"@\"}", parserConfig0);
      PageAttributes.OrientationRequestedType pageAttributes_OrientationRequestedType0 = PageAttributes.OrientationRequestedType.PORTRAIT;
      PageAttributes.OriginType pageAttributes_OriginType0 = PageAttributes.OriginType.PHYSICAL;
      JSONObject jSONObject0 = (JSONObject)defaultJSONParser0.parse((Object) pageAttributes_OriginType0);
      defaultJSONParser0.checkMapResolve(jSONObject0, pageAttributes_OrientationRequestedType0);
      assertEquals(1, jSONObject0.size());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("}+/Bh5V:egn");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      defaultJSONParser0.checkListResolve((Collection) null);
      assertEquals(13, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      defaultJSONParser0.addResolveTask((DefaultJSONParser.ResolveTask) null);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TODO");
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("TODO", jSONReaderScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.acceptType((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0, 123);
      // Undeclared exception!
      try { 
        defaultJSONParser0.acceptType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(21, (-1903));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Set, actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("&kIUr!|rq#", parserConfig0, 0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept((-704), 2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("V=]C", parserConfig0, 68);
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept((-1709));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(",I");
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(parserConfig0, jSONReaderScanner0, parserConfig0);
      TreeMap<Locale, BigDecimal> treeMap0 = new TreeMap<Locale, BigDecimal>();
      Insets insets0 = new Insets(0, 0, 0, 2);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) treeMap0, (Object) insets0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("unsupported", parserConfig0);
      JobAttributes jobAttributes0 = new JobAttributes();
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      String[] stringArray0 = new String[3];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      Class<?> class1 = simplePropertyPreFilter0.getClazz();
      // Undeclared exception!
      defaultJSONParser0.parseObject((Type) class1, (Object) jobAttributes0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("&kIUr!|rq#", parserConfig0, 0);
      // Undeclared exception!
      defaultJSONParser0.parseObject((Object) defaultJSONParser0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}+/Bh5V:egn");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("!2", parserConfig0, 123);
      Class<BigDecimal> class0 = BigDecimal.class;
      // Undeclared exception!
      defaultJSONParser0.parseObject(class0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Type[] typeArray0 = new Type[8];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[5], typeArray0[1]);
      typeArray0[6] = (Type) parameterizedTypeImpl0;
      JSONScanner jSONScanner0 = new JSONScanner("}+/Bh5V:egn");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      // Undeclared exception!
      defaultJSONParser0.parseArrayWithType(parameterizedTypeImpl0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("syntax error : ");
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("-k4g:~8D)V=8", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) "{\"$ref\":\"@\"}");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("vK*oa1RRF");
      defaultJSONParser0.getResolveTaskList();
      // Undeclared exception!
      try { 
        defaultJSONParser0.getLastResolveTask();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.getInput();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONScanner jSONScanner0 = new JSONScanner("1i6-2Uad4EsO15");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.acceptType("1i6-2Uad4EsO15");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - i, info : pos 1, json : 1i6-2Uad4EsO15
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      char[] charArray0 = new char[3];
      charArray0[0] = 'n';
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser(charArray0, 2, parserConfig0, 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser((char[]) null, 0, parserConfig0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser("fastjson.parser.autoTypeAccept", parserConfig0, 111);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser("+J?wW4", (ParserConfig) null, 20);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser("fastjson.parser.autoTypeSupport", parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser((String) null, (ParserConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser("fastjson.parser.autoTypeAccept");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      DefaultJSONParser defaultJSONParser1 = null;
      try {
        defaultJSONParser1 = new DefaultJSONParser("", defaultJSONParser0.lexer, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("^RZb~<,,");
      Object object0 = new Object();
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser(object0, jSONReaderScanner0, (ParserConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONScanner jSONScanner0 = new JSONScanner("fastjson.parser.deny");
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser((JSONLexer) null, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("fastjson.parser.deny");
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("bX");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) "bX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : bX
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(".]lZKT1*`|v+AHpm");
      ParserConfig parserConfig0 = ParserConfig.global;
      Float float0 = new Float((-3158.7901553008));
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(float0, jSONReaderScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<Long> class0 = Long.TYPE;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";qyGvsmlb|)=^3\u0004grj", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ;qyGvsmlb|)=^3\u0004grj
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      char[] charArray0 = new char[2];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      defaultJSONParser0.setContext((ParseContext) null, (Object) jSONScanner0, (Object) null);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", (-313));
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(class0, jSONReaderScanner0, parserConfig0);
      defaultJSONParser0.setContext((ParseContext) null);
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",}e`YVXl(4.");
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",}e`YVXl(4.", jSONScanner0, parserConfig0);
      TreeMap<Locale, BigDecimal> treeMap0 = new TreeMap<Locale, BigDecimal>();
      char[] charArray0 = new char[6];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      Locale locale0 = jSONReaderScanner0.locale;
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols(locale0);
      defaultJSONParser0.parseObject((Map) treeMap0, (Object) decimalFormatSymbols0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"$ref\":\"@\"}", parserConfig0);
      JSONObject jSONObject0 = new JSONObject(1);
      defaultJSONParser0.parseObject((Map) jSONObject0, (Object) jSONObject0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{{Xy3&%vZ$SH", parserConfig0);
      JSONObject jSONObject0 = new JSONObject(0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) jSONObject0, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 1, actual &
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"$ref\":\"@\"}", parserConfig0);
      JSONObject jSONObject0 = new JSONObject(1);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(class0, defaultJSONParser0.lexer, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) jSONObject0, (Object) jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual string, pos 7, json : {\"$ref\":\"@\"}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null", parserConfig0);
      TreeMap<MockGregorianCalendar, Dimension> treeMap0 = new TreeMap<MockGregorianCalendar, Dimension>();
      LinkedHashMap<MockGregorianCalendar, Dimension> linkedHashMap0 = new LinkedHashMap<MockGregorianCalendar, Dimension>(treeMap0);
      defaultJSONParser0.parseObject((Map) linkedHashMap0, (Object) linkedHashMap0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(">7Qxb^.", parserConfig0);
      defaultJSONParser0.getContext();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("q2H/");
      Class<BigInteger> class0 = BigInteger.class;
      LinkedHashSet<MessageFormat> linkedHashSet0 = new LinkedHashSet<MessageFormat>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Class<?>) class0, (Collection) linkedHashSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : q2H/
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$.$ref");
      LinkedHashMap<MockDate, Byte> linkedHashMap0 = new LinkedHashMap<MockDate, Byte>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) linkedHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 1, json : $.$ref
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("%Q5`N");
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      defaultJSONParser0.getConfig();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$", parserConfig0);
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) "$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName $
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"$ref\":\"@\"}", parserConfig0);
      DecimalFormat decimalFormat0 = defaultJSONParser0.parseObject((Type) class0);
      assertNull(decimalFormat0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}+/Bh5V:egn");
      defaultJSONParser0.resolveReference("}+/Bh5V:egn");
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"$ref\":\"@\"}", parserConfig0);
      PageAttributes.OriginType pageAttributes_OriginType0 = PageAttributes.OriginType.PHYSICAL;
      defaultJSONParser0.parse((Object) pageAttributes_OriginType0);
      Object object0 = defaultJSONParser0.resolveReference("fastjson.parser.autoTypeAccept");
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("]37Gc%7NyP78Oi+", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.close();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : ]
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("&kIUr!|rq#", parserConfig0, 0);
      defaultJSONParser0.close();
      // Undeclared exception!
      try { 
        defaultJSONParser0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("&kIUr!|rq#", parserConfig0, 0);
      defaultJSONParser0.accept(1, 0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("NaN");
      ChoiceFormat choiceFormat0 = new ChoiceFormat("NaN");
      defaultJSONParser0.parse((Object) choiceFormat0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(".class", parserConfig0, 4);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : .class
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      Byte byte0 = new Byte((byte)23);
      defaultJSONParser0.parse((Object) byte0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("N");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) "N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : N
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(":b$Mx{ Cx|", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : :b$Mx{ Cx|
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",I", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ,I
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("]37Gc%7NyP78Oi+", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) "]37Gc%7NyP78Oi+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ]37Gc%7NyP78Oi+
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}+/Bh5V:egn");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) "}+/Bh5V:egn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : }+/Bh5V:egn
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(")%v8Z", parserConfig0);
      MessageFormat messageFormat0 = new MessageFormat("not support : ");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) messageFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : )%v8Z
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("()V");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) "()V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ()V
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("new", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONScanner jSONScanner0 = new JSONScanner("fastjson.parser.deny");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null", parserConfig0);
      defaultJSONParser0.parse((Object) jSONScanner0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("'(d8P=m`)R/C0I{'");
      defaultJSONParser0.parse((Object) parserConfig0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("4FIHp:rdVx*a]F{", parserConfig0);
      defaultJSONParser0.parse((Object) "4FIHp:rdVx*a]F{");
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("37Gc%7NyP78Oi+");
      defaultJSONParser0.parse((Object) parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 3, json : 37Gc%7NyP78Oi+
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("TODO", parserConfig0);
      defaultJSONParser0.parseKey();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("<Ji,h|U)~ v7+ &I[");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : <Ji,h|U)~ v7+ &I[
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("new Date(", parserConfig0, (-880));
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-880));
      defaultJSONParser0.setContext((ParseContext) null, (Object) mockGregorianCalendar0, (Object) null);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}+/Bh5V:egn");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("}+/Bh5V:egn", 1);
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) jSONReaderScanner0, (Object) "}+/Bh5V:egn");
      assertNotNull(parseContext0);
      
      defaultJSONParser0.popContext();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      JSONScanner jSONScanner0 = new JSONScanner("NaN", (-5127));
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      defaultJSONParser0.popContext();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("OPH$Y.[9t Jb");
      // Undeclared exception!
      try { 
        defaultJSONParser0.popContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null", parserConfig0);
      defaultJSONParser0.getExtraTypeProviders();
      List<ExtraTypeProvider> list0 = defaultJSONParser0.getExtraTypeProviders();
      assertNotNull(list0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      defaultJSONParser0.getExtraProcessors();
      List<ExtraProcessor> list0 = defaultJSONParser0.getExtraProcessors();
      assertNotNull(list0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("I", parserConfig0, 0);
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, "fastjson.parser.autoTypeAccept");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}+/Bh5V:egn");
      defaultJSONParser0.getResolveTaskList();
      List<DefaultJSONParser.ResolveTask> list0 = defaultJSONParser0.getResolveTaskList();
      assertNotNull(list0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("NaN");
      char[] charArray0 = new char[2];
      charArray0[0] = '[';
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(charArray0, 1, parserConfig0, 1);
      // Undeclared exception!
      try { 
        defaultJSONParser1.parse((PropertyProcessable) null, (Object) defaultJSONParser0.NONE);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed jsonArray
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[F", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : [F
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("()V");
      defaultJSONParser0.setContext((Object) "()V", (Object) "()V");
      Object object0 = defaultJSONParser0.getObject("$");
      assertNotNull(object0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Type[] typeArray0 = new Type[8];
      Class<Short> class0 = Short.TYPE;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      JSONScanner jSONScanner0 = new JSONScanner("i5");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support type com.alibaba.fastjson.util.ParameterizedTypeImpl@94e4b341
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("bX");
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : bX
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null", parserConfig0);
      Class<Long> class0 = Long.TYPE;
      defaultJSONParser0.parseArrayWithType(class0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("]37Gc%7NyP78Oi+", parserConfig0);
      Class<Long> class0 = Long.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.reflect.ParameterizedType
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",}e`YVXl(4.");
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      defaultJSONParser0.parseObject((Object) mockDateFormat0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",I", parserConfig0);
      Short short0 = new Short((short)11);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) short0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 2, json : ,I
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{{Xy3&%vZ$SH", parserConfig0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) mockGregorianCalendar0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : {pos 1, json : {{Xy3&%vZ$SH
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) rectangle0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null", parserConfig0);
      defaultJSONParser0.parseArray((Type[]) null);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("'(d8P=m`)R/C0I{'");
      Class<Double> class0 = Double.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual string, pos 0, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = JSON.parseObject("{\"$ref\":\"@\"}");
      assertEquals(1, jSONObject0.size());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",m]}1;?k4Y", parserConfig0, 7);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual ]
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", ac)u8l ");
      TreeMap<Locale, BigDecimal> treeMap0 = new TreeMap<Locale, BigDecimal>();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_ANTIALIASING;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) treeMap0, (Object) sunHints_Key0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual )
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", ");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null", parserConfig0);
      defaultJSONParser0.parseObject();
      Class<Properties> class0 = Properties.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF, pos 0, json : null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("TODO : ", parserConfig0);
      defaultJSONParser0.getInput();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      defaultJSONParser0.getDateFormat();
      DateFormat dateFormat0 = defaultJSONParser0.getDateFormat();
      assertNotNull(dateFormat0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("L&kIUr!|rq#", parserConfig0);
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      defaultJSONParser0.setDateFomrat(dateFormat0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("B$8bKg9x-A^Eh-V[e");
      defaultJSONParser0.getSymbolTable();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}+/Bh5V:egn");
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      char[] charArray0 = new char[0];
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser(charArray0, (-2688), parserConfig0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null", parserConfig0);
      Class<Properties> class0 = Properties.class;
      defaultJSONParser0.parseObject(class0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("&kIUr!|rq#", parserConfig0);
      Feature feature0 = Feature.AutoCloseSource;
      defaultJSONParser0.isEnabled(feature0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("-R.>c.;O");
      Feature feature0 = Feature.CustomMapDeserializer;
      defaultJSONParser0.config(feature0, false);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}+/Bh5V:egn");
      // Undeclared exception!
      try { 
        defaultJSONParser0.getLastResolveTask();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}+/Bh5V:egn");
      int int0 = defaultJSONParser0.getResolveStatus();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("u`n#sj_t\u0003Yi");
      // Undeclared exception!
      try { 
        defaultJSONParser0.throwException(20);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect EOF, actual ident
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("()V");
      defaultJSONParser0.getFieldTypeResolver();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}+/Bh5V:egn");
      Class<ImageCapabilities> class0 = ImageCapabilities.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but }, pos 1, json : }+/Bh5V:egn
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("37Gc%7NyP78Oi+");
      defaultJSONParser0.setConfig(parserConfig0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("bKBs9v<gY(B");
      defaultJSONParser0.getDateFomartPattern();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("syntax error, expect ");
      defaultJSONParser0.setDateFormat("fastjson.parser.deny");
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser((JSONLexer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
