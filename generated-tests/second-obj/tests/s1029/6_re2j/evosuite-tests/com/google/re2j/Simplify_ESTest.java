/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 14:17:51 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Regexp;
import com.google.re2j.Simplify;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Simplify_ESTest extends Simplify_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp1;
      regexp0.subs = regexpArray0;
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      int[] intArray0 = new int[5];
      intArray0[0] = (-551);
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      Simplify.simplify(regexp0);
      Regexp regexp1 = new Regexp(regexp_Op0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.name = "$";
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[4] = regexp1;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp1;
      regexp0.subs = regexpArray0;
      regexp0.min = 2;
      Object object0 = new Object();
      Regexp regexp2 = Simplify.simplify(regexp0);
      assertNotNull(regexp2);
      
      Regexp regexp3 = Simplify.simplify(regexp2);
      assertSame(regexp3, regexp2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.name = "$";
      regexp0.reinit();
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp1;
      regexpArray0[4] = regexp1;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp1;
      regexp0.subs = regexpArray0;
      regexp0.min = 2;
      Object object0 = new Object();
      Regexp regexp2 = Simplify.simplify(regexp0);
      Regexp regexp3 = Simplify.simplify(regexp2);
      assertSame(regexp3, regexp2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.max = 54;
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.reinit();
      regexp0.flags = (-3356);
      regexp1.cap = (-3356);
      Regexp[] regexpArray0 = new Regexp[7];
      Regexp regexp2 = new Regexp(regexp1);
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp1;
      regexpArray0[4] = regexp1;
      regexp0.subs = regexpArray0;
      regexp0.min = (-3356);
      Object object0 = new Object();
      Regexp regexp3 = new Regexp(regexp0);
      Object object1 = new Object();
      Object object2 = new Object();
      regexp1.equals(object2);
      Regexp regexp4 = new Regexp(regexp_Op0);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.name = "x";
      regexp0.reinit();
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp1;
      regexpArray0[4] = regexp1;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp1;
      regexp0.subs = regexpArray0;
      regexp0.min = (-9);
      regexp0.subs = regexpArray0;
      Object object0 = new Object();
      Regexp regexp2 = Simplify.simplify(regexp0);
      Regexp regexp3 = Simplify.simplify(regexp2);
      assertSame(regexp3, regexp2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.reinit();
      Regexp[] regexpArray0 = new Regexp[7];
      Regexp regexp2 = Simplify.simplify(regexp0);
      regexpArray0[0] = regexp2;
      regexpArray0[4] = regexp1;
      regexpArray0[5] = regexp0;
      regexp0.subs = regexpArray0;
      regexp0.min = 2;
      Regexp regexp3 = Simplify.simplify(regexp2);
      Object object0 = new Object();
      Regexp regexp4 = Simplify.simplify(regexp0);
      regexp2.reinit();
      regexp3.op = regexp_Op0;
      Simplify.simplify(regexp1);
      Simplify.simplify(regexp2);
      Regexp regexp5 = Simplify.simplify(regexp0);
      regexp1.flags = 2;
      Simplify.simplify(regexp2);
      Regexp.Op regexp_Op1 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp6 = new Regexp(regexp_Op1);
      Regexp regexp7 = Simplify.simplify(regexp4);
      assertFalse(regexp4.equals((Object)regexp5));
      assertTrue(regexp7.equals((Object)regexp5));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.reinit();
      regexp0.flags = (-3356);
      Regexp[] regexpArray0 = new Regexp[7];
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp2;
      regexp0.max = (-32);
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp1;
      regexpArray0[4] = regexp1;
      regexpArray0[6] = regexp1;
      regexp0.subs = regexpArray0;
      regexp0.min = (-16);
      Regexp regexp3 = Simplify.simplify(regexp0);
      Object object0 = new Object();
      Object object1 = new Object();
      Regexp regexp4 = new Regexp(regexp3);
      Regexp regexp5 = new Regexp(regexp_Op0);
      Regexp regexp6 = new Regexp(regexp_Op0);
      Simplify.simplify(regexp4);
      Regexp regexp7 = new Regexp(regexp_Op0);
      Simplify.simplify(regexp0);
      Object object2 = new Object();
      regexp0.equals(object2);
      Regexp.Op regexp_Op1 = Regexp.Op.ANY_CHAR;
      Regexp regexp8 = new Regexp(regexp_Op1);
      Simplify.simplify(regexp1);
      Simplify.simplify(regexp0);
      Simplify.simplify(regexp0);
      Regexp regexp9 = new Regexp(regexp5);
      Regexp regexp10 = new Regexp(regexp7);
      Regexp regexp11 = Simplify.simplify(regexp1);
      assertFalse(regexp11.equals((Object)regexp2));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexp0.flags = (-3356);
      regexp1.cap = (-3356);
      Regexp[] regexpArray0 = new Regexp[6];
      Regexp regexp2 = new Regexp(regexp1);
      regexpArray0[0] = regexp2;
      regexpArray0[2] = regexp0;
      regexpArray0[4] = regexp1;
      regexp0.subs = regexpArray0;
      regexp0.min = (-9);
      Regexp regexp3 = new Regexp(regexp0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Regexp regexp4 = new Regexp(regexp0);
      Regexp regexp5 = Simplify.simplify(regexp0);
      Regexp regexp6 = new Regexp(regexp_Op0);
      Regexp regexp7 = Simplify.simplify(regexp4);
      Regexp regexp8 = Simplify.simplify(regexp4);
      Regexp[] regexpArray1 = new Regexp[6];
      regexpArray1[0] = regexp3;
      regexpArray1[2] = regexp7;
      int[] intArray0 = new int[8];
      intArray0[0] = (-9);
      intArray0[1] = (-3356);
      intArray0[2] = (-3356);
      intArray0[4] = (-3356);
      intArray0[5] = (-9);
      intArray0[6] = 1;
      intArray0[7] = 1;
      regexp7.runes = intArray0;
      Regexp regexp9 = Simplify.simplify(regexp6);
      regexpArray1[3] = regexp9;
      regexpArray1[4] = regexp1;
      regexpArray1[5] = regexp2;
      regexp8.subs = regexpArray1;
      regexp8.min = 1;
      Simplify.simplify(regexp8);
      assertFalse(regexp8.equals((Object)regexp5));
      
      Object object3 = new Object();
      Regexp regexp10 = Simplify.simplify(regexp2);
      assertFalse(regexp10.equals((Object)regexp8));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.max = 54;
      regexp0.reinit();
      Regexp[] regexpArray0 = new Regexp[7];
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp1;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      regexp0.subs = regexpArray0;
      regexp0.min = 2;
      Simplify.simplify(regexp1);
      Object object0 = new Object();
      Regexp regexp2 = new Regexp(regexp1);
      regexp0.equals(object0);
      Regexp regexp3 = new Regexp(regexp_Op0);
      Regexp.Op regexp_Op1 = Regexp.Op.CHAR_CLASS;
      Regexp regexp4 = new Regexp(regexp_Op1);
      Simplify.simplify(regexp1);
      Regexp regexp5 = Simplify.simplify(regexp0);
      regexp0.max = 54;
      Simplify.simplify(regexp0);
      Object object1 = new Object();
      Regexp.Op regexp_Op2 = Regexp.Op.NO_MATCH;
      Regexp regexp6 = new Regexp(regexp_Op2);
      Simplify.simplify(regexp3);
      Regexp regexp7 = Simplify.simplify(regexp4);
      assertFalse(regexp7.equals((Object)regexp5));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[6];
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexp0.subs = regexpArray0;
      regexp0.min = (-11);
      Regexp regexp2 = new Regexp(regexp0);
      Object object0 = new Object();
      regexp0.equals("");
      Simplify.simplify(regexp0);
      Object object1 = new Object();
      Regexp regexp3 = new Regexp(regexp0);
      Regexp regexp4 = Simplify.simplify(regexp0);
      Regexp regexp5 = new Regexp(regexp_Op0);
      Regexp regexp6 = Simplify.simplify(regexp3);
      Regexp regexp7 = Simplify.simplify(regexp3);
      regexp2.flags = (-11);
      Regexp[] regexpArray1 = new Regexp[6];
      regexpArray1[0] = regexp2;
      Simplify.simplify(regexp0);
      regexpArray1[4] = regexp4;
      regexpArray1[4] = regexp1;
      regexp7.subs = regexpArray1;
      regexp7.min = 1;
      Regexp regexp8 = Simplify.simplify(regexp7);
      Regexp regexp9 = Simplify.simplify(regexp7);
      assertNotSame(regexp9, regexp8);
      
      Simplify.simplify(regexp1);
      Simplify.simplify(regexp0);
      Regexp regexp10 = Simplify.simplify(regexp2);
      Regexp regexp11 = Simplify.simplify(regexp4);
      Simplify.simplify(regexp6);
      Regexp regexp12 = Simplify.simplify(regexp10);
      assertFalse(regexp12.equals((Object)regexp11));
      assertSame(regexp12, regexp10);
      assertFalse(regexp12.equals((Object)regexp8));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.reinit();
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp1;
      regexpArray0[4] = regexp1;
      regexpArray0[5] = regexp0;
      regexp0.subs = regexpArray0;
      regexp0.min = 1;
      Object object0 = new Object();
      Regexp regexp2 = Simplify.simplify(regexp1);
      Regexp regexp3 = Simplify.simplify(regexp0);
      assertFalse(regexp3.equals((Object)regexp2));
  }
}
