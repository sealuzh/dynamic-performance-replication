/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 03 04:36:48 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      String string0 = JSONObject.valueToString(hashMap0, (-989), (-3486));
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0, (-240), (-34776646));
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      jSONObject0.put("#etoptLong", (Map) hashMap0);
      String string0 = jSONObject0.toString((-989), 70);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("#etoptLong", (double) (-989));
      String string0 = jSONObject1.toString((-989), 70);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{gkvGG{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 7 of {gkvGG{
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("}\"f?Nim({wWLNQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of }\"f?Nim({wWLNQ
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("Null key.", jSONObject0);
      Object object0 = jSONObject1.remove("Null key.");
      assertSame(jSONObject0, object0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float((-3851.0F));
      JSONObject jSONObject1 = jSONObject0.put("\n", (Object) float0);
      long long0 = jSONObject1.optLong("\n");
      assertEquals((-3851L), long0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      jSONObject0.put("wl&1", (Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("wl&1");
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("iscompare", "iscompare");
      JSONArray jSONArray0 = jSONObject0.optJSONArray("iscompare");
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("#etoptLong", 3480.7826525);
      int int0 = jSONObject0.optInt("#etoptLong");
      assertEquals(3480, int0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] is not a Boolean.", (-794));
      int int0 = jSONObject1.optInt("] is not a Boolean.");
      assertEquals((-794), int0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("dkQPm", 0L);
      double double0 = jSONObject0.optDouble("dkQPm");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("getoptLong", (double) (-989));
      double double0 = jSONObject1.optDouble("getoptLong");
      assertEquals((-989.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("JSONObject[", "JSONObject[");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = jSONObject0.opt("JSONObject[");
      assertEquals("JSONObject[", object0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(0.0);
      JSONObject jSONObject1 = jSONObject0.putOpt("kQPm", double0);
      long long0 = jSONObject1.getLong("kQPm");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONException", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject1.getJSONArray("wheel.json.JSONException");
      assertEquals(0, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Byte byte0 = new Byte((byte)4);
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      jSONObject0.put("B#9~U_l@1o", 0L);
      int int0 = jSONObject0.getInt("B#9~U_l@1o");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("java.lang.Short@0000000004", (double) (short) (-15557));
      int int0 = jSONObject0.getInt("java.lang.Short@0000000004");
      assertEquals((-15557), int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] is not a number.", 0.0);
      double double0 = jSONObject1.getDouble("] is not a number.");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float((float) (short)27);
      jSONObject0.put("getnotifyAll", (Object) float0);
      double double0 = jSONObject0.getDouble("getnotifyAll");
      assertEquals(27.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.accumulate("551.168933", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = JSONObject.valueToString("jJ(i-6YA @BbF]JS", (-2948), (-2948));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 0, 0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(0, 0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.testValidity(object0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "wheel.json.JSONObject$Null");
      jSONObject0.remove((String) null);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Object object0 = jSONObject0.remove("");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject("java.lang.Float@0000000001", stringArray0);
      Object object0 = new Object();
      jSONObject0.putOpt("java.lang.Float@0000000001", object0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Set<Map.Entry<String, String>> set0 = (Set<Map.Entry<String, String>>)hashMap0.entrySet();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("", set0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", true);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("{\"java.lang.String@0000000006\":java.lang.Double@0000000007,\"java.lang.String@0000000002\":java.lang.Integer@0000000003}", (Map) null);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HashMap<JSONArray, Object> hashMap0 = new HashMap<JSONArray, Object>();
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.put("", (Map) hashMap0);
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject1 = jSONObject0.put("", (Object) jSONArray0);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("", 2150L);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("fZ", 0);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("] is not a Boolean.", (-794));
      boolean boolean0 = jSONObject0.has("] is not a Boolean.");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 13);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (double) (-4664.7046F));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 0.0);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("GFz*##+Ostu=gbon)", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString((String) null, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      String string0 = jSONObject0.optString("", " fo~v%l(Vu/&<");
      assertEquals(" fo~v%l(Vu/&<", string0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject(jSONArray0, stringArray0);
      String string0 = jSONObject0.optString((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HashMap<JSONArray, Object> hashMap0 = new HashMap<JSONArray, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong((String) null, (long) 64122);
      assertEquals(64122L, long0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong((String) null, (-1963L));
      assertEquals((-1963L), long0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("", 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong((String) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HashMap<JSONArray, Object> hashMap0 = new HashMap<JSONArray, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("");
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Float float0 = new Float((-15.585899553508304));
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.optJSONArray((String) null);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Integer integer0 = new Integer((-1296));
      JSONObject jSONObject0 = new JSONObject(integer0);
      jSONObject0.optJSONArray("");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("getreverseBytes", (-50462705));
      assertEquals((-50462705), int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("h", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("", 933);
      assertEquals(933, int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt((String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("2d&N_]qhUD()k?JDwtB", 2952.801985562246);
      assertEquals(2952.801985562246, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble((String) null, (double) (short) (-1199));
      assertEquals((-1199.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble((String) null);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble("");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("] is not a Boolean.", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean((String) null, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("", true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Object object0 = jSONObject0.opt("q;\"+E~");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull((String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.isNull("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Float float0 = new Float(990.6153120950722);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.has((String) null);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Short short0 = new Short((short)16);
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Short short0 = new Short((short)47);
      JSONObject jSONObject0 = new JSONObject(short0);
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Short short0 = new Short((short)47);
      JSONObject jSONObject0 = new JSONObject(short0);
      try { 
        jSONObject0.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getJSONArray((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Float float0 = new Float((-15.585899553508304));
      JSONObject jSONObject0 = new JSONObject(float0);
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Float float0 = new Float((-15.585899553508304));
      JSONObject jSONObject0 = new JSONObject(float0);
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-370.20581));
      assertEquals("-370.20581", string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      try { 
        jSONObject0.append((String) null, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("", "");
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      jSONObject0.accumulate("com", object0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0, 0, 6);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("not");
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      // Undeclared exception!
      jSONObject0.toString(2090, 2090);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Double double0 = new Double(1273.7100679);
      hashMap0.put((String) null, double0);
      jSONObject0.put("#etoptLonmg", (Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.toString((-992), (-992));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      // Undeclared exception!
      jSONObject0.toString(8192);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Collection) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 1L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 8);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      HashMap<JSONArray, Object> hashMap0 = new HashMap<JSONArray, Object>();
      JSONArray jSONArray0 = new JSONArray();
      hashMap0.put(jSONArray0, linkedList0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // wheel.json.JSONArray cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = JSONObject.quote("5XUI7J/");
      assertEquals("\"5XUI7J/\"", string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = JSONObject.quote("e*\"");
      assertEquals("\"e*\\\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, "");
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] is not a Boolean.", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Float@0000000001", (Object) "null");
      String string0 = jSONObject1.optString("java.lang.Float@0000000001", "dq3Qo_bH>");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("000", (long) (-989));
      double double0 = jSONObject1.optDouble("000", (-3501.16569));
      assertEquals((-989.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt("");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[5];
      Object object0 = jSONObject0.opt(stringArray0[2]);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Byte byte0 = new Byte((byte)49);
      String string0 = JSONObject.numberToString(byte0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Null key.", (Object) "Null key.");
      try { 
        jSONObject1.getLong("Null key.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Null key.\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Float float0 = new Float(990.6153120950722);
      JSONObject jSONObject0 = new JSONObject(float0);
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.put("getotiyAll", object0);
      try { 
        jSONObject1.getInt("getotiyAll");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getotiyAll\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Null key.", (Object) "Null key.");
      try { 
        jSONObject1.getDouble("Null key.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Null key.\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Integer integer0 = new Integer((-1296));
      JSONObject jSONObject0 = new JSONObject(integer0);
      jSONObject0.accumulate("N0&u#C:pL[E", integer0);
      try { 
        jSONObject0.getBoolean("N0&u#C:pL[E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"N0&u#C:pL[E\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("] is not a Bolean.", true);
      boolean boolean0 = jSONObject0.getBoolean("] is not a Bolean.");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("getotiyAll", (Object) "n1l");
      try { 
        jSONObject1.getBoolean("getotiyAll");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getotiyAll\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Float float0 = new Float(990.6153120950722);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.put("Y]|ff%frN>X\"_", false);
      boolean boolean0 = jSONObject1.getBoolean("Y]|ff%frN>X\"_");
      assertEquals(4, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("getotiyAll", (Object) "n1l");
      Object object0 = jSONObject0.get("getotiyAll");
      assertEquals("n1l", object0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Float float0 = new Float(990.6153120950722);
      JSONObject jSONObject0 = new JSONObject(float0);
      int int0 = jSONObject0.length();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HashMap<JSONObject, Short> hashMap0 = new HashMap<JSONObject, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Y-'z,VyuX", (Collection) null);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      jSONObject0.put(",mM@", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.toString((-1419));
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = JSONObject.valueToString(linkedList0, 1785, 1785);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(591, 591);
      // Undeclared exception!
      JSONObject.valueToString(jSONArray1, 591, 591);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 1811, 1811);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "equ");
      String string0 = jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) jSONObject0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNotSame(jSONArray1, jSONArray0);
      assertEquals(1, jSONArray1.length());
      assertNotNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      HashMap<JSONObject, Short> hashMap0 = new HashMap<JSONObject, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Float float0 = new Float(4318.5F);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Float float0 = new Float((-1651.9705F));
      String string0 = JSONObject.valueToString(float0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Double double0 = new Double(0.0);
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("q^~b4^VWm", (Object) null);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = JSONObject.quote("@OUe5 76rt</NO\u000386");
      assertEquals("\"@OUe5 76rt<\\/NO\\u000386\"", string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("Y1\"/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Y1\\\"/\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = JSONObject.quote("\b");
      assertEquals("\"\\b\"", string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt((String) null, 4);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("JTYLdSMqS,", (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("isput", (Object) "isput");
      String string0 = jSONObject0.optString("isput");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      HashMap<JSONObject, Short> hashMap0 = new HashMap<JSONObject, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject1 = jSONObject0.put("YFX", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject1.optJSONArray("YFX");
      assertEquals(0, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONObject$1", 2009L);
      double double0 = jSONObject1.optDouble("wheel.json.JSONObject$1");
      assertEquals(2009.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject((Object) "");
      Long long0 = new Long(0L);
      String string0 = JSONObject.numberToString(long0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("w@&1", 2037L);
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      HashMap<JSONObject, Short> hashMap0 = new HashMap<JSONObject, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Long long0 = new Long(557L);
      JSONObject jSONObject1 = jSONObject0.putOpt("ac", long0);
      JSONObject.getNames(jSONObject1);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("#etoptLong", (double) (-989));
      long long0 = jSONObject1.getLong("#etoptLong");
      assertEquals((-989L), long0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Byte, Short> hashMap0 = new HashMap<Byte, Short>();
      JSONObject jSONObject1 = jSONObject0.put("getnotifyAll", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject0.getJSONObject("getnotifyAll");
      assertFalse(jSONObject2.equals((Object)jSONObject1));
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("isput", (Object) "isput");
      try { 
        jSONObject0.getJSONObject("isput");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isput\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("dkQPm", (Object) "dkQPm");
      try { 
        jSONObject0.getJSONArray("dkQPm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"dkQPm\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("w@&1", 2009L);
      int int0 = jSONObject0.getInt("w@&1");
      assertEquals(2009, int0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("null", (double) (-989));
      double double0 = jSONObject1.getDouble("null");
      assertEquals((-989.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      HashMap<JSONObject, Short> hashMap0 = new HashMap<JSONObject, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject1 = jSONObject0.put("YFX", (Collection) linkedList0);
      long long0 = jSONObject1.optLong("YFX", 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("kQPm", (Object) jSONObject0);
      boolean boolean0 = jSONObject1.optBoolean("kQPm");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("false", (Object) "false");
      boolean boolean0 = jSONObject0.optBoolean("false");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.TRUE;
      jSONObject0.put("!xPm", (Object) boolean0);
      boolean boolean1 = jSONObject0.optBoolean("!xPm");
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      HashMap<JSONObject, Short> hashMap0 = new HashMap<JSONObject, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject1 = jSONObject0.put("YFX", (Collection) linkedList0);
      String string0 = jSONObject1.getString("YFX");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = JSONObject.doubleToString((short)5849);
      assertEquals("5849", string0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("kQPm", (Object) "kQPm");
      try { 
        jSONObject1.append("kQPm", jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[kQPm] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("n<", "n<");
      JSONArray jSONArray0 = jSONObject1.getJSONArray("n<");
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      HashMap<JSONObject, Short> hashMap0 = new HashMap<JSONObject, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.put("YFX", (Collection) linkedList0);
      JSONObject jSONObject1 = jSONObject0.append("YFX", hashMap0);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Null key.", (Object) "Null key.");
      JSONObject jSONObject2 = jSONObject1.accumulate("Null key.", jSONObject0);
      StringWriter stringWriter0 = new StringWriter(16);
      // Undeclared exception!
      jSONObject2.write(stringWriter0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.accumulate("|9R*SvcK>ynj> 6", jSONArray0);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      HashMap<JSONObject, Short> hashMap0 = new HashMap<JSONObject, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.accumulate("2J0X=,06;Zdo", jSONObject0);
      jSONObject0.optJSONObject("2J0X=,06;Zdo");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      jSONObject0.put("", (Collection) linkedList0);
      JSONObject jSONObject1 = jSONObject0.accumulate("", "");
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(false);
      String[] stringArray0 = new String[8];
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.putOpt("]x$lDew+q5XjyBS$sF2", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Short short0 = new Short((short)87);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      jSONObject0.put("68yJ?F", (Object) short0);
      long long0 = jSONObject0.getLong("68yJ?F");
      assertEquals(87L, long0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"java.lang.String@0000000004\":[java.lang.Byte@0000000016,java.lang.Byte@0000000017,java.lang.Byte@0000000018],\"java.lang.String@0000000013\":\"java.lang.Class@0000000014\",\"java.lang.String@0000000002\":java.lang.Boolean@0000000003}");
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{@-2!Ql$Hij#R");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 14 of {@-2!Ql$Hij#R
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("h$)!>$m6(,V'T");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of h$)!>$m6(,V'T
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[3];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("Null key.", object0);
      boolean boolean0 = jSONObject1.isNull("Null key.");
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Null key.", (Object) jSONObject0);
      boolean boolean0 = jSONObject1.isNull("Null key.");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString(1360);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString(2090, 2090);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("wheel.json.JSONObject$Null", 25);
      long long0 = jSONObject0.optLong("wheel.json.JSONObject$Null");
      assertEquals(1, jSONObject0.length());
      assertEquals(25L, long0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      boolean boolean0 = jSONObject0.optBoolean("");
      assertEquals(3, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(2, jSONObject0.length());
  }
}
