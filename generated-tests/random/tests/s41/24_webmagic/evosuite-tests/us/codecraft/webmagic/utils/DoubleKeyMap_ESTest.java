/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 02:04:48 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, Map<String, Map<Object, Object>>> hashMap0 = new HashMap<String, Map<String, Map<Object, Object>>>();
      HashMap<String, Map<Object, Object>> hashMap1 = new HashMap<String, Map<Object, Object>>();
      HashMap<Map<Object, Object>, Map<String, Integer>> hashMap2 = new HashMap<Map<Object, Object>, Map<String, Integer>>();
      DoubleKeyMap<Map<Object, Object>, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Object>, String, Integer>(hashMap2);
      Map<Object, Object> map0 = doubleKeyMap0.newMap();
      hashMap1.put("", map0);
      hashMap0.put("", hashMap1);
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, String, Map<Object, Object>> doubleKeyMap1 = new DoubleKeyMap<String, String, Map<Object, Object>>(hashMap0, class0);
      doubleKeyMap1.remove("", "");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>(class0);
      Map<String, Object> map0 = doubleKeyMap0.remove((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Integer, String> doubleKeyMap0 = new DoubleKeyMap<String, Integer, String>(class0);
      Integer integer0 = new Integer(997);
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Object>(class0);
      Object object1 = doubleKeyMap1.put((Object) doubleKeyMap0, integer0, object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<String, String>, String, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Map<String, String>, String, String>((Map<Map<String, String>, Map<String, String>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, Integer, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, String>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, Object, Map<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Map<Object, Object>>(class0);
      Map<Object, Map<Object, Object>> map0 = doubleKeyMap0.get((Integer) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, Map<String, Map<Object, Object>>> hashMap0 = new HashMap<String, Map<String, Map<Object, Object>>>();
      HashMap<String, Map<Object, Object>> hashMap1 = new HashMap<String, Map<Object, Object>>();
      HashMap<Map<Object, Object>, Map<String, Integer>> hashMap2 = new HashMap<Map<Object, Object>, Map<String, Integer>>();
      DoubleKeyMap<Map<Object, Object>, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Object>, String, Integer>(hashMap2);
      Map<Object, Object> map0 = doubleKeyMap0.newMap();
      hashMap1.put("U'N'3JTD", map0);
      hashMap0.put("", hashMap1);
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, String, Map<Object, Object>> doubleKeyMap1 = new DoubleKeyMap<String, String, Map<Object, Object>>(hashMap0, class0);
      doubleKeyMap1.remove("", "");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Integer, String> doubleKeyMap0 = new DoubleKeyMap<String, Integer, String>(class0);
      Integer integer0 = new Integer(997);
      doubleKeyMap0.put("us.codecraft.webmagic.utils.DoubleKeyMap", integer0, "");
      String string0 = doubleKeyMap0.put("us.codecraft.webmagic.utils.DoubleKeyMap", integer0, "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>();
      Object object0 = new Object();
      String string0 = doubleKeyMap0.remove((Object) null, object0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>();
      Object object0 = new Object();
      Map<Object, String> map0 = doubleKeyMap0.remove(object0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>(class0);
      Map<Map<String, Object>, Map<Integer, Integer>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Map<String, Object>, Integer, Integer> doubleKeyMap1 = new DoubleKeyMap<Map<String, Object>, Integer, Integer>(map0);
      Integer integer0 = doubleKeyMap1.get((Map<String, Object>) null, (Integer) null);
      assertNull(integer0);
  }
}
