/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 19:28:59 GMT 2018
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.ResultItems;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.downloader.Downloader;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.monitor.SpiderMonitor;
import us.codecraft.webmagic.pipeline.CollectorPipeline;
import us.codecraft.webmagic.pipeline.FilePipeline;
import us.codecraft.webmagic.pipeline.JsonFilePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.processor.PageProcessor;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.PriorityScheduler;
import us.codecraft.webmagic.scheduler.QueueScheduler;
import us.codecraft.webmagic.scheduler.Scheduler;
import us.codecraft.webmagic.selector.PlainText;
import us.codecraft.webmagic.selector.ReplaceSelector;
import us.codecraft.webmagic.utils.FilePersistentBase;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("T2.%0}Hws):DzD");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(true);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "T2.%0}Hws):DzD";
      stringArray0[1] = "T2.%0}Hws):DzD";
      stringArray0[2] = "T2.%0}Hws):DzD";
      stringArray0[3] = "T2.%0}Hws):DzD";
      stringArray0[4] = "T2.%0}Hws):DzD";
      stringArray0[5] = "T2.%0}Hws):DzD";
      // Undeclared exception!
      try { 
        spider1.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Jb");
      Spider spider0 = new Spider(simplePageProcessor0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      spider0.addPipeline(jsonFilePipeline0);
      Request[] requestArray0 = new Request[1];
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("I");
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("?k''g'Ugzd3S#[,kF?(");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline("?k''g'Ugzd3S#[,kF?(");
      spider0.pipeline(filePipeline0);
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("XU)$:g}");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("XU)$:g}");
      Spider spider2 = spider1.startRequest((List<Request>) null);
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("process request ");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      Spider spider2 = spider1.setSpawnUrl(false);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      // Undeclared exception!
      try { 
        spider2.thread((ExecutorService) forkJoinPool0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("3c2[8p}5l5W>'/%");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      CollectorPipeline collectorPipeline0 = spider0.getCollectorPipeline();
      spider1.addPipeline(collectorPipeline0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("3c2[8p}5l5W>'/%");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getCollectorPipeline();
      Spider spider1 = spider0.setUUID("3c2[8p}5l5W>'/%");
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider1.setEmptySleepTime(5);
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(",K/&h");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider2 = spider1.setScheduler(queueScheduler0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(",K/&h", ",K/&h");
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum(1124);
      Spider spider3 = spider2.downloader(phantomJSDownloader1);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider4 = spider3.setSpiderListeners(linkedList0);
      Spider spider5 = spider4.setSpawnUrl(true);
      String string0 = spider5.getUUID();
      assertTrue(spider4.isSpawnUrl());
      assertEquals(0L, spider5.getPageCount());
      assertNull(string0);
      assertTrue(spider5.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Jb");
      Spider spider0 = new Spider(simplePageProcessor0);
      FilePersistentBase.PATH_SEPERATOR = "";
      spider0.getCollectorPipeline();
      Spider spider1 = spider0.setUUID("Jb");
      spider0.setEmptySleepTime((-1794));
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(719);
      Spider spider2 = spider1.thread((ExecutorService) scheduledThreadPoolExecutor0, 719);
      spider2.executorService = (ExecutorService) scheduledThreadPoolExecutor0;
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("iO5ic2]pds");
      Spider spider3 = spider0.clearPipeline();
      spider1.getThreadAlive();
      spider3.getPageCount();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "Jb";
      stringArray0[2] = "";
      stringArray0[3] = "";
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("PoL?qaBD5");
      Spider spider0 = new Spider(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline("PoL?qaBD5");
      Spider spider1 = spider0.addPipeline(filePipeline0);
      Spider spider2 = spider1.scheduler((Scheduler) null);
      assertTrue(spider2.isSpawnUrl());
      
      Spider spider3 = spider2.setSpawnUrl(false);
      Spider spider4 = spider3.setUUID("");
      boolean boolean0 = spider4.isSpawnUrl();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Jb");
      Spider spider0 = new Spider(simplePageProcessor0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      Spider spider1 = spider0.addPipeline(jsonFilePipeline0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("I");
      spider1.getThreadAlive();
      Spider spider2 = spider0.clearPipeline();
      // Undeclared exception!
      try { 
        spider2.get("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      LinkedBlockingDeque<Runnable> linkedBlockingDeque0 = new LinkedBlockingDeque<Runnable>();
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(31, 31, 31, timeUnit0, linkedBlockingDeque0);
      Spider spider1 = spider0.thread((ExecutorService) threadPoolExecutor0, 3);
      spider1.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "e5Nl%6\"]";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("e5Nl%6\"]");
      Spider spider0 = new Spider(simplePageProcessor0);
      int int0 = (-2208);
      // Undeclared exception!
      try { 
        spider0.thread((-2208));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Jb");
      Spider spider0 = new Spider(simplePageProcessor0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      Request[] requestArray0 = new Request[1];
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("I");
      fileCacheQueueScheduler0.poll(spider0);
      requestArray0[0] = null;
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("oX$gNbqIw ");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.thread(31);
      Request[] requestArray0 = new Request[7];
      Request request0 = new Request();
      Request request1 = request0.addCookie("", "oX$gNbqIw ");
      requestArray0[0] = request1;
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      priorityScheduler0.poll(spider1);
      requestArray0[1] = null;
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      fileCacheQueueScheduler0.poll(spider1);
      requestArray0[2] = null;
      fileCacheQueueScheduler0.poll(spider1);
      requestArray0[3] = null;
      ResultItems resultItems0 = new ResultItems();
      Request request2 = new Request("application/json");
      ResultItems resultItems1 = resultItems0.setRequest(request2);
      resultItems1.setSkip(true);
      Map<String, Object> map0 = resultItems1.getAll();
      Request request3 = request1.setExtras(map0);
      request2.setUrl("");
      requestArray0[4] = request3;
      Request request4 = request1.putExtra("Spider {} closed! {} pages downloaded.", spider0);
      requestArray0[5] = request4;
      priorityScheduler0.poll(spider1);
      requestArray0[6] = null;
      // Undeclared exception!
      try { 
        spider1.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.startRequest((List<Request>) null);
      Spider spider2 = spider1.setSpawnUrl(true);
      Spider spider3 = spider2.clearPipeline();
      Spider spider4 = spider3.thread(3);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(3);
      // Undeclared exception!
      try { 
        spider4.thread((ExecutorService) forkJoinPool0, (-212));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("C");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      spider0.setPipelines(linkedList0);
      spider0.getStartTime();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("threadNum should be more than one!");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.scheduler((Scheduler) null);
      spider1.getSpiderListeners();
      Spider spider2 = spider1.setSpiderListeners((List<SpiderListener>) null);
      CollectorPipeline collectorPipeline0 = spider2.getCollectorPipeline();
      spider1.addPipeline(collectorPipeline0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      priorityScheduler0.poll(spider1);
      // Undeclared exception!
      try { 
        spider0.onError((Request) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "n}Xur0v:IM@{we%,Y";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("n}Xur0v:IM@{we%,Y");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider0.scheduler(priorityScheduler0);
      spider0.checkIfRunning();
      spider0.getUUID();
      spider0.getUUID();
      spider0.getScheduler();
      Page.fail();
      ReplaceSelector replaceSelector0 = null;
      try {
        replaceSelector0 = new ReplaceSelector("n}Xur0v:IM@{we%,Y", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid regex
         //
         verifyException("us.codecraft.webmagic.selector.ReplaceSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Spider.Status.fromValue((-212));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request request0 = new Request("");
      // Undeclared exception!
      try { 
        spider0.run();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Spider.Status.fromValue((-212));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.get("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("3c2[8p}5l5W>'/%");
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      LinkedTransferQueue<Runnable> linkedTransferQueue0 = new LinkedTransferQueue<Runnable>();
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(41, 41, 10L, timeUnit0, linkedTransferQueue0);
      String[] stringArray0 = new String[0];
      PriorityScheduler priorityScheduler1 = new PriorityScheduler();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("Spider ");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      spider0.getStatus();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("lf='MY=egQnoi");
      Spider spider0 = new Spider(simplePageProcessor0);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      LinkedTransferQueue<Runnable> linkedTransferQueue0 = new LinkedTransferQueue<Runnable>();
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(2912, 2912, 2912, timeUnit0, linkedTransferQueue0);
      Spider spider1 = spider0.setExecutorService(threadPoolExecutor0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Spider spider2 = spider1.setSpawnUrl(false);
      Spider spider3 = spider2.thread((ExecutorService) threadPoolExecutor0, 2912);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "lf='MY=egQnoi";
      spider0.thread(2912);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("nuWyyD}'D$/hy_'OM", "");
      spider2.thread(5);
      spider1.downloader(phantomJSDownloader0);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      List<String> list0 = spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      List<Locale.LanguageRange> list1 = spider3.getAll((Collection<String>) list0);
      Locale.filterTags(list1, (Collection<String>) list0);
      spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      LinkedList<BufferedReader> linkedList0 = new LinkedList<BufferedReader>();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Spider.Status.fromValue((-212));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.sleep((-212));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Jb");
      Spider spider0 = new Spider(simplePageProcessor0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      Spider spider1 = spider0.addPipeline(jsonFilePipeline0);
      spider1.getThreadAlive();
      spider1.getSite();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>(linkedList0);
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) linkedTransferQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Jb");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.exitWhenComplete = true;
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      Spider spider1 = spider0.addPipeline(jsonFilePipeline0);
      Request[] requestArray0 = new Request[1];
      String[] stringArray0 = new String[0];
      spider1.addUrl(stringArray0);
      spider0.start();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(".cursor.txt");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque0, locale_FilteringMode0);
      Spider spider1 = spider0.startUrls(list0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("5FsN/F>JpLDU");
      Spider spider2 = spider1.scheduler(fileCacheQueueScheduler0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = ".cursor.txt";
      stringArray0[1] = ".cursor.txt";
      stringArray0[2] = "5FsN/F>JpLDU";
      stringArray0[3] = ".cursor.txt";
      stringArray0[4] = "Z:!gW`;(`tF#f?-7";
      stringArray0[5] = "5FsN/F>JpLDU";
      stringArray0[6] = "5FsN/F>JpLDU";
      stringArray0[7] = ".cursor.txt";
      stringArray0[8] = ".cursor.txt";
      // Undeclared exception!
      try { 
        spider2.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Jb");
      Spider spider0 = new Spider(simplePageProcessor0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      Spider spider1 = spider0.addPipeline(jsonFilePipeline0);
      FilePersistentBase.PATH_SEPERATOR = "html";
      spider1.getCollectorPipeline();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(719);
      Spider spider2 = spider1.thread((ExecutorService) scheduledThreadPoolExecutor0, 719);
      Spider spider3 = spider2.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Jb", "html");
      Spider spider4 = spider3.thread(930);
      spider4.pageProcessor = (PageProcessor) simplePageProcessor0;
      spider4.downloader(phantomJSDownloader0);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      List<String> list0 = spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      List<Locale.LanguageRange> list1 = spider1.getAll((Collection<String>) list0);
      scheduledThreadPoolExecutor0.purge();
      List<String> list2 = Locale.filterTags(list1, (Collection<String>) list0);
      Locale.filterTags(list1, (Collection<String>) list2);
      LinkedList<BufferedReader> linkedList0 = new LinkedList<BufferedReader>();
      spider1.sleep(719);
      spider2.runAsync();
      spider2.initComponent();
      spider4.close();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Jb");
      Spider spider0 = new Spider(simplePageProcessor0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      Spider spider1 = spider0.addPipeline(jsonFilePipeline0);
      FilePersistentBase.PATH_SEPERATOR = "html";
      spider1.getCollectorPipeline();
      Spider spider2 = spider1.setSpawnUrl(true);
      Spider spider3 = spider0.addPipeline(jsonFilePipeline0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      fileCacheQueueScheduler0.poll(spider2);
      Request[] requestArray0 = new Request[0];
      spider3.addRequest(requestArray0);
      Spider spider4 = spider2.setUUID("mNf&;n");
      // Undeclared exception!
      try { 
        spider4.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Jb");
      Spider spider0 = new Spider(simplePageProcessor0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      Spider spider1 = spider0.addPipeline(jsonFilePipeline0);
      FilePersistentBase.PATH_SEPERATOR = "html";
      spider1.getCollectorPipeline();
      Spider spider2 = spider1.setSpawnUrl(true);
      Spider spider3 = spider2.setDownloader((Downloader) null);
      spider3.getCollectorPipeline();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(719);
      Spider spider4 = spider1.thread((ExecutorService) scheduledThreadPoolExecutor0, 62);
      Spider spider5 = spider4.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Jb", "html");
      spider5.spawnUrl = true;
      Spider spider6 = spider5.thread(938);
      spider6.pageProcessor = (PageProcessor) simplePageProcessor0;
      spider6.downloader(phantomJSDownloader0);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      scheduledThreadPoolExecutor0.purge();
      LinkedList<BufferedReader> linkedList0 = new LinkedList<BufferedReader>();
      spider1.sleep(719);
      spider4.runAsync();
      spider4.initComponent();
      spider6.close();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Jb");
      Spider spider0 = new Spider(simplePageProcessor0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      Spider spider1 = spider0.addPipeline(jsonFilePipeline0);
      FilePersistentBase.PATH_SEPERATOR = "html";
      spider1.getCollectorPipeline();
      Spider spider2 = spider1.setSpawnUrl(true);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(719);
      Spider spider3 = spider1.thread((ExecutorService) scheduledThreadPoolExecutor0, 62);
      Spider spider4 = spider3.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Jb", "html");
      spider4.spawnUrl = true;
      Spider spider5 = spider4.thread(938);
      spider5.downloader(phantomJSDownloader0);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum(1);
      spider5.downloader(phantomJSDownloader1);
      SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener1 = spiderMonitor0.new MonitorSpiderListener();
      spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      Request request0 = new Request("D");
      Spider spider6 = spider5.setDownloader(phantomJSDownloader1);
      spider2.run();
      spider6.getStatus();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Jb");
      Spider spider0 = new Spider(simplePageProcessor0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      Spider spider1 = spider0.addPipeline(jsonFilePipeline0);
      FilePersistentBase.PATH_SEPERATOR = "html";
      spider1.getCollectorPipeline();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(719);
      Spider spider2 = spider1.thread((ExecutorService) scheduledThreadPoolExecutor0, 719);
      Spider spider3 = spider2.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Jb", "html");
      FilePersistentBase.PATH_SEPERATOR = "";
      Spider spider4 = spider3.thread(930);
      spider4.pageProcessor = (PageProcessor) simplePageProcessor0;
      spider4.downloader(phantomJSDownloader0);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      List<String> list0 = spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      spider4.uuid = "us.codecraft.webmagic.utils.FilePersistentBase";
      List<Locale.LanguageRange> list1 = spider1.getAll((Collection<String>) list0);
      scheduledThreadPoolExecutor0.purge();
      List<String> list2 = Locale.filterTags(list1, (Collection<String>) list0);
      Locale.filterTags(list1, (Collection<String>) list2);
      LinkedList<BufferedReader> linkedList0 = new LinkedList<BufferedReader>();
      spider2.runAsync();
      spider2.initComponent();
      spider4.close();
      spider2.getScheduler();
      spider1.setExecutorService(scheduledThreadPoolExecutor0);
      System.setCurrentTimeMillis(930);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      FilePersistentBase.PATH_SEPERATOR = "html";
      int int0 = 719;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(719);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      List<String> list0 = spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("'Wwv(.^3bXMG:5");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.thread((ExecutorService) scheduledThreadPoolExecutor0, 719);
      spider1.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, "html");
      Spider spider2 = spider0.thread(159);
      Spider spider3 = spider2.downloader(phantomJSDownloader0);
      SpiderMonitor spiderMonitor1 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener1 = spiderMonitor0.new MonitorSpiderListener();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener2 = spiderMonitor1.new MonitorSpiderListener();
      spiderMonitor_MonitorSpiderListener2.getErrorUrls();
      List<Locale.LanguageRange> list1 = spider1.getAll((Collection<String>) list0);
      scheduledThreadPoolExecutor0.purge();
      List<String> list2 = Locale.filterTags(list1, (Collection<String>) list0);
      Locale.filterTags(list1, (Collection<String>) list2);
      LinkedList<BufferedReader> linkedList0 = new LinkedList<BufferedReader>();
      spider3.sleep(40);
      spider0.runAsync();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("mQ:j");
      // Undeclared exception!
      try { 
        spider1.scheduler(fileCacheQueueScheduler0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Spider is already running!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Jb");
      Spider spider0 = new Spider(simplePageProcessor0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      Spider spider1 = spider0.addPipeline(jsonFilePipeline0);
      FilePersistentBase.PATH_SEPERATOR = "html";
      spider1.getCollectorPipeline();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(719);
      Spider spider2 = spider1.thread((ExecutorService) scheduledThreadPoolExecutor0, 719);
      Spider spider3 = spider2.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Jb", "html");
      Spider spider4 = spider3.thread(938);
      spider4.pageProcessor = (PageProcessor) simplePageProcessor0;
      Spider spider5 = spider1.downloader(phantomJSDownloader0);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      List<String> list0 = spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      List<Locale.LanguageRange> list1 = spider3.getAll((Collection<String>) list0);
      scheduledThreadPoolExecutor0.purge();
      Locale.filterTags(list1, (Collection<String>) list0);
      Locale.filterTags(list1, (Collection<String>) list0);
      LinkedList<BufferedReader> linkedList0 = new LinkedList<BufferedReader>();
      spider2.sleep(712);
      spider4.runAsync();
      spider2.initComponent();
      spider0.close();
      spider4.getPageCount();
      spider5.isExitWhenComplete();
  }
}
