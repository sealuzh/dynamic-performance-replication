/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 18:46:12 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.view.mindmapview.MapView;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.Rectangle;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.ContainerListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.net.MalformedURLException;
import java.sql.Time;
import java.text.Format;
import java.text.MessageFormat;
import java.time.LocalDate;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.Vector;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.Delayed;
import javax.help.JHelpTOCNavigator;
import javax.help.plaf.basic.BasicTOCNavigatorUI;
import javax.swing.AbstractButton;
import javax.swing.DebugGraphics;
import javax.swing.DefaultListCellRenderer;
import javax.swing.Icon;
import javax.swing.JEditorPane;
import javax.swing.JFormattedTextField;
import javax.swing.JFrame;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JTextPane;
import javax.swing.JToggleButton;
import javax.swing.JTree;
import javax.swing.JViewport;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.border.Border;
import javax.swing.border.LineBorder;
import javax.swing.event.AncestorListener;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.ColorUIResource;
import javax.swing.plaf.basic.BasicComboBoxEditor;
import javax.swing.plaf.metal.MetalComboBoxEditor;
import javax.swing.plaf.metal.MetalTreeUI;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.AbstractDocument;
import javax.swing.text.AttributeSet;
import javax.swing.text.DefaultEditorKit;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Element;
import javax.swing.text.LabelView;
import javax.swing.text.PlainDocument;
import javax.swing.text.StyleContext;
import javax.swing.tree.DefaultTreeCellEditor;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.batik.dom.svg12.SVG12DOMImplementation;
import org.apache.batik.ext.awt.g2d.GraphicContext;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.apache.batik.svggen.SVGGeneratorContext;
import org.apache.batik.svggen.SVGGraphics2D;
import org.apache.fop.pdf.PDFInfo;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.apache.fop.svg.PDFGraphics2D;
import org.apache.xalan.templates.OutputProperties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jibx.runtime.IBindingFactory;
import org.jibx.runtime.impl.UnmarshallingContext;
import org.junit.runner.RunWith;
import org.openstreetmap.gui.jmapviewer.JMapViewer;
import plugins.map.MapDialog;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.getMinSelectableDate();
      jDayChooser0.setMinSelectableDate(date0);
      MapDialog mapDialog0 = new MapDialog();
      // Undeclared exception!
      try { 
        mapDialog0.getFreeMindMapController();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("plugins.map.MapDialog", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.controlDkShadow;
      jDayChooser0.setForeground(systemColor0);
      jDayChooser0.focusGained((FocusEvent) null);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, (-3342), (-1L), 214, (-3342), 'm', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setIgnoreRepaint(false);
      jDayChooser0.setDay((-663));
      assertEquals(1, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Vector<Object> vector0 = new Vector<Object>();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(vector0, vector0);
      ActionEvent actionEvent0 = new ActionEvent(defaultTableModel0, (-1494), "day", (-1234L), 1486);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.swing.table.DefaultTableModel cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMaxDayCharacters();
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 855, 855, (-3915), 35, '+');
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getMouseListeners();
      jDayChooser0.setDay(30);
      MenuElement[] menuElementArray0 = new MenuElement[5];
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem("day");
      menuElementArray0[0] = (MenuElement) jRadioButtonMenuItem0;
      jDayChooser0.getComponentPopupMenu();
      menuElementArray0[1] = (MenuElement) null;
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Icon icon0 = defaultTreeCellRenderer0.getDefaultClosedIcon();
      JRadioButtonMenuItem jRadioButtonMenuItem1 = new JRadioButtonMenuItem((String) null, icon0);
      menuElementArray0[2] = (MenuElement) jRadioButtonMenuItem1;
      JRadioButtonMenuItem jRadioButtonMenuItem2 = new JRadioButtonMenuItem((String) null, true);
      menuElementArray0[3] = (MenuElement) jRadioButtonMenuItem2;
      JMenuItem jMenuItem0 = new JMenuItem((String) null);
      menuElementArray0[4] = (MenuElement) jMenuItem0;
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 1371, 30, 35, 35, '+', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1901, 0L, 238, 4494, '`', 3);
      jDayChooser0.keyReleased(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.drawDays();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      PDFGraphics2D pDFGraphics2D0 = null;
      try {
        pDFGraphics2D0 = new PDFGraphics2D(pDFDocumentGraphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.batik.ext.awt.g2d.AbstractGraphics2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getInsets();
      jDayChooser0.setMonth(31);
      jDayChooser0.setMonth(0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JViewport jViewport0 = new JViewport();
      Rectangle rectangle0 = jViewport0.getViewRect();
      rectangle0.add((-1), 0);
      jDayChooser0.setBounds(rectangle0);
      jDayChooser0.setName(">d4[5[y");
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, (-393L), 0, 0, 'D');
      keyEvent0.setKeyCode(0);
      jDayChooser0.keyTyped(keyEvent0);
      jDayChooser0.getDayPanel();
      boolean boolean0 = jDayChooser0.isWeekOfYearVisible();
      assertFalse(boolean0);
      
      jDayChooser0.setMaxDayCharacters(0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MenuElement[] menuElementArray0 = new MenuElement[2];
      JPopupMenu jPopupMenu0 = new JPopupMenu();
      menuElementArray0[0] = (MenuElement) jPopupMenu0;
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem();
      menuElementArray0[1] = (MenuElement) jRadioButtonMenuItem0;
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MouseEvent mouseEvent0 = new MouseEvent(jRadioButtonMenuItem0, 0, 303L, 0, (-2216), (-2216), 1281, 1281, 1281, false, 0);
      menuSelectionManager0.processMouseEvent(mouseEvent0);
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 0, 303L, 0, 0, '8', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyTyped(menuKeyEvent0);
      SystemColor systemColor0 = SystemColor.text;
      jDayChooser0.setForeground(systemColor0);
      jDayChooser0.setAlwaysFireDayProperty(false);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.setMaxDayCharacters(1);
      jDayChooser1.getMaxDayCharacters();
      assertEquals(1, jDayChooser1.getMaxDayCharacters());
      
      jDayChooser0.keyTyped((KeyEvent) null);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      StyleContext styleContext0 = new StyleContext();
      String string0 = AbstractButton.MNEMONIC_CHANGED_PROPERTY;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 42, 42, 42, 42, 'l');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getMouseListeners();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(42);
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(28, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Font font0 = new Font("day", (-3915), (-3915));
      jDayChooser0.setFont(font0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-3901));
      focusEvent0.paramString();
      focusEvent0.setSource(jDayChooser0);
      focusEvent0.setSource("unknown type,permanent,opposite=null");
      jDayChooser0.doLayout();
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.maxSelectableDate = null;
      jDayChooser0.resetKeyboardActions();
      jDayChooser0.setEnabled(true);
      Date date0 = jDayChooser0.setMaxSelectableDate((Date) null);
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.setMinSelectableDate(date0);
      Color color0 = jDayChooser0.getWeekdayForeground();
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.setWeekdayForeground(color0);
      jDayChooser0.setSundayForeground(color0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(3);
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
      
      GraphicContext graphicContext0 = new GraphicContext();
      Color color0 = graphicContext0.getBackground();
      jDayChooser0.setSundayForeground(color0);
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.controlLtHighlight;
      jDayChooser0.setDay(36);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 36, 64800000L, 139, '!', '!');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMouseMotionListeners();
      jDayChooser0.setDayBordersVisible(false);
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.setMaxSelectableDate(date0);
      jDayChooser0.getDayPanel();
      Locale locale0 = new Locale("day");
      locale0.hasExtensions();
      jDayChooser0.setLocale(locale0);
      jDayChooser0.drawWeeks();
      jDayChooser0.getMaxDayCharacters();
      DefaultEditorKit.InsertContentAction defaultEditorKit_InsertContentAction0 = new DefaultEditorKit.InsertContentAction();
      JToggleButton jToggleButton0 = new JToggleButton(defaultEditorKit_InsertContentAction0);
      FocusEvent focusEvent0 = new FocusEvent(jToggleButton0, 10149);
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.getDay();
      jDayChooser0.setMinSelectableDate(date0);
      assertFalse(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.menuText;
      jDayChooser0.setWeekdayForeground(systemColor0);
      jDayChooser0.setMonth((-2375));
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      StyleContext styleContext0 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      JMapViewer jMapViewer0 = new JMapViewer();
      Locale locale0 = new Locale("day");
      jDayChooser0.setLocale(locale0);
      jDayChooser0.drawWeeks();
      jDayChooser0.getMaxDayCharacters();
      DefaultEditorKit.InsertContentAction defaultEditorKit_InsertContentAction0 = new DefaultEditorKit.InsertContentAction();
      jDayChooser0.setFocusTraversalKeysEnabled(true);
      JToggleButton jToggleButton0 = new JToggleButton(defaultEditorKit_InsertContentAction0);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 17);
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      int int1 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int1);
      
      jDayChooser0.getDaysInMonth();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDayBordersVisible(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-269), 0L, 2166, (-269), 'q');
      keyEvent0.setSource(jDayChooser0);
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isFocusOwner();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-2997), 400L, (-2997), (-2997), 'p');
      jDayChooser0.keyReleased(keyEvent0);
      jDayChooser0.drawDays();
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.controlLtHighlight;
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      jDayChooser0.removeHierarchyBoundsListener((HierarchyBoundsListener) null);
      jDayChooser0.setDay(139);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 139, 139, 37, 37, '!');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getSundayForeground();
      assertEquals(27, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      jDayChooser0.updateUI();
      jDayChooser0.addContainerListener((ContainerListener) null);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-631));
      focusEvent0.paramString();
      focusEvent0.paramString();
      jDayChooser0.focusLost(focusEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMouseMotionListeners();
      jDayChooser0.setDayBordersVisible(false);
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.setMaxSelectableDate(date0);
      JPanel jPanel0 = jDayChooser0.getDayPanel();
      Locale locale0 = new Locale("day");
      jDayChooser0.setLocale(locale0);
      jDayChooser0.drawWeeks();
      jDayChooser0.getMaxDayCharacters();
      DefaultEditorKit.InsertContentAction defaultEditorKit_InsertContentAction0 = new DefaultEditorKit.InsertContentAction();
      JToggleButton jToggleButton0 = new JToggleButton(defaultEditorKit_InsertContentAction0);
      FocusEvent focusEvent0 = new FocusEvent(jPanel0, 0);
      jDayChooser0.focusGained(focusEvent0);
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-88);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 3280, 144L, (-101), 455, 'w');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isRequestFocusEnabled();
      Color color0 = Color.GREEN;
      jDayChooser0.setWeekdayForeground(color0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      StyleContext styleContext0 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      Element element0 = defaultStyledDocument0.getCharacterElement(254);
      StyleContext.registerStaticAttributeKey(styleContext0);
      LabelView labelView0 = new LabelView(element0);
      Color color0 = labelView0.getForeground();
      jDayChooser0.setForeground(color0);
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      jDayChooser0.setMaxDayCharacters((-1));
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 254, true);
      jDayChooser0.focusGained(focusEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 3080);
      focusEvent0.paramString();
      focusEvent0.setSource(jDayChooser0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      delayQueue0.poll();
      focusEvent0.setSource((Object) null);
      jDayChooser0.doLayout();
      DefaultListCellRenderer defaultListCellRenderer0 = new DefaultListCellRenderer();
      FocusEvent focusEvent1 = new FocusEvent(defaultListCellRenderer0, 3080);
      jDayChooser0.focusLost(focusEvent1);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.setWeekOfYearVisible(true);
      int int0 = 17;
      jDayChooser0.setMaxDayCharacters(2);
      PlainDocument plainDocument0 = null;
      try {
        plainDocument0 = new PlainDocument((AbstractDocument.Content) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setFocusTraversalKeysEnabled(false);
      jDayChooser0.drawWeeks();
      jDayChooser0.weekPanel = null;
      jDayChooser0.getPreferredSize();
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, (-587), (-587), (-2487), (-2487), ',', (MenuElement[]) null, menuSelectionManager0);
      menuKeyEvent0.setKeyChar('S');
      menuKeyEvent0.getMenuSelectionManager();
      jDayChooser0.keyTyped(menuKeyEvent0);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setFocus();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      stringArray0[4] = "day";
      stringArray0[5] = "day";
      stringArray0[6] = "day";
      stringArray0[7] = "day";
      stringArray0[8] = "{]S~C<Bv";
      UnmarshallingContext unmarshallingContext0 = null;
      try {
        unmarshallingContext0 = new UnmarshallingContext(0, stringArray0, stringArray0, stringArray0, stringArray0, (IBindingFactory) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = Color.DARK_GRAY;
      jDayChooser0.getDaysInMonth();
      char char0 = '?';
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 28, 28, 28, 28, '?');
      jDayChooser0.keyReleased(keyEvent0);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.drawDays();
      assertEquals(31, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.ITALIAN;
      jDayChooser0.setLocale(locale0);
      ColorUIResource colorUIResource0 = (ColorUIResource)jDayChooser0.oldDayBackgroundColor;
      jDayChooser0.setForeground(colorUIResource0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1703, 1703, 23, 32, 'v');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.keyTyped(keyEvent0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setYear((-1830));
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.dayBordersVisible = false;
      jDayChooser0.transferFocusBackward();
      jDayChooser0.setDecorationBackgroundVisible(false);
      jDayChooser0.firePropertyChange("day", (short)2585, (short)2585);
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.setDayBordersVisible(false);
      Border border0 = LineBorder.createGrayLineBorder();
      jDayChooser0.setBorder(border0);
      jDayChooser0.getDayPanel();
      jDayChooser0.drawDays();
      int int0 = 0;
      jDayChooser0.setYear(0);
      jDayChooser0.isDecorationBackgroundVisible();
      JFrame jFrame0 = null;
      try {
        jFrame0 = new JFrame();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.addFocusListener((FocusListener) null);
      Color color0 = Color.green;
      color0.getColorSpace();
      jDayChooser0.setSundayForeground(color0);
      jDayChooser0.getSundayForeground();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 42, 0L, 0, 42, ':');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getMouseListeners();
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = Color.white;
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.getMinSelectableDate();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getMaxSelectableDate();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.keyReleased((KeyEvent) null);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.weeks = null;
      SystemColor systemColor0 = SystemColor.controlLtHighlight;
      Color.getColor("T7");
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.controlLtHighlight;
      Color color0 = new Color(0.0F, 0.0F, 0.0F, 0.0F);
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-3901));
      focusEvent0.paramString();
      focusEvent0.setSource(jDayChooser0);
      focusEvent0.setSource("unknown type,permanent,opposite=null");
      jDayChooser0.doLayout();
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.maxSelectableDate = null;
      jDayChooser0.resetKeyboardActions();
      jDayChooser0.setEnabled(true);
      Date date0 = jDayChooser0.setMaxSelectableDate((Date) null);
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.setMinSelectableDate(date0);
      Color color0 = Color.gray;
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.setWeekdayForeground(color0);
      jDayChooser0.setSundayForeground(color0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setIgnoreRepaint(false);
      // Undeclared exception!
      try { 
        jDayChooser0.setCalendar((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters((-2446));
      jDayChooser0.setRequestFocusEnabled(true);
      jDayChooser0.getPropertyChangeListeners("G4F!mEU");
      jDayChooser0.initDecorations();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      MetalTreeUI metalTreeUI0 = new MetalTreeUI();
      metalTreeUI0.getCollapsedIcon();
      jDayChooser_DecoratorButton0.setPressedIcon((Icon) null);
      jDayChooser_DecoratorButton0.getCursor();
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.getLocale();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "G4F!mEU";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setWeekdayForeground((Color) null);
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 963, "day", 963);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMinSelectableDate();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-1049), true, jDayChooser0);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.updateUI();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 3, 3, 2930, 3, 'W');
      jDayChooser0.keyTyped(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      jDayChooser0.putClientProperty(defaultTableModel0, "day");
      jDayChooser0.setDay((-968));
      jDayChooser0.keyTyped((KeyEvent) null);
      assertEquals(1, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = Color.BLACK;
      jDayChooser0.setBackground(color0);
      BasicComboBoxEditor.UIResource basicComboBoxEditor_UIResource0 = new BasicComboBoxEditor.UIResource();
      basicComboBoxEditor_UIResource0.removeActionListener(jDayChooser0);
      jDayChooser0.removeFocusListener(basicComboBoxEditor_UIResource0);
      jDayChooser0.getHierarchyBoundsListeners();
      jDayChooser0.setYear(8);
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setDecorationBackgroundVisible(false);
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser1 = jYearChooser0.dayChooser;
      BasicTOCNavigatorUI basicTOCNavigatorUI0 = null;
      try {
        basicTOCNavigatorUI0 = new BasicTOCNavigatorUI((JHelpTOCNavigator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.help.plaf.basic.BasicTOCNavigatorUI", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "I#^RGdV`B9wB");
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = MapView.standardNodeTextColor;
      jDayChooser0.setForeground((Color) null);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.init();
      int int0 = 252;
      int int1 = 0;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(252, 252, 0);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.setMaxDayCharacters(252);
      JEditorPane jEditorPane0 = null;
      try {
        jEditorPane0 = new JEditorPane("");
        fail("Expecting exception: MalformedURLException");
      
      } catch(Throwable e) {
         //
         // no protocol: 
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isPaintingTile();
      jDayChooser0.setSize(368, 63704);
      Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.setMaxDayCharacters(63704);
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.transferFocus();
      jDayChooser_DecoratorButton0.isFocusable();
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jDayChooser_DecoratorButton0, 1733, 368, 0, 0, 'b', 439);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.initDecorations();
      jDayChooser0.getSundayForeground();
      java.sql.Date date0 = new java.sql.Date(3155695200000L);
      LocalDate localDate0 = date0.toLocalDate();
      java.sql.Date date1 = java.sql.Date.valueOf(localDate0);
      jDayChooser0.setMinSelectableDate(date1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      jDayChooser0.updateUI();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      OutputProperties outputProperties0 = new OutputProperties();
      SVGGeneratorContext sVGGeneratorContext0 = SVGGeneratorContext.createDefault(outputProperties0);
      jDayChooser_DecoratorButton0.firePropertyChange("", '=', '=');
      SVGGraphics2D sVGGraphics2D0 = null;
      try {
        sVGGraphics2D0 = new SVGGraphics2D(sVGGeneratorContext0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ElemTemplateElement error: Function not supported!
         //
         verifyException("org.apache.xalan.templates.ElemTemplateElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getVisibleRect();
      jDayChooser0.setDay(210);
      String[] stringArray0 = new String[1];
      MetalComboBoxEditor metalComboBoxEditor0 = new MetalComboBoxEditor();
      Locale locale0 = Locale.PRC;
      MessageFormat messageFormat0 = new MessageFormat("day", locale0);
      JFormattedTextField jFormattedTextField0 = new JFormattedTextField((Format) messageFormat0);
      FocusEvent focusEvent0 = new FocusEvent(jFormattedTextField0, 0, false, jFormattedTextField0);
      metalComboBoxEditor0.focusGained(focusEvent0);
      metalComboBoxEditor0.setItem(jDayChooser0);
      jDayChooser0.removeFocusListener(metalComboBoxEditor0);
      stringArray0[0] = "}NMB3B.R.k";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-560), 6, 6);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      jDayChooser0.setMinSelectableDate(date0);
      int int0 = 149;
      long long0 = 100L;
      int int1 = 0;
      int int2 = 99;
      char char0 = ';';
      MenuElement[] menuElementArray0 = new MenuElement[9];
      JMenuBar jMenuBar0 = new JMenuBar();
      // Undeclared exception!
      try { 
        jMenuBar0.getHelpMenu();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // getHelpMenu() not yet implemented.
         //
         verifyException("javax.swing.JMenuBar", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      jDayChooser0.removeAncestorListener(ancestorListener0);
      jDayChooser0.getMouseMotionListeners();
      jDayChooser0.firePropertyChange("", 0.0, 0.0);
      jDayChooser0.getAutoscrolls();
      JMonthChooser jMonthChooser0 = null;
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      jDayChooser0.firePropertyChange("", (byte)21, (byte)86);
      // Undeclared exception!
      try { 
        jDayChooser0.add((Component) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      jDayChooser0.setAlwaysFireDayProperty(true);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      jDayChooser0.setDecorationBordersVisible(false);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 238, 529L, 238, 31, 'l');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getDay();
      boolean boolean0 = true;
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 14, true, jDayChooser0);
      focusEvent0.paramString();
      Component component0 = focusEvent0.getOppositeComponent();
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.getMinSelectableDate();
      KeyEvent keyEvent1 = null;
      try {
        keyEvent1 = new KeyEvent(component0, 31, 0L, (-2930), (-1491), 'V', 238);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.dayBordersVisible = true;
      String string0 = null;
      jDayChooser0.setDecorationBackgroundVisible(false);
      jDayChooser0.firePropertyChange((String) null, (short)2585, (short)2585);
      jDayChooser0.setYearChooser((JYearChooser) null);
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.setDayBordersVisible(false);
      FocusEvent focusEvent0 = null;
      try {
        focusEvent0 = new FocusEvent((Component) null, 10, false, jDayChooser0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMouseMotionListeners();
      jDayChooser0.setDayBordersVisible(false);
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.setMaxSelectableDate(date0);
      jDayChooser0.getDayPanel();
      Locale locale0 = new Locale("day");
      jDayChooser0.setLocale(locale0);
      jDayChooser0.drawWeeks();
      jDayChooser0.getMaxDayCharacters();
      DefaultEditorKit.InsertContentAction defaultEditorKit_InsertContentAction0 = new DefaultEditorKit.InsertContentAction();
      JToggleButton jToggleButton0 = new JToggleButton(defaultEditorKit_InsertContentAction0);
      FocusEvent focusEvent0 = new FocusEvent(jToggleButton0, 10149);
      jDayChooser0.focusGained(focusEvent0);
      int int0 = jDayChooser0.getDay();
      assertFalse(jDayChooser0.isDayBordersVisible());
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 928, (-3565L), 796, 928, ' ');
      jDayChooser0.keyReleased(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMouseMotionListeners();
      jDayChooser0.setDayBordersVisible(false);
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.setMaxSelectableDate(date0);
      jDayChooser0.getDayPanel();
      Locale locale0 = new Locale("day");
      locale0.hasExtensions();
      jDayChooser0.setLocale(locale0);
      jDayChooser0.drawWeeks();
      jDayChooser0.getMaxDayCharacters();
      DefaultEditorKit.InsertContentAction defaultEditorKit_InsertContentAction0 = new DefaultEditorKit.InsertContentAction();
      ActionEvent actionEvent0 = new ActionEvent(date0, 392, "The resource [ {0} ] could not load: {1} \n {2} \t {3}");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.Date cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setFocusTraversalKeysEnabled(false);
      jDayChooser0.drawWeeks();
      jDayChooser0.weekPanel = null;
      jDayChooser0.getPreferredSize();
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      // Undeclared exception!
      try { 
        jDayChooser1.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMouseListeners();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-3865), (-2439), 0, 0, '-');
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.keyPressed(keyEvent0);
      assertEquals(14, jDayChooser1.getDay());
      
      jDayChooser0.getMouseListeners();
      jDayChooser1.setDay(29);
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getSelectedDay();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isPaintingTile();
      jDayChooser0.setSize(368, 63704);
      Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setSelectableDateRange(date0, date0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.resetKeyboardActions();
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser2.setEnabled(false);
      Date date1 = jDayChooser1.setMaxSelectableDate(date0);
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser1.setMinSelectableDate(date1);
      Color color0 = jDayChooser0.getWeekdayForeground();
      jDayChooser2.isWeekOfYearVisible();
      JDayChooser jDayChooser3 = new JDayChooser(false);
      jDayChooser3.isDecorationBordersVisible();
      jDayChooser1.setWeekdayForeground(color0);
      jDayChooser2.setSundayForeground(color0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      stringArray0[4] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.activeCaptionText;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 12, 12, 1940, 1940, 'p', 3);
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-3901));
      focusEvent0.paramString();
      focusEvent0.setSource(jDayChooser0);
      focusEvent0.setSource("unknown type,permanent,opposite=null");
      jDayChooser0.doLayout();
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.maxSelectableDate = null;
      jDayChooser0.setWeekOfYearVisible(false);
      int int0 = 17;
      // Undeclared exception!
      try { 
        jDayChooser0.setMaxDayCharacters(17);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setWeekOfYearVisible(false);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-1921));
      focusEvent0.getOppositeComponent();
      jDayChooser0.focusGained(focusEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.controlLtHighlight;
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      jDayChooser0.removeHierarchyBoundsListener((HierarchyBoundsListener) null);
      jDayChooser0.setDay(139);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      jDayChooser0.setMonth(116);
      jDayChooser0.setMaxDayCharacters((-520));
      assertEquals(30, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters((-2446));
      jDayChooser0.setRequestFocusEnabled(true);
      jDayChooser0.getPropertyChangeListeners("G4F!mEU");
      jDayChooser0.initDecorations();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      MetalTreeUI metalTreeUI0 = new MetalTreeUI();
      jDayChooser_DecoratorButton0.getHorizontalTextPosition();
      metalTreeUI0.getCollapsedIcon();
      jDayChooser_DecoratorButton0.setPressedIcon((Icon) null);
      jDayChooser_DecoratorButton0.getCursor();
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.getLocale();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "G4F!mEU";
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.setMonth(11);
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      Time time0 = new Time((-467L));
      jDayChooser0.setSelectableDateRange(date0, time0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.ITALIAN;
      Locale locale1 = new Locale("day", "day", "day");
      locale0.getDisplayVariant(locale1);
      jDayChooser0.setLocale(locale0);
      ColorUIResource colorUIResource0 = (ColorUIResource)jDayChooser0.oldDayBackgroundColor;
      jDayChooser0.setForeground(colorUIResource0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "West");
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1703, 1703, 23, 32, 'v');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.keyTyped(keyEvent0);
      jDayChooser0.setMonth(28);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.getPreferredSize();
      jDayChooser0.drawDays();
      jDayChooser0.getSundayForeground();
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-175), (-175), 478, 478, 'q');
      jDayChooser0.keyPressed(keyEvent0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "#={B<l\"I";
      stringArray0[4] = "day";
      stringArray0[5] = "day";
      stringArray0[6] = "WyFnjilf$24\"s";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = 2;
      int int1 = 0;
      int int2 = (-1224);
      boolean boolean0 = true;
      int int3 = 420;
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(420);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      int int0 = 3;
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 3, false);
      focusEvent0.paramString();
      focusEvent0.setSource(jDayChooser0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      jDayChooser0.addAncestorListener((AncestorListener) null);
      focusEvent0.setSource(mockGregorianCalendar0);
      jDayChooser0.doLayout();
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.setWeekOfYearVisible(true);
      int int1 = 1809;
      jDayChooser0.setMaxDayCharacters(1809);
      PlainDocument plainDocument0 = null;
      try {
        plainDocument0 = new PlainDocument((AbstractDocument.Content) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setEnabled(true);
      PDFInfo pDFInfo0 = new PDFInfo();
      pDFInfo0.getCreationDate();
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = jDayChooser0.sundayForeground;
      jDayChooser0.setWeekdayForeground(color0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.window;
      ActionEvent actionEvent0 = new ActionEvent(systemColor0, 3, " \rpx;I{*jFBdWK", 3, 259);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.awt.SystemColor cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 238, 529L, 238, 31, 'l');
      keyEvent0.consume();
      jDayChooser0.keyPressed(keyEvent0);
      Locale locale0 = new Locale("day", "day", "skewX");
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setFocus();
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = new Color(1532, true);
      jDayChooser0.setSundayForeground(color0);
      int int0 = jDayChooser0.getDaysInMonth();
      assertEquals(28, int0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      boolean boolean0 = jDayChooser0.isWeekOfYearVisible();
      assertFalse(boolean0);
      
      jDayChooser0.getMaxDayCharacters();
      JDayChooser jDayChooser1 = new JDayChooser();
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)jDayChooser1.calendar;
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getHeight();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 0, 36, 36, ']');
      jDayChooser0.keyTyped(keyEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.getDaysInMonth();
      int int0 = 2192;
      char char0 = '?';
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 28, 28, 2192, 2192, '?');
      jDayChooser0.keyReleased(keyEvent0);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.addListeners(44);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      JTree jTree0 = new JTree();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      DefaultTreeCellEditor defaultTreeCellEditor0 = new DefaultTreeCellEditor(jTree0, defaultTreeCellRenderer0);
      defaultTreeCellEditor0.getBorderSelectionColor();
      jDayChooser1.setSundayForeground((Color) null);
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertTrue(jDayChooser1.isWeekOfYearVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBordersVisible(true);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      AttributeSet attributeSet0 = jTextPane0.getParagraphAttributes();
      Font font0 = defaultStyledDocument0.getFont(attributeSet0);
      jDayChooser0.setFont(font0);
      jDayChooser0.getSelectedDay();
      JMonthChooser jMonthChooser0 = new JMonthChooser(true);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      DebugGraphics debugGraphics0 = new DebugGraphics(pDFDocumentGraphics2D0);
      DebugGraphics.logStream();
      jDayChooser_DecoratorButton0.paint(debugGraphics0);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 304, 304, 11, 304, '_');
      KeyEvent.getExtendedKeyCodeForChar(641);
      jDayChooser0.keyReleased(keyEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.repaint(2798L);
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.drawWeeks();
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      StyleContext styleContext0 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      Element element0 = defaultStyledDocument0.getCharacterElement(254);
      StyleContext.registerStaticAttributeKey(styleContext0);
      LabelView labelView0 = new LabelView(element0);
      Color color0 = labelView0.getForeground();
      jDayChooser0.setForeground(color0);
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setMaxDayCharacters((-1));
      jDayChooser0.getDecorationBackgroundColor();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SVG12DOMImplementation sVG12DOMImplementation0 = new SVG12DOMImplementation();
      sVG12DOMImplementation0.getLocale();
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getVisibleRect();
      jDayChooser0.setDay(0);
      MetalComboBoxEditor metalComboBoxEditor0 = new MetalComboBoxEditor();
      Locale locale0 = Locale.PRC;
      MessageFormat messageFormat0 = new MessageFormat("day", locale0);
      JFormattedTextField jFormattedTextField0 = new JFormattedTextField((Format) messageFormat0);
      FocusEvent focusEvent0 = new FocusEvent(jFormattedTextField0, 766, true, jDayChooser0);
      Vector<MockCalendar> vector0 = new Vector<MockCalendar>();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(vector0, vector0);
      metalComboBoxEditor0.setItem(defaultTableModel0);
      jDayChooser0.removeFocusListener(metalComboBoxEditor0);
      // Undeclared exception!
      try { 
        JDayChooser.main((String[]) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.updateUI();
      int int0 = (-293);
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 33554432, "day", (-293));
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay(46);
      jDayChooser0.setMonth(46);
      jDayChooser0.updateUI();
      assertEquals(30, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners((-1090));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.addListeners(23);
      jDayChooser0.focusLost((FocusEvent) null);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.dayBordersVisible = true;
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.firePropertyChange("day", (short)2585, (short)2585);
      jDayChooser0.setYearChooser((JYearChooser) null);
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.setDayBordersVisible(false);
      FocusEvent focusEvent0 = null;
      try {
        focusEvent0 = new FocusEvent((Component) null, 10, false, jDayChooser0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = Color.red;
      jDayChooser0.setIgnoreRepaint(true);
      Color.getColor((String) null);
      jDayChooser0.removeAll();
      jDayChooser0.oldDayBackgroundColor = color0;
      Color color1 = jDayChooser0.getDecorationBackgroundColor();
      assertEquals(238, color1.getBlue());
      
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 9999);
      jDayChooser0.focusLost(focusEvent0);
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 9999, 2325L, 9999, 9999, ';', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyReleased(menuKeyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String[] stringArray0 = new String[11];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.FLOW_PARAGRAPH;
      ActionEvent actionEvent0 = new ActionEvent(gVTAttributedCharacterIterator_TextAttribute0, (int) gVTAttributedCharacterIterator_TextAttribute0.ADJUST_SPACING, "day");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = Color.red;
      jDayChooser0.setSundayForeground(color0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-6357), (-6357), (-6357), (-6357), 'y');
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getMouseListeners();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay((-6357));
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(1, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.isDecorationBackgroundVisible();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 124, 0L, 124, 379, '&');
      jDayChooser0.keyReleased(keyEvent0);
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(238, color0.getBlue());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.ITALIAN;
      jDayChooser0.setLocale(locale0);
      ColorUIResource colorUIResource0 = (ColorUIResource)jDayChooser0.oldDayBackgroundColor;
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem("day", true);
      KeyEvent keyEvent0 = new KeyEvent(jRadioButtonMenuItem0, 0, 0, 0, 0, '9');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getMouseListeners();
      jDayChooser0.keyPressed(keyEvent0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      stringArray0[4] = "day";
      stringArray0[5] = "day";
      stringArray0[6] = "day";
      stringArray0[7] = "day";
      stringArray0[8] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.transferFocusBackward();
      jDayChooser0.setMinSelectableDate((Date) null);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getFont();
      jDayChooser0.setFont((Font) null);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }
}
