/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 09:37:05 GMT 2018
 */

package org.la4j.matrix.dense;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferOverflowException;
import java.text.NumberFormat;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic1DMatrix;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Basic1DMatrix_ESTest extends Basic1DMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      byte[] byteArray0 = basic1DMatrix0.toBinary();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)9;
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode Basic1DMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Basic1DMatrix.diagonal(0, 100.0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)104;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-70);
      byteArray0[8] = (byte) (-91);
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode Basic1DMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      int int0 = NumberFormat.INTEGER_FIELD;
      MockRandom mockRandom1 = new MockRandom();
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.diagonal(1, 1);
      // Undeclared exception!
      try { 
        basic1DMatrix0.get(1, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from1DArray(0, 0, doubleArray0);
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.block(basic1DMatrix0, basic1DMatrix0, basic1DMatrix0, basic1DMatrix0);
      basic1DMatrix1.toString();
      int int1 = (-4298);
      basic1DMatrix1.minInColumn((-4298));
      Basic1DMatrix basic1DMatrix2 = Basic1DMatrix.unit(0, 9);
      basic1DMatrix0.columnMajorIterator();
      basic1DMatrix2.divide(0.0);
      basic1DMatrix2.equals((Matrix) basic1DMatrix0, 3452.707);
      // Undeclared exception!
      try { 
        basic1DMatrix0.toBinary();
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(170L);
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.random(0, 7, mockRandom0);
      Matrix matrix0 = basic1DMatrix0.copyOfShape(0, 8);
      assertEquals(0, matrix0.rows());
      assertEquals(8, matrix0.columns());
      assertEquals(7, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(170L);
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.random(0, 7, mockRandom0);
      assertEquals(0, basic1DMatrix0.rows());
      
      basic1DMatrix0.swapColumns(7, (-1660));
      assertEquals(7, basic1DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        basic1DMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.DenseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      mockRandom0.nextInt(2345);
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.randomSymmetric(6, mockRandom0);
      Matrix matrix0 = basic1DMatrix0.shuffle();
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix0, matrix0, matrix0, basic1DMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '7' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix(0, 0);
      basic1DMatrix0.swapColumns(0, 0);
      assertEquals(0, basic1DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = 1979.749018350278;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-262.9124623714);
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 0.0;
      doubleArray1[8] = (-1.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 0.0;
      doubleArray0[1] = doubleArray2;
      // Undeclared exception!
      try { 
        Basic1DMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.random(0, 0, mockRandom0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 1.0;
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.from1DArray(0, 0, doubleArray0);
      assertTrue(basic1DMatrix1.equals((Object)basic1DMatrix0));
      
      double[][] doubleArray1 = new double[2][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      Basic1DMatrix basic1DMatrix2 = Basic1DMatrix.from2DArray(doubleArray1);
      assertEquals(2, basic1DMatrix2.columns());
      assertEquals(2, basic1DMatrix2.rows());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.zero(0, 0);
      basic1DMatrix0.setAll(0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.random(0, 1503, mockRandom0);
      Matrix matrix0 = basic1DMatrix0.copyOfShape(6215, 8);
      assertEquals(8, matrix0.columns());
      assertEquals(6215, matrix0.rows());
      assertEquals(1503, basic1DMatrix0.columns());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1503;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = (double) 1503;
      doubleArray0[4] = (-2949.750934243);
      doubleArray0[5] = (double) 6215;
      doubleArray0[6] = (double) 1503;
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.from1DArray(4, 6215, doubleArray0);
      assertEquals(6215, basic1DMatrix1.columns());
      assertEquals(4, basic1DMatrix1.rows());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix(0, 0);
      basic1DMatrix0.swapColumns(0, 907);
      assertEquals(0, basic1DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(0);
      DenseMatrix.block(basic1DMatrix0, basic1DMatrix0, basic1DMatrix0, basic1DMatrix0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)0).when(vectorAccumulator0).accumulate();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = basic1DMatrix0.transformRow(0, vectorFunction0);
      basic1DMatrix0.foldColumn((-2670), vectorAccumulator0);
      basic1DMatrix0.copyOfColumns(0);
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.constant(0, 2952, 647.944076);
      basic1DMatrix1.swapColumns(0, 2952);
      int int0 = 6217;
      matrix0.swapColumns(959, 6217);
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromCSV("4kt[\n!cJ-g!");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.fromCSV("");
      basic1DMatrix0.toArray();
      assertEquals(0, basic1DMatrix0.columns());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      Vector vector0 = basic1DMatrix0.getRow((byte)0);
      assertEquals(0, vector0.length());
      
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)122;
      byteArray0[6] = (byte)92;
      Matrix matrix0 = basic1DMatrix0.copyOfShape((byte)92, (byte)122);
      assertEquals(122, matrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(92, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.fromCSV("");
      basic1DMatrix0.toArray();
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte2 = (byte)79;
      Basic1DMatrix.fromBinary(byteArray0);
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromMatrixMarket("LEAST_SQUARES");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      int int0 = NumberFormat.INTEGER_FIELD;
      int int1 = 1;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.randomSymmetric(1, mockRandom0);
      // Undeclared exception!
      try { 
        basic1DMatrix0.swapRows(0, 416);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 416
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from1DArray(0, 0, doubleArray0);
      int int1 = 9;
      int int2 = 1355;
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.unit(0, 1355);
      double double0 = 3452.707;
      basic1DMatrix1.columnMajorIterator();
      Matrix matrix0 = basic1DMatrix0.divide(0.0);
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix0, matrix0, basic1DMatrix1, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      mockRandom0.nextInt(2345);
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.randomSymmetric(6, mockRandom0);
      SparseMatrix sparseMatrix0 = SparseMatrix.randomSymmetric(2345, 0.0, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix0, sparseMatrix0, basic1DMatrix0, basic1DMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 6;
      long long0 = 1L;
      MockRandom mockRandom0 = new MockRandom(1L);
      int int1 = 2398;
      int int2 = NumberFormat.FRACTION_FIELD;
      int int3 = 1;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.constant(411, 1, 2.0);
      Matrix matrix0 = basic1DMatrix0.shuffle();
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix0, basic1DMatrix0, matrix0, matrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1644
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      int int0 = NumberFormat.FRACTION_FIELD;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.randomSymmetric(1, mockRandom0);
      Matrix matrix0 = basic1DMatrix0.copy();
      Basic1DMatrix.block(basic1DMatrix0, basic1DMatrix0, matrix0, matrix0);
      int int1 = 1;
      basic1DMatrix0.blankOfShape(7, 1);
      MockRandom mockRandom1 = new MockRandom();
      Basic1DMatrix.unit(9987, 1);
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromMatrixMarket("Sides of blocks are incompatible!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      int int0 = NumberFormat.INTEGER_FIELD;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.randomSymmetric(1, mockRandom0);
      basic1DMatrix0.maxInRow(0);
      Matrix matrix0 = basic1DMatrix0.copy();
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.constant(0, 0, 0.0);
      Matrix matrix1 = matrix0.removeLastColumn();
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(matrix1, basic1DMatrix0, basic1DMatrix1, basic1DMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      int int0 = NumberFormat.INTEGER_FIELD;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.randomSymmetric(3, mockRandom0);
      Matrix matrix0 = basic1DMatrix0.blankOfColumns(0);
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix0, matrix0, basic1DMatrix0, matrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '4' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      int int0 = NumberFormat.INTEGER_FIELD;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.randomSymmetric(1, mockRandom0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 0;
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = 0.0;
      Basic1DMatrix.from1DArray(1, 1, doubleArray0);
      basic1DMatrix0.swapRows(1, 1);
      // Undeclared exception!
      try { 
        basic1DMatrix0.get(1456, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1456' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      int int0 = NumberFormat.INTEGER_FIELD;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.zero(0, 0);
      basic1DMatrix0.swapRows(0, 416);
      basic1DMatrix0.toArray();
      // Undeclared exception!
      try { 
        basic1DMatrix0.get(0, 4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      int int0 = NumberFormat.INTEGER_FIELD;
      mockRandom0.longs((long) 0);
      mockRandom0.nextDouble();
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.randomSymmetric(3, mockRandom0);
      Matrix matrix0 = basic1DMatrix0.blankOfColumns(0);
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(matrix0, basic1DMatrix0, matrix0, basic1DMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '4' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }
}
