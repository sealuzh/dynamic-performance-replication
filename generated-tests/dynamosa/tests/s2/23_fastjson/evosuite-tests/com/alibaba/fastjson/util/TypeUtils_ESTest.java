/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 11:17:39 GMT 2019
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONField;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.EnumDeserializer;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.NumberDeserializer;
import com.alibaba.fastjson.parser.deserializer.ObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.OptionalCodec;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer;
import com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.parser.deserializer.TimeDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.PageAttributes;
import java.awt.Point;
import java.awt.RenderingHints;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.Date;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLWarning;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.ChoiceFormat;
import java.text.Collator;
import java.text.DecimalFormatSymbols;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.time.Instant;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.util.BitSet;
import java.util.Calendar;
import java.util.Collection;
import java.util.Currency;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.TreeMap;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.LongBinaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower(")FZzex5g}z3aIix&xd");
      assertEquals(5395173625857355504L, long0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<SQLDataException> class0 = SQLDataException.class;
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      linkedHashMap0.put(".-Mbkq7%NVHA%kE", class1);
      Class<EnumDeserializer> class2 = EnumDeserializer.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) linkedHashMap0, class2, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, public com.alibaba.fastjson.parser.deserializer.EnumDeserializer(java.lang.Class<?>)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<NoSuchFieldException> class0 = NoSuchFieldException.class;
      Class<ParameterizedTypeImpl> class1 = ParameterizedTypeImpl.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(jSONType0).builder();
      Class<?> class2 = JavaBeanInfo.getBuilderClass(class0, jSONType0);
      ObjectDeserializer objectDeserializer0 = parserConfig0.getDeserializer((Type) class2);
      assertEquals(12, objectDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("0zHcwC");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Class class1 = (Class)TypeUtils.unwrapOptional(class0);
      assertFalse(class1.isArray());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("com.alibaba.fastjson.serializer.AwtCodec", (ClassLoader) null);
      assertFalse(class0.isInterface());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("java.beans.Transient");
      assertTrue(class0.isInterface());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      JSONField jSONField0 = TypeUtils.getSuperMethodAnnotation(class0, (Method) null);
      assertNull(jSONField0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      assertFalse(class1.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Field[] fieldArray0 = new Field[0];
      Field field0 = TypeUtils.getField(class0, "serialVersionUID", fieldArray0);
      assertNotNull(field0);
      assertEquals("private static final long java.lang.Number.serialVersionUID", field0.toString());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      assertTrue(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64("0\"C\"!<n`ger");
      assertEquals(864798478355595029L, long0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<IllegalAccessError> class0 = IllegalAccessError.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, (Map<String, String>) null);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      AtomicInteger atomicInteger0 = new AtomicInteger(1);
      atomicInteger0.getAndDecrement();
      Short short0 = TypeUtils.castToShort(atomicInteger0);
      assertEquals((short)0, (short)short0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Float float0 = TypeUtils.castToFloat(integer0);
      assertEquals(0.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = TypeUtils.castToBytes("");
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Type type0 = TypeUtils.unwrapOptional((Type) null);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      boolean boolean0 = TypeUtils.isTransient((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Type[] typeArray0 = new Type[2];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[1], typeArray0[0]);
      boolean boolean0 = TypeUtils.isHibernateInitialized(parameterizedTypeImpl0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getSuperMethodAnnotation((Class<?>) null, (Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      // Undeclared exception!
      try { 
        TypeUtils.getSuperMethodAnnotation(class0, (Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters((Class) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      Type type1 = TypeUtils.getGenericParamType(type0);
      assertSame(type1, type0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<InterruptedException> class0 = InterruptedException.class;
      // Undeclared exception!
      try { 
        TypeUtils.getField(class0, (String) null, (Field[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<InternalError> class0 = InternalError.class;
      Field[] fieldArray0 = new Field[4];
      // Undeclared exception!
      try { 
        TypeUtils.getField(class0, "", fieldArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Field[] fieldArray0 = new Field[5];
      // Undeclared exception!
      try { 
        TypeUtils.getField((Class<?>) null, "B{)>\"R:&jPA[9|{9!{i", fieldArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      Field[] fieldArray0 = new Field[3];
      // Undeclared exception!
      try { 
        TypeUtils.getField(class0, "}1G1I+i", fieldArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<?> class0 = TypeUtils.getClassFromMapping("");
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class0);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<NoSuchFieldException> class0 = NoSuchFieldException.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, weakHashMap0, true, (PropertyNamingStrategy) null);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<PageAttributes> class0 = PageAttributes.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, false, propertyNamingStrategy0);
      assertEquals(6, list0.size());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<IllegalAccessException> class0 = IllegalAccessException.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, map0, true, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<InternalError> class0 = InternalError.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("gOaj)", "Ljava.awt.Font");
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0, false);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0, true);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<BigDecimal> class0 = BigDecimal.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, (Map<String, String>) null);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("null", "java/lang/Float");
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashMap0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashMap0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Class<NoSuchFieldException> class0 = NoSuchFieldException.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) weakHashMap0, (Map<String, Field>) identityHashMap0, false, (PropertyNamingStrategy) null);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Class<NumberFormat> class0 = NumberFormat.class;
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      treeMap0.putIfAbsent("EyD1OM:1\"RCb?", (Field) null);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, map0, (Map<String, Field>) treeMap0, false, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      PageAttributes.OriginType pageAttributes_OriginType0 = PageAttributes.OriginType.PHYSICAL;
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(pageAttributes_OriginType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : physical
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      String string0 = TypeUtils.castToString(mockDateFormat0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BreakIterator breakIterator0 = BreakIterator.getWordInstance();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(breakIterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : [checksum=0x10e2585c]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(gridBagConstraints0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.awt.GridBagConstraints@10d67a9a
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<OptionalCodec> class0 = OptionalCodec.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) weakHashMap0, parserConfig0.propertyNamingStrategy);
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(serializeBeanInfo0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : com.alibaba.fastjson.serializer.SerializeBeanInfo@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) null, class0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONObject jSONObject0 = new JSONObject();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(jSONObject0.defaultTimeZone);
      JSONObject jSONObject1 = jSONObject0.fluentPut("]>/DseM^<o$;SF{T.", mockGregorianCalendar0);
      Class<Short> class0 = Short.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) jSONObject1, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, public java.lang.Short(java.lang.String) throws java.lang.NumberFormatException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = TypeUtils.castToJavaBean((Object) null, class0);
      assertNull(sQLTransactionRollbackException0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PageAttributes.MediaType pageAttributes_MediaType0 = PageAttributes.MediaType.ISO_A8;
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(pageAttributes_MediaType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : iso-a8
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(fileSystemHandling0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : org.evosuite.runtime.testdata.FileSystemHandling@21fc6e69
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) null, class0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) null, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PageAttributes.MediaType pageAttributes_MediaType0 = PageAttributes.MediaType.NA_LETTER;
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) pageAttributes_MediaType0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("92Y2Xh06]E=>'N9");
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(mockIllegalArgumentException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : org.evosuite.runtime.mock.java.lang.MockThrowable: 92Y2Xh06]E=>'N9
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Insets insets0 = new Insets(55, 19, 55, 55);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(insets0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : java.awt.Insets[top=55,left=19,bottom=55,right=55]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(propertyNamingStrategy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : CamelCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      LongBinaryOperator longBinaryOperator0 = mock(LongBinaryOperator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(longBinaryOperator0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ConcurrentHashMap<String, ClientInfoStatus> concurrentHashMap0 = new ConcurrentHashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("'ovyzR", concurrentHashMap0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLClientInfoException0, (Type) null, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Locale locale0 = Locale.JAPAN;
      BreakIterator breakIterator0 = BreakIterator.getWordInstance(locale0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) breakIterator0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLInvalidAuthorizationSpecException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<Collator> class0 = Collator.class;
      Class<DataTruncation> class1 = DataTruncation.class;
      FieldInfo fieldInfo0 = new FieldInfo("bSyp(Z6bY%PQda5i/H{", class0, class1, class1, (Field) null, (-1433), (-1433), 3);
      Class<TypeNotPresentException> class2 = TypeNotPresentException.class;
      Type[] typeArray0 = new Type[1];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, fieldInfo0.declaringClass, class2);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Hashtable<Currency, NoSuchMethodException> hashtable0 = TypeUtils.cast((Object) null, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
      assertNull(hashtable0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      IndexOutOfBoundsException indexOutOfBoundsException0 = new IndexOutOfBoundsException();
      Class<NumberDeserializer> class0 = NumberDeserializer.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) indexOutOfBoundsException0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.NumberDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) weakHashMap0, (PropertyNamingStrategy) null, false);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      identityHashMap0.put("bgRKimC5<H;<", "bgRKimC5<H;<");
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) identityHashMap0, propertyNamingStrategy0, false);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, false);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashMap0, propertyNamingStrategy0, false);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Class<NumberFormat> class0 = NumberFormat.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, map0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.toLocale((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.setAccessible((AccessibleObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.isProxy((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.isPath((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.isNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<BreakIterator> class0 = BreakIterator.class;
      // Undeclared exception!
      try { 
        TypeUtils.getSuperMethodAnnotation(class0, (Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getParserFeatures((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getKoltinConstructor((Constructor[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getClassFromMapping((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getClass((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.fnv1a_64_lower((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.fnv1a_64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      // Undeclared exception!
      try { 
        TypeUtils.computeGettersWithFieldBase((Class<?>) null, linkedHashMap0, false, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) null, (Map<String, String>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) null, jSONType0, (Map<String, String>) identityHashMap0, (Map<String, Field>) null, true, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException(".CB8R0");
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockNullPointerException0, (ParameterizedType) null, (ParserConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      // Undeclared exception!
      try { 
        TypeUtils.buildBeanInfo((Class<?>) null, (Map<String, String>) weakHashMap0, propertyNamingStrategy0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      // Undeclared exception!
      try { 
        TypeUtils.buildBeanInfo((Class<?>) null, (Map<String, String>) hashMap0, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<Integer> class0 = Integer.class;
      Class<AtomicInteger> class1 = AtomicInteger.class;
      ObjectDeserializer objectDeserializer0 = parserConfig0.getDeserializer((Class<?>) class1, (Type) class0);
      assertEquals(12, objectDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = TypeUtils.isAnnotationPresentManyToMany((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<NumberFormatException> class0 = NumberFormatException.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      boolean boolean0 = TypeUtils.isAnnotationPresentOneToMany((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      assertEquals(12, throwableDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<SqlDateDeserializer> class0 = SqlDateDeserializer.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<MapDeserializer> class0 = MapDeserializer.class;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, (Type) null, class0);
      Class<?> class1 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      assertFalse(class1.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = TypeUtils.decapitalize("w");
      assertEquals("w", string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = TypeUtils.decapitalize("gOaj)");
      assertEquals("gOaj)", string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = TypeUtils.decapitalize("RDu!C,@4q5HK-)a3f");
      assertEquals("RDu!C,@4q5HK-)a3f", string0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Type type0 = TypeUtils.getGenericParamType((Type) null);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<Collator> class0 = Collator.class;
      Class<ClassLoader> class1 = ClassLoader.class;
      FieldInfo fieldInfo0 = new FieldInfo("dRd-MM-yyyy HH:mm:ss", class0, class1, class1, (Field) null, 47, 47, (-1433));
      boolean boolean0 = TypeUtils.isGenericParamType(fieldInfo0.fieldClass);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<Dimension> class0 = Dimension.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      assertEquals(12, throwableDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Class<SqlDateDeserializer> class0 = SqlDateDeserializer.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) null, (Map<String, Field>) treeMap0, false, propertyNamingStrategy0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>(treeMap0);
      TreeMap<String, Field> treeMap1 = new TreeMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (JSONType) null, (Map<String, String>) weakHashMap0, (Map<String, Field>) treeMap1, true, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<ChoiceFormat> class0 = ChoiceFormat.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, false);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("com.alibaba.fastjson.parser.JSONLexerBase", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match. com.alibaba.fastjson.parser.JSONLexerBase -> java.sql.SQLInvalidAuthorizationSpecException
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Byte byte0 = new Byte((byte)108);
      Byte.toUnsignedLong((byte)31);
      Byte.compare((byte)108, (byte)31);
      Byte.toUnsignedLong((byte)3);
      Byte.toUnsignedLong((byte)108);
      TypeUtils.castToTimestamp(byte0);
      Integer integer0 = new Integer((byte)108);
      Integer.max((byte)108, (-2035));
      TypeUtils.castToTimestamp(integer0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "scanFieldUUID");
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      TypeUtils.getParserFeatures(class0);
      Class<OptionalCodec> class1 = OptionalCodec.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      parserConfig0.addDeny("scanFieldUUID");
      TypeUtils.cast((Object) null, class1, parserConfig0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      Class<?> class2 = TypeUtils.loadClass("com.alibaba.fastjson.serializer.FloatCodec", (ClassLoader) aSMClassLoader0, true);
      TypeUtils.loadClass("72SS`>Yc5Iu1E~", (ClassLoader) aSMDeserializerFactory0.classLoader, false);
      Class<IllegalStateException> class3 = IllegalStateException.class;
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      ParserConfig.getFieldFromCache("bqB%}d", hashtable0);
      FieldInfo fieldInfo0 = new FieldInfo("LO_6(L$#az!2", (Class<?>) null, class0, class2, (Field) null, 77, (byte)31, 885);
      BeanContext beanContext0 = new BeanContext(class3, fieldInfo0);
      Method method0 = beanContext0.getMethod();
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("Ljava.awt.Point", (ClassLoader) null, true);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Thread thread0 = MockThread.currentThread();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, thread0);
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      Class<?> class0 = TypeUtils.loadClass("Ljava.awt.Color", classLoader0, false);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      Class<?> class0 = TypeUtils.loadClass((String) null, classLoader0, false);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      BreakIterator breakIterator0 = BreakIterator.getCharacterInstance();
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) breakIterator0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.DecimalFormatSymbols
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Float float0 = Float.valueOf((float) (-1802));
      Integer integer0 = TypeUtils.castToInt(float0);
      assertEquals((-1802), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64("I");
      assertEquals((-5808512892688781180L), long0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("-/PbS&Y[}");
      assertEquals(1235990742655897520L, long0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("gHj_o*J&a?L^^i3s");
      assertEquals((-5787744963978126524L), long0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = TypeUtils.isHibernateInitialized((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<Calendar> class0 = Calendar.class;
      TypeUtils.isKotlin(class0);
      ConcurrentHashMap<String, BreakIterator> concurrentHashMap0 = new ConcurrentHashMap<String, BreakIterator>();
      Class<DecimalFormatSymbols> class1 = DecimalFormatSymbols.class;
      Locale locale0 = Locale.CHINESE;
      ParserConfig parserConfig0 = ParserConfig.global;
      DecimalFormatSymbols decimalFormatSymbols0 = TypeUtils.cast((Object) concurrentHashMap0, class1, parserConfig0);
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<BufferCapabilities> class0 = BufferCapabilities.class;
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.awt.BufferCapabilities
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<?> class0 = TypeUtils.getCollectionItemClass((Type) null);
      Collection collection0 = TypeUtils.createCollection(class0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      FieldInfo fieldInfo0 = new FieldInfo("]`ssDfGT", class0, class0, class0, (Field) null, (-59432204), (-59432204), (-2798));
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      Type type0 = beanContext0.getFieldType();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn("]`ssDfGT").when(genericArrayType0).toString();
      doReturn(type0).when(genericArrayType0).getGenericComponentType();
      Type type1 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type1);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertEquals("class [Z", class1.toString());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<AtomicInteger> class1 = AtomicInteger.class;
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, class0);
      Class<?> class2 = TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
      assertEquals(17, class2.getModifiers());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<AtomicInteger> class1 = AtomicInteger.class;
      Type[] typeArray0 = new Type[2];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, class0);
      // Undeclared exception!
      try { 
        TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not create ASMParser
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertNotNull(class1);
      assertEquals(1, class1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class class0 = (Class)TypeUtils.getCollectionItemType((Type) null);
      assertFalse(class0.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<DataTruncation> class0 = DataTruncation.class;
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertEquals("class java.lang.Object", class1.toString());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = TypeUtils.decapitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = TypeUtils.decapitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<InstantiationException> class0 = InstantiationException.class;
      Field[] fieldArray0 = new Field[0];
      Field field0 = TypeUtils.getField(class0, "B{)>\"R:&jPA[9|{9!{i", fieldArray0);
      assertNull(field0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      Class<Short> class0 = Short.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) treeMap0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, public java.lang.Short(java.lang.String) throws java.lang.NumberFormatException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Class<Collator> class0 = Collator.class;
      Class<ClassLoader> class1 = ClassLoader.class;
      FieldInfo fieldInfo0 = new FieldInfo("dd-MM-yyyy HH:mm:ss", class0, class1, class1, (Field) null, 47, 47, (-1433));
      Type[] typeArray0 = new Type[2];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, fieldInfo0.declaringClass);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      VerifyError verifyError0 = new VerifyError();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) verifyError0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match. java.lang.VerifyError -> java.text.Collator
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Type type0 = TypeUtils.getGenericParamType(class0);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      boolean boolean0 = TypeUtils.isGenericParamType((Type) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      boolean boolean0 = TypeUtils.isGenericParamType(parameterizedTypeImpl0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<Collator> class0 = Collator.class;
      Class<ClassLoader> class1 = ClassLoader.class;
      FieldInfo fieldInfo0 = new FieldInfo("dRd-MM-yyyy HH:mm:ss", class0, class1, class1, (Field) null, 47, 47, (-1433));
      ParserConfig parserConfig0 = ParserConfig.global;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, fieldInfo0.declaringClass);
      assertEquals(12, throwableDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      assertEquals(12, throwableDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      Type[] typeArray0 = new Type[2];
      Class<Character> class0 = Character.TYPE;
      typeArray0[0] = (Type) class0;
      ClassLoader classLoader0 = null;
      TypeUtils.loadClass("kotlin.reflect.KFunction", (ClassLoader) null);
      typeArray0[1] = (Type) class0;
      Class<?> class1 = TypeUtils.getRawClass(typeArray0[0]);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, class0);
      parameterizedTypeImpl0.getTypeName();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      TypeUtils.cast((Object) gridBagConstraints0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(typeArray0[1]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : char
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<Point> class0 = Point.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, true);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<Double> class0 = Double.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, (Map<String, String>) null, false);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Class<NumberDeserializer> class0 = NumberDeserializer.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Class<Point> class0 = Point.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>(2);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) weakHashMap0, (Map<String, Field>) concurrentHashMap0, false, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Class<InternalError> class0 = InternalError.class;
      Type[] typeArray0 = new Type[3];
      Class<Double> class1 = Double.TYPE;
      typeArray0[1] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[2], typeArray0[1]);
      ParserConfig parserConfig0 = new ParserConfig();
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Class<TimeUnit> class0 = TimeUnit.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<AtomicInteger> class0 = AtomicInteger.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>(13);
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) concurrentHashMap0, (PropertyNamingStrategy) null);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      Class<ClassLoader> class0 = ClassLoader.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, map0, (Map<String, Field>) hashtable0, false, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, ")/(v$RDJ2Y3TS)=");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      Class<?> class0 = TypeUtils.loadClass("uxI~nY0d5", classLoader0);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("[double");
      assertFalse(class0.isInterface());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass((String) null);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      Class<Short> class0 = Short.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      parserConfig0.clearDeserializers();
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) treeMap0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. java.lang.Short
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      Class<IllegalStateException> class0 = IllegalStateException.class;
      IllegalStateException illegalStateException0 = TypeUtils.castToJavaBean((Map<String, Object>) hashtable0, class0, (ParserConfig) null);
      assertNull(illegalStateException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      BitSet bitSet0 = BitSet.valueOf(byteArray0);
      Class<?> class0 = TypeUtils.loadClass("");
      Class<RenderingHints> class1 = RenderingHints.class;
      Type[] typeArray0 = new Type[8];
      typeArray0[5] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, typeArray0[5]);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) bitSet0, (ParameterizedType) parameterizedTypeImpl0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupport type class java.awt.RenderingHints
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.MapDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Type[] typeArray0 = new Type[5];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[3], typeArray0[4]);
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) propertyNamingStrategy0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@67e12cdf
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Point point0 = new Point(1487, 1487);
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) point0, (Type) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {\"x\":1487,\"y\":1487}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = "$xa$rH&;aPX$/\\uf";
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) string0, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      AtomicLong atomicLong0 = new AtomicLong((-1293L));
      Class<TimeUnit> class0 = TimeUnit.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) atomicLong0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.concurrent.TimeUnit
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong(0L);
      Class<Object> class0 = Object.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) atomicLong0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) "java.lang.NoSuchFieldException@0000000001", class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<Object> class0 = Object.class;
      Object object0 = TypeUtils.castToEnum((Object) "", class0, parserConfig0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("ID");
      assertEquals("in", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "java.util.concurrent.atomic.AtomicLong@0000000001", class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.DecimalFormatSymbols
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Type[] typeArray0 = new Type[3];
      Class<Double> class0 = Double.TYPE;
      typeArray0[0] = (Type) class0;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) imageCapabilities0, typeArray0[0], parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : java.awt.ImageCapabilities@7002f9cf
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Object> class0 = Object.class;
      Object object0 = TypeUtils.castToJavaBean((Object) fileSystemHandling0, class0);
      assertSame(fileSystemHandling0, object0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong(2839L);
      Boolean boolean0 = TypeUtils.castToBoolean(atomicLong0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Boolean boolean0 = TypeUtils.castToBoolean((Object) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte[] byteArray0 = TypeUtils.castToBytes("WJmn~EdGXpUiU+}:K");
      assertEquals(12, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ConcurrentHashMap<String, BreakIterator> concurrentHashMap0 = new ConcurrentHashMap<String, BreakIterator>();
      Locale locale0 = Locale.KOREA;
      BreakIterator breakIterator0 = BreakIterator.getWordInstance(locale0);
      concurrentHashMap0.put("getDeclaringClass", breakIterator0);
      concurrentHashMap0.put("listContext", breakIterator0);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(concurrentHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {getDeclaringClass=[checksum=0x10e2585c], listContext=[checksum=0x10e2585c]}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      WeakHashMap<SQLNonTransientConnectionException, SQLWarning> weakHashMap0 = new WeakHashMap<SQLNonTransientConnectionException, SQLWarning>();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(weakHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Integer integer0 = TypeUtils.castToInt("");
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong(1327L);
      Class<Integer> class0 = Integer.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Integer integer0 = TypeUtils.cast((Object) atomicLong0, class0, parserConfig0);
      assertEquals(1327, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Integer integer0 = TypeUtils.castToInt((Object) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("cCWGPA$3");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"cCWGPA$3\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      PageAttributes.ColorType pageAttributes_ColorType0 = PageAttributes.ColorType.COLOR;
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(pageAttributes_ColorType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : color
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Long long0 = new Long((-244L));
      Long long1 = TypeUtils.castToLong(long0);
      assertEquals((-244L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Long long0 = TypeUtils.castToLong((Object) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("}1G1I+i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : }1G1I+i
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(" not found");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value :  not found
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Timestamp timestamp0 = TypeUtils.castToTimestamp("");
      assertNull(timestamp0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("}1G1I+i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : }1G1I+i
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      MockDate mockDate0 = new MockDate(54, 54, 54);
      Timestamp timestamp0 = TypeUtils.castToTimestamp(mockDate0);
      assertEquals(0, timestamp0.getNanos());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond((-1L));
      Timestamp timestamp0 = Timestamp.from(instant0);
      Timestamp timestamp1 = TypeUtils.castToTimestamp(timestamp0);
      assertSame(timestamp1, timestamp0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Timestamp timestamp0 = TypeUtils.castToTimestamp((Object) null);
      assertNull(timestamp0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Time time0 = TypeUtils.castToSqlTime((Object) null);
      assertNull(time0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("toJSON error");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : toJSON error
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Byte byte0 = new Byte((byte)47);
      Date date0 = TypeUtils.castToSqlDate(byte0);
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Date date0 = TypeUtils.castToSqlDate((Object) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong(0L);
      java.util.Date date0 = TypeUtils.castToDate(atomicLong0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond((-1L));
      Timestamp timestamp0 = Timestamp.from(instant0);
      java.util.Date date0 = TypeUtils.castToDate(timestamp0);
      assertSame(timestamp0, date0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      java.util.Date date0 = TypeUtils.castToDate((Object) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("j");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"j\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("gOaj)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      MessageFormat messageFormat0 = new MessageFormat("lon", locale0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(messageFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : java.text.MessageFormat@1a34b
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Double double0 = TypeUtils.castToDouble((Object) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Double double0 = new Double(0.0);
      Double double1 = TypeUtils.castToDouble(double0);
      assertEquals((double)double1, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("Ljava.util.concurrent.ConcurrentSkipListMap");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Float float0 = TypeUtils.castToFloat((Object) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong(1327L);
      Float float0 = TypeUtils.castToFloat(atomicLong0);
      assertEquals(1327.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      MapDeserializer mapDeserializer0 = MapDeserializer.instance;
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(mapDeserializer0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"com.\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      WeakHashMap<Short, StackOverflowError> weakHashMap0 = new WeakHashMap<Short, StackOverflowError>();
      Short short0 = new Short((short)792);
      StackOverflowError stackOverflowError0 = new StackOverflowError();
      weakHashMap0.put(short0, stackOverflowError0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(weakHashMap0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal((Object) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      WeakHashMap<Short, StackOverflowError> weakHashMap0 = new WeakHashMap<Short, StackOverflowError>();
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal(weakHashMap0);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("writeFieldValue");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"writeFieldValue\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      AtomicInteger atomicInteger0 = new AtomicInteger(1);
      Short short0 = TypeUtils.castToShort(atomicInteger0);
      assertEquals((short)1, (short)short0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Short short0 = TypeUtils.castToShort((Object) null);
      assertNull(short0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Character character0 = TypeUtils.castToChar((Object) null);
      assertNull(character0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Class<PropertyProcessable> class0 = PropertyProcessable.class;
      PropertyProcessableDeserializer propertyProcessableDeserializer0 = new PropertyProcessableDeserializer(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(propertyProcessableDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("getTime");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"getTime\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Byte byte0 = TypeUtils.castToByte((Object) null);
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = TypeUtils.castToString((Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Class<?> class0 = TypeUtils.getClassFromMapping("uxI~nY0d5");
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      //  // Unstable assertion: assertTrue(TypeUtils.compatibleWithJavaBean);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      TypeUtils.clearClassMapping();
      Class<Collator> class0 = Collator.class;
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>(0);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Class<TimeDeserializer> class1 = TimeDeserializer.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<DecimalFormatSymbols> class2 = DecimalFormatSymbols.class;
      Type[] typeArray0 = new Type[0];
      Class<?> class3 = TypeUtils.getRawClass(class2);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class3, class0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) map0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("kotlin.reflect.KParameter");
      Class<MapDeserializer> class0 = MapDeserializer.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) mockIllegalStateException0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.MapDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashMap0, false);
      assertEquals(0, list0.size());
  }
}
