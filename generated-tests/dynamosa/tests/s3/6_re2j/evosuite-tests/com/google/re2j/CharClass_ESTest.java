/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 11:58:01 GMT 2019
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.CharClass;
import com.google.re2j.CharGroup;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharClass_ESTest extends CharClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(0, 0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass0.appendLiteral(0, 0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass1.appendFoldedRange((-1687), (-1687));
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      
      String string0 = charClass1.toString();
      assertNotNull(string0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertEquals("[0x0 0xfffff969]", string0);
      
      int[] intArray0 = new int[9];
      int[][] intArray1 = new int[0][7];
      CharClass charClass4 = charClass1.appendTable(intArray1);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 12;
      intArray0[3] = 0;
      intArray0[4] = (-1687);
      intArray0[5] = (-1687);
      intArray0[6] = 0;
      intArray0[7] = (-1687);
      intArray0[8] = 0;
      // Undeclared exception!
      try { 
        charClass3.appendClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[][] intArrayArray0 = null;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-385);
      intArray0[1] = 146;
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendRange(1978, (-385));
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass0.appendClassWithSign(intArray0, 1);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertArrayEquals(new int[] {(-385), 146}, intArray0);
      
      CharClass charClass4 = charClass3.cleanClass();
      assertEquals(2, intArray0.length);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertArrayEquals(new int[] {(-385), 146}, intArray0);
      
      int[] intArray1 = charClass0.toArray();
      assertEquals(4, intArray1.length);
      assertNotNull(intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-385), 146, 1978, (-385)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      String string0 = CharClass.charClassToString(intArray1, 0);
      assertEquals(4, intArray1.length);
      assertNotNull(string0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertNotSame(intArray1, intArray0);
      assertEquals("[]", string0);
      assertArrayEquals(new int[] {(-385), 146, 1978, (-385)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      CharClass charClass5 = charClass3.appendFoldedClass(intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertArrayEquals(new int[] {(-385), 146}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      
      int[][] intArray2 = new int[9][8];
      intArray2[0] = intArray0;
      int[] intArray3 = new int[1];
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = (-385);
      intArray2[1] = intArray3;
      int[] intArray4 = new int[6];
      assertFalse(intArray4.equals((Object)intArray0));
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray1));
      
      intArray4[0] = (-385);
      intArray4[1] = 146;
      intArray4[2] = (-385);
      intArray4[3] = 1;
      intArray4[4] = 1;
      intArray4[5] = 146;
      intArray2[2] = intArray4;
      intArray2[3] = intArray0;
      intArray2[4] = intArray0;
      intArray2[5] = intArray1;
      intArray2[6] = intArray1;
      intArray2[7] = intArray0;
      intArray2[8] = intArray1;
      // Undeclared exception!
      try { 
        charClass0.appendTable(intArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendRange(64830, (-2670));
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      int[] intArray0 = charClass0.toArray();
      assertEquals(4, intArray0.length);
      assertNotNull(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertArrayEquals(new int[] {0, 1114111, 64830, (-2670)}, intArray0);
      
      CharClass charClass3 = charClass1.cleanClass();
      assertNotNull(charClass3);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      
      int[] intArray1 = charClass2.toArray();
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 1114111}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[4];
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendRange(144, 144);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass0.appendFoldedClass(intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      
      CharClass charClass3 = charClass0.appendFoldedRange(124, 124);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      
      CharClass charClass4 = charClass3.appendFoldedClass(intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendRange(1368, 1368);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1368;
      intArray0[1] = 1368;
      intArray0[2] = 1368;
      intArray0[3] = 1368;
      CharClass charClass2 = charClass0.negateClass();
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      intArray0[4] = 1368;
      int[][] intArray1 = new int[2][0];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      CharClass charClass3 = charClass0.appendNegatedTable(intArray1);
      assertEquals(2, intArray1.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      
      CharClass charClass4 = charClass3.appendLiteral(64, 2948);
      assertEquals(2, intArray1.length);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      
      CharClass charClass5 = charClass3.negateClass();
      assertEquals(2, intArray1.length);
      assertNotNull(charClass5);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      
      CharClass charClass6 = charClass2.appendRange(1368, 1368);
      assertNotNull(charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass4);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass5);
      
      // Undeclared exception!
      try { 
        charClass4.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-2376);
      intArray0[1] = (-3198);
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, 3501);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {(-2376), (-3198)}, intArray0);
      
      CharClass charClass2 = new CharClass(intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {(-2376), (-3198)}, intArray0);
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass1));
      
      CharClass charClass3 = charClass2.appendClass(intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass3);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertNotSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertNotSame(charClass3, charClass1);
      assertNotSame(charClass3, charClass0);
      assertArrayEquals(new int[] {(-2376), (-3198)}, intArray0);
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass0));
      
      CharClass charClass4 = charClass2.cleanClass();
      assertEquals(2, intArray0.length);
      assertNotNull(charClass4);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertNotSame(charClass2, charClass1);
      assertSame(charClass4, charClass2);
      assertNotSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertNotSame(charClass4, charClass0);
      assertArrayEquals(new int[] {(-2376), (-3198)}, intArray0);
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass4.equals((Object)charClass1));
      assertFalse(charClass4.equals((Object)charClass0));
      
      CharClass charClass5 = charClass3.cleanClass();
      assertEquals(2, intArray0.length);
      assertNotNull(charClass5);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertNotSame(charClass2, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertNotSame(charClass3, charClass1);
      assertNotSame(charClass3, charClass0);
      assertNotSame(charClass5, charClass1);
      assertNotSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertArrayEquals(new int[] {(-2376), (-3198)}, intArray0);
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass0));
      assertFalse(charClass5.equals((Object)charClass1));
      assertFalse(charClass5.equals((Object)charClass0));
      
      CharClass charClass6 = charClass2.appendRange((-916), 93);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass6);
      assertSame(charClass2, charClass3);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertNotSame(charClass2, charClass1);
      assertSame(charClass2, charClass6);
      assertSame(charClass6, charClass5);
      assertNotSame(charClass6, charClass0);
      assertNotSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass2);
      assertArrayEquals(new int[] {(-2376), (-3198)}, intArray0);
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass6.equals((Object)charClass0));
      assertFalse(charClass6.equals((Object)charClass1));
      
      String string0 = CharClass.charClassToString(intArray0, 1);
      assertEquals(2, intArray0.length);
      assertNotNull(string0);
      assertEquals("[0xfffff6b8-0xfffff382]", string0);
      assertArrayEquals(new int[] {(-2376), (-3198)}, intArray0);
      
      CharClass charClass7 = charClass2.appendClass(intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass7);
      assertSame(charClass2, charClass3);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertNotSame(charClass2, charClass1);
      assertSame(charClass2, charClass6);
      assertNotSame(charClass7, charClass1);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass3);
      assertNotSame(charClass7, charClass0);
      assertArrayEquals(new int[] {(-2376), (-3198)}, intArray0);
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass7.equals((Object)charClass1));
      assertFalse(charClass7.equals((Object)charClass0));
      
      CharClass charClass8 = charClass4.appendFoldedRange(1073, 1093);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass8);
      assertSame(charClass2, charClass3);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass4);
      assertNotSame(charClass2, charClass1);
      assertSame(charClass2, charClass6);
      assertSame(charClass4, charClass2);
      assertNotSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass8);
      assertNotSame(charClass4, charClass0);
      assertNotSame(charClass8, charClass1);
      assertNotSame(charClass8, charClass0);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass5);
      assertArrayEquals(new int[] {(-2376), (-3198)}, intArray0);
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass4.equals((Object)charClass1));
      assertFalse(charClass4.equals((Object)charClass0));
      assertFalse(charClass8.equals((Object)charClass1));
      assertFalse(charClass8.equals((Object)charClass0));
      
      CharClass charClass9 = charClass3.appendClass(intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass9);
      assertSame(charClass2, charClass3);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass4);
      assertNotSame(charClass2, charClass1);
      assertSame(charClass2, charClass6);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertNotSame(charClass3, charClass1);
      assertNotSame(charClass3, charClass0);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass9);
      assertNotSame(charClass9, charClass1);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass7);
      assertNotSame(charClass9, charClass0);
      assertSame(charClass9, charClass8);
      assertArrayEquals(new int[] {(-2376), (-3198)}, intArray0);
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass0));
      assertFalse(charClass9.equals((Object)charClass1));
      assertFalse(charClass9.equals((Object)charClass0));
      
      String string1 = CharClass.charClassToString(intArray0, (-4));
      assertEquals(2, intArray0.length);
      assertNotNull(string1);
      assertEquals("[]", string1);
      assertArrayEquals(new int[] {(-2376), (-3198)}, intArray0);
      assertFalse(string1.equals((Object)string0));
      
      CharClass charClass10 = charClass2.appendNegatedClass(intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass10);
      assertSame(charClass2, charClass3);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass4);
      assertNotSame(charClass2, charClass1);
      assertSame(charClass2, charClass10);
      assertSame(charClass2, charClass6);
      assertSame(charClass10, charClass2);
      assertSame(charClass10, charClass4);
      assertSame(charClass10, charClass6);
      assertSame(charClass10, charClass9);
      assertSame(charClass10, charClass3);
      assertSame(charClass10, charClass8);
      assertNotSame(charClass10, charClass0);
      assertNotSame(charClass10, charClass1);
      assertSame(charClass10, charClass5);
      assertSame(charClass10, charClass7);
      assertArrayEquals(new int[] {(-2376), (-3198)}, intArray0);
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass10.equals((Object)charClass0));
      assertFalse(charClass10.equals((Object)charClass1));
      
      CharClass charClass11 = charClass1.negateClass();
      assertEquals(2, intArray0.length);
      assertNotNull(charClass11);
      assertNotSame(charClass11, charClass7);
      assertNotSame(charClass11, charClass3);
      assertNotSame(charClass11, charClass8);
      assertNotSame(charClass11, charClass5);
      assertSame(charClass11, charClass0);
      assertNotSame(charClass11, charClass2);
      assertNotSame(charClass11, charClass4);
      assertNotSame(charClass11, charClass6);
      assertNotSame(charClass11, charClass9);
      assertNotSame(charClass11, charClass10);
      assertSame(charClass11, charClass1);
      assertNotSame(charClass0, charClass3);
      assertNotSame(charClass0, charClass8);
      assertNotSame(charClass0, charClass7);
      assertNotSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertNotSame(charClass0, charClass2);
      assertNotSame(charClass0, charClass4);
      assertNotSame(charClass0, charClass9);
      assertNotSame(charClass0, charClass6);
      assertSame(charClass0, charClass11);
      assertNotSame(charClass0, charClass10);
      assertNotSame(charClass1, charClass10);
      assertNotSame(charClass1, charClass8);
      assertNotSame(charClass1, charClass9);
      assertNotSame(charClass1, charClass7);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass11);
      assertNotSame(charClass1, charClass5);
      assertNotSame(charClass1, charClass2);
      assertNotSame(charClass1, charClass4);
      assertNotSame(charClass1, charClass3);
      assertNotSame(charClass1, charClass6);
      assertArrayEquals(new int[] {(-2376), (-3198)}, intArray0);
      assertFalse(charClass11.equals((Object)charClass7));
      assertFalse(charClass11.equals((Object)charClass3));
      assertFalse(charClass11.equals((Object)charClass8));
      assertFalse(charClass11.equals((Object)charClass5));
      assertFalse(charClass11.equals((Object)charClass2));
      assertFalse(charClass11.equals((Object)charClass4));
      assertFalse(charClass11.equals((Object)charClass6));
      assertFalse(charClass11.equals((Object)charClass9));
      assertFalse(charClass11.equals((Object)charClass10));
      assertFalse(charClass0.equals((Object)charClass3));
      assertFalse(charClass0.equals((Object)charClass8));
      assertFalse(charClass0.equals((Object)charClass7));
      assertFalse(charClass0.equals((Object)charClass5));
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass0.equals((Object)charClass4));
      assertFalse(charClass0.equals((Object)charClass9));
      assertFalse(charClass0.equals((Object)charClass6));
      assertFalse(charClass0.equals((Object)charClass10));
      assertFalse(charClass1.equals((Object)charClass10));
      assertFalse(charClass1.equals((Object)charClass8));
      assertFalse(charClass1.equals((Object)charClass9));
      assertFalse(charClass1.equals((Object)charClass7));
      assertFalse(charClass1.equals((Object)charClass5));
      assertFalse(charClass1.equals((Object)charClass2));
      assertFalse(charClass1.equals((Object)charClass4));
      assertFalse(charClass1.equals((Object)charClass3));
      assertFalse(charClass1.equals((Object)charClass6));
      
      CharClass charClass12 = charClass6.cleanClass();
      assertEquals(2, intArray0.length);
      assertNotNull(charClass12);
      assertNotSame(charClass12, charClass1);
      assertSame(charClass12, charClass10);
      assertSame(charClass12, charClass9);
      assertSame(charClass12, charClass7);
      assertNotSame(charClass12, charClass0);
      assertSame(charClass12, charClass8);
      assertSame(charClass12, charClass5);
      assertNotSame(charClass12, charClass11);
      assertSame(charClass12, charClass3);
      assertSame(charClass12, charClass4);
      assertSame(charClass12, charClass6);
      assertSame(charClass12, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass12);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass8);
      assertNotSame(charClass2, charClass11);
      assertSame(charClass2, charClass4);
      assertNotSame(charClass2, charClass1);
      assertSame(charClass2, charClass10);
      assertSame(charClass2, charClass6);
      assertSame(charClass6, charClass5);
      assertNotSame(charClass6, charClass0);
      assertNotSame(charClass6, charClass11);
      assertSame(charClass6, charClass7);
      assertNotSame(charClass6, charClass1);
      assertSame(charClass6, charClass10);
      assertSame(charClass6, charClass8);
      assertSame(charClass6, charClass9);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass12);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass2);
      assertArrayEquals(new int[] {(-2376), (-3198)}, intArray0);
      assertFalse(charClass12.equals((Object)charClass1));
      assertFalse(charClass12.equals((Object)charClass0));
      assertFalse(charClass12.equals((Object)charClass11));
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass11));
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass6.equals((Object)charClass0));
      assertFalse(charClass6.equals((Object)charClass11));
      assertFalse(charClass6.equals((Object)charClass1));
      
      CharClass charClass13 = charClass12.appendFoldedClass(intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass13);
      assertSame(charClass12, charClass7);
      assertSame(charClass12, charClass5);
      assertSame(charClass12, charClass3);
      assertSame(charClass12, charClass2);
      assertNotSame(charClass12, charClass1);
      assertSame(charClass12, charClass10);
      assertSame(charClass12, charClass9);
      assertNotSame(charClass12, charClass0);
      assertSame(charClass12, charClass8);
      assertSame(charClass12, charClass13);
      assertNotSame(charClass12, charClass11);
      assertSame(charClass12, charClass4);
      assertSame(charClass12, charClass6);
      assertSame(charClass13, charClass8);
      assertNotSame(charClass13, charClass1);
      assertSame(charClass13, charClass10);
      assertSame(charClass13, charClass4);
      assertSame(charClass13, charClass6);
      assertSame(charClass13, charClass9);
      assertNotSame(charClass13, charClass0);
      assertSame(charClass13, charClass7);
      assertNotSame(charClass13, charClass11);
      assertSame(charClass13, charClass5);
      assertSame(charClass13, charClass2);
      assertSame(charClass13, charClass3);
      assertSame(charClass13, charClass12);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass13);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass8);
      assertNotSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass12);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass7);
      assertNotSame(charClass2, charClass11);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass10);
      assertSame(charClass2, charClass6);
      assertSame(charClass6, charClass13);
      assertNotSame(charClass6, charClass0);
      assertNotSame(charClass6, charClass11);
      assertNotSame(charClass6, charClass1);
      assertSame(charClass6, charClass8);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass12);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass10);
      assertSame(charClass6, charClass9);
      assertSame(charClass6, charClass4);
      assertArrayEquals(new int[] {(-2376), (-3198)}, intArray0);
      assertFalse(charClass12.equals((Object)charClass1));
      assertFalse(charClass12.equals((Object)charClass0));
      assertFalse(charClass12.equals((Object)charClass11));
      assertFalse(charClass13.equals((Object)charClass1));
      assertFalse(charClass13.equals((Object)charClass11));
      assertFalse(charClass13.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass11));
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass6.equals((Object)charClass0));
      assertFalse(charClass6.equals((Object)charClass11));
      assertFalse(charClass6.equals((Object)charClass1));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[1];
      int[][] intArray1 = new int[8][2];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 1913;
      intArray0[1] = 1231;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = (-1391);
      intArray0[6] = 125;
      intArray0[7] = 1920;
      intArray0[8] = 233;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(9, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {1913, 1231, 0, 0, 0, (-1391), 125, 1920, 233}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass0.negateClass();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[4];
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendRange(144, 144);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass0.appendFoldedClass(intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      
      CharClass charClass3 = charClass0.appendFoldedRange((-2711), 144);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      
      CharClass charClass4 = charClass3.appendFoldedClass(intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1114111;
      intArray0[1] = 0;
      intArray0[2] = 65;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(3, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {1114111, 0, 65}, intArray0);
      
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      CharClass charClass1 = charClass0.appendRange((-3886), 1114111);
      assertEquals(3, intArray0.length);
      assertNotNull(charClass1);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {1114111, (-3886), 1114111}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      
      CharClass charClass2 = charClass0.appendRange(1114111, 1114111);
      assertEquals(3, intArray0.length);
      assertNotNull(charClass2);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {1114111, (-3886), 1114111}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 1114111);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendLiteral(58, 0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass2.negateClass();
      assertNotNull(charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      
      CharClass charClass4 = charClass3.appendRange(0, 58);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      
      CharClass charClass5 = charClass2.cleanClass();
      assertNotNull(charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      
      int[] intArray0 = charClass1.toArray();
      assertEquals(2, intArray0.length);
      assertNotNull(intArray0);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      
      String string0 = CharClass.charClassToString(intArray0, 0);
      assertEquals(2, intArray0.length);
      assertNotNull(string0);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertEquals("[]", string0);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      
      String string1 = CharClass.charClassToString(intArray0, 2);
      assertEquals(2, intArray0.length);
      assertNotNull(string1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertEquals("[0x0-0x10ffff]", string1);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(2419, 0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendRange(3023, 3023);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 254;
      intArray0[2] = 3023;
      intArray0[3] = 0;
      intArray0[4] = 2419;
      // Undeclared exception!
      try { 
        charClass2.appendClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendRange((-4362), 2052);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass2.negateClass();
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      
      CharClass charClass4 = charClass3.cleanClass();
      assertNotNull(charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      
      int[] intArray0 = new int[0];
      CharClass charClass5 = charClass4.appendClass(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass5);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass6 = charClass3.appendNegatedClass(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass1);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass3);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass7 = charClass6.negateClass();
      assertEquals(0, intArray0.length);
      assertNotNull(charClass7);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass1);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass3);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      
      String string0 = CharClass.charClassToString(intArray0, (-4362));
      assertEquals(0, intArray0.length);
      assertNotNull(string0);
      assertEquals("[]", string0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 3501;
      intArray0[1] = 1368;
      intArray0[2] = (-3198);
      CharClass charClass1 = new CharClass(intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {3501, 1368, (-3198), 0, 0, 0, 0, 0}, intArray0);
      assertFalse(charClass1.equals((Object)charClass0));
      
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass1, charClass2);
      assertNotSame(charClass1, charClass0);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {3501, 1368, (-3198), 0, 0, 0, (-3198), 0}, intArray0);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass0));
      
      int[][] intArray1 = new int[7][6];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      int[] intArray2 = new int[6];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 65;
      intArray2[1] = 66639;
      CharClass charClass3 = charClass1.negateClass();
      assertEquals(8, intArray0.length);
      assertNotNull(charClass3);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass1, charClass2);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertNotSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertArrayEquals(new int[] {0, 3500, 1, 1114111, 0, 0, (-3198), 0}, intArray0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass0));
      
      // Undeclared exception!
      charClass3.appendNegatedTable(intArray1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[0];
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(65, 0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.negateClass();
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass2.appendRange(0, 65);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 65;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = 66639;
      intArray0[3] = 1002;
      intArray0[4] = (-1707);
      intArray0[5] = (-266);
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0, 2, 66639, 1002, (-1707), (-266)}, intArray0);
      
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 2, 66639, 1002, (-1707), (-266)}, intArray0);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertEquals(6, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {0, 2, 66639, 1002, (-1707), (-266)}, intArray0);
      
      int[][] intArray1 = new int[6][0];
      intArray1[0] = intArray0;
      int[] intArray2 = new int[6];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = (-1707);
      intArray2[1] = (-1707);
      intArray2[2] = 1002;
      intArray2[3] = 1002;
      intArray2[4] = 66639;
      intArray2[5] = 1002;
      intArray1[1] = intArray2;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      CharClass charClass3 = charClass2.appendTable(intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertNotNull(charClass3);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertArrayEquals(new int[] {0, 2, 66639, 1002, (-1707), (-266)}, intArray0);
      assertFalse(intArray0.equals((Object)intArray2));
      
      CharClass charClass4 = charClass0.appendClassWithSign(intArray0, 1367);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass4);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertArrayEquals(new int[] {0, 2, 66639, 1002, (-1707), (-266)}, intArray0);
      assertFalse(intArray0.equals((Object)intArray2));
      
      int[][] intArray3 = new int[0][7];
      assertFalse(intArray3.equals((Object)intArray1));
      
      CharClass charClass5 = charClass2.appendTable(intArray3);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray3.length);
      assertNotNull(charClass5);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertNotSame(intArray3, intArray1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertArrayEquals(new int[] {0, 2, 66639, 1002, (-1707), (-266)}, intArray0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      CharClass charClass6 = charClass3.appendTable(intArray3);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray3.length);
      assertEquals(6, intArray1.length);
      assertNotNull(charClass6);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray1, intArray3);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass0);
      assertArrayEquals(new int[] {0, 2, 66639, 1002, (-1707), (-266)}, intArray0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray3));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 3129;
      intArray0[1] = 64323;
      intArray0[2] = 4399;
      intArray0[3] = 242;
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {3129, 64323, 4399, 242}, intArray0);
      
      int[][] intArray1 = new int[1][4];
      intArray1[0] = intArray0;
      CharClass charClass2 = charClass1.appendNegatedTable(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {3129, 64323, 4399, 242}, intArray0);
      
      CharClass charClass3 = charClass2.appendClassWithSign(intArray0, 64);
      assertEquals(4, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertArrayEquals(new int[] {3129, 64323, 4399, 242}, intArray0);
      
      CharClass charClass4 = charClass3.appendTableWithSign(intArray1, 242);
      assertEquals(4, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertArrayEquals(new int[] {3129, 64323, 4399, 242}, intArray0);
      
      CharClass charClass5 = charClass0.appendTableWithSign(intArray1, 242);
      assertEquals(1, intArray1.length);
      assertNotNull(charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendRange(1368, 1368);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1368;
      intArray0[1] = 1368;
      intArray0[2] = 1368;
      intArray0[3] = 1368;
      CharClass charClass2 = charClass0.negateClass();
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      intArray0[4] = 1368;
      intArray0[5] = 1368;
      intArray0[6] = 1368;
      intArray0[7] = 1368;
      CharClass charClass3 = charClass1.appendClass(intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertArrayEquals(new int[] {1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368}, intArray0);
      
      int[][] intArray1 = new int[7][3];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      CharClass charClass4 = charClass3.appendTable(intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertArrayEquals(new int[] {1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368}, intArray0);
      
      CharClass charClass5 = charClass4.appendClassWithSign(intArray0, (-1991));
      assertEquals(8, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotNull(charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertArrayEquals(new int[] {1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368}, intArray0);
      
      CharClass charClass6 = charClass4.appendFoldedClass(intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotNull(charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass2);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertArrayEquals(new int[] {1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368}, intArray0);
      
      CharClass charClass7 = charClass6.appendNegatedTable(intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotNull(charClass7);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass7);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass4);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass2);
      assertArrayEquals(new int[] {1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368}, intArray0);
      
      // Undeclared exception!
      charClass6.appendFoldedRange(553, 1368);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = (-3198);
      int[] intArray0 = new int[8];
      intArray0[0] = 3501;
      intArray0[1] = 1368;
      intArray0[2] = (-3198);
      intArray0[3] = 3501;
      intArray0[4] = (-3198);
      intArray0[5] = 1368;
      intArray0[6] = 1368;
      int[][] intArray1 = new int[0][8];
      CharClass charClass1 = charClass0.appendNegatedTable(intArray1);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendTable(intArray1);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      // Undeclared exception!
      charClass1.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[4];
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      
      CharClass charClass2 = charClass0.cleanClass();
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 98);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = 2;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {2, 2}, intArray0);
      
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {2, 2}, intArray0);
      
      CharClass charClass2 = charClass1.negateClass();
      assertEquals(2, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {0, 1}, intArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1114111;
      intArray0[1] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(3, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {1114111, 0, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[3][4];
      int[] intArray1 = new int[7];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 12450;
      intArray1[3] = 0;
      intArray1[4] = 0;
      intArray1[5] = (-421);
      intArray1[6] = (-2426);
      intArray0[0] = intArray1;
      int[] intArray2 = new int[1];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 0;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[7];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = (-2426);
      intArray3[1] = 585;
      intArray3[2] = 0;
      intArray3[3] = 0;
      intArray3[4] = 0;
      intArray3[5] = (-421);
      intArray3[6] = 0;
      intArray0[2] = intArray3;
      // Undeclared exception!
      try { 
        charClass0.appendTable(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendLiteral(58, 58);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass2.negateClass();
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      
      CharClass charClass4 = charClass3.appendRange(58, 58);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      
      int[] intArray0 = charClass3.toArray();
      assertEquals(4, intArray0.length);
      assertNotNull(intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertArrayEquals(new int[] {0, 57, 58, 1114111}, intArray0);
      
      CharClass charClass5 = charClass2.cleanClass();
      assertNotNull(charClass5);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      
      int[] intArray1 = charClass4.toArray();
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 1114111}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      int[] intArray0 = new int[0];
      CharClass charClass3 = charClass1.appendNegatedClass(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass4 = charClass0.negateClass();
      assertNotNull(charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      
      int[][] intArray1 = new int[6][5];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      // Undeclared exception!
      try { 
        charClass1.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-385);
      intArray0[1] = 146;
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass0.appendClassWithSign(intArray0, 1);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {(-385), 146}, intArray0);
      
      CharClass charClass3 = charClass2.cleanClass();
      assertEquals(2, intArray0.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertArrayEquals(new int[] {(-385), 146}, intArray0);
      
      int[] intArray1 = charClass0.toArray();
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-385), 146}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      String string0 = CharClass.charClassToString(intArray1, 0);
      assertEquals(2, intArray1.length);
      assertNotNull(string0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertNotSame(intArray1, intArray0);
      assertEquals("[]", string0);
      assertArrayEquals(new int[] {(-385), 146}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      CharClass charClass4 = charClass2.appendFoldedClass(intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertArrayEquals(new int[] {(-385), 146}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      
      int[] intArray2 = new int[1];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = (-385);
      int[] intArray3 = new int[6];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      
      intArray3[0] = (-385);
      CharClass charClass5 = charClass2.cleanClass();
      assertEquals(2, intArray0.length);
      assertNotNull(charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertArrayEquals(new int[] {(-385), 146}, intArray0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(intArray0.equals((Object)intArray1));
      
      intArray3[1] = 146;
      intArray3[2] = (-385);
      intArray3[3] = 1;
      intArray3[4] = 1;
      intArray3[5] = 146;
      // Undeclared exception!
      try { 
        charClass4.appendFoldedClass(intArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-385);
      intArray0[1] = 146;
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass0.cleanClass();
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      int[] intArray1 = charClass0.toArray();
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      String string0 = CharClass.charClassToString(intArray1, 0);
      assertEquals(0, intArray1.length);
      assertNotNull(string0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertNotSame(intArray1, intArray0);
      assertEquals("[]", string0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[][] intArray2 = new int[0][2];
      CharClass charClass3 = charClass0.appendTable(intArray2);
      assertEquals(0, intArray2.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      
      CharClass charClass4 = charClass3.appendFoldedClass(intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray2.length);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertArrayEquals(new int[] {(-385), 146}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      
      CharClass charClass5 = charClass1.appendTable(intArray2);
      assertEquals(0, intArray2.length);
      assertNotNull(charClass5);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      
      CharClass charClass6 = charClass0.appendFoldedRange((-385), 156);
      assertNotNull(charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass5);
      
      CharClass charClass7 = charClass5.appendTable(intArray2);
      assertEquals(0, intArray2.length);
      assertNotNull(charClass7);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass0);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass2);
      
      int[] intArray3 = charClass4.toArray();
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray2.length);
      assertEquals(64, intArray3.length);
      assertNotNull(intArray3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray3);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass6);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray0);
      assertArrayEquals(new int[] {(-385), 146}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[7][4];
      int[] intArray1 = new int[0];
      intArray0[5] = intArray1;
      CharClass charClass1 = new CharClass(intArray0[4]);
      assertEquals(7, intArray0.length);
      assertNotNull(charClass1);
      assertFalse(charClass1.equals((Object)charClass0));
      
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0[4]);
      assertEquals(7, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass1, charClass2);
      assertNotSame(charClass1, charClass0);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass0));
      
      CharClass charClass3 = charClass2.appendFoldedRange(399, (-916));
      assertEquals(7, intArray0.length);
      assertNotNull(charClass3);
      assertSame(charClass1, charClass2);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertNotSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass0));
      
      CharClass charClass4 = charClass0.appendFoldedRange((-2376), 1286);
      assertNotNull(charClass4);
      assertNotSame(charClass0, charClass2);
      assertNotSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertNotSame(charClass0, charClass1);
      assertNotSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertNotSame(charClass4, charClass3);
      assertNotSame(charClass4, charClass2);
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass0.equals((Object)charClass3));
      assertFalse(charClass0.equals((Object)charClass1));
      assertFalse(charClass4.equals((Object)charClass1));
      assertFalse(charClass4.equals((Object)charClass3));
      assertFalse(charClass4.equals((Object)charClass2));
      
      CharClass charClass5 = charClass4.cleanClass();
      assertNotNull(charClass5);
      assertNotSame(charClass0, charClass2);
      assertNotSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertNotSame(charClass0, charClass1);
      assertSame(charClass4, charClass5);
      assertNotSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertNotSame(charClass4, charClass3);
      assertNotSame(charClass4, charClass2);
      assertNotSame(charClass5, charClass2);
      assertNotSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertNotSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass0.equals((Object)charClass3));
      assertFalse(charClass0.equals((Object)charClass1));
      assertFalse(charClass4.equals((Object)charClass1));
      assertFalse(charClass4.equals((Object)charClass3));
      assertFalse(charClass4.equals((Object)charClass2));
      assertFalse(charClass5.equals((Object)charClass2));
      assertFalse(charClass5.equals((Object)charClass3));
      assertFalse(charClass5.equals((Object)charClass1));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendLiteral(58, 0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass2.negateClass();
      assertNotNull(charClass3);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      
      CharClass charClass4 = charClass3.appendRange(0, 58);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      
      CharClass charClass5 = charClass2.cleanClass();
      assertNotNull(charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      
      int[] intArray0 = charClass1.toArray();
      assertEquals(2, intArray0.length);
      assertNotNull(intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      
      String string0 = CharClass.charClassToString(intArray0, 0);
      assertEquals(2, intArray0.length);
      assertNotNull(string0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertEquals("[]", string0);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      
      CharClass charClass6 = charClass1.appendFoldedRange((-1564), 2);
      assertNotNull(charClass6);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass2);
      
      CharClass charClass7 = charClass0.appendClassWithSign(intArray0, (-1564));
      assertEquals(2, intArray0.length);
      assertNotNull(charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass7);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass3);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 324;
      intArray0[2] = (-1318);
      intArray0[3] = 32;
      intArray0[4] = 91;
      intArray0[5] = 1103;
      intArray0[6] = 765;
      intArray0[7] = (-1512);
      intArray0[8] = (-921);
      // Undeclared exception!
      try { 
        charClass0.appendClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 3501;
      intArray0[1] = 1368;
      CharClass charClass1 = new CharClass(intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {3501, 1368, 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(charClass1.equals((Object)charClass0));
      
      CharClass charClass2 = charClass0.appendFoldedClass(intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertNotSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertNotSame(charClass2, charClass1);
      assertArrayEquals(new int[] {3501, 1368, 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(charClass0.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass1));
      
      int[][] intArray1 = new int[0][1];
      CharClass charClass3 = charClass0.appendTable(intArray1);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertNotSame(charClass0, charClass1);
      assertNotSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertFalse(charClass0.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass1));
      
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 997);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharGroup charGroup0 = null;
      // Undeclared exception!
      try { 
        charClass1.appendGroup((CharGroup) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 2;
      int int0 = 66639;
      intArray0[2] = 66639;
      intArray0[3] = 1002;
      intArray0[4] = (-1707);
      intArray0[5] = (-266);
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0, 2, 66639, 1002, (-1707), (-266)}, intArray0);
      
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 2, 66639, 1002, (-1707), (-266)}, intArray0);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertEquals(6, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {0, 2, 66639, 1002, (-1707), (-266)}, intArray0);
      
      CharClass charClass3 = charClass2.appendRange(1271, (-4119));
      assertEquals(6, intArray0.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertArrayEquals(new int[] {0, 2, 66639, 1002, (-1707), (-266)}, intArray0);
      
      CharClass charClass4 = charClass3.appendRange(0, (-266));
      assertEquals(6, intArray0.length);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertArrayEquals(new int[] {0, 2, 66639, 1002, (-1707), (-266)}, intArray0);
      
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 66639);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 997;
      intArray0[1] = 997;
      intArray0[2] = 66639;
      intArray0[3] = (-1707);
      intArray0[4] = (-266);
      intArray0[5] = (-1707);
      intArray0[7] = 66639;
      CharClass charClass1 = new CharClass(intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {997, 997, 66639, (-1707), (-266), (-1707), 0, 66639}, intArray0);
      assertFalse(charClass1.equals((Object)charClass0));
      
      int[][] intArray1 = new int[0][0];
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass2);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {997, 997, 66639, (-1707), (-266), (-1707), 0, 66639}, intArray0);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass0));
      
      CharClass charClass3 = charClass1.appendTable(intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass3);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass3, charClass1);
      assertNotSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertArrayEquals(new int[] {997, 997, 66639, (-1707), (-266), (-1707), 0, 66639}, intArray0);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass0));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int[] intArray0 = new int[4];
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      // Undeclared exception!
      try { 
        charClass0.appendGroup((CharGroup) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[16];
      intArray0[0] = (-2376);
      intArray0[1] = (-3198);
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, 3501);
      assertEquals(16, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 997;
      intArray1[1] = 997;
      intArray1[2] = 66639;
      intArray1[3] = (-1707);
      intArray1[4] = (-266);
      intArray1[5] = 65;
      intArray1[6] = 66639;
      intArray1[7] = 66639;
      CharClass charClass2 = new CharClass(intArray1);
      assertEquals(8, intArray1.length);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {997, 997, 66639, (-1707), (-266), 65, 66639, 66639}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass0));
      
      int[][] intArray2 = new int[0][0];
      CharClass charClass3 = charClass2.appendFoldedClass(intArray1);
      assertEquals(8, intArray1.length);
      assertNotNull(charClass3);
      assertNotSame(charClass3, charClass1);
      assertNotSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass2, charClass3);
      assertNotSame(charClass2, charClass1);
      assertNotSame(charClass2, charClass0);
      assertArrayEquals(new int[] {997, 997, 66639, (-1707), (-266), 65, 66639, 66639}, intArray1);
      assertFalse(charClass3.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass0));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass0));
      
      CharClass charClass4 = charClass2.appendTable(intArray2);
      assertEquals(8, intArray1.length);
      assertEquals(0, intArray2.length);
      assertNotNull(charClass4);
      assertSame(charClass4, charClass3);
      assertNotSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertNotSame(charClass4, charClass0);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertNotSame(charClass2, charClass1);
      assertNotSame(charClass2, charClass0);
      assertArrayEquals(new int[] {997, 997, 66639, (-1707), (-266), 65, 66639, 66639}, intArray1);
      assertFalse(charClass4.equals((Object)charClass1));
      assertFalse(charClass4.equals((Object)charClass0));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass0));
      
      CharClass charClass5 = charClass2.appendFoldedClass(intArray1);
      assertEquals(8, intArray1.length);
      assertNotNull(charClass5);
      assertSame(charClass5, charClass4);
      assertNotSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertNotSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertNotSame(charClass2, charClass1);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertArrayEquals(new int[] {997, 997, 66639, (-1707), (-266), 65, 66639, 66639}, intArray1);
      assertFalse(charClass5.equals((Object)charClass0));
      assertFalse(charClass5.equals((Object)charClass1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass0));
      
      CharClass charClass6 = charClass4.appendNegatedTable(intArray2);
      assertEquals(8, intArray1.length);
      assertEquals(0, intArray2.length);
      assertNotNull(charClass6);
      assertSame(charClass4, charClass3);
      assertNotSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass2);
      assertNotSame(charClass4, charClass0);
      assertNotSame(charClass6, charClass0);
      assertSame(charClass6, charClass5);
      assertNotSame(charClass6, charClass1);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass3);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertNotSame(charClass2, charClass1);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass5);
      assertArrayEquals(new int[] {997, 997, 66639, (-1707), (-266), 65, 66639, 66639}, intArray1);
      assertFalse(charClass4.equals((Object)charClass1));
      assertFalse(charClass4.equals((Object)charClass0));
      assertFalse(charClass6.equals((Object)charClass0));
      assertFalse(charClass6.equals((Object)charClass1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass0));
      
      CharClass charClass7 = charClass5.cleanClass();
      assertEquals(8, intArray1.length);
      assertNotNull(charClass7);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass7);
      assertNotSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertNotSame(charClass5, charClass1);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass3);
      assertNotSame(charClass7, charClass0);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass3);
      assertNotSame(charClass7, charClass1);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass5);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass3);
      assertNotSame(charClass2, charClass1);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass5);
      assertArrayEquals(new int[] {997, 997, 66639, (-1707), (-266), 65, 66639, 66639}, intArray1);
      assertFalse(charClass5.equals((Object)charClass0));
      assertFalse(charClass5.equals((Object)charClass1));
      assertFalse(charClass7.equals((Object)charClass0));
      assertFalse(charClass7.equals((Object)charClass1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass0));
      
      int[] intArray3 = charClass7.toArray();
      assertEquals(2, intArray3.length);
      assertEquals(8, intArray1.length);
      assertNotNull(intArray3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass7);
      assertNotSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertNotSame(charClass5, charClass1);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass3);
      assertNotSame(charClass7, charClass0);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass3);
      assertNotSame(charClass7, charClass1);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass5);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass3);
      assertNotSame(charClass2, charClass1);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass5);
      assertArrayEquals(new int[] {(-266), 1114111}, intArray3);
      assertArrayEquals(new int[] {997, 997, 66639, (-1707), (-266), 65, 66639, 66639}, intArray1);
      assertFalse(charClass5.equals((Object)charClass0));
      assertFalse(charClass5.equals((Object)charClass1));
      assertFalse(charClass7.equals((Object)charClass0));
      assertFalse(charClass7.equals((Object)charClass1));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass0));
      
      CharClass charClass8 = charClass2.appendNegatedClass(intArray3);
      assertEquals(2, intArray3.length);
      assertEquals(8, intArray1.length);
      assertNotNull(charClass8);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass8);
      assertNotSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertNotSame(charClass5, charClass1);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass3);
      assertNotSame(charClass7, charClass0);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass8);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass3);
      assertNotSame(charClass7, charClass1);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass5);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray1, intArray0);
      assertNotSame(charClass8, charClass0);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass7);
      assertNotSame(charClass8, charClass1);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass4);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass3);
      assertNotSame(charClass2, charClass1);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass5);
      assertArrayEquals(new int[] {(-266), 1114111}, intArray3);
      assertArrayEquals(new int[] {997, 997, 66639, (-1707), (-266), 65, 66639, 66639}, intArray1);
      assertFalse(charClass5.equals((Object)charClass0));
      assertFalse(charClass5.equals((Object)charClass1));
      assertFalse(charClass7.equals((Object)charClass0));
      assertFalse(charClass7.equals((Object)charClass1));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray3));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(charClass8.equals((Object)charClass0));
      assertFalse(charClass8.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass0));
      
      int int0 = 2177;
      // Undeclared exception!
      charClass5.appendFoldedRange(64, 2177);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-385);
      intArray0[1] = 146;
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass0.appendClassWithSign(intArray0, 1);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {(-385), 146}, intArray0);
      
      CharClass charClass3 = charClass2.cleanClass();
      assertEquals(2, intArray0.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertArrayEquals(new int[] {(-385), 146}, intArray0);
      
      int[] intArray1 = charClass0.toArray();
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-385), 146}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      String string0 = CharClass.charClassToString(intArray1, 0);
      assertEquals(2, intArray1.length);
      assertNotNull(string0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertNotSame(intArray1, intArray0);
      assertEquals("[]", string0);
      assertArrayEquals(new int[] {(-385), 146}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      CharClass charClass4 = charClass2.appendFoldedClass(intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertArrayEquals(new int[] {(-385), 146}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      
      int[][] intArray2 = new int[9][8];
      intArray2[0] = intArray0;
      int[] intArray3 = new int[1];
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = (-385);
      intArray2[1] = intArray3;
      int[] intArray4 = new int[6];
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray0));
      assertFalse(intArray4.equals((Object)intArray1));
      
      intArray4[0] = (-385);
      intArray4[1] = 146;
      intArray4[2] = (-385);
      intArray4[3] = 1;
      intArray4[4] = 1;
      intArray4[5] = 146;
      intArray2[2] = intArray4;
      intArray2[3] = intArray0;
      intArray2[4] = intArray0;
      intArray2[5] = intArray1;
      intArray2[6] = intArray1;
      intArray2[7] = intArray0;
      intArray2[8] = intArray1;
      // Undeclared exception!
      try { 
        charClass0.appendTable(intArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray0 = new int[6][5];
      int[] intArray1 = new int[5];
      intArray1[0] = 1476;
      intArray1[1] = (-5521);
      intArray1[2] = 1212;
      intArray1[3] = 1;
      intArray1[4] = 725;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[4];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 725;
      intArray2[1] = 1212;
      intArray2[2] = 1192;
      intArray2[3] = 1;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[5];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = (-5521);
      intArray3[1] = 1212;
      intArray3[2] = 1;
      intArray3[3] = 725;
      intArray3[4] = (-5521);
      intArray0[2] = intArray3;
      int[] intArray4 = new int[4];
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray1));
      
      intArray4[0] = 1212;
      intArray4[1] = 1476;
      intArray4[2] = 1;
      intArray4[3] = 1476;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[0];
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray3));
      
      intArray0[4] = intArray5;
      int[] intArray6 = new int[7];
      assertFalse(intArray6.equals((Object)intArray1));
      assertFalse(intArray6.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray2));
      assertFalse(intArray6.equals((Object)intArray4));
      assertFalse(intArray6.equals((Object)intArray3));
      
      intArray6[0] = 1192;
      intArray6[1] = (-5521);
      intArray6[2] = 1192;
      intArray6[3] = 725;
      intArray6[4] = 1192;
      intArray6[5] = 1212;
      intArray6[6] = 725;
      intArray0[5] = intArray6;
      // Undeclared exception!
      try { 
        charClass1.appendTableWithSign(intArray0, 1329);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = (-4419);
      String string0 = CharClass.charClassToString(intArray0, (-4419));
      assertEquals(0, intArray0.length);
      assertNotNull(string0);
      assertEquals("[]", string0);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[][] intArrayArray0 = null;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendLiteral(65, 0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass1.appendRange(65, 0);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      
      CharClass charClass4 = charClass3.appendRange(0, 65);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      
      int[] intArray0 = new int[5];
      int[][] intArray1 = new int[8][9];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      // Undeclared exception!
      charClass4.appendNegatedTable(intArray1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-155);
      intArray0[2] = 874;
      intArray0[3] = 0;
      intArray0[4] = 1164;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(5, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0, (-155), 874, 0, 1164}, intArray0);
      
      int[][] intArray1 = new int[7][3];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      CharClass charClass1 = charClass0.appendTableWithSign(intArray1, 874);
      assertEquals(5, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, (-155), 874, 0, 1164}, intArray0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-2376);
      intArray0[1] = (-3198);
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendClass(intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {(-2376), (-3198)}, intArray0);
      
      CharClass charClass3 = charClass2.appendClassWithSign(intArray0, 1031);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertArrayEquals(new int[] {(-2376), (-3198)}, intArray0);
      
      CharClass charClass4 = charClass3.appendFoldedRange(1031, (-3198));
      assertEquals(2, intArray0.length);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertArrayEquals(new int[] {(-2376), (-3198)}, intArray0);
      
      int[] intArray1 = charClass4.toArray();
      assertEquals(2, intArray0.length);
      assertEquals(6, intArray1.length);
      assertNotNull(intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-2376), (-3198)}, intArray0);
      assertArrayEquals(new int[] {(-2376), (-3198), (-2376), (-3198), 1031, (-3198)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      CharClass charClass5 = charClass3.cleanClass();
      assertEquals(2, intArray0.length);
      assertNotNull(charClass5);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertArrayEquals(new int[] {(-2376), (-3198)}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      
      int[] intArray2 = charClass2.toArray();
      assertEquals(2, intArray0.length);
      assertEquals(6, intArray2.length);
      assertNotNull(intArray2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {(-2376), (-3198)}, intArray0);
      assertArrayEquals(new int[] {(-2376), (-3198), (-2376), (-3198), 1031, (-3198)}, intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      CharClass charClass6 = charClass5.appendLiteral((-81), 1031);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass6);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass6);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass1);
      assertArrayEquals(new int[] {(-2376), (-3198)}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray2));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 2042;
      int int0 = 65;
      intArray0[1] = 65;
      intArray0[2] = (-845);
      intArray0[3] = 66639;
      intArray0[4] = (-1075);
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(5, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {2042, 65, (-845), 66639, (-1075)}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass0.negateClass();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1002;
      intArray0[1] = 1002;
      intArray0[2] = 66639;
      intArray0[3] = (-1707);
      intArray0[4] = (-266);
      int int0 = 65;
      intArray0[5] = 65;
      intArray0[6] = 66639;
      intArray0[7] = 66639;
      CharClass charClass1 = new CharClass(intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {1002, 1002, 66639, (-1707), (-266), 65, 66639, 66639}, intArray0);
      assertFalse(charClass1.equals((Object)charClass0));
      
      CharClass charClass2 = charClass0.appendClass(intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertNotSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertNotSame(charClass2, charClass1);
      assertArrayEquals(new int[] {1002, 1002, 66639, (-1707), (-266), 65, 66639, 66639}, intArray0);
      assertFalse(charClass0.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass1));
      
      CharClass charClass3 = charClass1.cleanClass();
      assertEquals(8, intArray0.length);
      assertNotNull(charClass3);
      assertSame(charClass1, charClass3);
      assertNotSame(charClass1, charClass0);
      assertNotSame(charClass1, charClass2);
      assertNotSame(charClass3, charClass0);
      assertNotSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertArrayEquals(new int[] {(-266), 65, 1002, 1002, 66639, 66639, 66639, (-1707)}, intArray0);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass1.equals((Object)charClass2));
      assertFalse(charClass3.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass2));
      
      int int1 = 2040;
      CharClass charClass4 = charClass3.appendRange(2040, 1093);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertNotSame(charClass1, charClass0);
      assertNotSame(charClass1, charClass2);
      assertSame(charClass3, charClass4);
      assertNotSame(charClass3, charClass0);
      assertNotSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertNotSame(charClass4, charClass0);
      assertNotSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertArrayEquals(new int[] {(-266), 65, 1002, 1002, 66639, 66639, 2040, 1093}, intArray0);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass1.equals((Object)charClass2));
      assertFalse(charClass3.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass2));
      assertFalse(charClass4.equals((Object)charClass0));
      assertFalse(charClass4.equals((Object)charClass2));
      
      CharClass charClass5 = charClass1.appendRange((-266), (-1707));
      assertEquals(8, intArray0.length);
      assertNotNull(charClass5);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertNotSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertNotSame(charClass5, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertNotSame(charClass1, charClass0);
      assertNotSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertArrayEquals(new int[] {(-266), 65, 1002, 1002, 66639, 66639, 2040, 1093}, intArray0);
      assertFalse(charClass5.equals((Object)charClass2));
      assertFalse(charClass5.equals((Object)charClass0));
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass1.equals((Object)charClass2));
      
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 1093);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-2376);
      intArray0[1] = (-3198);
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, 3501);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {(-2376), (-3198)}, intArray0);
      
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1002;
      intArray1[1] = 1002;
      intArray1[2] = 66639;
      intArray1[3] = (-1707);
      intArray1[4] = (-266);
      intArray1[5] = 65;
      intArray1[6] = 66639;
      intArray1[7] = 66639;
      CharClass charClass2 = new CharClass(intArray1);
      assertEquals(8, intArray1.length);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {1002, 1002, 66639, (-1707), (-266), 65, 66639, 66639}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass0));
      
      int[][] intArray2 = new int[0][0];
      CharClass charClass3 = charClass2.appendFoldedClass(intArray1);
      assertEquals(8, intArray1.length);
      assertNotNull(charClass3);
      assertSame(charClass3, charClass2);
      assertNotSame(charClass3, charClass1);
      assertNotSame(charClass3, charClass0);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass2, charClass3);
      assertNotSame(charClass2, charClass1);
      assertNotSame(charClass2, charClass0);
      assertArrayEquals(new int[] {1002, 1002, 66639, (-1707), (-266), 65, 66639, 66639}, intArray1);
      assertFalse(charClass3.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass0));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass0));
      
      CharClass charClass4 = charClass2.appendTable(intArray2);
      assertEquals(8, intArray1.length);
      assertEquals(0, intArray2.length);
      assertNotNull(charClass4);
      assertSame(charClass4, charClass3);
      assertNotSame(charClass4, charClass0);
      assertNotSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertNotSame(charClass2, charClass1);
      assertNotSame(charClass2, charClass0);
      assertArrayEquals(new int[] {1002, 1002, 66639, (-1707), (-266), 65, 66639, 66639}, intArray1);
      assertFalse(charClass4.equals((Object)charClass0));
      assertFalse(charClass4.equals((Object)charClass1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass0));
      
      CharClass charClass5 = charClass2.appendFoldedClass(intArray1);
      assertEquals(8, intArray1.length);
      assertNotNull(charClass5);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertNotSame(charClass5, charClass1);
      assertNotSame(charClass5, charClass0);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertNotSame(charClass2, charClass1);
      assertNotSame(charClass2, charClass0);
      assertArrayEquals(new int[] {1002, 1002, 66639, (-1707), (-266), 65, 66639, 66639}, intArray1);
      assertFalse(charClass5.equals((Object)charClass1));
      assertFalse(charClass5.equals((Object)charClass0));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass0));
      
      CharClass charClass6 = charClass4.appendNegatedTable(intArray2);
      assertEquals(8, intArray1.length);
      assertEquals(0, intArray2.length);
      assertNotNull(charClass6);
      assertSame(charClass4, charClass3);
      assertNotSame(charClass4, charClass0);
      assertNotSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass6);
      assertNotSame(charClass6, charClass0);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass3);
      assertNotSame(charClass6, charClass1);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass6);
      assertNotSame(charClass2, charClass1);
      assertNotSame(charClass2, charClass0);
      assertArrayEquals(new int[] {1002, 1002, 66639, (-1707), (-266), 65, 66639, 66639}, intArray1);
      assertFalse(charClass4.equals((Object)charClass0));
      assertFalse(charClass4.equals((Object)charClass1));
      assertFalse(charClass6.equals((Object)charClass0));
      assertFalse(charClass6.equals((Object)charClass1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass0));
      
      CharClass charClass7 = charClass4.appendFoldedRange(1363, (-266));
      assertEquals(8, intArray1.length);
      assertEquals(0, intArray2.length);
      assertNotNull(charClass7);
      assertSame(charClass4, charClass3);
      assertNotSame(charClass4, charClass0);
      assertSame(charClass4, charClass7);
      assertNotSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass6);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass6);
      assertNotSame(charClass7, charClass1);
      assertNotSame(charClass7, charClass0);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass7);
      assertNotSame(charClass2, charClass1);
      assertNotSame(charClass2, charClass0);
      assertArrayEquals(new int[] {1002, 1002, 66639, (-1707), (-266), 65, 66639, 66639}, intArray1);
      assertFalse(charClass4.equals((Object)charClass0));
      assertFalse(charClass4.equals((Object)charClass1));
      assertFalse(charClass7.equals((Object)charClass1));
      assertFalse(charClass7.equals((Object)charClass0));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass0));
      
      int[] intArray3 = charClass5.toArray();
      assertEquals(34, intArray3.length);
      assertEquals(8, intArray1.length);
      assertNotNull(intArray3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass3);
      assertNotSame(charClass5, charClass1);
      assertNotSame(charClass5, charClass0);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass7);
      assertNotSame(charClass2, charClass1);
      assertNotSame(charClass2, charClass0);
      assertArrayEquals(new int[] {1002, 1002, 66639, (-1707), (-266), 65, 66639, 66639}, intArray1);
      assertFalse(charClass5.equals((Object)charClass1));
      assertFalse(charClass5.equals((Object)charClass0));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass0));
      
      CharClass charClass8 = charClass7.appendLiteral((-2376), 8278);
      assertEquals(8, intArray1.length);
      assertEquals(0, intArray2.length);
      assertNotNull(charClass8);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass8);
      assertNotSame(charClass4, charClass0);
      assertSame(charClass4, charClass7);
      assertNotSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass6);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass6);
      assertNotSame(charClass7, charClass1);
      assertSame(charClass7, charClass8);
      assertNotSame(charClass7, charClass0);
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray1, intArray0);
      assertNotSame(charClass8, charClass1);
      assertSame(charClass8, charClass2);
      assertNotSame(charClass8, charClass0);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass7);
      assertNotSame(charClass2, charClass1);
      assertSame(charClass2, charClass8);
      assertNotSame(charClass2, charClass0);
      assertArrayEquals(new int[] {1002, 1002, 66639, (-1707), (-266), 65, 66639, 66639}, intArray1);
      assertFalse(charClass4.equals((Object)charClass0));
      assertFalse(charClass4.equals((Object)charClass1));
      assertFalse(charClass7.equals((Object)charClass1));
      assertFalse(charClass7.equals((Object)charClass0));
      assertFalse(intArray1.equals((Object)intArray3));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(charClass8.equals((Object)charClass1));
      assertFalse(charClass8.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass0));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendRange(66640, 66640);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray0 = new int[0];
      String string0 = CharClass.charClassToString(intArray0, (-5020));
      assertEquals(0, intArray0.length);
      assertNotNull(string0);
      assertEquals("[]", string0);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 66640;
      intArray1[1] = 66640;
      CharClass charClass2 = charClass1.appendClass(intArray1);
      assertEquals(2, intArray1.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {66640, 66640}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[][] intArray2 = new int[0][5];
      CharClass charClass3 = charClass2.appendNegatedTable(intArray2);
      assertEquals(2, intArray1.length);
      assertEquals(0, intArray2.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertArrayEquals(new int[] {66640, 66640}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      CharClass charClass4 = charClass3.negateClass();
      assertEquals(2, intArray1.length);
      assertEquals(0, intArray2.length);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertArrayEquals(new int[] {66640, 66640}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      CharClass charClass5 = charClass4.appendTableWithSign(intArray2, 66640);
      assertEquals(2, intArray1.length);
      assertEquals(0, intArray2.length);
      assertNotNull(charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertArrayEquals(new int[] {66640, 66640}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      CharClass charClass6 = charClass5.appendRange(32, 3203);
      assertEquals(2, intArray1.length);
      assertEquals(0, intArray2.length);
      assertNotNull(charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass6);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass6);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass1);
      assertArrayEquals(new int[] {66640, 66640}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int int0 = 0;
      CharClass charClass2 = charClass1.appendLiteral(65, 0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass2.negateClass();
      assertNotNull(charClass3);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      
      CharClass charClass4 = charClass0.cleanClass();
      assertNotNull(charClass4);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      
      CharClass charClass5 = charClass3.cleanClass();
      assertNotNull(charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        charClass5.appendClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      int int0 = 993;
      CharClass charClass2 = charClass0.appendRange(993, 993);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass3 = charClass2.appendFoldedRange(993, 993);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass4 = charClass0.appendClass(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      
      int int1 = 64;
      CharClass charClass5 = charClass1.appendLiteral(4240, 64);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 64;
      intArray1[1] = 4240;
      intArray1[2] = 64;
      CharClass charClass6 = charClass3.appendClassWithSign(intArray0, 993);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass6);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass5);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      
      intArray1[3] = 201;
      intArray1[4] = 993;
      // Undeclared exception!
      try { 
        charClass4.appendClassWithSign(intArray1, 4240);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 3501;
      intArray0[7] = 1368;
      intArray0[2] = (-3198);
      CharClass charClass1 = new CharClass(intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {3501, 0, (-3198), 0, 0, 0, 0, 1368}, intArray0);
      assertFalse(charClass1.equals((Object)charClass0));
      
      CharClass charClass2 = charClass1.negateClass();
      assertEquals(8, intArray0.length);
      assertNotNull(charClass2);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {0, 3500, 1369, 1114111, 0, 0, 0, 1368}, intArray0);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass0));
      
      int[][] intArray1 = new int[7][6];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      CharClass charClass3 = charClass2.negateClass();
      assertEquals(8, intArray0.length);
      assertNotNull(charClass3);
      assertSame(charClass1, charClass3);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertNotSame(charClass3, charClass0);
      assertArrayEquals(new int[] {0, 3500, 1369, 1114111, 0, 0, 0, 1368}, intArray0);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass0));
      
      CharClass charClass4 = charClass0.appendRange(65, 699);
      assertNotNull(charClass4);
      assertNotSame(charClass0, charClass3);
      assertNotSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertNotSame(charClass0, charClass2);
      assertNotSame(charClass4, charClass2);
      assertNotSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertNotSame(charClass4, charClass1);
      assertFalse(charClass0.equals((Object)charClass3));
      assertFalse(charClass0.equals((Object)charClass1));
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass4.equals((Object)charClass2));
      assertFalse(charClass4.equals((Object)charClass3));
      assertFalse(charClass4.equals((Object)charClass1));
      
      // Undeclared exception!
      charClass4.appendTableWithSign(intArray1, (-175));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray0 = null;
      int int0 = 3767;
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign((int[]) null, 3767);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (-1810);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 1979;
      intArray0[5] = 0;
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, (-1810), 0, 0, 1979, 0}, intArray0);
      
      CharClass charClass2 = charClass1.appendNegatedClass(intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {0, (-1810), 0, 0, 1979, 0}, intArray0);
      
      CharClass charClass3 = charClass1.negateClass();
      assertEquals(6, intArray0.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertArrayEquals(new int[] {0, (-1810), 0, 0, 1979, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1601;
      intArray0[1] = 3838;
      intArray0[2] = 54;
      intArray0[3] = 54;
      CharClass charClass1 = new CharClass(intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {1601, 3838, 54, 54}, intArray0);
      assertFalse(charClass1.equals((Object)charClass0));
      
      CharClass charClass2 = charClass0.appendRange(54, 1601);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertNotSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertNotSame(charClass2, charClass1);
      assertFalse(charClass0.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass1));
      
      CharClass charClass3 = new CharClass();
      assertNotNull(charClass3);
      assertFalse(charClass3.equals((Object)charClass2));
      assertFalse(charClass3.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass0));
      
      // Undeclared exception!
      try { 
        charClass2.appendTableWithSign((int[][]) null, 66640);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int[] intArray0 = null;
      CharClass charClass0 = null;
      try {
        charClass0 = new CharClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 436;
      intArray0[1] = (-1819);
      int int0 = (-49);
      intArray0[2] = (-49);
      intArray0[3] = (-1990);
      int int1 = 4;
      intArray0[4] = 4;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(5, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {436, (-1819), (-49), (-1990), 4}, intArray0);
      
      int[][] intArray1 = new int[8][1];
      int[] intArray2 = new int[2];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 4;
      intArray2[1] = (-49);
      intArray1[0] = intArray2;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      int[] intArray3 = new int[1];
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = (-1819);
      intArray1[7] = intArray3;
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign(intArray1, (-1819));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass2.negateClass();
      assertNotNull(charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 1844;
      intArray0[1] = 0;
      intArray0[2] = 156;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 550;
      intArray0[7] = (-3367);
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {1844, 0, 156, 0, 0, 0, 550, (-3367)}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass0.appendTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 1397;
      intArray0[1] = (-1239);
      intArray0[2] = 0;
      intArray0[3] = (-2122);
      intArray0[4] = 142;
      intArray0[5] = 1318;
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendRange(144, 1114111);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1318;
      intArray1[1] = 142;
      CharClass charClass2 = charClass1.appendFoldedClass(intArray1);
      assertEquals(2, intArray1.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {1318, 142}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      CharClass charClass3 = charClass1.appendFoldedRange(2025, (-145));
      assertNotNull(charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      
      CharClass charClass4 = charClass2.appendLiteral((-1239), (-579));
      assertEquals(2, intArray1.length);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertArrayEquals(new int[] {1318, 142}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int[] intArray0 = new int[4];
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      String string0 = charClass0.toString();
      assertNotNull(string0);
      assertEquals("[]", string0);
      
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, (-1644));
      assertEquals(4, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      
      CharClass charClass2 = charClass1.negateClass();
      assertEquals(4, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      
      int[][] intArray1 = new int[0][2];
      CharClass charClass3 = charClass2.appendTable(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      
      CharClass charClass4 = charClass3.appendNegatedTable(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      
      CharClass charClass5 = charClass4.appendClassWithSign(intArray0, 1114111);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int[] intArray0 = null;
      int int0 = 0;
      String string0 = CharClass.charClassToString((int[]) null, 0);
      assertNotNull(string0);
      assertEquals("[]", string0);
      
      CharClass charClass0 = null;
      try {
        charClass0 = new CharClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 1397;
      intArray0[1] = (-1239);
      intArray0[2] = 0;
      intArray0[3] = (-2122);
      intArray0[4] = 142;
      intArray0[5] = 1318;
      intArray0[6] = (-1374);
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(7, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {1397, (-1239), 0, (-2122), 142, 1318, (-1374)}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign(intArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(0, 0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass0.appendLiteral(0, 0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass1.appendFoldedRange(0, 0);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      
      String string0 = charClass1.toString();
      assertNotNull(string0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertEquals("[0x0]", string0);
      
      int[][] intArray0 = new int[0][7];
      CharClass charClass4 = charClass1.appendTable(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      
      // Undeclared exception!
      try { 
        charClass1.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-385);
      intArray0[1] = 146;
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass0.appendClassWithSign(intArray0, 1);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {(-385), 146}, intArray0);
      
      CharClass charClass3 = charClass2.cleanClass();
      assertEquals(2, intArray0.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertArrayEquals(new int[] {(-385), 146}, intArray0);
      
      int[] intArray1 = charClass0.toArray();
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-385), 146}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      CharClass charClass4 = charClass1.cleanClass();
      assertNotNull(charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      
      int[] intArray2 = charClass2.toArray();
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray2.length);
      assertNotNull(intArray2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {(-385), 146}, intArray0);
      assertArrayEquals(new int[] {(-385), 146}, intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      int[][] intArray3 = new int[7][1];
      int[] intArray4 = new int[9];
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray0));
      
      intArray4[0] = 1;
      intArray4[1] = 6157;
      intArray4[2] = 146;
      intArray4[3] = (-385);
      intArray4[4] = 1;
      intArray4[5] = 1;
      intArray4[6] = 146;
      intArray4[7] = 146;
      intArray4[8] = (-385);
      intArray3[0] = intArray4;
      intArray3[1] = intArray2;
      intArray3[2] = intArray0;
      intArray3[3] = intArray1;
      intArray3[4] = intArray0;
      intArray3[5] = intArray1;
      intArray3[6] = intArray1;
      // Undeclared exception!
      try { 
        charClass2.appendTableWithSign(intArray3, (-821));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = 66639;
      intArray0[3] = 1002;
      intArray0[4] = (-1707);
      intArray0[5] = (-266);
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0, 2, 66639, 1002, (-1707), (-266)}, intArray0);
      
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 2, 66639, 1002, (-1707), (-266)}, intArray0);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertEquals(6, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {0, 2, 66639, 1002, (-1707), (-266)}, intArray0);
      
      int[][] intArray1 = new int[9][6];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      intArray1[8] = intArray0;
      CharClass charClass3 = charClass1.appendNegatedTable(intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(9, intArray1.length);
      assertNotNull(charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertArrayEquals(new int[] {0, 2, 66639, 1002, (-1707), (-266)}, intArray0);
      
      CharClass charClass4 = charClass0.cleanClass();
      assertEquals(6, intArray0.length);
      assertNotNull(charClass4);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertArrayEquals(new int[] {0, 2, 66639, 1002, (-1707), (-266)}, intArray0);
      
      int[] intArray2 = charClass2.toArray();
      assertEquals(6, intArray0.length);
      assertEquals(4, intArray2.length);
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertArrayEquals(new int[] {0, 2, 66639, 1002, (-1707), (-266)}, intArray0);
      assertArrayEquals(new int[] {(-1707), (-266), 0, 1114111}, intArray2);
      assertFalse(intArray2.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 928;
      intArray0[1] = 0;
      intArray0[2] = (-777);
      intArray0[3] = 1;
      intArray0[4] = 2273;
      intArray0[5] = 0;
      intArray0[6] = (-1704);
      intArray0[7] = 0;
      intArray0[8] = (-1338);
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(9, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {928, 0, (-777), 1, 2273, 0, (-1704), 0, (-1338)}, intArray0);
      
      int[][] intArray1 = new int[4][0];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      CharClass charClass1 = charClass0.appendNegatedTable(intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotNull(charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass0, charClass1);
      assertArrayEquals(new int[] {928, 0, (-777), 1, 2273, 0, (-1704), 0, (-1338)}, intArray0);
      
      CharClass charClass2 = charClass1.negateClass();
      assertEquals(9, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotNull(charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertArrayEquals(new int[] {928, 0, (-777), 1, 2273, 0, (-1704), 0, (-1338)}, intArray0);
      
      CharClass charClass3 = charClass2.appendFoldedRange(0, (-777));
      assertEquals(9, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotNull(charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertArrayEquals(new int[] {928, 0, (-777), 1, 2273, 0, (-1704), 0, (-1338)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[1][8];
      int[] intArray1 = new int[3];
      intArray1[0] = 677;
      intArray1[1] = (-1659);
      intArray1[2] = (-1656);
      intArray0[0] = intArray1;
      CharClass charClass1 = charClass0.appendTable(intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      // Undeclared exception!
      try { 
        charClass1.appendNegatedClass(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 68117;
      intArray0[1] = 68117;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0, 68117}, intArray0);
      
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      
      CharClass charClass2 = charClass1.appendRange((-595), 2200);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {(-595), 1114111}, intArray0);
      
      CharClass charClass3 = charClass2.negateClass();
      assertEquals(2, intArray0.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertArrayEquals(new int[] {(-595), 1114111}, intArray0);
      
      int[][] intArray1 = new int[7][2];
      intArray1[0] = intArray0;
      // Undeclared exception!
      try { 
        charClass2.appendFoldedClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendLiteral(65, 0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass2.negateClass();
      assertNotNull(charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      
      CharClass charClass4 = charClass3.appendRange(0, 65);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 65;
      intArray0[1] = 65;
      intArray0[2] = 0;
      intArray0[3] = 65;
      intArray0[4] = 0;
      // Undeclared exception!
      try { 
        charClass4.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1114111;
      intArray0[1] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(3, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {1114111, 0, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign(intArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass2.appendFoldedRange(1114111, 8031);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendLiteral(58, 0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass2.negateClass();
      assertNotNull(charClass3);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      
      int[][] intArray0 = new int[0][1];
      CharClass charClass4 = charClass3.appendTableWithSign(intArray0, 58);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      
      CharClass charClass5 = charClass3.appendRange(0, 58);
      assertNotNull(charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      
      int[] intArray1 = charClass3.toArray();
      assertEquals(4, intArray1.length);
      assertNotNull(intArray1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertArrayEquals(new int[] {0, 57, 0, 1114111}, intArray1);
      
      CharClass charClass6 = charClass2.cleanClass();
      assertNotNull(charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass4);
      
      CharClass charClass7 = charClass3.appendClassWithSign(intArray1, 0);
      assertEquals(4, intArray1.length);
      assertNotNull(charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass5);
      assertArrayEquals(new int[] {0, 1114111, 0, 57}, intArray1);
      
      int[] intArray2 = charClass5.toArray();
      assertEquals(2, intArray2.length);
      assertNotNull(intArray2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {0, 1114111}, intArray2);
      assertFalse(intArray2.equals((Object)intArray1));
      
      CharClass charClass8 = charClass4.appendNegatedClass(intArray2);
      assertEquals(0, intArray0.length);
      assertEquals(2, intArray2.length);
      assertNotNull(charClass8);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass8);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass8);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertNotSame(intArray2, intArray1);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass4);
      assertArrayEquals(new int[] {0, 1114111}, intArray2);
      assertFalse(intArray2.equals((Object)intArray1));
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(58, 0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.negateClass();
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass2.appendRange(0, 58);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      
      int[] intArray0 = charClass2.toArray();
      assertEquals(4, intArray0.length);
      assertNotNull(intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {0, 57, 0, 1114111}, intArray0);
      
      CharClass charClass4 = charClass1.cleanClass();
      assertNotNull(charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      
      int[] intArray1 = charClass3.toArray();
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 1114111}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.cleanClass();
      CharClass charClass2 = charClass1.appendLiteral(65, 0);
      charClass2.toString();
      CharClass charClass3 = charClass2.negateClass();
      charClass3.appendRange(0, 65);
      int[][] intArray0 = new int[8][9];
      // Undeclared exception!
      charClass1.appendNegatedTable(intArray0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[16];
      intArray0[0] = (-2376);
      CharClass charClass1 = new CharClass(intArray0);
      int[][] intArray1 = new int[0][3];
      CharClass charClass2 = charClass0.appendTable(intArray1);
      int[] intArray2 = new int[2];
      intArray2[0] = (-1707);
      intArray2[1] = (-2376);
      charClass0.appendTableWithSign(intArray1, (-4230954));
      CharClass charClass3 = charClass1.appendTable(intArray1);
      assertNotSame(charClass3, charClass2);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-1810);
      // Undeclared exception!
      try { 
        charClass0.appendClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[4];
      intArray0[0] = (-2729);
      intArray0[1] = 1;
      intArray0[2] = 164;
      intArray0[3] = (-2961);
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, 1);
      CharClass charClass2 = charClass1.appendFoldedRange((-1633), (-61));
      int[] intArray1 = new int[6];
      intArray1[0] = 164;
      intArray1[1] = (-61);
      intArray1[2] = (-61);
      intArray1[3] = (-2961);
      intArray1[4] = (-1633);
      intArray1[5] = (-2729);
      CharClass charClass3 = charClass2.appendFoldedClass(intArray1);
      CharClass charClass4 = charClass3.appendLiteral(1, (-61));
      CharClass charClass5 = charClass4.appendClass(intArray0);
      int[] intArray2 = new int[2];
      intArray2[0] = 65;
      intArray2[1] = 1;
      CharClass charClass6 = charClass5.appendClass(intArray2);
      assertSame(charClass3, charClass6);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      String string0 = CharClass.charClassToString(intArray0, (-2336));
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (-1810);
      intArray0[2] = 0;
      int[][] intArray1 = new int[1][1];
      intArray1[0] = intArray0;
      CharClass charClass1 = charClass0.appendTable(intArray1);
      CharClass charClass2 = charClass1.appendClassWithSign(intArray0, 256);
      charClass2.appendFoldedClass(intArray0);
      CharClass charClass3 = charClass2.appendNegatedTable(intArray1);
      charClass3.cleanClass();
      int[] intArray2 = charClass1.toArray();
      assertArrayEquals(new int[] {0, 1114111}, intArray2);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendRange(1368, 1368);
      int[] intArray0 = new int[8];
      intArray0[0] = 1368;
      intArray0[1] = 1368;
      intArray0[2] = 1368;
      intArray0[3] = 1368;
      intArray0[4] = 1368;
      intArray0[5] = 1368;
      intArray0[6] = 1368;
      intArray0[7] = 1368;
      CharClass charClass2 = charClass1.appendClass(intArray0);
      int[][] intArray1 = new int[7][3];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      CharClass charClass3 = charClass2.appendTable(intArray1);
      CharClass charClass4 = charClass3.appendFoldedClass(intArray0);
      CharClass charClass5 = charClass4.appendFoldedRange(553, 1368);
      int[] intArray2 = charClass5.toArray();
      assertEquals(340, intArray2.length);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[16];
      intArray0[0] = (-2376);
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      charClass1.negateClass();
      // Undeclared exception!
      charClass0.appendFoldedRange((-2376), 12542);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      int[] intArray0 = new int[3];
      CharClass charClass0 = new CharClass(intArray0);
      int int0 = (-5728);
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign(intArray0, (-5728));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.cleanClass();
      CharClass charClass2 = charClass1.appendFoldedRange((-3813), (-3813));
      assertSame(charClass2, charClass1);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendRange(1368, 1368);
      int[] intArray0 = new int[8];
      intArray0[0] = 1368;
      intArray0[1] = 1368;
      intArray0[2] = 1368;
      intArray0[3] = 1368;
      CharClass charClass2 = charClass0.negateClass();
      intArray0[4] = 1368;
      intArray0[5] = 1368;
      intArray0[6] = 1368;
      intArray0[7] = 1368;
      charClass1.appendClass(intArray0);
      CharClass charClass3 = new CharClass(intArray0);
      CharClass charClass4 = charClass1.appendClass(intArray0);
      charClass4.cleanClass();
      int int0 = 2040;
      int int1 = 2946;
      CharClass charClass5 = charClass2.appendRange(2946, 2040);
      charClass5.appendRange(1368, 2946);
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 1368);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 1404;
      intArray0[1] = 142;
      intArray0[2] = (-612);
      intArray0[3] = (-892);
      intArray0[4] = 1;
      intArray0[5] = 0;
      intArray0[6] = 779;
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[7][3];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      int[] intArray2 = new int[5];
      intArray2[0] = (-892);
      intArray2[1] = 142;
      intArray2[2] = 1404;
      intArray2[3] = 0;
      intArray2[4] = 1;
      intArray1[3] = intArray2;
      intArray1[4] = intArray0;
      int[] intArray3 = new int[9];
      intArray3[0] = 0;
      intArray3[1] = 142;
      intArray3[2] = 142;
      intArray3[3] = 1;
      intArray3[4] = (-892);
      intArray3[5] = 142;
      intArray3[6] = 1404;
      intArray3[7] = 1404;
      intArray3[8] = 0;
      intArray1[5] = intArray3;
      intArray1[6] = intArray0;
      CharClass charClass1 = charClass0.appendNegatedTable(intArray1);
      // Undeclared exception!
      try { 
        charClass1.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[1][8];
      int[] intArray1 = new int[3];
      int int0 = 677;
      intArray1[0] = 677;
      intArray1[1] = (-1659);
      int int1 = (-1656);
      intArray1[2] = (-1656);
      intArray0[0] = intArray1;
      CharClass charClass1 = charClass0.appendTable(intArray0);
      // Undeclared exception!
      try { 
        charClass1.appendNegatedClass(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 2;
      int int0 = 66639;
      intArray0[2] = 66639;
      intArray0[3] = 1002;
      intArray0[4] = (-1707);
      int int1 = (-266);
      intArray0[5] = (-266);
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendClass(intArray0);
      CharClass charClass2 = charClass1.cleanClass();
      charClass2.appendRange(1271, (-4119));
      int[] intArray1 = new int[5];
      intArray1[0] = 66639;
      intArray1[1] = 2;
      intArray1[2] = 66639;
      intArray1[3] = 1002;
      intArray1[4] = 66639;
      CharClass.charClassToString(intArray1, (-1707));
      int int2 = 0;
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign((int[][]) null, 93);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.appendRange(1368, 1368);
      int[] intArray0 = new int[16];
      intArray0[0] = 1368;
      intArray0[1] = 1368;
      intArray0[2] = 1368;
      intArray0[0] = 1368;
      CharClass charClass1 = charClass0.negateClass();
      intArray0[4] = 1368;
      intArray0[6] = 1368;
      int[][] intArray1 = new int[9][2];
      CharClass charClass2 = charClass0.appendRange(1368, 1368);
      charClass2.negateClass();
      // Undeclared exception!
      try { 
        charClass1.appendTableWithSign(intArray1, (-205));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 255;
      intArray0[1] = (-1716);
      intArray0[2] = 546;
      intArray0[3] = 32;
      intArray0[4] = 1;
      intArray0[5] = 143;
      intArray0[6] = 8180;
      CharClass charClass0 = new CharClass(intArray0);
      // Undeclared exception!
      try { 
        charClass0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[2];
      intArray0[0] = (-385);
      intArray0[1] = 146;
      charClass0.cleanClass();
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, 1);
      CharClass charClass2 = charClass1.cleanClass();
      int[] intArray1 = charClass0.toArray();
      CharClass charClass3 = charClass0.appendClass(intArray1);
      CharClass charClass4 = charClass3.appendClass(intArray0);
      charClass4.appendNegatedClass(intArray1);
      int[][] intArray2 = new int[0][2];
      charClass1.appendTable(intArray2);
      CharClass charClass5 = charClass3.appendClassWithSign(intArray0, 146);
      charClass0.appendFoldedClass(intArray1);
      CharClass charClass6 = charClass5.appendNegatedTable(intArray2);
      charClass2.appendFoldedRange(1362, 1362);
      int[] intArray3 = charClass6.toArray();
      assertArrayEquals(new int[] {(-385), 1114111}, intArray1);
      assertArrayEquals(new int[] {(-385), 1114111}, intArray3);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[16];
      intArray0[0] = (-2376);
      intArray0[0] = (-3198);
      charClass0.appendClassWithSign(intArray0, 3501);
      int[] intArray1 = new int[8];
      intArray1[0] = 997;
      intArray1[1] = 997;
      intArray1[2] = 66639;
      intArray1[3] = (-1707);
      intArray1[4] = (-266);
      intArray1[5] = (-1707);
      intArray1[6] = (-1707);
      intArray1[7] = 66639;
      CharClass charClass1 = new CharClass(intArray1);
      int[][] intArray2 = new int[0][0];
      charClass1.appendFoldedClass(intArray1);
      charClass1.appendTable(intArray2);
      String string0 = CharClass.charClassToString(intArray1, (-3198));
      assertArrayEquals(new int[] {997, 997, 66639, (-1707), (-266), (-1707), (-1707), 66639}, intArray1);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 0;
      intArray0[0] = 0;
      intArray0[1] = 453;
      CharClass charClass0 = new CharClass(intArray0);
      charClass0.appendClass(intArray0);
      int[][] intArray1 = new int[4][6];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign(intArray1, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      int[] intArray0 = new int[3];
      CharClass charClass0 = new CharClass(intArray0);
      charClass0.appendFoldedRange(2471, 2);
      // Undeclared exception!
      try { 
        charClass0.appendTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      int[] intArray0 = new int[4];
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendClass(intArray0);
      int[] intArray1 = new int[0];
      CharClass charClass2 = charClass1.appendNegatedClass(intArray1);
      CharClass charClass3 = charClass2.negateClass();
      assertSame(charClass3, charClass0);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        charClass0.appendClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      int[] intArray0 = null;
      int int0 = 1114111;
      // Undeclared exception!
      try { 
        CharClass.charClassToString((int[]) null, 1114111);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      int[] intArray0 = new int[4];
      CharClass charClass0 = new CharClass(intArray0);
  }
}
