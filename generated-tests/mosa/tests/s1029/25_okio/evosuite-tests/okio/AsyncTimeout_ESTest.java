/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 19:38:00 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.InterruptedIOException;
import java.util.concurrent.TimeUnit;
import okio.AsyncTimeout;
import okio.Buffer;
import okio.Sink;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AsyncTimeout_ESTest extends AsyncTimeout_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.enter();
      MockThrowable mockThrowable0 = new MockThrowable();
      MockIOException mockIOException0 = new MockIOException(mockThrowable0);
      IOException iOException0 = asyncTimeout0.newTimeoutException(mockIOException0);
      assertEquals("timeout", iOException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      MockIOException mockIOException0 = new MockIOException("PbZy%K");
      mockIOException0.toString();
      asyncTimeout0.newTimeoutException(mockIOException0);
      asyncTimeout0.exit(false);
      asyncTimeout0.timedOut();
      Sink sink0 = asyncTimeout0.sink((Sink) null);
      assertNotNull(sink0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.exit(false);
      asyncTimeout0.enter();
      assertFalse(asyncTimeout0.hasDeadline());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      MockThrowable mockThrowable0 = new MockThrowable();
      MockIOException mockIOException0 = new MockIOException("", mockThrowable0);
      IOException iOException0 = asyncTimeout0.exit((IOException) mockIOException0);
      IOException iOException1 = asyncTimeout0.newTimeoutException(iOException0);
      assertEquals("timeout", iOException1.getMessage());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      Buffer buffer0 = new Buffer();
      asyncTimeout0.source(buffer0);
      MockIOException mockIOException0 = new MockIOException("-^qI<u~iZyMU5");
      MockIOException mockIOException1 = new MockIOException(mockIOException0);
      IOException iOException0 = asyncTimeout0.newTimeoutException(mockIOException1);
      assertEquals("java.io.InterruptedIOException: timeout", iOException0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.deadlineNanoTime(0L);
      asyncTimeout1.exit(false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      asyncTimeout1.exit();
      asyncTimeout0.enter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      asyncTimeout0.exit();
      asyncTimeout0.exit();
      asyncTimeout0.timedOut();
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.deadlineNanoTime(0L);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      asyncTimeout0.timeout(861L, timeUnit0);
      asyncTimeout0.exit(false);
      asyncTimeout0.timedOut();
      asyncTimeout0.exit();
      asyncTimeout0.enter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      asyncTimeout0.exit();
      asyncTimeout0.exit();
      asyncTimeout0.timedOut();
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      AsyncTimeout asyncTimeout1 = new AsyncTimeout();
      asyncTimeout1.deadlineNanoTime(0L);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      AsyncTimeout asyncTimeout2 = (AsyncTimeout)asyncTimeout0.timeout(749L, timeUnit0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      asyncTimeout1.timedOut();
      asyncTimeout1.exit();
      asyncTimeout2.enter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      asyncTimeout1.exit();
      asyncTimeout0.exit();
      asyncTimeout2.timedOut();
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.deadlineNanoTime(0L);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      asyncTimeout0.timeout(0L, timeUnit0);
      asyncTimeout0.exit(false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      asyncTimeout0.enter();
      asyncTimeout0.exit(false);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.deadlineNanoTime((-2885L));
      asyncTimeout0.exit(false);
      asyncTimeout1.enter();
      AsyncTimeout asyncTimeout2 = AsyncTimeout.awaitTimeout();
      MockIOException mockIOException0 = new MockIOException("byteCount < 0: ", (Throwable) null);
      MockIOException mockIOException1 = new MockIOException(mockIOException0);
      asyncTimeout1.exit((IOException) mockIOException1);
      asyncTimeout2.enter();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.deadlineNanoTime(0L);
      asyncTimeout1.exit(false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      asyncTimeout1.timedOut();
      asyncTimeout0.exit();
      asyncTimeout0.enter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      asyncTimeout0.exit();
      asyncTimeout0.enter();
      AsyncTimeout asyncTimeout2 = AsyncTimeout.awaitTimeout();
      try { 
        asyncTimeout2.exit(true);
        fail("Expecting exception: InterruptedIOException");
      
      } catch(InterruptedIOException e) {
         //
         // timeout
         //
         verifyException("okio.AsyncTimeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      asyncTimeout0.deadlineNanoTime((-2885L));
      asyncTimeout0.exit(false);
      asyncTimeout0.enter();
      AsyncTimeout asyncTimeout1 = AsyncTimeout.awaitTimeout();
      // Undeclared exception!
      try { 
        asyncTimeout1.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unbalanced enter/exit
         //
         verifyException("okio.AsyncTimeout", e);
      }
  }
}
