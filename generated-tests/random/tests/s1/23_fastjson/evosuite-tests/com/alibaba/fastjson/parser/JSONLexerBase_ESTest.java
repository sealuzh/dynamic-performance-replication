/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 09:49:34 GMT 2019
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONLexerBase_ESTest extends JSONLexerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      char char0 = 'u';
      jSONReaderScanner0.scanDate('u');
      char[] charArray0 = null;
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((char[]) null, (-2147483647));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = "BrowserCompatible";
      JSONScanner jSONScanner0 = new JSONScanner("BrowserCompatible");
      jSONScanner0.scanDate('c');
      char char0 = 'N';
      jSONScanner0.scanNumber();
      Class<Object> class0 = Object.class;
      SymbolTable symbolTable0 = null;
      char char1 = 'w';
      jSONScanner0.scanEnum(class0, (SymbolTable) null, 'w');
      int int0 = 4096;
      JSONScanner.checkDate('N', 'N', 'Q', 'N', 'N', 'c', 49, 4096);
      char char2 = 'v';
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithChar('v');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match v - r, info : pos 1, json : BrowserCompatible
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true", 3392903);
      char[] charArray0 = new char[6];
      charArray0[0] = 'e';
      charArray0[1] = 'L';
      charArray0[2] = '^';
      charArray0[3] = 'H';
      charArray0[4] = '(';
      charArray0[5] = 'D';
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      boolean boolean0 = jSONScanner0.scanBoolean('^');
      assertEquals(3392903, jSONScanner0.getFeatures());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null", (-375));
      jSONScanner0.scanInt('7');
      char[] charArray0 = new char[5];
      charArray0[0] = '7';
      charArray0[1] = '7';
      charArray0[2] = '7';
      charArray0[3] = ':';
      charArray0[4] = '7';
      jSONScanner0.scanFieldBigInteger(charArray0);
      SymbolTable symbolTable0 = new SymbolTable(15);
      jSONScanner0.scanSymbolWithSeperator(symbolTable0, '7');
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("#=Ec");
      jSONReaderScanner0.bp = 15;
      char[] charArray0 = new char[6];
      charArray0[0] = 'y';
      charArray0[1] = 'x';
      jSONReaderScanner0.nextToken(15);
      charArray0[2] = ' ';
      charArray0[3] = 'K';
      charArray0[4] = 'I';
      charArray0[5] = '[';
      jSONReaderScanner0.skipWhitespace();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.arrayCopy(15, charArray0, 15, 13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '\"';
      charArray0[1] = '\"';
      charArray0[2] = '`';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 606, (-3415));
      Feature feature0 = Feature.DisableSpecialKeyDetect;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 4170, 0, 419, 120);
      jSONReaderScanner0.calendar = (Calendar) mockGregorianCalendar0;
      jSONReaderScanner0.config(feature0, false);
      jSONReaderScanner0.scanDate('`');
      assertEquals((-36183), jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("undefined", (-1712));
      jSONScanner0.nextIdent();
      assertEquals(23, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      char[] charArray0 = new char[2];
      char char0 = ' ';
      charArray0[0] = ' ';
      char char1 = 'f';
      charArray0[1] = 'f';
      int int0 = 1451;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1451);
      SymbolTable symbolTable0 = new SymbolTable(1451);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[0] = '3';
      charArray0[1] = '3';
      charArray0[2] = '5';
      charArray0[4] = 'h';
      charArray0[5] = 'v';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, '3', 68);
      long long0 = jSONReaderScanner0.scanLong('\\');
      assertEquals(68, jSONReaderScanner0.getFeatures());
      assertEquals(335L, long0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'q';
      charArray0[1] = ' ';
      charArray0[2] = '6';
      charArray0[3] = '\'';
      charArray0[4] = '\\';
      charArray0[5] = 'J';
      charArray0[6] = 'H';
      charArray0[7] = 'g';
      int int0 = 6;
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 6);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str.lit
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = 45;
      JSONScanner jSONScanner0 = new JSONScanner("Set", 45);
      jSONScanner0.stringDefaultValue = null;
      jSONScanner0.bytesValue();
      jSONScanner0.nextToken();
      char[] charArray0 = new char[1];
      charArray0[0] = '*';
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = 9990;
      JSONScanner jSONScanner0 = new JSONScanner("{5!1CyOfzkHpE", 9990);
      char[] charArray0 = new char[4];
      char[] charArray1 = new char[0];
      jSONScanner0.scanFieldFloat(charArray1);
      char char0 = ':';
      charArray0[0] = ':';
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'n';
      charArray0[1] = 'I';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 58, 91);
      jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanUUID('\\');
      SymbolTable symbolTable0 = new SymbolTable(2097);
      String string0 = jSONReaderScanner0.addSymbol(0, 215, 0, symbolTable0);
      assertEquals("n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '\"';
      charArray0[1] = 'G';
      charArray0[2] = '`';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 606, (-3415));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDate('`');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3cE");
      jSONScanner0.nextToken(6311);
      jSONScanner0.floatValue();
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldInt((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("T", 2805);
      jSONScanner0.scanType("T");
      jSONScanner0.nextIdent();
      jSONScanner0.scanDate('U');
      char[] charArray0 = new char[6];
      charArray0[0] = 'U';
      charArray0[1] = 'U';
      charArray0[2] = 'U';
      charArray0[3] = '[';
      charArray0[4] = 'U';
      charArray0[5] = 'U';
      jSONScanner0.scanFieldDate(charArray0);
      jSONScanner0.longValue();
      char[] charArray1 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.matchField2(charArray1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'T';
      charArray0[1] = '!';
      charArray0[2] = 'h';
      charArray0[3] = 'C';
      charArray0[4] = 'q';
      charArray0[5] = '3';
      charArray0[6] = 'D';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 42, 42);
      jSONReaderScanner0.nextToken(42);
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 't';
      charArray0[1] = '~';
      charArray0[2] = 'R';
      charArray0[3] = 's';
      charArray0[4] = '.';
      charArray0[5] = '^';
      charArray0[6] = '^';
      charArray0[7] = '4';
      charArray0[8] = 'E';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1123, 1123);
      jSONReaderScanner0.scanBoolean('/');
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '';
      charArray0[1] = 'P';
      charArray0[2] = '<';
      charArray0[3] = 'd';
      charArray0[4] = 'b';
      charArray0[5] = '3';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 32);
      jSONReaderScanner0.matchStat = 68;
      jSONReaderScanner0.scanUUID('3');
      jSONReaderScanner0.scanDate('b');
      jSONReaderScanner0.nextToken(32);
      jSONReaderScanner0.next();
      jSONReaderScanner0.stringVal();
      // Undeclared exception!
      try { 
        JSONScanner.charArrayCompare("com.google.common.collect.TreeMultimap", (-1), charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("n");
      jSONScanner0.scanString('1');
      jSONScanner0.token = (-20);
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '\"';
      charArray0[1] = '}';
      charArray0[2] = 'u';
      charArray0[3] = 'u';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 564, 564);
      SymbolTable symbolTable0 = new SymbolTable(3455);
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.scanSymbol(symbolTable0, '}');
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.getTimeZone();
      jSONReaderScanner0.close();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 46, 46);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'N';
      charArray0[1] = '+';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 7, 7);
      jSONReaderScanner0.nextToken((-678));
      assertEquals('+', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("F[9");
      jSONScanner0.scanNumber();
      jSONScanner0.matchStat = 1289;
      jSONScanner0.ch = 'P';
      assertEquals(3, jSONScanner0.token());
      
      jSONScanner0.token = 1289;
      jSONScanner0.putChar('<');
      jSONScanner0.scanDate('P');
      jSONScanner0.scanUUID('7');
      char[] charArray0 = new char[6];
      jSONScanner0.lexError("F[9", (Object[]) null);
      charArray0[0] = '<';
      charArray0[1] = '<';
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) '<';
      Object object0 = new Object();
      objectArray0[1] = object0;
      jSONScanner0.scanDecimal('<');
      jSONScanner0.lexError("F[9", objectArray0);
      jSONScanner0.scanString('Y');
      charArray0[2] = '7';
      charArray0[3] = '<';
      jSONScanner0.locale = null;
      charArray0[4] = '7';
      charArray0[5] = '7';
      jSONScanner0.scanFieldBoolean(charArray0);
      jSONScanner0.indexOf(';', 1289);
      String string0 = jSONScanner0.stringVal();
      assertEquals("[9", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("EOF error");
      char[] charArray0 = new char[8];
      charArray0[0] = '[';
      charArray0[1] = 'D';
      charArray0[2] = '';
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      jSONScanner0.locale = locale0;
      charArray0[3] = 'X';
      charArray0[4] = 'B';
      jSONScanner0.nextToken(12);
      charArray0[5] = 'K';
      charArray0[6] = '0';
      charArray0[7] = 'e';
      jSONScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.scanFieldDate(charArray0);
      jSONScanner0.getLocale();
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '6';
      charArray0[1] = 'G';
      charArray0[2] = 'c';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 13, 13);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal('G');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[0] = '3';
      charArray0[1] = '3';
      charArray0[2] = '5';
      charArray0[3] = 'J';
      charArray0[4] = 'h';
      charArray0[5] = 'v';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 6, 68);
      long long0 = jSONReaderScanner0.scanLong('\\');
      assertEquals(68, jSONReaderScanner0.getFeatures());
      assertEquals(335L, long0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'x';
      charArray0[1] = 'o';
      charArray0[2] = 'R';
      charArray0[3] = 'B';
      charArray0[4] = 'K';
      charArray0[5] = 'n';
      charArray0[6] = '';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 20);
      jSONReaderScanner0.nextTokenWithChar('x');
      jSONReaderScanner0.charAt(20);
      System.setCurrentTimeMillis(0);
      char[] charArray1 = new char[9];
      charArray1[0] = 'R';
      charArray1[1] = '';
      charArray1[2] = 'n';
      charArray1[3] = 'n';
      charArray1[4] = 'n';
      charArray1[5] = 'R';
      charArray1[6] = 'H';
      charArray1[7] = 's';
      charArray1[8] = 'K';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray1, 3120);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("E");
      Feature feature0 = Feature.AllowUnQuotedFieldNames;
      jSONReaderScanner0.config(feature0, false);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldInt(charArray0);
      char char0 = 'm';
      jSONReaderScanner0.sbuf = charArray0;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("j@:@FaBY:,ZUr", 20);
      char[] charArray0 = new char[2];
      charArray0[0] = 'h';
      charArray0[1] = '+';
      jSONScanner0.scanISO8601DateIfMatch(true);
      jSONScanner0.scanFieldInt(charArray0);
      jSONScanner0.scanFieldFloat(charArray0);
      jSONScanner0.isBlankInput();
      jSONScanner0.intValue();
      jSONScanner0.nextToken();
      jSONScanner0.nextToken(20);
      jSONScanner0.charAt(20);
      String string0 = JSONLexerBase.readString(charArray0, 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'J';
      charArray0[1] = 'q';
      charArray0[2] = 'e';
      charArray0[3] = 'g';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 997, 997);
      jSONReaderScanner0.pos();
      jSONReaderScanner0.scanFieldString(charArray0);
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      jSONReaderScanner0.scanLong('g');
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      char[] charArray1 = jSONReaderScanner0.sub_chars(0, 13);
      jSONReaderScanner0.isEnabled((-3780));
      jSONReaderScanner0.subString(997, 13);
      JSONScanner jSONScanner0 = new JSONScanner(charArray1, 13);
      jSONScanner0.bp = 997;
      jSONScanner0.scanFieldLong(charArray1);
      jSONScanner0.stringVal();
      jSONScanner0.setToken(13);
      jSONScanner0.bytesValue();
      jSONReaderScanner0.charAt(598);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 'q';
      objectArray0[1] = (Object) 'g';
      objectArray0[2] = (Object) "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) 'J';
      objectArray0[5] = (Object) jSONReaderScanner0;
      jSONReaderScanner0.lexError("", objectArray0);
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("fastjson.serializerFeatures.MapSortField");
      char[] charArray0 = new char[7];
      charArray0[0] = '\\';
      Feature feature0 = Feature.CustomMapDeserializer;
      jSONScanner0.config(feature0, false);
      charArray0[1] = 'D';
      charArray0[2] = 'D';
      charArray0[3] = 'd';
      char char0 = '7';
      jSONScanner0.scanBoolean('\\');
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("float overflow : ", 59);
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = "AutoCloseSource";
      int int0 = 117;
      JSONScanner jSONScanner0 = new JSONScanner("AutoCloseSource", 117);
      jSONScanner0.tokenName();
      char[] charArray0 = new char[6];
      charArray0[0] = '=';
      char char0 = 'd';
      charArray0[1] = 'd';
      charArray0[2] = 'i';
      charArray0[3] = ']';
      charArray0[4] = '\\';
      charArray0[5] = 'p';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 117);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str.lit
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'r';
      charArray0[1] = 'B';
      char char0 = '=';
      charArray0[2] = '=';
      charArray0[3] = 'o';
      char char1 = 'F';
      charArray0[4] = 'F';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 66);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.bp = 66;
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 23);
      jSONScanner0.bytesValue();
      jSONScanner0.nextToken();
      // Undeclared exception!
      jSONScanner0.scanString();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = "}h@;PFQ^";
      int int0 = 7;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("}h@;PFQ^", 7);
      jSONReaderScanner0.scanSymbol((SymbolTable) null);
      jSONReaderScanner0.longValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - h, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\u0000", 42);
      SymbolTable symbolTable0 = new SymbolTable(42);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'R';
      charArray0[1] = '{';
      charArray0[2] = 'o';
      charArray0[3] = 'E';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 555, 555);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanUUID('b');
      JSONScanner jSONScanner0 = new JSONScanner("new");
      Locale locale0 = new Locale("uGD8Vd25C]yFIHc");
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      LinkedHashSet<Locale.LanguageRange> linkedHashSet0 = new LinkedHashSet<Locale.LanguageRange>();
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      linkedHashSet0.removeIf(predicate1);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>(linkedHashSet0);
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null);
      jSONReaderScanner0.scanStringArray(set0, 'c');
      jSONScanner0.scanFieldString(charArray0);
      SymbolTable symbolTable0 = new SymbolTable(2565);
      jSONScanner0.scanFieldStringArray(charArray0, (-1), symbolTable0);
      jSONReaderScanner0.isBlankInput();
      Class<Integer> class0 = Integer.class;
      jSONScanner0.scanEnum(class0, symbolTable0, '0');
      jSONScanner0.scanFloat('b');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'I';
      charArray0[1] = 'O';
      charArray0[2] = 'q';
      charArray0[3] = '7';
      charArray0[4] = '.';
      charArray0[5] = '9';
      charArray0[6] = 'G';
      charArray0[7] = '{';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 256, 256);
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      jSONReaderScanner0.matchStat = 124;
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.scanFieldString(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("g/NvPrr^*", 1236);
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.isBlankInput();
      char[] charArray0 = new char[4];
      char char0 = 'u';
      int int0 = (-757);
      jSONReaderScanner0.pos = 59;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipWhitespace();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      jSONReaderScanner0.scanInt(')');
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanDate(')');
      jSONReaderScanner0.getLocale();
      char[] charArray0 = new char[6];
      charArray0[0] = ')';
      jSONReaderScanner0.scanFieldInt(charArray0);
      charArray0[1] = ')';
      charArray0[2] = ')';
      charArray0[3] = ')';
      charArray0[4] = ')';
      jSONReaderScanner0.scanFieldFloat(charArray0);
      charArray0[5] = ')';
      jSONReaderScanner0.scanFieldDate(charArray0);
      int int0 = 1;
      JSONScanner.charArrayCompare("null", 1, charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = (-1097);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"@A\"WU2i", (-1097));
      SymbolTable symbolTable0 = new SymbolTable(1481);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0, '5');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = '6';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3306);
      jSONReaderScanner0.nextToken(872);
      jSONReaderScanner0.integerValue();
      jSONReaderScanner0.scanType("error parse null or new");
      jSONReaderScanner0.scanDecimal('6');
      jSONReaderScanner0.scanBoolean('{');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java");
      jSONReaderScanner0.nextToken();
      char[] charArray0 = new char[3];
      charArray0[0] = 't';
      charArray0[1] = 'I';
      charArray0[2] = '.';
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.isEnabled((-3070), (-3070));
      SymbolTable symbolTable0 = new SymbolTable(9999);
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, 't');
      jSONReaderScanner0.isRef();
      float float0 = jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals('a', jSONReaderScanner0.getCurrent());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false");
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.getLocale();
      JSONScanner jSONScanner0 = new JSONScanner("false", 0);
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '3';
      charArray0[1] = 'g';
      charArray0[2] = '5';
      charArray0[3] = 'J';
      charArray0[4] = 'h';
      charArray0[5] = 'v';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 6, 68);
      long long0 = jSONReaderScanner0.scanLong('\\');
      assertEquals(3L, long0);
      assertEquals(68, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" 0>D+.{cvD%cYP|drL", 0);
      char char0 = ':';
      char[] charArray0 = new char[8];
      charArray0[0] = ':';
      charArray0[1] = ':';
      charArray0[2] = 'Z';
      charArray0[3] = ':';
      charArray0[4] = ':';
      charArray0[5] = ':';
      charArray0[6] = ':';
      charArray0[7] = ':';
      jSONScanner0.scanFieldBigInteger(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon(117);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - 0, info : pos 1, json :  0>D+.{cvD%cYP|drL
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Feature");
      jSONReaderScanner0.next();
      jSONReaderScanner0.scanNumber();
      char[] charArray0 = new char[3];
      charArray0[0] = 'e';
      charArray0[1] = 'e';
      charArray0[2] = 'e';
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.getCurrent();
      jSONReaderScanner0.scanFloat('e');
      int int0 = 36;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = 10;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 10);
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.scanFloat('3');
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.scanDecimal('V');
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.scanFieldUUID(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '[';
      charArray0[1] = '5';
      charArray0[2] = 'K';
      charArray0[3] = '-';
      charArray0[4] = 'Q';
      charArray0[5] = 'R';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 4);
      jSONScanner0.nextToken((-2790));
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ifrr~gDCoM\"Rx>");
      char char0 = '6';
      jSONScanner0.putChar('6');
      jSONScanner0.longValue();
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldBigInteger((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("?v[Z", (-2636));
      char char0 = '{';
      jSONReaderScanner0.scanDate('{');
      char[] charArray0 = new char[2];
      charArray0[0] = '{';
      charArray0[1] = '{';
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.charAt(4316);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-2), 84);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = "O|8hG~";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("O|8hG~", (-571));
      Object[] objectArray0 = new Object[7];
      int int0 = 8;
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.nextToken(8);
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) jSONReaderScanner0;
      objectArray0[2] = (Object) jSONReaderScanner0;
      objectArray0[3] = (Object) jSONReaderScanner0;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(8);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - |, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("feature");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.features = 1278;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDate((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = "";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 47);
      char char0 = 'E';
      jSONReaderScanner0.scanDecimal('E');
      jSONReaderScanner0.nextToken(47);
      jSONReaderScanner0.bytesValue();
      JSONScanner.checkDate('3', 'v', 'g', 'v', '|', 'u', (-1), 612);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextIdent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("bcfas", (-1618730619));
      char[] charArray0 = new char[9];
      charArray0[0] = 'M';
      charArray0[1] = 'h';
      charArray0[2] = 'Y';
      charArray0[3] = 'a';
      charArray0[4] = '{';
      charArray0[5] = '$';
      charArray0[6] = '{';
      charArray0[7] = 'r';
      charArray0[8] = '/';
      jSONReaderScanner0.scanFieldString(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = 999;
      JSONScanner jSONScanner0 = new JSONScanner("undefined", 999);
      char char0 = '<';
      jSONScanner0.scanString('<');
      jSONScanner0.getCalendar();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '&';
      charArray0[1] = ';';
      charArray0[2] = 'I';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3102, (-2246));
      jSONReaderScanner0.features = 3102;
      jSONReaderScanner0.token = 1550;
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.tokenName();
      jSONReaderScanner0.subString(117, 16);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-1000), (-4842));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null", 118);
      jSONScanner0.scanNullOrNew();
      Feature feature0 = Feature.SortFeidFastMatch;
      jSONScanner0.config(feature0, true);
      Locale locale0 = Locale.CANADA;
      jSONScanner0.locale = locale0;
      // Undeclared exception!
      try { 
        JSONLexerBase.readString((char[]) null, 118);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'O';
      charArray0[1] = 'D';
      charArray0[2] = '.';
      charArray0[3] = '#';
      int int0 = 202;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 202, 202);
      jSONReaderScanner0.scanInt('#');
      jSONReaderScanner0.scanDouble('.');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fastjson.serializerFeatures.MapSortField", (-417));
      jSONReaderScanner0.scanSymbolUnQuoted((SymbolTable) null);
      jSONReaderScanner0.isEnabled((-417));
      char[] charArray0 = new char[3];
      charArray0[0] = 'v';
      jSONReaderScanner0.scanIdent();
      Feature feature0 = Feature.SupportArrayToBean;
      jSONReaderScanner0.config(feature0, true);
      charArray0[1] = '2';
      charArray0[2] = 'c';
      // Undeclared exception!
      try { 
        JSONScanner.charArrayCompare("fastjson.serializerFeatures.MapSortField", (-278), charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = "**ju.I}_S@]|B:SC_Tm";
      JSONScanner jSONScanner0 = new JSONScanner("**ju.I}_S@]|B:SC_Tm", 1332);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldLong(charArray0);
      jSONScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.putChar('s');
      char char0 = 'h';
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.setTime('s', 's', '\\', 'h', 'q', '3');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = "I*, Q";
      int int0 = (-2234);
      JSONScanner jSONScanner0 = new JSONScanner("I*, Q", (-2234));
      jSONScanner0.skipComment();
      // Undeclared exception!
      try { 
        jSONScanner0.doubleValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '(';
      charArray0[1] = 'F';
      charArray0[2] = '*';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 661);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      double double0 = jSONReaderScanner0.scanDouble('*');
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringReader stringReader0 = new StringReader("not match ");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 193);
      jSONReaderScanner0.scanLong('g');
      JSONScanner jSONScanner0 = new JSONScanner("not match ", 305);
      char[] charArray0 = new char[1];
      charArray0[0] = 'g';
      jSONScanner0.scanFieldInt(charArray0);
      TimeZone timeZone0 = TimeZone.getDefault();
      jSONScanner0.setTimeZone(timeZone0);
      jSONScanner0.bytesValue();
      jSONScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      
      boolean boolean0 = jSONReaderScanner0.isEnabled(91, 495);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("06(");
      jSONReaderScanner0.isRef();
      char char0 = '0';
      jSONReaderScanner0.scanFloat('0');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'd';
      charArray0[1] = '[';
      charArray0[2] = 'N';
      charArray0[3] = 'O';
      charArray0[4] = 's';
      JSONScanner.charArrayCompare("scan new error", 41, charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 7, 44);
      jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'q';
      charArray0[1] = 'T';
      charArray0[2] = '7';
      charArray0[3] = 'Z';
      charArray0[4] = '1';
      charArray0[5] = 'w';
      int int0 = 10;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 10, 10);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("SupportNonPublicField", 42);
      jSONReaderScanner0.skipWhitespace();
      char[] charArray0 = new char[9];
      charArray0[0] = '|';
      charArray0[1] = '3';
      charArray0[2] = '';
      charArray0[3] = 'Q';
      charArray0[4] = '+';
      charArray0[5] = 'p';
      charArray0[6] = ' ';
      charArray0[7] = 'M';
      charArray0[8] = '+';
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.longValue();
      JSONScanner jSONScanner0 = new JSONScanner("_H*<", 44);
      SymbolTable symbolTable0 = new SymbolTable(42);
      jSONScanner0.scanSymbol(symbolTable0);
      // Undeclared exception!
      try { 
        jSONScanner0.sub_chars(44, 995);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '\"';
      charArray0[1] = ' ';
      charArray0[2] = 'D';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 405, 832);
      JSONLexerBase.readString(charArray0, 0);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString(' ');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'n';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 8);
      jSONReaderScanner0.ch = 'R';
      jSONReaderScanner0.info();
      jSONReaderScanner0.pos = 8;
      int int0 = 3392903;
      jSONReaderScanner0.scanBoolean('n');
      jSONReaderScanner0.scanLong('n');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '6';
      charArray0[1] = 'I';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3306);
      jSONReaderScanner0.nextToken(872);
      jSONReaderScanner0.integerValue();
      jSONReaderScanner0.scanType("error parse null or new");
      jSONReaderScanner0.scanDecimal('6');
      jSONReaderScanner0.scanBoolean('{');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = 1707;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("toString", 1707);
      jSONReaderScanner0.getLocale();
      String string0 = "op";
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.lexError("op", (Object[]) null);
      int int1 = (-1899);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken((-1899));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StringReader stringReader0 = new StringReader("N3e8P@");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      int int0 = jSONReaderScanner0.token();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("WriteNullListAsEmpty", (-207));
      jSONScanner0.scanString(';');
      jSONScanner0.setToken(1383);
      jSONScanner0.next();
      jSONScanner0.getCurrent();
      assertEquals(1383, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'A';
      charArray0[1] = 'o';
      charArray0[2] = 'u';
      charArray0[3] = '^';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 106, 106);
      int int0 = 42;
      jSONReaderScanner0.isEnabled(255, 42);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 106);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = ',';
      charArray0[1] = 'g';
      charArray0[2] = '\'';
      charArray0[3] = 'S';
      charArray0[4] = '^';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1810, (-305));
      jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = "TreeSet";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TreeSet", 2669);
      char char0 = 'R';
      char[] charArray0 = new char[9];
      charArray0[0] = 'V';
      jSONReaderScanner0.nextIdent();
      charArray0[1] = 'R';
      charArray0[2] = 'R';
      charArray0[3] = 'R';
      charArray0[4] = 'R';
      charArray0[5] = 'R';
      charArray0[6] = 'R';
      charArray0[7] = 'R';
      charArray0[8] = 'R';
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.scanInt('R');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("B KHv'cjw");
      jSONScanner0.scanSymbolUnQuoted((SymbolTable) null);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbolUnQuoted((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier :  pos 1, json : B KHv'cjw
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'b';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 468);
      JSONScanner jSONScanner0 = new JSONScanner("false", 0);
      Class<Object> class0 = Object.class;
      Collection<String> collection0 = jSONScanner0.newCollectionByType(class0);
      jSONReaderScanner0.scanStringArray(collection0, '2');
      jSONReaderScanner0.indexOf('b', 468);
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.scanFieldInt(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("01PhR({'#epN\"");
      char char0 = 'T';
      jSONReaderScanner0.scanInt('T');
      jSONReaderScanner0.stringDefaultValue = "01PhR({'#epN\"";
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Ph1 Ohr`6", 31);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.sbuf = charArray0;
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.scanFloat('E');
      jSONReaderScanner0.next();
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("Ph1 Ohr`6");
      jSONScanner0.isEOF();
      jSONScanner0.scanFieldDecimal(jSONReaderScanner0.sbuf);
      jSONScanner0.scanFieldBoolean(jSONReaderScanner0.sbuf);
      jSONScanner0.matchField2(jSONReaderScanner0.sbuf);
      assertEquals('O', jSONReaderScanner0.getCurrent());
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '*';
      charArray0[1] = 'i';
      charArray0[2] = 'm';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2056, 2056);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.scanStringArray(linkedList0, 'm');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new", 99999);
      jSONReaderScanner0.eofPos = 99999;
      jSONReaderScanner0.nextToken(99999);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(99999, "com.alibaba.fastjson.parser.JSONLexerBase", 114, (-2582), (-2936), 114, 58, (-562), 58, 99999, (-2147483647));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month 114
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("fYb\"B&M9'+\"Rw");
      jSONScanner0.scanString();
      jSONScanner0.scanInt('C');
      jSONScanner0.integerValue();
      jSONScanner0.pos = 160;
      jSONScanner0.scanISO8601DateIfMatch();
      jSONScanner0.ch = 'C';
      Feature feature0 = Feature.InitStringFieldAsEmpty;
      jSONScanner0.isEnabled(feature0);
      jSONScanner0.isRef();
      jSONScanner0.scanUUID('6');
      SymbolTable symbolTable0 = new SymbolTable(737);
      jSONScanner0.scanSymbolWithSeperator(symbolTable0, 'y');
      char[] charArray0 = new char[6];
      charArray0[0] = 'y';
      charArray0[1] = 'C';
      charArray0[2] = '6';
      charArray0[3] = 'C';
      charArray0[4] = '6';
      charArray0[5] = '6';
      jSONScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("TreeSet");
      jSONScanner0.scanIdent();
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = 43;
      JSONScanner jSONScanner0 = new JSONScanner("%d>zi|7;9Y9", 43);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloatArray(charArray0);
      char char0 = 'h';
      jSONScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('h', 'h', 'h');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("fYb\"B&M9'+\"Rw");
      jSONScanner0.scanString();
      jSONScanner0.scanInt('C');
      assertEquals('B', jSONScanner0.getCurrent());
      
      jSONScanner0.integerValue();
      jSONScanner0.scanISO8601DateIfMatch();
      jSONScanner0.ch = 'C';
      Feature feature0 = Feature.InitStringFieldAsEmpty;
      jSONScanner0.isEnabled(feature0);
      jSONScanner0.isRef();
      jSONScanner0.scanUUID('6');
      SymbolTable symbolTable0 = new SymbolTable(737);
      jSONScanner0.scanSymbolWithSeperator(symbolTable0, 'y');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("@0uwyKp/iQj");
      jSONReaderScanner0.scanFloat('c');
      char[] charArray0 = new char[1];
      charArray0[0] = 'X';
      double double0 = jSONReaderScanner0.scanFieldDouble(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = 1707;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("toString", 1707);
      jSONReaderScanner0.getLocale();
      String string0 = "op";
      jSONReaderScanner0.lexError("op", (Object[]) null);
      int int1 = (-1899);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken((-1899));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("}!%LoB", 1907);
      SymbolTable symbolTable0 = new SymbolTable(1907);
      char[] charArray0 = new char[2];
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      charArray0[0] = 'Y';
      char char0 = '\"';
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol(charArray0, 99, 1907, 1907);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\":\"", 1494);
      char[] charArray0 = new char[9];
      charArray0[0] = 'D';
      jSONScanner0.token = 127;
      JSONLexerBase.readString(charArray0, 9);
      charArray0[1] = ' ';
      charArray0[2] = '3';
      charArray0[3] = 'R';
      charArray0[4] = 'V';
      charArray0[5] = '&';
      charArray0[6] = 'A';
      charArray0[7] = '@';
      charArray0[8] = 'O';
      jSONScanner0.scanFieldFloatArray2(charArray0);
      jSONScanner0.putChar('2');
      assertEquals((-2), jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\":\"");
      SymbolTable symbolTable0 = new SymbolTable(57);
      jSONReaderScanner0.addSymbol(1494, 12, 110, symbolTable0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("b");
      char[] charArray0 = new char[1];
      char char0 = 'Y';
      charArray0[0] = 'Y';
      jSONReaderScanner0.scanFieldUUID(charArray0);
      char[] charArray1 = new char[6];
      charArray1[0] = 'Y';
      char[] charArray2 = new char[0];
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan false error", (-1226));
      int int0 = jSONScanner0.getFeatures();
      assertEquals((-1226), int0);
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '\"';
      charArray0[1] = ' ';
      charArray0[2] = 'D';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 405, 832);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString(' ');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("# H^{3cH]en.m ;RO");
      jSONScanner0.getLocale();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = "java.time.ZoneId";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.time.ZoneId");
      int int0 = 891;
      jSONReaderScanner0.matchStat = 891;
      char char0 = 'z';
      jSONReaderScanner0.scanDouble('z');
      char[] charArray0 = new char[7];
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      charArray0[0] = 'z';
      charArray0[1] = 'z';
      charArray0[2] = 'T';
      charArray0[3] = 'z';
      jSONReaderScanner0.skipWhitespace();
      charArray0[4] = 'z';
      charArray0[5] = 'z';
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '=';
      charArray0[1] = 'c';
      charArray0[2] = '\"';
      charArray0[3] = 'R';
      charArray0[4] = '0';
      charArray0[5] = 'Z';
      charArray0[6] = '!';
      charArray0[7] = 'e';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 8, 5);
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.indexOf('D', 5);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-1573), (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = 91;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 91);
      char char0 = '(';
      jSONReaderScanner0.scanDate('(');
      jSONReaderScanner0.next();
      Class<Object> class0 = Object.class;
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = 69;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" BB^~0+sRVtN", 69);
      char[] charArray0 = new char[9];
      jSONReaderScanner0.isBlankInput();
      charArray0[0] = 'u';
      charArray0[1] = '@';
      charArray0[2] = ']';
      charArray0[3] = 'n';
      charArray0[4] = '[';
      charArray0[5] = 'U';
      charArray0[6] = 'j';
      charArray0[7] = '!';
      jSONReaderScanner0.scanFloat('N');
      SymbolTable symbolTable0 = new SymbolTable(44);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, (-1353), symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'r';
      charArray0[1] = ',';
      charArray0[2] = 'g';
      charArray0[3] = 'p';
      charArray0[4] = ']';
      charArray0[5] = 'v';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2304);
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.getTimeZone();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("<QqW0");
      jSONScanner0.isEOF();
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'b';
      charArray0[1] = '8';
      charArray0[2] = 'W';
      charArray0[3] = 'C';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 123);
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.features = 2429;
      jSONReaderScanner0.scanIdent();
      SymbolTable symbolTable0 = new SymbolTable(2461);
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol("qAoB8", 2429, 120, 46);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("/ubV");
      char[] charArray0 = new char[2];
      charArray0[0] = '=';
      int int0 = 110;
      SymbolTable symbolTable0 = new SymbolTable(110);
      jSONScanner0.scanSymbolWithSeperator(symbolTable0, '=');
      charArray0[1] = ')';
      jSONScanner0.scanFieldFloatArray2(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithChar(']');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match ] - /, info : pos 0, json : /ubV
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 59);
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.scanIdent();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("SZTB");
      char[] charArray0 = new char[3];
      charArray0[0] = 'L';
      charArray0[1] = 'j';
      charArray0[2] = 'j';
      jSONScanner0.sbuf = charArray0;
      jSONScanner0.ch = 'j';
      jSONScanner0.scanLong('j');
      char[] charArray1 = new char[0];
      jSONScanner0.scanFieldIntArray(charArray1);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      int int0 = 1064;
      char[] charArray0 = new char[9];
      charArray0[0] = ',';
      charArray0[1] = 'i';
      charArray0[2] = 'W';
      jSONScanner0.info();
      charArray0[3] = ':';
      charArray0[4] = 'a';
      char[] charArray1 = new char[2];
      charArray1[0] = 'a';
      charArray1[1] = ',';
      jSONScanner0.scanFieldDouble(charArray1);
      charArray0[5] = '(';
      charArray0[6] = '4';
      charArray0[7] = 's';
      charArray0[8] = 'D';
      // Undeclared exception!
      try { 
        jSONScanner0.copyTo(1064, 1064, charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 96);
      char[] charArray0 = new char[1];
      jSONReaderScanner0.charArrayCompare(charArray0);
      charArray0[0] = 'a';
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      jSONReaderScanner0.scanUUID('I');
      jSONReaderScanner0.scanLong('I');
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanBoolean('b');
      boolean boolean0 = jSONReaderScanner0.isEnabled(96);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.parser.JSONLexerBase");
      jSONReaderScanner0.scanLong('j');
      jSONReaderScanner0.scanLong('W');
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.parser.JSONLexerBase");
      SymbolTable symbolTable0 = new SymbolTable(66);
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol((-1), (-1), (-1), symbolTable0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      char[] charArray0 = new char[3];
      charArray0[0] = '4';
      charArray0[1] = '<';
      charArray0[2] = '3';
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      Locale locale0 = new Locale("", "", "");
      jSONReaderScanner0.setLocale(locale0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'l';
      charArray0[1] = '4';
      charArray0[2] = '#';
      charArray0[3] = 'c';
      charArray0[4] = '{';
      charArray0[5] = 'P';
      charArray0[6] = '=';
      charArray0[7] = '#';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2315);
      int int0 = jSONReaderScanner0.matchStat();
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, int0);
      
      jSONReaderScanner0.tokenName();
      Feature feature0 = Feature.DisableCircularReferenceDetect;
      jSONReaderScanner0.isEnabled(feature0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = 100;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("(dTZrhc", 100);
      int int1 = 1854;
      char[] charArray0 = new char[4];
      jSONReaderScanner0.nextToken();
      charArray0[0] = '+';
      charArray0[1] = '^';
      charArray0[2] = '^';
      charArray0[3] = '}';
      int int2 = 2005;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = 100;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(".R1Frk{8", 100);
      char char0 = 'A';
      jSONReaderScanner0.scanUUID('A');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ypxF8Lbhe!6h");
      jSONScanner0.timeZone = null;
      jSONScanner0.putChar('N');
      jSONScanner0.scanISO8601DateIfMatch(true);
      char char0 = '&';
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('&', '&', '&');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("6i");
      char[] charArray0 = new char[9];
      charArray0[0] = 'S';
      charArray0[1] = ' ';
      charArray0[2] = ')';
      charArray0[3] = '[';
      charArray0[4] = 'M';
      charArray0[5] = ']';
      charArray0[6] = 'D';
      charArray0[7] = '}';
      charArray0[8] = 'n';
      jSONReaderScanner0.scanFieldFloat(charArray0);
      char[] charArray1 = new char[2];
      charArray1[0] = '#';
      char char0 = '';
      char char1 = '#';
      jSONReaderScanner0.scanDate('#');
      charArray1[1] = '';
      jSONReaderScanner0.matchField(charArray1);
      jSONReaderScanner0.scanFieldFloat(charArray1);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = 36;
      JSONScanner jSONScanner0 = new JSONScanner("uy166wwB>:", 36);
      char char0 = 'd';
      jSONScanner0.resetStringPosition();
      jSONScanner0.scanBoolean('d');
      char char1 = '2';
      char[] charArray0 = new char[2];
      charArray0[0] = 'd';
      jSONScanner0.scanType(" - ");
      jSONScanner0.pos = 36;
      charArray0[1] = '2';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 36);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'O';
      charArray0[1] = 'S';
      charArray0[2] = 'P';
      charArray0[3] = 'i';
      charArray0[4] = '1';
      charArray0[5] = 'd';
      charArray0[6] = 'V';
      int int0 = 1042;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1042, 42);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 11);
      SymbolTable symbolTable0 = new SymbolTable(95);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, (-651), symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("illegal stat, textLength is zero");
      int int0 = 26;
      SymbolTable symbolTable0 = new SymbolTable(26);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0, 'H');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("]41\"/a&lthPHM]");
      boolean boolean0 = jSONScanner0.isEnabled((-2068));
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '_';
      charArray0[1] = '=';
      charArray0[2] = 'q';
      charArray0[3] = ')';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      boolean boolean0 = true;
      SymbolTable symbolTable0 = new SymbolTable(4302);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : \u001Apos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1981, 58);
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.close();
      jSONReaderScanner0.bp = 13;
      jSONReaderScanner0.newCollectionByType(class0);
      char[] charArray1 = new char[5];
      charArray1[0] = 'N';
      charArray1[1] = '&';
      charArray1[2] = '%';
      charArray1[3] = '4';
      charArray1[4] = 'C';
      jSONReaderScanner0.scanFieldFloat(charArray1);
      jSONReaderScanner0.intValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(".<p");
      jSONScanner0.longValue();
      jSONScanner0.isBlankInput();
      Feature feature0 = Feature.AutoCloseSource;
      jSONScanner0.config(feature0, false);
      jSONScanner0.stringDefaultValue();
      jSONScanner0.scanString('(');
      char char0 = 'A';
      jSONScanner0.scanDecimal('A');
      jSONScanner0.sp = (-414);
      int int0 = (-803);
      char[] charArray0 = new char[3];
      charArray0[0] = 'A';
      charArray0[1] = '(';
      charArray0[2] = '(';
      int int1 = 48;
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'b';
      charArray0[1] = 'h';
      charArray0[2] = 'V';
      charArray0[3] = '3';
      charArray0[4] = 'n';
      charArray0[5] = 'x';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 17);
      Feature feature0 = Feature.AllowUnQuotedFieldNames;
      jSONReaderScanner0.config(feature0, false);
      assertEquals(985, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("(8Xe,Xwe>G?uZ}NTk0L", (-657));
      jSONReaderScanner0.isBlankInput();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-657));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ',';
      charArray0[1] = '1';
      charArray0[2] = '/';
      charArray0[3] = 'H';
      charArray0[4] = '\"';
      charArray0[5] = ' ';
      charArray0[6] = '~';
      charArray0[7] = 'Z';
      charArray0[8] = 'G';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.scanDouble('&');
      jSONScanner0.nextToken(0);
      jSONScanner0.info();
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", (-2368));
      jSONScanner0.scanSymbol((SymbolTable) null);
      jSONScanner0.scanBoolean('|');
      char char0 = '3';
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = 0;
      int int1 = 116;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 116);
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.sub_chars(0, 224);
      jSONReaderScanner0.isRef();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("can not cast to JSONObject.", 3);
      char[] charArray0 = new char[2];
      jSONScanner0.sp = 3;
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // For input string: \"can\", pos 0, json : can not cast to JSONObject.
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = "NonStringKeyAsString";
      JSONScanner jSONScanner0 = new JSONScanner("NonStringKeyAsString");
      jSONScanner0.setToken(69);
      char char0 = '>';
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('>', '>', '>');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", actual ");
      char[] charArray0 = new char[3];
      char char0 = ';';
      jSONReaderScanner0.resetStringPosition();
      charArray0[0] = ';';
      charArray0[1] = '+';
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.scanDecimal('+');
      charArray0[2] = 'f';
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.lexError(", actual ", (Object[]) null);
      char[] charArray1 = new char[5];
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.newCollectionByType(class0);
      charArray1[0] = '+';
      charArray1[1] = ';';
      charArray1[2] = '+';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray1, 512);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 10);
      jSONReaderScanner0.scanFloat('3');
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.scanDecimal('V');
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.scanFieldUUID(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StringReader stringReader0 = new StringReader("AllowArbitraryCommas");
      stringReader0.reset();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 1793);
      jSONReaderScanner0.indexOf('u', 91);
      jSONReaderScanner0.intValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("21S e_D");
      char char0 = '@';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString((char[]) null, 119);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.isRef();
      StringReader stringReader0 = null;
      try {
        stringReader0 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int int0 = 679;
      JSONScanner jSONScanner0 = new JSONScanner("scan true error", 679);
      Locale locale0 = Locale.ROOT;
      jSONScanner0.locale = locale0;
      jSONScanner0.isBlankInput();
      jSONScanner0.scanLong('f');
      char[] charArray0 = new char[1];
      locale0.getDisplayVariant(jSONScanner0.locale);
      charArray0[0] = 'f';
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(charArray0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int int0 = 4030;
      JSONScanner jSONScanner0 = new JSONScanner("", 4030);
      char char0 = '0';
      jSONScanner0.scanLong('0');
      char[] charArray0 = new char[9];
      jSONScanner0.skipWhitespace();
      Locale locale0 = Locale.CHINA;
      jSONScanner0.locale = locale0;
      charArray0[0] = '0';
      charArray0[1] = '0';
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'g';
      char char0 = '$';
      charArray0[1] = '$';
      charArray0[2] = 'K';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 2600);
      Class<String> class0 = String.class;
      jSONReaderScanner0.stringDefaultValue = "Ei$Q#zT";
      // Undeclared exception!
      try { 
        jSONReaderScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("NaN", 1);
      // Undeclared exception!
      try { 
        jSONScanner0.doubleValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("}0+X6<^t");
      jSONReaderScanner0.stringVal();
      char[] charArray0 = new char[8];
      charArray0[0] = '-';
      charArray0[1] = 'T';
      charArray0[2] = '';
      charArray0[3] = 'Z';
      charArray0[4] = 'n';
      charArray0[5] = 'K';
      charArray0[6] = 'x';
      charArray0[7] = 'y';
      long long0 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1383, 1383);
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = "";
      JSONScanner jSONScanner0 = new JSONScanner("", 75);
      char char0 = 'W';
      jSONScanner0.scanBoolean('W');
      Class<Object> class0 = Object.class;
      SymbolTable symbolTable0 = new SymbolTable(1895);
      char[] charArray0 = null;
      int int0 = 1;
      int int1 = (-407);
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol("", 1, 192, 13, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '1';
      charArray0[1] = 'A';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 56320, 56320);
      jSONReaderScanner0.bp = 895;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("11I&", 116);
      char[] charArray0 = new char[2];
      charArray0[0] = '9';
      charArray0[1] = 'u';
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("I6@Rw", 1055);
      char[] charArray0 = new char[6];
      charArray0[0] = 'y';
      charArray0[1] = '+';
      charArray0[2] = '~';
      charArray0[3] = ' ';
      charArray0[4] = 'C';
      charArray0[5] = 'N';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = 845;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1030, 845);
      jSONReaderScanner0.longValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = 46;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 46);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.matchStat = 0;
      jSONReaderScanner0.token = 0;
      jSONReaderScanner0.tokenName();
      jSONReaderScanner0.close();
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.ch = 'w';
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.scanFieldFloat(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. w
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("WriteTabAsSpecial", (-1558));
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("](/A.k4%b-;!^", 1001);
      char[] charArray0 = new char[5];
      charArray0[0] = 'n';
      charArray0[1] = 'e';
      charArray0[2] = 'Z';
      charArray0[3] = 'A';
      charArray0[4] = 'L';
      jSONScanner0.scanFieldBoolean(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int int0 = 47;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"@A\"WU2i");
      int int1 = 1481;
      SymbolTable symbolTable0 = new SymbolTable(1481);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0, '5');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = "%'O)]t";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("%'O)]t", 24);
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.charAt(1172);
      Class<Object> class0 = Object.class;
      SymbolTable symbolTable0 = new SymbolTable(1172);
      jSONReaderScanner0.scanEnum(class0, symbolTable0, 'q');
      jSONReaderScanner0.setTimeZone((TimeZone) null);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(24);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - ', info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }
}
