/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 05 23:10:39 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, Map<Integer, Object>> hashMap0 = new HashMap<String, Map<Integer, Object>>();
      DoubleKeyMap<String, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Object>(hashMap0);
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      hashMap1.put((Integer) null, "DPYSDj[UoN]");
      hashMap0.put("DPYSDj[UoN]", hashMap1);
      doubleKeyMap0.remove("DPYSDj[UoN]", (Integer) null);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, Map<Integer, Object>> hashMap0 = new HashMap<String, Map<Integer, Object>>();
      DoubleKeyMap<String, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Object>(hashMap0);
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      hashMap0.put((String) null, hashMap1);
      Map<Integer, Object> map0 = doubleKeyMap0.remove((String) null);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleKeyMap<Integer, String, String> doubleKeyMap0 = new DoubleKeyMap<Integer, String, String>();
      Integer integer0 = new Integer((-1));
      doubleKeyMap0.put(integer0, "5", "5");
      Map<String, String> map0 = doubleKeyMap0.get(integer0);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleKeyMap<String, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Object, Integer>();
      Object object0 = new Object();
      Integer integer0 = doubleKeyMap0.remove("DPYSDj[UoN]", object0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, Map<Integer, Object>> hashMap0 = new HashMap<String, Map<Integer, Object>>();
      DoubleKeyMap<String, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Object>(hashMap0);
      Integer integer0 = new Integer((-2670));
      Object object0 = doubleKeyMap0.remove((String) null, integer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<HashMap<Integer, Object>, Object, HashMap<Object, Integer>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Object>, Object, HashMap<Object, Integer>>();
      DoubleKeyMap<Object, String, Object> doubleKeyMap1 = new DoubleKeyMap<Object, String, Object>((Map<Object, Map<String, Object>>) null);
      Object object0 = doubleKeyMap1.remove((Object) doubleKeyMap0, "");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<Object, HashMap<Object, String>, Object> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<Object, String>, Object>();
      Map<HashMap<Object, String>, Object> map0 = doubleKeyMap0.remove((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<HashMap<Integer, Object>, Object, HashMap<Object, Integer>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Object>, Object, HashMap<Object, Integer>>();
      DoubleKeyMap<String, Object, Object> doubleKeyMap1 = new DoubleKeyMap<String, Object, Object>();
      Map<Object, Map<Object, Object>> map0 = doubleKeyMap1.newMap();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap2 = new DoubleKeyMap<Object, Object, Object>(map0);
      Map<Object, Object> map1 = doubleKeyMap2.remove((Object) doubleKeyMap0);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Map<Object, HashMap<Object, String>>, Map<Object, Object>> hashMap0 = new HashMap<Map<Object, HashMap<Object, String>>, Map<Object, Object>>();
      DoubleKeyMap<Map<Object, HashMap<Object, String>>, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Map<Object, HashMap<Object, String>>, Object, Object>(hashMap0);
      Object object0 = new Object();
      Object object1 = doubleKeyMap0.put((Map<Object, HashMap<Object, String>>) null, (Object) null, object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Object, Map<Object, HashMap<Object, String>>> hashMap0 = new HashMap<Object, Map<Object, HashMap<Object, String>>>();
      DoubleKeyMap<Object, Object, HashMap<Object, String>> doubleKeyMap0 = new DoubleKeyMap<Object, Object, HashMap<Object, String>>(hashMap0);
      Object object0 = new Object();
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      HashMap<Object, String> hashMap2 = doubleKeyMap0.put(object0, object0, hashMap1);
      assertNull(hashMap2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<HashMap<Object, Map<Object, HashMap<Object, String>>>, Map<Object, String>> hashMap0 = new HashMap<HashMap<Object, Map<Object, HashMap<Object, String>>>, Map<Object, String>>();
      DoubleKeyMap<HashMap<Object, Map<Object, HashMap<Object, String>>>, Object, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Map<Object, HashMap<Object, String>>>, Object, String>(hashMap0);
      HashMap<Object, Map<Object, HashMap<Object, String>>> hashMap1 = new HashMap<Object, Map<Object, HashMap<Object, String>>>();
      String string0 = doubleKeyMap0.get(hashMap1, (Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleKeyMap<Integer, Object, HashMap<String, Object>> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, HashMap<String, Object>>();
      Map<Object, Map<String, Integer>> map0 = doubleKeyMap0.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, String, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, String, Integer>(map0, class0);
      Integer integer0 = doubleKeyMap1.get((Object) doubleKeyMap0, "");
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleKeyMap<String, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Object>();
      Map<Object, Map<HashMap<Object, Object>, HashMap<Map<Object, HashMap<Object, String>>, Integer>>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, HashMap<Object, Object>, HashMap<Map<Object, HashMap<Object, String>>, Integer>> doubleKeyMap1 = new DoubleKeyMap<Object, HashMap<Object, Object>, HashMap<Map<Object, HashMap<Object, String>>, Integer>>(map0);
      Map<HashMap<Object, Object>, HashMap<Map<Object, HashMap<Object, String>>, Integer>> map1 = doubleKeyMap1.get((Object) null);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleKeyMap<String, Integer, String> doubleKeyMap0 = new DoubleKeyMap<String, Integer, String>();
      Map<Object, Map<Map<Object, HashMap<Object, String>>, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, Map<Object, HashMap<Object, String>>, String> doubleKeyMap1 = new DoubleKeyMap<Object, Map<Object, HashMap<Object, String>>, String>(map0);
      Map<Map<Object, HashMap<Object, String>>, String> map1 = doubleKeyMap1.get((Object) doubleKeyMap0);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Object, Map<Integer, Integer>> hashMap0 = new HashMap<Object, Map<Integer, Integer>>();
      DoubleKeyMap<Object, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Integer>(hashMap0);
      Integer integer0 = new Integer(220);
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((Object) hashMap0, integer0, integer0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<HashMap<Integer, Object>, Map<String, String>> hashMap0 = new HashMap<HashMap<Integer, Object>, Map<String, String>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<Integer, Object>, String, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Object>, String, String>(hashMap0, class0);
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      // Undeclared exception!
      try { 
        doubleKeyMap0.put(hashMap1, (String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<Object, HashMap<Object, String>>, Object, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Map<Object, HashMap<Object, String>>, Object, String>((Map<Map<Object, HashMap<Object, String>>, Map<Object, String>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DoubleKeyMap<HashMap<Integer, Object>, Object, HashMap<Object, Integer>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Object>, Object, HashMap<Object, Integer>>((Class<? extends Map>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<String, Map<Integer, Object>> hashMap0 = new HashMap<String, Map<Integer, Object>>();
      DoubleKeyMap<String, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Object>(hashMap0);
      Integer integer0 = new Integer(3474);
      Integer integer1 = new Integer(0);
      doubleKeyMap0.put("DPY]SDj[UoNO", integer1, (Object) integer1);
      doubleKeyMap0.remove("DPY]SDj[UoNO", integer0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<String, Map<Integer, Object>> hashMap0 = new HashMap<String, Map<Integer, Object>>();
      DoubleKeyMap<String, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Object>(hashMap0);
      Integer integer0 = new Integer(3474);
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      hashMap0.put("DPY]SDj[UoNO", hashMap1);
      Object object0 = doubleKeyMap0.put("DPY]SDj[UoNO", integer0, (Object) integer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DoubleKeyMap<String, Object, HashMap<Map<Object, HashMap<Object, String>>, Object>> doubleKeyMap0 = new DoubleKeyMap<String, Object, HashMap<Map<Object, HashMap<Object, String>>, Object>>();
      HashMap<String, Map<Object, Object>> hashMap0 = new HashMap<String, Map<Object, Object>>();
      DoubleKeyMap<String, Object, Object> doubleKeyMap1 = new DoubleKeyMap<String, Object, Object>(hashMap0);
      Object object0 = doubleKeyMap1.get((String) null, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DoubleKeyMap<String, Object, HashMap<Object, Integer>> doubleKeyMap0 = new DoubleKeyMap<String, Object, HashMap<Object, Integer>>();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      doubleKeyMap0.put("qA~|;rQ", (Object) hashMap0, hashMap0);
      HashMap<Object, Integer> hashMap1 = doubleKeyMap0.get("qA~|;rQ", (Object) hashMap0);
      assertSame(hashMap0, hashMap1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Integer, Map<Object, HashMap<Object, String>>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Map<Object, HashMap<Object, String>>>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }
}
