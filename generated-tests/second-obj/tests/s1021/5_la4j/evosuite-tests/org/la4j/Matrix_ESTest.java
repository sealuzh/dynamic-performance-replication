/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 07:42:21 GMT 2018
 */

package org.la4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ChoiceFormat;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.inversion.MatrixInverter;
import org.la4j.iterator.VectorIterator;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic1DMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.AdvancedMatrixPredicate;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixMatrixOperation;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.MatrixVectorOperation;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceKroneckerProduct;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.operation.ooplace.OoPlaceVectorsAddition;
import org.la4j.operation.ooplace.OoPlaceVectorsSubtraction;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Matrix_ESTest extends Matrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1561);
      // Undeclared exception!
      cCSMatrix0.manhattanNorm();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = 0;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(0, 0);
      Vector vector0 = Vector.unit(0);
      basic2DMatrix0.toString();
      Vector vector1 = vector0.divide(0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.insertRow(0, vector1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      hashMap0.keySet();
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 5);
      Matrix matrix0 = denseVector0.toRowMatrix();
      String string0 = "";
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix0.eachInColumn(5, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = 0;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(9);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      int int1 = (-290);
      Matrix matrix0 = sparseMatrix0.sliceBottomRight((-290), 9);
      // Undeclared exception!
      try { 
        matrix0.updateColumn(662, vectorFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '662' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(0, 0);
      assertFalse(sparseMatrix0.isRowMajor());
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertNotNull(sparseMatrix0);
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)sparseMatrix0.copy();
      assertFalse(sparseMatrix0.isRowMajor());
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertNotNull(cCSMatrix0);
      assertTrue(cCSMatrix0.equals((Object)sparseMatrix0));
      assertNotSame(sparseMatrix0, cCSMatrix0);
      assertNotSame(cCSMatrix0, sparseMatrix0);
      
      double double0 = cCSMatrix0.determinant();
      assertFalse(sparseMatrix0.isRowMajor());
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertTrue(sparseMatrix0.equals((Object)cCSMatrix0));
      assertTrue(cCSMatrix0.equals((Object)sparseMatrix0));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(sparseMatrix0, cCSMatrix0);
      assertNotSame(cCSMatrix0, sparseMatrix0);
      
      // Undeclared exception!
      try { 
        sparseMatrix0.toColumnVector();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(7, 7, 7);
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(7, sparseMatrix0.columns());
      assertEquals(7, sparseMatrix0.rows());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertNotNull(sparseMatrix0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        sparseMatrix0.transformColumn((-969), vectorFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-969' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(7, 7);
      assertEquals(7, sparseMatrix0.columns());
      assertFalse(sparseMatrix0.isRowMajor());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      assertEquals(7, sparseMatrix0.rows());
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertNotNull(sparseMatrix0);
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = sparseMatrix0.toColumnMajorSparseMatrix();
      assertEquals(7, sparseMatrix0.columns());
      assertFalse(sparseMatrix0.isRowMajor());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      assertEquals(7, sparseMatrix0.rows());
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(7, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(7, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertNotNull(columnMajorSparseMatrix0);
      assertSame(sparseMatrix0, columnMajorSparseMatrix0);
      assertSame(columnMajorSparseMatrix0, sparseMatrix0);
      
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.get((-1422), 550);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-1422' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(0, 0);
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertFalse(sparseMatrix0.isRowMajor());
      assertEquals(0, sparseMatrix0.cardinality());
      assertNotNull(sparseMatrix0);
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = sparseMatrix0.toColumnMajorSparseMatrix();
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertFalse(sparseMatrix0.isRowMajor());
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertNotNull(columnMajorSparseMatrix0);
      assertSame(sparseMatrix0, columnMajorSparseMatrix0);
      assertSame(columnMajorSparseMatrix0, sparseMatrix0);
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)sparseMatrix0.sliceTopLeft(0, 0);
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertFalse(sparseMatrix0.isRowMajor());
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertNotNull(cCSMatrix0);
      assertTrue(cCSMatrix0.equals((Object)sparseMatrix0));
      assertTrue(cCSMatrix0.equals((Object)columnMajorSparseMatrix0));
      assertNotSame(sparseMatrix0, cCSMatrix0);
      assertSame(sparseMatrix0, columnMajorSparseMatrix0);
      assertNotSame(cCSMatrix0, columnMajorSparseMatrix0);
      assertNotSame(cCSMatrix0, sparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = 0;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(0);
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0, sparseMatrix0.columns());
      assertNotNull(sparseMatrix0);
      
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        sparseMatrix0.sliceBottomRight(0, 9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..0][9..0].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(0, 0);
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertFalse(sparseMatrix0.isRowMajor());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(0, sparseMatrix0.columns());
      assertNotNull(sparseMatrix0);
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = sparseMatrix0.toColumnMajorSparseMatrix();
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertFalse(sparseMatrix0.isRowMajor());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertNotNull(columnMajorSparseMatrix0);
      assertSame(sparseMatrix0, columnMajorSparseMatrix0);
      assertSame(columnMajorSparseMatrix0, sparseMatrix0);
      
      // Undeclared exception!
      try { 
        sparseMatrix0.sliceTopLeft(9, 550);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(0, 0);
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertFalse(sparseMatrix0.isRowMajor());
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertNotNull(sparseMatrix0);
      
      int int0 = (-308);
      double double0 = sparseMatrix0.minInRow((-308));
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertFalse(sparseMatrix0.isRowMajor());
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      VectorIterator vectorIterator0 = sparseMatrix0.nonZeroIteratorOfColumn(0);
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertFalse(sparseMatrix0.isRowMajor());
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertNotNull(vectorIterator0);
      
      // Undeclared exception!
      try { 
        sparseMatrix0.swapColumns((-308), 71);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -307
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0, 0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.transform((MatrixFunction) null);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0, cRSMatrix1.rows());
      assertNotNull(cRSMatrix1);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      
      double double0 = cRSMatrix0.trace();
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.fail("Wrong input file format: can not read header '%%MatrixMarket'.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.zero(0, 3);
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.GAUSS_JORDAN;
      MatrixInverter matrixInverter0 = denseMatrix0.withInverter(linearAlgebra_InverterFactory0);
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertNotNull(matrixInverter0);
      
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        SparseMatrix.random(3, 0, (double) 3, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(2003);
      assertEquals(2003, denseMatrix0.rows());
      assertEquals(2003, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 316;
      DenseMatrix denseMatrix1 = DenseMatrix.from1DArray(316, 316, doubleArray0);
      assertEquals(316, denseMatrix1.columns());
      assertEquals(316, denseMatrix1.rows());
      assertArrayEquals(new double[] {316.0}, doubleArray0, 0.01);
      assertNotNull(denseMatrix1);
      
      // Undeclared exception!
      try { 
        denseMatrix0.foldRow(2003, vectorAccumulator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2003
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = 9;
      CCSMatrix cCSMatrix0 = new CCSMatrix(9, 9, 9);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(9, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(9, cCSMatrix0.columns());
      assertNotNull(cCSMatrix0);
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = cCSMatrix0.toColumnMajorSparseMatrix();
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(9, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(9, cCSMatrix0.columns());
      assertEquals(9, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(9, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertNotNull(columnMajorSparseMatrix0);
      assertSame(cCSMatrix0, columnMajorSparseMatrix0);
      assertSame(columnMajorSparseMatrix0, cCSMatrix0);
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix1 = cCSMatrix0.toColumnMajorSparseMatrix();
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(9, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(9, cCSMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix1.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix1.cardinality());
      assertEquals(9, columnMajorSparseMatrix1.columns());
      assertEquals(9, columnMajorSparseMatrix1.rows());
      assertEquals(0.0, columnMajorSparseMatrix1.max(), 0.01);
      assertFalse(columnMajorSparseMatrix1.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix1.min(), 0.01);
      assertNotNull(columnMajorSparseMatrix1);
      assertSame(cCSMatrix0, columnMajorSparseMatrix1);
      assertSame(cCSMatrix0, columnMajorSparseMatrix0);
      assertSame(columnMajorSparseMatrix1, cCSMatrix0);
      assertSame(columnMajorSparseMatrix1, columnMajorSparseMatrix0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.updateRow(9, vectorFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '9' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = 0;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(0, 0);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0, sparseMatrix0.rows());
      assertFalse(sparseMatrix0.isRowMajor());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertNotNull(sparseMatrix0);
      
      int int1 = (-308);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = (CCSMatrix)sparseMatrix0.transform(matrixFunction0);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0, sparseMatrix0.rows());
      assertFalse(sparseMatrix0.isRowMajor());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertNotNull(cCSMatrix0);
      assertTrue(cCSMatrix0.equals((Object)sparseMatrix0));
      assertNotSame(sparseMatrix0, cCSMatrix0);
      assertNotSame(cCSMatrix0, sparseMatrix0);
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.subtract((Matrix) sparseMatrix0);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0, sparseMatrix0.rows());
      assertFalse(sparseMatrix0.isRowMajor());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix1.columns());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(0, cCSMatrix1.rows());
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertNotNull(cCSMatrix1);
      assertTrue(sparseMatrix0.equals((Object)cCSMatrix0));
      assertTrue(cCSMatrix0.equals((Object)sparseMatrix0));
      assertTrue(cCSMatrix1.equals((Object)cCSMatrix0));
      assertTrue(cCSMatrix1.equals((Object)sparseMatrix0));
      assertNotSame(sparseMatrix0, cCSMatrix0);
      assertNotSame(sparseMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix0, sparseMatrix0);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertNotSame(cCSMatrix1, sparseMatrix0);
      
      double double0 = sparseMatrix0.trace();
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0, sparseMatrix0.rows());
      assertFalse(sparseMatrix0.isRowMajor());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertTrue(sparseMatrix0.equals((Object)cCSMatrix1));
      assertTrue(sparseMatrix0.equals((Object)cCSMatrix0));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(sparseMatrix0, cCSMatrix0);
      assertNotSame(sparseMatrix0, cCSMatrix1);
      
      // Undeclared exception!
      try { 
        cCSMatrix1.fail((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[][] doubleArray0 = new double[3][4];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-5585.3448148020725);
      doubleArray1[1] = 1876.356752;
      doubleArray1[2] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1876.356752;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 1876.356752;
      doubleArray2[3] = 1876.356752;
      doubleArray2[4] = (-5585.3448148020725);
      doubleArray2[5] = 1.0;
      doubleArray2[6] = (-5585.3448148020725);
      doubleArray2[7] = 1876.356752;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-1.0);
      doubleArray3[1] = 1.0;
      doubleArray0[2] = doubleArray3;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      assertEquals(3, matrix0.rows());
      assertEquals(3, matrix0.columns());
      assertNotNull(matrix0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(0, 0);
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertFalse(sparseMatrix0.isRowMajor());
      assertEquals(0, sparseMatrix0.rows());
      assertNotNull(sparseMatrix0);
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = sparseMatrix0.toColumnMajorSparseMatrix();
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertFalse(sparseMatrix0.isRowMajor());
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertNotNull(columnMajorSparseMatrix0);
      assertSame(sparseMatrix0, columnMajorSparseMatrix0);
      assertSame(columnMajorSparseMatrix0, sparseMatrix0);
      
      Matrix matrix0 = columnMajorSparseMatrix0.add(1784.2793304421127);
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertFalse(sparseMatrix0.isRowMajor());
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertNotNull(matrix0);
      assertSame(sparseMatrix0, columnMajorSparseMatrix0);
      assertSame(columnMajorSparseMatrix0, sparseMatrix0);
      
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertNotNull(basic2DMatrix0);
      assertTrue(basic2DMatrix0.equals((Object)matrix0));
      
      double double0 = basic2DMatrix0.product();
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertTrue(basic2DMatrix0.equals((Object)matrix0));
      assertEquals(1.0, double0, 0.01);
      assertNotSame(basic2DMatrix0, matrix0);
      
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      boolean boolean0 = columnMajorSparseMatrix0.non(matrixPredicate0);
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertFalse(sparseMatrix0.isRowMajor());
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertTrue(boolean0);
      assertSame(sparseMatrix0, columnMajorSparseMatrix0);
      assertSame(columnMajorSparseMatrix0, sparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertNotNull(basic2DMatrix0);
      
      // Undeclared exception!
      try { 
        basic2DMatrix0.removeRow(321);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(1, 1);
      assertEquals(1, denseMatrix0.rows());
      assertEquals(1, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      double double0 = denseMatrix0.norm();
      assertEquals(1, denseMatrix0.rows());
      assertEquals(1, denseMatrix0.columns());
      assertEquals(1.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        denseMatrix0.setColumn(1, (-1.0));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      assertNotNull(ooPlaceMatricesMultiplication0);
      
      int int0 = 0;
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from1DArray(0, 0, doubleArray0);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(columnMajorSparseMatrix0);
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)ooPlaceMatricesMultiplication0.apply(columnMajorSparseMatrix0, columnMajorSparseMatrix0);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(cCSMatrix0);
      assertTrue(cCSMatrix0.equals((Object)columnMajorSparseMatrix0));
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertNotSame(cCSMatrix0, columnMajorSparseMatrix0);
      
      int int1 = 32;
      CRSMatrix cRSMatrix0 = (CRSMatrix)columnMajorSparseMatrix0.transpose();
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(cRSMatrix0);
      assertTrue(columnMajorSparseMatrix0.equals((Object)cCSMatrix0));
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      boolean boolean0 = columnMajorSparseMatrix0.non(matrixPredicate0);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(columnMajorSparseMatrix0.equals((Object)cCSMatrix0));
      assertFalse(boolean0);
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      
      // Undeclared exception!
      try { 
        cCSMatrix0.ensureIndexesAreInBounds(32, 3760);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '32' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertNotNull(basic2DMatrix0);
      
      int int0 = basic2DMatrix0.rank();
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, int0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      basic2DMatrix0.forEach(consumer0);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      
      double double0 = basic2DMatrix0.maxInColumn(37);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Matrix matrix0 = Matrix.fromCSV("");
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertNotNull(matrix0);
      
      Matrix matrix1 = matrix0.copyOfColumns(37);
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix1.columns());
      assertEquals(0, matrix1.rows());
      assertNotNull(matrix1);
      assertTrue(matrix1.equals((Object)matrix0));
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(0, 0);
      assertFalse(sparseMatrix0.isRowMajor());
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertNotNull(sparseMatrix0);
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = sparseMatrix0.toColumnMajorSparseMatrix();
      assertFalse(sparseMatrix0.isRowMajor());
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertNotNull(columnMajorSparseMatrix0);
      assertSame(sparseMatrix0, columnMajorSparseMatrix0);
      assertSame(columnMajorSparseMatrix0, sparseMatrix0);
      
      int int0 = 550;
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.blankOfRows((-2649));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2649x0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = 10;
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.removeFirstColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertNotNull(basic2DMatrix0);
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)Matrix.zero(799, 799);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(799, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(799, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertNotNull(cCSMatrix0);
      
      mockRandom0.nextLong();
      DenseMatrix.identity(1);
      Matrix.zero(1, 799);
      Basic2DMatrix basic2DMatrix1 = (Basic2DMatrix)DenseMatrix.identity(799);
      int int0 = 389;
      basic2DMatrix0.transpose();
      basic2DMatrix1.removeLastColumn();
      int int1 = 666;
      Basic2DMatrix basic2DMatrix2 = Basic2DMatrix.zero(int0, int1);
      double double0 = 100.0;
      basic2DMatrix2.subtract(double0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.fromCSV("");
      // Undeclared exception!
      try { 
        basic2DMatrix0.removeLastColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(3);
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.rank();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(3, 3);
      Integer integer0 = new Integer(0);
      basic2DMatrix0.copyOfRows(0);
      int int0 = 4081;
      SparseMatrix.identity(4081);
      matrix0.removeLastColumn();
      basic2DMatrix0.determinant();
      // Undeclared exception!
      try { 
        matrix0.multiply((Matrix) cRSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of rows in the left-hand matrix should be equal to the number of columns in the right-hand matrix: 3 does not equal to 0.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(9);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      int int0 = (-290);
      sparseMatrix0.sliceBottomRight((-290), 9);
      // Undeclared exception!
      try { 
        sparseMatrix0.swapRows((-2659), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2658
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(0, 0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = sparseMatrix0.toColumnMajorSparseMatrix();
      Matrix matrix0 = columnMajorSparseMatrix0.add(1784.2793304421127);
      Matrix matrix1 = matrix0.divide(0);
      matrix1.toDenseMatrix();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(3010, 3010, doubleArray0);
      double double0 = new Integer(3010);
      // Undeclared exception!
      try { 
        denseMatrix0.mkString("/u8hMErKUYbp5hj@6", "u&#J3%w'w8 !B_Q.?");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.diagonal(572, 572);
      String string0 = "Cannot have negative destination position: ";
      basic2DMatrix0.toRowVector();
      // Undeclared exception!
      try { 
        Basic2DMatrix.fromCSV("Cannot have negative destination position: ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = 9;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(9, 9);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = sparseMatrix0.toColumnMajorSparseMatrix();
      Matrix matrix0 = columnMajorSparseMatrix0.blankOfRows(1);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 9;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 58;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = 58.0;
      doubleArray0[5] = (double) 58;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.from1DArray(1, 1, doubleArray0);
      Vector vector0 = basic2DMatrix0.toRowVector();
      // Undeclared exception!
      try { 
        matrix0.setRow(58, vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 1. Should be: 9.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(727);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(1, 1);
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.applySymmetric((DenseMatrix) basic1DMatrix0, (SparseMatrix) columnMajorSparseMatrix0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      matrix0.transform(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = 1;
      DenseMatrix denseMatrix0 = DenseMatrix.unit(1, 1);
      Double double0 = new Double(1);
      MatrixOperation<Double> matrixOperation0 = (MatrixOperation<Double>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      MatrixMatrixOperation<Double> matrixMatrixOperation0 = (MatrixMatrixOperation<Double>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      denseMatrix0.equals((Object) "Y,G[s<tP n3");
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 1);
      // Undeclared exception!
      try { 
        denseMatrix0.insertColumn((-4218), denseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(19, 19);
      Vector vector0 = Vector.unit(19);
      int int0 = Integer.MAX_VALUE;
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      basic2DMatrix0.is(matrixPredicate0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.insertRow((-294), vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..18
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(0, 0);
      double[] doubleArray0 = new double[1];
      int int0 = 3731;
      int int1 = 82;
      // Undeclared exception!
      try { 
        sparseMatrix0.sliceBottomRight(82, 82);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [82..0][82..0].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(0, 0);
      double[] doubleArray0 = new double[19];
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      sparseMatrix0.sum();
      sparseMatrix0.equals((Object) doubleArray0);
      doubleArray0[13] = (double) 0;
      doubleArray0[4] = (double) 0;
      double[] doubleArray1 = new double[1];
      double[] doubleArray2 = new double[0];
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = (double) 0;
      MatrixMatrixOperation<Double> matrixMatrixOperation0 = (MatrixMatrixOperation<Double>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[2];
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.updateColumn(0, vectorFunction0);
      intArray0[0] = 0;
      intArray0[1] = 0;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = 0;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(0, 0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = sparseMatrix0.toColumnMajorSparseMatrix();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      columnMajorSparseMatrix0.updateRow(0, vectorFunction0);
      sparseMatrix0.add(2180.41095);
      DenseMatrix denseMatrix0 = DenseMatrix.identity(0);
      // Undeclared exception!
      try { 
        sparseMatrix0.insert((Matrix) denseMatrix0, 6, 0, 0, 6, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 0, 6
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = 6;
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(6);
      Basic2DMatrix basic2DMatrix1 = new Basic2DMatrix();
      // Undeclared exception!
      try { 
        basic2DMatrix1.insert((Matrix) basic2DMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 6 rows and 6 cols at 0, 0 in a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(1, 1);
      double double0 = new Integer(1);
      String string0 = "B]f\\D";
      Matrix matrix0 = cCSMatrix0.add((-1.0));
      int int0 = 7;
      // Undeclared exception!
      try { 
        cCSMatrix0.insert(matrix0, 1, 7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 1 rows and 7 cols at 0, 0 in a 1x1 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = 0;
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(0);
      Basic2DMatrix basic2DMatrix1 = new Basic2DMatrix();
      basic2DMatrix1.insert((Matrix) basic2DMatrix0);
      int int1 = (-1153);
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("mH;YpZg\"*V.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = 0;
      SparseMatrix.diagonal(0, (-1.0));
      MockRandom mockRandom0 = new MockRandom();
      Matrix.randomSymmetric(0, mockRandom0);
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0, 0);
      int int1 = (-30);
      VectorFunction vectorFunction0 = null;
      cRSMatrix0.transformColumn((-30), (VectorFunction) null);
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = 6;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(0, 6);
      // Undeclared exception!
      try { 
        sparseMatrix0.determinant();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not compute determinant of non-square matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = cCSMatrix0.toColumnMajorSparseMatrix();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      columnMajorSparseMatrix0.updateRow(0, vectorFunction0);
      Matrix matrix0 = cCSMatrix0.add(2180.41095);
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(9);
      // Undeclared exception!
      try { 
        matrix0.hadamardProduct(sparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 0x0 does not equal to 9x9.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int int0 = 0;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(0, 0);
      sparseMatrix0.toColumnMajorSparseMatrix();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(0, 0);
      sparseMatrix0.divide(0);
      int int1 = 2062;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(2062, 16, 16);
      // Undeclared exception!
      try { 
        Matrix.block(cCSMatrix0, sparseMatrix0, cCSMatrix0, basic2DMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(1, 1);
      CCSMatrix cCSMatrix0 = new CCSMatrix(1, 1);
      basic2DMatrix0.equals((Object) cCSMatrix0);
      MatrixMatrixOperation<Double> matrixMatrixOperation0 = (MatrixMatrixOperation<Double>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 1);
      Vector vector0 = ooPlaceVectorsAddition0.apply(denseVector0, denseVector0);
      Vector vector1 = vector0.add(661.714017512);
      // Undeclared exception!
      try { 
        basic2DMatrix0.insertColumn(1, vector1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.product();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      basic2DMatrix0.foldColumns(vectorAccumulator0);
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      // Undeclared exception!
      try { 
        basic2DMatrix0.insert((Matrix) basic2DMatrix0, (-2397), 2540);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -2397x2540
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = (-485);
      int int1 = 4;
      // Undeclared exception!
      try { 
        Matrix.constant((-485), 4, 4);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(1, 1);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(6, 1, 1);
      denseMatrix0.equals((Object) columnMajorSparseMatrix0);
      denseMatrix0.iteratorOfColumn((-2600));
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      denseMatrix0.is(matrixPredicate0);
      Matrix matrix0 = denseMatrix0.removeFirstRow();
      int int0 = 3731;
      // Undeclared exception!
      try { 
        matrix0.sliceBottomRight(3731, 82);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [3731..0][82..0].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(1, 1);
      denseMatrix0.diagonalProduct();
      Double double0 = new Double(1);
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      denseMatrix0.mkString(numberFormat0);
      MatrixMatrixOperation<Double> matrixMatrixOperation0 = (MatrixMatrixOperation<Double>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      denseMatrix0.removeLastRow();
      int int0 = NumberFormat.INTEGER_FIELD;
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = "3 dC  > k";
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.hashCode();
      // Undeclared exception!
      try { 
        basic2DMatrix0.toRowVector();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(9, 985);
      matrix0.removeFirstRow();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) 0;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.toString();
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) (-3731);
      doubleArray1[1] = (double) 2002;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from1DArray(0, 2002, doubleArray1);
      rowMajorSparseMatrix0.manhattanNorm();
      rowMajorSparseMatrix0.swapColumns((-374), 30);
      rowMajorSparseMatrix0.copy();
      // Undeclared exception!
      try { 
        basic2DMatrix0.non((AdvancedMatrixPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Double double0 = new Double(1);
      MatrixOperation<Double> matrixOperation0 = (MatrixOperation<Double>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      MatrixMatrixOperation<Double> matrixMatrixOperation0 = (MatrixMatrixOperation<Double>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 1);
      ooPlaceVectorsAddition0.apply(denseVector0, denseVector0);
      Matrix.diagonal(1, 1.0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 9.992007221626409E-14;
      // Undeclared exception!
      try { 
        Matrix.from1DArray(1546, (-483), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 1546x-483
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = 1;
      DenseMatrix denseMatrix0 = DenseMatrix.unit(1, 1);
      CCSMatrix cCSMatrix0 = new CCSMatrix(1, 1);
      denseMatrix0.equals((Object) cCSMatrix0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      denseMatrix0.is(matrixPredicate0);
      Matrix matrix0 = denseMatrix0.removeFirstRow();
      Basic2DMatrix.identity(1);
      matrix0.rotate();
      // Undeclared exception!
      try { 
        cCSMatrix0.foldRows((VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vectors$24", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      int int0 = (-128);
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.transformRow((-2371), vectorFunction0);
      cCSMatrix0.add((-1006.905074121102));
      org.evosuite.runtime.Random.setNextRandom((-128));
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.EIGEN;
      cCSMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      cCSMatrix0.multiply((double) (-2371));
      Basic2DMatrix.identity(2540);
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      // Undeclared exception!
      try { 
        DenseVector.fromMatrixMarket("NO_PIVOT_GAUSS");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(1);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(6, 1, 1);
      basic2DMatrix0.equals((Object) columnMajorSparseMatrix0);
      basic2DMatrix0.iteratorOfColumn((-2600));
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 55;
      Matrix.identity(987);
      doubleArray0[1] = (double) (-2600);
      doubleArray0[2] = (double) 6;
      doubleArray0[3] = (double) 55;
      doubleArray0[4] = (double) 6;
      doubleArray0[5] = (double) 1;
      Matrix matrix0 = columnMajorSparseMatrix0.copyOfRows(55);
      CRSMatrix.from1DArray(987, Integer.MAX_VALUE, doubleArray0);
      MatrixMatrixOperation<String> matrixMatrixOperation0 = (MatrixMatrixOperation<String>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      columnMajorSparseMatrix0.apply(matrixMatrixOperation0, (Matrix) basic2DMatrix0);
      int int0 = 2152;
      matrix0.maxInColumn(int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) 0;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      Vector vector0 = Vector.unit(0);
      basic2DMatrix0.toString();
      // Undeclared exception!
      try { 
        basic2DMatrix0.insertRow((-3731), vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[][] doubleArray0 = new double[5][1];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (-1.0);
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (-1.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = (double) 0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = (double) 0;
      doubleArray4[3] = (double) 0;
      doubleArray4[4] = (double) 0;
      doubleArray4[5] = (double) 0;
      doubleArray4[6] = (double) 0;
      doubleArray0[3] = doubleArray4;
      doubleArray0[4] = doubleArray1;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      denseMatrix0.toCSV(numberFormat0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 0, 0);
      cCSMatrix0.minInRow((-4471));
      cCSMatrix0.nonZeroIteratorOfColumn(0);
      cCSMatrix0.swapColumns(0, 0);
      cCSMatrix0.determinant();
      cCSMatrix0.foldRows((VectorAccumulator) null);
      int int0 = 985;
      // Undeclared exception!
      try { 
        cCSMatrix0.get(58, 985);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '58' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[][] doubleArray0 = new double[5][1];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (-1.0);
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (-1.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = (double) 0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = (double) 0;
      doubleArray4[3] = (double) 0;
      doubleArray4[4] = (double) 0;
      doubleArray4[5] = (double) 0;
      doubleArray4[6] = (double) 0;
      doubleArray0[3] = doubleArray4;
      doubleArray0[4] = doubleArray1;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        denseMatrix0.insert((Matrix) null, 54, 233, 233, 654, 17, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 233, 654
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      double[][] doubleArray0 = new double[0][9];
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(basic1DMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      Matrix matrix0 = basic1DMatrix0.to(matrixFactory0);
      matrix0.kroneckerProduct(basic1DMatrix0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Matrix.identity(3);
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.rank();
      Integer integer0 = new Integer(0);
      SparseMatrix.identity(4081);
      cRSMatrix0.multiplyByItsTranspose();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.toRowMajorSparseMatrix();
      int int0 = Integer.MAX_VALUE;
      int int1 = (-739);
      int int2 = 508;
      // Undeclared exception!
      try { 
        basic2DMatrix0.removeRow(508);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new OoPlaceKroneckerProduct();
      int int0 = (-1832);
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.zero(Integer.MAX_VALUE, Integer.MAX_VALUE, (-1832));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(0);
      cCSMatrix0.minInRow((-4471));
      cCSMatrix0.nonZeroIteratorOfColumn(0);
      cCSMatrix0.toMatrixMarket();
      MatrixFactory<SparseMatrix> matrixFactory0 = (MatrixFactory<SparseMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        cCSMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.ColumnMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[][] doubleArray0 = new double[5][1];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = (double) 0;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (-1.0);
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (-1.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = (double) 0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = (double) 0;
      doubleArray4[3] = (double) 0;
      doubleArray4[4] = (double) 0;
      doubleArray4[5] = (double) 0;
      doubleArray4[6] = (double) 0;
      doubleArray0[3] = doubleArray4;
      doubleArray0[4] = doubleArray0[0];
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      DenseMatrix.constant(0, 0, 2.0);
      denseMatrix0.toCSV(numberFormat0);
      denseMatrix0.shuffle();
      MatrixFactory<RowMajorSparseMatrix> matrixFactory0 = (MatrixFactory<RowMajorSparseMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((RowMajorSparseMatrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        denseMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.DenseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.toColumnMajorSparseMatrix();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.add(2180.41095);
      SparseMatrix.identity(9);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.update(matrixFunction0);
      CCSMatrix cCSMatrix1 = new CCSMatrix(9, 9, 9);
      cCSMatrix1.hashCode();
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix2 = new CCSMatrix(3, 9);
      cCSMatrix2.trace();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[][] doubleArray0 = new double[5][1];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (-1.0);
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (-1.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = (double) 0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = (double) 0;
      doubleArray4[3] = (double) 0;
      doubleArray4[4] = (double) 0;
      doubleArray4[5] = (double) 0;
      doubleArray4[6] = (double) 0;
      doubleArray0[3] = doubleArray4;
      doubleArray0[4] = doubleArray1;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance();
      decimalFormat0.setPositiveSuffix("iRZ-*[M9T/w$#GYG");
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)DenseMatrix.constant(0, 0, 2.0);
      denseMatrix0.toCSV((NumberFormat) decimalFormat0);
      Basic2DMatrix basic2DMatrix1 = (Basic2DMatrix)denseMatrix0.shuffle();
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.block(basic2DMatrix0, basic2DMatrix1, basic2DMatrix1, denseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = cCSMatrix0.toColumnMajorSparseMatrix();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      columnMajorSparseMatrix0.updateRow(0, vectorFunction0);
      Matrix matrix0 = cCSMatrix0.add(2180.41095);
      cCSMatrix0.add(1.0);
      SparseMatrix.identity(9);
      DenseMatrix.identity(9);
      Matrix matrix1 = matrix0.divide(2417.07250303899);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.updateColumn(0, vectorFunction1);
      // Undeclared exception!
      try { 
        matrix1.power((-4401));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The exponent should be positive: -4401.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.diagonal(1000, 1406.412363059709);
      basic1DMatrix0.columnMajorIterator();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Basic2DMatrix.fromCSV("        ");
      // Undeclared exception!
      try { 
        Basic2DMatrix.fromMatrixMarket("        ");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = 0;
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(0);
      Basic2DMatrix basic2DMatrix1 = new Basic2DMatrix();
      Matrix matrix0 = basic2DMatrix1.insert((Matrix) basic2DMatrix0);
      MockRandom mockRandom0 = new MockRandom();
      int int1 = 10;
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) basic2DMatrix0, 15, (-1431655764), (-1431655764), (-1431655764), 804, 389);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: -1431655764, -1431655764
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(1, 1);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(1, 1, 1);
      Double double0 = new Double((-339.11085));
      MatrixOperation<Double> matrixOperation0 = (MatrixOperation<Double>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      MatrixMatrixOperation<Double> matrixMatrixOperation0 = (MatrixMatrixOperation<Double>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = denseMatrix0.removeLastRow();
      denseMatrix0.determinant();
      matrix0.multiplyByItsTranspose();
      NumberFormat.getIntegerInstance();
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 1.0;
      doubleArray0[0] = doubleArray1;
      CRSMatrix.from2DArray(doubleArray0);
      MatrixOperation<RowMajorSparseMatrix> matrixOperation1 = (MatrixOperation<RowMajorSparseMatrix>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      denseMatrix0.divide(1);
      columnMajorSparseMatrix0.divide((-460.20081));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = 13;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(13, 13);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        sparseMatrix0.transformRow(13, vectorFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '13' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(10);
      Matrix matrix1 = matrix0.removeFirstColumn();
      matrix1.rank();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(10, 10);
      Integer integer0 = new Integer(9);
      CRSMatrix cRSMatrix0 = new CRSMatrix(10, 4081);
      double double0 = basic2DMatrix0.determinant();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = basic2DMatrix0.toColumnMajorSparseMatrix();
      Matrix matrix2 = basic2DMatrix0.removeFirstRow();
      basic2DMatrix0.columnMajorIterator();
      basic2DMatrix0.toColumnVector();
      basic2DMatrix0.setRow(9, 1144.31188432755);
      Matrix matrix3 = basic2DMatrix0.kroneckerProduct(cRSMatrix0);
      Basic2DMatrix.block(matrix3, columnMajorSparseMatrix0, matrix2, cRSMatrix0);
      basic2DMatrix0.transpose();
      MatrixFactory<Matrix> matrixFactory0 = null;
      Matrix matrix4 = basic2DMatrix0.to(matrixFactory0);
      matrix4.removeLastColumn();
      double double1 = (-191.8741844);
      basic2DMatrix0.subtract(double1);
      int int0 = (-855);
      Matrix.diagonal(int0, double0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = cCSMatrix0.toColumnMajorSparseMatrix();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      columnMajorSparseMatrix0.updateRow(0, vectorFunction0);
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      columnMajorSparseMatrix0.update(matrixFunction0);
      CCSMatrix cCSMatrix1 = new CCSMatrix(9, 991, 9);
      cCSMatrix0.hashCode();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.diagonal(0, 9);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = basic2DMatrix0.transformRow(10, vectorFunction1);
      MatrixFunction matrixFunction1 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction1).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix1.update(matrixFunction1);
      columnMajorSparseMatrix0.hashCode();
      VectorFunction vectorFunction2 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      matrix0.transformRow(10, vectorFunction2);
      // Undeclared exception!
      try { 
        cCSMatrix1.insert((Matrix) sparseMatrix0, 991, 48);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 991 rows and 48 cols at 0, 0 in a 9x991 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      int int0 = (-3731);
      basic2DMatrix0.toString();
      int int1 = 9;
      basic2DMatrix0.rotate();
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(2621, 2621, 2348);
      // Undeclared exception!
      cCSMatrix0.infinityNorm();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 0, 0);
      int int1 = (-4471);
      cCSMatrix0.minInRow((-4471));
      cCSMatrix0.iteratorOfColumn(0);
      int int2 = 2540;
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(2540, 1.0);
      denseMatrix0.blankOfShape(158, 2540);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(13, 756);
      basic2DMatrix0.removeFirstRow();
      Matrix matrix0 = denseMatrix0.insert((Matrix) cCSMatrix0, 2540, 192);
      int int3 = (-1);
      Basic2DMatrix basic2DMatrix1 = Basic2DMatrix.unit(int1, int2);
      Vector vector0 = basic2DMatrix1.getRow(int0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      vector0.update(vectorFunction0);
      int int4 = 850;
      vector0.sliceLeft(int4);
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      Matrix matrix1 = ooPlaceMatrixHadamardProduct0.applySymmetric((DenseMatrix) basic2DMatrix1, (SparseMatrix) cCSMatrix0);
      matrix1.setColumn(int3, vector0);
      basic2DMatrix0.toRowVector();
      int int5 = (-21);
      Basic2DMatrix basic2DMatrix2 = new Basic2DMatrix(int1, int5);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      basic2DMatrix2.non(advancedMatrixPredicate0);
      matrix0.euclideanNorm();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[][] doubleArray0 = new double[0][6];
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      denseMatrix0.product();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      denseMatrix0.foldColumns(vectorAccumulator0);
      int int0 = 235;
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      denseMatrix0.shuffle();
      MatrixMatrixOperation<RowMajorSparseMatrix> matrixMatrixOperation0 = (MatrixMatrixOperation<RowMajorSparseMatrix>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      int int1 = (-2616);
      int int2 = 10;
      Matrix matrix0 = ((Basic2DMatrix) denseMatrix0).copyOfShape(235, 10);
      // Undeclared exception!
      try { 
        matrix0.minInColumn(235);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.fromCSV("        ");
      int int0 = 935;
      Basic2DMatrix basic2DMatrix1 = Basic2DMatrix.identity(935);
      Matrix matrix0 = basic2DMatrix0.transpose();
      basic2DMatrix0.rank();
      Matrix matrix1 = Matrix.zero(935, 935);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      basic2DMatrix0.each(matrixProcedure0);
      DenseMatrix denseMatrix0 = matrix0.toDenseMatrix();
      int int1 = 1656;
      Matrix.zero(1051, 1656);
      basic2DMatrix0.multiply(matrix1);
      double double0 = matrix0.norm();
      basic2DMatrix1.kroneckerProduct(denseMatrix0);
      MatrixProcedure matrixProcedure1 = null;
      matrix0.each(matrixProcedure1);
      double double1 = 1667.43364442706;
      basic2DMatrix1.divide(double1);
      denseMatrix0.divide(double0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = double1;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int1;
      Vector vector0 = Vector.fromArray(doubleArray0);
      denseMatrix0.setRow(int0, vector0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = 1;
      DenseMatrix denseMatrix0 = DenseMatrix.unit(1, 1);
      Double double0 = new Double(1);
      MatrixOperation<Double> matrixOperation0 = (MatrixOperation<Double>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      MatrixMatrixOperation<Double> matrixMatrixOperation0 = (MatrixMatrixOperation<Double>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      denseMatrix0.removeLastRow();
      denseMatrix0.determinant();
      denseMatrix0.rank();
      // Undeclared exception!
      try { 
        Matrix.zero((-1968526676), 1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = 0;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      int int1 = 9;
      SparseMatrix.identity(9);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      int int2 = Integer.MAX_VALUE;
      Matrix matrix0 = Matrix.zero(0, Integer.MAX_VALUE);
      Matrix matrix1 = matrix0.power(0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      matrix1.each(matrixProcedure0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 9;
      doubleArray0[1] = (-1563.62907934103);
      doubleArray0[2] = (-1563.62907934103);
      doubleArray0[3] = (double) 9;
      doubleArray0[4] = (double) Integer.MAX_VALUE;
      doubleArray0[5] = (double) Integer.MAX_VALUE;
      // Undeclared exception!
      Basic2DMatrix.from1DArray(8, Integer.MAX_VALUE, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0, 0);
      cCSMatrix0.toColumnMajorSparseMatrix();
      Matrix matrix0 = cCSMatrix0.add(2180.41095);
      cCSMatrix0.add(1.0);
      SparseMatrix.identity(9);
      DenseMatrix denseMatrix0 = DenseMatrix.identity(9);
      matrix0.divide(2417.07250303899);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix.zero(9, 9);
      denseMatrix0.power(0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) 9;
      // Undeclared exception!
      try { 
        Basic2DMatrix.from1DArray((-1073741823), 4365, doubleArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(1, 1);
      cCSMatrix0.determinant();
      String string0 = "B]f\\D";
      Matrix matrix0 = cCSMatrix0.add((-1.0));
      // Undeclared exception!
      try { 
        cCSMatrix0.insert(matrix0, 1, (-26));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: 1x-26
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = cCSMatrix0.toColumnMajorSparseMatrix();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      columnMajorSparseMatrix0.updateRow(0, vectorFunction0);
      Matrix matrix0 = cCSMatrix0.add(2180.41095);
      cCSMatrix0.add(1.0);
      int int0 = 9;
      SparseMatrix.identity(9);
      DenseMatrix.identity(9);
      matrix0.divide(2417.07250303899);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.updateColumn(0, vectorFunction1);
      Matrix matrix1 = Matrix.zero(9, 9);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      matrix1.non(advancedMatrixPredicate0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.add(matrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 0x0 does not equal to 9x9.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesAddition", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.fromCSV("          ");
      // Undeclared exception!
      try { 
        sparseMatrix0.foldRows((VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.updateRow(0, vectorFunction0);
      cCSMatrix0.add(2180.41095);
      cCSMatrix0.add(1.0);
      int int0 = 9;
      SparseMatrix.identity(9);
      DenseMatrix.identity(9);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.updateColumn(0, vectorFunction1);
      Matrix matrix0 = Matrix.zero(9, 9);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      matrix0.non(advancedMatrixPredicate0);
      // Undeclared exception!
      try { 
        cCSMatrix0.add(matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 0x0 does not equal to 9x9.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesAddition", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(1, 1);
      ColumnMajorSparseMatrix.zero(1, 1, 1);
      Double double0 = new Double((-339.11085));
      MatrixOperation<Double> matrixOperation0 = (MatrixOperation<Double>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      MatrixMatrixOperation<Double> matrixMatrixOperation0 = (MatrixMatrixOperation<Double>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      denseMatrix0.removeLastRow();
      denseMatrix0.determinant();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(1, 1);
      basic2DMatrix0.rank();
      // Undeclared exception!
      try { 
        Matrix.zero(0, (-3155));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "nU)[G<}Pfs:M=_b%3P^";
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.fromCSV("36");
      int[] intArray0 = new int[5];
      intArray0[0] = 572;
      intArray0[1] = 572;
      intArray0[2] = 572;
      intArray0[3] = 572;
      intArray0[4] = 572;
      basic2DMatrix0.columnMajorIterator();
      basic2DMatrix0.transpose();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(1255, 1255);
      basic2DMatrix0.diagonalProduct();
      // Undeclared exception!
      basic2DMatrix0.removeLastRow();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = 0;
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(9);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      int int1 = (-290);
      Matrix matrix0 = sparseMatrix0.sliceBottomRight((-290), 9);
      matrix0.manhattanNorm();
      // Undeclared exception!
      try { 
        matrix0.updateColumn((-290), vectorFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-290' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = 572;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      Matrix matrix0 = basic2DMatrix0.add((double) 572);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "nU)[G<}Pfs:M=_b%3P^";
      stringArray0[1] = "Sides";
      stringArray0[2] = "Wrong matrix dimensions: ";
      basic2DMatrix0.multiplyByItsTranspose();
      stringArray0[3] = "4fBaOX#=?(>}(\"";
      stringArray0[4] = "Can not remove from this iterator.";
      matrix0.iteratorOfColumn(572);
      Matrix matrix1 = Matrix.zero(572, 2);
      // Undeclared exception!
      try { 
        matrix0.multiply(matrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of rows in the left-hand matrix should be equal to the number of columns in the right-hand matrix: 0 does not equal to 2.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = 1;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(1, 1);
      CCSMatrix cCSMatrix0 = new CCSMatrix(1, 1);
      basic2DMatrix0.equals((Object) cCSMatrix0);
      MatrixOperation<Double> matrixOperation0 = (MatrixOperation<Double>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = basic2DMatrix0.power(1);
      int int1 = 0;
      matrix0.toRowMajorSparseMatrix();
      cCSMatrix0.mkString("OS.G|DD:ROpSZ7", "u59;vy@,+LF(6l!Sl>;");
      MockRandom mockRandom0 = new MockRandom(1);
      Matrix.random(0, 0, mockRandom0);
      NumberFormat.getIntegerInstance();
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      SparseVector sparseVector0 = null;
      // Undeclared exception!
      try { 
        ooPlaceVectorByMatrixMultiplication0.apply((SparseVector) null, (ColumnMajorSparseMatrix) cCSMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix0 = (CRSMatrix)SparseMatrix.identity(9);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.power(2071);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      int int0 = (-2121);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) (-23);
      doubleArray0[2] = (double) 9;
      doubleArray0[3] = (-1200.6);
      doubleArray0[4] = (double) (-2121);
      doubleArray0[5] = (double) 9;
      doubleArray0[6] = (double) 9;
      // Undeclared exception!
      try { 
        Basic2DMatrix.from1DArray((-2121), (-23), doubleArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = 1;
      CCSMatrix cCSMatrix0 = new CCSMatrix(1, 1);
      cCSMatrix0.determinant();
      cCSMatrix0.add((-1.0));
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldColumns(vectorAccumulator0);
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("B]fD");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = 32;
      DenseMatrix.unit(32, 32);
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(32, 32, 32);
      Object object0 = new Object();
      cRSMatrix0.equals(object0);
      int int1 = NumberFormat.INTEGER_FIELD;
      int int2 = 349;
      int int3 = 7;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(7, 349);
      int int4 = 383;
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.multiply((Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.DenseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.constant(3, 3, 3);
      CCSMatrix cCSMatrix0 = new CCSMatrix(7, 4);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply((DenseMatrix) basic1DMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      SparseMatrix sparseMatrix0 = matrix0.toSparseMatrix();
      // Undeclared exception!
      try { 
        sparseMatrix0.insert(matrix0, Integer.MAX_VALUE, (-1792), (-14), 1557);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -14x1557
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(10);
      matrix0.removeFirstColumn();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix.randomSymmetric(7, (double) 1L, (Random) mockRandom0);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.rank();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      basic2DMatrix0.forEach(consumer0);
      DenseMatrix.identity(0);
      Vector vector0 = matrix0.toRowVector();
      MockRandom mockRandom1 = new MockRandom(1L);
      DenseVector.random(1000, mockRandom1);
      // Undeclared exception!
      try { 
        basic2DMatrix0.setColumn(7, vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 10. Should be: 0.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(1, 1);
      CCSMatrix cCSMatrix0 = new CCSMatrix(1, 1);
      denseMatrix0.equals((Object) cCSMatrix0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      denseMatrix0.is(matrixPredicate0);
      Basic2DMatrix.identity(3720);
      denseMatrix0.rotate();
      int int0 = 693;
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("'pwLRxpUXg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = 1;
      DenseMatrix denseMatrix0 = DenseMatrix.unit(1, 1);
      Double double0 = new Double(1);
      MatrixOperation<Double> matrixOperation0 = (MatrixOperation<Double>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      MatrixMatrixOperation<Double> matrixMatrixOperation0 = (MatrixMatrixOperation<Double>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      denseMatrix0.toColumnMajorSparseMatrix();
      denseMatrix0.max();
      int[] intArray0 = new int[7];
      int int1 = 22;
      intArray0[0] = 22;
      // Undeclared exception!
      try { 
        denseMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Matrix.random(7, 17, mockRandom0);
      MatrixMatrixOperation<String> matrixMatrixOperation0 = (MatrixMatrixOperation<String>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = 1836;
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      double double0 = 2180.41095;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(1836, 1836);
      Basic2DMatrix basic2DMatrix1 = Basic2DMatrix.unit(1836, 1836);
      // Undeclared exception!
      basic2DMatrix1.insert((Matrix) basic2DMatrix0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(1, 1);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(1, 1, 1);
      denseMatrix0.blankOfColumns(1);
      denseMatrix0.equals((Object) columnMajorSparseMatrix0);
      MatrixMatrixOperation<Double> matrixMatrixOperation0 = (MatrixMatrixOperation<Double>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn((MatrixOperation) null).when(matrixMatrixOperation0).partiallyApply(any(org.la4j.matrix.ColumnMajorSparseMatrix.class));
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.apply(matrixMatrixOperation0, (Matrix) denseMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.DenseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      int int0 = 9;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(9);
      basic2DMatrix0.toCSV();
      DenseMatrix.unit(9, 9);
      // Undeclared exception!
      try { 
        DenseMatrix.identity((-2946));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = 1;
      DenseMatrix denseMatrix0 = DenseMatrix.unit(1, 1);
      denseMatrix0.subtract((double) 1);
      CCSMatrix cCSMatrix0 = new CCSMatrix(1, 1);
      denseMatrix0.equals((Object) cCSMatrix0);
      Double double0 = new Double((-339.11085));
      MatrixOperation<Double> matrixOperation0 = (MatrixOperation<Double>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      MatrixMatrixOperation<Double> matrixMatrixOperation0 = (MatrixMatrixOperation<Double>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("%%MatrixMarket");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = 572;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.add((double) 572);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "nU)[G<}Pfs:M=_b%3P^";
      // Undeclared exception!
      try { 
        basic2DMatrix0.removeLastRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 0, 0);
      double double0 = new Integer((-4471));
      cCSMatrix0.rank();
      cCSMatrix0.nonZeroIteratorOfColumn(0);
      cCSMatrix0.swapColumns(0, 0);
      double double1 = new Integer(0);
      cCSMatrix0.maxInRow((-286));
      cCSMatrix0.foldRows((VectorAccumulator) null);
      int int0 = 985;
      // Undeclared exception!
      try { 
        cCSMatrix0.get((-4471), 985);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-4471' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0, 0);
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      cRSMatrix0.trace();
      cRSMatrix0.setColumn(0, (-1.0));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(1, 1);
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1, 1, 1);
      denseMatrix0.equals((Object) cCSMatrix0);
      cCSMatrix0.subtract((-918.31107771842));
      Double double0 = new Double(1);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      MatrixOperation<Double> matrixOperation0 = (MatrixOperation<Double>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      MatrixMatrixOperation<Double> matrixMatrixOperation0 = (MatrixMatrixOperation<Double>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("%%Ma5wtrixMarket");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(10);
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(10, 10, 10);
      cRSMatrix0.equals((Object) matrix0);
      int int0 = NumberFormat.INTEGER_FIELD;
      int int1 = 349;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(349, 349);
      Integer integer0 = new Integer(383);
      Vector vector0 = null;
      // Undeclared exception!
      try { 
        basic2DMatrix0.insertRow(0, (Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = 10;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(10, 10);
      // Undeclared exception!
      try { 
        basic2DMatrix0.insertRow(7, (Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 0);
      cCSMatrix0.toColumnMajorSparseMatrix();
      Matrix matrix0 = cCSMatrix0.add(2180.41095);
      Basic2DMatrix.unit(0, 0);
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0);
      DenseMatrix.identity(0);
      DenseMatrix denseMatrix0 = DenseMatrix.identity(0);
      DenseMatrix.from1DArray(1934, 3, (double[]) null);
      matrix0.divide(2417.07250303899);
      Basic2DMatrix.unit(5, 1934);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Basic2DMatrix.zero(1934, 0);
      Matrix matrix1 = cRSMatrix0.sliceBottomRight((-290), 0);
      matrix1.swapRows((-9), (-9));
      // Undeclared exception!
      try { 
        denseMatrix0.removeRow((-290));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = 0;
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      double double0 = 2180.41095;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(0, 0);
      Basic2DMatrix basic2DMatrix1 = Basic2DMatrix.unit(0, 0);
      Matrix matrix0 = basic2DMatrix1.insert((Matrix) basic2DMatrix0);
      int int1 = 9;
      SparseMatrix.identity(9);
      matrix0.min();
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix.randomSymmetric(0, (-466.2320493), (Random) mockRandom0);
      Basic2DMatrix basic2DMatrix2 = new Basic2DMatrix();
      Matrix.zero(0, 9);
      int int2 = (-1994091957);
      // Undeclared exception!
      try { 
        Matrix.zero((-2067947215), (-1994091957));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2067947215x-1994091957
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(1, 1);
      Double double0 = new Double(1);
      MatrixOperation<Double> matrixOperation0 = (MatrixOperation<Double>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      MatrixMatrixOperation<Double> matrixMatrixOperation0 = (MatrixMatrixOperation<Double>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = denseMatrix0.removeLastRow();
      matrix0.equals((Object) "Y,G[s<tP n3");
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      DenseVector.fromMap(hashMap0, 1);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      matrix0.transformRow(570, vectorFunction0);
      matrix0.setRow(561, (double) (-1610612735));
      denseMatrix0.transpose();
      matrix0.subtract((double) 570);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(1, 1);
      Double double0 = new Double(1);
      MatrixOperation<Double> matrixOperation0 = (MatrixOperation<Double>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      MatrixMatrixOperation<Double> matrixMatrixOperation0 = (MatrixMatrixOperation<Double>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      String string0 = "Y,\\G[s<tP n3";
      denseMatrix0.equals((Object) "Y,G[s<tP n3");
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 1);
      ooPlaceVectorsAddition0.apply(denseVector0, denseVector0);
      Vector vector0 = denseVector0.add((Vector) denseVector0);
      // Undeclared exception!
      try { 
        denseMatrix0.insertColumn(1, vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = 572;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.fromCSV("36");
      basic2DMatrix0.toColumnMajorSparseMatrix();
      // Undeclared exception!
      try { 
        basic2DMatrix0.select((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Double double0 = new Double(1);
      MockRandom mockRandom0 = new MockRandom(1656L);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.randomSymmetric(14, mockRandom0);
      basic2DMatrix0.removeLastRow();
      basic2DMatrix0.determinant();
      int int0 = NumberFormat.INTEGER_FIELD;
      int int1 = (-1);
      // Undeclared exception!
      try { 
        Matrix.zero(799, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(1, 1);
      Double double0 = new Double(1);
      MatrixOperation<Double> matrixOperation0 = (MatrixOperation<Double>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      MatrixMatrixOperation<Double> matrixMatrixOperation0 = (MatrixMatrixOperation<Double>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      denseMatrix0.equals((Object) "Y,G[s<tP n3");
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      int int0 = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        denseMatrix0.setRow(Integer.MAX_VALUE, 1034.385311501187);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(1, 1);
      Double double0 = new Double(1);
      MatrixOperation<Double> matrixOperation0 = (MatrixOperation<Double>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      MatrixMatrixOperation<Double> matrixMatrixOperation0 = (MatrixMatrixOperation<Double>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[1];
      intArray0[0] = 22;
      // Undeclared exception!
      try { 
        denseMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(10);
      Matrix matrix1 = matrix0.removeFirstColumn();
      matrix1.rank();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(10, 10);
      Integer integer0 = new Integer(9);
      SparseMatrix.identity(4081);
      basic2DMatrix0.determinant();
      basic2DMatrix0.equals((Object) null);
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 9);
      Vector vector0 = ooPlaceVectorsAddition0.apply(denseVector0, denseVector0);
      vector0.add((Vector) denseVector0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.insertColumn(2281, denseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..9
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int int0 = 13;
      DenseMatrix denseMatrix0 = DenseMatrix.unit(13, 13);
      double double0 = 0.964;
      Double double1 = new Double(0.964);
      denseMatrix0.toColumnMajorSparseMatrix();
      int int1 = 22;
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        denseMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(10, 10);
      Matrix matrix0 = cRSMatrix0.removeFirstColumn();
      matrix0.equals((Object) cRSMatrix0);
      matrix0.rank();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(10, 10);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.copyOfColumns((-158));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 10x-158
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(10);
      Matrix matrix1 = matrix0.removeFirstColumn();
      int int0 = NumberFormat.INTEGER_FIELD;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(10, 10);
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 10;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 10;
      doubleArray1[5] = (double) 10;
      doubleArray1[6] = (double) 0;
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 10;
      doubleArray2[2] = (double) 10;
      doubleArray2[3] = (double) 0;
      doubleArray0[2] = doubleArray2;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      CRSMatrix cRSMatrix0 = new CRSMatrix(10, 3, 10);
      Vector vector0 = matrix1.getColumn(2);
      Matrix matrix2 = basic2DMatrix0.insertColumn(2, vector0);
      matrix2.copy();
      denseMatrix0.maxInColumn(2);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          int int0 = 32;
          DenseMatrix denseMatrix0 = DenseMatrix.unit(32, 32);
          Double double0 = new Double(32);
          MatrixOperation<Double> matrixOperation0 = (MatrixOperation<Double>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
          MatrixMatrixOperation<Double> matrixMatrixOperation0 = (MatrixMatrixOperation<Double>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
          CCSMatrix cCSMatrix0 = CCSMatrix.zero(32, 32, 32);
          int[] intArray0 = new int[1];
          intArray0[0] = 22;
          denseMatrix0.trace();
          denseMatrix0.removeLastColumn();
          denseMatrix0.equals((Matrix) cCSMatrix0, 32.0);
          // Undeclared exception!
          try { 
            Matrix.block(denseMatrix0, denseMatrix0, cCSMatrix0, cCSMatrix0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
          
          } catch(ArrayIndexOutOfBoundsException e) {
             //
             // no message in exception (getMessage() returned null)
             //
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(10, 10, 10);
      cRSMatrix1.equals((Object) cRSMatrix0);
      int int0 = NumberFormat.INTEGER_FIELD;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix1.updateColumn(0, vectorFunction0);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(349, 349);
      Integer integer0 = new Integer(383);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      basic2DMatrix0.fold(matrixAccumulator0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = 3;
      Matrix.identity(3);
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.rank();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(3, 3);
      Integer integer0 = new Integer(0);
      int int1 = 4081;
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(4081);
      basic2DMatrix0.determinant();
      int int2 = (-2305);
      // Undeclared exception!
      try { 
        cRSMatrix0.insert((Matrix) sparseMatrix0, 3, 3, 4081, (-2305), 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: 4081, -2305
         //
         verifyException("org.la4j.Matrix", e);
      }
  }
}
