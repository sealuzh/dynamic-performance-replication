/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 12:54:55 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.RE2;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RE2_ESTest extends RE2_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RE2 rE2_0 = new RE2("qr]h");
      int[] intArray0 = rE2_0.findSubmatchIndex("qr]h");
      assertArrayEquals(new int[] {0, 4}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean boolean0 = RE2.match("", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("can't happen");
      int int0 = rE2_0.numberOfCapturingGroups();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      String string0 = rE2_0.replaceFirst("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      String string0 = rE2_0.replaceAll("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RE2 rE2_0 = new RE2("^^3b- ");
      String string0 = rE2_0.toString();
      assertEquals("^^3b- ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("can't happen");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = rE2_0.findUTF8(byteArray0);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RE2 rE2_0 = RE2.compile(" +FaV");
      List<String> list0 = rE2_0.findAll(" +FaV", 759);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("\"V21i");
      byte[] byteArray0 = new byte[5];
      byte[][] byteArray1 = rE2_0.findUTF8Submatch(byteArray0);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RE2 rE2_0 = new RE2("qr]h");
      String string0 = rE2_0.replaceAll("qr]h", "qr]h");
      assertEquals("qr]h", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RE2 rE2_0 = new RE2("Other_ID_Start");
      String string0 = rE2_0.replaceFirst("Other_ID_Start", "Other_ID_Start");
      assertEquals("Other_ID_Start", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      boolean boolean0 = RE2.match("^G~ '", "^G~ '");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      List<int[]> list0 = rE2_0.findAllSubmatchIndex("", 284);
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<String[]> list0 = rE2_0.findAllSubmatch("", 1);
      assertEquals("", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("12=j%>yJ6");
      assertEquals("12=j%>yJ6", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String[] stringArray0 = rE2_0.findSubmatch("12=j%>yJ6");
      assertEquals("12=j%>yJ6", rE2_0.toString());
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("TQ_@: :$^V~gV%C");
      assertEquals("TQ_@: :$^V~gV%C", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String[] stringArray0 = rE2_0.findSubmatch("TQ_@: :$^V~gV%C");
      assertEquals("TQ_@: :$^V~gV%C", rE2_0.toString());
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RE2 rE2_0 = new RE2("|Q$7njg:&g*/k<,i");
      assertEquals("|Q$7njg:&g*/k<,i", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<String> list0 = rE2_0.findAll("|Q$7njg:&g*/k<,i", 32);
      assertEquals("|Q$7njg:&g*/k<,i", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(17, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      RE2 rE2_0 = RE2.compile("|Q$7njg:&g*/k<,i");
      assertEquals("|Q$7njg:&g*/k<,i", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[][] byteArray1 = rE2_0.findUTF8Submatch(byteArray0);
      assertEquals("|Q$7njg:&g*/k<,i", rE2_0.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RE2 rE2_0 = new RE2("/");
      assertEquals("/", rE2_0.toString());
      assertNotNull(rE2_0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        rE2_0.match("/", 138, 138, 138, intArray0, 138);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RE2 rE2_0 = new RE2("$?q3;RYN^N4.ZSwlHg");
      assertEquals("$?q3;RYN^N4.ZSwlHg", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String string0 = rE2_0.find("$?q3;RYN^N4.ZSwlHg");
      assertEquals("$?q3;RYN^N4.ZSwlHg", rE2_0.toString());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      RE2 rE2_0 = RE2.compile("RUNE");
      assertEquals("RUNE", rE2_0.toString());
      assertNotNull(rE2_0);
      
      int[] intArray0 = rE2_0.findUTF8Index(byteArray0);
      assertEquals("RUNE", rE2_0.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RE2 rE2_0 = new RE2("z");
      assertEquals("z", rE2_0.toString());
      assertNotNull(rE2_0);
      
      rE2_0.reset();
      assertEquals("z", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      RE2 rE2_0 = new RE2("'<{8=mQm\"%rr8_m");
      assertEquals("'<{8=mQm\"%rr8_m", rE2_0.toString());
      assertNotNull(rE2_0);
      
      int[] intArray0 = rE2_0.findUTF8SubmatchIndex(byteArray0);
      assertEquals("'<{8=mQm\"%rr8_m", rE2_0.toString());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX(" ]+{\"");
      assertEquals(" ]+{\"", rE2_0.toString());
      assertNotNull(rE2_0);
      
      int[] intArray0 = rE2_0.findSubmatchIndex(" ]+{\"");
      assertEquals(" ]+{\"", rE2_0.toString());
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("can't happen");
      assertEquals("can't happen", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String string0 = rE2_0.find("can't happen");
      assertEquals("can't happen", rE2_0.toString());
      assertNotNull(string0);
      assertEquals("can't happen", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("#+.");
      assertEquals("#+.", rE2_0.toString());
      assertNotNull(rE2_0);
      
      int[] intArray0 = rE2_0.findSubmatchIndex("#+.");
      assertEquals("#+.", rE2_0.toString());
      assertArrayEquals(new int[] {0, 2}, intArray0);
      assertNotNull(intArray0);
      
      byte[] byteArray0 = new byte[0];
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray0, (-1864));
      assertEquals("#+.", rE2_0.toString());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("q");
      assertEquals("q", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = rE2_0.matchUTF8(byteArray0);
      assertEquals("q", rE2_0.toString());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("\"V21i");
      assertEquals("\"V21i", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<int[]> list0 = rE2_0.findAllSubmatchIndex("\"V21i", (-63));
      assertEquals("\"V21i", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[1];
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, (byte)0);
      assertEquals("", rE2_0.toString());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[0];
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray0, 11728);
      assertEquals("", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[3];
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray0, (byte)0);
      assertEquals("", rE2_0.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("invalid nested repetition operator");
      assertEquals("invalid nested repetition operator", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<int[]> list0 = rE2_0.findAllIndex("", 64);
      assertEquals("invalid nested repetition operator", rE2_0.toString());
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      boolean boolean0 = rE2_0.match("", 710, 10, 710, (int[]) null, 10);
      assertEquals("", rE2_0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("com.google.re2j.RE2");
      assertEquals("com.google.re2j.RE2", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<int[]> list0 = rE2_0.findAllIndex("com.google.re2j.RE2", 1087);
      assertEquals("com.google.re2j.RE2", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = rE2_0.findUTF8(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals("", rE2_0.toString());
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RE2 rE2_0 = new RE2("|Q$7njg:&g*/<,");
      assertEquals("|Q$7njg:&g*/<,", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<String[]> list0 = rE2_0.findAllSubmatch("|Q$7njg:&g*/<,", 2977);
      assertEquals("|Q$7njg:&g*/<,", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(15, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[25];
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, 446);
      assertEquals("", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(26, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[1];
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray0, (-52));
      assertEquals("", rE2_0.toString());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RE2 rE2_0 = new RE2("invalid named capture");
      assertEquals("invalid named capture", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[0];
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, 2580);
      assertEquals("invalid named capture", rE2_0.toString());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[0];
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, (-1204));
      assertEquals("", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = rE2_0.matchUTF8(byteArray0);
      assertEquals("", rE2_0.toString());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RE2 rE2_0 = new RE2("qr]h");
      assertEquals("qr]h", rE2_0.toString());
      assertNotNull(rE2_0);
      
      int[] intArray0 = rE2_0.findIndex("qr]h");
      assertEquals("qr]h", rE2_0.toString());
      assertArrayEquals(new int[] {0, 4}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RE2 rE2_0 = new RE2("\"LS!ROg 9e7b:8c%x,");
      assertEquals("\"LS!ROg 9e7b:8c%x,", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<int[]> list0 = rE2_0.findAllSubmatchIndex("\"LS!ROg 9e7b:8c%x,", 801);
      assertEquals("\"LS!ROg 9e7b:8c%x,", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("YL#+IUIx");
      assertEquals("YL#+IUIx", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<String[]> list0 = rE2_0.findAllSubmatch("YL#+IUIx", 64976);
      assertEquals("YL#+IUIx", rE2_0.toString());
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<String[]> list0 = rE2_0.findAllSubmatch("", 649);
      assertEquals("", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("|Q$7njg:&g*/<,");
      assertEquals("|Q$7njg:&g*/<,", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String string0 = rE2_0.replaceAll("|Q$7njg:&g*/<,", "|Q$7njg:&g*/<,");
      assertEquals("|Q$7njg:&g*/<,", rE2_0.toString());
      assertNotNull(string0);
      assertEquals("|Q$7njg:&g*/<,||Q$7njg:&g*/<,Q|Q$7njg:&g*/<,$|Q$7njg:&g*/<,7|Q$7njg:&g*/<,n|Q$7njg:&g*/<,j|Q$7njg:&g*/<,g|Q$7njg:&g*/<,:|Q$7njg:&g*/<,&|Q$7njg:&g*/<,g|Q$7njg:&g*/<,*|Q$7njg:&g*/<,/|Q$7njg:&g*/<,<|Q$7njg:&g*/<,,|Q$7njg:&g*/<,", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      RE2 rE2_0 = new RE2("$?q3;RYN^N4.ZSwlHg");
      assertEquals("$?q3;RYN^N4.ZSwlHg", rE2_0.toString());
      assertNotNull(rE2_0);
      
      int[] intArray0 = rE2_0.findIndex("$?q3;RYN^N4.ZSwlHg");
      assertEquals("$?q3;RYN^N4.ZSwlHg", rE2_0.toString());
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = RE2.quoteMeta("x6t+{Egp;#rIC_8L^)");
      assertNotNull(string0);
      assertEquals("x6t\\+\\{Egp;#rIC_8L\\^\\)", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = rE2_0.match("", (-1), (-1), 851, intArray0, 851);
      assertEquals("", rE2_0.toString());
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      RE2 rE2_0 = RE2.compile("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      int[] intArray0 = rE2_0.findUTF8Index(byteArray0);
      assertEquals("", rE2_0.toString());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("$");
      assertEquals("$", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[1];
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, 713);
      assertEquals("$", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      int[] intArray0 = new int[4];
      boolean boolean0 = rE2_0.match("", 0, 0, 0, intArray0, 0);
      assertEquals("", rE2_0.toString());
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("$");
      assertEquals("$", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[0];
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, 698);
      assertEquals("$", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(list0);
      
      String string0 = rE2_0.toString();
      assertEquals("$", rE2_0.toString());
      assertNotNull(string0);
      assertEquals("$", string0);
      
      String string1 = rE2_0.replaceAll("$", "Mongolian");
      assertFalse(string1.equals((Object)string0));
      assertEquals("$", rE2_0.toString());
      assertNotNull(string1);
      assertEquals("$Mongolian", string1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      int[] intArray0 = new int[1];
      boolean boolean0 = rE2_0.match("", 0, 0, 0, (int[]) null, 0);
      assertEquals("", rE2_0.toString());
      assertTrue(boolean0);
  }
}
