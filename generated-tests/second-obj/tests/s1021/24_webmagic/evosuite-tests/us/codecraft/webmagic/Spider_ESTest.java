/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 07:47:34 GMT 2018
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.function.IntUnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.downloader.Downloader;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.monitor.SpiderMonitor;
import us.codecraft.webmagic.pipeline.CollectorPipeline;
import us.codecraft.webmagic.pipeline.ConsolePipeline;
import us.codecraft.webmagic.pipeline.FilePipeline;
import us.codecraft.webmagic.pipeline.JsonFilePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.pipeline.ResultItemsCollectorPipeline;
import us.codecraft.webmagic.processor.PageProcessor;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.PriorityScheduler;
import us.codecraft.webmagic.scheduler.QueueScheduler;
import us.codecraft.webmagic.scheduler.component.DuplicateRemover;
import us.codecraft.webmagic.selector.AndSelector;
import us.codecraft.webmagic.selector.JsonPathSelector;
import us.codecraft.webmagic.selector.Selector;
import us.codecraft.webmagic.selector.SmartContentSelector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("tO6?ZBm.[}");
      Spider spider0 = new Spider(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      // Undeclared exception!
      try { 
        spider1.initComponent();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("title");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      Spider spider2 = spider1.setExecutorService(forkJoinPool0);
      // Undeclared exception!
      try { 
        spider2.thread((ExecutorService) forkJoinPool0, (-547));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityBlockingQueue<String> priorityBlockingQueue0 = new PriorityBlockingQueue<String>();
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) priorityBlockingQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.setScheduler(priorityScheduler0);
      Spider spider2 = spider1.setExitWhenComplete(true);
      spider2.setUUID("");
      // Undeclared exception!
      try { 
        spider0.addRequest((Request[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("bf3Zgb qPO_7JaK16");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("bf3Zgb qPO_7JaK16");
      LinkedList<Selector> linkedList0 = new LinkedList<Selector>();
      AndSelector andSelector0 = new AndSelector(linkedList0);
      List<String> list0 = andSelector0.selectList("bf3Zgb qPO_7JaK16");
      Spider spider2 = spider1.startUrls(list0);
      CollectorPipeline collectorPipeline0 = spider0.getCollectorPipeline();
      Spider spider3 = spider2.addPipeline(collectorPipeline0);
      // Undeclared exception!
      try { 
        spider3.getAll((Collection<String>) list0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("l&/PLcmb<");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, "l&/PLcmb<");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Spider spider2 = spider1.setExitWhenComplete(false);
      spider2.runAsync();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "l&/PLcmb<";
      // Undeclared exception!
      try { 
        spider0.addUrl((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request[] requestArray0 = new Request[0];
      Spider spider1 = spider0.addRequest(requestArray0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider2 = spider1.scheduler(priorityScheduler0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      // Undeclared exception!
      try { 
        spider2.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline("");
      Spider spider1 = spider0.pipeline(filePipeline0);
      int int0 = 1;
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(int0);
      Spider spider2 = spider1.thread((ExecutorService) forkJoinPool0, int0);
      String string0 = "process request ";
      Spider spider3 = spider2.setUUID(string0);
      Spider spider4 = spider3.setExecutorService(forkJoinPool0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider5 = spider4.startRequest(linkedList0);
      Spider spider6 = spider5.clearPipeline();
      assertTrue(spider6.isExitWhenComplete());
      assertTrue(spider6.isSpawnUrl());
      assertEquals(0L, spider6.getPageCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("title");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.clearPipeline();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      Spider spider1 = spider0.setUUID("title");
      Spider spider2 = spider1.thread((ExecutorService) forkJoinPool0, 86);
      // Undeclared exception!
      try { 
        spider2.addUrl((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setDownloader((Downloader) null);
      Spider spider2 = spider1.setUUID("5dw,H07C0r2");
      Spider spider3 = spider2.thread(564);
      CollectorPipeline collectorPipeline0 = spider0.getCollectorPipeline();
      Spider spider4 = spider3.pipeline(collectorPipeline0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider5 = spider4.scheduler(queueScheduler0);
      spider5.start();
      assertTrue(spider5.isExitWhenComplete());
      assertEquals(0L, spider5.getPageCount());
      assertTrue(spider5.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      spider0.clearPipeline();
      Spider spider1 = spider0.clearPipeline();
      String[] stringArray0 = new String[0];
      spider1.addUrl(stringArray0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider2 = spider0.thread(5);
      String string0 = spider2.getUUID();
      assertNull(string0);
      
      Page page0 = new Page();
      spider1.destroyWhenExit = false;
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("<1");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.isSpawnUrl();
      SmartContentSelector smartContentSelector0 = new SmartContentSelector();
      ForkJoinPool forkJoinPool0 = null;
      try {
        forkJoinPool0 = new ForkJoinPool(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ForkJoinPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("/;#2)");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setDownloader((Downloader) null);
      Spider spider2 = spider1.setExitWhenComplete(true);
      CollectorPipeline collectorPipeline0 = spider0.getCollectorPipeline();
      Spider spider3 = spider2.addPipeline(collectorPipeline0);
      // Undeclared exception!
      try { 
        spider3.thread((-644));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Page page0 = new Page();
      Request request0 = new Request();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.setScheduler(queueScheduler0);
      Spider spider2 = spider0.setUUID("illegal encoding ");
      assertTrue(spider2.isExitWhenComplete());
      
      spider0.setExitWhenComplete(false);
      spider2.clearPipeline();
      spider2.stop();
      int int0 = spider1.getThreadAlive();
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.setScheduler(priorityScheduler0);
      Spider spider2 = spider1.clearPipeline();
      spider2.scheduler(priorityScheduler0);
      Spider spider3 = spider1.clearPipeline();
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        spider3.addUrl(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.getStartTime();
      spider0.setEmptySleepTime((-2690));
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" %9E-Z[y0i2_9^DGi");
      Spider spider0 = new Spider(simplePageProcessor0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = " %9E-Z[y0i2_9^DGi";
      stringArray0[2] = " %9E-Z[y0i2_9^DGi";
      stringArray0[3] = " %9E-Z[y0i2_9^DGi";
      stringArray0[4] = stringArray0[1];
      stringArray0[6] = " %9E-Z[y0i2_9^DGi";
      spider0.getPageCount();
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("downloading page success {}");
      Spider spider0 = Spider.create(simplePageProcessor0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)37;
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte)120;
      spider0.pageProcessor = (PageProcessor) simplePageProcessor0;
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("downloading page success {}");
      spider0.uuid = "T/g@?_l#g2zV_";
      spider0.isExitWhenComplete();
      Request request0 = new Request();
      Request request1 = request0.setMethod("HTTP request failed");
      request1.addCookie("_cycle_tried_times", "HTTP request failed");
      request1.addCookie("downloading page success {}", "HTTP request failed");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      request0.setMethod("xeNryYb.%]w']");
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.getSpiderListeners();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Spider spider1 = spider0.setSpiderListeners((List<SpiderListener>) null);
      Spider spider2 = spider1.setUUID("");
      Spider spider3 = spider2.clearPipeline();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      // Undeclared exception!
      try { 
        spider3.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("l&/PLcmb<");
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertTrue(spider0.isExitWhenComplete());
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, "l&/PLcmb<");
      Spider spider1 = spider0.setExitWhenComplete(false);
      spider1.runAsync();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "l&/PLcmb<";
      stringArray0[1] = "l&/PLcmb<";
      stringArray0[2] = null;
      stringArray0[4] = "l&/PLcmb<";
      stringArray0[0] = "l&/PLcmb<";
      stringArray0[6] = "l&/PLcmb<";
      Spider spider2 = spider0.setUUID("l&/PLcmb<");
      Spider spider3 = spider1.setExitWhenComplete(false);
      spider3.clearPipeline();
      spider2.stop();
      int int0 = spider2.getThreadAlive();
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.setScheduler(priorityScheduler0);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      spider1.pipeline(consolePipeline0);
      spider1.clearPipeline();
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(5, threadPoolExecutor_AbortPolicy0);
      spider1.setEmptySleepTime(5);
      Spider spider2 = spider0.clearPipeline();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider1.start();
      AtomicInteger atomicInteger0 = new AtomicInteger((-1529));
      IntUnaryOperator intUnaryOperator0 = mock(IntUnaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(intUnaryOperator0).applyAsInt(anyInt());
      atomicInteger0.updateAndGet(intUnaryOperator0);
      String string0 = spider2.getUUID();
      assertNull(string0);
      
      Page page0 = new Page();
      spider0.getCollectorPipeline();
      spider1.extractAndAddRequests(page0, false);
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setPipelines((List<Pipeline>) null);
      spider1.spawnUrl = false;
      spider1.sleep(856);
      spider0.setSpawnUrl(false);
      Request request0 = new Request();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      request0.putExtra("3GvF`os", "3GvF`os");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      request0.addCookie("", (String) null);
      Page page0 = new Page();
      // Undeclared exception!
      try { 
        spider0.extractAndAddRequests(page0, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Spider.Status.fromValue((-644));
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(".\u0005tXk4`r>VRp{6ee");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      spider0.sleep(30000);
      spider0.setSpiderListeners(linkedList0);
      CollectorPipeline collectorPipeline0 = spider0.getCollectorPipeline();
      Spider spider1 = spider0.pipeline(collectorPipeline0);
      // Undeclared exception!
      try { 
        spider1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Thread interrupted when sleep");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("Thread interrupted when sleep");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      spider1.start();
      Spider spider2 = spider0.setSpiderListeners(linkedList0);
      Request request0 = new Request();
      Request request1 = request0.addHeader("Thread interrupted when sleep", "Thread interrupted when sleep");
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      request1.setPriority((-1L));
      spider2.getScheduler();
      // Undeclared exception!
      try { 
        spider2.addPipeline(consolePipeline0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Spider is already running!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request[] requestArray0 = new Request[1];
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      priorityScheduler0.poll(spider0);
      requestArray0[0] = null;
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("ddwnloading page9success {}");
      Spider spider0 = Spider.create(simplePageProcessor0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)37;
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      ResultItemsCollectorPipeline resultItemsCollectorPipeline1 = new ResultItemsCollectorPipeline();
      Page page0 = Page.fail();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      page0.getResultItems();
      LinkedList<SpiderListener> linkedList1 = new LinkedList<SpiderListener>();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("ddwnloading page9success {}", "");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      Locale locale0 = Locale.FRANCE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<SpiderListener> list0 = spider1.getAll((Collection<String>) set0);
      Spider spider2 = spider0.setSpiderListeners(list0);
      spider2.stop();
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("");
      spider0.clearPipeline();
      spider1.setSpawnUrl(false);
      spider2.setDownloader(phantomJSDownloader0);
      // Undeclared exception!
      try { 
        spider2.get("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.getStatus();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      spider0.getSpiderListeners();
      Page page0 = Page.fail();
      // Undeclared exception!
      try { 
        simplePageProcessor0.process(page0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=b69\"&]/R_w7Np");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("=b69\"&]/R_w7Np", "=b69\"&]/R_w7Np");
      Spider spider2 = spider0.downloader(phantomJSDownloader0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      ResultItemsCollectorPipeline resultItemsCollectorPipeline1 = new ResultItemsCollectorPipeline();
      Page page0 = Page.fail();
      page0.getResultItems();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      Locale locale0 = Locale.FRANCE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      spider0.getAll((Collection<String>) set0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider2.stop();
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("");
      Spider spider3 = spider2.clearPipeline();
      spider3.setDownloader(phantomJSDownloader0);
      spider1.thread(5);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "=b69\"&]/R_w7Np";
      // Undeclared exception!
      try { 
        spider2.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      spider0.downloader(phantomJSDownloader0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      ResultItemsCollectorPipeline resultItemsCollectorPipeline1 = new ResultItemsCollectorPipeline();
      Page page0 = Page.fail();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      page0.getResultItems();
      LinkedList<SpiderListener> linkedList1 = new LinkedList<SpiderListener>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      Locale locale0 = Locale.FRANCE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      spider0.getAll((Collection<String>) set0);
      Page page1 = page0.setSkip(false);
      page1.setSkip(false);
      LinkedList<SpiderListener> linkedList2 = new LinkedList<SpiderListener>();
      Spider spider1 = spider0.setExitWhenComplete(false);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      DuplicateRemover duplicateRemover0 = fileCacheQueueScheduler0.getDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(duplicateRemover0);
      Spider spider2 = spider1.scheduler(duplicateRemovedScheduler0);
      LinkedList<SpiderListener> linkedList3 = new LinkedList<SpiderListener>();
      spider2.setSpiderListeners(linkedList3);
      spider2.getScheduler();
      // Undeclared exception!
      try { 
        spider1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.FileCacheQueueScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      Spider spider2 = spider0.downloader(phantomJSDownloader0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      ResultItemsCollectorPipeline resultItemsCollectorPipeline1 = new ResultItemsCollectorPipeline();
      Page page0 = Page.fail();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      page0.getResultItems();
      LinkedList<SpiderListener> linkedList1 = new LinkedList<SpiderListener>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      Locale locale0 = Locale.FRANCE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<SpiderListener> list0 = spider0.getAll((Collection<String>) set0);
      spider2.setSpiderListeners(list0);
      Page page1 = new Page();
      Request request0 = new Request();
      request0.setUrl("");
      spider0.getThreadAlive();
      // Undeclared exception!
      try { 
        spider1.onSuccess(request0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }
}
