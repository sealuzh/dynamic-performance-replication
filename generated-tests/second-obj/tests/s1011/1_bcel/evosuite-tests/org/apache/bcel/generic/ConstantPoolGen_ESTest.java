/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 00:20:27 GMT 2018
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataOutputStream;
import java.io.File;
import java.io.ObjectStreamConstants;
import java.io.PipedOutputStream;
import java.lang.reflect.Member;
import java.util.regex.Pattern;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.Field;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.generic.ARETURN;
import org.apache.bcel.generic.ArrayType;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.FCONST;
import org.apache.bcel.generic.INSTANCEOF;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.Type;
import org.apache.bcel.util.BCELComparator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConstantPoolGen_ESTest extends ConstantPoolGen_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      String string0 = constantPoolGen0.toString();
      assertEquals("1)null\n", string0);
      assertEquals(2, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-254), (-254));
      constantArray0[0] = (Constant) constantMethodHandle0;
      int int0 = 47;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(47, 47);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[1] = (Constant) constantMethodref1;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("4J[CecO@h;");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(255, 255);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[1] = (Constant) constantInvokeDynamic1;
      ConstantClass constantClass0 = new ConstantClass(180);
      constantArray0[2] = (Constant) constantClass0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantInteger constantInteger0 = new ConstantInteger((-1593));
      constantArray0[1] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      int int0 = constantPoolGen0.addDouble((-1593));
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(51, 51);
      constantArray0[3] = (Constant) constantFieldref0;
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      constantArray0[2] = (Constant) constantDouble0;
      Constant[] constantArray1 = new Constant[9];
      constantArray1[1] = (Constant) constantDouble0;
      constantArray1[3] = (Constant) constantDouble0;
      constantArray1[5] = (Constant) constantDouble0;
      constantArray1[6] = (Constant) constantDouble0;
      constantArray1[7] = (Constant) constantFieldref0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(786, 248);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[0] = (Constant) constantFieldref1;
      ConstantLong constantLong0 = new ConstantLong(248);
      constantArray0[1] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      int int0 = constantPoolGen0.lookupLong(248);
      assertEquals(1, int0);
      assertEquals(2, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(6, 251);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[2] = (Constant) constantFloat1;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getConstant(6);
      assertEquals(1, constantPoolGen0.getSize());
      
      constantArray0[3] = null;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      constantPoolGen1.adjustSize();
      assertEquals(4, constantPoolGen1.getSize());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FileSystemHandling.shouldAllThrowIOExceptions();
      constantPoolGen0.addDouble((-3852.4853377771));
      int int0 = constantPoolGen0.lookupLong(1);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantString constantString0 = new ConstantString((-2108));
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addNameAndType((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes must not be null!
         //
         verifyException("org.apache.bcel.classfile.ConstantUtf8", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantLong constantLong0 = new ConstantLong(2315);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(329, 2315);
      constantArray0[2] = (Constant) constantNameAndType0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 329
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      constantArray0[0] = (Constant) constantDouble0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(162);
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[2] = (Constant) constantMethodType1;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      BCELComparator bCELComparator0 = Field.getComparator();
      Constant.setComparator(bCELComparator0);
      int int0 = constantPoolGen0.lookupMethodref("+Pl!%", "WFdDTz/#<(", "+Pl!%");
      assertEquals((-1), int0);
      assertEquals(3, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantFloat constantFloat0 = new ConstantFloat(507.5946F);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantClass constantClass0 = new ConstantClass(1);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[1] = (Constant) constantClass1;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addDouble((-3852.4853377771));
      int int0 = constantPoolGen0.getSize();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantString constantString0 = new ConstantString((-2108));
      constantArray0[1] = (Constant) constantString0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "UNKNOWN (";
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantDouble constantDouble0 = new ConstantDouble((-1006.1027));
      // Undeclared exception!
      try { 
        constantPoolGen0.setConstant(2191, constantDouble0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2191
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantInteger constantInteger0 = new ConstantInteger(232);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("Unknown constant type ");
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantInteger0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = Character.MIN_RADIX;
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = Float.BYTES;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      int int1 = Character.MAX_RADIX;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int2 = Float.MIN_EXPONENT;
      // Undeclared exception!
      try { 
        constantPoolGen0.lookupInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantLong constantLong0 = new ConstantLong(775L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[1] = (Constant) constantLong1;
      ConstantFloat constantFloat0 = new ConstantFloat((-2894.5256F));
      constantArray0[3] = (Constant) constantFloat0;
      ConstantDouble constantDouble0 = new ConstantDouble(1965);
      ConstantLong constantLong2 = new ConstantLong(1965);
      ConstantLong constantLong3 = new ConstantLong(1965);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      int int0 = constantPoolGen0.lookupLong((-1565L));
      int int1 = constantPoolGen0.lookupUtf8("wx6]");
      assertTrue(int1 == int0);
      assertEquals(9, constantPoolGen0.getSize());
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      int int0 = 51;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(51, 51);
      constantArray0[0] = (Constant) constantFieldref0;
      String string0 = "\nOperandStack B:\n";
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("\nOperandStack B:\n");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[1] = (Constant) constantUtf8_1;
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      constantArray0[2] = (Constant) constantDouble0;
      Constant[] constantArray1 = new Constant[9];
      constantArray1[0] = (Constant) constantUtf8_0;
      constantArray1[1] = (Constant) constantDouble0;
      constantArray1[2] = (Constant) constantUtf8_1;
      constantArray1[3] = (Constant) constantDouble0;
      constantArray1[4] = (Constant) constantUtf8_0;
      constantArray1[5] = (Constant) constantDouble0;
      constantArray1[6] = (Constant) constantDouble0;
      constantArray1[7] = (Constant) constantFieldref0;
      constantArray1[8] = (Constant) constantUtf8_1;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Character.MIN_RADIX;
      constantPoolGen0.addFloat(2);
      constantPoolGen0.addInteger(1);
      ARETURN aRETURN0 = new ARETURN();
      int int1 = constantPoolGen0.lookupInteger(2);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantLong constantLong0 = new ConstantLong(775L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[1] = (Constant) constantLong1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(1965, (-1191));
      constantArray0[2] = (Constant) constantMethodHandle0;
      ConstantFloat constantFloat0 = new ConstantFloat((-2894.5256F));
      constantArray0[3] = (Constant) constantFloat0;
      ConstantDouble constantDouble0 = new ConstantDouble((-1191));
      ConstantLong constantLong2 = new ConstantLong(214L);
      ConstantLong constantLong3 = new ConstantLong(1965);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.lookupLong((-1565L));
      int int0 = constantPoolGen0.addFloat(1965);
      assertEquals(10, constantPoolGen0.getSize());
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addString("URXY<na[bG 2eovE  $");
      constantPoolGen0.addFloat(2);
      constantPoolGen0.addFloat(2);
      int int0 = Double.BYTES;
      constantPoolGen0.getConstantPool();
      constantPoolGen0.addDouble((-5146.924013025557));
      constantPoolGen0.getConstantPool();
      ARETURN aRETURN0 = new ARETURN();
      constantPoolGen0.lookupInteger(8);
      assertEquals(6, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      int int0 = Double.BYTES;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addInterfaceMethodref((String) null, (String) null, "Exceptions: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addInterfaceMethodref("URXY<na[bG 2eovE  $", "URXY<na[bG 2eovE  $", "URXY<na[bG 2eovE  $");
      int int0 = constantPoolGen0.lookupInteger(4);
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = "org.apache.bcel.generic.TargetLostException";
      constantPoolGen0.lookupInterfaceMethodref("V*XWyg*6rzr5<", "V*XWyg*6rzr5<", "org.apache.bcel.generic.TargetLostException");
      constantPoolGen0.lookupMethodref("", "V*XWyg*6rzr5<", "org.apache.bcel.generic.TargetLostException");
      // Undeclared exception!
      try { 
        constantPoolGen0.addArrayClass((ArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFieldref("Yf4KS:<L7%^\":W", "Yf4KS:<L7%^\":W", "Yf4KS:<L7%^\":W");
      constantPoolGen0.addDouble(1.0);
      constantPoolGen0.lookupDouble(0.0);
      int int0 = constantPoolGen0.lookupNameAndType("Yf4KS:<L7%^\":W", "Yf4KS:<L7%^\":W");
      assertEquals(7, constantPoolGen0.getSize());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFieldref("Yf4KS:<L7%^\":W", "Yf4KS:<L7%^\":W", "Yf4KS:<L7%^\":W");
      constantPoolGen0.addNameAndType("Yf4KS:<L7%^\":W", "Yf4KS:<L7%^\":W");
      int int0 = constantPoolGen0.lookupNameAndType("Yf4KS:<L7%^\":W", "Yf4KS:<L7%^\":W");
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupFieldref("R/<", (String) null, "Iy+c7cU\"?~");
      constantPoolGen0.getSize();
      // Undeclared exception!
      try { 
        constantPoolGen0.lookupMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      constantPoolGen0.adjustSize();
      int int0 = 144;
      constantPoolGen0.addInteger(144);
      constantPoolGen0.lookupInterfaceMethodref("\n", "lneg", "lneg");
      FileSystemHandling.shouldAllThrowIOExceptions();
      constantPoolGen0.getFinalConstantPool();
      constantPoolGen0.lookupInterfaceMethodref((String) null, "\n", "invokeSpecial");
      constantPoolGen0.size = (-1);
      // Undeclared exception!
      try { 
        constantPoolGen0.addMethodref("a_f~p&Me/:h1!<g)}", "a_f~p&Me/:h1!<g)}", "a_f~p&Me/:h1!<g)}");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addString("URXY<na[bG 2eovE  $");
      constantPoolGen0.addFloat(2);
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      ARETURN aRETURN0 = new ARETURN();
      constantPoolGen0.lookupInteger(2);
      constantPool0.toString();
      assertEquals(4, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Member.PUBLIC;
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(2945, 2945);
      ConstantInteger constantInteger0 = new ConstantInteger(1);
      constantInteger0.toString();
      Method.getComparator();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      constantPoolGen0.addInterfaceMethodref("invokeStatic", "GgG@{ `W4", "GgG@{ `W4");
      constantPoolGen0.addString("GgG@{ `W4");
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-2856), 3452);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      assertEquals(7, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-2419), (-498));
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantNameAndType0, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2419
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantDouble constantDouble0 = new ConstantDouble(122.0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[0] = (Constant) constantDouble1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool1);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantPoolGen0.addConstant(constantDouble1, constantPoolGen1);
      constantPoolGen0.adjustSize();
      // Undeclared exception!
      try { 
        constantPoolGen0.addFieldref((String) null, "+n/VZyuwY<", "CONSTANT_String");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantLong constantLong0 = new ConstantLong(4016L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[1] = (Constant) constantLong1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(107, 107);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[2] = (Constant) constantMethodHandle1;
      String string0 = "ConstantValue";
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("ConstantValue");
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(107, 107);
      ConstantInteger constantInteger0 = new ConstantInteger(15);
      int int0 = ObjectStreamConstants.baseWireHandle;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addConstant(constantArray0[1], constantPoolGen1);
      int int1 = Float.MIN_EXPONENT;
      constantPoolGen1.lookupInteger((-126));
      // Undeclared exception!
      try { 
        constantPoolGen1.addMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(11, 251);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[2] = (Constant) constantFloat1;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantArray0[3] = (Constant) constantFloat1;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1wR9A+Q");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(236, 243);
      constantPoolGen0.addConstant(constantFloat0, constantPoolGen0);
      constantPoolGen0.addDouble(236);
      ArrayType arrayType0 = new ArrayType("#", 236);
      int int0 = constantPoolGen0.addArrayClass(arrayType0);
      assertEquals(6, constantPoolGen0.getSize());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      ConstantFloat constantFloat1 = new ConstantFloat(0.0F);
      constantArray0[2] = (Constant) constantFloat1;
      ConstantLong constantLong0 = new ConstantLong(4016L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[1] = (Constant) constantLong1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(107, 107);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("ConstantValue");
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(107, (-790));
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      int int0 = Pattern.MULTILINE;
      int int1 = ObjectStreamConstants.baseWireHandle;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      constantPoolGen1.getConstant(8);
      constantPoolGen1.lookupLong(8);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantMethodHandle0, constantPoolGen1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown constant type CONSTANT_MethodHandle[15](reference_kind = 107, reference_index = 107)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addString("URXY<na[bG 2eovE  $");
      constantPoolGen0.addFloat(2);
      constantPoolGen0.getConstantPool();
      constantPoolGen0.addInterfaceMethodref("mBv4d;RA", "mBv4d;RA", "GgG@{ `W4");
      constantPoolGen0.addString("URXY<na[bG 2eovE  $");
      assertEquals(9, constantPoolGen0.getSize());
      
      ConstantMethodref constantMethodref0 = new ConstantMethodref(2, 102);
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      assertEquals(3, constantPoolGen1.getSize());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.adjustSize();
      constantPoolGen0.addClass("JUTf@fUx'[Gst>F5Rq");
      constantPoolGen0.addString("JUTf@fUx'[Gst>F5Rq");
      constantPoolGen0.addClass("JUTf@fUx'[Gst>F5Rq");
      constantPoolGen0.lookupMethodref("JUTf@fUx'[Gst>F5Rq", ".not foAud", ".not foAud");
      constantPoolGen0.getFinalConstantPool();
      constantPoolGen0.lookupInteger((-1134));
      int int0 = constantPoolGen0.lookupString("JUTf@fUx'[Gst>F5Rq");
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantString constantString0 = new ConstantString(2315);
      constantArray0[0] = (Constant) constantString0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantLong constantLong0 = new ConstantLong(2315);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[1] = (Constant) constantLong0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addLong(2315);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantArray0[0], constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2315
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Character.MIN_RADIX;
      ConstantInteger constantInteger0 = new ConstantInteger(2);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      Constant[] constantArray0 = new Constant[2];
      BCELComparator bCELComparator0 = Field.getComparator();
      Constant.setComparator(bCELComparator0);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addConstant(constantInteger1, constantPoolGen1);
      constantPoolGen0.addInteger(2);
      ARETURN aRETURN0 = new ARETURN();
      constantPoolGen0.lookupInteger(1);
      int int1 = constantPoolGen0.addFloat(1);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Constant[] constantArray0 = new Constant[2];
      BCELComparator bCELComparator0 = Field.getComparator();
      Constant.setComparator(bCELComparator0);
      ARETURN aRETURN0 = new ARETURN();
      String string0 = "%org.apac{e.bcel.verIfier.exc.StructuralCodConstraintException";
      constantPoolGen0.lookupInterfaceMethodref("%org.apac{e.bcel.verIfier.exc.StructuralCodConstraintException", "o,jAY7W$%rjN3q ", "SE<%g4");
      constantPoolGen0.addUtf8("");
      MethodGen methodGen0 = null;
      // Undeclared exception!
      try { 
        constantPoolGen0.addMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = Member.PUBLIC;
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(2945, 2945);
      ConstantInteger constantInteger0 = new ConstantInteger(1);
      constantInteger0.toString();
      Method.getComparator();
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantInteger0;
      constantArray0[1] = (Constant) constantMethodHandle0;
      constantArray0[3] = (Constant) constantMethodHandle0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-46);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      constantPoolGen1.addMethodref("CONSTANT_Integer[3](bytes = 1)", "CONSTANT_Integer[3](bytes = 1)", "CONSTANT_Integer[3](bytes = 1)");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      mockPrintStream0.println((float) 2945);
      dataOutputStream0.write(byteArray0);
      constantInteger0.dump(dataOutputStream0);
      constantPoolGen1.addMethodref("CONSTANT_Integer[3](bytes = 1)", "CONSTANT_Integer[3](bytes = 1)", "CONSTANT_Integer[3](bytes = 1)");
      assertEquals(5, constantPoolGen1.getSize());
      
      int int2 = Character.MAX_CODE_POINT;
      FileSystemHandling.shouldAllThrowIOExceptions();
      constantMethodHandle0.setReferenceIndex(153);
      constantPoolGen0.getConstantPool();
      int int3 = constantPoolGen0.lookupString("CONSTANT_Integer[3](bytes = 1)");
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Constant[] constantArray0 = new Constant[11];
      ConstantFloat constantFloat0 = new ConstantFloat((-1.8033493F));
      constantArray0[0] = (Constant) constantFloat0;
      ConstantLong constantLong0 = new ConstantLong(4016L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[1] = (Constant) constantLong1;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("ConstantValue");
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(107, (-790));
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      ConstantInteger constantInteger0 = new ConstantInteger(107);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(107, 107);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(250, 250);
      ConstantInterfaceMethodref constantInterfaceMethodref2 = new ConstantInterfaceMethodref(107, (-790));
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Member.DECLARED;
      constantPoolGen0.adjustSize();
      constantPoolGen0.lookupLong(4016L);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      int int1 = constantPoolGen1.addConstant(constantUtf8_0, constantPoolGen0);
      assertEquals(12, constantPoolGen1.getSize());
      assertEquals(11, int1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat((-3084.2434F));
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-394), (-394));
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(37, (-394));
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(37, 37);
      ConstantInterfaceMethodref constantInterfaceMethodref2 = new ConstantInterfaceMethodref(constantInterfaceMethodref1);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.lookupLong((-1L));
      constantPoolGen0.adjustSize();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantPoolGen1.adjustSize();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantInterfaceMethodref2, constantPoolGen1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantDouble constantDouble0 = new ConstantDouble(2617.351);
      ConstantDouble constantDouble1 = new ConstantDouble(2617.351);
      constantArray0[0] = (Constant) constantDouble1;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-13));
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-13), (-13));
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType((-13), (-13));
      ConstantNameAndType constantNameAndType2 = new ConstantNameAndType((-13), (-13));
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool1);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen();
      constantPoolGen2.addConstant(constantDouble1, constantPoolGen0);
      constantDouble1.copy();
      ConstantPoolGen constantPoolGen3 = new ConstantPoolGen(constantArray0);
      ConstantPoolGen constantPoolGen4 = new ConstantPoolGen();
      constantPoolGen2.addConstant(constantDouble1, constantPoolGen4);
      constantDouble1.copy();
      String string0 = "\"}\\uquWUc";
      constantPoolGen3.adjustSize();
      constantPoolGen3.lookupInterfaceMethodref("", "", string0);
      ConstantString constantString0 = new ConstantString(53);
      constantPoolGen1.toString();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "GPnF.gp9e;MnK");
      constantPoolGen0.addUtf8("\">9qRCQS,_;%E+%Q#");
      ConstantPoolGen constantPoolGen5 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantNameAndType0, constantPoolGen5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -13
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      int int0 = 1979;
      ConstantInteger constantInteger0 = new ConstantInteger(1979);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(".WY<VWU)I{`7M|`)zL&W");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      BCELComparator bCELComparator0 = Constant.getComparator();
      Constant.setComparator(bCELComparator0);
      constantUtf8_1.copy();
      constantUtf8_0.copy();
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(1667, 1979);
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel");
      String string0 = "HWC%y9J.$d'B*Vpu";
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "HWC%y9J.$d'B*Vpu");
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(1667, 1979);
      ConstantInterfaceMethodref constantInterfaceMethodref2 = new ConstantInterfaceMethodref(constantInterfaceMethodref1);
      ConstantInterfaceMethodref constantInterfaceMethodref3 = new ConstantInterfaceMethodref(constantInterfaceMethodref1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(".WY<VWU)I{`7M|`)zL&W");
      mockPrintStream0.append('f');
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int1 = Character.MIN_CODE_POINT;
      Constant.setComparator(bCELComparator0);
      constantPoolGen0.adjustSize();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      ConstantClass constantClass0 = new ConstantClass(107);
      // Undeclared exception!
      try { 
        constantPoolGen1.addConstant(constantClass0, constantPoolGen0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Float.BYTES;
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      constantPoolGen0.addString("");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      int int1 = Float.MIN_EXPONENT;
      FileSystemHandling.shouldAllThrowIOExceptions();
      constantPoolGen0.addMethodref("", "", "");
      int int2 = Pattern.DOTALL;
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantPool0);
      assertEquals(6, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = Member.PUBLIC;
      int int1 = Member.DECLARED;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(2945, 2945);
      ConstantInteger constantInteger0 = new ConstantInteger(1);
      constantInteger0.toString();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Constant[] constantArray0 = new Constant[4];
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      Boolean boolean0 = new Boolean("CONSTANT_Integer[3](bytes = 1)");
      constantPoolGen1.addInteger(2630);
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen();
      ConstantFieldref constantFieldref0 = new ConstantFieldref(2945, 2945);
      constantPoolGen1.getFinalConstantPool();
      // Undeclared exception!
      try { 
        constantPoolGen2.addConstant(constantFieldref0, constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2945
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ConstantInteger constantInteger0 = new ConstantInteger(1979);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantLong constantLong0 = new ConstantLong(1979);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = Float.BYTES;
      String string0 = "";
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      constantInteger0.toString();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      constantPoolGen0.addString("");
      constantPoolGen0.addFieldref("CONSTANT_Integer[3](bytes = 1979)", "", "");
      constantPoolGen0.addFloat(1979);
      Constant constant0 = constantPool0.getConstant(6);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantFieldref constantFieldref0 = new ConstantFieldref(4, 1979);
      int int1 = Character.MAX_RADIX;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.addConstant(constant0, constantPoolGen0);
      Integer integer0 = new Integer(7);
      int int2 = Member.DECLARED;
      try { 
        constantPool0.constantToString((Constant) constantFieldref0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 1979. Constant pool size is: 256
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Constant[] constantArray0 = new Constant[13];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.lookupInterfaceMethodref("O", "O", (String) null);
      constantPoolGen0.getConstantPool();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      constantPoolGen0.addMethodref("/WY<VWU)I{`7M|`)zL&W", "b6;5|TI", "O");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      ObjectType objectType0 = ObjectType.getInstance("/WY<VWU)I{`7M|`)zL&W");
      constantPoolGen0.addClass(objectType0);
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen();
      ConstantMethodref constantMethodref0 = new ConstantMethodref(1218, 17);
      // Undeclared exception!
      try { 
        constantPoolGen2.addConstant(constantMethodref0, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1218
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }
}
