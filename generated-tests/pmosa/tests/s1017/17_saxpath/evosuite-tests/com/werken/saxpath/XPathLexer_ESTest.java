/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 12:00:02 GMT 2018
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("y8M8[nr;$?*M@ecb4g");
      xPathLexer0.identifier();
      xPathLexer0.identifier();
      xPathLexer0.minus();
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      boolean boolean0 = xPathLexer1.isIdentifierStartChar(']');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("az");
      Token token0 = xPathLexer0.identifier();
      assertEquals(15, token0.getTokenType());
      assertEquals("az", token0.getTokenText());
      
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      
      Token token2 = xPathLexer0.slashes();
      assertEquals(11, token2.getTokenType());
      
      Token token3 = xPathLexer0.whitespace();
      assertEquals("", token3.getTokenText());
      assertEquals((-2), token3.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('G');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.slashes();
      xPathLexer0.rightParen();
      Token token0 = xPathLexer0.equals();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.pipe();
      xPathLexer0.identifier();
      xPathLexer0.plus();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token0);
      
      xPathLexer0.mod();
      xPathLexer0.dollar();
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      
      xPathLexer0.or();
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      
      Token token4 = xPathLexer0.comma();
      assertEquals(32, token4.getTokenType());
      
      xPathLexer0.leftParen();
      Token token5 = xPathLexer0.minus();
      assertEquals(6, token5.getTokenType());
      
      xPathLexer0.leftParen();
      xPathLexer0.dollar();
      Token token6 = xPathLexer0.number();
      assertEquals(30, token6.getTokenType());
      
      char char0 = xPathLexer0.LA(46);
      assertEquals('\uFFFF', char0);
      
      Token token7 = xPathLexer0.whitespace();
      assertEquals((-2), token7.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.relationalOperator();
      Token token8 = xPathLexer0.notEquals();
      assertEquals(22, token8.getTokenType());
      
      Token token9 = xPathLexer0.dollar();
      assertEquals(26, token9.getTokenType());
      
      xPathLexer0.getXPath();
      xPathLexer0.setPreviousToken((Token) null);
      Token token10 = xPathLexer0.plus();
      assertEquals(5, token10.getTokenType());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer0.number();
      Token token0 = xPathLexer0.dollar();
      assertEquals("Z", token0.getTokenText());
      
      xPathLexer0.at();
      xPathLexer0.not();
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      Token token2 = xPathLexer0.leftParen();
      assertEquals(1, token2.getTokenType());
      assertEquals("#", token2.getTokenText());
      
      xPathLexer0.whitespace();
      xPathLexer0.or();
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.pipe();
      assertEquals(17, token4.getTokenType());
      assertEquals("F", token4.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      Token token5 = xPathLexer0.not();
      assertEquals("D", token5.getTokenText());
      assertEquals(23, token5.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.nextToken();
      Token token6 = xPathLexer0.star();
      assertEquals(20, token6.getTokenType());
      assertEquals("L", token6.getTokenText());
      
      Token token7 = xPathLexer0.at();
      assertEquals(16, token7.getTokenType());
      assertEquals("X", token7.getTokenText());
      
      Token token8 = xPathLexer0.rightBracket();
      assertEquals(4, token8.getTokenType());
      
      Token token9 = xPathLexer0.literal();
      assertNull(token9);
      
      xPathLexer0.colon();
      Token token10 = xPathLexer0.equals();
      assertEquals(21, token10.getTokenType());
      
      xPathLexer0.getXPath();
      Token token11 = xPathLexer0.dollar();
      assertEquals(26, token11.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.isIdentifierChar('#');
      xPathLexer0.div();
      Token token12 = xPathLexer0.colon();
      assertEquals(18, token12.getTokenType());
      
      xPathLexer0.getPreviousToken();
      xPathLexer0.consume(0);
      xPathLexer0.and();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('L');
      assertTrue(boolean0);
      
      Token token13 = xPathLexer0.doubleColon();
      assertEquals(19, token13.getTokenType());
      
      char char0 = xPathLexer0.LA(0);
      assertEquals('\uFFFF', char0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.div();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('^');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}l2cqw\"@E7bO");
      Token token0 = xPathLexer0.rightParen();
      assertEquals("}", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifier();
      assertEquals("l2cqw", token1.getTokenText());
      
      Token token2 = xPathLexer0.plus();
      assertEquals("\"", token2.getTokenText());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token3);
      
      Token token4 = xPathLexer0.identifier();
      assertEquals(15, token4.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.hasMoreChars();
      xPathLexer0.at();
      xPathLexer0.relationalOperator();
      xPathLexer0.consume();
      Token token5 = xPathLexer0.nextToken();
      assertEquals(30, token5.getTokenType());
      assertEquals("7", token5.getTokenText());
      
      xPathLexer0.consume();
      Token token6 = xPathLexer0.at();
      assertEquals("O", token6.getTokenText());
      assertEquals(16, token6.getTokenType());
      
      Token token7 = xPathLexer0.plus();
      assertEquals(5, token7.getTokenType());
      
      Token token8 = xPathLexer0.equals();
      assertEquals(21, token8.getTokenType());
      
      xPathLexer0.dots();
      Token token9 = xPathLexer0.minus();
      assertEquals(6, token9.getTokenType());
      
      xPathLexer0.dollar();
      xPathLexer0.isIdentifierStartChar('<');
      int int0 = xPathLexer0.endPosition();
      assertEquals(12, int0);
      
      Token token10 = xPathLexer0.leftBracket();
      assertEquals(3, token10.getTokenType());
      
      xPathLexer0.operatorName();
      Token token11 = xPathLexer0.rightBracket();
      assertEquals(4, token11.getTokenType());
      
      Token token12 = xPathLexer0.colon();
      assertEquals(18, token12.getTokenType());
      
      Token token13 = xPathLexer0.dots();
      assertEquals(13, token13.getTokenType());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.star();
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.operatorName();
      xPathLexer0.pipe();
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      
      xPathLexer0.leftParen();
      xPathLexer0.dots();
      xPathLexer0.consume(1073);
      xPathLexer0.consume((-1));
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(0, int0);
      
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      
      xPathLexer0.and();
      Token token4 = xPathLexer0.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      Token token5 = xPathLexer0.rightBracket();
      assertEquals(4, token5.getTokenType());
      
      xPathLexer0.setXPath("y]jad[mR3w=N");
      Token token6 = xPathLexer0.leftParen();
      assertEquals("y", token6.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token7 = xPathLexer0.doubleColon();
      assertEquals("]j", token7.getTokenText());
      assertEquals(19, token7.getTokenType());
      
      char char0 = xPathLexer0.LA(2228);
      assertEquals('\uFFFF', char0);
      
      xPathLexer0.identifierOrOperatorName();
      Token token8 = xPathLexer0.pipe();
      assertEquals("a", token8.getTokenText());
      assertEquals(17, token8.getTokenType());
      
      Token token9 = xPathLexer0.number();
      assertEquals(30, token9.getTokenType());
      assertEquals("", token9.getTokenText());
      
      xPathLexer0.consume();
      Token token10 = xPathLexer0.minus();
      assertEquals("[", token10.getTokenText());
      assertEquals(6, token10.getTokenType());
      
      xPathLexer0.isIdentifierStartChar('$');
      char char1 = xPathLexer0.LA((-1));
      assertEquals('d', char1);
      
      xPathLexer0.getXPath();
      Token token11 = xPathLexer0.dots();
      assertEquals("m", token11.getTokenText());
      assertEquals(13, token11.getTokenType());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ajt9CLs8~fPJm");
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("pV[L6oW\"dDS,");
      Token token0 = xPathLexer0.minus();
      assertEquals("p", token0.getTokenText());
      assertEquals(6, token0.getTokenType());
      
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      xPathLexer0.mod();
      Token token2 = xPathLexer0.equals();
      assertEquals(21, token2.getTokenType());
      assertEquals("[", token2.getTokenText());
      
      Token token3 = xPathLexer0.identifier();
      token3.toString();
      token3.toString();
      token3.toString();
      token3.toString();
      String string0 = token3.toString();
      assertEquals("[ (15) (L6oW)", string0);
      
      xPathLexer0.setPreviousToken(token3);
      xPathLexer0.operatorName();
      xPathLexer0.identifier();
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertNull(token4);
      
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      assertEquals("\"", token5.getTokenText());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('X');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("jriI|tqS{PB");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("jriI", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      xPathLexer0.consume(110);
      xPathLexer0.mod();
      xPathLexer0.mod();
      xPathLexer0.and();
      xPathLexer0.consume();
      xPathLexer0.literal();
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.slashes();
      Token token3 = xPathLexer0.notEquals();
      assertEquals(22, token3.getTokenType());
      
      Token token4 = xPathLexer0.dollar();
      assertEquals(26, token4.getTokenType());
      
      xPathLexer0.isIdentifierStartChar('P');
      Token token5 = xPathLexer0.rightBracket();
      assertEquals(4, token5.getTokenType());
      
      Token token6 = xPathLexer0.slashes();
      assertEquals(11, token6.getTokenType());
      
      Token token7 = xPathLexer0.plus();
      assertEquals(5, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.whitespace();
      assertEquals("", token0.getTokenText());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      assertEquals("(", token1.getTokenText());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(3, int0);
      
      Token token2 = xPathLexer0.literal();
      assertNull(token2);
      
      xPathLexer0.rightBracket();
      xPathLexer0.div();
      xPathLexer0.minus();
      xPathLexer0.relationalOperator();
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(4, token3.getTokenType());
      
      Token token4 = xPathLexer0.leftParen();
      assertEquals(1, token4.getTokenType());
      
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      
      xPathLexer0.setXPath(" C8?501.bl");
      Token token6 = xPathLexer0.nextToken();
      assertEquals("C8", token6.getTokenText());
      assertEquals(15, token6.getTokenType());
      
      xPathLexer0.nextToken();
      Token token7 = xPathLexer0.comma();
      assertEquals(32, token7.getTokenType());
      assertEquals("?", token7.getTokenText());
      
      xPathLexer0.setXPath("LR.EIL6&W^");
      xPathLexer0.operatorName();
      Token token8 = xPathLexer0.colon();
      assertEquals(18, token8.getTokenType());
      assertEquals("L", token8.getTokenText());
      
      xPathLexer0.nextToken();
      xPathLexer0.getXPath();
      Token token9 = xPathLexer0.minus();
      assertEquals(6, token9.getTokenType());
      assertEquals("R", token9.getTokenText());
      
      Token token10 = xPathLexer0.pipe();
      assertEquals(".", token10.getTokenText());
      assertEquals(17, token10.getTokenType());
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer0.number();
      Token token0 = xPathLexer0.dollar();
      assertEquals("Z", token0.getTokenText());
      
      xPathLexer0.at();
      xPathLexer0.not();
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      Token token2 = xPathLexer0.leftParen();
      assertEquals("#", token2.getTokenText());
      
      Token token3 = xPathLexer0.whitespace();
      assertEquals((-2), token3.getTokenType());
      assertEquals("", token3.getTokenText());
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      
      Token token5 = xPathLexer0.equals();
      assertEquals("F", token5.getTokenText());
      
      Token token6 = xPathLexer0.pipe();
      assertEquals("D", token6.getTokenText());
      assertEquals(17, token6.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      Token token7 = xPathLexer0.not();
      assertEquals(23, token7.getTokenType());
      assertEquals("L", token7.getTokenText());
      
      xPathLexer0.div();
      xPathLexer0.nextToken();
      Token token8 = xPathLexer0.star();
      assertEquals("X", token8.getTokenText());
      assertEquals(20, token8.getTokenType());
      
      Token token9 = xPathLexer0.at();
      assertEquals(16, token9.getTokenType());
      
      Token token10 = xPathLexer0.rightBracket();
      assertEquals("o", token10.getTokenText());
      
      Token token11 = xPathLexer0.literal();
      assertNull(token11);
      
      xPathLexer0.colon();
      Token token12 = xPathLexer0.equals();
      assertEquals(21, token12.getTokenType());
      
      xPathLexer0.getXPath();
      Token token13 = xPathLexer0.dollar();
      assertEquals(26, token13.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.isIdentifierChar('#');
      xPathLexer0.isIdentifierStartChar('#');
      int int0 = xPathLexer0.endPosition();
      assertEquals(15, int0);
      
      Token token14 = xPathLexer0.leftBracket();
      assertEquals(3, token14.getTokenType());
      
      xPathLexer0.operatorName();
      Token token15 = xPathLexer0.rightBracket();
      assertEquals(4, token15.getTokenType());
      
      Token token16 = xPathLexer0.colon();
      assertEquals(18, token16.getTokenType());
      
      Token token17 = xPathLexer0.dots();
      assertEquals(13, token17.getTokenType());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.leftParen();
      assertEquals(1, token0.getTokenType());
      
      xPathLexer0.identifier();
      XPathLexer xPathLexer1 = new XPathLexer("pV[L6oW\"dDS,");
      xPathLexer1.and();
      Token token1 = xPathLexer1.rightParen();
      assertEquals(2, token1.getTokenType());
      assertEquals("p", token1.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer0.equals();
      Token token2 = xPathLexer1.nextToken();
      assertEquals("V", token2.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.relationalOperator();
      XPathLexer xPathLexer3 = new XPathLexer("pV[L6oW\"dDS,");
      Token token3 = xPathLexer3.star();
      assertEquals(20, token3.getTokenType());
      assertEquals("p", token3.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token4 = xPathLexer4.rightBracket();
      assertEquals(4, token4.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token5 = xPathLexer5.at();
      assertEquals(16, token5.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer("pV[L6oW\"dDS,");
      Token token6 = xPathLexer6.dollar();
      assertEquals("p", token6.getTokenText());
      assertEquals(26, token6.getTokenType());
      
      xPathLexer3.consume(4521);
      char char0 = xPathLexer1.LA(4521);
      assertEquals('\uFFFF', char0);
      
      xPathLexer2.colon();
      xPathLexer4.getXPath();
      Token token7 = xPathLexer5.colon();
      assertEquals(18, token7.getTokenType());
      
      xPathLexer3.div();
      Token token8 = xPathLexer1.whitespace();
      assertEquals("", token8.getTokenText());
      assertEquals((-2), token8.getTokenType());
      
      Token token9 = xPathLexer6.plus();
      assertEquals("V", token9.getTokenText());
      assertEquals(5, token9.getTokenType());
      
      Token token10 = xPathLexer6.identifierOrOperatorName();
      assertEquals("", token10.getTokenText());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.operatorName();
      xPathLexer0.setXPath("\nl](]");
      Token token0 = xPathLexer0.whitespace();
      assertEquals("", token0.getTokenText());
      assertEquals((-2), token0.getTokenType());
      
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      xPathLexer0.div();
      Token token2 = xPathLexer0.notEquals();
      assertEquals("l]", token2.getTokenText());
      assertEquals(22, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("(", token3.getTokenText());
      assertEquals(1, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer0.number();
      Token token0 = xPathLexer0.dollar();
      assertEquals("Z", token0.getTokenText());
      
      xPathLexer0.at();
      xPathLexer0.not();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("#+FDLX&o2GJ-", token1.getTokenText());
      
      Token token2 = xPathLexer0.leftParen();
      assertEquals("#", token2.getTokenText());
      
      Token token3 = xPathLexer0.whitespace();
      assertEquals("", token3.getTokenText());
      assertEquals((-2), token3.getTokenType());
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.number();
      assertEquals("", token4.getTokenText());
      assertEquals(30, token4.getTokenType());
      
      xPathLexer0.or();
      Token token5 = xPathLexer0.pipe();
      assertEquals("F", token5.getTokenText());
      assertEquals(17, token5.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      Token token6 = xPathLexer0.not();
      assertEquals(23, token6.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.nextToken();
      Token token7 = xPathLexer0.at();
      assertEquals(16, token7.getTokenType());
      
      Token token8 = xPathLexer0.rightBracket();
      assertEquals(4, token8.getTokenType());
      
      Token token9 = xPathLexer0.literal();
      assertNull(token9);
      
      xPathLexer0.colon();
      Token token10 = xPathLexer0.equals();
      assertEquals(21, token10.getTokenType());
      
      xPathLexer0.getXPath();
      Token token11 = xPathLexer0.dollar();
      assertEquals(26, token11.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.isIdentifierChar('#');
      xPathLexer0.div();
      Token token12 = xPathLexer0.colon();
      assertEquals(18, token12.getTokenType());
      
      xPathLexer0.getPreviousToken();
      xPathLexer0.consume(0);
      xPathLexer0.setXPath("-TLn6#9");
      xPathLexer0.getXPath();
      Token token13 = xPathLexer0.identifier();
      assertEquals(15, token13.getTokenType());
      assertEquals("-TLn6", token13.getTokenText());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}l2cqw\"@E7bO");
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      assertEquals("}", token0.getTokenText());
      
      xPathLexer0.identifier();
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      assertEquals("\"", token1.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.identifier();
      xPathLexer0.mod();
      xPathLexer0.hasMoreChars();
      Token token2 = xPathLexer0.at();
      assertEquals("@", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("E7bO", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.nextToken();
      xPathLexer0.consume();
      Token token4 = xPathLexer0.at();
      assertEquals(16, token4.getTokenType());
      
      xPathLexer0.plus();
      Token token5 = xPathLexer0.equals();
      assertEquals(21, token5.getTokenType());
      
      Token token6 = xPathLexer0.dots();
      assertEquals(13, token6.getTokenType());
      
      Token token7 = xPathLexer0.minus();
      assertEquals(6, token7.getTokenType());
      
      Token token8 = xPathLexer0.dollar();
      assertEquals(26, token8.getTokenType());
      
      xPathLexer0.isIdentifierStartChar('<');
      boolean boolean0 = xPathLexer0.isIdentifierStartChar(',');
      assertFalse(boolean0);
      
      Token token9 = xPathLexer0.rightBracket();
      assertEquals(4, token9.getTokenType());
      
      Token token10 = xPathLexer0.slashes();
      assertEquals(11, token10.getTokenType());
      
      Token token11 = xPathLexer0.plus();
      assertEquals(5, token11.getTokenType());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer0.number();
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      
      Token token1 = xPathLexer0.at();
      assertEquals("&", token1.getTokenText());
      
      xPathLexer0.not();
      Token token2 = xPathLexer0.rightBracket();
      assertEquals("#", token2.getTokenText());
      
      xPathLexer0.mod();
      Token token3 = xPathLexer0.whitespace();
      assertEquals("", token3.getTokenText());
      assertEquals((-2), token3.getTokenType());
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      assertEquals("", token4.getTokenText());
      
      xPathLexer0.or();
      Token token5 = xPathLexer0.pipe();
      assertEquals(17, token5.getTokenType());
      assertEquals("F", token5.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      Token token6 = xPathLexer0.not();
      assertEquals(23, token6.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.nextToken();
      xPathLexer0.star();
      xPathLexer0.at();
      Token token7 = xPathLexer0.rightBracket();
      assertEquals(4, token7.getTokenType());
      
      xPathLexer0.literal();
      Token token8 = xPathLexer0.colon();
      assertEquals(18, token8.getTokenType());
      
      xPathLexer0.equals();
      xPathLexer0.getXPath();
      xPathLexer0.at();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.isIdentifierChar('#');
      xPathLexer0.div();
      xPathLexer0.relationalOperator();
      Token token9 = xPathLexer0.getPreviousToken();
      assertEquals("o2GJ-", token9.getTokenText());
      assertEquals(15, token9.getTokenType());
      
      xPathLexer0.consume(0);
      xPathLexer0.and();
      xPathLexer0.isIdentifierStartChar('L');
      Token token10 = xPathLexer0.doubleColon();
      assertEquals(19, token10.getTokenType());
      
      char char0 = xPathLexer0.LA(0);
      assertEquals('\uFFFF', char0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.operatorName();
      xPathLexer0.setXPath("\nl](]");
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer("\nl](]");
      Token token1 = xPathLexer1.notEquals();
      assertEquals("\nl", token1.getTokenText());
      assertEquals(22, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("l", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")");
      xPathLexer0.number();
      xPathLexer0.nextToken();
      xPathLexer0.not();
      xPathLexer0.and();
      xPathLexer0.slashes();
      xPathLexer0.whitespace();
      xPathLexer0.literal();
      xPathLexer0.rightBracket();
      xPathLexer0.isIdentifierChar('D');
      xPathLexer0.dots();
      xPathLexer0.consume((-68));
      xPathLexer0.isIdentifierChar('4');
      xPathLexer0.getPreviousToken();
      xPathLexer0.dollar();
      // Undeclared exception!
      try { 
        xPathLexer0.mod();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("pV[L6oW\"dDS,");
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      assertEquals("p", token0.getTokenText());
      
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      
      xPathLexer0.mod();
      Token token2 = xPathLexer0.equals();
      assertEquals(21, token2.getTokenType());
      assertEquals("[", token2.getTokenText());
      
      Token token3 = xPathLexer0.identifier();
      token3.toString();
      String string0 = token3.toString();
      assertEquals("[ (15) (L6oW)", string0);
      
      xPathLexer0.operatorName();
      Token token4 = xPathLexer0.number();
      assertEquals("", token4.getTokenText());
      assertEquals(30, token4.getTokenType());
      
      xPathLexer0.div();
      Token token5 = xPathLexer0.notEquals();
      assertEquals("\"d", token5.getTokenText());
      assertEquals(22, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("DS", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.colon();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(18, token0.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.setXPath("\nl](]");
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      
      xPathLexer0.div();
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      assertEquals("\nl", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(4, token3.getTokenType());
      assertEquals("]", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(";x");
      Token token0 = xPathLexer0.plus();
      assertEquals(5, token0.getTokenType());
      assertEquals(";", token0.getTokenText());
      
      xPathLexer0.setXPath(";x");
      Token token1 = xPathLexer0.whitespace();
      assertEquals("", token1.getTokenText());
      assertEquals((-2), token1.getTokenType());
      
      Token token2 = xPathLexer0.number();
      assertEquals("", token2.getTokenText());
      assertEquals(30, token2.getTokenType());
      
      xPathLexer0.div();
      Token token3 = xPathLexer0.nextToken();
      assertEquals("x", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.operatorName();
      xPathLexer0.setXPath("F ");
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer("");
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token1 = xPathLexer2.notEquals();
      assertEquals(22, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("F", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      
      xPathLexer0.setXPath("6h");
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      assertEquals("6", token1.getTokenText());
      
      xPathLexer0.consume();
      xPathLexer0.div();
      xPathLexer0.notEquals();
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.operatorName();
      xPathLexer0.setXPath("OCmd>/$5'uou2\"gQr1");
      xPathLexer0.operatorName();
      xPathLexer0.div();
      Token token0 = xPathLexer0.notEquals();
      assertEquals("OC", token0.getTokenText());
      assertEquals(22, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("md", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(";x");
      Token token0 = xPathLexer0.plus();
      assertEquals(";", token0.getTokenText());
      assertEquals(5, token0.getTokenType());
      
      Token token1 = xPathLexer0.pipe();
      assertEquals("x", token1.getTokenText());
      assertEquals(17, token1.getTokenType());
      
      xPathLexer0.setXPath(";x");
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      
      xPathLexer0.div();
      Token token3 = xPathLexer0.nextToken();
      assertEquals(";x", token3.getTokenText());
      
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      assertEquals(";", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(";x");
      Token token0 = xPathLexer0.plus();
      assertEquals(5, token0.getTokenType());
      assertEquals(";", token0.getTokenText());
      
      xPathLexer0.setXPath(") (");
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      
      Token token2 = xPathLexer0.rightBracket();
      assertEquals(4, token2.getTokenType());
      assertEquals(")", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("(", token3.getTokenText());
      assertEquals(1, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.setXPath("\nl](]");
      XPathLexer xPathLexer1 = new XPathLexer(") (");
      Token token1 = xPathLexer0.star();
      assertEquals("\n", token1.getTokenText());
      assertEquals(20, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("l", token2.getTokenText());
      
      Token token3 = xPathLexer1.rightBracket();
      assertEquals(")", token3.getTokenText());
      
      Token token4 = xPathLexer0.rightBracket();
      assertEquals("]", token4.getTokenText());
      assertEquals(4, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      
      xPathLexer0.setXPath("S5O[");
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      
      xPathLexer0.div();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("S5O", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      
      xPathLexer0.setXPath("\nl](]");
      XPathLexer xPathLexer1 = new XPathLexer("sC=M");
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      assertEquals("\n", token1.getTokenText());
      
      Token token2 = xPathLexer1.nextToken();
      assertEquals("sC", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      
      xPathLexer0.setXPath("a");
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      
      xPathLexer0.div();
      Token token2 = xPathLexer0.nextToken();
      assertEquals("a", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("(.K2Hvz");
      Token token0 = xPathLexer0.pipe();
      assertEquals("(", token0.getTokenText());
      assertEquals(17, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifier();
      assertEquals(".K2Hvz", token1.getTokenText());
      
      xPathLexer0.setXPath("_`");
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      
      xPathLexer0.div();
      Token token3 = xPathLexer0.nextToken();
      assertEquals("_", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.minus();
      assertEquals("`", token4.getTokenText());
      assertEquals(6, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("CB*bVk{~tr!N(Ot");
      Token token0 = xPathLexer0.star();
      assertEquals("C", token0.getTokenText());
      assertEquals(20, token0.getTokenType());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals("B*", token1.getTokenText());
      
      xPathLexer0.at();
      xPathLexer0.identifier();
      xPathLexer0.mod();
      xPathLexer0.hasMoreChars();
      Token token2 = xPathLexer0.at();
      assertEquals("{", token2.getTokenText());
      assertEquals(16, token2.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.consume();
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      
      xPathLexer0.consume();
      Token token4 = xPathLexer0.comma();
      assertEquals("N", token4.getTokenText());
      assertEquals(32, token4.getTokenType());
      
      Token token5 = xPathLexer0.plus();
      assertEquals("(", token5.getTokenText());
      assertEquals(5, token5.getTokenType());
      
      Token token6 = xPathLexer0.equals();
      assertEquals(21, token6.getTokenType());
      
      xPathLexer0.dots();
      xPathLexer0.minus();
      xPathLexer0.dollar();
      Token token7 = xPathLexer0.minus();
      assertEquals(6, token7.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('<');
      assertFalse(boolean0);
      
      xPathLexer0.endPosition();
      Token token8 = xPathLexer0.leftBracket();
      assertEquals(3, token8.getTokenType());
      
      xPathLexer0.operatorName();
      Token token9 = xPathLexer0.notEquals();
      assertEquals(22, token9.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("CB*bVk{~tr!N(Ot");
      Token token10 = xPathLexer1.rightBracket();
      assertEquals("C", token10.getTokenText());
      assertEquals(4, token10.getTokenType());
      
      Token token11 = xPathLexer1.dollar();
      assertEquals(26, token11.getTokenType());
      
      xPathLexer0.or();
      Token token12 = xPathLexer1.dots();
      assertEquals("*", token12.getTokenText());
      assertEquals(13, token12.getTokenType());
      
      Token token13 = xPathLexer1.rightParen();
      assertEquals("b", token13.getTokenText());
      assertEquals(2, token13.getTokenType());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("pV[L6oW\"dDS,");
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      assertEquals("p", token0.getTokenText());
      
      Token token1 = xPathLexer0.whitespace();
      assertEquals("", token1.getTokenText());
      assertEquals((-2), token1.getTokenType());
      
      xPathLexer0.mod();
      Token token2 = xPathLexer0.identifier();
      String string0 = token2.toString();
      assertEquals("[ (15) ()", string0);
      
      xPathLexer0.operatorName();
      xPathLexer0.number();
      xPathLexer0.div();
      Token token3 = xPathLexer0.notEquals();
      assertEquals("[L", token3.getTokenText());
      assertEquals(22, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("6", token4.getTokenText());
      assertEquals(30, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.whitespace();
      assertEquals("", token0.getTokenText());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      assertEquals("(", token1.getTokenText());
      
      xPathLexer0.endPosition();
      Token token2 = xPathLexer0.literal();
      assertNull(token2);
      
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(4, token3.getTokenType());
      
      xPathLexer0.div();
      Token token4 = xPathLexer0.minus();
      assertEquals(6, token4.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.setXPath("^XRIAp03`*F;X?Zoa[K");
      XPathLexer xPathLexer1 = new XPathLexer("f$o17e#b&5YXeC~rt");
      Token token5 = xPathLexer1.not();
      assertEquals(23, token5.getTokenType());
      assertEquals("f", token5.getTokenText());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("^XRIAp03`*F;X?Zoa[K", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer0.number();
      Token token0 = xPathLexer0.dollar();
      assertEquals("Z", token0.getTokenText());
      
      xPathLexer0.at();
      xPathLexer0.not();
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      Token token2 = xPathLexer0.leftParen();
      assertEquals("#", token2.getTokenText());
      
      xPathLexer0.or();
      Token token3 = xPathLexer0.number();
      assertEquals("", token3.getTokenText());
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.pipe();
      assertEquals(17, token4.getTokenType());
      assertEquals("+", token4.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      Token token5 = xPathLexer0.not();
      assertEquals("F", token5.getTokenText());
      assertEquals(23, token5.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.nextToken();
      Token token6 = xPathLexer0.at();
      assertEquals(16, token6.getTokenType());
      assertEquals("D", token6.getTokenText());
      
      xPathLexer0.rightBracket();
      Token token7 = xPathLexer0.notEquals();
      assertEquals("X&", token7.getTokenText());
      assertEquals(22, token7.getTokenType());
      
      xPathLexer0.isIdentifierStartChar('{');
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token8 = xPathLexer1.number();
      assertEquals(30, token8.getTokenType());
      
      xPathLexer1.div();
      Token token9 = xPathLexer0.identifier();
      assertEquals("o2GJ-", token9.getTokenText());
      
      xPathLexer1.operatorName();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token10 = xPathLexer2.rightBracket();
      assertEquals(4, token10.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("");
      Token token11 = xPathLexer3.identifierOrOperatorName();
      assertEquals(15, token11.getTokenType());
      
      Token token12 = xPathLexer2.dollar();
      assertEquals(26, token12.getTokenType());
      
      Token token13 = xPathLexer3.plus();
      assertEquals(5, token13.getTokenType());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer0.number();
      xPathLexer0.dollar();
      xPathLexer0.at();
      xPathLexer0.not();
      xPathLexer0.pipe();
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      xPathLexer0.whitespace();
      xPathLexer0.or();
      xPathLexer0.number();
      xPathLexer0.equals();
      xPathLexer0.pipe();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.not();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      xPathLexer0.star();
      xPathLexer0.at();
      xPathLexer0.rightBracket();
      xPathLexer0.literal();
      xPathLexer0.colon();
      xPathLexer0.equals();
      xPathLexer0.getXPath();
      Token token0 = xPathLexer0.dollar();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.isIdentifierChar('#');
      xPathLexer0.nextToken();
      xPathLexer0.isIdentifierStartChar('#');
      xPathLexer0.endPosition();
      xPathLexer0.leftBracket();
      xPathLexer0.operatorName();
      xPathLexer0.rightBracket();
      xPathLexer0.colon();
      Token token1 = xPathLexer0.dots();
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("oul|U{(^$yYLv'");
      Token token0 = xPathLexer0.or();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer0.number();
      xPathLexer0.dollar();
      xPathLexer0.at();
      xPathLexer0.not();
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      xPathLexer0.or();
      xPathLexer0.number();
      xPathLexer0.or();
      xPathLexer0.pipe();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.not();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      xPathLexer0.at();
      xPathLexer0.rightBracket();
      xPathLexer0.notEquals();
      xPathLexer0.isIdentifierStartChar('{');
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.number();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.pipe();
      xPathLexer0.number();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.consume();
      xPathLexer2.minus();
      xPathLexer1.isIdentifierStartChar('|');
      // Undeclared exception!
      try { 
        xPathLexer2.LA((-2064));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}l2cqw\"@E7bO");
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token0.getTokenType());
      assertNotNull(token0);
      
      Token token1 = xPathLexer0.at();
      assertEquals("}", token1.getTokenText());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.consume();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(30, token2.getTokenType());
      assertEquals("2", token2.getTokenText());
      
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      
      Token token4 = xPathLexer0.plus();
      assertEquals(5, token4.getTokenType());
      assertEquals("q", token4.getTokenText());
      
      Token token5 = xPathLexer0.equals();
      assertEquals(21, token5.getTokenType());
      assertEquals("w", token5.getTokenText());
      
      xPathLexer0.dots();
      Token token6 = xPathLexer0.minus();
      assertEquals("@", token6.getTokenText());
      assertEquals(6, token6.getTokenType());
      
      Token token7 = xPathLexer0.leftBracket();
      assertEquals("E", token7.getTokenText());
      assertEquals(3, token7.getTokenType());
      
      xPathLexer0.operatorName();
      Token token8 = xPathLexer0.rightBracket();
      assertEquals(4, token8.getTokenType());
      assertEquals("7", token8.getTokenText());
      
      Token token9 = xPathLexer0.colon();
      assertEquals(18, token9.getTokenType());
      assertEquals("b", token9.getTokenText());
      
      Token token10 = xPathLexer0.dots();
      assertEquals("O", token10.getTokenText());
      assertEquals(13, token10.getTokenType());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("CB*bVk{~tr!N(Ot");
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      assertEquals("C", token0.getTokenText());
      
      xPathLexer0.notEquals();
      xPathLexer0.at();
      Token token1 = xPathLexer0.identifier();
      assertEquals(15, token1.getTokenType());
      
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.hasMoreChars();
      XPathLexer xPathLexer2 = new XPathLexer("CB*bVk{~tr!N(Ot");
      Token token2 = xPathLexer2.at();
      assertEquals(16, token2.getTokenType());
      assertEquals("C", token2.getTokenText());
      
      xPathLexer1.relationalOperator();
      xPathLexer1.consume();
      Token token3 = xPathLexer0.nextToken();
      assertEquals("{~tr!N(Ot", token3.getTokenText());
      
      xPathLexer0.consume();
      Token token4 = xPathLexer0.comma();
      assertEquals("~", token4.getTokenText());
      assertEquals(32, token4.getTokenType());
      
      Token token5 = xPathLexer2.plus();
      assertEquals(5, token5.getTokenType());
      assertEquals("B", token5.getTokenText());
      
      Token token6 = xPathLexer1.equals();
      assertEquals(21, token6.getTokenType());
      
      xPathLexer0.dots();
      xPathLexer0.minus();
      xPathLexer1.notEquals();
      xPathLexer1.dollar();
      xPathLexer1.minus();
      xPathLexer0.isIdentifierStartChar('t');
      xPathLexer1.endPosition();
      XPathLexer xPathLexer3 = new XPathLexer("vkVMy273HuY^9QAjnJ6");
      Token token7 = xPathLexer3.leftBracket();
      assertEquals("v", token7.getTokenText());
      assertEquals(3, token7.getTokenType());
      
      xPathLexer2.operatorName();
      Token token8 = xPathLexer3.notEquals();
      assertEquals("kV", token8.getTokenText());
      assertEquals(22, token8.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("CB*bVk{~tr!N(Ot");
      Token token9 = xPathLexer4.rightBracket();
      assertEquals(4, token9.getTokenType());
      assertEquals("C", token9.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token10 = xPathLexer5.dollar();
      assertEquals(26, token10.getTokenType());
      
      xPathLexer3.or();
      Token token11 = xPathLexer0.dots();
      assertEquals(13, token11.getTokenType());
      
      Token token12 = xPathLexer1.rightParen();
      assertEquals(2, token12.getTokenType());
      
      Token token13 = xPathLexer2.minus();
      assertEquals(6, token13.getTokenType());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.leftParen();
      assertEquals(1, token0.getTokenType());
      
      xPathLexer0.identifier();
      XPathLexer xPathLexer1 = new XPathLexer("pV[La@6oW\"dD");
      xPathLexer1.setXPath("pV[La@6oW\"dD");
      Token token1 = xPathLexer1.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("pV", token1.getTokenText());
      
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      
      xPathLexer1.div();
      Token token3 = xPathLexer0.nextToken();
      assertEquals((-1), token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer0.number();
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      assertEquals("Z", token0.getTokenText());
      
      xPathLexer0.at();
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      
      Token token2 = xPathLexer0.pipe();
      assertEquals("#", token2.getTokenText());
      assertEquals(17, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("+", token3.getTokenText());
      assertEquals(5, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("FDLX", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
      
      Token token5 = xPathLexer0.rightBracket();
      assertEquals(4, token5.getTokenType());
      assertEquals("&", token5.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("2Mq");
      xPathLexer0.hasMoreChars();
      xPathLexer1.operatorName();
      Token token6 = xPathLexer0.at();
      assertEquals(16, token6.getTokenType());
      assertEquals("o", token6.getTokenText());
      
      xPathLexer1.number();
      Token token7 = xPathLexer0.number();
      assertEquals(30, token7.getTokenType());
      assertEquals("2", token7.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("2Mq");
      XPathLexer xPathLexer3 = new XPathLexer("");
      Token token8 = xPathLexer3.not();
      assertEquals(23, token8.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      Token token9 = xPathLexer0.nextToken();
      assertEquals("GJ-", token9.getTokenText());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("U!6k3} S'$shzR");
      xPathLexer0.consume();
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      assertEquals("!", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals("6", token1.getTokenText());
      assertEquals(3, token1.getTokenType());
      
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      assertEquals("k", token2.getTokenText());
      
      xPathLexer0.consume(3356);
      xPathLexer0.consume((-1));
      Token token3 = xPathLexer0.rightParen();
      assertEquals(2, token3.getTokenType());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(14, int0);
      
      Token token4 = xPathLexer0.star();
      assertEquals(20, token4.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.and();
      xPathLexer0.leftParen();
      XPathLexer xPathLexer2 = new XPathLexer("U!6k3} S'$shzR");
      Token token5 = xPathLexer2.nextToken();
      assertEquals(15, token5.getTokenType());
      assertEquals("U", token5.getTokenText());
      
      Token token6 = xPathLexer1.not();
      assertEquals(23, token6.getTokenType());
      
      Token token7 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.leftParen();
      assertEquals(1, token0.getTokenType());
      
      xPathLexer0.identifier();
      XPathLexer xPathLexer1 = new XPathLexer("pV[La@6oW\"dD");
      xPathLexer1.setXPath("pV[La@6oW\"dD");
      Token token1 = xPathLexer1.nextToken();
      assertEquals("pV", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      
      Token token3 = xPathLexer1.nextToken();
      assertEquals(3, token3.getTokenType());
      assertEquals("[", token3.getTokenText());
      
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftParen();
      assertEquals(1, token1.getTokenType());
      assertEquals("Z", token1.getTokenText());
      
      Token token2 = xPathLexer0.literal();
      assertNotNull(token2);
      assertEquals(27, token2.getTokenType());
      assertEquals("9#+FDLX", token2.getTokenText());
      
      Token token3 = xPathLexer0.rightBracket();
      assertEquals("o", token3.getTokenText());
      assertEquals(4, token3.getTokenType());
      
      xPathLexer0.div();
      Token token4 = xPathLexer0.minus();
      assertEquals(6, token4.getTokenType());
      assertEquals("2", token4.getTokenText());
      
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setXPath("Z&9#+FDLX&o2GJ-");
      XPathLexer xPathLexer2 = new XPathLexer(")");
      Token token5 = xPathLexer1.not();
      assertEquals("Z", token5.getTokenText());
      assertEquals(23, token5.getTokenType());
      
      Token token6 = xPathLexer1.nextToken();
      assertEquals("&9#+FDLX&o2GJ-", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("pV[L6oW\"dDS,");
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      assertEquals("p", token0.getTokenText());
      
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      xPathLexer0.mod();
      Token token2 = xPathLexer0.nextToken();
      assertEquals("[", token2.getTokenText());
      
      Token token3 = xPathLexer0.identifier();
      String string0 = token3.toString();
      assertEquals("[ (15) (L6oW)", string0);
      
      xPathLexer0.operatorName();
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      
      xPathLexer0.div();
      Token token5 = xPathLexer0.notEquals();
      assertEquals("\"d", token5.getTokenText());
      assertEquals(22, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("DS", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("pV[L6oW\"dDS,");
      xPathLexer0.minus();
      XPathLexer xPathLexer1 = new XPathLexer("pV[L6oW\"dDS,");
      xPathLexer1.identifier();
      xPathLexer0.mod();
      xPathLexer1.hasMoreChars();
      xPathLexer0.at();
      XPathLexer xPathLexer2 = new XPathLexer("pV[L6oW\"dDS,");
      xPathLexer2.relationalOperator();
      xPathLexer0.consume();
      xPathLexer1.nextToken();
      xPathLexer2.slashes();
      xPathLexer2.consume();
      xPathLexer2.comma();
      xPathLexer2.plus();
      xPathLexer0.equals();
      XPathLexer xPathLexer3 = new XPathLexer("`F.`!At{MS (;o+B]3");
      xPathLexer3.dots();
      xPathLexer2.minus();
      xPathLexer2.dollar();
      xPathLexer0.minus();
      xPathLexer1.not();
      xPathLexer2.nextToken();
      Token token0 = xPathLexer2.div();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("!|LK");
      Token token0 = xPathLexer1.nextToken();
      assertEquals(23, token0.getTokenType());
      assertEquals("!", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Jj\"[!op%");
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      assertEquals("J", token0.getTokenText());
      
      Token token1 = xPathLexer0.whitespace();
      assertEquals("", token1.getTokenText());
      assertEquals((-2), token1.getTokenType());
      
      Token token2 = xPathLexer0.rightBracket();
      assertEquals("\"", token2.getTokenText());
      assertEquals(4, token2.getTokenType());
      
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer("Jj\"[!op%");
      Token token3 = xPathLexer1.identifier();
      token3.toString();
      token3.toString();
      String string0 = token3.toString();
      assertEquals("[ (15) (Jj)", string0);
      
      xPathLexer0.operatorName();
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      
      xPathLexer0.div();
      Token token5 = xPathLexer1.notEquals();
      assertEquals("\"[", token5.getTokenText());
      assertEquals(22, token5.getTokenType());
      
      Token token6 = xPathLexer1.nextToken();
      assertEquals("!", token6.getTokenText());
      assertEquals(23, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("CB*bVk{~tr!N(Ot");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.identifier();
      assertEquals(15, token0.getTokenType());
      assertEquals("CB", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("CB*bVk{~tr!N(Ot");
      xPathLexer1.setXPath("");
      Token token1 = xPathLexer0.nextToken();
      assertEquals(20, token1.getTokenType());
      assertEquals("*", token1.getTokenText());
      
      Token token2 = xPathLexer1.number();
      assertEquals(30, token2.getTokenType());
      
      xPathLexer0.div();
      Token token3 = xPathLexer1.nextToken();
      assertEquals((-1), token3.getTokenType());
      
      Token token4 = xPathLexer1.leftBracket();
      assertEquals(3, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}l2cqw\"@E7bO");
      Token token0 = xPathLexer0.rightParen();
      assertEquals("}", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifier();
      assertEquals("l2cqw", token1.getTokenText());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token2);
      
      Token token3 = xPathLexer0.identifier();
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals((-1), token4.getTokenType());
      assertEquals("", token4.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token5 = xPathLexer1.nextToken();
      assertEquals((-1), token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("CB*bVk{~tr!N(Ot");
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      assertEquals("C", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer1.number();
      assertEquals(30, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftParen();
      assertEquals("B", token2.getTokenText());
      
      Token token3 = xPathLexer1.literal();
      assertNull(token3);
      
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(4, token4.getTokenType());
      assertEquals("*", token4.getTokenText());
      
      xPathLexer1.div();
      Token token5 = xPathLexer1.minus();
      assertEquals(6, token5.getTokenType());
      
      xPathLexer1.relationalOperator();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.setXPath("");
      XPathLexer xPathLexer3 = new XPathLexer("%ou.Ay#F-wT_");
      XPathLexer xPathLexer4 = new XPathLexer(")");
      Token token6 = xPathLexer1.not();
      assertEquals(23, token6.getTokenType());
      
      Token token7 = xPathLexer3.nextToken();
      assertEquals((-1), token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer0.number();
      Token token0 = xPathLexer0.dollar();
      assertEquals("Z", token0.getTokenText());
      assertEquals(26, token0.getTokenType());
      
      Token token1 = xPathLexer0.at();
      assertEquals("&", token1.getTokenText());
      assertEquals(16, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("9", token2.getTokenText());
      assertEquals(30, token2.getTokenType());
      
      xPathLexer0.leftParen();
      Token token3 = xPathLexer0.leftParen();
      assertEquals("+", token3.getTokenText());
      assertEquals(1, token3.getTokenType());
      
      xPathLexer0.identifier();
      XPathLexer xPathLexer1 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer0.setXPath("Z&9#+FDLX&o2GJ-");
      Token token4 = xPathLexer1.nextToken();
      assertEquals("Z", token4.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.number();
      Token token5 = xPathLexer1.nextToken();
      assertEquals("&9#+FDLX&o2GJ-", token5.getTokenText());
      
      Token token6 = xPathLexer2.identifierOrOperatorName();
      assertEquals(15, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("CB*bVk{~tr!N(Ot");
      xPathLexer0.setXPath("CB*bVk{~tr!N(Ot");
      Token token0 = xPathLexer0.number();
      String string0 = token0.toString();
      assertEquals("[ (30) ()", string0);
      
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifier();
      assertEquals(15, token1.getTokenType());
      assertEquals("CB", token1.getTokenText());
      
      xPathLexer0.number();
      xPathLexer0.div();
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      assertEquals("*b", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertNotSame(token3, token0);
      
      Token token4 = xPathLexer0.pipe();
      assertEquals("V", token4.getTokenText());
      assertEquals(17, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}l2cqw\"@E7bO");
      Token token0 = xPathLexer0.colon();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(18, token0.getTokenType());
      assertEquals("}", token0.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      assertEquals("l", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(30, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("cqw\"@E7bO", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("pV[L6oW\"dDS,");
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      assertEquals("p", token0.getTokenText());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      assertEquals("V", token1.getTokenText());
      
      Token token2 = xPathLexer0.whitespace();
      String string0 = token2.toString();
      assertEquals("[ (-2) ()", string0);
      
      xPathLexer0.mod();
      xPathLexer0.setPreviousToken(token2);
      Token token3 = xPathLexer0.identifier();
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      
      xPathLexer0.div();
      Token token5 = xPathLexer0.notEquals();
      assertEquals("\"d", token5.getTokenText());
      assertEquals(22, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("DS,", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("dkwBo7kM|ete?YJwR");
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("pV[L6oW\"dDS,");
      XPathLexer xPathLexer1 = new XPathLexer("IE],Te*Ovx9yY)Z0");
      Token token0 = xPathLexer1.nextToken();
      assertEquals("IE", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("CB*bVk{~tr!N(Ot");
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      assertEquals("C", token0.getTokenText());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      assertEquals("B*", token1.getTokenText());
      
      xPathLexer0.at();
      Token token2 = xPathLexer0.identifier();
      assertEquals("Vk", token2.getTokenText());
      
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token3 = xPathLexer1.whitespace();
      assertEquals((-2), token3.getTokenType());
      
      boolean boolean0 = xPathLexer1.hasMoreChars();
      assertFalse(boolean0);
      
      XPathLexer xPathLexer2 = new XPathLexer("CB*bVk{~tr!N(Ot");
      Token token4 = xPathLexer2.at();
      assertEquals(16, token4.getTokenType());
      assertEquals("C", token4.getTokenText());
      
      Token token5 = xPathLexer2.nextToken();
      assertEquals(15, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("CB*bVk{~tr!N(Ot");
      xPathLexer0.relationalOperator();
      xPathLexer0.consume();
      Token token0 = xPathLexer0.nextToken();
      assertEquals("B", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.not();
      assertEquals("*", token1.getTokenText());
      assertEquals(23, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("bVk{~tr!N(Ot", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("bVk{~tr!N(Ot", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("u#stOA");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("u", token0.getTokenText());
      
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("#stOA", token2.getTokenText());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertNull(token3);
      
      Token token4 = xPathLexer0.leftBracket();
      assertEquals("#", token4.getTokenText());
      assertEquals(3, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer0.number();
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      assertEquals("Z", token0.getTokenText());
      
      Token token1 = xPathLexer0.at();
      assertEquals("&", token1.getTokenText());
      assertEquals(16, token1.getTokenType());
      
      Token token2 = xPathLexer0.whitespace();
      assertEquals((-2), token2.getTokenType());
      assertEquals("", token2.getTokenText());
      
      Token token3 = xPathLexer0.pipe();
      assertEquals(17, token3.getTokenType());
      assertEquals("#", token3.getTokenText());
      
      Token token4 = xPathLexer0.star();
      assertEquals(20, token4.getTokenType());
      assertEquals("+", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("FDLX", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
      
      Token token6 = xPathLexer0.rightBracket();
      assertEquals("&", token6.getTokenText());
      assertEquals(4, token6.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("2Mq");
      xPathLexer0.hasMoreChars();
      xPathLexer1.operatorName();
      xPathLexer1.relationalOperator();
      xPathLexer1.number();
      xPathLexer0.number();
      XPathLexer xPathLexer2 = new XPathLexer("2Mq");
      Token token7 = xPathLexer2.nextToken();
      assertEquals(30, token7.getTokenType());
      
      Token token8 = xPathLexer2.nextToken();
      assertEquals((-1), token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}l2cqw\"@E7bO");
      Token token0 = xPathLexer0.colon();
      xPathLexer0.setPreviousToken(token0);
      assertEquals("}", token0.getTokenText());
      assertEquals(18, token0.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.relationalOperator();
      xPathLexer0.not();
      XPathLexer xPathLexer1 = new XPathLexer(";V)afp@");
      Token token1 = xPathLexer1.not();
      assertEquals(23, token1.getTokenType());
      assertEquals(";", token1.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("/r$\">S{+l");
      Token token2 = xPathLexer2.minus();
      assertEquals("/", token2.getTokenText());
      assertEquals(6, token2.getTokenType());
      
      Token token3 = xPathLexer2.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("r", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.star();
      xPathLexer0.colon();
      xPathLexer0.consume();
      xPathLexer0.operatorName();
      xPathLexer0.pipe();
      xPathLexer0.and();
      xPathLexer0.dots();
      xPathLexer0.consume((-1));
      xPathLexer0.consume((-1));
      xPathLexer0.rightParen();
      xPathLexer0.endPosition();
      xPathLexer0.star();
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer0.rightBracket();
      xPathLexer0.setXPath("y]jad[mR3w=N");
      xPathLexer0.relationalOperator();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      Token token0 = xPathLexer0.doubleColon();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.nextToken();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer("-");
      xPathLexer1.nextToken();
      xPathLexer0.consume();
      assertNotSame(xPathLexer0, xPathLexer1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("U!6k3} S'$shzR");
      xPathLexer0.leftBracket();
      xPathLexer0.consume();
      xPathLexer0.operatorName();
      xPathLexer0.pipe();
      xPathLexer0.at();
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      xPathLexer0.plus();
      xPathLexer0.leftParen();
      xPathLexer0.identifier();
      XPathLexer xPathLexer1 = new XPathLexer("u9!9j");
      xPathLexer1.doubleColon();
      xPathLexer1.nextToken();
      boolean boolean0 = xPathLexer1.isIdentifierChar('Q');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("CB*bVk{~tr!N(Ot");
      xPathLexer0.star();
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      assertEquals("B*", token0.getTokenText());
      
      Token token1 = xPathLexer0.at();
      assertEquals("b", token1.getTokenText());
      assertEquals(16, token1.getTokenType());
      
      xPathLexer0.identifier();
      xPathLexer0.mod();
      xPathLexer0.setXPath("CB*bVk{~tr!N(Ot");
      Token token2 = xPathLexer0.nextToken();
      assertEquals("CB", token2.getTokenText());
      
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("*", token4.getTokenText());
      assertEquals(20, token4.getTokenType());
      
      Token token5 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token5.getTokenType());
      assertEquals("bVk", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("%a5.H;9v3.F5]i");
      xPathLexer0.leftBracket();
      xPathLexer0.consume();
      xPathLexer0.operatorName();
      xPathLexer0.pipe();
      xPathLexer0.at();
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      xPathLexer0.plus();
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer("FKt");
      xPathLexer1.identifier();
      XPathLexer xPathLexer2 = new XPathLexer("u9!9j");
      xPathLexer0.doubleColon();
      xPathLexer0.nextToken();
      boolean boolean0 = xPathLexer2.isIdentifierChar('Y');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("RSl_*nAhgh#");
      xPathLexer0.at();
      xPathLexer0.star();
      Token token0 = xPathLexer0.number();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.colon();
      xPathLexer0.hasMoreChars();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer0.at();
      xPathLexer0.number();
      xPathLexer1.number();
      xPathLexer0.doubleColon();
      xPathLexer1.slashes();
      xPathLexer1.number();
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}l2c}qw\"@E7bO");
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.plus();
      assertEquals(5, token0.getTokenType());
      assertEquals("}", token0.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.mod();
      xPathLexer0.hasMoreChars();
      Token token1 = xPathLexer0.at();
      assertEquals("}", token1.getTokenText());
      assertEquals(16, token1.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.consume();
      xPathLexer0.div();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("w", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("RSl_*nAhgh#");
      xPathLexer0.setXPath("RSl_*nAhgh#");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("RSl_", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      xPathLexer0.consume();
      Token token1 = xPathLexer0.at();
      assertEquals("n", token1.getTokenText());
      assertEquals(16, token1.getTokenType());
      
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      assertEquals("A", token2.getTokenText());
      
      xPathLexer0.and();
      Token token3 = xPathLexer0.notEquals();
      assertEquals(22, token3.getTokenType());
      assertEquals("hg", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals((-1), token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":#");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(":", token0.getTokenText());
      assertEquals(18, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":wVk");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setXPath("<m: TSh8%'w");
      xPathLexer0.div();
      Token token0 = xPathLexer0.nextToken();
      assertEquals(":", token0.getTokenText());
      assertEquals(18, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer0.number();
      Token token0 = xPathLexer0.dollar();
      assertEquals("Z", token0.getTokenText());
      assertEquals(26, token0.getTokenType());
      
      Token token1 = xPathLexer0.at();
      assertEquals("&", token1.getTokenText());
      assertEquals(16, token1.getTokenType());
      
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      assertEquals("9", token2.getTokenText());
      
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token3 = xPathLexer1.nextToken();
      assertEquals((-1), token3.getTokenType());
      
      xPathLexer1.relationalOperator();
      xPathLexer1.mod();
      Token token4 = xPathLexer0.nextToken();
      assertEquals(5, token4.getTokenType());
      assertEquals("+", token4.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("0z7$'fZ");
      Token token5 = xPathLexer2.nextToken();
      assertEquals(30, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("U!6k3} S'$shzR");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("U", token0.getTokenText());
      assertEquals(3, token0.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      assertEquals("6", token1.getTokenText());
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      assertEquals("k", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(30, token3.getTokenType());
      
      Token token4 = xPathLexer0.leftParen();
      assertEquals("}", token4.getTokenText());
      
      xPathLexer0.or();
      xPathLexer0.operatorName();
      Token token5 = xPathLexer0.nextToken();
      assertEquals("S'$shzR", token5.getTokenText());
      
      Token token6 = xPathLexer0.notEquals();
      assertEquals("S'", token6.getTokenText());
      assertEquals(22, token6.getTokenType());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals(26, token7.getTokenType());
      assertEquals("$", token7.getTokenText());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer("");
      XPathLexer xPathLexer2 = new XPathLexer("gO,");
      Token token2 = xPathLexer2.nextToken();
      assertEquals("gO", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(">t7|vK");
      xPathLexer0.identifier();
      xPathLexer0.setXPath(">t7|vK");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(9, token0.getTokenType());
      assertEquals(">", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      
      xPathLexer0.consume();
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      assertEquals("v", token2.getTokenText());
      
      Token token3 = xPathLexer0.plus();
      assertEquals(5, token3.getTokenType());
      assertEquals("K", token3.getTokenText());
      
      xPathLexer0.or();
      xPathLexer0.and();
      Token token4 = xPathLexer0.notEquals();
      assertEquals(22, token4.getTokenType());
      
      xPathLexer0.nextToken();
      Token token5 = xPathLexer0.dots();
      assertEquals(13, token5.getTokenType());
      
      Token token6 = xPathLexer0.doubleColon();
      assertEquals(19, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(">sW6J?no8gA0?E6");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer0.nextToken();
      assertEquals(9, token0.getTokenType());
      assertEquals(">", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.star();
      xPathLexer0.colon();
      xPathLexer0.consume();
      xPathLexer0.operatorName();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.leftBracket();
      xPathLexer0.leftParen();
      xPathLexer0.relationalOperator();
      xPathLexer0.dots();
      xPathLexer0.consume((-1));
      xPathLexer0.consume((-1));
      xPathLexer0.rightParen();
      xPathLexer0.endPosition();
      xPathLexer0.star();
      XPathLexer xPathLexer1 = new XPathLexer("|yXGtr7/xOE");
      xPathLexer1.nextToken();
      xPathLexer0.consume(80);
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(13, token0.getTokenType());
      assertEquals(".", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.relationalOperator();
      xPathLexer0.whitespace();
      Token token0 = xPathLexer0.rightParen();
      assertEquals("(", token0.getTokenText());
      
      xPathLexer0.endPosition();
      Token token1 = xPathLexer0.literal();
      assertNull(token1);
      
      xPathLexer0.rightBracket();
      xPathLexer0.div();
      xPathLexer0.minus();
      xPathLexer0.or();
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.rightBracket();
      assertEquals(4, token2.getTokenType());
      
      Token token3 = xPathLexer0.leftParen();
      assertEquals(1, token3.getTokenType());
      
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      
      xPathLexer0.setXPath(" C8?501.bl");
      Token token5 = xPathLexer0.nextToken();
      assertEquals(15, token5.getTokenType());
      
      xPathLexer0.nextToken();
      Token token6 = xPathLexer0.comma();
      assertEquals("?", token6.getTokenText());
      assertEquals(32, token6.getTokenType());
      
      xPathLexer0.setXPath("LR.EIL6&W^");
      Token token7 = xPathLexer0.rightParen();
      assertEquals("L", token7.getTokenText());
      assertEquals(2, token7.getTokenType());
      
      xPathLexer0.operatorName();
      Token token8 = xPathLexer0.colon();
      assertEquals("R", token8.getTokenText());
      assertEquals(18, token8.getTokenType());
      
      Token token9 = xPathLexer0.nextToken();
      assertEquals(13, token9.getTokenType());
      
      xPathLexer0.getXPath();
      xPathLexer0.or();
      Token token10 = xPathLexer0.minus();
      assertEquals(6, token10.getTokenType());
      
      Token token11 = xPathLexer0.pipe();
      assertEquals(17, token11.getTokenType());
      assertEquals("I", token11.getTokenText());
      
      xPathLexer0.hasMoreChars();
      char char0 = xPathLexer0.LA(3);
      assertEquals('&', char0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      Token token0 = xPathLexer0.whitespace();
      assertEquals("", token0.getTokenText());
      
      xPathLexer0.rightParen();
      xPathLexer0.endPosition();
      Token token1 = xPathLexer0.literal();
      assertNull(token1);
      
      xPathLexer0.rightBracket();
      xPathLexer0.div();
      xPathLexer0.minus();
      xPathLexer0.or();
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.rightBracket();
      assertEquals(4, token2.getTokenType());
      
      Token token3 = xPathLexer0.leftBracket();
      assertEquals(3, token3.getTokenType());
      
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("DtEoPS1;R{/@AB");
      xPathLexer1.setXPath(" C8?501.bl");
      Token token5 = xPathLexer0.nextToken();
      assertEquals((-1), token5.getTokenType());
      
      xPathLexer0.nextToken();
      Token token6 = xPathLexer1.comma();
      assertEquals(32, token6.getTokenType());
      assertEquals(" ", token6.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("DtEoPS1;R{/@AB");
      xPathLexer2.setXPath("");
      Token token7 = xPathLexer1.rightParen();
      assertEquals(2, token7.getTokenType());
      
      xPathLexer2.dollar();
      xPathLexer1.operatorName();
      Token token8 = xPathLexer2.colon();
      assertEquals(18, token8.getTokenType());
      
      Token token9 = xPathLexer2.dollar();
      assertEquals(26, token9.getTokenType());
      
      Token token10 = xPathLexer1.nextToken();
      assertEquals(30, token10.getTokenType());
      
      xPathLexer0.getXPath();
      xPathLexer1.or();
      Token token11 = xPathLexer0.minus();
      assertEquals(6, token11.getTokenType());
      
      Token token12 = xPathLexer1.pipe();
      assertEquals("?", token12.getTokenText());
      assertEquals(17, token12.getTokenType());
      
      xPathLexer1.hasMoreChars();
      char char0 = xPathLexer2.LA(744);
      assertEquals('\uFFFF', char0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Jj\"[!op%");
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer0.div();
      xPathLexer1.not();
      xPathLexer0.nextToken();
      xPathLexer0.endPosition();
      xPathLexer1.setXPath("8e<fTZi=vJ_[H");
      assertNotSame(xPathLexer1, xPathLexer0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.relationalOperator();
      xPathLexer0.whitespace();
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      assertEquals("(", token0.getTokenText());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(3, int0);
      
      Token token1 = xPathLexer0.literal();
      assertNull(token1);
      
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.relationalOperator();
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(4, token3.getTokenType());
      
      xPathLexer0.leftParen();
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      
      xPathLexer0.setXPath(" C8?501.bl");
      Token token5 = xPathLexer0.nextToken();
      assertEquals("C8", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
      
      Token token6 = xPathLexer0.notEquals();
      assertEquals("?5", token6.getTokenText());
      assertEquals(22, token6.getTokenType());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals(31, token7.getTokenType());
      
      Token token8 = xPathLexer0.dots();
      assertEquals(13, token8.getTokenType());
      assertEquals("b", token8.getTokenText());
      
      Token token9 = xPathLexer0.doubleColon();
      assertEquals("l", token9.getTokenText());
      assertEquals(19, token9.getTokenType());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".,,>#F\"U;^IKe6vs&");
      xPathLexer0.number();
      xPathLexer0.plus();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("U!6k3} S'$shzR");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      assertEquals("U", token0.getTokenText());
      
      xPathLexer0.consume();
      xPathLexer0.mod();
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.leftParen();
      assertEquals("6", token1.getTokenText());
      assertEquals(1, token1.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.operatorName();
      Token token2 = xPathLexer0.nextToken();
      assertEquals("k3", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.literal();
      assertNull(token3);
      
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("CB*bVk{~tr!N(Ot");
      Token token0 = xPathLexer0.not();
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      assertEquals("B", token1.getTokenText());
      
      xPathLexer0.consume();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(23, token0.getTokenType());
      assertEquals("C", token0.getTokenText());
      
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token2 = xPathLexer0.nextToken();
      assertEquals("bVk{~tr!N(Ot", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      Token token0 = xPathLexer0.whitespace();
      assertEquals("", token0.getTokenText());
      
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      assertEquals("(", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token2 = xPathLexer1.whitespace();
      assertEquals((-2), token2.getTokenType());
      
      Token token3 = xPathLexer1.pipe();
      assertEquals(17, token3.getTokenType());
      
      Token token4 = xPathLexer1.star();
      assertEquals(20, token4.getTokenType());
      
      xPathLexer0.nextToken();
      Token token5 = xPathLexer0.rightBracket();
      assertEquals(4, token5.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("`S.7/`Jp");
      xPathLexer2.hasMoreChars();
      xPathLexer1.operatorName();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.number();
      Token token6 = xPathLexer2.number();
      assertEquals(30, token6.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("");
      Token token7 = xPathLexer2.nextToken();
      assertEquals("`S.7/`Jp", token7.getTokenText());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(">t7|vK");
      xPathLexer0.number();
      xPathLexer0.dollar();
      xPathLexer0.at();
      xPathLexer0.whitespace();
      xPathLexer0.pipe();
      xPathLexer0.star();
      xPathLexer0.nextToken();
      xPathLexer0.notEquals();
      XPathLexer xPathLexer1 = new XPathLexer(">t7|vK");
      XPathLexer xPathLexer2 = new XPathLexer(">t7|vK");
      xPathLexer2.hasMoreChars();
      xPathLexer2.operatorName();
      xPathLexer1.relationalOperator();
      Token token0 = xPathLexer1.number();
      xPathLexer0.not();
      Token token1 = xPathLexer0.nextToken();
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(">t7|vK");
      xPathLexer0.colon();
      xPathLexer0.setXPath(">t7|vK");
      xPathLexer0.nextToken();
      xPathLexer0.consume();
      xPathLexer0.at();
      xPathLexer0.and();
      xPathLexer0.not();
      xPathLexer0.nextToken();
      xPathLexer0.notEquals();
      xPathLexer0.nextToken();
      xPathLexer0.hasMoreChars();
      xPathLexer0.consume(3272);
      assertEquals(">t7|vK", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.whitespace();
      assertEquals("", token0.getTokenText());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals("(", token1.getTokenText());
      
      Token token2 = xPathLexer0.literal();
      assertNull(token2);
      
      xPathLexer0.setXPath(") (");
      Token token3 = xPathLexer0.nextToken();
      assertEquals(")", token3.getTokenText());
      assertEquals(2, token3.getTokenType());
      
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("(", token5.getTokenText());
      
      Token token6 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token6);
      assertEquals(15, token6.getTokenType());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals((-1), token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("GL0K+o<{4QC qw.}");
      Token token0 = xPathLexer0.not();
      assertEquals("G", token0.getTokenText());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      assertEquals("L", token1.getTokenText());
      
      xPathLexer0.consume();
      Token token2 = xPathLexer0.nextToken();
      assertEquals("K", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.mod();
      xPathLexer0.relationalOperator();
      Token token3 = xPathLexer0.equals();
      assertEquals("+", token3.getTokenText());
      assertEquals(21, token3.getTokenType());
      
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("<", token6.getTokenText());
      assertEquals(7, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("kTqR~V)~c");
      Token token2 = xPathLexer1.leftParen();
      assertEquals(1, token2.getTokenType());
      assertEquals("k", token2.getTokenText());
      
      xPathLexer0.or();
      Token token3 = xPathLexer1.nextToken();
      assertEquals("TqR", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer1.nextToken();
      assertEquals("~V)~c", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals("Z", token1.getTokenText());
      assertEquals(26, token1.getTokenType());
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      assertEquals("&", token2.getTokenText());
      
      xPathLexer0.consume();
      Token token3 = xPathLexer0.notEquals();
      token3.toString();
      String string0 = token3.toString();
      assertEquals("[ (22) (#+)", string0);
      
      xPathLexer0.setPreviousToken(token3);
      Token token4 = xPathLexer0.nextToken();
      assertEquals(15, token4.getTokenType());
      
      xPathLexer0.nextToken();
      Token token5 = xPathLexer0.getPreviousToken();
      assertEquals("&o2GJ-", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}l2cqw\"@E7bO");
      Token token0 = xPathLexer0.colon();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.nextToken();
      assertEquals("l2cqw", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.colon();
      assertEquals(18, token2.getTokenType());
      assertEquals("\"", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(16, token3.getTokenType());
      assertEquals("@", token3.getTokenText());
      
      xPathLexer0.getXPath();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("-/w[xTyF<");
      Token token4 = xPathLexer1.minus();
      assertEquals("-", token4.getTokenText());
      assertEquals(6, token4.getTokenType());
      
      Token token5 = xPathLexer0.pipe();
      assertEquals(17, token5.getTokenType());
      assertEquals("E", token5.getTokenText());
      
      xPathLexer0.hasMoreChars();
      char char0 = xPathLexer1.LA(95);
      assertEquals('\uFFFF', char0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("mp4Ee>(y$vnTE+");
      Token token0 = xPathLexer1.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(">t7|vK");
      xPathLexer0.identifier();
      xPathLexer0.setXPath(">t7|vK");
      XPathLexer xPathLexer1 = new XPathLexer("]zi=gMhBIb");
      Token token0 = xPathLexer1.rightBracket();
      assertEquals(4, token0.getTokenType());
      assertEquals("]", token0.getTokenText());
      
      Token token1 = xPathLexer1.nextToken();
      assertEquals("zi", token1.getTokenText());
      
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(">", token3.getTokenText());
      assertEquals(9, token3.getTokenType());
      
      Token token4 = xPathLexer0.notEquals();
      assertEquals("t7", token4.getTokenText());
      assertEquals(22, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(17, token5.getTokenType());
      assertEquals("|", token5.getTokenText());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("vK", token6.getTokenText());
      assertEquals(15, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Cmm.(G+0|C");
      Token token0 = xPathLexer0.not();
      String string0 = token0.toString();
      assertEquals("[ (23) (C)", string0);
      
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      assertEquals("m", token1.getTokenText());
      
      xPathLexer0.consume();
      xPathLexer0.setPreviousToken(token0);
      XPathLexer xPathLexer1 = new XPathLexer("Cmm.(G+0|C");
      Token token2 = xPathLexer1.number();
      assertEquals(30, token2.getTokenType());
      
      xPathLexer1.nextToken();
      Token token3 = xPathLexer1.getPreviousToken();
      assertEquals("Cmm.", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(">t7|vK");
      int int0 = xPathLexer0.endPosition();
      assertEquals(6, int0);
      
      xPathLexer0.literal();
      xPathLexer0.div();
      xPathLexer0.minus();
      xPathLexer0.or();
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.rightBracket();
      assertEquals(4, token0.getTokenType());
      
      xPathLexer0.leftParen();
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      
      xPathLexer0.setXPath("X<B@oR(>W;*<fZ\"h;");
      xPathLexer0.nextToken();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(7, token2.getTokenType());
      assertEquals("<", token2.getTokenText());
      
      Token token3 = xPathLexer0.comma();
      assertEquals("B", token3.getTokenText());
      assertEquals(32, token3.getTokenType());
      
      xPathLexer0.setXPath(">t7|vK");
      Token token4 = xPathLexer0.rightParen();
      assertEquals(2, token4.getTokenType());
      assertEquals(">", token4.getTokenText());
      
      xPathLexer0.operatorName();
      Token token5 = xPathLexer0.nextToken();
      assertEquals(15, token5.getTokenType());
      
      xPathLexer0.getXPath();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.or();
      Token token6 = xPathLexer1.minus();
      assertEquals(6, token6.getTokenType());
      
      Token token7 = xPathLexer1.pipe();
      assertEquals(17, token7.getTokenType());
      
      xPathLexer0.hasMoreChars();
      XPathLexer xPathLexer2 = new XPathLexer();
      char char0 = xPathLexer2.LA(6);
      assertEquals('\uFFFF', char0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Cmm.(G+0|C");
      xPathLexer0.not();
      xPathLexer0.relationalOperator();
      xPathLexer0.setXPath("Cmm.(G+0|C");
      XPathLexer xPathLexer1 = new XPathLexer("#F_s%5dq<:#");
      Token token0 = xPathLexer1.rightBracket();
      assertEquals("#", token0.getTokenText());
      assertEquals(4, token0.getTokenType());
      
      Token token1 = xPathLexer1.leftParen();
      assertEquals("F", token1.getTokenText());
      assertEquals(1, token1.getTokenType());
      
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      assertEquals("C", token2.getTokenText());
      
      xPathLexer0.setXPath(" C8?501.bl");
      Token token3 = xPathLexer1.at();
      assertEquals(16, token3.getTokenType());
      assertEquals("_", token3.getTokenText());
      
      xPathLexer1.nextToken();
      Token token4 = xPathLexer1.notEquals();
      assertEquals(22, token4.getTokenType());
      assertEquals("%5", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("C8", token5.getTokenText());
      
      Token token6 = xPathLexer1.dots();
      assertEquals("d", token6.getTokenText());
      assertEquals(13, token6.getTokenType());
      
      Token token7 = xPathLexer0.doubleColon();
      assertEquals("?5", token7.getTokenText());
      assertEquals(19, token7.getTokenType());
      
      Token token8 = xPathLexer1.nextToken();
      assertEquals("q<:#", token8.getTokenText());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.whitespace();
      xPathLexer0.rightParen();
      xPathLexer0.literal();
      XPathLexer xPathLexer1 = new XPathLexer("\u0003L'Wn}M_]^iL%?+'~;");
      xPathLexer1.or();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.relationalOperator();
      xPathLexer0.rightBracket();
      xPathLexer1.leftParen();
      xPathLexer2.not();
      xPathLexer2.setXPath("P65s&gqwKN");
      xPathLexer2.nextToken();
      xPathLexer2.notEquals();
      xPathLexer2.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer("I-?=G6>UV{V");
      Token token0 = xPathLexer1.getPreviousToken();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.star();
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(3, token2.getTokenType());
      
      xPathLexer0.leftParen();
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      
      xPathLexer0.consume((-1));
      xPathLexer0.consume((-1));
      Token token4 = xPathLexer0.rightParen();
      assertEquals(2, token4.getTokenType());
      
      xPathLexer0.endPosition();
      Token token5 = xPathLexer0.star();
      assertEquals(20, token5.getTokenType());
      
      xPathLexer0.and();
      Token token6 = xPathLexer0.nextToken();
      assertEquals((-1), token6.getTokenType());
      
      xPathLexer0.rightBracket();
      xPathLexer0.setXPath("y]jad[mR3w=N");
      Token token7 = xPathLexer0.leftParen();
      assertEquals("y", token7.getTokenText());
      
      Token token8 = xPathLexer0.nextToken();
      assertEquals(4, token8.getTokenType());
      assertEquals("]", token8.getTokenText());
      
      Token token9 = xPathLexer0.nextToken();
      assertEquals((-1), token9.getTokenType());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.relationalOperator();
      xPathLexer0.whitespace();
      Token token0 = xPathLexer0.rightParen();
      assertEquals("(", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      Token token1 = xPathLexer0.literal();
      assertNull(token1);
      
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.relationalOperator();
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(4, token3.getTokenType());
      
      xPathLexer0.leftParen();
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      
      xPathLexer0.setXPath(" C8?501.bl");
      Token token5 = xPathLexer0.nextToken();
      assertEquals(15, token5.getTokenType());
      
      Token token6 = xPathLexer0.notEquals();
      assertEquals(22, token6.getTokenType());
      assertEquals("?5", token6.getTokenText());
      
      Token token7 = xPathLexer0.dots();
      assertEquals(13, token7.getTokenType());
      
      Token token8 = xPathLexer0.nextToken();
      assertEquals(31, token8.getTokenType());
      assertEquals("1.", token8.getTokenText());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zCmm.(G+0|C");
      Token token0 = xPathLexer0.doubleColon();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(19, token0.getTokenType());
      assertEquals("zC", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("mm.", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("h");
      Token token2 = xPathLexer1.nextToken();
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer0.div();
      XPathLexer xPathLexer2 = new XPathLexer("fp4]F-e");
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      assertEquals(")", token0.getTokenText());
      
      Token token1 = xPathLexer2.nextToken();
      assertEquals("fp4", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      
      xPathLexer0.setXPath("pV[La@6oW\"dD");
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals("pV", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("[", token2.getTokenText());
      assertEquals(3, token2.getTokenType());
      
      xPathLexer0.nextToken();
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(16, token4.getTokenType());
      assertEquals("@", token4.getTokenText());
      
      Token token5 = xPathLexer0.notEquals();
      assertEquals("6o", token5.getTokenText());
      assertEquals(22, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals(15, token6.getTokenType());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals((-1), token7.getTokenType());
      assertEquals("", token7.getTokenText());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.operatorName();
      xPathLexer0.operatorName();
      xPathLexer0.rightParen();
      xPathLexer0.setXPath("4$");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.number();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("4$");
      Token token1 = xPathLexer1.nextToken();
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      
      xPathLexer0.identifier();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.setXPath("=}6by$Zfz6iXc");
      Token token2 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.nextToken();
      Token token3 = xPathLexer1.number();
      assertEquals(30, token3.getTokenType());
      
      Token token4 = xPathLexer1.nextToken();
      assertEquals("=", token4.getTokenText());
      assertEquals(21, token4.getTokenType());
      
      Token token5 = xPathLexer0.notEquals();
      assertEquals(22, token5.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token6 = xPathLexer3.nextToken();
      assertEquals((-1), token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Cmm.(G+0|C");
      xPathLexer0.not();
      xPathLexer0.relationalOperator();
      xPathLexer0.setXPath("Cmm.(G+0|C");
      XPathLexer xPathLexer1 = new XPathLexer("#F_s%5dq<:#");
      Token token0 = xPathLexer1.rightBracket();
      assertEquals("#", token0.getTokenText());
      assertEquals(4, token0.getTokenType());
      
      Token token1 = xPathLexer1.leftParen();
      assertEquals("F", token1.getTokenText());
      
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      
      xPathLexer0.setXPath(" C8?501.bl");
      xPathLexer1.doubleColon();
      Token token3 = xPathLexer1.at();
      assertEquals("%", token3.getTokenText());
      assertEquals(16, token3.getTokenType());
      
      Token token4 = xPathLexer1.nextToken();
      assertEquals(30, token4.getTokenType());
      
      Token token5 = xPathLexer1.notEquals();
      assertEquals(22, token5.getTokenType());
      assertEquals("dq", token5.getTokenText());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("C8", token6.getTokenText());
      assertEquals(15, token6.getTokenType());
      
      Token token7 = xPathLexer1.dots();
      assertEquals(13, token7.getTokenType());
      assertEquals("<", token7.getTokenText());
      
      Token token8 = xPathLexer0.doubleColon();
      assertEquals("?5", token8.getTokenText());
      assertEquals(19, token8.getTokenType());
      
      Token token9 = xPathLexer1.nextToken();
      assertEquals(":", token9.getTokenText());
      assertEquals(18, token9.getTokenType());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.rightParen();
      xPathLexer0.consume();
      xPathLexer0.pipe();
      xPathLexer0.consume();
      xPathLexer0.pipe();
      xPathLexer0.whitespace();
      xPathLexer0.at();
      xPathLexer0.setXPath("c-DT&4pK,/K%=JoO");
      xPathLexer0.comma();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.identifier();
      xPathLexer0.pipe();
      xPathLexer0.identifier();
      xPathLexer0.leftParen();
      xPathLexer0.number();
      xPathLexer0.not();
      xPathLexer0.nextToken();
      xPathLexer0.literal();
      xPathLexer0.plus();
      xPathLexer0.div();
      xPathLexer0.literal();
      xPathLexer0.identifierOrOperatorName();
      Token token0 = xPathLexer0.doubleColon();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}l2cqw\"@E7bO");
      Token token0 = xPathLexer0.doubleColon();
      xPathLexer0.setPreviousToken(token0);
      assertEquals("}l", token0.getTokenText());
      assertEquals(19, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("PN");
      Token token1 = xPathLexer1.not();
      assertEquals(23, token1.getTokenType());
      assertEquals("P", token1.getTokenText());
      
      Token token2 = xPathLexer1.nextToken();
      assertEquals("N", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}l2cqw\"@E7bO");
      Token token0 = xPathLexer0.doubleColon();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(19, token0.getTokenType());
      assertEquals("}l", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(30, token1.getTokenType());
      
      xPathLexer0.setXPath("$<R,?ixY[x");
      Token token2 = xPathLexer0.nextToken();
      assertEquals(26, token2.getTokenType());
      assertEquals("$", token2.getTokenText());
      
      Token token3 = xPathLexer0.notEquals();
      assertEquals("<R", token3.getTokenText());
      assertEquals(22, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token4 = xPathLexer1.dots();
      assertEquals(13, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(",", token5.getTokenText());
      assertEquals(32, token5.getTokenType());
      
      Token token6 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      
      xPathLexer0.identifier();
      xPathLexer0.setXPath("=}6by$Zfz6iXc");
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(21, token2.getTokenType());
      assertEquals("=", token2.getTokenText());
      
      Token token3 = xPathLexer0.plus();
      assertEquals("}", token3.getTokenText());
      assertEquals(5, token3.getTokenType());
      
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(15, token5.getTokenType());
      
      Token token6 = xPathLexer0.notEquals();
      assertEquals(22, token6.getTokenType());
      assertEquals("$Z", token6.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token7 = xPathLexer2.nextToken();
      assertEquals((-1), token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("\u0003L'Wn}M_]^iL%?+'~;");
      xPathLexer0.doubleColon();
      xPathLexer0.minus();
      xPathLexer0.or();
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.getPreviousToken();
      xPathLexer0.number();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-986));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Cmm.(G+0|C");
      Token token0 = xPathLexer0.dollar();
      String string0 = token0.toString();
      assertEquals("[ (26) (C)", string0);
      
      xPathLexer0.consume();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.getPreviousToken();
      assertEquals("m.", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("53YZs");
      Token token0 = xPathLexer0.not();
      assertEquals("5", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      assertEquals("3", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("YZs", token2.getTokenText());
      
      xPathLexer0.literal();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setXPath("6tS6_:O");
      xPathLexer1.mod();
      Token token3 = xPathLexer1.plus();
      assertEquals(5, token3.getTokenType());
      assertEquals("6", token3.getTokenText());
      
      Token token4 = xPathLexer1.identifierOrOperatorName();
      assertEquals("tS6_", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Cmm.(G+0|C");
      xPathLexer0.dollar();
      xPathLexer0.minus();
      xPathLexer0.consume();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("GL0K+o<{4QC qw.}");
      Token token0 = xPathLexer0.not();
      assertEquals("G", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.slashes();
      xPathLexer0.setPreviousToken(token1);
      assertEquals(11, token1.getTokenType());
      assertEquals("L", token1.getTokenText());
      
      xPathLexer0.consume();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("K", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.whitespace();
      xPathLexer0.literal();
      xPathLexer0.literal();
      xPathLexer0.minus();
      xPathLexer0.relationalOperator();
      xPathLexer0.rightBracket();
      xPathLexer0.leftParen();
      xPathLexer0.not();
      xPathLexer0.setXPath(") (");
      xPathLexer0.nextToken();
      xPathLexer0.comma();
      xPathLexer0.dots();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.identifier();
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      
      xPathLexer0.div();
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.relationalOperator();
      Token token3 = xPathLexer0.leftParen();
      assertEquals(1, token3.getTokenType());
      
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      Token token5 = xPathLexer0.comma();
      assertEquals(32, token5.getTokenType());
      
      xPathLexer0.setXPath("+jQX$i");
      Token token6 = xPathLexer0.at();
      assertEquals("+", token6.getTokenText());
      assertEquals(16, token6.getTokenType());
      
      xPathLexer0.operatorName();
      Token token7 = xPathLexer0.plus();
      assertEquals("j", token7.getTokenText());
      assertEquals(5, token7.getTokenType());
      
      Token token8 = xPathLexer0.nextToken();
      assertEquals("QX$i", token8.getTokenText());
      
      xPathLexer0.getXPath();
      xPathLexer0.or();
      Token token9 = xPathLexer0.number();
      assertEquals(30, token9.getTokenType());
      
      Token token10 = xPathLexer0.pipe();
      assertEquals(17, token10.getTokenType());
      assertEquals("Q", token10.getTokenText());
      
      xPathLexer0.hasMoreChars();
      char char0 = xPathLexer0.LA(3062);
      assertEquals('\uFFFF', char0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Cmm.(G+0|C");
      Token token0 = xPathLexer0.star();
      assertEquals("C", token0.getTokenText());
      assertEquals(20, token0.getTokenType());
      
      Token token1 = xPathLexer0.minus();
      XPathLexer xPathLexer1 = new XPathLexer("PN");
      xPathLexer0.setPreviousToken(token1);
      assertEquals("m", token1.getTokenText());
      assertEquals(6, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("m.", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Cmm.(G+0|C");
      Token token0 = xPathLexer0.not();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(23, token0.getTokenType());
      assertEquals("C", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("mm.(G+0|C", token1.getTokenText());
      
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
      assertEquals("m", token2.getTokenText());
      
      xPathLexer0.div();
      Token token3 = xPathLexer0.dots();
      assertEquals("m.", token3.getTokenText());
      assertEquals(14, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8i|A_#{,lq");
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      assertEquals("8", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("i", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Cmm.(G+0|");
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      assertEquals("C", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("O&Df");
      Token token1 = xPathLexer1.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("O", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("GL0K+o<{4nC qw.}");
      xPathLexer0.setXPath("TQW+e");
      Token token0 = xPathLexer0.leftParen();
      assertEquals("T", token0.getTokenText());
      
      Token token1 = xPathLexer0.star();
      assertEquals("Q", token1.getTokenText());
      assertEquals(20, token1.getTokenType());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals("W+", token2.getTokenText());
      assertEquals(22, token2.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.operatorName();
      Token token3 = xPathLexer0.nextToken();
      assertEquals("e", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("J/Y /");
      Token token0 = xPathLexer0.slashes();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(12, token0.getTokenType());
      assertEquals("J/", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer1.comma();
      assertEquals(32, token1.getTokenType());
      
      Token token2 = xPathLexer1.nextToken();
      assertEquals((-1), token2.getTokenType());
      
      Token token3 = xPathLexer0.identifier();
      assertEquals(15, token3.getTokenType());
      assertEquals("Y", token3.getTokenText());
      
      Token token4 = xPathLexer0.leftBracket();
      assertEquals(" ", token4.getTokenText());
      assertEquals(3, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("(Tn5i/]X`iw1!U@z@~N");
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      assertEquals("(", token0.getTokenText());
      
      xPathLexer0.slashes();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("n5i", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(11, token2.getTokenType());
      assertEquals("/", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@.zt8A(^*_");
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      assertEquals("@", token0.getTokenText());
      
      Token token1 = xPathLexer0.number();
      xPathLexer0.setPreviousToken(token1);
      assertEquals(31, token1.getTokenType());
      assertEquals(".", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("zt8A(^*_", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ChkLc(V)d)qp#");
      xPathLexer0.nextToken();
      xPathLexer0.at();
      xPathLexer0.relationalOperator();
      xPathLexer0.number();
      xPathLexer0.pipe();
      Token token0 = xPathLexer0.literal();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.mod();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.equals();
      xPathLexer0.whitespace();
      xPathLexer0.or();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.consume(3625);
      xPathLexer0.rightParen();
      xPathLexer0.and();
      xPathLexer0.not();
      xPathLexer0.consume(116);
      xPathLexer0.plus();
      xPathLexer0.getXPath();
      xPathLexer0.endPosition();
      xPathLexer0.plus();
      Token token1 = xPathLexer0.literal();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("{.7pXttC}xd%RAn@{Y=");
      xPathLexer0.or();
      Token token0 = xPathLexer0.rightBracket();
      assertEquals("{", token0.getTokenText());
      assertEquals(4, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(".7", token1.getTokenText());
      assertEquals(31, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("moWp4Ee>(yn}(;E+");
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".5gPNev)SUoXe<L~4m");
      xPathLexer0.nextToken();
      boolean boolean0 = xPathLexer0.isIdentifierChar('n');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("J/Y /");
      Token token0 = xPathLexer0.slashes();
      xPathLexer0.setPreviousToken(token0);
      assertEquals("J/", token0.getTokenText());
      assertEquals(12, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("Y", token1.getTokenText());
      
      xPathLexer0.identifier();
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(" ", token2.getTokenText());
      assertEquals(3, token2.getTokenType());
  }
}
