/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 19:53:30 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import java.io.BufferedReader;
import java.io.CharArrayReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.LineNumberReader;
import java.io.PipedReader;
import java.io.PushbackReader;
import java.io.StringReader;
import java.math.BigDecimal;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONLexerBase_ESTest extends JSONLexerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("WriteNullListAsEmpty");
      jSONReaderScanner0.longValue();
      char[] charArray0 = new char[3];
      charArray0[0] = '<';
      charArray0[1] = '2';
      charArray0[2] = 'j';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("wn>!1H3", 71);
      int int0 = jSONScanner0.pos();
      assertEquals(0, int0);
      
      long long0 = jSONScanner0.longValue();
      assertEquals(0L, long0);
      
      String string0 = jSONScanner0.stringDefaultValue();
      assertEquals(71, jSONScanner0.getFeatures());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'U';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 641);
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(0, int0);
      
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.bytesValue();
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('U', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '/';
      charArray0[1] = '(';
      charArray0[2] = '(';
      charArray0[3] = 'J';
      charArray0[4] = 'O';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 11);
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      jSONReaderScanner0.getTimeZone();
      jSONReaderScanner0.intValue();
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 11);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      char[] charArray0 = new char[2];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 'B');
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.scanNumber();
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-2));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      char[] charArray0 = new char[5];
      HashSet<String> hashSet0 = new HashSet<String>();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("EOF error", 116);
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.close();
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = 'k';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1225, (-1623323840));
      jSONReaderScanner0.scanFieldInt(charArray0);
      char[] charArray1 = new char[2];
      long long0 = jSONReaderScanner0.scanFieldSymbol(charArray1);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = "";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.info();
      jSONReaderScanner0.stringVal();
      char[] charArray0 = new char[2];
      charArray0[0] = 'c';
      charArray0[1] = 'l';
      jSONReaderScanner0.scanFieldInt(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("&]h3Pv=>o", 0);
      Class<Feature> class0 = Feature.class;
      jSONScanner0.close();
      jSONReaderScanner0.scanBoolean('c');
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      jSONScanner0.charAt(0);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("syntax error : ");
      boolean boolean0 = jSONScanner0.scanBoolean('J');
      assertFalse(boolean0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Feature.AllowSingleQuotes is false");
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanString('{');
      jSONScanner0.pos();
      jSONScanner0.setToken(0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.util.OptionalInt");
      char[] charArray0 = new char[0];
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Feature.AllowSingleQuotes is false");
      jSONScanner0.pos();
      jSONScanner0.nextToken();
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("d,V4'6K&Qpf0#eWaj1");
      jSONScanner0.scanFloat('');
      jSONScanner0.pos();
      jSONScanner0.nextIdent();
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.scanNumber();
      assertEquals(2, jSONReaderScanner0.token());
      
      JSONScanner jSONScanner0 = new JSONScanner("&hD+%D_s@r1b+N");
      jSONScanner0.nextIdent();
      char char0 = jSONScanner0.next();
      assertEquals('D', char0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      int int0 = (-2211);
      jSONScanner0.np = (-2211);
      Locale locale0 = Locale.ITALIAN;
      jSONScanner0.setLocale(locale0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldUUID((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("rh");
      jSONScanner0.putChar('\\');
      int int0 = jSONScanner0.pos();
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'X';
      charArray0[1] = '3';
      charArray0[2] = 's';
      charArray0[3] = 'D';
      charArray0[4] = '{';
      charArray0[5] = ':';
      charArray0[6] = '3';
      charArray0[7] = 's';
      charArray0[8] = '!';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 131);
      jSONReaderScanner0.scanNumber();
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("d,V4'6K&Qpf0#eWaj1");
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = "wn>!1H3";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("wn>!1H3");
      char[] charArray0 = new char[1];
      jSONReaderScanner0.skipWhitespace();
      charArray0[0] = 'N';
      jSONReaderScanner0.scanFieldDate(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 66);
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.newCollectionByType(class0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField(charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = "AT_tEL\\ua#;5'j5z";
      JSONScanner jSONScanner0 = new JSONScanner(string0, (-530));
      jSONScanner0.nextToken(73);
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("/,V4'6K&Qpf0#eWaj1");
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      jSONScanner0.scanStringArray((Collection<String>) null, 'b');
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("14m]", 1712);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("ub");
      LinkedHashSet<ChronoLocalDate> linkedHashSet1 = new LinkedHashSet<ChronoLocalDate>();
      linkedHashSet0.containsAll(linkedHashSet1);
      linkedHashSet0.clear();
      linkedHashSet0.add("ub");
      linkedHashSet0.add((String) null);
      jSONReaderScanner0.stringDefaultValue = "14m]";
      jSONReaderScanner0.nextToken(986);
      linkedHashSet0.clear();
      linkedHashSet0.add("ub");
      char char0 = 'V';
      jSONReaderScanner0.scanStringArray(linkedHashSet0, 'V');
      jSONReaderScanner0.info();
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8~cvSA&/LJ-F[@;");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloatArray(charArray0);
      jSONScanner0.nextToken((-2));
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("scan new error");
      char[] charArray0 = new char[2];
      charArray0[0] = 'F';
      charArray0[1] = 'T';
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.matchStat();
      char[] charArray1 = new char[3];
      jSONReaderScanner0.pos = (-2);
      charArray1[0] = '/';
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.info();
      charArray1[1] = 'E';
      charArray1[2] = 'h';
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.scanFieldDecimal(charArray1);
      jSONReaderScanner0.isRef();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.charAt((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("d");
      char[] charArray0 = new char[1];
      charArray0[0] = '+';
      jSONReaderScanner0.scanFieldUUID(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("^Tp!H|");
      jSONReaderScanner0.charAt(80);
      jSONReaderScanner0.scanInt('>');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'I';
      charArray0[1] = 'B';
      charArray0[2] = 'v';
      charArray0[3] = 't';
      charArray0[4] = 'l';
      charArray0[5] = ';';
      charArray0[6] = '*';
      charArray0[7] = '6';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 224, 0);
      int int0 = jSONReaderScanner0.scanInt('N');
      assertEquals(0, int0);
      assertEquals(0, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'I';
      charArray0[1] = '@';
      charArray0[2] = '(';
      charArray0[3] = 'n';
      charArray0[4] = 'V';
      int int0 = 0;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.stringVal();
      Class<String> class0 = String.class;
      jSONReaderScanner0.scanEnum(class0, (SymbolTable) null, 'm');
      jSONReaderScanner0.scanType("rgZ7!$\"");
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.features = 0;
      JSONScanner jSONScanner0 = new JSONScanner("+)m&f/'0vFT`@", 0);
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("d,V4'6K&Qpf0#eWaj1");
      SymbolTable symbolTable0 = new SymbolTable(131);
      jSONScanner0.scanSymbolWithSeperator(symbolTable0, '`');
      jSONScanner0.nextToken();
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONScanner jSONScanner0 = new JSONScanner("x&k}9TH-1zTp!e");
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("illega str");
      char[] charArray0 = new char[0];
      jSONScanner0.sbuf = charArray0;
      jSONScanner0.nextToken(0);
      jSONScanner0.scanFieldDecimal(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      
      jSONScanner0.scanFieldFloat(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("@");
      Class<Object> class0 = Object.class;
      jSONScanner0.scanEnum(class0, (SymbolTable) null, 'l');
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("syntax error : ");
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.isBlankInput();
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      double double0 = jSONReaderScanner0.scanDouble('4');
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'I';
      charArray0[1] = 'B';
      charArray0[2] = 'v';
      charArray0[3] = 't';
      charArray0[4] = 'l';
      charArray0[5] = ';';
      charArray0[6] = '*';
      charArray0[7] = '6';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 224, 0);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanInt('N');
      Feature feature0 = Feature.AllowArbitraryCommas;
      boolean boolean0 = jSONReaderScanner0.isEnabled(feature0);
      assertEquals(';', jSONReaderScanner0.getCurrent());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("y 2vX?&Bs$Ic4_*o{", 123);
      jSONScanner0.pos();
      jSONScanner0.isEnabled(123);
      // Undeclared exception!
      try { 
        jSONScanner0.doubleValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      char[] charArray0 = new char[14];
      charArray0[0] = 'L';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      JSONScanner jSONScanner0 = new JSONScanner("create asm deserializer error, ");
      jSONReaderScanner0.bp = 0;
      JSONScanner jSONScanner1 = new JSONScanner(")+> r|Ey");
      jSONScanner1.nextIdent();
      assertEquals('+', jSONScanner1.getCurrent());
      
      jSONScanner0.next();
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", (-2318));
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 89);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("#V7k#8'r");
      char[] charArray0 = new char[1];
      charArray0[0] = '';
      jSONScanner0.scanFieldIntArray(charArray0);
      jSONScanner0.scanDate('_');
      jSONScanner0.nextIdent();
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("scan new error");
      char[] charArray0 = new char[2];
      jSONReaderScanner0.scanSymbol((SymbolTable) null);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      float float0 = jSONReaderScanner0.scanFloat('t');
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("V");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Kp,#S)VI:lQ7vje", (-965));
      jSONScanner0.pos();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.isRef();
      assertEquals((-1), jSONScanner0.matchStat);
      
      char[] charArray1 = new char[3];
      charArray1[0] = '@';
      charArray1[1] = '+';
      charArray1[2] = 'Z';
      Class<Feature> class0 = Feature.class;
      jSONScanner0.scanFieldStringArray(charArray1, class0);
      boolean boolean0 = jSONScanner0.matchField(charArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, '\u0000');
      HashSet<String> hashSet0 = new HashSet<String>();
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.scanNumber();
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '9';
      JSONScanner jSONScanner0 = new JSONScanner("NonStringKeyAsString", (-2147483647));
      jSONScanner0.nextToken();
      jSONScanner0.pos();
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("2n8lsed sinle-quote st2ing");
      Feature feature0 = Feature.OrderedField;
      jSONScanner0.config(feature0, true);
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. 2
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Feature.AllowSingleQuotes is false");
      jSONReaderScanner0.stringVal();
      char[] charArray0 = new char[6];
      Feature feature0 = Feature.IgnoreNotMatch;
      jSONReaderScanner0.config(feature0, false);
      charArray0[0] = 'a';
      charArray0[1] = 'f';
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.scanDouble('f');
      charArray0[2] = 'X';
      charArray0[3] = '-';
      charArray0[4] = ']';
      charArray0[5] = 'F';
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.nextToken();
      int int0 = jSONReaderScanner0.scanInt('a');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StringReader stringReader0 = new StringReader("null");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'K';
      charArray0[1] = ')';
      charArray0[2] = '0';
      charArray0[3] = ')';
      charArray0[4] = '.';
      charArray0[5] = '0';
      charArray0[6] = ';';
      charArray0[7] = '7';
      charArray0[8] = 'h';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 2048, (SymbolTable) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ibtl");
      jSONScanner0.scanUUID('q');
      jSONScanner0.longValue();
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("&", 2008);
      char[] charArray0 = new char[7];
      charArray0[0] = '?';
      charArray0[1] = ';';
      charArray0[2] = ' ';
      JSONScanner jSONScanner0 = new JSONScanner(",`&Y>vqm=dEU*>A", 41);
      jSONScanner0.scanUUID('d');
      jSONScanner0.pos();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar(' ');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match   - &, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONScanner jSONScanner0 = new JSONScanner("java.awt.Point");
      jSONScanner0.pos();
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 0);
      char[] charArray0 = new char[9];
      charArray0[0] = '\'';
      jSONScanner0.nextIdent();
      charArray0[1] = 'q';
      jSONScanner0.sp = 0;
      charArray0[2] = ',';
      charArray0[3] = 's';
      charArray0[4] = 'S';
      charArray0[5] = '8';
      charArray0[6] = 'O';
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      charArray0[7] = 'k';
      charArray0[8] = 'j';
      jSONScanner0.scanFieldFloatArray(charArray0);
      jSONScanner0.scanFieldDate(charArray0);
      jSONScanner0.info();
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '/';
      charArray0[1] = '(';
      charArray0[2] = '/';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 65);
      char char0 = '9';
      jSONReaderScanner0.scanDouble('9');
      jSONReaderScanner0.indexOf('d', 4);
      jSONReaderScanner0.charArrayCompare(charArray0);
      // Undeclared exception!
      jSONReaderScanner0.nextToken();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'D';
      charArray0[1] = '';
      charArray0[2] = '^';
      charArray0[3] = '`';
      charArray0[4] = 'N';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0, 1175);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(bufferedReader0, (-3208));
      Feature feature0 = Feature.CustomMapDeserializer;
      jSONReaderScanner0.config(feature0, false);
      Class<Feature> class0 = Feature.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // com.alibaba.fastjson.parser.Feature
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = 66;
      char[] charArray0 = new char[7];
      charArray0[0] = 'Y';
      charArray0[1] = 'd';
      charArray0[2] = 'N';
      charArray0[3] = '\\';
      charArray0[4] = 'd';
      charArray0[5] = '[';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 66, 66);
      jSONReaderScanner0.scanFieldLong(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info : ", 2067);
      char[] charArray0 = new char[9];
      charArray0[0] = 'h';
      charArray0[1] = '3';
      charArray0[2] = '2';
      charArray0[3] = '@';
      charArray0[4] = 'T';
      charArray0[5] = 'j';
      charArray0[6] = 'y';
      charArray0[7] = 'w';
      charArray0[8] = 'z';
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      char[] charArray1 = new char[0];
      jSONReaderScanner0.scanFieldLong(charArray1);
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("pMvZN2]u>,Fn", 22);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '/';
      charArray0[1] = '(';
      charArray0[2] = '/';
      int int0 = (-3394);
      JSONScanner jSONScanner0 = new JSONScanner("o-kWRB9M", (-3394));
      jSONScanner0.tokenName();
      jSONScanner0.pos();
      MockFile mockFile0 = new MockFile((File) null, "Unknown");
      MockFileReader mockFileReader0 = null;
      try {
        mockFileReader0 = new MockFileReader(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(")+aRvf)]heih_Seu'");
      String string0 = jSONScanner0.stringDefaultValue();
      assertNull(string0);
      
      jSONScanner0.resetStringPosition();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '(';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, '(');
      jSONReaderScanner0.scanDouble('9');
      jSONReaderScanner0.indexOf('d', 4);
      char[] charArray1 = new char[1];
      charArray1[0] = '9';
      jSONReaderScanner0.scanFieldUUID(charArray1);
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanInt('9');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'L';
      charArray0[1] = 'H';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArrayReader0, (-1083015984));
      jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("zIDRm\r^v;9", 3300);
      jSONReaderScanner0.resetStringPosition();
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      long long0 = jSONReaderScanner0.scanLong('p');
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '^';
      charArray0[1] = '~';
      charArray0[2] = 'j';
      charArray0[3] = '\\';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 66);
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.newCollectionByType(class0);
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.scanLong('^');
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      char[] charArray0 = new char[2];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      charArray0[0] = 'L';
      charArray0[1] = 'H';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("z{GnP~i9.G|", (-1083015984));
      jSONReaderScanner0.setToken((-1083015984));
      jSONReaderScanner0.scanNumber();
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      char[] charArray0 = new char[4];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 66);
      jSONReaderScanner0.charAt(48);
      jSONReaderScanner0.scanDate('M');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField(charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("undefined", 1138);
      int int0 = jSONScanner0.pos();
      assertEquals(0, int0);
      
      long long0 = jSONScanner0.longValue();
      assertEquals(0L, long0);
      
      jSONScanner0.getCalendar();
      assertEquals(1138, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONScanner jSONScanner0 = new JSONScanner("java.awt.Point");
      jSONScanner0.pos();
      jSONScanner0.close();
      float float0 = jSONScanner0.scanFloat('n');
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'U';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 641);
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.scanSymbol((SymbolTable) null);
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Kp,#S)VI:lQ7vje", (-965));
      TimeZone timeZone0 = TimeZone.getDefault();
      jSONScanner0.setTimeZone(timeZone0);
      jSONScanner0.close();
      jSONScanner0.pos();
      char[] charArray0 = new char[0];
      BigDecimal bigDecimal0 = new BigDecimal(0);
      assertEquals((byte)0, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'U';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 641);
      jSONReaderScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. U
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '{';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 46);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.sbuf = charArray0;
      jSONReaderScanner0.newCollectionByType(class0);
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.scanNumber();
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 66);
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.newCollectionByType(class0);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.longValue();
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-1430), (-1430));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8'~(CRz.FkeI,");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBigInteger(charArray0);
      int int0 = jSONScanner0.pos();
      assertEquals(0, int0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ibtl");
      char[] charArray0 = new char[1];
      charArray0[0] = 'g';
      jSONScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      
      jSONScanner0.scanUUID('g');
      int int0 = jSONScanner0.pos();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = (-2232);
      JSONScanner jSONScanner0 = new JSONScanner("true", (-2232));
      jSONScanner0.stringVal();
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon((-2232));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - t, info : pos 0, json : true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      char[] charArray0 = new char[2];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 74);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      JSONScanner jSONScanner0 = new JSONScanner("IBvtl");
      boolean boolean0 = jSONScanner0.isRef();
      assertFalse(boolean0);
      
      int int0 = jSONScanner0.token();
      assertEquals(0, int0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '2';
      charArray0[1] = '_';
      charArray0[2] = '/';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 628);
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.scanNumber();
      assertEquals(2, jSONReaderScanner0.token());
      
      String string0 = jSONReaderScanner0.scanSymbol((SymbolTable) null);
      assertEquals("_", string0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      long long0 = jSONScanner0.longValue();
      assertEquals(0L, long0);
      
      jSONScanner0.scanDecimal('#');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 34);
      jSONReaderScanner0.scanBoolean('H');
      jSONReaderScanner0.info();
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.scanDecimal('H');
      assertEquals(20, jSONReaderScanner0.token());
      
      jSONReaderScanner0.scanNumber();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8'~(CRz.FkeI,");
      char[] charArray0 = new char[0];
      jSONScanner0.scanType((String) null);
      jSONScanner0.scanFieldUUID(charArray0);
      int int0 = jSONScanner0.pos();
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Kp,#S)VI:lQ7vje");
      jSONScanner0.pos();
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanBoolean('n');
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.scanFieldUUID(charArray0);
      assertEquals(0, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("syntax error : ");
      BigDecimal bigDecimal0 = new BigDecimal(0);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDouble(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Kp,#S)VI:lQ7vje", (-965));
      jSONScanner0.pos();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.isRef();
      jSONScanner0.isEnabled(39);
      assertEquals((-1), jSONScanner0.matchStat);
      
      jSONScanner0.scanLong('|');
      assertEquals((-965), jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      jSONScanner0.setToken((-831));
      int int0 = Calendar.MILLISECOND;
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDecimal(charArray0);
      boolean boolean0 = jSONScanner0.isEnabled(828, 83);
      assertEquals((-1), jSONScanner0.matchStat);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      char[] charArray0 = new char[4];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 628);
      JSONScanner jSONScanner0 = new JSONScanner("d*/3(XeweuwSD3GMk6");
      jSONScanner0.skipComment();
      jSONScanner0.close();
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'U';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 641);
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.scanLong('U');
      assertEquals(2, jSONReaderScanner0.token());
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) ";94/ R~q'6PDx|A";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) jSONReaderScanner0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) charArray0;
      objectArray0[5] = (Object) jSONReaderScanner0;
      objectArray0[6] = (Object) charArray0;
      jSONReaderScanner0.lexError(";94/ R~q'6PDx|A", objectArray0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("hex");
      jSONScanner0.nextToken(13);
      jSONScanner0.scanNumber();
      assertEquals('x', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'e';
      charArray0[1] = 'r';
      charArray0[2] = 'N';
      charArray0[3] = 'T';
      charArray0[4] = 'e';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 641);
      jSONReaderScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. r
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      char[] charArray0 = new char[1];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      charArray0[0] = '2';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 647, (-329));
      long long0 = jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      char[] charArray0 = new char[4];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 628);
      char[] charArray1 = new char[0];
      jSONReaderScanner0.scanFieldDouble(charArray1);
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : \u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      jSONScanner0.nextToken();
      char[] charArray0 = new char[1];
      char char0 = 'B';
      charArray0[0] = 'B';
      // Undeclared exception!
      try { 
        jSONScanner0.arrayCopy(94, charArray0, 94, 71);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONScanner jSONScanner0 = new JSONScanner("t");
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(480);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 66);
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanSymbol((SymbolTable) null);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)39;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("n|TD8I}1&,Lbll");
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Ke}1n$R?xGKs}j{");
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) byteArray0;
      objectArray0[3] = (Object) byteArray0;
      jSONReaderScanner0.lexError("n|TD8I}1&,Lbll", objectArray0);
      char[] charArray0 = new char[1];
      char char0 = 'I';
      charArray0[0] = 'I';
      jSONReaderScanner0.scanFieldUUID(charArray0);
      SymbolTable symbolTable0 = new SymbolTable(256);
      jSONReaderScanner0.addSymbol((byte)39, (byte)39, 256, symbolTable0);
      jSONReaderScanner0.getFeatures();
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null, (-2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      char[] charArray0 = new char[4];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 628);
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.scanNumber();
      assertEquals(2, jSONReaderScanner0.token());
      
      JSONScanner jSONScanner0 = new JSONScanner(" d~", (-1));
      jSONScanner0.nextIdent();
      assertEquals(0, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\":\"");
      jSONScanner0.nextIdent();
      BigDecimal bigDecimal0 = new BigDecimal(0);
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TreeSet", 108);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("K\"L");
      jSONScanner0.nextIdent();
      jSONScanner0.integerValue();
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(109);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("d,V4'6K&Qpf0#eWaj1");
      jSONScanner0.scanDecimal('e');
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. d
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("@");
      jSONScanner0.scanNumber();
      jSONScanner0.scanDecimal('d');
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.scanString('#');
      int int0 = jSONScanner0.pos();
      assertEquals(0, int0);
      
      jSONScanner0.setToken(0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed single-quote string");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("}4H(", 0);
      char[] charArray0 = new char[2];
      jSONScanner0.hasSpecial = true;
      charArray0[0] = 'x';
      charArray0[1] = '=';
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.scanNumber();
      assertEquals(2, jSONReaderScanner0.token());
      
      jSONScanner0.getCurrent();
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ibvtl");
      SymbolTable symbolTable0 = new SymbolTable(70);
      jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldFloat((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("z+");
      jSONScanner0.isBlankInput();
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon(915);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - z, info : pos 0, json : z+
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("<@%E");
      jSONScanner0.isBlankInput();
      jSONScanner0.pos();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed single-quote string", 2098);
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("jEIRUFZ");
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.intValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = (-3977);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", (-3977));
      char char0 = '9';
      char char1 = '_';
      jSONReaderScanner0.putChar('_');
      jSONReaderScanner0.putChar('9');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.intValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // \u0000\u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" hO|Z.){L6xMw$*xfG");
      jSONScanner0.scanUUID('i');
      jSONScanner0.close();
      jSONScanner0.getCalendar();
      jSONScanner0.nextToken();
      long long0 = jSONScanner0.longValue();
      assertEquals(1, jSONScanner0.token());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Kp");
      jSONScanner0.nextIdent();
      jSONScanner0.integerValue();
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      char[] charArray0 = new char[3];
      jSONScanner0.skipWhitespace();
      charArray0[0] = '=';
      charArray0[1] = '/';
      charArray0[2] = 'O';
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.pos();
      jSONScanner0.nextToken();
      char[] charArray1 = new char[7];
      charArray1[0] = 'J';
      charArray1[1] = '/';
      charArray1[2] = '=';
      charArray1[3] = '=';
      charArray1[4] = 'O';
      charArray1[5] = 'O';
      charArray1[6] = '/';
      jSONScanner0.scanFieldString(charArray1);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      char[] charArray0 = new char[3];
      jSONScanner0.skipWhitespace();
      charArray0[0] = '=';
      charArray0[1] = '/';
      charArray0[2] = 'O';
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.pos();
      jSONScanner0.nextToken();
      char[] charArray1 = new char[7];
      charArray1[2] = '=';
      charArray1[3] = '=';
      charArray1[5] = 'O';
      charArray1[6] = '/';
      jSONScanner0.scanFieldString(charArray1);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("n");
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(133);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("not match ");
      jSONScanner0.scanUUID('\"');
      char[] charArray0 = new char[7];
      charArray0[0] = '\"';
      charArray0[1] = '?';
      charArray0[2] = '6';
      charArray0[3] = '\"';
      charArray0[4] = '\"';
      charArray0[5] = '\"';
      charArray0[6] = '\"';
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, (-1), (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.scanUUID('f');
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      int int0 = (-831);
      SymbolTable symbolTable0 = new SymbolTable(999);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0, '~');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("d,V4'6K&Qpf0#eWaj1");
      Locale locale0 = jSONScanner0.getLocale();
      jSONScanner0.setLocale(locale0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("<c&\"]74", (-305));
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloatArray(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.setTime('v', 'd', 'd', 'x', '\'', 'C');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("d,V4'6K&Qpf0#eWaj1");
      jSONScanner0.nextIdent();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDecimal(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("<@%E");
      jSONScanner0.scanString('{');
      jSONScanner0.nextToken(17);
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(";@oI9Y\"$ GWEd`yd");
      jSONScanner0.nextIdent();
      assertEquals('@', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{vJt(Q:Q)FrPJbf.ts");
      jSONScanner0.nextIdent();
      JSONScanner jSONScanner1 = new JSONScanner("", 0);
      // Undeclared exception!
      try { 
        jSONScanner1.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("+~Xn");
      jSONScanner0.nextIdent();
      jSONScanner0.longValue();
      char char0 = '(';
      jSONScanner0.indexOf('(', 119);
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8'~(CRz.FkeI,");
      char[] charArray0 = new char[0];
      jSONScanner0.scanType((String) null);
      jSONScanner0.scanFieldUUID(charArray0);
      jSONScanner0.scanFieldDecimal(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("}Oa!*K%x!xWyJpUb\"1");
      jSONScanner0.nextIdent();
      assertEquals('O', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("L6\":vd^LW:5<s8k)");
      jSONScanner0.nextIdent();
      long long0 = jSONScanner0.longValue();
      assertEquals(18, jSONScanner0.token());
      assertEquals(286L, long0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      char[] charArray0 = new char[4];
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)69;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 66);
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.scanDouble('Z');
      jSONScanner0.nextIdent();
      jSONScanner0.longValue();
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals(8, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      char[] charArray0 = new char[4];
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)69;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONScanner jSONScanner0 = new JSONScanner("null");
      SymbolTable symbolTable0 = new SymbolTable(49);
      jSONScanner0.scanSymbol(symbolTable0);
      jSONScanner0.scanDouble('Z');
      jSONScanner0.nextIdent();
      jSONScanner0.longValue();
      jSONScanner0.scanFieldLong(charArray0);
      jSONScanner0.isEOF();
      assertEquals(20, jSONScanner0.token());
      
      jSONScanner0.scanNumber();
      assertFalse(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      char[] charArray0 = new char[4];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 66);
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.newCollectionByType(class0);
      jSONReaderScanner0.matchField(charArray0);
      assertEquals(20, jSONReaderScanner0.token());
      
      JSONScanner jSONScanner0 = new JSONScanner("_|b6z&QWA:$S", 66);
      jSONScanner0.nextIdent();
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("],V4%6K&Qpf0#eWaj1");
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StringReader stringReader0 = new StringReader("IBbtl");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      charArray0[2] = 'f';
      charArray0[3] = 'f';
      charArray0[4] = 'f';
      charArray0[5] = 'f';
      charArray0[6] = 'f';
      charArray0[7] = 'f';
      charArray0[8] = 'f';
      boolean boolean0 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("2n8lsed sinle-quote st2ing");
      jSONScanner0.scanFloat('C');
      jSONScanner0.nextIdent();
      assertEquals('n', jSONScanner0.getCurrent());
      
      Number number0 = jSONScanner0.integerValue();
      assertEquals(2, number0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fsvhkN'WrUq1f[3", 10);
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("2n8lsed sinle-quote st2ing");
      JSONScanner jSONScanner1 = new JSONScanner("net.sf.json.JSONNl");
      jSONScanner1.scanFloat('.');
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner1.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", (-1300));
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldIntArray(charArray0);
      jSONScanner0.scanFieldBoolean(charArray0);
      jSONScanner0.scanFieldBigInteger(charArray0);
      int int0 = jSONScanner0.pos();
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8'~(CRz.FkeI,");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBoolean(charArray0);
      JSONScanner jSONScanner1 = new JSONScanner("InitStringFieldAsEmpty", 78);
      jSONScanner1.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONScanner1.matchStat);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(78, "@");
      jSONScanner0.setTimeZone(simpleTimeZone0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8'~(CRz.FkeI,");
      jSONScanner0.scanFloat(' ');
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 66);
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONScanner0.scanUUID('C');
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      char[] charArray0 = new char[7];
      charArray0[0] = 'B';
      charArray0[1] = '#';
      charArray0[2] = '#';
      charArray0[3] = '#';
      Class<Object> class0 = Object.class;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(45, 0, (-503), (-608), (-516), 0);
      jSONScanner0.calendar = (Calendar) mockGregorianCalendar0;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      charArray0[4] = '#';
      SymbolTable symbolTable0 = new SymbolTable(2961);
      jSONScanner0.scanSymbolWithSeperator(symbolTable0, '#');
      charArray0[5] = '#';
      charArray0[6] = '#';
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.scanString('#');
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - n, info : pos 0, json : null
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONScanner jSONScanner0 = new JSONScanner("L", 18);
      JSONScanner jSONScanner1 = new JSONScanner("L");
      jSONScanner1.nextIdent();
      jSONScanner1.integerValue();
      jSONScanner1.getCurrent();
      assertEquals(18, jSONScanner1.token());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("fUa");
      jSONScanner0.scanType("xEo%z'|8dJ,t");
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(41);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("fUa");
      jSONScanner0.scanType("(lpNH+ ENW");
      jSONScanner0.nextToken(18);
      int int0 = jSONScanner0.scanType("");
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("oei%+3");
      char[] charArray0 = new char[1];
      charArray0[0] = ';';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 97, 0);
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.skipWhitespace();
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'Q';
      charArray0[1] = '4';
      charArray0[2] = 'T';
      charArray0[3] = '{';
      charArray0[4] = '!';
      charArray0[5] = 'k';
      charArray0[6] = '7';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 41, (-899));
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8'~(CRz.FkeI,");
      char[] charArray0 = new char[5];
      charArray0[0] = 'W';
      charArray0[1] = '\'';
      charArray0[2] = '\'';
      jSONScanner0.scanDecimal('Q');
      charArray0[3] = '=';
      charArray0[4] = '|';
      jSONScanner0.scanFieldString(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      char[] charArray0 = new char[1];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONScanner jSONScanner0 = new JSONScanner("null", 647);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      List<String> list0 = new ArrayList<String>();
      jSONScanner0.scanStringArray(list0, '?');
      assertEquals(647, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("U}%");
      jSONScanner0.nextIdent();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(".P*r]k", 0);
      jSONReaderScanner0.scanNumber();
      assertEquals(3, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.nextIdent();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("&f:");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8'~(CRz.FkeI,");
      jSONScanner0.nextIdent();
      jSONScanner0.integerValue();
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("illega str");
      char[] charArray0 = new char[0];
      jSONScanner0.sbuf = charArray0;
      jSONScanner0.nextToken(8);
      BigDecimal bigDecimal0 = new BigDecimal(0);
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("^.,(p!H|");
      jSONScanner0.nextToken((-1852));
      BigDecimal bigDecimal0 = new BigDecimal(0);
      SymbolTable symbolTable0 = new SymbolTable(43);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : .pos 0, json : ^.,(p!H|
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("K8\"(<uo");
      jSONScanner0.nextIdent();
      jSONScanner0.scanISO8601DateIfMatch(true);
      jSONScanner0.ch = '';
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("~*Gkvi>|=2");
      jSONScanner0.nextToken(19);
      BigDecimal bigDecimal0 = new BigDecimal(2542);
      assertEquals((short)2542, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("fastjson.properties");
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(78);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\":\"");
      char[] charArray0 = new char[2];
      charArray0[0] = '8';
      charArray0[1] = '8';
      SymbolTable symbolTable0 = new SymbolTable(34);
      jSONScanner0.scanFieldStringArray(charArray0, 101, symbolTable0);
      jSONScanner0.scanString('8');
      jSONScanner0.nextToken(915);
      BigDecimal bigDecimal0 = new BigDecimal(915);
      assertEquals((short)915, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("L6\":vd^LW:5<s8k)");
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.scanString('<');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(".V]3($Q|zGA~s:eu48:");
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("z+", 7);
      boolean boolean0 = jSONReaderScanner0.isEnabled(119, 376);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(7, jSONReaderScanner0.getFeatures());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      charArray0[2] = 'f';
      charArray0[3] = 'f';
      charArray0[4] = 'f';
      charArray0[5] = 'f';
      charArray0[6] = 'f';
      charArray0[7] = 'f';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(lineNumberReader0);
      jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("oKg(0412#K?XNfO");
      char[] charArray0 = new char[1];
      char char0 = 'G';
      jSONScanner0.scanDouble('G');
      jSONScanner0.scanISO8601DateIfMatch();
      charArray0[0] = 'P';
      jSONScanner0.scanFieldInt(charArray0);
      jSONScanner0.resetStringPosition();
      jSONScanner0.stringVal();
      jSONScanner0.scanFieldInt(charArray0);
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      JSONLexerBase.readString(charArray0, 0);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" )Lg/60m=");
      jSONScanner0.nextToken((-1527));
      BigDecimal bigDecimal0 = new BigDecimal(34);
      assertEquals((byte)34, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[<MTSWzw2");
      jSONScanner0.nextToken(19);
      BigDecimal bigDecimal0 = new BigDecimal((-675));
      assertEquals((byte)93, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("d");
      JSONScanner jSONScanner0 = new JSONScanner("unclosed");
      jSONScanner0.nextToken(19);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      
      BigDecimal bigDecimal0 = new BigDecimal(1178);
      jSONReaderScanner0.stringDefaultValue();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("z+");
      JSONScanner jSONScanner1 = new JSONScanner("T[", 84);
      jSONScanner1.nextToken(0);
      BigDecimal bigDecimal0 = new BigDecimal(84);
      assertEquals((byte)84, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("z+", 7);
      boolean boolean0 = jSONReaderScanner0.isEnabled(0, 376);
      assertFalse(boolean0);
      assertEquals(7, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.nextToken(91);
      char[] charArray0 = new char[6];
      charArray0[0] = '>';
      charArray0[1] = 'J';
      charArray0[2] = 'G';
      charArray0[3] = '$';
      charArray0[4] = 't';
      charArray0[5] = 'N';
      jSONScanner0.scanFieldString(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldBigInteger((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Set");
      char[] charArray0 = new char[2];
      jSONScanner0.setToken(110);
      charArray0[0] = 'Q';
      charArray0[1] = 'r';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONScanner0.scanFieldDate(charArray0);
      int int0 = 57;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 57);
      jSONReaderScanner0.bytesValue();
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("UseObjectArray");
      jSONScanner0.nextIdent();
      jSONScanner0.integerValue();
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8'~(CRz.FkeI,");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldUUID(charArray0);
      jSONScanner0.scanFieldDouble(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\":\"");
      char[] charArray0 = new char[5];
      charArray0[0] = 'P';
      charArray0[1] = 'z';
      charArray0[2] = '{';
      charArray0[3] = '{';
      charArray0[4] = 'S';
      JSONScanner jSONScanner1 = new JSONScanner(charArray0, 0, (-1471));
      jSONScanner1.nextToken(13);
      // Undeclared exception!
      try { 
        jSONScanner1.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8(CRzFey,");
      jSONScanner0.scanDecimal('J');
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. 8
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9^f4");
      jSONScanner0.scanDecimal('$');
      jSONScanner0.scanBoolean('p');
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      // Undeclared exception!
      try { 
        jSONScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("%bO");
      jSONScanner0.isBlankInput();
      jSONScanner0.nextToken(20);
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, 20, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("L6\":vd^LW:5<s8k)");
      jSONScanner0.nextToken(15);
      jSONScanner0.scanNumber();
      int int0 = jSONScanner0.getFeatures();
      assertEquals('\"', jSONScanner0.getCurrent());
      assertEquals(989, int0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("^Tp!H|");
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.scanDate('u');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("^Tp!H|");
      JSONScanner jSONScanner0 = new JSONScanner("3E7JS7AT,JK{!I/lR");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "^Tp!H|");
      jSONScanner0.info();
      jSONScanner0.scanDecimal('q');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8'~(CRz.FkeI,");
      jSONScanner0.isBlankInput();
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol((SymbolTable) null, '\'');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" UkSu?\"m1.0.V`_y");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - U, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("fastjson.properties");
      jSONScanner0.scanBoolean('[');
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8'~(CRz.FkeI,");
      jSONScanner0.sp = 44;
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("YF$:SW4F+ADTp#");
      jSONScanner0.nextIdent();
      int int0 = Calendar.DECEMBER;
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("L6\":vd^LW:5<s8k)");
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(110);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8'~(CRz.FkeI,");
      JSONScanner jSONScanner1 = new JSONScanner("$-C\"");
      jSONScanner1.nextIdent();
      jSONScanner1.next();
      assertEquals(18, jSONScanner1.token());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      int int0 = 116;
      HashSet<String> hashSet0 = new HashSet<String>();
      String string0 = File.pathSeparator;
      JSONScanner jSONScanner0 = new JSONScanner(":", 116);
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon(20);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 1, json : :
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("fastjson.properties");
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("WriteMapNullValue");
      jSONScanner0.isBlankInput();
      char[] charArray0 = new char[7];
      charArray0[0] = '}';
      charArray0[1] = '}';
      charArray0[2] = '}';
      charArray0[3] = '}';
      charArray0[4] = '}';
      charArray0[5] = '}';
      charArray0[6] = '{';
      jSONScanner0.scanFieldBoolean(charArray0);
      jSONScanner0.nextToken(16);
      jSONScanner0.resetStringPosition();
      assertEquals('r', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("V");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBoolean(charArray0);
      jSONScanner0.nextToken(16);
      jSONScanner0.resetStringPosition();
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("V");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBoolean(charArray0);
      jSONScanner0.nextToken(6);
      jSONScanner0.resetStringPosition();
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8~cvSA&/LJ-F[@;");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDouble(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nNXcvFl");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDouble(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }
}
