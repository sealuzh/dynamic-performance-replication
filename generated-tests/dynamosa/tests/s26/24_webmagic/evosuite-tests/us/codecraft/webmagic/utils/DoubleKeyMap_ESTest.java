/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 15:16:08 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<HashMap<String, String>, Object, Map<Integer, Integer>> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, String>, Object, Map<Integer, Integer>>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      DoubleKeyMap<Object, HashMap<Object, String>, Object> doubleKeyMap1 = new DoubleKeyMap<Object, HashMap<Object, String>, Object>();
      Map<HashMap<Integer, String>, Map<Map<String, Object>, Map<Integer, Integer>>> map0 = doubleKeyMap1.newMap();
      DoubleKeyMap<HashMap<Integer, String>, Map<String, Object>, Map<Integer, Integer>> doubleKeyMap2 = new DoubleKeyMap<HashMap<Integer, String>, Map<String, Object>, Map<Integer, Integer>>(map0, class0);
      Map<Integer, Integer> map1 = doubleKeyMap2.newMap();
      doubleKeyMap0.put(hashMap0, (Object) null, map1);
      Map<Object, Map<Integer, Integer>> map2 = doubleKeyMap0.get(hashMap0);
      assertFalse(map2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DoubleKeyMap<Object, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, String>();
      Map<Map<String, Object>, Map<Object, Integer>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Map<String, Object>, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<Map<String, Object>, Object, Integer>(map0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Integer integer0 = doubleKeyMap1.remove((Map<String, Object>) hashMap0, (Object) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      HashMap<Object, Map<Object, String>> hashMap0 = new HashMap<Object, Map<Object, String>>();
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>(hashMap0);
      Object object0 = new Object();
      String string0 = doubleKeyMap0.remove((Object) class0, object0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleKeyMap<Integer, String, Map<String, Object>> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Map<String, Object>>();
      Map<String, Object> map0 = doubleKeyMap0.remove((Integer) null, "|zw.Fn|ME");
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleKeyMap<String, HashMap<String, String>, String> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<String, String>, String>();
      DoubleKeyMap<Object, Object, String> doubleKeyMap1 = new DoubleKeyMap<Object, Object, String>();
      String string0 = doubleKeyMap1.remove((Object) doubleKeyMap0, (Object) "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>();
      Map<Object, Object> map0 = doubleKeyMap0.remove((String) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<Object, Map<Integer, String>> hashMap0 = new HashMap<Object, Map<Integer, String>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, String>(hashMap0, class0);
      Object object0 = new Object();
      Map<Integer, String> map0 = doubleKeyMap0.remove(object0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object object0 = new Object();
      DoubleKeyMap<String, Object, HashMap<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<String, Object, HashMap<Object, Object>>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      HashMap<Object, Object> hashMap1 = doubleKeyMap0.put("", object0, hashMap0);
      assertNull(hashMap1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Integer, Map<Object, String>> hashMap0 = new HashMap<Integer, Map<Object, String>>();
      DoubleKeyMap<Integer, Object, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, String>(hashMap0);
      Integer integer0 = new Integer((-360));
      String string0 = doubleKeyMap0.put((Integer) null, (Object) integer0, "w");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, Map<String, String>> hashMap0 = new HashMap<String, Map<String, String>>();
      DoubleKeyMap<String, String, String> doubleKeyMap0 = new DoubleKeyMap<String, String, String>(hashMap0);
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Integer, Object, Object>();
      Map<Object, Map<String, Object>> map0 = doubleKeyMap1.newMap();
      DoubleKeyMap<Object, String, Object> doubleKeyMap2 = new DoubleKeyMap<Object, String, Object>(map0);
      Object object0 = doubleKeyMap2.put((Object) doubleKeyMap0, "Rv~2mN`=", (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      Integer integer0 = new Integer(0);
      DoubleKeyMap<HashMap<Integer, String>, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, String>, Object, Integer>();
      Map<String, Map<Integer, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<String, Integer, String> doubleKeyMap1 = new DoubleKeyMap<String, Integer, String>(map0, class0);
      String string0 = doubleKeyMap1.get((String) null, integer0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, Map<String, Object>> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Map<String, Object>>();
      Map<Integer, Map<String, Object>> map0 = doubleKeyMap0.get((Integer) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>(class0);
      DoubleKeyMap<Object, Integer, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Integer>();
      Map<Integer, Integer> map0 = doubleKeyMap1.get((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleKeyMap<String, String, Integer> doubleKeyMap0 = new DoubleKeyMap<String, String, Integer>();
      Map<Integer, Map<Map<Object, Object>, String>> map0 = doubleKeyMap0.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, Map<Object, Object>, String> doubleKeyMap1 = new DoubleKeyMap<Integer, Map<Object, Object>, String>(map0, class0);
      Integer integer0 = new Integer(1522);
      // Undeclared exception!
      try { 
        doubleKeyMap1.put(integer0, (Map<Object, Object>) null, "us.codecraft.webmagic.utils.MultiKeyMapBase");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DoubleKeyMap<Integer, Map<Object, Object>, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Integer, Map<Object, Object>, String>((Map<Integer, Map<Map<Object, Object>, String>>) null, (Class<? extends Map>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Object, Map<Object, String>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, Object, Map<Object, String>>((Map<Object, Map<Object, Map<Object, String>>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DoubleKeyMap<HashMap<Integer, Object>, Integer, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Object>, Integer, Object>((Class<? extends Map>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      doubleKeyMap0.put((Object) hashMap0, "I0!egowlHc[qw", (Object) hashMap0);
      Object object0 = doubleKeyMap0.remove((Object) hashMap0, "dnc'Vk.\u0001v");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Integer integer0 = new Integer(2114);
      DoubleKeyMap<HashMap<Integer, Object>, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Object>, Integer, Object>();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      DoubleKeyMap<String, Object, HashMap<Object, Object>> doubleKeyMap1 = new DoubleKeyMap<String, Object, HashMap<Object, Object>>();
      Map<Object, String> map0 = doubleKeyMap1.newMap();
      doubleKeyMap0.put(hashMap0, integer0, (Object) "]9dqH=*M");
      Object object0 = doubleKeyMap0.put(hashMap0, integer0, (Object) map0);
      assertNotNull(object0);
      assertEquals("]9dqH=*M", object0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Integer integer0 = new Integer((-1021));
      DoubleKeyMap<Integer, Map<Object, Object>, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Map<Object, Object>, String>();
      String string0 = doubleKeyMap0.get(integer0, (Map<Object, Object>) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<Object, String>, Integer, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, String>, Integer, String>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer((-2306));
      DoubleKeyMap<HashMap<Integer, Object>, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Object>, Integer, Object>();
      Object object0 = new Object();
      doubleKeyMap0.put(hashMap0, integer0, object0);
      Object object1 = doubleKeyMap0.remove(hashMap0, integer0);
      assertSame(object1, object0);
  }
}
