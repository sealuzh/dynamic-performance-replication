/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 17:10:52 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.InterruptedIOException;
import java.util.concurrent.TimeUnit;
import okio.AsyncTimeout;
import okio.Sink;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AsyncTimeout_ESTest extends AsyncTimeout_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      AsyncTimeout asyncTimeout1 = new AsyncTimeout();
      asyncTimeout1.exit();
      asyncTimeout0.deadlineNanoTime(0L);
      asyncTimeout0.enter();
      AsyncTimeout asyncTimeout2 = AsyncTimeout.awaitTimeout();
      try { 
        asyncTimeout2.exit(true);
        fail("Expecting exception: InterruptedIOException");
      
      } catch(InterruptedIOException e) {
         //
         // timeout
         //
         verifyException("okio.AsyncTimeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      MockIOException mockIOException0 = new MockIOException("(dfM;2*K^20~mn");
      MockIOException mockIOException1 = new MockIOException("(dfM;2*K^20~mn", mockIOException0);
      asyncTimeout0.exit((IOException) mockIOException0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      MockIOException mockIOException0 = new MockIOException();
      IOException iOException0 = asyncTimeout0.newTimeoutException(mockIOException0);
      asyncTimeout0.timedOut();
      asyncTimeout0.newTimeoutException(iOException0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.timedOut();
      asyncTimeout0.exit(false);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.clearDeadline();
      asyncTimeout0.throwIfReached();
      AsyncTimeout.head = asyncTimeout0;
      asyncTimeout0.timedOut();
      long long0 = 0L;
      asyncTimeout0.deadlineNanoTime(0L);
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.deadlineNanoTime(0L);
      asyncTimeout0.enter();
      AsyncTimeout.awaitTimeout();
      asyncTimeout0.exit(false);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.deadline(769L, timeUnit0);
      asyncTimeout0.throwIfReached();
      asyncTimeout0.throwIfReached();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[5];
      StackTraceElement stackTraceElement0 = new StackTraceElement(")f<d)I]&ZJ", ")f<d)I]&ZJ", "k(-Fa\"O0^@5UmL[", 8192);
      stackTraceElementArray0[1] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("k(-Fa\"O0^@5UmL[", ")f<d)I]&ZJ", "", 1);
      StackTraceElement stackTraceElement2 = new StackTraceElement(")f<d)I]&ZJ", "Unbalanced enter/exit", (String) null, 8192);
      StackTraceElement stackTraceElement3 = new StackTraceElement("k(-Fa\"O0^@5UmL[", "z7%4GRM", "Unbalanced enter/exit", 831);
      asyncTimeout1.enter();
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.source((Source) null);
      asyncTimeout0.sink((Sink) null);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.deadline(769L, timeUnit0);
      asyncTimeout1.enter();
      asyncTimeout0.exit();
      asyncTimeout0.timedOut();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.clearDeadline();
      asyncTimeout0.throwIfReached();
      AsyncTimeout.head = asyncTimeout0;
      asyncTimeout0.timedOut();
      asyncTimeout0.deadlineNanoTime(0L);
      asyncTimeout1.enter();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.timedOut();
      MockIOException mockIOException0 = new MockIOException("", (Throwable) null);
      asyncTimeout0.throwIfReached();
      asyncTimeout0.throwIfReached();
      MockIOException mockIOException1 = new MockIOException(mockIOException0);
      StackTraceElement stackTraceElement0 = new StackTraceElement("AsyncTimeout.source(", "", "AsyncTimeout.source(", 35);
      StackTraceElement stackTraceElement1 = new StackTraceElement("AsyncTimeout.source(", "S", (String) null, 1);
      asyncTimeout0.timedOut();
      asyncTimeout0.enter();
      asyncTimeout0.exit();
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.deadlineNanoTime(283L);
      asyncTimeout0.enter();
      // Undeclared exception!
      try { 
        asyncTimeout1.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unbalanced enter/exit
         //
         verifyException("okio.AsyncTimeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      AsyncTimeout.head = asyncTimeout0;
      asyncTimeout0.deadlineNanoTime((-1671L));
      asyncTimeout0.enter();
      AsyncTimeout.awaitTimeout();
      String string0 = "";
      MockIOException mockIOException0 = new MockIOException(string0);
      asyncTimeout0.exit((IOException) mockIOException0);
  }
}
