/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 20:27:43 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.CharClass;
import com.google.re2j.CharGroup;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharClass_ESTest extends CharClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[2];
      CharClass charClass0 = new CharClass(intArray0);
      charClass0.toString();
      charClass0.appendClass(intArray0);
      int[][] intArray1 = new int[5][7];
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 65019;
      intArray0[1] = (-1);
      intArray0[2] = 2946;
      intArray0[3] = 0;
      intArray0[4] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign(intArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.negateClass();
      CharGroup charGroup0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        charClass1.appendClassWithSign((int[]) null, (-4435));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendLiteral(952, 952);
      assertSame(charClass0, charClass1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendLiteral(5826, (-217));
      assertSame(charClass1, charClass0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[2];
      CharClass charClass0 = new CharClass(intArray0);
      charClass0.appendClass(intArray0);
      int[][] intArray1 = new int[0][2];
      charClass0.appendTableWithSign(intArray1, 404);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-432);
      intArray0[1] = 0;
      intArray0[2] = (-2354);
      intArray0[3] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[0][8];
      CharClass charClass1 = charClass0.appendTableWithSign(intArray1, 0);
      CharClass charClass2 = charClass1.appendLiteral((-2354), (-920));
      CharClass charClass3 = charClass2.appendNegatedClass(intArray0);
      // Undeclared exception!
      charClass3.appendFoldedRange(0, 3274);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[2];
      intArray0[1] = 1114111;
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, (-605));
      assertSame(charClass1, charClass0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[0];
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[1][0];
      int[] intArray1 = new int[3];
      intArray1[0] = (-3783);
      intArray1[1] = 6;
      intArray1[2] = 1114112;
      intArray0[0] = intArray1;
      CharClass charClass1 = charClass0.appendTableWithSign(intArray0, 6);
      assertSame(charClass0, charClass1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1213;
      intArray0[1] = 0;
      intArray0[2] = 515;
      intArray0[3] = (-740);
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[3][6];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      CharClass charClass1 = charClass0.appendTableWithSign(intArray1, 6147);
      CharClass charClass2 = charClass1.appendNegatedTable(intArray1);
      CharClass charClass3 = charClass0.appendClass(intArray0);
      CharClass.charClassToString(intArray0, (-1486));
      charClass3.toString();
      CharClass charClass4 = charClass3.appendTable(intArray1);
      CharClass charClass5 = charClass4.appendClassWithSign(intArray0, intArray0[3]);
      charClass0.toString();
      charClass2.negateClass();
      CharClass.charClassToString(intArray1[0], intArray0[1]);
      charClass5.negateClass();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[2];
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendClass(intArray0);
      int[][] intArray1 = new int[5][7];
      CharClass charClass2 = charClass1.appendNegatedTable(intArray1);
      charClass2.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[1] = 13;
      intArray0[2] = 13;
      CharClass charClass0 = new CharClass(intArray0);
      charClass0.cleanClass();
      assertArrayEquals(new int[] {0, 13, 13, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 2814;
      intArray0[2] = 1233;
      intArray0[3] = 68472;
      intArray0[4] = (-197);
      intArray0[5] = 1371;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendFoldedRange(1371, 0);
      int[] intArray1 = new int[8];
      intArray1[0] = 1233;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 2814;
      intArray1[5] = 2814;
      intArray1[6] = 3757;
      intArray1[7] = 0;
      CharClass charClass2 = charClass1.appendFoldedClass(intArray1);
      CharClass charClass3 = charClass2.cleanClass();
      CharClass charClass4 = charClass3.appendRange(1026, 1371);
      int[][] intArray2 = new int[5][1];
      intArray2[0] = intArray0;
      intArray2[1] = intArray1;
      intArray2[2] = intArray1;
      intArray2[3] = intArray1;
      intArray2[4] = intArray1;
      CharClass charClass5 = charClass4.appendNegatedTable(intArray2);
      // Undeclared exception!
      charClass5.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.negateClass();
      charClass0.negateClass();
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-1054);
      intArray0[2] = 66640;
      intArray0[3] = 3177;
      intArray0[4] = 5121;
      intArray0[5] = 0;
      intArray0[6] = 3778;
      intArray0[7] = 0;
      intArray0[8] = 11809;
      // Undeclared exception!
      try { 
        charClass0.appendClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[6];
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendFoldedRange(1233, 1233);
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      CharClass charClass3 = charClass0.cleanClass();
      charClass2.appendRange(1233, (-2732));
      int[][] intArray1 = new int[7][3];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[3] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      charClass1.appendNegatedTable(intArray1);
      charClass3.appendFoldedClass(intArray1[3]);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.negateClass();
      int[][] intArray0 = new int[1][2];
      int[] intArray1 = new int[4];
      intArray1[0] = 3863;
      intArray1[1] = 0;
      intArray1[2] = (-331);
      intArray1[3] = 3512;
      charClass0.toString();
      intArray0[0] = intArray1;
      CharClass charClass2 = charClass1.appendNegatedTable(intArray0);
      charClass2.appendFoldedRange(3512, (-529));
      CharClass charClass3 = new CharClass(intArray1);
      CharClass charClass4 = charClass3.appendNegatedTable(intArray0);
      charClass4.appendTable(intArray0);
      CharClass charClass5 = charClass2.appendNegatedClass(intArray1);
      CharClass charClass6 = charClass5.appendTable(intArray0);
      charClass6.appendNegatedTable(intArray0);
      charClass4.appendRange(0, (-2087));
      assertArrayEquals(new int[] {3863, 0, (-331), 1114111}, intArray1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.cleanClass();
      int[] intArray0 = charClass1.toArray();
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int[] intArray0 = new int[6];
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendFoldedRange(1233, 1233);
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      CharClass charClass3 = charClass0.cleanClass();
      charClass3.appendClass(intArray0);
      CharClass charClass4 = new CharClass();
      CharClass charClass5 = charClass4.cleanClass();
      charClass2.toArray();
      charClass5.toString();
      int[][] intArray1 = new int[2][1];
      intArray1[0] = intArray0;
      int[] intArray2 = new int[3];
      intArray2[0] = 1233;
      intArray2[1] = 1233;
      intArray2[2] = 1233;
      intArray1[1] = intArray2;
      charClass2.appendTableWithSign(intArray1, 1233);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 2814;
      intArray0[2] = 1233;
      int[][] intArray1 = new int[6][3];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      int[] intArray2 = new int[7];
      intArray2[0] = (-2589);
      intArray2[1] = 5184;
      intArray2[2] = 68472;
      intArray2[3] = 2814;
      intArray2[4] = 1233;
      intArray2[5] = 1233;
      intArray2[6] = 68472;
      CharClass charClass0 = new CharClass(intArray2);
      CharClass charClass1 = charClass0.appendFoldedRange(3199, (-122));
      charClass1.cleanClass();
      int[][] intArray3 = new int[2][3];
      intArray3[0] = intArray0;
      charClass0.toString();
      intArray3[1] = intArray2;
      charClass1.appendNegatedTable(intArray3);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[2] = 1228;
      intArray0[4] = (-197);
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.negateClass();
      CharClass charClass2 = new CharClass();
      int[] intArray1 = new int[8];
      intArray1[0] = 1228;
      intArray1[6] = 3757;
      CharClass charClass3 = charClass1.cleanClass();
      CharClass charClass4 = new CharClass();
      CharClass charClass5 = charClass3.appendFoldedClass(intArray1);
      CharClass charClass6 = charClass2.appendRange(65374, 948);
      charClass3.appendRange(1356, (-1));
      charClass6.cleanClass();
      charClass0.appendFoldedRange(1114111, 1);
      int[][] intArray2 = new int[1][5];
      intArray2[0] = intArray0;
      CharClass charClass7 = charClass2.appendNegatedTable(intArray2);
      charClass0.toArray();
      CharClass charClass8 = charClass7.appendRange((-1113), (-1));
      CharClass charClass9 = charClass6.negateClass();
      CharClass.charClassToString(intArray0, (-197));
      charClass9.appendRange(1699, 3757);
      CharClass charClass10 = charClass8.appendRange(1, 2547);
      assertFalse(charClass10.equals((Object)charClass5));
  }
}
