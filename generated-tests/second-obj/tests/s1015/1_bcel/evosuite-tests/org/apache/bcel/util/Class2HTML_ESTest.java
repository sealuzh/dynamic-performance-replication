/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 02:57:20 GMT 2018
 */

package org.apache.bcel.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileNotFoundException;
import java.io.FilterInputStream;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.util.Class2HTML;
import org.apache.bcel.util.ClassLoaderRepository;
import org.apache.bcel.util.ClassPath;
import org.apache.bcel.util.ClassPathRepository;
import org.apache.bcel.util.SyntheticRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Class2HTML_ESTest extends Class2HTML_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Class2HTML.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Mz6Z";
      try { 
        Class2HTML.main(stringArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = Class2HTML.referenceType("Tried to create the directory ");
      assertEquals("<A HREF=\"Tried to create the directory .html\" TARGET=_top>Tried to create the directory </A>", string0);
      
      String string1 = Class2HTML.toHTML("<A HREF=\"Tried to create the directory .html\" TARGET=_top>Tried to create the directory </A>");
      assertEquals("&lt;A HREF=\"Tried to create the directory .html\" TARGET=_top&gt;Tried to create the directory &lt;/A&gt;", string1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/\t(wide)java.lang.Object_cp.html");
      FileSystemHandling.createFolder(evoSuiteFile0);
      java.lang.ClassLoader.getSystemClassLoader();
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      Class2HTML class2HTML0 = null;
      try {
        class2HTML0 = new Class2HTML(javaClass0, "\t(wide)");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = Class2HTML.referenceType("[");
      assertEquals("<A HREF=\".html\" TARGET=_top>[</A>", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassPath classPath0 = new ClassPath("](7w}~Vez");
      ClassPath classPath1 = new ClassPath(classPath0, "java.lang.annotation.Annotation");
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath1);
      JavaClass javaClass0 = classPathRepository0.loadClass("java.lang.annotation.Annotation");
      SyntheticRepository.getInstance(classPath1);
      SyntheticRepository.getInstance();
      Class2HTML class2HTML0 = new Class2HTML(javaClass0, "java.lang.annotation.Annotation");
      Class2HTML.referenceClass((byte)1);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "<A HREF=\"java.lang.annotation.Annotation_cp.html#cp1\" TARGET=ConstantPool>Annotation</A>";
      stringArray0[2] = "](7w}~Vez";
      stringArray0[3] = "java.lang.annotation.Annotation";
      // Undeclared exception!
      try { 
        Class2HTML.main(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.Class2HTML", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      java.lang.ClassLoader.getSystemClassLoader();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "i I S1O3hA8n/~/RR";
      String string0 = "-D8O}>:fPkWB";
      stringArray0[1] = "-D8O}>:fPkWB";
      // Undeclared exception!
      try { 
        Class2HTML.main(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.Class2HTML", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class2HTML.toHTML("<HTML>\n<HEAD><TITLE>Documentation for ");
      // Undeclared exception!
      try { 
        Class2HTML.main((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.Class2HTML", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      java.lang.ClassLoader.getSystemClassLoader();
      java.lang.ClassLoader.getSystemClassLoader();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-zip";
      stringArray0[1] = "-zip";
      stringArray0[2] = "ifle";
      stringArray0[3] = "sun.reflect.ConstantPool";
      try { 
        Class2HTML.main(stringArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // -zip (No such file or directory)
         //
         verifyException("java.util.zip.ZipFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "\" TARGET=Code>";
      stringArray0[1] = "-d";
      stringArray0[2] = "|h2oj(8dnqFbS";
      stringArray0[3] = "Dont call getValueDouble() on a non DOUBLE ElementValue";
      try { 
        Class2HTML.main(stringArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "\" TARGET=Code>";
      stringArray0[1] = "-d";
      stringArray0[2] = "|h2oj(8dnqFbS";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/|h2oj(8dnqFbS");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)91;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      stringArray0[3] = "Dont call getValueDouble() on a non DOUBLE ElementValue";
      try { 
        Class2HTML.main(stringArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/@j19'PUrcgq\\");
      byte[] byteArray0 = new byte[0];
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/\t(wide)");
      byte byte0 = (byte)88;
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-d";
      stringArray0[1] = "float";
      stringArray0[2] = "-d";
      stringArray0[3] = "float";
      stringArray0[4] = "-d";
      stringArray0[0] = "-d";
      // Undeclared exception!
      try { 
        Class2HTML.main(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      ClassLoaderRepository classLoaderRepository1 = new ClassLoaderRepository(classLoader0);
      java.lang.ClassLoader classLoader1 = java.lang.ClassLoader.getSystemClassLoader();
      classLoader1.getParent();
      ClassLoaderRepository classLoaderRepository2 = new ClassLoaderRepository(classLoader0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "/";
      stringArray0[1] = "-d";
      stringArray0[2] = "/";
      stringArray0[3] = "/";
      stringArray0[4] = "-d";
      stringArray0[5] = "/";
      try { 
        Class2HTML.main(stringArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/@j19'PUrcgq\\");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "-d");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<FilterInputStream> class0 = FilterInputStream.class;
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<MockThaiBuddhistDate> class1 = MockThaiBuddhistDate.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class1);
      java.lang.ClassLoader classLoader1 = java.lang.ClassLoader.getSystemClassLoader();
      java.lang.ClassLoader classLoader2 = classLoader1.getParent();
      ClassLoaderRepository classLoaderRepository1 = new ClassLoaderRepository(classLoader2);
      javaClass0.setClassName("H 8N*y[/0%GlRNz");
      classLoaderRepository0.loadClass(class0);
      Class2HTML class2HTML0 = new Class2HTML(javaClass0, "ZL' \nbG7Yz-N\"");
      Class2HTML.referenceType("f@jY%0StM$");
      // Undeclared exception!
      try { 
        Class2HTML.referenceClass((byte)13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected class `CONSTANT_Class' at index 13 and got CONSTANT_Utf8[1](\"Lorg/evosuite/runtime/mock/java/time/chrono/MockThaiBuddhistDate;\")
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
}
