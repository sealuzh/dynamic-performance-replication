/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 04:13:29 GMT 2018
 */

package org.apache.commons.imaging.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.imaging.common.RationalNumber;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RationalNumber_ESTest extends RationalNumber_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber(0, 0);
      String string0 = rationalNumber0.toString();
      assertEquals("Invalid rational (0/0)", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1.0);
      long long0 = rationalNumber0.longValue();
      assertEquals(1L, long0);
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0);
      int int0 = rationalNumber0.intValue();
      assertEquals(0, int0);
      
      String string0 = rationalNumber0.toString();
      assertEquals(1, rationalNumber0.divisor);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0.0);
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      String string0 = rationalNumber1.toString();
      assertEquals("0", string0);
      assertEquals(0.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(1, rationalNumber1.divisor);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-2.147483663206941E9));
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      long long0 = rationalNumber1.longValue();
      assertEquals(1, rationalNumber1.divisor);
      assertEquals(2147483647L, long0);
      assertEquals((-2.147483647E9), rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0.0);
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("0", string0);
      
      long long0 = rationalNumber0.longValue();
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2.147483645166833E9);
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      String string0 = rationalNumber1.toDisplayString();
      assertEquals("-2147483645", string0);
      
      double double0 = rationalNumber0.doubleValue();
      assertEquals(2.147483645E9, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(4.709409040515311E-8);
      assertEquals(4.70940898000465E-8, rationalNumber0.doubleValue(), 0.01);
      assertEquals(21234087, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1.9019822752852633E-4);
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("0", string0);
      
      long long0 = rationalNumber0.longValue();
      assertEquals(2, rationalNumber0.numerator);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2369.4);
      assertEquals(11847, rationalNumber0.numerator);
      
      RationalNumber rationalNumber1 = new RationalNumber(11847, 11847);
      assertEquals((short)1, rationalNumber1.shortValue());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(327.2);
      long long0 = rationalNumber0.longValue();
      assertEquals(1636, rationalNumber0.numerator);
      assertEquals(327L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber(29, (-1332));
      String string0 = rationalNumber0.toString();
      assertEquals("29/-1332 (-0.022)", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber(1, (-1332));
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("-0.001", string0);
      assertEquals((-1332), rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2.147483647E9);
      double double0 = rationalNumber0.doubleValue();
      assertEquals(2.147483647E9, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(7.562528026028303E-8);
      assertEquals(13223091, rationalNumber0.divisor);
      assertEquals(7.562528307488772E-8, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0.0);
      rationalNumber0.floatValue();
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("0", string0);
      
      RationalNumber rationalNumber1 = RationalNumber.valueOf(379.0031901689037);
      assertEquals(379.0F, rationalNumber1.floatValue(), 0.01F);
      assertEquals(379.0, rationalNumber1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber((-1), (-1));
      rationalNumber0.toString();
      RationalNumber rationalNumber1 = RationalNumber.valueOf((-1));
      assertEquals((-1L), rationalNumber1.longValue());
      assertEquals(1, rationalNumber1.divisor);
      
      String string0 = rationalNumber0.toDisplayString();
      rationalNumber0.negate();
      RationalNumber rationalNumber2 = RationalNumber.factoryMethod((-1), (-2147483653L));
      assertEquals((-4.656612883919414E-10), rationalNumber2.doubleValue(), 0.01);
      assertEquals(1, rationalNumber2.numerator);
      assertEquals(0L, rationalNumber2.longValue());
      
      rationalNumber0.longValue();
      String string1 = rationalNumber0.toString();
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        RationalNumber.factoryMethod((-2147483656L), 0L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Invalid value, numerator: -2147483656, divisor: 0
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(1L, 1L);
      RationalNumber.factoryMethod(1L, 1L);
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(1, 2147483653L);
      assertEquals((-2147483643), rationalNumber1.divisor);
      assertEquals((-4.656612883919414E-10), rationalNumber1.doubleValue(), 0.01);
      
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("1", string0);
  }
}
