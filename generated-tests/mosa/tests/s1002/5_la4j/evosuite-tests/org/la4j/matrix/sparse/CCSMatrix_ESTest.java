/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 18:06:41 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DecimalFormat;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.iterator.VectorIterator;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CCSMatrix_ESTest extends CCSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(12, 12);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(2293, 2293, 2293);
      double double0 = new Integer(2293);
      cCSMatrix0.columnMajorIterator();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[][] doubleArray0 = new double[10][5];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      assertNotNull(cCSMatrix0);
      assertEquals(10, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(5, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '6' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (-1710.658136);
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(0, 66, doubleArray0);
      assertNotNull(cCSMatrix0);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(66, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertArrayEquals(new double[] {0.0, (-1710.658136)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CCSMatrix.random(53, 3048, (double) 53, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      assertNotNull(cCSMatrix0);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      
      CCSMatrix cCSMatrix1 = CCSMatrix.fromCSV("");
      assertTrue(cCSMatrix1.equals((Object)cCSMatrix0));
      assertNotNull(cCSMatrix1);
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertEquals(0, cCSMatrix1.cardinality());
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(0, cCSMatrix1.columns());
      assertEquals(0, cCSMatrix1.rows());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 0.0;
      int int0 = 1303;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(1303, 1303, doubleArray1);
      CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.nonZeroIteratorOfColumn(int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(5);
      assertNotNull(cCSMatrix0);
      assertEquals(5, cCSMatrix0.columns());
      assertEquals(5, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(5, cCSMatrix0.cardinality());
      assertEquals(0.2, cCSMatrix0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '6' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 553.56729652634;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      double[][] doubleArray1 = new double[1][7];
      doubleArray1[0] = doubleArray0;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray1);
      assertNotNull(cCSMatrix0);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(4, cCSMatrix0.columns());
      assertEquals(0.25, cCSMatrix0.density(), 0.01);
      assertEquals(553.56729652634, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(1, cCSMatrix0.rows());
      assertEquals(1, cCSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      assertNotNull(cCSMatrix0);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      
      // Undeclared exception!
      try { 
        cCSMatrix0.iteratorOfColumn((-186));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -186
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(2293, 2293, 2293);
      cCSMatrix0.iteratorOrNonZeroColumns();
      cCSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3, 3, 3);
      assertNotNull(cCSMatrix0);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(3, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(3, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      
      cCSMatrix0.setColumn(2, (double) 2);
      assertEquals(2.0, cCSMatrix0.max(), 0.01);
      assertEquals(3, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(3, cCSMatrix0.columns());
      assertEquals(3, cCSMatrix0.cardinality());
      assertEquals(0.3333333333333333, cCSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3);
      assertNotNull(cCSMatrix0);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(3, cCSMatrix0.columns());
      assertEquals(0.3333333333333333, cCSMatrix0.density(), 0.01);
      assertEquals(3, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(3, cCSMatrix0.cardinality());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      
      cCSMatrix0.setColumn(2, (double) 2);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(5, cCSMatrix0.cardinality());
      assertEquals(0.5555555555555556, cCSMatrix0.density(), 0.01);
      assertEquals(3, cCSMatrix0.columns());
      assertEquals(3, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(2.0, cCSMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      assertNotNull(cCSMatrix0);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.blank();
      assertTrue(cCSMatrix1.equals((Object)cCSMatrix0));
      assertNotNull(cCSMatrix1);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix1.rows());
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0, cCSMatrix1.columns());
      assertEquals(0, cCSMatrix1.cardinality());
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      
      double double0 = cCSMatrix0.max();
      assertTrue(cCSMatrix0.equals((Object)cCSMatrix1));
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, double0, 0.01);
      assertNotSame(cCSMatrix0, cCSMatrix1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1);
      assertNotNull(cCSMatrix0);
      assertEquals(1, cCSMatrix0.columns());
      assertEquals(1.0, cCSMatrix0.density(), 0.01);
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(1, cCSMatrix0.cardinality());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1, cCSMatrix0.rows());
      
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(7);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertNotNull(cCSMatrix1);
      assertEquals(7, cCSMatrix1.cardinality());
      assertEquals(1.0, cCSMatrix1.max(), 0.01);
      assertEquals(7, cCSMatrix1.rows());
      assertEquals(0.14285714285714285, cCSMatrix1.density(), 0.01);
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(7, cCSMatrix1.columns());
      assertFalse(cCSMatrix1.isRowMajor());
      assertNotSame(cCSMatrix1, cCSMatrix0);
      
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      assertNotNull(cCSMatrix0);
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      
      VectorIterator vectorIterator0 = cCSMatrix0.nonZeroIteratorOfColumn(0);
      assertNotNull(vectorIterator0);
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      assertNotNull(cCSMatrix0);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(17);
      assertNotNull(cCSMatrix0);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(17, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.058823529411764705, cCSMatrix0.density(), 0.01);
      assertEquals(17, cCSMatrix0.cardinality());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(17, cCSMatrix0.columns());
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)cCSMatrix0.rotate();
      assertNotNull(cRSMatrix0);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(17, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.058823529411764705, cCSMatrix0.density(), 0.01);
      assertEquals(17, cCSMatrix0.cardinality());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(17, cCSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.058823529411764705, cRSMatrix0.density(), 0.01);
      assertEquals(17, cRSMatrix0.cardinality());
      assertEquals(17, cRSMatrix0.rows());
      assertEquals(17, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(17, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.058823529411764705, cCSMatrix0.density(), 0.01);
      assertEquals(17, cCSMatrix0.cardinality());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(17, cCSMatrix0.columns());
      
      // Undeclared exception!
      try { 
        CCSMatrix.block(cRSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '18' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = (double) 6;
      // Undeclared exception!
      try { 
        CCSMatrix.from1DArray(6, 6, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      assertNotNull(cCSMatrix0);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      
      byte[] byteArray0 = cCSMatrix0.toBinary();
      assertNotNull(byteArray0);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      
      double double0 = cCSMatrix0.min();
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(17);
      assertNotNull(cCSMatrix0);
      assertEquals(17, cCSMatrix0.rows());
      assertEquals(17, cCSMatrix0.cardinality());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(17, cCSMatrix0.columns());
      assertEquals(0.058823529411764705, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.copyOfRows(13);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertNotNull(cCSMatrix1);
      assertEquals(17, cCSMatrix0.rows());
      assertEquals(17, cCSMatrix0.cardinality());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(17, cCSMatrix0.columns());
      assertEquals(0.058823529411764705, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(1.0, cCSMatrix1.max(), 0.01);
      assertEquals(13, cCSMatrix1.rows());
      assertEquals(17, cCSMatrix1.columns());
      assertEquals(13, cCSMatrix1.cardinality());
      assertEquals(0.058823529411764705, cCSMatrix1.density(), 0.01);
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      
      CCSMatrix cCSMatrix2 = (CCSMatrix)ColumnMajorSparseMatrix.diagonal(17, 1256.1533);
      assertFalse(cCSMatrix2.equals((Object)cCSMatrix1));
      assertFalse(cCSMatrix2.equals((Object)cCSMatrix0));
      assertNotNull(cCSMatrix2);
      assertEquals(17, cCSMatrix2.cardinality());
      assertEquals(0.0, cCSMatrix2.min(), 0.01);
      assertEquals(0.058823529411764705, cCSMatrix2.density(), 0.01);
      assertFalse(cCSMatrix2.isRowMajor());
      assertEquals(1256.1533, cCSMatrix2.max(), 0.01);
      assertEquals(17, cCSMatrix2.rows());
      assertEquals(17, cCSMatrix2.columns());
      assertNotSame(cCSMatrix2, cCSMatrix1);
      assertNotSame(cCSMatrix2, cCSMatrix0);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix2.eachNonZero(matrixProcedure0);
      assertFalse(cCSMatrix2.equals((Object)cCSMatrix1));
      assertFalse(cCSMatrix2.equals((Object)cCSMatrix0));
      assertEquals(17, cCSMatrix2.cardinality());
      assertEquals(0.0, cCSMatrix2.min(), 0.01);
      assertEquals(0.058823529411764705, cCSMatrix2.density(), 0.01);
      assertFalse(cCSMatrix2.isRowMajor());
      assertEquals(1256.1533, cCSMatrix2.max(), 0.01);
      assertEquals(17, cCSMatrix2.rows());
      assertEquals(17, cCSMatrix2.columns());
      assertNotSame(cCSMatrix2, cCSMatrix1);
      assertNotSame(cCSMatrix2, cCSMatrix0);
      
      CCSMatrix.block(cCSMatrix2, cCSMatrix2, cCSMatrix2, cCSMatrix2);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 2293;
      CCSMatrix cCSMatrix0 = new CCSMatrix(6, 3104, 6);
      assertNotNull(cCSMatrix0);
      assertEquals(3104, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(6, cCSMatrix0.rows());
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.copyOfShape(0, 1021);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertNotNull(cCSMatrix1);
      assertEquals(3104, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(6, cCSMatrix0.rows());
      assertEquals(1021, cCSMatrix1.columns());
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0, cCSMatrix1.rows());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateColumn(6, vectorFunction0);
      assertFalse(cCSMatrix0.equals((Object)cCSMatrix1));
      assertEquals(3104, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(6, cCSMatrix0.rows());
      assertNotSame(cCSMatrix0, cCSMatrix1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CCSMatrix.random(3104, (-601), 2861.92, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3048);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.copyOfShape(3048, 3);
      cCSMatrix0.foldColumns(vectorAccumulator0);
      CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.copyOfShape(15, 15);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1037);
      cCSMatrix0.min();
      CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1, 1);
      // Undeclared exception!
      try { 
        cCSMatrix0.getColumn(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      Matrix matrix0 = Matrix.unit(1026, 54);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix0, matrix0, cCSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      int int0 = (-187);
      // Undeclared exception!
      try { 
        CCSMatrix.random((-187), 30, (double) (-187), (Random) mockRandom1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1);
      Matrix matrix0 = cCSMatrix0.power(1);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      matrix0.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          CCSMatrix cCSMatrix0 = CCSMatrix.identity(17);
          cCSMatrix0.manhattanNorm();
          cCSMatrix0.rotate();
          CCSMatrix.diagonal(17, 17);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      SparseMatrix sparseMatrix0 = cCSMatrix0.toSparseMatrix();
      CCSMatrix.block(cCSMatrix0, sparseMatrix0, cCSMatrix0, cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1033);
      MatrixFactory<CCSMatrix> matrixFactory0 = (MatrixFactory<CCSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cCSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      cCSMatrix0.to(matrixFactory0);
      cCSMatrix0.removeFirstRow();
      cCSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(5);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldNonZeroInRow(5, vectorAccumulator0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      cCSMatrix0.rotate();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(17);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateRow(0, vectorFunction0);
      // Undeclared exception!
      try { 
        cCSMatrix0.minInColumn(17);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 18
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(32);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      cCSMatrix0.rotate();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(9);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      DenseMatrix denseMatrix0 = DenseMatrix.constant(9, 9, 9);
      inPlaceCopyMatrixToMatrix0.applySimple(denseMatrix0, (SparseMatrix) cCSMatrix1);
      cCSMatrix1.rotate();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.setAll((-1.616116523242126));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(8, (-0.1460185119147231));
      ((CCSMatrix) columnMajorSparseMatrix0).setAll(8);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 10);
      cCSMatrix0.product();
      CCSMatrix.zero(0, 10);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(0, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1);
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix1.foldNonZeroInRow(1, vectorAccumulator0);
      cCSMatrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(961, 0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInRow(5, vectorProcedure0);
      CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.getOrElse(0, 961, 5);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(32);
      cCSMatrix0.determinant();
      cCSMatrix0.rotate();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(4768);
      CCSMatrix.block(cCSMatrix1, cCSMatrix0, cCSMatrix0, cCSMatrix1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.toColumnMajorSparseMatrix();
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket("}> f:%G(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(53);
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix.random(53, 53, 0.0, (Random) mockRandom0);
      cCSMatrix0.setAll(0.0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      int[] intArray0 = new int[1];
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(8);
      cCSMatrix1.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1037);
      MatrixFactory<CCSMatrix> matrixFactory0 = (MatrixFactory<CCSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cCSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      CCSMatrix cCSMatrix1 = cCSMatrix0.to(matrixFactory0);
      cCSMatrix0.blank();
      cCSMatrix0.max();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix1.updateAt(8, 8, matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(53);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(10, 10);
      Matrix matrix0 = cCSMatrix0.sliceTopLeft(17, 32);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(10, Double.NEGATIVE_INFINITY);
      cCSMatrix1.min();
      Matrix matrix1 = columnMajorSparseMatrix0.shuffle();
      CCSMatrix.block(columnMajorSparseMatrix0, matrix0, columnMajorSparseMatrix0, matrix1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(53, 53);
      int[] intArray0 = new int[1];
      cCSMatrix0.select(intArray0, intArray0);
      org.evosuite.runtime.Random.setNextRandom((-1));
      cCSMatrix0.iteratorOfColumn(8);
      // Undeclared exception!
      try { 
        CCSMatrix.zero(3, 990, 3601);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 2970.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(53);
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix1 = CCSMatrix.random(53, 3014, 0.0, (Random) mockRandom0);
      CCSMatrix.block(cCSMatrix1, cCSMatrix0, cCSMatrix1, cCSMatrix1);
      cCSMatrix1.toBinary();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(48);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.toSparseMatrix();
      cCSMatrix0.transformColumn(4, vectorFunction0);
      cCSMatrix0.rotate();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(53, 1.0, (Random) mockRandom0);
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      cCSMatrix1.toBinary();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3034);
      cCSMatrix0.minInColumn(3015);
      double double0 = new Double(3034);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(5);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      cCSMatrix0.setColumn(2, (-2327.70696118282));
      cCSMatrix0.minInColumn(2);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(17);
      cCSMatrix0.rotate();
      MockRandom mockRandom0 = new MockRandom((-312L));
      mockRandom0.nextInt();
      CCSMatrix.random(3004, 2, 1.0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3038);
      cCSMatrix0.maxInColumn(2534);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(5);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      cCSMatrix0.setColumn(2, (-2327.70696118282));
      cCSMatrix0.maxInColumn(2);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte) (-51);
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)32;
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CCSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      ooPlaceVectorByMatrixMultiplication0.apply(sparseVector0, (ColumnMajorSparseMatrix) cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(1);
      linkedList0.add(double0);
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      ooPlaceVectorByMatrixMultiplication0.apply(sparseVector0, (ColumnMajorSparseMatrix) cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1, 1);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      ooPlaceVectorByMatrixMultiplication0.apply(sparseVector0, (ColumnMajorSparseMatrix) cCSMatrix0);
      CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      DenseMatrix denseMatrix0 = DenseMatrix.constant(3, 2700, 186.0);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(3, (-966.0));
      inPlaceCopyMatrixToMatrix0.applySimple(denseMatrix0, (SparseMatrix) cCSMatrix1);
      cCSMatrix0.kroneckerProduct(cCSMatrix1);
  }
}
