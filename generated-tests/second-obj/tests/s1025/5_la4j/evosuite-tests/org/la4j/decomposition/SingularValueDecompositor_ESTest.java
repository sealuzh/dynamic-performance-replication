/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 10:59:21 GMT 2018
 */

package org.la4j.decomposition;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.decomposition.SingularValueDecompositor;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.vector.DenseVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SingularValueDecompositor_ESTest extends SingularValueDecompositor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(2, 2);
      sparseMatrix0.toCSV();
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(sparseMatrix0);
      singularValueDecompositor0.decompose();
      singularValueDecompositor0.decompose();
      singularValueDecompositor0.decompose();
      singularValueDecompositor0.applicableTo(sparseMatrix0);
      Random.setNextRandom(2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[][] doubleArray0 = new double[1][4];
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      OoPlaceOuterProduct ooPlaceOuterProduct1 = new OoPlaceOuterProduct();
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(rowMajorSparseMatrix0);
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      MockRandom mockRandom0 = new MockRandom(1000L);
      DenseVector denseVector0 = DenseVector.random(2, mockRandom0);
      OoPlaceOuterProduct ooPlaceOuterProduct1 = new OoPlaceOuterProduct();
      DenseVector denseVector1 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = ooPlaceOuterProduct1.apply(denseVector0, denseVector1);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(matrix0);
      SingularValueDecompositor singularValueDecompositor1 = new SingularValueDecompositor(matrix0);
      singularValueDecompositor1.decompose();
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.fromCSV("PUt<,Nd");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[][] doubleArray1 = new double[1][4];
      doubleArray1[0] = doubleArray0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray1);
      Matrix matrix0 = rowMajorSparseMatrix0.transpose();
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(matrix0);
      singularValueDecompositor0.decompose();
      boolean boolean0 = singularValueDecompositor0.applicableTo(matrix0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(1, 1);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      singularValueDecompositor0.decompose();
      boolean boolean0 = singularValueDecompositor0.applicableTo(denseMatrix0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 2087.9;
      doubleArray1[1] = (-966.0);
      doubleArray1[2] = (-306.0691982219393);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (-966.0);
      doubleArray2[1] = (-966.0);
      doubleArray2[2] = 2087.9;
      doubleArray2[3] = (-306.0691982219393);
      doubleArray2[4] = 2087.9;
      doubleArray2[5] = 2087.9;
      doubleArray2[6] = 2087.9;
      doubleArray2[7] = (-841.44225396);
      doubleArray2[8] = (-306.0691982219393);
      doubleArray0[1] = doubleArray2;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      CCSMatrix cCSMatrix0 = (CCSMatrix)rowMajorSparseMatrix0.transpose();
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(cCSMatrix0);
      singularValueDecompositor0.decompose();
      singularValueDecompositor0.applicableTo(rowMajorSparseMatrix0);
      assertEquals(1.0, cCSMatrix0.density(), 0.01);
      assertEquals(6, cCSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[3];
      doubleArray1[1] = (-966.0);
      doubleArray1[2] = (-306.0691982219393);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (-966.0);
      doubleArray2[1] = (-966.0);
      doubleArray2[2] = 2087.9;
      doubleArray2[3] = (-306.0691982219393);
      doubleArray2[4] = 2087.9;
      doubleArray2[5] = 2087.9;
      doubleArray2[6] = 2087.9;
      doubleArray2[7] = (-841.44225396);
      doubleArray2[8] = (-306.0691982219393);
      doubleArray0[1] = doubleArray2;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(rowMajorSparseMatrix0);
      singularValueDecompositor0.decompose();
      Random.setNextRandom((-2514));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2087.9;
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      MockRandom mockRandom0 = new MockRandom((-1));
      DenseVector denseVector0 = DenseVector.random(9, mockRandom0);
      OoPlaceOuterProduct ooPlaceOuterProduct1 = new OoPlaceOuterProduct();
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(matrix0);
      SingularValueDecompositor singularValueDecompositor1 = new SingularValueDecompositor(matrix0);
      singularValueDecompositor0.decompose();
      boolean boolean0 = singularValueDecompositor1.applicableTo((Matrix) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 2087.9;
      doubleArray1[1] = (-966.0);
      doubleArray1[2] = (-306.0691982219393);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (-966.0);
      doubleArray2[1] = (-966.0);
      doubleArray2[2] = 2087.9;
      doubleArray2[3] = (-306.0691982219393);
      doubleArray2[4] = 2087.9;
      doubleArray2[5] = 2087.9;
      doubleArray2[6] = 2087.9;
      doubleArray2[7] = (-841.44225396);
      doubleArray2[8] = (-306.0691982219393);
      doubleArray0[1] = doubleArray2;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(rowMajorSparseMatrix0);
      singularValueDecompositor0.decompose();
      Random.setNextRandom((-2514));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[3];
      doubleArray1[1] = (-966.0);
      doubleArray1[2] = (-306.0691982219393);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (-966.0);
      doubleArray2[1] = (-966.0);
      doubleArray2[2] = 2087.9;
      doubleArray2[3] = (-306.0691982219393);
      doubleArray2[6] = 2087.9;
      doubleArray2[7] = (-841.44225396);
      doubleArray0[1] = doubleArray2;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = rowMajorSparseMatrix0.transpose();
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(matrix0);
      singularValueDecompositor0.decompose();
      singularValueDecompositor0.decompose();
      singularValueDecompositor0.applicableTo(rowMajorSparseMatrix0);
      Random.setNextRandom(407);
      singularValueDecompositor0.applicableTo(rowMajorSparseMatrix0);
      Random.setNextRandom(3332);
      singularValueDecompositor0.decompose();
      Random.setNextRandom((-1));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2087.9;
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      MockRandom mockRandom0 = new MockRandom(2);
      DenseVector denseVector0 = DenseVector.random(7, mockRandom0);
      OoPlaceOuterProduct ooPlaceOuterProduct1 = new OoPlaceOuterProduct();
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, denseVector0);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(matrix0);
      singularValueDecompositor0.applicableTo(matrix0);
      singularValueDecompositor0.decompose();
      SingularValueDecompositor singularValueDecompositor1 = new SingularValueDecompositor(matrix0);
      // Undeclared exception!
      try { 
        SparseMatrix.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }
}
