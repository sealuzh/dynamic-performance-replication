/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 16:39:33 GMT 2018
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>();
      DoubleKeyMap<Object, Object, String> doubleKeyMap1 = new DoubleKeyMap<Object, Object, String>();
      doubleKeyMap1.remove((Object) "");
      String string0 = doubleKeyMap1.get((Object) doubleKeyMap0, (Object) doubleKeyMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>();
      DoubleKeyMap<Object, Object, String> doubleKeyMap1 = new DoubleKeyMap<Object, Object, String>();
      Object object0 = new Object();
      DoubleKeyMap<Object, String, Object> doubleKeyMap2 = new DoubleKeyMap<Object, String, Object>();
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        doubleKeyMap2.put(object1, (Map<String, Object>) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DoubleKeyMap<String, String, Object> doubleKeyMap0 = new DoubleKeyMap<String, String, Object>();
      doubleKeyMap0.put("", "My{$D5h(^H", (Object) "My{$D5h(^H");
      doubleKeyMap0.remove("", "");
      DoubleKeyMap<String, Integer, Object> doubleKeyMap1 = new DoubleKeyMap<String, Integer, Object>();
      Map<Object, Object> map0 = doubleKeyMap1.newMap();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DoubleKeyMap<String, String, Object> doubleKeyMap0 = new DoubleKeyMap<String, String, Object>();
      Integer integer0 = new Integer(0);
      doubleKeyMap0.put("\"]<L`Z+$Yb|fAy", "wrong proto type map ", (Object) integer0);
      doubleKeyMap0.put("\"]<L`Z+$Yb|fAy", "My{$D5h(^H", (Object) "My{$D5h(^H");
      Object object0 = doubleKeyMap0.remove("\"]<L`Z+$Yb|fAy", "");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>();
      Map<String, Map<String, Integer>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<String, String, Integer> doubleKeyMap1 = new DoubleKeyMap<String, String, Integer>(map0);
      Object object0 = new Object();
      DoubleKeyMap<String, String, Object> doubleKeyMap2 = new DoubleKeyMap<String, String, Object>();
      doubleKeyMap2.remove("", "");
      doubleKeyMap2.put("", "", object0);
      doubleKeyMap2.remove("", "");
      DoubleKeyMap<Object, String, Object> doubleKeyMap3 = new DoubleKeyMap<Object, String, Object>();
      Map<String, Object> map1 = null;
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, Object, String> doubleKeyMap4 = null;
      try {
        doubleKeyMap4 = new DoubleKeyMap<Integer, Object, String>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>(class0);
      doubleKeyMap0.remove((Object) class0, "");
      doubleKeyMap0.newMap();
      HashMap<String, Map<String, Integer>> hashMap0 = new HashMap<String, Map<String, Integer>>();
      Class<HashMap> class1 = HashMap.class;
      HashMap<String, Map<Object, Integer>> hashMap1 = new HashMap<String, Map<Object, Integer>>();
      DoubleKeyMap<String, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<String, Object, Integer>();
      Map<Object, Map<String, Integer>> map0 = doubleKeyMap1.newMap();
      DoubleKeyMap<Object, String, Integer> doubleKeyMap2 = new DoubleKeyMap<Object, String, Integer>(map0, class1);
      doubleKeyMap2.remove((Object) class1);
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap3 = new DoubleKeyMap<Object, Integer, Object>();
      Integer integer0 = new Integer((-1));
      Object object0 = new Object();
      Integer integer1 = new Integer((-1));
      doubleKeyMap3.remove(object0, integer1);
      Map<String, Map<String, Object>> map1 = doubleKeyMap3.newMap();
      DoubleKeyMap<String, String, Object> doubleKeyMap4 = new DoubleKeyMap<String, String, Object>(map1);
      doubleKeyMap4.put("", "v6nWj3Q6)m}->k,-", (Object) map1);
      Object object1 = doubleKeyMap4.get("", (String) null);
      assertNull(object1);
  }
}
