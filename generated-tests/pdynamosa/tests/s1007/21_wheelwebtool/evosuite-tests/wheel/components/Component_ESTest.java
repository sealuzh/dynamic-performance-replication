/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 01:57:30 GMT 2019
 */

package wheel.components;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.time.LocalDate;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import wheel.ErrorPage;
import wheel.components.ActionExpression;
import wheel.components.Any;
import wheel.components.Block;
import wheel.components.Checkbox;
import wheel.components.CheckboxGroup;
import wheel.components.Component;
import wheel.components.ComponentCreator;
import wheel.components.ElExpression;
import wheel.components.FileInput;
import wheel.components.Form;
import wheel.components.FormElement;
import wheel.components.Hidden;
import wheel.components.ISelectModel;
import wheel.components.Image;
import wheel.components.Label;
import wheel.components.Link;
import wheel.components.NumberInput;
import wheel.components.Radio;
import wheel.components.RenderableComponent;
import wheel.components.Select;
import wheel.components.StandaloneComponent;
import wheel.components.Submit;
import wheel.components.Table;
import wheel.components.TableBlock;
import wheel.components.TableRow;
import wheel.components.Text;
import wheel.components.TextArea;
import wheel.components.TextInput;
import wheel.components.XmlEntityRef;
import wheel.util.ComponentStore;
import wheel.util.DynamicSelectModel;
import wheel.util.StringSelectModel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Component_ESTest extends Component_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.hashCode();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("[C");
      Form form0 = new Form(errorPage0, "[C", actionExpression0);
      form0.submit(" IN)HMvTh");
      assertFalse(actionExpression0.isSubmissible());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Label label0 = new Label(errorPage0, errorPage0);
      Component component0 = label0.h4();
      Component component1 = component0.requestFocus();
      assertTrue(component1._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.object();
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Label label0 = new Label(errorPage0, errorPage0);
      Component component0 = label0.nbsp();
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.label((Object) "");
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Object object0 = new Object();
      Component component0 = errorPage0.kbd(object0);
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("I-7QB>g4");
      Form form0 = new Form(errorPage0, "I-7QB>g4", actionExpression0);
      form0.imageSubmit("I-7QB>g4", "I-7QB>g4");
      assertFalse(actionExpression0.isSubmissible());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Short short0 = new Short((short)14);
      Component component0 = errorPage0.span((Object) short0);
      assertTrue(component0._isGeneratedId());
      
      component0.id("e;R D86!Pq]*(W,w}");
      assertFalse(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.form("eZ]3<} :.GuS<");
      FormElement formElement0 = component0.hidden("eZ]3<} :.GuS<");
      assertEquals("eZ]3<} :.GuS<", formElement0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.getParent();
      assertNull(component0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      StandaloneComponent standaloneComponent0 = errorPage0.getPage();
      assertFalse(standaloneComponent0._isBuilt());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("bR}'[F5)./ktk>h");
      Form form0 = new Form(errorPage0, "bR}'[F5)./ktk>h", actionExpression0);
      Label label0 = new Label(errorPage0, form0);
      label0.form("Label_2");
      label0.find("Label_2");
      assertTrue(label0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Object object0 = new Object();
      Label label0 = new Label(errorPage0, object0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      
      Component component0 = label0.end("wheel_ErrorPage");
      assertNull(component0);
      assertTrue(label0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ElExpression elExpression0 = new ElExpression("57");
      Any any0 = new Any(errorPage0, elExpression0);
      Checkbox checkbox0 = new Checkbox(any0, "{*Se=(9,31e\tRt", ";)'Xa$ACx'H-t|>");
      Label label0 = new Label(checkbox0, any0);
      Component component0 = label0.end(";)'Xa$ACx'H-t|>");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Any_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.meta();
      Table table0 = new Table(component0, "p(w!p-cq_m29");
      Component component1 = table0.end();
      assertEquals("Any_1", component1.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("Col component can be added only to a TableBlock.");
      Form form0 = new Form(errorPage0, " was not closed", actionExpression0);
      Component component0 = form0.div();
      assertEquals("Block_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.hr();
      ActionExpression actionExpression0 = new ActionExpression("null");
      Component component1 = component0.clasS(actionExpression0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Any_1", component1.getComponentId());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.address();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Label label0 = (Label)errorPage0.pre((Object) null);
      Label label1 = (Label)label0.addInternalRenderHint("Factory initialization incomplete - has not tried ");
      assertTrue(label1._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "Col component can be added only to a TableBlock.");
      TableBlock tableBlock0 = table0.tfoot();
      TableRow tableRow0 = tableBlock0.tr();
      Block block0 = tableRow0.id("XK=SSbE$9x7s>i_");
      errorPage0.add(block0);
      assertTrue(tableBlock0._isGeneratedId());
      assertFalse(tableRow0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Label label0 = new Label(errorPage0, errorPage0);
      ActionExpression actionExpression0 = new ActionExpression("Synthetic");
      Component component0 = label0.actionBinding(actionExpression0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Label label0 = new Label(errorPage0, errorPage0);
      Table table0 = new Table(label0, (String) null);
      boolean boolean0 = table0._isGeneratedId();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("valueOf");
      errorPage0.actionBinding(actionExpression0);
      List<ActionExpression> list0 = errorPage0._getActions();
      assertNotNull(list0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(list0.contains(actionExpression0));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("No corresponding component found for end expression '");
      ActionExpression actionExpression1 = actionExpression0.submitForm(false);
      errorPage0.actionBinding(actionExpression1);
      ActionExpression actionExpression2 = errorPage0._getAction();
      assertEquals("wheel_ErrorPage", actionExpression2.getSourceId());
      assertNotNull(actionExpression2);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Select select0 = new Select(errorPage0, "", "", "", (ISelectModel) null, true);
      errorPage0._applyFormat(select0);
      assertTrue(select0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.dl();
      Component component1 = component0.wBlock((CharSequence) null);
      assertEquals("Block_2", component1.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "t7-s?CQPNL9mOS3");
      TableBlock tableBlock0 = table0.tfoot();
      Component component0 = tableBlock0.wBlock("t7-s?CQPNL9mOS3");
      assertEquals("Block_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.up((-1510));
      assertEquals("wheel_ErrorPage", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Object object0 = new Object();
      Component component0 = errorPage0.tt(object0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.title((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.title("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.textarea((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.textarea("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.textInput((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.textInput("org.mvel.conversion.BigIntegerCH$8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.text((Object) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.sup((Object) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Object object0 = new Object();
      Component component0 = errorPage0.sup(object0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.submit(" IN)HMvTh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("");
      Form form0 = new Form(errorPage0, "empty", actionExpression0);
      FormElement formElement0 = form0.submit("");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(actionExpression0.isSubmissible());
      assertTrue(formElement0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.sub((Object) null);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Object object0 = new Object();
      Component component0 = errorPage0.strong(object0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      LocalDate localDate0 = MockLocalDate.now();
      Component component0 = errorPage0.strike((Object) localDate0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Hidden hidden0 = new Hidden(errorPage0, (String) null, (String) null);
      // Undeclared exception!
      try { 
        hidden0.small((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        errorPage0.select("\"", (ISelectModel) null, stringArray0[0]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      // Undeclared exception!
      try { 
        errorPage0.select("%", dynamicSelectModel0, "%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      // Undeclared exception!
      try { 
        errorPage0.select("", dynamicSelectModel0, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.samp((Object) null);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentStore componentStore0 = errorPage0._getComponentStore();
      Component component0 = errorPage0.s((Object) componentStore0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("cannot bind to collection property: ");
      // Undeclared exception!
      try { 
        xmlEntityRef0.reset((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.reset("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.renderHint("");
      assertEquals("wheel_ErrorPage", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("0b]=ihM-8<PS}Vnk<kx");
      Component component0 = xmlEntityRef0.renderHint("0b]=ihM-8<PS}Vnk<kx");
      assertEquals("0b]=ihM-8<PS}Vnk<kx", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      CharBuffer charBuffer0 = CharBuffer.allocate(2565);
      Component component0 = errorPage0.renderHint(charBuffer0);
      assertEquals("wheel_ErrorPage", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.remove((Component) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableRow tableRow0 = new TableRow(errorPage0);
      // Undeclared exception!
      try { 
        errorPage0.remove((Component) tableRow0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.remove((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Text text0 = (Text)errorPage0.rawText((Object) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(text0.isCdata());
      assertTrue(text0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression((String) null);
      Form form0 = new Form(errorPage0, "org.apache.commons.io.filefilter.OrFileFilter", actionExpression0);
      Object object0 = new Object();
      Text text0 = (Text)form0.rawText(object0);
      assertTrue(text0._isGeneratedId());
      assertTrue(text0.isCdata());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      // Undeclared exception!
      try { 
        errorPage0.radioGroup("object", stringSelectModel0, (ElExpression) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ElExpression elExpression0 = new ElExpression("->$~99Ds|ko}o");
      // Undeclared exception!
      try { 
        errorPage0.radioGroup("Thead component can be added only to a Table.", (ISelectModel) null, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      ElExpression elExpression0 = new ElExpression("");
      Component component0 = errorPage0.hr();
      // Undeclared exception!
      try { 
        component0.radioGroup("", stringSelectModel0, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Form form0 = new Form("");
      // Undeclared exception!
      try { 
        form0.radio("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Object object0 = new Object();
      Component component0 = errorPage0.pre(object0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = errorPage0.placeholder((String) null);
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.passwordInput((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.passwordInput("<<<DYN3MIC TYPING BYPASS>>>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.param("qFoxG0}v-<fR7,OO", "k,;Bva{R}dxTbqq(#,(");
      assertEquals("Any_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.param((CharSequence) null, (CharSequence) null);
      assertEquals("Any_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.p((Object) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      Component component0 = errorPage0.p((Object) dynamicSelectModel0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.numberInput("table", (CharSequence) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        errorPage0.numberInput((String) null, (CharSequence) stringBuilder0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.numberInput("div", (CharSequence) "div");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.numberInput((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.numberInput("</fragment>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("0b]=ihM-8<PS}Vnk<kx");
      // Undeclared exception!
      try { 
        xmlEntityRef0.multiSelect("class or class reference not found: ", (ISelectModel) null, "class or class reference not found: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DynamicSelectModel dynamicSelectModel0 = errorPage0.selectModel();
      // Undeclared exception!
      try { 
        errorPage0.multiSelect((String) null, dynamicSelectModel0, (CharSequence) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        errorPage0.message((String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        errorPage0.message("", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.message((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.map("uBFQV!l");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.map("");
      assertEquals("Block_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Component component0 = errorPage0.li((Object) componentCreator0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("0b]=ihM-8<PS}Vnk<kx");
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      // Undeclared exception!
      try { 
        xmlEntityRef0.label((Object) componentCreator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("0b]=ihM-8<PS}Vnk<kx");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        xmlEntityRef0.kbd(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Object object0 = new Object();
      Component component0 = errorPage0.ins(object0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Form form0 = new Form("");
      // Undeclared exception!
      try { 
        form0.img("", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.img((String) null, (String) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.imageSubmit("del", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.id("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Text text0 = (Text)errorPage0.htmlText((Object) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(text0._isGeneratedId());
      assertTrue(text0.isHtml());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.hidden((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.hidden("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.h6((Object) null);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.h4((Object) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.h3((Object) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Component component0 = errorPage0.h3((Object) componentCreator0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.h2((Object) null);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.h1((Object) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find component with id 'null'.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.frame((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("K1GM!-RcLg[n=");
      actionExpression0.submitForm(false);
      errorPage0.form("K1GM!-RcLg[n=", actionExpression0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("K1GM!-RcLg[n=");
      actionExpression0.submissible(true);
      errorPage0.form("K1GM!-RcLg[n=", actionExpression0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression((String) null);
      // Undeclared exception!
      try { 
        errorPage0.form((String) null, actionExpression0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A Form must always have a given componentId.
         //
         verifyException("wheel.components.Form", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.form((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A Form must always have a given componentId.
         //
         verifyException("wheel.components.Form", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      List<Component> list0 = errorPage0.findAll((ElExpression) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ElExpression elExpression0 = new ElExpression("");
      List<Component> list0 = errorPage0.findAll(elExpression0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.find((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find component with id null on the page.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "empty string is not allowed fr ignorable whitespace", "a");
      // Undeclared exception!
      try { 
        checkbox0.find("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ElExpression elExpression0 = new ElExpression("");
      // Undeclared exception!
      try { 
        errorPage0.fileInput("RuntimeVisibleAnnotations", elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.fileInput("", (ElExpression) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.fileInput((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.fileInput("GqJ>6t h:]LvBz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Object object0 = new Object();
      boolean boolean0 = errorPage0.equals(object0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.span((Object) "");
      component0.entity((String) null);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.entity("H3ZWy\"I}hi");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("H3ZWy\"I}hi", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Integer integer0 = new Integer(95);
      Label label0 = new Label(errorPage0, integer0);
      // Undeclared exception!
      try { 
        label0.end("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No corresponding component found for end expression ''.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.encode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("0b]=ihM-8<PS}Vnk<kx");
      // Undeclared exception!
      try { 
        xmlEntityRef0.encode("0b]=ihM-8<PS}Vnk<kx");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Table table0 = new Table(errorPage0, ".)r");
      TableBlock tableBlock0 = table0.tfoot();
      Component component0 = tableBlock0.em((Object) componentCreator0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Link link0 = new Link(errorPage0, componentCreator0);
      link0.el("U6");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(link0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.el("");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DynamicSelectModel dynamicSelectModel0 = errorPage0.selectModel();
      Component component0 = errorPage0.dt((Object) dynamicSelectModel0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Component component0 = errorPage0.dfn((Object) componentCreator0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.del((Object) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2132);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      Component component0 = errorPage0.dd((Object) charBuffer0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.dateInput("T`6.U8:o=vS'", (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.dateInput((String) null, "iyL^w@<F+bM.YI0Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      char[] charArray0 = new char[5];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        errorPage0.dateFormat((String) null, charBuffer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to initialize SimpleDateFormat with pattern 'null'.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.dateFormat((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to initialize SimpleDateFormat with pattern 'null'.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("0b]=ihM-8<PS}Vnk<kx");
      // Undeclared exception!
      try { 
        xmlEntityRef0.dateFormat(", id: ", ", id: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to initialize SimpleDateFormat with pattern ', id: '.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Component component0 = errorPage0.code((Object) componentCreator0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      ElExpression elExpression0 = new ElExpression((String) null);
      CheckboxGroup checkboxGroup0 = new CheckboxGroup((Component) null, "wheel.components.JSONComponent", "wheel.components.JSONComponent", stringSelectModel0, elExpression0);
      CheckboxGroup checkboxGroup1 = (CheckboxGroup)checkboxGroup0.clasS((CharSequence) null);
      assertFalse(checkboxGroup1._isBuilt());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      // Undeclared exception!
      try { 
        errorPage0.checkboxGroup((String) null, stringSelectModel0, (ElExpression) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ElExpression elExpression0 = new ElExpression("b\"d$^ONrhOeA=Fwy^tX");
      // Undeclared exception!
      try { 
        errorPage0.checkboxGroup("b\"d$^ONrhOeA=Fwy^tX", (ISelectModel) null, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Submit submit0 = new Submit((Component) null, ".", "Td component can be added only to a TableRow.");
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      ElExpression elExpression0 = new ElExpression("kpX')Pp^ b^D");
      // Undeclared exception!
      try { 
        submit0.checkboxGroup(".", dynamicSelectModel0, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      ElExpression elExpression0 = new ElExpression("");
      // Undeclared exception!
      try { 
        errorPage0.checkboxGroup("div", stringSelectModel0, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      ElExpression elExpression0 = new ElExpression("");
      // Undeclared exception!
      try { 
        errorPage0.checkboxGroup("", stringSelectModel0, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.code();
      // Undeclared exception!
      try { 
        component0.checkbox("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.buttonInput((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.buttonInput("F.^,en!- w5B1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Component component0 = errorPage0.big((Object) componentCreator0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("dl");
      Component component0 = errorPage0.bdo(actionExpression0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      char[] charArray0 = new char[3];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Component component0 = errorPage0.bdo(charBuffer0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.base((CharSequence) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Any_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.base("qC$xWR]0]_Y&Ep:(^J!");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Any_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.b((Object) null);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Object object0 = new Object();
      Component component0 = errorPage0.b(object0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.attribute((String) null, (CharSequence) null);
      assertEquals("wheel_ErrorPage", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.attribute("", "");
      assertEquals("wheel_ErrorPage", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("fieldset");
      Component component0 = xmlEntityRef0.addInternalRenderHint((String) null);
      assertEquals("fieldset", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("1v36`v`Cr 5?$UE");
      Component component0 = xmlEntityRef0.addInternalRenderHint("");
      assertEquals("1v36`v`Cr 5?$UE", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "java.lang.String@0000000007");
      Component component0 = errorPage0.ins((Object) "java.lang.String@0000000007");
      Component component1 = table0.add(component0);
      assertTrue(component1._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("");
      ActionExpression actionExpression1 = actionExpression0.submissible(true);
      Component component0 = errorPage0.actionBinding(actionExpression1);
      ActionExpression actionExpression2 = component0._getAction();
      assertNotNull(actionExpression2);
      assertEquals("wheel_ErrorPage", actionExpression2.getSourceId());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Hidden hidden0 = new Hidden(errorPage0, "", (String) null);
      Component component0 = hidden0.actionBinding((String) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("0b]=ihM-8<PS}Vnk<kx");
      Hidden hidden0 = new Hidden(xmlEntityRef0, "org.apache.commons.io.IOCase", "0b]=ihM-8<PS}Vnk<kx");
      hidden0.actionBinding("org.apache.commons.io.IOCase");
      assertEquals("0b]=ihM-8<PS}Vnk<kx", xmlEntityRef0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = errorPage0.placeholder("(A0-20(VX>u");
      Submit submit0 = new Submit(block0, "(A0-20(VX>u", "(A0-20(VX>u");
      submit0.action((String) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.action("ed7");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.acronym((Object) null);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[4];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      Component component0 = errorPage0.acronym((Object) charBuffer0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.abbr((Object) null);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "null", "null");
      checkbox0._wrapComponentId((String) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0._setParent((Component) null);
      assertTrue(errorPage0.isPage());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0, ".O.sS ;dlE%&");
      errorPage0._setParent(block0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Form form0 = new Form("");
      form0._setGeneratedId(false);
      assertFalse(form0._isGeneratedId());
      assertEquals("wheel_components_Form", form0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0._setComponentId((String) null);
      assertFalse(errorPage0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0._setComponentId("");
      assertEquals("", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0._getForm(false);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "-B2w7", "java.lang.StringBuilder");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "-B2w7");
      // Undeclared exception!
      try { 
        checkbox0.var((Object) charBuffer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.up(28);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.hr();
      // Undeclared exception!
      try { 
        component0.u((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.title("div");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("0b]=ihM-8<PS}Vnk<kx");
      Submit submit0 = new Submit(xmlEntityRef0, ">Dha\"", "0b]=ihM-8<PS}Vnk<kx");
      // Undeclared exception!
      try { 
        submit0.text(">Dha\"");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("0b]=ihM-8<PS}Vnk<kx");
      // Undeclared exception!
      try { 
        xmlEntityRef0.strong((Object) "0b]=ihM-8<PS}Vnk<kx");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("0b]=ihM-8<PS}Vnk<kx");
      // Undeclared exception!
      try { 
        xmlEntityRef0.strike((Object) "0b]=ihM-8<PS}Vnk<kx");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "a", "empty string is not allowed for ignorable whitespace");
      // Undeclared exception!
      try { 
        checkbox0.span((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "empty string is not allowed for ignorable whitespace", "a");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(620, 620, (-1813), (-531), (-531), (-1813));
      // Undeclared exception!
      try { 
        checkbox0.span((Object) mockGregorianCalendar0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DynamicSelectModel dynamicSelectModel0 = errorPage0.selectModel();
      Hidden hidden0 = new Hidden(errorPage0, (String) null, (String) null);
      // Undeclared exception!
      try { 
        hidden0.small((Object) dynamicSelectModel0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("0b]=ihM-8<PS}Vnk<kx");
      Hidden hidden0 = new Hidden(xmlEntityRef0, "org.apache.commons.io.IOCase", "0b]=ihM-8<PS}Vnk<kx");
      // Undeclared exception!
      try { 
        hidden0.small((Object) "0b]=ihM-8<PS}Vnk<kx");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("0b]=ihM-8<PS}Vnk<kx");
      // Undeclared exception!
      try { 
        xmlEntityRef0.small();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Submit submit0 = new Submit(errorPage0, "B", "B");
      // Undeclared exception!
      try { 
        submit0.script();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.reset("pQ5MFda7211[6>j'I;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.remove("?yT.3&0b$rSPT7r");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("0b]=ihM-8<PS}Vnk<kx");
      // Undeclared exception!
      try { 
        xmlEntityRef0.rawText("0b]=ihM-8<PS}Vnk<kx");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Form form0 = new Form("");
      // Undeclared exception!
      try { 
        form0.radio("td");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "empty string is not allowed for ignorable whitespace", "a");
      // Undeclared exception!
      try { 
        checkbox0.q((Object) "a");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("0b]=ihM-8<PS}Vnk<kx");
      // Undeclared exception!
      try { 
        xmlEntityRef0.pre();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ElExpression elExpression0 = new ElExpression("No corresponding component found for end expression '");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "No corresponding component found for end expression '");
      // Undeclared exception!
      try { 
        errorPage0.param(elExpression0, charBuffer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not evaluate expression No corresponding component found for end expression ' in class wheel.ErrorPage
         //
         verifyException("wheel.components.ElExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("0b]=ihM-8<PS}Vnk<kx");
      Submit submit0 = new Submit(xmlEntityRef0, "0b]=ihM-8<PS}Vnk<kx", "k");
      // Undeclared exception!
      try { 
        submit0.object();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("0b]=ihM-8<PS}Vnk<kx");
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        xmlEntityRef0.message("0b]=ihM-8<PS}Vnk<kx", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.message("ins", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "qFoxG0}v-<fR7,OO");
      TableBlock tableBlock0 = table0.tfoot();
      Any any0 = tableBlock0.col();
      TextArea textArea0 = new TextArea(any0, ">)`#2y~(rirI\u0001Fk", "qFoxG0}v-<fR7,OO");
      Label label0 = new Label(textArea0, table0);
      // Undeclared exception!
      try { 
        any0.li((Object) label0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("0b]=ihM-8<PS}Vnk<kx");
      // Undeclared exception!
      try { 
        xmlEntityRef0.legend((Object) "0b]=ihM-8<PS}Vnk<kx");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Hidden hidden0 = new Hidden(errorPage0, "GGT=^w)&z\"IB:,84P0m", "GGT=^w)&z\"IB:,84P0m");
      ElExpression elExpression0 = new ElExpression("GGT=^w)&z\"IB:,84P0m");
      // Undeclared exception!
      try { 
        hidden0.kbd((Object) elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not evaluate expression GGT=^w)&z\"IB:,84P0m in class wheel.ErrorPage
         //
         verifyException("wheel.components.ElExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef(" g/x!h-8_c@t@");
      // Undeclared exception!
      try { 
        xmlEntityRef0.ins();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("+`9Z`A_P+");
      // Undeclared exception!
      try { 
        xmlEntityRef0.img("+RN8+iyJe\"", "ql+M9k ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("X^Qu%CDp");
      // Undeclared exception!
      try { 
        xmlEntityRef0.id("X^Qu%CDp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Boolean boolean0 = Boolean.valueOf((String) null);
      Label label0 = new Label(errorPage0, boolean0);
      Checkbox checkbox0 = new Checkbox(label0, "(W", "6w73P(");
      // Undeclared exception!
      try { 
        checkbox0.i((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("0b]=ihM-8<PS}Vnk<kx");
      // Undeclared exception!
      try { 
        xmlEntityRef0.h6();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("0b]=ihM-8<PS}Vnk<kx");
      // Undeclared exception!
      try { 
        xmlEntityRef0.h5();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("0b]=ihM-8<PS}Vnk<kx");
      // Undeclared exception!
      try { 
        xmlEntityRef0.h3((Object) "k");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, (String) null, "");
      // Undeclared exception!
      try { 
        checkbox0.h3();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.h1();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("0b]=ihM-8<PS}Vnk<kx");
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "-p8?]3J9$O@X{k", "0b]=ihM-8<PS}Vnk<kx");
      // Undeclared exception!
      try { 
        checkbox0.getPage();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("wheel.components.FileInput");
      // Undeclared exception!
      try { 
        xmlEntityRef0.frame("wheel.components.FileInput");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextInput textInput0 = new TextInput(errorPage0, "{!;%><", "{!;%><");
      TextArea textArea0 = new TextArea(textInput0, "{!;%><", "{!;%><");
      ActionExpression actionExpression0 = new ActionExpression("table");
      // Undeclared exception!
      try { 
        textArea0.form("{!;%><", actionExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("");
      // Undeclared exception!
      try { 
        errorPage0.form("", actionExpression0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A Form must always have a given componentId.
         //
         verifyException("wheel.components.Form", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.form("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A Form must always have a given componentId.
         //
         verifyException("wheel.components.Form", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression((String) null);
      Label label0 = new Label(errorPage0, actionExpression0);
      // Undeclared exception!
      try { 
        label0.end((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("H>]jY@uA");
      // Undeclared exception!
      try { 
        xmlEntityRef0.em((Object) "H>]jY@uA");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("0b]=ihM-8<PS}Vnk<kx");
      // Undeclared exception!
      try { 
        xmlEntityRef0.dt((Object) "0b]=ihM-8<PS}Vnk<kx");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String[] stringArray0 = new String[4];
      Component component0 = errorPage0.area(stringArray0);
      // Undeclared exception!
      try { 
        component0.dt();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("0b]=ihM-8<PS}Vnk<kx");
      // Undeclared exception!
      try { 
        xmlEntityRef0.dl();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("0b]=ihM-8<PS}Vnk<kx");
      // Undeclared exception!
      try { 
        xmlEntityRef0.dfn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Form form0 = new Form("0b]=ihM-8<PS}Vn~<kx");
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      // Undeclared exception!
      try { 
        form0.del((Object) dynamicSelectModel0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.cite((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("0b]=ihM-8<PS}Vnk<kx");
      // Undeclared exception!
      try { 
        xmlEntityRef0.cite();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("nz>s|W4hcT");
      // Undeclared exception!
      try { 
        xmlEntityRef0.button();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.body();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("fieldset");
      // Undeclared exception!
      try { 
        xmlEntityRef0.big((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("0b]=ihM-8<PS}Vnk<kx");
      String[] stringArray0 = new String[9];
      // Undeclared exception!
      try { 
        xmlEntityRef0.area(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.addFirst((Component) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "{", "{");
      // Undeclared exception!
      try { 
        errorPage0.add(checkbox0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add a form element. No surrounding form found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.add((Component) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.actionBinding((ActionExpression) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("0b]=ihM-8<PS}Vnk<kx");
      Integer integer0 = new Integer(91);
      // Undeclared exception!
      try { 
        xmlEntityRef0.acronym((Object) integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Form form0 = new Form("");
      // Undeclared exception!
      try { 
        form0.acronym();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("1 ");
      // Undeclared exception!
      try { 
        xmlEntityRef0._wrapComponentId("1 ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ElExpression elExpression0 = new ElExpression("85!f");
      Component component0 = errorPage0.pre();
      Submit submit0 = new Submit(component0, "cannot bind to collection property: ", ";)'X$ACx'H-t|>");
      Label label0 = new Label(submit0, elExpression0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(label0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ElExpression elExpression0 = new ElExpression("");
      NumberInput numberInput0 = new NumberInput(errorPage0, "", "", elExpression0);
      assertTrue(numberInput0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String string0 = errorPage0.eval((Object) null);
      assertEquals("null", string0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, (String) null, "");
      checkbox0._wrapComponentId("");
      assertTrue(checkbox0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0._wrapComponentId("SLJ2+P>Kx+Iu");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.getComponents();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.hr();
      ActionExpression actionExpression0 = new ActionExpression((String) null);
      Form form0 = new Form(component0, "small", actionExpression0);
      Hidden hidden0 = new Hidden(errorPage0, (String) null, (String) null);
      form0.addFormElement(hidden0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Any_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      TextInput textInput0 = new TextInput((Component) null, (String) null, "empty string is not allowed for ignorable whitespace");
      // Undeclared exception!
      try { 
        textInput0.getPage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextInput textInput0 = new TextInput(errorPage0, "GGT=^w)&z\"IB:,84P0m", "GGT=^w)&z\"IB:,84P0m");
      Image image0 = new Image(textInput0, "GGT=^w)&z\"IB:,84P0m", "GGT=^w)&z\"IB:,84P0m");
      Checkbox checkbox0 = new Checkbox(image0, "GGT=^w)&z\"IB:,84P0m", "GGT=^w)&z\"IB:,84P0m");
      StandaloneComponent standaloneComponent0 = checkbox0._getTopLevelComponent(true);
      assertEquals("wheel_ErrorPage", standaloneComponent0.getComponentId());
      assertTrue(image0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      StandaloneComponent standaloneComponent0 = errorPage0._getTopLevelComponent(true);
      assertEquals("wheel_ErrorPage", standaloneComponent0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0._getForm(true);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.create();
      errorPage0.create();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextInput textInput0 = new TextInput(errorPage0, "", "");
      errorPage0.abbr((Object) textInput0);
      assertTrue(textInput0._isGeneratedId());
      
      errorPage0._getChildren();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      ElExpression elExpression0 = new ElExpression("</");
      Select select0 = new Select(errorPage0, "</", "Thead component can be added only to a Table.", stringSelectModel0, elExpression0);
      select0.buildComponent();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      FileInput fileInput0 = new FileInput(errorPage0, "'`h],5QDa", "'`h],5QDa");
      String[] stringArray0 = new String[6];
      fileInput0.attributes(stringArray0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.attributes((String[]) null);
      assertEquals("wheel_ErrorPage", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("[C");
      Form form0 = new Form(errorPage0, "[C", actionExpression0);
      form0.buildComponent();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.getEngine();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      xmlEntityRef0.afterAdd();
      assertEquals("wheel_components_XmlEntityRef", xmlEntityRef0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0._setGeneratedId(true);
      errorPage0.attribute((String) null, (CharSequence) null);
      assertTrue(errorPage0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.head();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0._isGeneratedId();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String string0 = errorPage0.getComponentId();
      assertEquals("wheel_ErrorPage", string0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.end();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not end compoennt, already at root.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.hr();
      Component component1 = component0.end();
      assertEquals("wheel_ErrorPage", component1.getComponentId());
      assertEquals("Any_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, "wheel.components.ActionExpression@0000000001", "wheel.components.ActionExpression@0000000001");
      Label label0 = new Label(errorPage0, textArea0);
      // Undeclared exception!
      try { 
        label0.end("jc:0xeC D31Y_+5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No corresponding component found for end expression 'jc:0xeC D31Y_+5'.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "java/lang/Short");
      TableRow tableRow0 = new TableRow(errorPage0);
      Label label0 = new Label(table0, tableRow0);
      assertEquals("java/lang/Short", table0.getComponentId());
      
      Component component0 = label0.end("java/lang/Short");
      assertTrue(label0._isGeneratedId());
      assertEquals("wheel_ErrorPage", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.dt();
      ElExpression elExpression0 = new ElExpression((String) null);
      // Undeclared exception!
      try { 
        errorPage0.findAll(elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Finder expression didn't evaluate to a boolean value.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ElExpression elExpression0 = new ElExpression("l=h36Z&#~ .~y");
      List<Component> list0 = errorPage0.findAll(elExpression0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.h3();
      Component component0 = errorPage0.find("Block_1");
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find component with id ''.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.up(1);
      assertNull(component0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.up(0);
      assertEquals("wheel_ErrorPage", component0.getComponentId());
      assertNotNull(component0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.form("\"C8:O.");
      ActionExpression actionExpression0 = new ActionExpression("~:EH7F_X!");
      Form form0 = new Form(errorPage0, "~:EH7F_X!", actionExpression0);
      Component component1 = form0.wrapSelf();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(component1.equals((Object)component0));
      assertEquals("~:EH7F_X!", component1.getComponentId());
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ErrorPage errorPage1 = new ErrorPage();
      boolean boolean0 = errorPage0.equals(errorPage1);
      assertTrue(boolean0);
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.pre((Object) null);
      boolean boolean0 = component0.equals((Object) null);
      assertTrue(component0._isGeneratedId());
      assertFalse(boolean0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression(">>");
      errorPage0.actionBinding(actionExpression0);
      errorPage0._clear();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.attribute("zsR", "zsR");
      errorPage0._clear();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("Zc1<6&5J&LjGv;}");
      xmlEntityRef0.addInternalRenderHint("Zc1<6&5J&LjGv;}");
      Component component0 = xmlEntityRef0.addInternalRenderHint("Zc1<6&5J&LjGv;}");
      assertEquals("Zc1<6&5J&LjGv;}", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Hidden hidden0 = new Hidden(errorPage0, "WC{9@0pj}-hXhsOc", "<E}e3lD=0s~0)rg%");
      // Undeclared exception!
      try { 
        errorPage0.addFirst(hidden0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add a form element. No surrounding form found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("G");
      // Undeclared exception!
      try { 
        xmlEntityRef0.getComponents();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0._getTopLevelComponent(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0._getVisibleForm(true);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0._getVisibleForm(false);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("I-7QB>g4");
      Form form0 = new Form(errorPage0, "I-7QB>g4", actionExpression0);
      Table table0 = new Table(form0, "dfn");
      TableBlock tableBlock0 = table0.tfoot();
      FormElement formElement0 = tableBlock0.textarea("br");
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(formElement0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression((String) null);
      Form form0 = new Form(errorPage0, "org.apache.commons.io.filefilter.OrFileFilter", actionExpression0);
      // Undeclared exception!
      try { 
        form0.id("Label_1");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.id((String) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Radio radio0 = new Radio(errorPage0, ";)'Xa$ACx'H-t|>", "Block_2");
      // Undeclared exception!
      try { 
        radio0.id("param");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      List<CharSequence> list0 = errorPage0._getRenderHints();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.meta();
      List<CharSequence> list0 = component0._getRenderHints();
      assertEquals("Any_1", component0.getComponentId());
      assertNotNull(list0);
      assertEquals(1, list0.size());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "$('#");
      TableBlock tableBlock0 = table0.tfoot();
      assertTrue(tableBlock0._isGeneratedId());
      
      List<RenderableComponent> list0 = table0._getRenderableChildren();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals("$('#", table0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      List<RenderableComponent> list0 = errorPage0._getRenderableChildren();
      assertNotNull(list0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.sub();
      // Undeclared exception!
      try { 
        errorPage0.find("\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find component with id \" on the page.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0._getAction();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.form("~:EH7F_X!");
      Component component1 = component0.wrapSelf();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("~:EH7F_X!", component1.getComponentId());
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.dd();
      String[] stringArray0 = new String[2];
      Component component1 = component0.attributes(stringArray0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", component1.getComponentId());
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      FileInput fileInput0 = new FileInput(errorPage0, " (possible use of reserved keyword as identifier: ", "(o");
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        fileInput0.attributes(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attributes must be given in name, value pairs.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      FileInput fileInput0 = new FileInput(errorPage0, "org.apache.commons.io.filefilter.OrFileFilter", "org.apache.commons.io.filefilter.OrFileFilter");
      String[] stringArray0 = new String[0];
      Component component0 = fileInput0.attributes(stringArray0);
      assertEquals("org.apache.commons.io.filefilter.OrFileFilter", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("");
      Form form0 = new Form(errorPage0, ".qD&#LR", actionExpression0);
      FormElement formElement0 = form0.imageSubmit("", ".qD&#LR");
      assertTrue(formElement0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals(".qD&#LR", form0.getComponentId());
      assertFalse(actionExpression0.isSubmissible());
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      // Undeclared exception!
      try { 
        xmlEntityRef0.checkbox((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.em((Object) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.h1();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Component component0 = errorPage0.cite((Object) componentCreator0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "$('#");
      Component component0 = table0.h5((Object) null);
      assertEquals("$('#", table0.getComponentId());
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.dfn();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.sup();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.noscript();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.q();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.span();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.pre((Object) null);
      // Undeclared exception!
      try { 
        errorPage0.remove("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Component with id  does not exist.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.td();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Td component can be added only to a TableRow.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0);
      Component component0 = errorPage0.addFirst(block0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      // Undeclared exception!
      try { 
        errorPage0.select((String) null, dynamicSelectModel0, (CharSequence) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.form("org.mvel.conversion.BigDecimalCH$7", (ActionExpression) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Form", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("0b]=ihM-8<PS}Vnk<kx");
      // Undeclared exception!
      try { 
        xmlEntityRef0.body();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("0b]=ihM-8<PS}Vnk<kx");
      // Undeclared exception!
      try { 
        xmlEntityRef0.p((Object) "0b]=ihM-8<PS}Vnk<kx");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.a((Object) null);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Submit submit0 = new Submit((Component) null, "h6", "1z(wahz$)=m;\" gA$");
      // Undeclared exception!
      try { 
        submit0.label((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.caption();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Thead component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      StringWriter stringWriter0 = new StringWriter(2594);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Component component0 = errorPage0.param(stringBuffer0, stringBuffer0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Any_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("I-7QB>g4");
      Form form0 = new Form(errorPage0, "I-7QB>g4", actionExpression0);
      FormElement formElement0 = form0.reset("kfzDy+LUJ8");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("kfzDy+LUJ8", formElement0.getComponentId());
      assertFalse(actionExpression0.isSubmissible());
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.ol();
      component0._clear();
      assertEquals("Block_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.strong((Object) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.thead();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Thead component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableRow tableRow0 = new TableRow(errorPage0);
      errorPage0._setParent(tableRow0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.address((Object) null);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0._getActions();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.style();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Component component0 = errorPage0.u((Object) componentCreator0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.br();
      Component component1 = component0.getParent();
      assertEquals("wheel_ErrorPage", component1.getComponentId());
      assertEquals("Any_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.table();
      assertEquals("Table_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.textInput("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.th();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Th component can be added only to a TableRow.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.action("");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ElExpression elExpression0 = new ElExpression((String) null);
      DynamicSelectModel dynamicSelectModel0 = errorPage0.selectModel();
      // Undeclared exception!
      try { 
        errorPage0.radioGroup((String) null, dynamicSelectModel0, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.sub();
      component0.big((Object) errorPage0);
      // Undeclared exception!
      try { 
        errorPage0.find("\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find component with id \" on the page.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.wrapSelf();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.submit((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.link();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.cite();
      Component component1 = component0.renderHint((CharSequence) null);
      assertTrue(component1._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.big();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.iframe();
      assertEquals("Any_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.message("ICONST_3");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      NumberInput numberInput0 = new NumberInput(errorPage0, "H[<?L[-yI5", "H[<?L[-yI5");
      Table table0 = new Table(numberInput0, "H[<?L[-yI5");
      TableRow tableRow0 = table0.tr();
      Component component0 = tableRow0.strike();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
      assertFalse(table0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      errorPage0.h1((Object) componentCreator0);
      Component component0 = errorPage0.get("Label_1");
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.noframes();
      assertTrue(component0._isGeneratedId());
      assertEquals("Block_2", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.i();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.dd((Object) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0._applyFormat((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.tt();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.u();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.script();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.h2();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Object object0 = new Object();
      Component component0 = errorPage0.sub(object0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Object object0 = new Object();
      Text text0 = (Text)errorPage0.htmlText(object0);
      assertTrue(text0.isHtml());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(text0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.li((Object) null);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.bdo((CharSequence) null);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("Tfoot component can be added only to a Table.");
      // Undeclared exception!
      try { 
        xmlEntityRef0.code((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.numberInput("", (CharSequence) "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Object object0 = new Object();
      Component component0 = errorPage0.text(object0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ElExpression elExpression0 = new ElExpression("k");
      // Undeclared exception!
      try { 
        errorPage0.h4((Object) elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not evaluate expression k in class wheel.ErrorPage
         //
         verifyException("wheel.components.ElExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.abbr();
      Component component1 = component0.up((-431));
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component1._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.h4();
      Component component1 = component0.wrapSelf();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component1._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Object object0 = new Object();
      Component component0 = errorPage0.span(object0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.b();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.entity("");
      // Undeclared exception!
      try { 
        component0.buttonInput("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.passwordInput("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.encode("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.var((Object) null);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.ins();
      boolean boolean0 = errorPage0.equals(component0);
      assertTrue(component0._isGeneratedId());
      assertFalse(boolean0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Submit submit0 = new Submit(errorPage0, "8G6K=+|bbdlvnp2;:", "a`L=d0DhN%A:");
      // Undeclared exception!
      try { 
        submit0.object();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.colgroup();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Colgroup component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.acronym();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.tt((Object) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.radio((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("0b]=ihM-8<PS}Vnk<kx");
      Radio radio0 = new Radio(xmlEntityRef0, "tt", "0b]=ihM-8<PS}Vnk<kx");
      // Undeclared exception!
      try { 
        xmlEntityRef0.remove((Component) radio0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.ul();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Component component0 = errorPage0.abbr((Object) componentCreator0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("0b]=ihM-8<PS}Vnk<kx");
      // Undeclared exception!
      try { 
        xmlEntityRef0.div();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      TextArea textArea0 = new TextArea((Component) null, "", "em");
      // Undeclared exception!
      try { 
        textArea0.col();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Col component can be added only to a TableBlock.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.dateFormat("", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported type given for dateFormat. Supported types are: Date, Calendar, Long/long .
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.em();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.nbsp();
      Component component1 = component0.remove((Component) errorPage0);
      assertEquals("wheel_ErrorPage", component1.getComponentId());
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String string0 = errorPage0.getComponentName();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("ErrorPage", string0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.fieldset();
      assertEquals("Block_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.hr();
      StringBuffer stringBuffer0 = new StringBuffer(33);
      // Undeclared exception!
      try { 
        component0.base(stringBuffer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.strike((Object) null);
      assertTrue(component0._isGeneratedId());
      
      errorPage0._clear();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.q((Object) null);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.a();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.del();
      component0.date();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.li();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.s((Object) null);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("S=qV^BI]I'!9Oc.3f");
      // Undeclared exception!
      try { 
        xmlEntityRef0.address();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.imageSubmit((String) null, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Link link0 = new Link(errorPage0, errorPage0);
      // Undeclared exception!
      try { 
        link0.tr();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tr component can be added only to a TableBlock.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.form("eZ]3<} :.GuS<");
      FormElement formElement0 = component0.dateInput("eZ]3<} :.GuS<", "_");
      assertEquals("eZ]3<} :.GuS<", formElement0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.legend((Object) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.dl();
      errorPage0.small((Object) component0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DynamicSelectModel dynamicSelectModel0 = errorPage0.selectModel();
      Component component0 = errorPage0.samp((Object) dynamicSelectModel0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.numberInput("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ElExpression elExpression0 = new ElExpression("@RMkrmja:V],e|`4?");
      // Undeclared exception!
      try { 
        errorPage0.fileInput((String) null, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Object object0 = new Object();
      Component component0 = errorPage0.i(object0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.fileInput("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0._setComponentId("Zv-{-q|Vu!");
      assertTrue(errorPage0.isPage());
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = (Block)errorPage0.pre();
      block0.getAttributes();
      assertTrue(block0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.button();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.checkbox("zj_uNNUr`D|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.tbody();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tbody component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.blockquote();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.strong();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.ins((Object) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.el((String) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.p();
      assertEquals("Block_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.h3();
      Component component1 = component0.area((String[]) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Any_1", component1.getComponentId());
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.h5();
      Component component1 = component0.h6();
      assertTrue(component1._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.s();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.requestFocus();
      assertEquals("wheel_ErrorPage", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.dateInput("", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.var();
      assertTrue(component0._isGeneratedId());
      
      Table table0 = new Table(errorPage0, "}");
      assertFalse(table0._isGeneratedId());
      
      table0.id("}");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("0b]=ihM$8|PS}Vnk<kx");
      // Undeclared exception!
      try { 
        xmlEntityRef0.sup((Object) "E!7#%qxz($");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.small();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.img("", "midv:_({pb ");
      // Undeclared exception!
      try { 
        component0.frame("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("0b]=ihM-8<PS}Vnk<kx");
      // Undeclared exception!
      try { 
        xmlEntityRef0.kbd((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.samp();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.label();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.map((String) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.dfn((Object) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.actionBinding("");
      assertEquals("wheel_ErrorPage", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.tfoot();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tfoot component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      FileInput fileInput0 = new FileInput(errorPage0, "Can't add components to a component that is not an instance of IContainer.", "div");
      // Undeclared exception!
      try { 
        fileInput0.h2((Object) componentCreator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.clasS("");
      assertEquals("wheel_ErrorPage", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      // Undeclared exception!
      try { 
        errorPage0.multiSelect("", dynamicSelectModel0, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.legend();
      assertTrue(component0._isGeneratedId());
      
      Map<String, Component> map0 = errorPage0.getComponents();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.kbd();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0._getXhtmlAttributes();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.dt((Object) null);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }
}
