/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 00:53:51 GMT 2018
 */

package com.pmdesigns.jvc.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.pmdesigns.jvc.tools.JVCParserTokenManager;
import com.pmdesigns.jvc.tools.SimpleCharStream;
import com.pmdesigns.jvc.tools.Token;
import java.io.BufferedReader;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PushbackInputStream;
import java.io.StringReader;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JVCParserTokenManager_ESTest extends JVCParserTokenManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(1796);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0);
      simpleCharStream0.inBuf = 1796;
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      MockPrintStream mockPrintStream0 = new MockPrintStream("\u0000");
      jVCParserTokenManager0.jjFillToken();
      jVCParserTokenManager0.SwitchTo(0);
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.curLexState = 16;
      jVCParserTokenManager1.SwitchTo(0);
      jVCParserTokenManager1.setDebugStream(jVCParserTokenManager0.debugStream);
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(16, token0.kind);
      assertEquals("\u0000", token0.toString());
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0);
      simpleCharStream0.inBuf = 1772;
      simpleCharStream0.GetImage();
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      MockPrintStream mockPrintStream0 = new MockPrintStream("\u0000");
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.SwitchTo(0);
      jVCParserTokenManager0.SwitchTo(0);
      MockPrintStream mockPrintStream1 = new MockPrintStream("\u0000");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      simpleCharStream0.bufcolumn = jVCParserTokenManager0.jjnewLexState;
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.SwitchTo(0);
      jVCParserTokenManager0.SwitchTo(2);
      jVCParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.SwitchTo((-1734));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1734. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0);
      simpleCharStream0.inBuf = 64;
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.ReInit(simpleCharStream0, (-2147483647));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -2147483647. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0);
      simpleCharStream0.inBuf = 1772;
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      MockPrintStream mockPrintStream0 = new MockPrintStream("\u0000");
      jVCParserTokenManager0.jjFillToken();
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager1.SwitchTo(0);
      MockPrintStream mockPrintStream1 = new MockPrintStream("\u0000");
      mockPrintStream1.println("");
      jVCParserTokenManager0.setDebugStream(mockPrintStream1);
      jVCParserTokenManager0.ReInit(simpleCharStream0, 0);
      jVCParserTokenManager1.SwitchTo(0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jVCParserTokenManager0.SwitchTo(0);
      jVCParserTokenManager1.getNextToken();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("\u0000");
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(mockFileInputStream0, 0, 16);
      jVCParserTokenManager0.ReInit(simpleCharStream1);
      jVCParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.SwitchTo(16);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 16. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.inBuf = 1772;
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      String string0 = simpleCharStream0.GetImage();
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(string0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(jVCParserTokenManager0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals("\u0000", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(16, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertNotNull(token0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      simpleCharStream0.bufcolumn = jVCParserTokenManager0.jjnewLexState;
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getBeginColumn());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals("\u0000", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(0, token1.beginLine);
      assertEquals(4, token1.endColumn);
      assertEquals(0, token1.endLine);
      assertEquals(16, token1.kind);
      assertEquals(4, token1.beginColumn);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      
      jVCParserTokenManager0.SwitchTo(1);
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getBeginColumn());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      
      Token token2 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals("\u0000", token2.toString());
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(0, token2.endLine);
      assertEquals(3, token2.endColumn);
      assertEquals(0, token2.beginLine);
      assertEquals(3, token2.beginColumn);
      assertEquals(16, token2.kind);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
      
      jVCParserTokenManager0.SwitchTo(4);
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(3, simpleCharStream0.getColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      
      Token token3 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals("\u0000", token3.toString());
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(0, token3.endLine);
      assertEquals(2, token3.endColumn);
      assertEquals(2, token3.beginColumn);
      assertEquals(0, token3.beginLine);
      assertEquals(16, token3.kind);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotNull(token3);
      
      BufferedReader bufferedReader0 = null;
      try {
        bufferedReader0 = new BufferedReader(pipedReader0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(1796);
      assertNotNull(pipedReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.inBuf = 1796;
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(jVCParserTokenManager0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '(';
      charArray0[1] = '{';
      charArray0[2] = 'u';
      charArray0[3] = 'X';
      charArray0[4] = '=';
      charArray0[5] = 'D';
      charArray0[6] = 'C';
      simpleCharStream0.buffer = charArray0;
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals("(", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(0, token0.beginColumn);
      assertEquals(16, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertNotNull(token0);
      
      Token token1 = jVCParserTokenManager0.jjFillToken();
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals("(", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(16, token1.kind);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.endLine);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      
      jVCParserTokenManager0.SwitchTo(0);
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      
      jVCParserTokenManager0.curLexState = 16;
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      
      jVCParserTokenManager0.SwitchTo(0);
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      
      jVCParserTokenManager0.setDebugStream(jVCParserTokenManager0.debugStream);
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      
      Token token2 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals("{", token2.toString());
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.beginLine);
      assertEquals(16, token2.kind);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.endColumn);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.inBuf = 1772;
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals("\u0000", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(16, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertNotNull(token0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("\u0000");
      assertNotNull(mockPrintStream0);
      
      Token token1 = jVCParserTokenManager0.jjFillToken();
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals("\u0000", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, token1.endLine);
      assertEquals(16, token1.kind);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager1);
      
      jVCParserTokenManager1.SwitchTo(0);
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      
      mockPrintStream0.println("\b");
      mockPrintStream0.println((double) 1772);
      jVCParserTokenManager0.setDebugStream(mockPrintStream0);
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      
      Token token2 = jVCParserTokenManager1.jjFillToken();
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals("", token2.toString());
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.endColumn);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.kind);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
      
      jVCParserTokenManager0.ReInit(simpleCharStream0, 0);
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      
      JVCParserTokenManager jVCParserTokenManager2 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager0));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager1));
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager2);
      
      Token token3 = jVCParserTokenManager1.getNextToken();
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals("\u0000", token3.toString());
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, token3.endLine);
      assertEquals(0, token3.beginColumn);
      assertEquals(0, token3.beginLine);
      assertEquals(0, token3.endColumn);
      assertEquals(16, token3.kind);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager2);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotNull(token3);
      
      Token token4 = jVCParserTokenManager2.getNextToken();
      assertEquals("\u0000", token4.toString());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token0));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager0));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager1));
      assertEquals(0, token4.beginColumn);
      assertEquals(0, token4.endColumn);
      assertEquals(0, token4.endLine);
      assertEquals(0, token4.beginLine);
      assertEquals(16, token4.kind);
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotSame(token4, token1);
      assertNotSame(token4, token2);
      assertNotSame(token4, token3);
      assertNotSame(token4, token0);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager0);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager1);
      assertNotNull(token4);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("\u0000");
      assertEquals(9, mockFileInputStream0.available());
      assertNotNull(mockFileInputStream0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(mockFileInputStream0, 0, 16);
      assertEquals(9, mockFileInputStream0.available());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotNull(simpleCharStream1);
      
      jVCParserTokenManager0.ReInit(simpleCharStream1);
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(9, mockFileInputStream0.available());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager2));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager2);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      
      Token token5 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals("\b", token5.toString());
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager2));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token2));
      assertFalse(token5.equals((Object)token3));
      assertFalse(token5.equals((Object)token4));
      assertFalse(token5.equals((Object)token1));
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, token5.endLine);
      assertEquals(0, token5.beginLine);
      assertEquals(16, token5.kind);
      assertEquals(16, token5.endColumn);
      assertEquals(16, token5.beginColumn);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager2);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertNotSame(token5, token0);
      assertNotSame(token5, token2);
      assertNotSame(token5, token3);
      assertNotSame(token5, token4);
      assertNotSame(token5, token1);
      assertNotNull(token5);
      
      jVCParserTokenManager1.ReInit(simpleCharStream1);
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals((-1), mockFileInputStream0.available());
      assertEquals(0, simpleCharStream1.getLine());
      assertEquals(16, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getEndLine());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(16, simpleCharStream1.getColumn());
      assertEquals(16, simpleCharStream1.getEndColumn());
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager2));
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream1.bufpos);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager2);
      
      Token token6 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals("\n", token6.toString());
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager2));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertFalse(token6.equals((Object)token2));
      assertFalse(token6.equals((Object)token3));
      assertFalse(token6.equals((Object)token4));
      assertFalse(token6.equals((Object)token5));
      assertFalse(token6.equals((Object)token1));
      assertFalse(token6.equals((Object)token0));
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(6, token6.kind);
      assertEquals(0, token6.beginLine);
      assertEquals(17, token6.endColumn);
      assertEquals(17, token6.beginColumn);
      assertEquals(0, token6.endLine);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager2);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertNotSame(token6, token2);
      assertNotSame(token6, token3);
      assertNotSame(token6, token4);
      assertNotSame(token6, token5);
      assertNotSame(token6, token1);
      assertNotSame(token6, token0);
      assertNotNull(token6);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)10;
      try { 
        pipedInputStream0.read(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.inBuf = 1772;
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals("\u0000", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertEquals(16, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertNotNull(token0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("\u0000");
      assertNotNull(mockPrintStream0);
      
      Token token1 = jVCParserTokenManager0.jjFillToken();
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals("\u0000", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, token1.endLine);
      assertEquals(16, token1.kind);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager1);
      
      jVCParserTokenManager1.SwitchTo(0);
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      
      MockPrintStream mockPrintStream1 = new MockPrintStream("\u0000");
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertNotNull(mockPrintStream1);
      
      mockPrintStream1.println("");
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertNotSame(mockPrintStream1, mockPrintStream0);
      
      jVCParserTokenManager0.setDebugStream(mockPrintStream1);
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertNotSame(mockPrintStream1, mockPrintStream0);
      
      jVCParserTokenManager0.ReInit(simpleCharStream0, 0);
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      jVCParserTokenManager0.SwitchTo(0);
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      
      Token token2 = jVCParserTokenManager1.getNextToken();
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals("\u0000", token2.toString());
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, token2.endLine);
      assertEquals(16, token2.kind);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.endColumn);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotNull(token2);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("\u0000");
      assertEquals(1, mockFileInputStream0.available());
      assertNotNull(mockFileInputStream0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(mockFileInputStream0, 0, 16);
      assertEquals(1, mockFileInputStream0.available());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotNull(simpleCharStream1);
      
      jVCParserTokenManager0.ReInit(simpleCharStream1);
      assertEquals(1, mockFileInputStream0.available());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      
      jVCParserTokenManager0.SwitchTo(0);
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      
      Token token3 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals("\n", token3.toString());
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(6, token3.kind);
      assertEquals(0, token3.beginLine);
      assertEquals(16, token3.beginColumn);
      assertEquals(16, token3.endColumn);
      assertEquals(0, token3.endLine);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotNull(token3);
      
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((PipedOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.inBuf = 1772;
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(jVCParserTokenManager0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals("\u0000", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(0, token0.endLine);
      assertEquals(16, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endColumn);
      assertNotNull(token0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("\u0000");
      assertNotNull(mockPrintStream0);
      
      Token token1 = jVCParserTokenManager0.jjFillToken();
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals("\u0000", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(0, token1.beginLine);
      assertEquals(16, token1.kind);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertNotNull(jVCParserTokenManager1);
      
      jVCParserTokenManager1.SwitchTo(0);
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/13_javaviewcontrol");
      mockPrintStream0.write((-3419));
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, "O}");
      assertFalse(boolean0);
      
      jVCParserTokenManager0.setDebugStream(mockPrintStream0);
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      
      Token token2 = jVCParserTokenManager1.jjFillToken();
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals("", token2.toString());
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.endColumn);
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.kind);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
      
      jVCParserTokenManager0.ReInit(simpleCharStream0, 0);
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      
      JVCParserTokenManager jVCParserTokenManager2 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager1));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager0));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertNotNull(jVCParserTokenManager2);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Token token3 = jVCParserTokenManager0.getNextToken();
      assertEquals("\u0000", token3.toString());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager2));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertEquals(0, token3.endColumn);
      assertEquals(0, token3.endLine);
      assertEquals(16, token3.kind);
      assertEquals(0, token3.beginLine);
      assertEquals(0, token3.beginColumn);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager2);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertNotNull(token3);
      
      jVCParserTokenManager2.SwitchTo(0);
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager1));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager0));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager1);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager0);
      
      jVCParserTokenManager0.SwitchTo(0);
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager2));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager2);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      
      Token token4 = jVCParserTokenManager2.getNextToken();
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals("\u0000", token4.toString());
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token0));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager1));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager0));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(16, token4.kind);
      assertEquals(0, token4.beginColumn);
      assertEquals(0, token4.endLine);
      assertEquals(0, token4.beginLine);
      assertEquals(0, token4.endColumn);
      assertNotSame(token4, token1);
      assertNotSame(token4, token2);
      assertNotSame(token4, token3);
      assertNotSame(token4, token0);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager1);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager0);
      assertNotNull(token4);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("\u0000");
      assertEquals(1, mockFileInputStream0.available());
      assertNotNull(mockFileInputStream0);
      
      Token token5 = jVCParserTokenManager1.getNextToken();
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals("\u0000", token5.toString());
      assertFalse(token5.equals((Object)token4));
      assertFalse(token5.equals((Object)token3));
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token1));
      assertFalse(token5.equals((Object)token2));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager2));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(0, token5.endColumn);
      assertEquals(0, token5.beginColumn);
      assertEquals(16, token5.kind);
      assertEquals(0, token5.endLine);
      assertEquals(0, token5.beginLine);
      assertNotSame(token5, token4);
      assertNotSame(token5, token3);
      assertNotSame(token5, token0);
      assertNotSame(token5, token1);
      assertNotSame(token5, token2);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager2);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotNull(token5);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(mockFileInputStream0, 0, 16);
      assertEquals(1, mockFileInputStream0.available());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotNull(simpleCharStream1);
      
      jVCParserTokenManager0.ReInit(simpleCharStream1);
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(1, mockFileInputStream0.available());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager2));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager2);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      
      jVCParserTokenManager0.SwitchTo(0);
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager2));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager2);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      
      Token token6 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals("\uFFFD", token6.toString());
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager2));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertFalse(token6.equals((Object)token3));
      assertFalse(token6.equals((Object)token4));
      assertFalse(token6.equals((Object)token0));
      assertFalse(token6.equals((Object)token5));
      assertFalse(token6.equals((Object)token1));
      assertFalse(token6.equals((Object)token2));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(0, token6.endLine);
      assertEquals(16, token6.kind);
      assertEquals(0, token6.beginLine);
      assertEquals(16, token6.beginColumn);
      assertEquals(16, token6.endColumn);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager2);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertNotSame(token6, token3);
      assertNotSame(token6, token4);
      assertNotSame(token6, token0);
      assertNotSame(token6, token5);
      assertNotSame(token6, token1);
      assertNotSame(token6, token2);
      assertNotNull(token6);
      
      SimpleCharStream simpleCharStream2 = new SimpleCharStream(pipedReader0);
      assertEquals(0, simpleCharStream2.getBeginLine());
      assertEquals(0, simpleCharStream2.getBeginColumn());
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream0));
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream1));
      assertEquals((-1), simpleCharStream2.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream2);
      
      PipedOutputStream pipedOutputStream0 = null;
      try {
        pipedOutputStream0 = new PipedOutputStream((PipedInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.inBuf = 1772;
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals("\u0000", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(16, token0.kind);
      assertNotNull(token0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("\u0000");
      assertNotNull(mockPrintStream0);
      
      Token token1 = jVCParserTokenManager0.jjFillToken();
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals("\u0000", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.endLine);
      assertEquals(16, token1.kind);
      assertEquals(0, token1.beginLine);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager1);
      
      jVCParserTokenManager1.SwitchTo(0);
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      
      MockPrintStream mockPrintStream1 = new MockPrintStream("\u0000");
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertNotNull(mockPrintStream1);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/13_javaviewcontrol");
      mockPrintStream1.write((-3419));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertNotSame(mockPrintStream1, mockPrintStream0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, "\u0000");
      assertFalse(boolean0);
      
      mockPrintStream1.println("");
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertNotSame(mockPrintStream1, mockPrintStream0);
      
      Token token2 = jVCParserTokenManager1.jjFillToken();
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals("", token2.toString());
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, token2.endColumn);
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.beginColumn);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
      
      jVCParserTokenManager0.ReInit(simpleCharStream0, 0);
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      
      JVCParserTokenManager jVCParserTokenManager2 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager1));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager0));
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager2);
      
      Token token3 = jVCParserTokenManager1.getNextToken();
      assertEquals("\u0000", token3.toString());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager2));
      assertEquals(16, token3.kind);
      assertEquals(0, token3.beginLine);
      assertEquals(0, token3.endLine);
      assertEquals(0, token3.beginColumn);
      assertEquals(0, token3.endColumn);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager2);
      assertNotNull(token3);
      
      jVCParserTokenManager2.SwitchTo(1);
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager1));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager0));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager1);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager0);
      
      jVCParserTokenManager0.SwitchTo(0);
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager2));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager2);
      
      Token token4 = jVCParserTokenManager1.getNextToken();
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals("\u0000", token4.toString());
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager2));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(0, token4.endColumn);
      assertEquals(0, token4.endLine);
      assertEquals(16, token4.kind);
      assertEquals(0, token4.beginLine);
      assertEquals(0, token4.beginColumn);
      assertNotSame(token4, token1);
      assertNotSame(token4, token3);
      assertNotSame(token4, token2);
      assertNotSame(token4, token0);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager2);
      assertNotNull(token4);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("\u0000");
      assertEquals(2, mockFileInputStream0.available());
      assertNotNull(mockFileInputStream0);
      
      Token token5 = jVCParserTokenManager1.getNextToken();
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals("\u0000", token5.toString());
      assertFalse(token5.equals((Object)token2));
      assertFalse(token5.equals((Object)token4));
      assertFalse(token5.equals((Object)token3));
      assertFalse(token5.equals((Object)token1));
      assertFalse(token5.equals((Object)token0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager2));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(0, token5.endLine);
      assertEquals(0, token5.endColumn);
      assertEquals(0, token5.beginColumn);
      assertEquals(16, token5.kind);
      assertEquals(0, token5.beginLine);
      assertNotSame(token5, token2);
      assertNotSame(token5, token4);
      assertNotSame(token5, token3);
      assertNotSame(token5, token1);
      assertNotSame(token5, token0);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager2);
      assertNotNull(token5);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(mockFileInputStream0, 0, 16);
      assertEquals(2, mockFileInputStream0.available());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotNull(simpleCharStream1);
      
      jVCParserTokenManager0.ReInit(simpleCharStream1);
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(2, mockFileInputStream0.available());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager2));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager2);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      
      Token token6 = jVCParserTokenManager1.getNextToken();
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals("\u0000", token6.toString());
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager2));
      assertFalse(token6.equals((Object)token4));
      assertFalse(token6.equals((Object)token2));
      assertFalse(token6.equals((Object)token3));
      assertFalse(token6.equals((Object)token0));
      assertFalse(token6.equals((Object)token1));
      assertFalse(token6.equals((Object)token5));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, simpleCharStream0.bufpos);
      assertEquals(0, token6.endLine);
      assertEquals(0, token6.beginLine);
      assertEquals(16, token6.kind);
      assertEquals(0, token6.endColumn);
      assertEquals(0, token6.beginColumn);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager2);
      assertNotSame(token6, token4);
      assertNotSame(token6, token2);
      assertNotSame(token6, token3);
      assertNotSame(token6, token0);
      assertNotSame(token6, token1);
      assertNotSame(token6, token5);
      assertNotNull(token6);
      
      Token token7 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals("\uFFFD", token7.toString());
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager2));
      assertFalse(token7.equals((Object)token3));
      assertFalse(token7.equals((Object)token1));
      assertFalse(token7.equals((Object)token0));
      assertFalse(token7.equals((Object)token4));
      assertFalse(token7.equals((Object)token2));
      assertFalse(token7.equals((Object)token6));
      assertFalse(token7.equals((Object)token5));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, simpleCharStream0.bufpos);
      assertEquals(16, token7.endColumn);
      assertEquals(0, token7.endLine);
      assertEquals(0, token7.beginLine);
      assertEquals(16, token7.kind);
      assertEquals(16, token7.beginColumn);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager2);
      assertNotSame(token7, token3);
      assertNotSame(token7, token1);
      assertNotSame(token7, token0);
      assertNotSame(token7, token4);
      assertNotSame(token7, token2);
      assertNotSame(token7, token6);
      assertNotSame(token7, token5);
      assertNotNull(token7);
      
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.SwitchTo(16);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 16. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("IN_EXPR2");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager0);
      
      jVCParserTokenManager0.ReInit(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals("I", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(16, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
      
      jVCParserTokenManager0.SwitchTo(1);
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals("N", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(2, token1.endColumn);
      assertEquals(16, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      
      Token token2 = jVCParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals("_", token2.toString());
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(3, token2.beginColumn);
      assertEquals(3, token2.endColumn);
      assertEquals(16, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(1, token2.endLine);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotNull(token2);
      
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.SwitchTo((-4333));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -4333. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("IN_EXPR2");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(jVCParserTokenManager0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals("I", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(16, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
      
      jVCParserTokenManager0.ReInit(simpleCharStream0);
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals("N", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(16, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.endColumn);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(jVCParserTokenManager0.debugStream, false);
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertNotNull(mockPrintStream0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'k';
      mockPrintStream0.print(charArray0);
      assertArrayEquals(new char[] {'k'}, charArray0);
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      
      Token token2 = jVCParserTokenManager0.getNextToken();
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("_", token2.toString());
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(1, token2.endLine);
      assertEquals(3, token2.beginColumn);
      assertEquals(16, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(3, token2.endColumn);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
      
      jVCParserTokenManager0.ReInit(simpleCharStream0, 4);
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      
      Token token3 = jVCParserTokenManager0.getNextToken();
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(4, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals("E", token3.toString());
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(1, token3.endLine);
      assertEquals(16, token3.kind);
      assertEquals(1, token3.beginLine);
      assertEquals(4, token3.endColumn);
      assertEquals(4, token3.beginColumn);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotNull(token3);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0, 1, (-450), 1);
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream1);
      
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.ReInit(simpleCharStream1, (-369));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -369. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("IN_EXPR2");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(jVCParserTokenManager0);
      
      stringReader0.reset();
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals("I", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(16, token0.kind);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      
      jVCParserTokenManager0.ReInit(simpleCharStream0);
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals("N", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(16, token1.kind);
      assertEquals(1, token1.beginLine);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      
      Token token2 = jVCParserTokenManager0.getNextToken();
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals("_", token2.toString());
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token2.endLine);
      assertEquals(3, token2.endColumn);
      assertEquals(16, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(3, token2.beginColumn);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotNull(token2);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(3, simpleCharStream0.getColumn());
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager1);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(jVCParserTokenManager1.debugStream, false);
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(3, simpleCharStream0.getColumn());
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(mockPrintStream0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'k';
      mockPrintStream0.print(charArray0);
      assertArrayEquals(new char[] {'k'}, charArray0);
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(3, simpleCharStream0.getColumn());
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      
      Token token3 = jVCParserTokenManager0.jjFillToken();
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals("_", token3.toString());
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, token3.beginColumn);
      assertEquals(3, token3.endColumn);
      assertEquals(1, token3.endLine);
      assertEquals(16, token3.kind);
      assertEquals(1, token3.beginLine);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotNull(token3);
      
      Token token4 = jVCParserTokenManager1.getNextToken();
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getBeginColumn());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals("E", token4.toString());
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token0));
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token4.endLine);
      assertEquals(4, token4.beginColumn);
      assertEquals(16, token4.kind);
      assertEquals(1, token4.beginLine);
      assertEquals(4, token4.endColumn);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(token4, token2);
      assertNotSame(token4, token1);
      assertNotSame(token4, token3);
      assertNotSame(token4, token0);
      assertNotNull(token4);
      
      JVCParserTokenManager jVCParserTokenManager2 = new JVCParserTokenManager(simpleCharStream0, 3);
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getBeginColumn());
      assertEquals(4, simpleCharStream0.getColumn());
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager1));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager0));
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager2);
      
      Token token5 = jVCParserTokenManager2.getNextToken();
      assertEquals("X", token5.toString());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(5, simpleCharStream0.getBeginColumn());
      assertEquals(5, simpleCharStream0.getColumn());
      assertEquals(5, simpleCharStream0.getEndColumn());
      assertFalse(token5.equals((Object)token2));
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token4));
      assertFalse(token5.equals((Object)token1));
      assertFalse(token5.equals((Object)token3));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager1));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager0));
      assertEquals(5, token5.endColumn);
      assertEquals(1, token5.endLine);
      assertEquals(5, token5.beginColumn);
      assertEquals(16, token5.kind);
      assertEquals(1, token5.beginLine);
      assertEquals(4, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotSame(token5, token2);
      assertNotSame(token5, token0);
      assertNotSame(token5, token4);
      assertNotSame(token5, token1);
      assertNotSame(token5, token3);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager1);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager0);
      assertNotNull(token5);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(16);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pushbackInputStream0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(pushbackInputStream0, 16, 16);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotNull(simpleCharStream1);
      
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.SwitchTo(92);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 92. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("IN_EXPR2");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager0);
      
      stringReader0.reset();
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("I", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(16, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
      
      jVCParserTokenManager0.ReInit(simpleCharStream0);
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("N", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, token1.beginColumn);
      assertEquals(16, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager1);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(jVCParserTokenManager1.debugStream, false);
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(mockPrintStream0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'f';
      mockPrintStream0.print(charArray0);
      assertArrayEquals(new char[] {'f'}, charArray0);
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      
      Token token2 = jVCParserTokenManager1.getNextToken();
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("_", token2.toString());
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token2.endLine);
      assertEquals(3, token2.beginColumn);
      assertEquals(16, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(3, token2.endColumn);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
      
      jVCParserTokenManager1.ReInit(simpleCharStream0, 2);
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      
      Token token3 = jVCParserTokenManager1.getNextToken();
      assertEquals(4, simpleCharStream0.getBeginColumn());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("E", token3.toString());
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, token3.endColumn);
      assertEquals(16, token3.kind);
      assertEquals(1, token3.beginLine);
      assertEquals(1, token3.endLine);
      assertEquals(4, token3.beginColumn);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotNull(token3);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JVCParserTokenManager jVCParserTokenManager2 = null;
      try {
        jVCParserTokenManager2 = new JVCParserTokenManager(simpleCharStream0, (-5171));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -5171. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }
}
