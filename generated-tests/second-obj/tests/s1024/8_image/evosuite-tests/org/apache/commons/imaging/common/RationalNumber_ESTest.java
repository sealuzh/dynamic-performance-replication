/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 10:04:34 GMT 2018
 */

package org.apache.commons.imaging.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.imaging.common.RationalNumber;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RationalNumber_ESTest extends RationalNumber_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1.0);
      int int0 = rationalNumber0.intValue();
      assertEquals(1, int0);
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0.0);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(0.0, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = (-1732);
      RationalNumber.factoryMethod((-1732), (-2147483632L));
      RationalNumber.factoryMethod(536870908, 536870908);
      RationalNumber.valueOf((-113.5));
      // Undeclared exception!
      try { 
        RationalNumber.factoryMethod(0L, 0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(5.688116289093159E-8);
      float float0 = rationalNumber0.floatValue();
      assertEquals(5.6881166E-8F, float0, 0.01F);
      
      long long0 = rationalNumber0.longValue();
      assertEquals(17580513, rationalNumber0.divisor);
      assertEquals(0L, long0);
      assertEquals(5.68811615451722E-8, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber(1073741824, 1073741824);
      RationalNumber rationalNumber1 = RationalNumber.valueOf(116.2);
      assertEquals(581, rationalNumber1.numerator);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber(0, 0);
      RationalNumber.valueOf((-1.0));
      RationalNumber rationalNumber1 = RationalNumber.valueOf((-1578.00759060045));
      rationalNumber1.toString();
      RationalNumber rationalNumber2 = rationalNumber0.negate();
      rationalNumber0.doubleValue();
      rationalNumber2.toString();
      // Undeclared exception!
      try { 
        rationalNumber2.toDisplayString();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(1609L, 2147483647L);
      assertEquals(Integer.MAX_VALUE, rationalNumber0.divisor);
      assertEquals(7.492490116270487E-7, rationalNumber0.doubleValue(), 0.01);
      
      RationalNumber rationalNumber1 = RationalNumber.valueOf(2147483647L);
      assertEquals(2.147483647E9, rationalNumber1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-2.147483647E9));
      long long0 = rationalNumber0.longValue();
      assertEquals((-2147483647L), long0);
      
      double double0 = rationalNumber0.doubleValue();
      assertEquals((-2.147483647E9), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1.4143552107270807E-8);
      assertEquals(70703596, rationalNumber0.divisor);
      assertEquals(1.4143552189339846E-8, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(2147483647L, (-2147483663L));
      rationalNumber0.toString();
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(2147483647L, 0L);
      // Undeclared exception!
      try { 
        rationalNumber1.longValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2147483628L), 2147483676L);
      assertEquals(0L, rationalNumber0.longValue());
      
      RationalNumber rationalNumber1 = RationalNumber.valueOf(5.035461072111502E-6);
      rationalNumber1.toString();
      rationalNumber1.longValue();
      rationalNumber1.floatValue();
      RationalNumber rationalNumber2 = RationalNumber.factoryMethod(2147483676L, (-4453L));
      RationalNumber rationalNumber3 = rationalNumber1.negate();
      assertEquals((-5.0354497E-6F), rationalNumber3.floatValue(), 0.01F);
      
      String string0 = rationalNumber1.toString();
      assertEquals("1/198592 (0)", string0);
      
      RationalNumber rationalNumber4 = new RationalNumber(198592, 178956969);
      float float0 = rationalNumber2.floatValue();
      assertEquals(2227, rationalNumber2.divisor);
      assertEquals((-482147.22F), float0, 0.01F);
      
      float float1 = rationalNumber4.floatValue();
      assertEquals(0.0011097192867632888, rationalNumber4.doubleValue(), 0.01);
      assertEquals(0.0011097193F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2147483696L), 2147483649L);
      RationalNumber rationalNumber1 = RationalNumber.valueOf(5.035461072111502E-6);
      String string0 = rationalNumber1.toString();
      assertEquals("1/198592 (0)", string0);
      
      rationalNumber1.longValue();
      float float0 = rationalNumber1.floatValue();
      assertEquals(5.0354497E-6F, float0, 0.01F);
      
      RationalNumber rationalNumber2 = RationalNumber.factoryMethod(2147483649L, (-4453L));
      assertEquals((-482147.22F), rationalNumber2.floatValue(), 0.01F);
      assertEquals(2227, rationalNumber2.divisor);
      
      RationalNumber rationalNumber3 = rationalNumber1.negate();
      rationalNumber3.negate();
      RationalNumber.factoryMethod(1, 1);
      RationalNumber rationalNumber4 = rationalNumber0.negate();
      assertEquals(1.0000000223517418, rationalNumber4.doubleValue(), 0.01);
      assertEquals((-134217728), rationalNumber4.divisor);
      
      RationalNumber rationalNumber5 = new RationalNumber((-134217731), 198592);
      assertEquals((-675L), rationalNumber5.longValue());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber((-1732), (-1732));
      rationalNumber0.longValue();
      String string0 = rationalNumber0.toString();
      assertEquals("1", string0);
      
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(2303L, (-478L));
      RationalNumber rationalNumber2 = RationalNumber.factoryMethod((-2147483666L), 1L);
      RationalNumber rationalNumber3 = RationalNumber.valueOf((-1732));
      String string1 = rationalNumber1.toDisplayString();
      assertEquals("-4.818", string1);
      
      rationalNumber0.doubleValue();
      rationalNumber1.negate();
      String string2 = rationalNumber1.toString();
      assertEquals("-2303/478 (-4.818)", string2);
      
      RationalNumber rationalNumber4 = rationalNumber0.negate();
      RationalNumber.valueOf(478);
      String string3 = rationalNumber3.toDisplayString();
      assertEquals("-1732", string3);
      
      RationalNumber rationalNumber5 = rationalNumber4.negate();
      rationalNumber5.negate();
      rationalNumber0.doubleValue();
      RationalNumber rationalNumber6 = RationalNumber.factoryMethod(0L, 1);
      rationalNumber6.toDisplayString();
      RationalNumber rationalNumber7 = rationalNumber6.negate();
      rationalNumber7.toString();
      rationalNumber2.doubleValue();
      assertEquals(2.14748363E9, rationalNumber2.doubleValue(), 0.01);
      
      int int0 = rationalNumber5.intValue();
      assertEquals(1, int0);
      assertEquals((-1L), rationalNumber4.longValue());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(5.035461072111502E-6);
      rationalNumber0.toString();
      rationalNumber0.longValue();
      rationalNumber0.floatValue();
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("0", string0);
      
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      RationalNumber rationalNumber2 = RationalNumber.factoryMethod(1, 2147483649L);
      rationalNumber1.negate();
      assertEquals((-5.0354497E-6F), rationalNumber1.floatValue(), 0.01F);
      
      RationalNumber rationalNumber3 = RationalNumber.factoryMethod(1544L, (-2173L));
      assertEquals(1544, rationalNumber3.numerator);
      
      RationalNumber rationalNumber4 = RationalNumber.factoryMethod((-3838L), 2097L);
      assertEquals((-1L), rationalNumber4.longValue());
      
      String string1 = rationalNumber2.toString();
      assertEquals("1/-2147483647 (-0)", string1);
  }
}
