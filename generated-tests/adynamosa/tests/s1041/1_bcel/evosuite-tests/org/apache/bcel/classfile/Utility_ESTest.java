/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 24 19:17:29 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.net.URISyntaxException;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Set;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.Code;
import org.apache.bcel.classfile.CodeException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.Field;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ConstantInteger constantInteger0 = new ConstantInteger(176);
      assertNotNull(constantInteger0);
      assertEquals(176, constantInteger0.getBytes());
      assertEquals((byte)3, constantInteger0.getTag());
      
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(176, 176);
      assertNotNull(constantMethodHandle0);
      assertEquals(176, constantMethodHandle0.getReferenceKind());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals(176, constantMethodHandle0.getReferenceIndex());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "short");
      assertFalse(boolean0);
      
      BCELComparator bCELComparator0 = Constant.getComparator();
      assertNotNull(bCELComparator0);
      
      Constant.setComparator(bCELComparator0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte) (-97);
      byteArray0[3] = (byte)94;
      byteArray0[4] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-97), (byte) (-97), (byte) (-97), (byte)94, (byte)65}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-97), (byte) (-97), (byte) (-97), (byte)94, (byte)65}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(5, byteArray0.length);
      
      boolean boolean1 = byteSequence0.markSupported();
      assertTrue(boolean1);
      assertArrayEquals(new byte[] {(byte) (-97), (byte) (-97), (byte) (-97), (byte)94, (byte)65}, byteArray0);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(byteSequence0, byteSequence1);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-97), (int) (byte) (-97), true);
      assertEquals("0:    if_icmpeq\t\t#-24673\n3:    dup2_x2\n4:    lstore_2\n", string0);
      assertArrayEquals(new byte[] {(byte) (-97), (byte) (-97), (byte) (-97), (byte)94, (byte)65}, byteArray0);
      assertNotNull(string0);
      assertEquals(5, byteArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("if_icmpeq\t\t#-24673", string1);
      assertArrayEquals(new byte[] {(byte) (-97), (byte) (-97), (byte) (-97), (byte)94, (byte)65}, byteArray0);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(byteSequence0, byteSequence1);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) byteSequence1;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) (byte)65;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[3] = object1;
      String string2 = Utility.printArray(objectArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(4, objectArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("6\"Td9APwx`C|Payh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `6\"Td9APwx`C|Payh'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Constant[] constantArray0 = new Constant[32];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(32, constantPool0.getLength());
      assertEquals(32, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(32, constantPool0.getLength());
      assertEquals(32, constantPool1.getLength());
      assertEquals(32, constantArray0.length);
      
      byte byte0 = (byte) (-126);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-126);
      byteArray0[2] = (byte) (-126);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-126), (byte)0, (byte) (-126)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-126), (byte)0, (byte) (-126)}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(3, byteArray0.length);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-126), (byte)0, (byte) (-126)}, byteArray0);
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertNotNull(byteSequence2);
      assertEquals(0, byteSequence2.getIndex());
      assertEquals(3, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence2, constantPool1, false);
      assertEquals("ixor", string0);
      assertArrayEquals(new byte[] {(byte) (-126), (byte)0, (byte) (-126)}, byteArray0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertNotNull(string0);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(byteSequence2, byteSequence0);
      assertNotSame(byteSequence2, byteSequence1);
      assertEquals(32, constantPool0.getLength());
      assertEquals(32, constantPool1.getLength());
      assertEquals(1, byteSequence2.getIndex());
      assertEquals(32, constantArray0.length);
      assertEquals(3, byteArray0.length);
      
      try { 
        byteSequence1.readInt();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ";");
      assertFalse(boolean0);
      
      short short0 = Utility.searchOpcode(";");
      assertEquals((short) (-1), short0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = ";";
      stringArray0[1] = ";";
      stringArray0[2] = ";";
      stringArray0[3] = ";";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)48;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte)43, (byte) (-56), (byte)48, (byte)0}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(4, byteArray0.length);
      
      byteArray0[3] = (byte)57;
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean2);
      assertArrayEquals(new byte[] {(byte)43, (byte) (-56), (byte)48, (byte)57}, byteArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(4, byteArray0.length);
      
      String string0 = Utility.methodTypeToSignature(";", stringArray0);
      assertEquals("(L;;L;;L;;L;;)L;;", string0);
      assertNotNull(string0);
      assertEquals(4, stringArray0.length);
      
      String string1 = Utility.compactClassName(";", "0nu^$lIaG5r98E*<x", false);
      assertEquals(";", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-117);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-117)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(1, byteArray1.length);
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("f2i", string2);
      assertArrayEquals(new byte[] {(byte) (-117)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(1, byteArray1.length);
      
      String[] stringArray1 = Constants.CONSTANT_NAMES;
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(13, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)110;
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)67;
      byteArray1[1] = (byte)67;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("6e 00 00 00", string0);
      assertArrayEquals(new byte[] {(byte)110, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(string0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(4, byteArray0.length);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)110, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      
      byteSequence0.close();
      assertArrayEquals(new byte[] {(byte)110, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fdiv", string1);
      assertArrayEquals(new byte[] {(byte)110, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      
      boolean boolean1 = byteSequence0.markSupported();
      assertTrue(boolean1);
      assertArrayEquals(new byte[] {(byte)110, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("6e 00 00 00");
      assertNotNull(constantUtf8_0);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("6e 00 00 00", constantUtf8_0.getBytes());
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("nop", string2);
      assertArrayEquals(new byte[] {(byte)110, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string3 = Utility.accessToString(125, false);
      assertEquals("public protected static final synchronized volatile", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-67);
      String string0 = "?>...";
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-67), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(8, byteArray0.length);
      
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-67), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(constantPool0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(8, byteArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 0. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)54;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)54, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)54, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(4, byteArray0.length);
      
      byte byte0 = (byte)80;
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)54, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertNotNull(byteSequence2);
      assertEquals(0, byteSequence2.getIndex());
      assertEquals(4, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("istore\t\t%0", string0);
      assertArrayEquals(new byte[] {(byte)54, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(byteSequence1.equals((Object)byteSequence2));
      assertNotNull(string0);
      assertNotSame(byteSequence1, byteSequence0);
      assertNotSame(byteSequence1, byteSequence2);
      assertEquals(2, byteSequence1.getIndex());
      assertEquals(4, byteArray0.length);
      
      // Undeclared exception!
      try { 
        byteSequence0.read(byteArray0, (int) (byte)54, (int) (byte)54);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte)68;
      byteArray0[5] = (byte)84;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byteArray0[0] = (byte)47;
      byteArray0[7] = (byte)74;
      byteArray0[8] = (byte) (-40);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$_E0DDT$AJ$d8", string0);
      assertArrayEquals(new byte[] {(byte)47, (byte)69, (byte)48, (byte)68, (byte)68, (byte)84, (byte)0, (byte)74, (byte) (-40)}, byteArray0);
      assertNotNull(string0);
      assertEquals(9, byteArray0.length);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)47, (byte)69, (byte)48, (byte)68, (byte)68, (byte)84, (byte)0, (byte)74, (byte) (-40)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("laload", string1);
      assertArrayEquals(new byte[] {(byte)47, (byte)69, (byte)48, (byte)68, (byte)68, (byte)84, (byte)0, (byte)74, (byte) (-40)}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      
      String string2 = "[L>_;V";
      byte byte0 = byteSequence0.readByte();
      assertEquals((byte)69, byte0);
      assertArrayEquals(new byte[] {(byte)47, (byte)69, (byte)48, (byte)68, (byte)68, (byte)84, (byte)0, (byte)74, (byte) (-40)}, byteArray0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      
      String string3 = Utility.replace("@}f0N8kM;nxj`_B:", "bZ:8(>jbh;sx", "laload");
      assertEquals("@}f0N8kM;nxj`_B:", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("faload", string4);
      assertArrayEquals(new byte[] {(byte)47, (byte)69, (byte)48, (byte)68, (byte)68, (byte)84, (byte)0, (byte)74, (byte) (-40)}, byteArray0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      
      try { 
        Utility.typeOfMethodSignature("org.apache.bcel.classfile.Synthetic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.bcel.classfile.Synthetic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String[] stringArray0 = new String[8];
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = ">_[Q0!]8*.S";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = ">_[Q0!]8*.S";
      stringArray0[7] = "";
      String string0 = Utility.methodTypeToSignature("", stringArray0);
      assertEquals("(L;L;[L>_;L;L;L;[L>_;L;)L;", string0);
      assertNotNull(string0);
      assertEquals(8, stringArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)117;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)117}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(1, byteArray0.length);
      
      int int0 = byteSequence0.read();
      assertEquals(117, int0);
      assertArrayEquals(new byte[] {(byte)117}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(1, byteArray0.length);
      
      byteSequence0.reset();
      assertArrayEquals(new byte[] {(byte)117}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(1, byteArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)117}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(1, byteArray0.length);
      
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("lneg", string1);
      assertArrayEquals(new byte[] {(byte)117}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(1, byteSequence1.getIndex());
      assertEquals(1, byteArray0.length);
      
      try { 
        Utility.typeOfSignature(">_[Q0!]8*.S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >_[Q0!]8*.S
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      byteArray0[1] = (byte) (-21);
      byteArray0[3] = (byte)102;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1546), (int) (byte)102, true);
      assertEquals("0:    nop\n1:    <illegal opcode>\n2:    nop\n3:    fsub\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n16:   nop\n17:   nop\n18:   nop\n19:   nop\n20:   nop\n", string0);
      assertNotNull(string0);
      assertEquals(21, byteArray0.length);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertEquals(21, byteArray0.length);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[2] = (Object) (byte) (-21);
      objectArray0[3] = (Object) "0:    nop\n1:    <illegal opcode>\n2:    nop\n3:    fsub\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n16:   nop\n17:   nop\n18:   nop\n19:   nop\n20:   nop\n";
      objectArray0[4] = (Object) null;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[6] = (Object) null;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(21, byteArray0.length);
      
      byteSequence0.mark(1606);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(21, byteArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("nop", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(21, byteArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(21, byteArray0.length);
      
      byte[] byteArray1 = Utility.decode("9[o~AQ[9$(A&7x $", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(14, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String[] stringArray0 = Utility.methodSignatureArgumentTypes("()L;x;");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      short short0 = Utility.searchOpcode("()L;x;");
      assertEquals((short) (-1), short0);
      
      String string0 = Utility.classOrInterface(3544);
      assertEquals("class", string0);
      assertNotNull(string0);
      
      byte byte0 = Utility.typeOfSignature("Z=Xi*)0WA,");
      assertEquals((byte)4, byte0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      byteArray0[1] = (byte) (-42);
      byteArray0[3] = (byte) (-112);
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      assertNotNull(string0);
      assertEquals(21, byteArray0.length);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1546), (int) (byte) (-112), true);
      assertEquals("0:    nop\n1:    <illegal opcode>\n2:    nop\n3:    d2f\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n16:   nop\n17:   nop\n18:   nop\n19:   nop\n20:   nop\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(21, byteArray0.length);
      
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(21, byteArray0.length);
      
      String string2 = Utility.convertString("0:    nop\n1:    <illegal opcode>\n2:    nop\n3:    d2f\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n16:   nop\n17:   nop\n18:   nop\n19:   nop\n20:   nop\n");
      assertEquals("0:    nop\\n1:    <illegal opcode>\\n2:    nop\\n3:    d2f\\n4:    nop\\n5:    nop\\n6:    nop\\n7:    nop\\n8:    nop\\n9:    nop\\n10:   nop\\n11:   nop\\n12:   nop\\n13:   nop\\n14:   nop\\n15:   nop\\n16:   nop\\n17:   nop\\n18:   nop\\n19:   nop\\n20:   nop\\n", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "0:    nop\n1:    <illegal opcode>\n2:    nop\n3:    d2f\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n16:   nop\n17:   nop\n18:   nop\n19:   nop\n20:   nop\n";
      objectArray0[1] = (Object) "$l$8b$I$A$A$A$A$A$A$A";
      objectArray0[2] = (Object) (byte) (-42);
      objectArray0[3] = (Object) "0:    nop\n1:    <illegal opcode>\n2:    nop\n3:    d2f\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n16:   nop\n17:   nop\n18:   nop\n19:   nop\n20:   nop\n";
      objectArray0[4] = (Object) null;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[5] = object0;
      objectArray0[6] = (Object) null;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(21, byteArray0.length);
      
      byteSequence0.mark(1606);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(21, byteArray0.length);
      
      String string3 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("nop", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(21, byteArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(21, byteArray0.length);
      
      byte[] byteArray1 = Utility.decode("9[o~AQ[9$(A&7x $", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(14, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)34;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte)53, (byte)77, (byte)20, (byte)90, (byte)34}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte)53, (byte)77, (byte)20, (byte)90, (byte)34}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(6, byteArray0.length);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte)53, (byte)77, (byte)20, (byte)90, (byte)34}, byteArray0);
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertNotNull(byteSequence2);
      assertEquals(0, byteSequence2.getIndex());
      assertEquals(6, byteArray0.length);
      
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte)53, (byte)77, (byte)20, (byte)90, (byte)34}, byteArray0);
      assertFalse(byteSequence3.equals((Object)byteSequence0));
      assertFalse(byteSequence3.equals((Object)byteSequence2));
      assertFalse(byteSequence3.equals((Object)byteSequence1));
      assertNotNull(byteSequence3);
      assertEquals(0, byteSequence3.getIndex());
      assertEquals(6, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence3, (ConstantPool) null, false);
      assertEquals("fload_3", string0);
      assertArrayEquals(new byte[] {(byte)37, (byte)53, (byte)77, (byte)20, (byte)90, (byte)34}, byteArray0);
      assertFalse(byteSequence3.equals((Object)byteSequence0));
      assertFalse(byteSequence3.equals((Object)byteSequence2));
      assertFalse(byteSequence3.equals((Object)byteSequence1));
      assertNotNull(string0);
      assertNotSame(byteSequence3, byteSequence0);
      assertNotSame(byteSequence3, byteSequence2);
      assertNotSame(byteSequence3, byteSequence1);
      assertEquals(1, byteSequence3.getIndex());
      assertEquals(6, byteArray0.length);
      
      String string1 = "c;n^WsO:,!Q.dC";
      String string2 = Utility.replace("c;n^WsO:,!Q.dC", "c;n^WsO:,!Q.dC", "?c,");
      assertEquals("?c,", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = false;
      boolean boolean1 = false;
      String string3 = Utility.codeToString(byteSequence3, (ConstantPool) null, false);
      assertEquals("saload", string3);
      assertArrayEquals(new byte[] {(byte)37, (byte)53, (byte)77, (byte)20, (byte)90, (byte)34}, byteArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(byteSequence3.equals((Object)byteSequence0));
      assertFalse(byteSequence3.equals((Object)byteSequence2));
      assertFalse(byteSequence3.equals((Object)byteSequence1));
      assertNotNull(string3);
      assertNotSame(byteSequence3, byteSequence0);
      assertNotSame(byteSequence3, byteSequence2);
      assertNotSame(byteSequence3, byteSequence1);
      assertEquals(2, byteSequence3.getIndex());
      assertEquals(6, byteArray0.length);
      
      try { 
        Utility.typeOfMethodSignature("+<g5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: +<g5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = Utility.getSignature("if!q");
      assertEquals("Lif!q;", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-97);
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "if!q");
      assertFalse(boolean0);
      
      BCELComparator bCELComparator0 = Constant.getComparator();
      assertNotNull(bCELComparator0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Constant.setComparator(bCELComparator0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)106, (byte)65, (byte) (-96), (byte) (-97), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)106, (byte)65, (byte) (-96), (byte) (-97), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(7, byteArray0.length);
      
      boolean boolean2 = byteSequence1.markSupported();
      assertTrue(boolean2);
      assertArrayEquals(new byte[] {(byte)106, (byte)65, (byte) (-96), (byte) (-97), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(7, byteArray0.length);
      
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-104);
      byteArray1[1] = (byte) (-97);
      byteArray1[2] = (byte) (-97);
      byteArray1[3] = (byte)106;
      byteArray1[4] = (byte) (-97);
      byteArray1[5] = (byte)65;
      byteArray1[6] = (byte)106;
      byteArray1[7] = (byte)65;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 199, (int) (byte) (-97), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("C", true);
      assertEquals("char", string0);
      assertNotNull(string0);
      
      String string1 = Utility.compactClassName("Vi:!L&}$`;,KM/zDmn", "Vi:!L&}$`;,KM/zDmn", true);
      assertEquals("Vi:!L&}$`;,KM.zDmn", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.compactClassName("lcmp");
      assertEquals("lcmp", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)122;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-62), (byte)118, (byte) (-67), (byte)13, (byte)122}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      
      byteSequence0.reset();
      assertArrayEquals(new byte[] {(byte) (-62), (byte)118, (byte) (-67), (byte)13, (byte)122}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-62), (byte)118, (byte) (-67), (byte)13, (byte)122}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(5, byteArray0.length);
      
      ConstantPool constantPool0 = null;
      String string3 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("monitorenter", string3);
      assertArrayEquals(new byte[] {(byte) (-62), (byte)118, (byte) (-67), (byte)13, (byte)122}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(1, byteSequence1.getIndex());
      assertEquals(5, byteArray0.length);
      
      byte byte0 = byteSequence0.readByte();
      assertEquals((byte) (-62), byte0);
      assertArrayEquals(new byte[] {(byte) (-62), (byte)118, (byte) (-67), (byte)13, (byte)122}, byteArray0);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertNotSame(byteSequence0, byteSequence1);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      
      String string4 = Utility.replace("bZ:8(>jbh;sx", "[L>_;V", "[L>_;V");
      assertEquals("bZ:8(>jbh;sx", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      boolean boolean0 = false;
      String string5 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fneg", string5);
      assertArrayEquals(new byte[] {(byte) (-62), (byte)118, (byte) (-67), (byte)13, (byte)122}, byteArray0);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertNotNull(string5);
      assertNotSame(byteSequence0, byteSequence1);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      
      try { 
        Utility.typeOfMethodSignature("[L>_;V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: [L>_;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)41;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)68, (byte) (-58), (byte) (-58), (byte)41, (byte)41}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      
      ConstantFloat constantFloat0 = new ConstantFloat((-1.0F));
      assertNotNull(constantFloat0);
      assertEquals((-1.0F), constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      
      ConstantFloat constantFloat1 = (ConstantFloat)constantFloat0.copy();
      assertTrue(constantFloat1.equals((Object)constantFloat0));
      assertNotNull(constantFloat1);
      assertNotSame(constantFloat0, constantFloat1);
      assertNotSame(constantFloat1, constantFloat0);
      assertEquals((-1.0F), constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals((byte)4, constantFloat1.getTag());
      assertEquals((-1.0F), constantFloat1.getBytes(), 0.01F);
      
      ConstantFloat constantFloat2 = new ConstantFloat(constantFloat0);
      assertTrue(constantFloat0.equals((Object)constantFloat1));
      assertTrue(constantFloat2.equals((Object)constantFloat0));
      assertTrue(constantFloat2.equals((Object)constantFloat1));
      assertNotNull(constantFloat2);
      assertEquals((-1.0F), constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals((byte)4, constantFloat2.getTag());
      assertEquals((-1.0F), constantFloat2.getBytes(), 0.01F);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("fstore_1", string0);
      assertArrayEquals(new byte[] {(byte)68, (byte) (-58), (byte) (-58), (byte)41, (byte)41}, byteArray0);
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(5, byteArray0.length);
      
      String string1 = ";";
      String string2 = Utility.convertString(";");
      assertEquals(";", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      try { 
        Utility.typeOfSignature("fstore_1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: fstore_1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)125;
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte) (-58);
      byteArray0[5] = (byte) (-58);
      byteArray0[6] = (byte)99;
      byteArray0[7] = (byte)99;
      byteArray0[8] = (byte) (-72);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)125, (byte)0, (byte)99, (byte) (-58), (byte)0, (byte) (-58), (byte)99, (byte)99, (byte) (-72)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lushr", string0);
      assertArrayEquals(new byte[] {(byte)125, (byte)0, (byte)99, (byte) (-58), (byte)0, (byte) (-58), (byte)99, (byte)99, (byte) (-72)}, byteArray0);
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("lushr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `lushr'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte) (-82);
      byteArray0[3] = (byte) (-70);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)88, (byte) (-82), (byte)0, (byte) (-70)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)88, (byte) (-82), (byte)0, (byte) (-70)}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(4, byteArray0.length);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)88, (byte) (-82), (byte)0, (byte) (-70)}, byteArray0);
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertNotNull(byteSequence2);
      assertEquals(0, byteSequence2.getIndex());
      assertEquals(4, byteArray0.length);
      
      boolean boolean0 = true;
      int int0 = byteSequence0.available();
      assertEquals(4, int0);
      assertArrayEquals(new byte[] {(byte)88, (byte) (-82), (byte)0, (byte) (-70)}, byteArray0);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertFalse(byteSequence0.equals((Object)byteSequence2));
      assertNotSame(byteSequence0, byteSequence1);
      assertNotSame(byteSequence0, byteSequence2);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)88, (byte) (-82), (byte)0, (byte) (-70)}, byteArray0);
      assertFalse(byteSequence3.equals((Object)byteSequence2));
      assertFalse(byteSequence3.equals((Object)byteSequence0));
      assertFalse(byteSequence3.equals((Object)byteSequence1));
      assertNotNull(byteSequence3);
      assertEquals(0, byteSequence3.getIndex());
      assertEquals(4, byteArray0.length);
      
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)54;
      byteArray1[1] = (byte)88;
      byteArray1[2] = (byte)59;
      byteArray1[3] = (byte) (-70);
      byteArray1[4] = (byte)54;
      byteArray1[5] = (byte) (-70);
      byteArray1[6] = (byte)88;
      byteArray1[7] = (byte)90;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 336, (-1419));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte) (-70);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)88, (byte) (-82), (byte)54, (byte) (-70)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)88, (byte) (-82), (byte)54, (byte) (-70)}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(4, byteArray0.length);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)88, (byte) (-82), (byte)54, (byte) (-70)}, byteArray0);
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertNotNull(byteSequence2);
      assertEquals(0, byteSequence2.getIndex());
      assertEquals(4, byteArray0.length);
      
      int int0 = byteSequence0.available();
      assertEquals(4, int0);
      assertArrayEquals(new byte[] {(byte)88, (byte) (-82), (byte)54, (byte) (-70)}, byteArray0);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertFalse(byteSequence0.equals((Object)byteSequence2));
      assertNotSame(byteSequence0, byteSequence1);
      assertNotSame(byteSequence0, byteSequence2);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)88, (byte) (-82), (byte)54, (byte) (-70)}, byteArray0);
      assertFalse(byteSequence3.equals((Object)byteSequence1));
      assertFalse(byteSequence3.equals((Object)byteSequence0));
      assertFalse(byteSequence3.equals((Object)byteSequence2));
      assertNotNull(byteSequence3);
      assertEquals(0, byteSequence3.getIndex());
      assertEquals(4, byteArray0.length);
      
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)54;
      byteArray1[1] = (byte)88;
      byteArray1[2] = (byte)59;
      byteArray1[3] = (byte) (-70);
      byteArray1[4] = (byte)54;
      byteArray1[5] = (byte) (-70);
      byteArray1[6] = (byte)88;
      byteArray1[7] = (byte)90;
      ByteSequence byteSequence4 = new ByteSequence(byteArray1);
      assertArrayEquals(new byte[] {(byte)54, (byte)88, (byte)59, (byte) (-70), (byte)54, (byte) (-70), (byte)88, (byte)90}, byteArray1);
      assertFalse(byteSequence4.equals((Object)byteSequence3));
      assertFalse(byteSequence4.equals((Object)byteSequence1));
      assertFalse(byteSequence4.equals((Object)byteSequence2));
      assertFalse(byteSequence4.equals((Object)byteSequence0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteSequence4);
      assertEquals(0, byteSequence4.getIndex());
      assertEquals(8, byteArray1.length);
      
      String string0 = Utility.codeToString(byteSequence3, (ConstantPool) null, true);
      assertEquals("pop2", string0);
      assertArrayEquals(new byte[] {(byte)88, (byte) (-82), (byte)54, (byte) (-70)}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteSequence3.equals((Object)byteSequence1));
      assertFalse(byteSequence3.equals((Object)byteSequence4));
      assertFalse(byteSequence3.equals((Object)byteSequence0));
      assertFalse(byteSequence3.equals((Object)byteSequence2));
      assertNotNull(string0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteSequence3, byteSequence1);
      assertNotSame(byteSequence3, byteSequence4);
      assertNotSame(byteSequence3, byteSequence0);
      assertNotSame(byteSequence3, byteSequence2);
      assertEquals(1, byteSequence3.getIndex());
      assertEquals(4, byteArray0.length);
      
      try { 
        Utility.methodSignatureArgumentTypes("dup_x1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dup_x1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = false;
      String string0 = Utility.replace("java.lang.j-Vn.Dh}yHaZMu3bhn", "g=dh8?s", "");
      assertEquals("java.lang.j-Vn.Dh}yHaZMu3bhn", string0);
      assertNotNull(string0);
      
      String string1 = Utility.getSignature("\"[7$p]<wqiPDBxak");
      assertEquals("[L\";", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-127);
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)76;
      byteArray0[7] = (byte)37;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)30, (byte) (-109), (byte)7, (byte) (-127), (byte)36, (byte)4, (byte)76, (byte)37}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(8, byteArray0.length);
      
      int int0 = byteSequence0.read();
      assertEquals(30, int0);
      assertArrayEquals(new byte[] {(byte)30, (byte) (-109), (byte)7, (byte) (-127), (byte)36, (byte)4, (byte)76, (byte)37}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(8, byteArray0.length);
      
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -127
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte) (-100);
      byteArray0[5] = (byte) (-94);
      byteArray0[6] = (byte)52;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)24, (byte) (-47), (byte)3, (byte) (-66), (byte) (-100), (byte) (-94), (byte)52}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("dload\t\t%209", string0);
      assertArrayEquals(new byte[] {(byte)24, (byte) (-47), (byte)3, (byte) (-66), (byte) (-100), (byte) (-94), (byte)52}, byteArray0);
      assertNotNull(string0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(7, byteArray0.length);
      assertEquals(0, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = Utility.compactClassName("ekP^`wtSu]g?JQ^-", "", true);
      assertEquals("ekP^`wtSu]g?JQ^-", string0);
      assertNotNull(string0);
      
      String string1 = Utility.compactClassName("");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.compactClassName("", true);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = Utility.classOrInterface(95);
      assertEquals("class", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte) (-96);
      byteArray0[6] = (byte) (-74);
      byteArray0[7] = (byte) (-57);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-59), (byte)104, (byte)125, (byte) (-63), (byte)57, (byte) (-96), (byte) (-74), (byte) (-57)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(8, byteArray0.length);
      
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-67);
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "?>...");
      assertFalse(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-67), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(8, byteArray0.length);
      
      byteSequence0.reset();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-67), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(8, byteArray0.length);
      
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-67), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(constantPool0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(8, byteArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 9, 676, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 0. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte) (-105);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(13, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dcmpl", string0);
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(13, byteArray0.length);
      
      int int0 = byteSequence0.skipBytes((byte) (-105));
      assertEquals(0, int0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(13, byteArray0.length);
      
      byteSequence0.reset();
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(13, byteArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("putfield");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `putfield'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)112;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)112}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(1, byteArray0.length);
      
      byteSequence0.reset();
      assertArrayEquals(new byte[] {(byte)112}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(1, byteArray0.length);
      
      byteSequence0.mark((byte)112);
      assertArrayEquals(new byte[] {(byte)112}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(1, byteArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)112}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(1, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("irem", string0);
      assertArrayEquals(new byte[] {(byte)112}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(string0);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(1, byteSequence1.getIndex());
      assertEquals(1, byteArray0.length);
      
      String string1 = Utility.fillup("'", 2255, true, '-');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byteSequence0.reset();
      assertArrayEquals(new byte[] {(byte)112}, byteArray0);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertNotSame(byteSequence0, byteSequence1);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(1, byteArray0.length);
      
      int int0 = Utility.setBit(195, (-983));
      assertEquals(707, int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)48}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(1, byteArray0.length);
      
      ConstantPool constantPool0 = null;
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("faload", string0);
      assertArrayEquals(new byte[] {(byte)48}, byteArray0);
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(1, byteArray0.length);
      
      byteSequence0.reset();
      assertArrayEquals(new byte[] {(byte)48}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(1, byteArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, (int) (byte)48, (int) (byte)48, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte) (-106);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)32, (byte) (-4), (byte)127, (byte) (-106)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      
      int int0 = byteSequence0.readUnsignedShort();
      assertEquals(8444, int0);
      assertArrayEquals(new byte[] {(byte)32, (byte) (-4), (byte)127, (byte) (-106)}, byteArray0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      
      byteSequence0.reset();
      assertArrayEquals(new byte[] {(byte)32, (byte) (-4), (byte)127, (byte) (-106)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lload_2", string0);
      assertArrayEquals(new byte[] {(byte)32, (byte) (-4), (byte)127, (byte) (-106)}, byteArray0);
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      
      String string1 = Utility.compactClassName("invokestatic");
      assertEquals("invokestatic", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)32, (byte) (-4), (byte)127, (byte) (-106)}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(4, byteArray0.length);
      
      byteSequence0.reset();
      assertArrayEquals(new byte[] {(byte)32, (byte) (-4), (byte)127, (byte) (-106)}, byteArray0);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertNotSame(byteSequence0, byteSequence1);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)127;
      byteArray1[1] = (byte) (-4);
      byteArray1[2] = (byte) (-106);
      byteArray1[3] = (byte)57;
      byteArray1[4] = (byte) (-4);
      byteArray1[5] = (byte)32;
      byteArray1[6] = (byte) (-106);
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)32, (byte) (-4), (byte)127, (byte) (-106)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)127, (byte) (-4), (byte) (-106), (byte)57, (byte) (-4), (byte)32, (byte) (-106)}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(7, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = false;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte)60;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)113, (byte) (-1), (byte) (-75), (byte) (-57), (byte)60}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lrem", string0);
      assertArrayEquals(new byte[] {(byte)113, (byte) (-1), (byte) (-75), (byte) (-57), (byte)60}, byteArray0);
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      
      try { 
        byteSequence0.readDouble();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte) (-77);
      byteArray0[5] = (byte)8;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-116), (byte)4, (byte) (-93), (byte)45, (byte) (-77), (byte)8}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("f2l", string0);
      assertArrayEquals(new byte[] {(byte) (-116), (byte)4, (byte) (-93), (byte)45, (byte) (-77), (byte)8}, byteArray0);
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      
      byteSequence0.reset();
      assertArrayEquals(new byte[] {(byte) (-116), (byte)4, (byte) (-93), (byte)45, (byte) (-77), (byte)8}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte) (-99);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(13, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ifgt\t\t#0", string0);
      assertNotNull(string0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(13, byteArray0.length);
      
      byteSequence0.reset();
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(13, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte byte0 = (byte) (-82);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-82);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-82), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      
      boolean boolean0 = true;
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("freturn", string0);
      assertArrayEquals(new byte[] {(byte) (-82), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("freturn", "mIz _jC", "mIz _jC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: freturn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)103;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)103, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)103, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(7, byteArray0.length);
      
      ConstantPool constantPool0 = null;
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dsub", string0);
      assertArrayEquals(new byte[] {(byte)103, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertNotNull(string0);
      assertNotSame(byteSequence0, byteSequence1);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("g$A$A$A$A$A$A", string1);
      assertArrayEquals(new byte[] {(byte)103, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(7, byteArray0.length);
      
      try { 
        Utility.typeOfMethodSignature("dsub");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dsub
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = Utility.compactClassName("invokedyna", true);
      assertEquals("invokedyna", string0);
      assertNotNull(string0);
      
      String string1 = Utility.classOrInterface((-3245));
      assertEquals("interface", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)120;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)99, (byte)120}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(2, byteArray0.length);
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dadd", string2);
      assertArrayEquals(new byte[] {(byte)99, (byte)120}, byteArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(2, byteArray0.length);
      
      byteSequence0.reset();
      assertArrayEquals(new byte[] {(byte)99, (byte)120}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(2, byteArray0.length);
      
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = ".E`WW.,{)&x-n}5&M#";
      try { 
        Utility.typeOfSignature(".E`WW.,{)&x-n}5&M#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .E`WW.,{)&x-n}5&M#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte)99;
      byteArray0[6] = (byte) (-15);
      byteArray0[7] = (byte)36;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-66), (byte)57, (byte)78, (byte)0, (byte) (-83), (byte)99, (byte) (-15), (byte)36}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(8, byteArray0.length);
      
      int int0 = byteSequence0.read();
      assertEquals(190, int0);
      assertArrayEquals(new byte[] {(byte) (-66), (byte)57, (byte)78, (byte)0, (byte) (-83), (byte)99, (byte) (-15), (byte)36}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(8, byteArray0.length);
      
      byteSequence0.reset();
      assertArrayEquals(new byte[] {(byte) (-66), (byte)57, (byte)78, (byte)0, (byte) (-83), (byte)99, (byte) (-15), (byte)36}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(8, byteArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-66), (byte)57, (byte)78, (byte)0, (byte) (-83), (byte)99, (byte) (-15), (byte)36}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(8, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("arraylength", string0);
      assertArrayEquals(new byte[] {(byte) (-66), (byte)57, (byte)78, (byte)0, (byte) (-83), (byte)99, (byte) (-15), (byte)36}, byteArray0);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertNotNull(string0);
      assertNotSame(byteSequence0, byteSequence1);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(8, byteArray0.length);
      
      byte byte0 = Utility.typeOfSignature("[oAyD5S}w0|t");
      assertEquals((byte)13, byte0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("K#>d]_", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K#>d]_'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-113);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-113), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(10, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("d2l", string0);
      assertArrayEquals(new byte[] {(byte) (-113), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(10, byteArray0.length);
      
      byteSequence0.reset();
      assertArrayEquals(new byte[] {(byte) (-113), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(10, byteArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-113), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(10, byteArray0.length);
      
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 0
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte) (-49);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-84), (byte) (-102), (byte) (-106), (byte)92, (byte) (-49)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-84), (byte) (-102), (byte) (-106), (byte)92, (byte) (-49)}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(5, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ireturn", string0);
      assertArrayEquals(new byte[] {(byte) (-84), (byte) (-102), (byte) (-106), (byte)92, (byte) (-49)}, byteArray0);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertNotNull(string0);
      assertNotSame(byteSequence0, byteSequence1);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      
      String string1 = null;
      // Undeclared exception!
      try { 
        Utility.replace((String) null, ";", "LUc#~6-}qAy\"");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-57);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-57), (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(2, byteArray0.length);
      
      byteSequence0.mark(885);
      assertArrayEquals(new byte[] {(byte) (-57), (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(2, byteArray0.length);
      
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-106);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-106), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(10, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fcmpg", string0);
      assertArrayEquals(new byte[] {(byte) (-106), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(10, byteArray0.length);
      
      byteSequence0.reset();
      assertArrayEquals(new byte[] {(byte) (-106), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(10, byteArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-106), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(10, byteArray0.length);
      
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 0
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte) (-89);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)30, (byte) (-89)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(2, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lload_0", string0);
      assertArrayEquals(new byte[] {(byte)30, (byte) (-89)}, byteArray0);
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-89);
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-89), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(10, byteArray0.length);
      
      char char0 = byteSequence0.readChar();
      assertEquals('\uA700', char0);
      assertArrayEquals(new byte[] {(byte) (-89), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(10, byteArray0.length);
      
      String string0 = Utility.convertString("GRek4OM,rZSg5U3D&'");
      assertEquals("GRek4OM,rZSg5U3D&\\'", string0);
      assertNotNull(string0);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("nop", string1);
      assertArrayEquals(new byte[] {(byte) (-89), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(10, byteArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-89), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(10, byteArray0.length);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-89), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertNotNull(byteSequence2);
      assertEquals(0, byteSequence2.getIndex());
      assertEquals(10, byteArray0.length);
      
      String string2 = Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      assertEquals("goto\t\t#0", string2);
      assertArrayEquals(new byte[] {(byte) (-89), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertNotSame(byteSequence2, byteSequence1);
      assertNotSame(byteSequence2, byteSequence0);
      assertEquals(3, byteSequence2.getIndex());
      assertEquals(10, byteArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte)92;
      byteArray0[0] = (byte) (-100);
      byteArray0[3] = (byte) (-95);
      byte byte0 = (byte) (-29);
      byteArray0[4] = (byte) (-29);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-100), (byte)92, (byte)0, (byte) (-95), (byte) (-29)}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-100), (byte)92, (byte)0, (byte) (-95), (byte) (-29)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      
      boolean boolean1 = true;
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ifge\t\t#23552", string0);
      assertArrayEquals(new byte[] {(byte) (-100), (byte)92, (byte)0, (byte) (-95), (byte) (-29)}, byteArray0);
      assertNotNull(string0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("ifge\t\t#23552", "ifge\t\t#23552", "T%mlqID");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ifge\t\t#23552
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-111);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-111), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(10, byteArray0.length);
      
      char char0 = byteSequence0.readChar();
      assertEquals('\u9100', char0);
      assertArrayEquals(new byte[] {(byte) (-111), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(10, byteArray0.length);
      
      String string0 = Utility.convertString("GRek4OM,rZSg5U3D&'");
      assertEquals("GRek4OM,rZSg5U3D&\\'", string0);
      assertNotNull(string0);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("nop", string1);
      assertArrayEquals(new byte[] {(byte) (-111), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(10, byteArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-111), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(10, byteArray0.length);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-111), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertNotNull(byteSequence2);
      assertEquals(0, byteSequence2.getIndex());
      assertEquals(10, byteArray0.length);
      
      String string2 = Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      assertEquals("i2b", string2);
      assertArrayEquals(new byte[] {(byte) (-111), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertNotSame(byteSequence2, byteSequence1);
      assertNotSame(byteSequence2, byteSequence0);
      assertEquals(1, byteSequence2.getIndex());
      assertEquals(10, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)96;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)96}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(1, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("iadd", string0);
      assertArrayEquals(new byte[] {(byte)96}, byteArray0);
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(1, byteArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)96}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(1, byteArray0.length);
      
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("iadd", string1);
      assertArrayEquals(new byte[] {(byte)96}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(1, byteSequence1.getIndex());
      assertEquals(1, byteArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("anewarray");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `anewarray'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-92), (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(2, byteArray0.length);
      
      boolean boolean0 = true;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Illegally nested brackets:");
      assertEquals("int", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)60;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)60}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(1, byteArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("istore_1", string1);
      assertArrayEquals(new byte[] {(byte)60}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)57;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      
      boolean boolean0 = false;
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dstore\t\t%0", string0);
      assertArrayEquals(new byte[] {(byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      
      try { 
        Utility.methodSignatureReturnType("dstore\t\t%0", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `dstore\t\t%0'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)123;
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte)83;
      byteArray0[5] = (byte) (-45);
      byteArray0[6] = (byte) (-61);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)16, (byte)123, (byte)0, (byte) (-58), (byte)83, (byte) (-45), (byte) (-61)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("bipush\t\t123", string0);
      assertArrayEquals(new byte[] {(byte)16, (byte)123, (byte)0, (byte) (-58), (byte)83, (byte) (-45), (byte) (-61)}, byteArray0);
      assertNotNull(string0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      
      String string1 = "float";
      try { 
        Utility.methodSignatureReturnType("float", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `float'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("C", true);
      assertEquals("char", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte) (-61);
      byteArray0[7] = (byte) (-93);
      byteArray0[8] = (byte) (-61);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-61), (byte) (-61), (byte) (-61), (byte) (-61), (byte) (-61), (byte)45, (byte) (-61), (byte) (-93), (byte) (-61)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("monitorexit", string1);
      assertArrayEquals(new byte[] {(byte) (-61), (byte) (-61), (byte) (-61), (byte) (-61), (byte) (-61), (byte)45, (byte) (-61), (byte) (-93), (byte) (-61)}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      
      String string2 = Utility.fillup("char", 160, true, 'x');
      assertEquals("charxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("monitorexit", string3);
      assertArrayEquals(new byte[] {(byte) (-61), (byte) (-61), (byte) (-61), (byte) (-61), (byte) (-61), (byte)45, (byte) (-61), (byte) (-93), (byte) (-61)}, byteArray0);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte byte0 = (byte) (-86);
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "SyntheticRepository could not load ");
      assertFalse(boolean0);
      
      String string0 = "mmaoem";
      String string1 = Utility.getSignature("mmaoem");
      assertEquals("Lmmaoem;", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("H:+A`C*V,h:7+Z&fRX=", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H:+A`C*V,h:7+Z&fRX='
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-34);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-119), (byte)10, (byte) (-34)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("l2f", string0);
      assertArrayEquals(new byte[] {(byte) (-119), (byte)10, (byte) (-34)}, byteArray0);
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-78);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-78), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(10, byteArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte) (-75);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)74, (byte) (-75)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(2, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dstore_3", string0);
      assertArrayEquals(new byte[] {(byte)74, (byte) (-75)}, byteArray0);
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(2, byteArray0.length);
      
      try { 
        Utility.methodSignatureReturnType("=a#[z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `=a#[z'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-86);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-86), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(10, byteArray0.length);
      
      int int0 = byteSequence0.readInt();
      assertEquals((-1442840576), int0);
      assertArrayEquals(new byte[] {(byte) (-86), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(10, byteArray0.length);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("nop", string0);
      assertArrayEquals(new byte[] {(byte) (-86), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals(5, byteSequence0.getIndex());
      assertEquals(10, byteArray0.length);
      
      boolean boolean2 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean2);
      assertArrayEquals(new byte[] {(byte) (-86), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(10, byteArray0.length);
      
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-86);
      byteArray1[1] = (byte) (-86);
      byteArray1[2] = (byte) (-86);
      byteArray1[3] = (byte) (-86);
      byteArray1[4] = (byte) (-86);
      byteArray1[5] = (byte) (-86);
      byteArray1[6] = (byte)10;
      byte[] byteArray2 = new byte[7];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte) (-86);
      byteArray2[1] = (byte)10;
      byteArray2[2] = (byte) (-86);
      byteArray2[3] = (byte) (-86);
      byteArray2[4] = (byte) (-86);
      byteArray2[5] = (byte)10;
      byteArray2[6] = (byte) (-86);
      boolean boolean3 = Utility.equals(byteArray1, byteArray2);
      assertFalse(boolean3);
      assertArrayEquals(new byte[] {(byte) (-86), (byte)10, (byte) (-86), (byte) (-86), (byte) (-86), (byte)10, (byte) (-86)}, byteArray2);
      assertArrayEquals(new byte[] {(byte) (-86), (byte) (-86), (byte) (-86), (byte) (-86), (byte) (-86), (byte) (-86), (byte)10}, byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertEquals(7, byteArray2.length);
      assertEquals(7, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(10, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("nop", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(10, byteArray0.length);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      String string1 = "Warning: Padding byte != 0 in ";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Warning: Padding byte != 0 in ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Warning: Padding byte != 0 in '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte) (-102);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(13, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ifne\t\t#0", string0);
      assertNotNull(string0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(13, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)92;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)92, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(10, byteArray0.length);
      
      byteSequence0.close();
      assertArrayEquals(new byte[] {(byte)92, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(10, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dup2", string0);
      assertArrayEquals(new byte[] {(byte)92, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(10, byteArray0.length);
      
      try { 
        Utility.methodSignatureReturnType("|PnrKHr", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `|PnrKHr'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(13, byteArray0.length);
      
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-86);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Utility.getSignature("");
      assertEquals("L;", string0);
      assertNotNull(string0);
      
      boolean boolean1 = true;
      String string1 = Utility.signatureToString("L;", true);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-86), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(10, byteArray0.length);
      
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 0
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(9, byteArray0.length);
      
      ConstantPool constantPool0 = new ConstantPool(byteSequence1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(constantPool0);
      assertEquals(2, byteSequence1.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(9, byteArray0.length);
      
      LocalVariableTable localVariableTable0 = new LocalVariableTable(1611, 1611, byteSequence0, constantPool0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(localVariableTable0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(2, byteSequence1.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals((byte)5, localVariableTable0.getTag());
      assertEquals(1611, localVariableTable0.getNameIndex());
      assertEquals(1611, localVariableTable0.getLength());
      assertEquals(0, localVariableTable0.getTableLength());
      assertEquals(9, byteArray0.length);
      
      try { 
        Utility.methodSignatureToString("r!M'ujX}$B`Sgli`", (String) null, "oKTC,*1@Ni`<7RQNB,", true, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: r!M'ujX}$B`Sgli`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)65;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)112;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)58, (byte) (-31), (byte)123, (byte)65, (byte)0, (byte)3, (byte)112}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("astore\t\t%225", string0);
      assertArrayEquals(new byte[] {(byte)58, (byte) (-31), (byte)123, (byte)65, (byte)0, (byte)3, (byte)112}, byteArray0);
      assertNotNull(string0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.decode((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte) (-32);
      byteArray0[5] = (byte) (-122);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)29, (byte)29, (byte) (-93), (byte) (-106), (byte) (-32), (byte) (-122)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("iload_3", string0);
      assertArrayEquals(new byte[] {(byte)29, (byte)29, (byte) (-93), (byte) (-106), (byte) (-32), (byte) (-122)}, byteArray0);
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      
      try { 
        Utility.methodSignatureReturnType("8g{w*)Pan8S[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Pan8S['
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte byte0 = (byte)104;
      byteArray0[0] = (byte)104;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)104}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(1, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)104, (byte)104);
      assertNotNull(constantMethodref0);
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals(104, constantMethodref0.getClassIndex());
      assertEquals(104, constantMethodref0.getNameAndTypeIndex());
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)104}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantArray0.length);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, constantArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("imul", string0);
      assertArrayEquals(new byte[] {(byte)104}, byteArray0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(string0);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, byteArray0.length);
      assertEquals(1, constantArray0.length);
      
      boolean boolean2 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean2);
      assertArrayEquals(new byte[] {(byte)104}, byteArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(1, byteArray0.length);
      
      int int0 = (-215);
      String string1 = Utility.accessToString((-215), false);
      assertEquals("public static synchronized native interface abstract strictfp synthetic annotation enum", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = "invokespecial";
      int int1 = 376;
      int int2 = 279;
      LocalVariable[] localVariableArray0 = new LocalVariable[2];
      int int3 = 12;
      int int4 = (-552);
      CodeException[] codeExceptionArray0 = new CodeException[0];
      Attribute[] attributeArray0 = new Attribute[7];
      Field field0 = null;
      try {
        field0 = new Field(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)50, (byte)41, (byte) (-12), (byte) (-72), (byte)76}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("aaload", string0);
      assertArrayEquals(new byte[] {(byte)50, (byte)41, (byte) (-12), (byte) (-72), (byte)76}, byteArray0);
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-101);
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-101), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-101), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(9, byteArray0.length);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertNotNull(byteSequence2);
      assertEquals(0, byteSequence2.getIndex());
      assertEquals(6, byteArray1.length);
      
      int int0 = byteSequence1.skipBytes(4);
      assertEquals(4, int0);
      assertArrayEquals(new byte[] {(byte) (-101), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteSequence1.equals((Object)byteSequence2));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteSequence1, byteSequence2);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(4, byteSequence1.getIndex());
      assertEquals(9, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("iflt\t\t#0", string0);
      assertArrayEquals(new byte[] {(byte) (-101), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteSequence0.equals((Object)byteSequence2));
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertNotNull(string0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteSequence0, byteSequence2);
      assertNotSame(byteSequence0, byteSequence1);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      
      String string1 = Utility.encode(byteArray1, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(6, byteArray1.length);
      
      int int1 = 184;
      String string2 = Utility.classOrInterface((-2225));
      assertEquals("interface", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      try { 
        Utility.typeOfMethodSignature("))/Zrt_gwO)Y]N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ))/Zrt_gwO)Y]N
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("dconst_1");
      assertNotNull(constantUtf8_0);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("dconst_1", constantUtf8_0.getBytes());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte)117;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-1475), 368);
      assertEquals("0:    arraylength\n1:    lneg\n2:    monitorexit\n3:    lneg\n", string0);
      assertArrayEquals(new byte[] {(byte) (-66), (byte)117, (byte) (-61), (byte)117}, byteArray0);
      assertNotNull(string0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(4, byteArray0.length);
      
      String string1 = "S< 4";
      String string2 = Utility.fillup("S< 4", (byte)117, false, 'J');
      assertEquals("JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJS< 4", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      byte byte0 = Utility.typeOfSignature("S< 4");
      assertEquals((byte)9, byte0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJS< 4", "S< 4", "0:    arraylength\n1:    lneg\n2:    monitorexit\n3:    lneg\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJS< 4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)6;
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals(0, constantArray0.length);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)6, (byte)38, (byte)6, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      
      int int0 = byteSequence0.readUnsignedByte();
      assertEquals(6, int0);
      assertArrayEquals(new byte[] {(byte)6, (byte)38, (byte)6, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("dload_0", string0);
      assertArrayEquals(new byte[] {(byte)6, (byte)38, (byte)6, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertNotNull(string0);
      assertNotSame(constantPool0, constantPool1);
      assertEquals(0, constantPool0.getLength());
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantArray0.length);
      assertEquals(6, byteArray0.length);
      
      try { 
        Utility.typeOfMethodSignature("dload_0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dload_0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray0[2] = (byte)37;
      byteArray0[0] = (byte)17;
      byteArray0[3] = (byte) (-128);
      ConstantDouble constantDouble0 = new ConstantDouble((byte)37);
      assertNotNull(constantDouble0);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals(37.0, constantDouble0.getBytes(), 0.01);
      
      Constant[] constantArray0 = new Constant[3];
      constantArray0[1] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(3, constantPool0.getLength());
      assertEquals(3, constantArray0.length);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      BCELComparator bCELComparator0 = Constant.getComparator();
      assertNotNull(bCELComparator0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Constant.setComparator(bCELComparator0);
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(3, constantPool0.getLength());
      assertEquals(3, constantPool1.getLength());
      assertEquals(3, constantArray0.length);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)37, (byte) (-128), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      
      String string0 = Utility.accessToString((int) (byte) (-128), false);
      assertEquals("transient native interface abstract strictfp synthetic annotation enum", string0);
      assertNotNull(string0);
      
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertNotNull(constantPool2);
      assertEquals(3, constantPool2.getLength());
      assertEquals(3, constantArray0.length);
      
      ConstantPool constantPool3 = constantPool0.copy();
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertNotNull(constantPool3);
      assertNotSame(constantPool3, constantPool0);
      assertNotSame(constantPool3, constantPool1);
      assertNotSame(constantPool3, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool3);
      assertNotSame(constantPool0, constantPool2);
      assertEquals(3, constantPool3.getLength());
      assertEquals(3, constantPool0.getLength());
      assertEquals(3, constantArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool3, false);
      assertEquals("sipush\t\t37", string1);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)37, (byte) (-128), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool0.equals((Object)constantPool3));
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertNotNull(string1);
      assertNotSame(constantPool3, constantPool0);
      assertNotSame(constantPool3, constantPool1);
      assertNotSame(constantPool3, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool3);
      assertNotSame(constantPool0, constantPool2);
      assertEquals(3, constantPool3.getLength());
      assertEquals(3, constantPool0.getLength());
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      assertEquals(3, constantArray0.length);
      
      int int0 = Utility.setBit(240, (byte)37);
      assertEquals(240, int0);
      
      String string2 = "JV";
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "JV");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = true;
      try { 
        Utility.methodSignatureArgumentTypes("sipush\t\t37", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: sipush\t\t37
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = "Z=Xi*)0WA,";
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)123;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-87), (byte)123, (byte)123}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      
      long long0 = byteSequence0.skip(0L);
      assertEquals(0L, long0);
      assertArrayEquals(new byte[] {(byte) (-87), (byte)123, (byte)123}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-87), (byte)123, (byte)123}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(3, byteArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("ret\t\t%123", string1);
      assertArrayEquals(new byte[] {(byte) (-87), (byte)123, (byte)123}, byteArray0);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(byteSequence0, byteSequence1);
      assertEquals(0, constantPool0.getLength());
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      
      try { 
        Utility.typeOfMethodSignature("#1D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #1D
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "HUs9PCL$|&=");
      assertFalse(boolean0);
      
      byteArray0[0] = (byte) (-93);
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)68;
      byteArray0[5] = (byte) (-46);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-93), (byte)0, (byte) (-78), (byte)65, (byte)68, (byte) (-46), (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-93), (byte)0, (byte) (-78), (byte)65, (byte)68, (byte) (-46), (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(7, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("if_icmpgt\t\t#178", string0);
      assertArrayEquals(new byte[] {(byte) (-93), (byte)0, (byte) (-78), (byte)65, (byte)68, (byte) (-46), (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(string0);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(3, byteSequence1.getIndex());
      assertEquals(7, byteArray0.length);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ConstantClass constantClass0 = new ConstantClass((byte) (-93));
      assertNotNull(constantClass0);
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals((-93), constantClass0.getNameIndex());
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-93), (byte)0, (byte) (-78), (byte)65, (byte)68, (byte) (-46), (byte)0}, byteArray0);
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertNotNull(byteSequence2);
      assertEquals(0, byteSequence2.getIndex());
      assertEquals(7, byteArray0.length);
      
      ConstantPool constantPool1 = null;
      try {
        constantPool1 = new ConstantPool(byteSequence1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -46
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      boolean boolean0 = locale0.hasExtensions();
      assertFalse(boolean0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte)57;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-81), (byte) (-81), (byte) (-90), (byte)57}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-81), (byte) (-81), (byte) (-90), (byte)57}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(4, byteArray0.length);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-81), (byte) (-81), (byte) (-90), (byte)57}, byteArray0);
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertNotNull(byteSequence2);
      assertEquals(0, byteSequence2.getIndex());
      assertEquals(4, byteArray0.length);
      
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-81), (byte) (-81), (byte) (-90), (byte)57}, byteArray0);
      assertFalse(byteSequence3.equals((Object)byteSequence0));
      assertFalse(byteSequence3.equals((Object)byteSequence2));
      assertFalse(byteSequence3.equals((Object)byteSequence1));
      assertNotNull(byteSequence3);
      assertEquals(0, byteSequence3.getIndex());
      assertEquals(4, byteArray0.length);
      
      boolean boolean1 = false;
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dreturn", string0);
      assertArrayEquals(new byte[] {(byte) (-81), (byte) (-81), (byte) (-90), (byte)57}, byteArray0);
      assertFalse(byteSequence0.equals((Object)byteSequence2));
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertFalse(byteSequence0.equals((Object)byteSequence3));
      assertNotNull(string0);
      assertNotSame(byteSequence0, byteSequence2);
      assertNotSame(byteSequence0, byteSequence1);
      assertNotSame(byteSequence0, byteSequence3);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ConstantClass constantClass0 = new ConstantClass(10);
      assertNotNull(constantClass0);
      assertEquals(10, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      
      ByteSequence byteSequence4 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-81), (byte) (-81), (byte) (-90), (byte)57}, byteArray0);
      assertFalse(byteSequence4.equals((Object)byteSequence0));
      assertFalse(byteSequence4.equals((Object)byteSequence3));
      assertFalse(byteSequence4.equals((Object)byteSequence1));
      assertFalse(byteSequence4.equals((Object)byteSequence2));
      assertNotNull(byteSequence4);
      assertEquals(0, byteSequence4.getIndex());
      assertEquals(4, byteArray0.length);
      
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -90
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(54, (-4551));
      assertNotNull(constantInterfaceMethodref0);
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals(54, constantInterfaceMethodref0.getClassIndex());
      assertEquals((-4551), constantInterfaceMethodref0.getNameAndTypeIndex());
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertTrue(boolean0);
      
      String string0 = constantPool0.toString();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      String string1 = constantPool0.toString();
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      File file0 = MockFile.createTempFile("byte", "athrow");
      assertNotNull(file0);
      assertFalse(file0.isDirectory());
      assertEquals("byte0athrow", file0.getName());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/byte0athrow", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      
      boolean boolean1 = file0.delete();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(file0.isDirectory());
      assertFalse(file0.exists());
      assertEquals("byte0athrow", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.isFile());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/byte0athrow", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.lastModified());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      assertNotNull(mockFileOutputStream0);
      
      file0.deleteOnExit();
      assertFalse(file0.isDirectory());
      assertEquals("byte0athrow", file0.getName());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/byte0athrow", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      assertNotNull(dataOutputStream0);
      assertFalse(file0.isDirectory());
      assertEquals("byte0athrow", file0.getName());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/byte0athrow", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      
      dataOutputStream0.writeByte(54);
      assertFalse(file0.isDirectory());
      assertEquals("byte0athrow", file0.getName());
      assertTrue(file0.exists());
      assertEquals(1L, file0.length());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/byte0athrow", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      
      constantPool0.dump(dataOutputStream0);
      assertEquals(0, constantPool0.getLength());
      assertFalse(file0.isDirectory());
      assertEquals("byte0athrow", file0.getName());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals(3L, file0.length());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/byte0athrow", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertEquals(0, constantArray0.length);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      String string2 = Utility.compactClassName("short", "short", false);
      assertEquals("short", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      byte[] byteArray0 = Utility.decode("=ASqmo", false);
      assertArrayEquals(new byte[] {(byte)61, (byte)65, (byte)83, (byte)113, (byte)109, (byte)111}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(6, byteArray0.length);
      
      Constant[] constantArray1 = new Constant[2];
      assertFalse(constantArray1.equals((Object)constantArray0));
      
      constantArray1[0] = (Constant) constantInterfaceMethodref0;
      constantArray1[1] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool1 = new ConstantPool(constantArray1);
      assertFalse(constantArray1.equals((Object)constantArray0));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(2, constantPool1.getLength());
      assertEquals(2, constantArray1.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 224, 16, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "HUs9PCL$|&=");
      assertFalse(boolean0);
      
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte) (-82);
      byteArray0[5] = (byte) (-46);
      byteArray0[1] = (byte)6;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 174, (int) (byte) (-46));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-123);
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)67;
      byteArray1[1] = (byte)67;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("85 00 00 00", string0);
      assertArrayEquals(new byte[] {(byte) (-123), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(string0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(4, byteArray0.length);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-123), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      
      byteSequence0.close();
      assertArrayEquals(new byte[] {(byte) (-123), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("i2l", string1);
      assertArrayEquals(new byte[] {(byte) (-123), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      
      String string2 = Utility.getSignature("i2l");
      assertEquals("Li2l;", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      ConstantInteger constantInteger0 = null;
      try {
        constantInteger0 = new ConstantInteger(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      short short0 = Utility.searchOpcode("j*P[:_]&*c!`|s0La");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = Utility.decode("j*P[:_]&*c!`|s0La", false);
      assertNotNull(byteArray0);
      assertEquals(17, byteArray0.length);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) "j*P[:_]&*c!`|s0La";
      objectArray0[2] = (Object) "j*P[:_]&*c!`|s0La";
      objectArray0[5] = (Object) "j*P[:_]&*c!`|s0La";
      objectArray0[6] = (Object) "j*P[:_]&*c!`|s0La";
      objectArray0[7] = (Object) null;
      String string0 = Utility.printArray(objectArray0);
      assertEquals("{null, j*P[:_]&*c!`|s0La, j*P[:_]&*c!`|s0La, null, null, j*P[:_]&*c!`|s0La, j*P[:_]&*c!`|s0La, null}", string0);
      assertNotNull(string0);
      assertEquals(8, objectArray0.length);
      
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("6a 2a 50 5b 3a 5f 5d 26 2a 63 21 60 7c 73 30 4c 61", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(17, byteArray0.length);
      
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1907), 85, false);
      assertEquals("0:    fmul\n1:    aload_0\n2:    lastore\n3:    dup_x2\n4:    astore\t\t%95\n6:    dup2_x1\n7:    dload_0\n8:    aload_0\n9:    dadd\n10:   lload_3\n11:   iadd\n12:   iushr\n13:   drem\n14:   faload\n15:   astore_1\n16:   ladd\n", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(17, byteArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)46;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)46, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)46, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      
      byte byte0 = byteSequence0.readByte();
      assertEquals((byte)0, byte0);
      assertArrayEquals(new byte[] {(byte)0, (byte)46, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      
      String string0 = Utility.getSignature("b3fC:v");
      assertEquals("Lb3fC:v;", string0);
      assertNotNull(string0);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong(byteSequence0);
      assertArrayEquals(new byte[] {(byte)0, (byte)46, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(constantLong0);
      assertEquals(9, byteSequence0.getIndex());
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals(3314649325744685056L, constantLong0.getBytes());
      assertEquals(9, byteArray0.length);
      
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      assertArrayEquals(new byte[] {(byte)0, (byte)46, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(constantLong1.equals((Object)constantLong0));
      assertNotNull(constantLong1);
      assertEquals(9, byteSequence0.getIndex());
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals(3314649325744685056L, constantLong0.getBytes());
      assertEquals(3314649325744685056L, constantLong1.getBytes());
      assertEquals((byte)5, constantLong1.getTag());
      assertEquals(9, byteArray0.length);
      
      constantArray0[0] = (Constant) constantLong1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantArray0.length);
      
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = "V{!6.k8voJ";
      String string1 = Utility.signatureToString("V{!6.k8voJ", true);
      assertEquals("void", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte) (-110);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)99, (byte) (-110)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(2, byteArray0.length);
      
      String string2 = Utility.compactClassName("V{!6.k8voJ", "", true);
      assertEquals("V{!6.k8voJ", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      try { 
        Utility.methodSignatureToString("V{!6.k8voJ", "V{!6.k8voJ", "6s4euV!{", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: V{!6.k8voJ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ConstantInteger constantInteger0 = new ConstantInteger(222);
      assertNotNull(constantInteger0);
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals(222, constantInteger0.getBytes());
      
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(222, 222);
      assertNotNull(constantMethodHandle0);
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals(222, constantMethodHandle0.getReferenceIndex());
      assertEquals(222, constantMethodHandle0.getReferenceKind());
      
      BCELComparator bCELComparator0 = Field.getComparator();
      assertNotNull(bCELComparator0);
      
      Constant.setComparator(bCELComparator0);
      ConstantLong constantLong0 = new ConstantLong(1L);
      assertNotNull(constantLong0);
      assertEquals(1L, constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantInteger0;
      constantArray0[1] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)59;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte)59;
      byteArray0[6] = (byte)59;
      byteArray0[7] = (byte)59;
      byteArray0[8] = (byte)59;
      BCELComparator bCELComparator1 = Constant.getComparator();
      assertNotNull(bCELComparator1);
      assertSame(bCELComparator1, bCELComparator0);
      
      Constant.setComparator(bCELComparator1);
      assertSame(bCELComparator1, bCELComparator0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool0, constantPool1);
      assertEquals(2, constantPool1.getLength());
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantArray0.length);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)59, (byte)42, (byte)59, (byte)59, (byte)59, (byte)59, (byte)59, (byte)59, (byte)59}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      
      boolean boolean1 = true;
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("istore_0", string0);
      assertArrayEquals(new byte[] {(byte)59, (byte)42, (byte)59, (byte)59, (byte)59, (byte)59, (byte)59, (byte)59, (byte)59}, byteArray0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertNotNull(string0);
      assertNotSame(constantPool0, constantPool1);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantArray0.length);
      assertEquals(9, byteArray0.length);
      
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertNotNull(constantPool2);
      assertEquals(2, constantPool2.getLength());
      assertEquals(2, constantArray0.length);
      
      try { 
        constantPool2.constantToString(2723, (byte) (-44));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 2723. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)49;
      byteArray0[0] = (byte)49;
      byte byte1 = (byte) (-96);
      byteArray0[1] = (byte) (-96);
      byte byte2 = (byte) (-47);
      byteArray0[2] = (byte) (-47);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)49, (byte) (-96), (byte) (-47)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)49, (byte) (-96), (byte) (-47)}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(3, byteArray0.length);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)49, (byte) (-96), (byte) (-47)}, byteArray0);
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertNotNull(byteSequence2);
      assertEquals(0, byteSequence2.getIndex());
      assertEquals(3, byteArray0.length);
      
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)49, (byte) (-96), (byte) (-47)}, byteArray0);
      assertFalse(byteSequence3.equals((Object)byteSequence0));
      assertFalse(byteSequence3.equals((Object)byteSequence1));
      assertFalse(byteSequence3.equals((Object)byteSequence2));
      assertNotNull(byteSequence3);
      assertEquals(0, byteSequence3.getIndex());
      assertEquals(3, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      assertEquals("daload", string0);
      assertArrayEquals(new byte[] {(byte)49, (byte) (-96), (byte) (-47)}, byteArray0);
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence3));
      assertNotNull(string0);
      assertNotSame(byteSequence2, byteSequence1);
      assertNotSame(byteSequence2, byteSequence0);
      assertNotSame(byteSequence2, byteSequence3);
      assertEquals(1, byteSequence2.getIndex());
      assertEquals(3, byteArray0.length);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ConstantClass constantClass0 = new ConstantClass(3208);
      assertNotNull(constantClass0);
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(3208, constantClass0.getNameIndex());
      
      ByteSequence byteSequence4 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)49, (byte) (-96), (byte) (-47)}, byteArray0);
      assertFalse(byteSequence4.equals((Object)byteSequence0));
      assertFalse(byteSequence4.equals((Object)byteSequence1));
      assertFalse(byteSequence4.equals((Object)byteSequence3));
      assertFalse(byteSequence4.equals((Object)byteSequence2));
      assertNotNull(byteSequence4);
      assertEquals(0, byteSequence4.getIndex());
      assertEquals(3, byteArray0.length);
      
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -47
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      String string0 = Utility.accessToString((int) (byte) (-108), true);
      assertEquals("protected final transient native abstract strictfp synthetic annotation enum", string0);
      assertNotNull(string0);
      
      byteArray0[2] = (byte) (-108);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(8, byteArray0.length);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string1 = Utility.compactClassName("int", "protected final transient native abstract strictfp synthetic annotation enum", true);
      assertEquals("int", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte[] byteArray1 = Utility.decode("CoD$4akY@P?_4", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(11, byteArray1.length);
      
      Constant[] constantArray0 = new Constant[3];
      ConstantLong constantLong0 = new ConstantLong((byte) (-118));
      assertNotNull(constantLong0);
      assertEquals((-118L), constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      
      constantArray0[0] = (Constant) constantLong0;
      ConstantDouble constantDouble0 = new ConstantDouble((byte)33);
      assertNotNull(constantDouble0);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals(33.0, constantDouble0.getBytes(), 0.01);
      
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      assertTrue(constantDouble1.equals((Object)constantDouble0));
      assertNotNull(constantDouble1);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals(33.0, constantDouble0.getBytes(), 0.01);
      assertEquals(33.0, constantDouble1.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble1.getTag());
      
      constantArray0[1] = (Constant) constantDouble1;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(172, (byte)43);
      assertNotNull(constantNameAndType0);
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(43, constantNameAndType0.getSignatureIndex());
      assertEquals(172, constantNameAndType0.getNameIndex());
      
      constantArray0[2] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(3, constantPool0.getLength());
      assertEquals(3, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 224, (int) (byte)43, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)73;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "int");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "int");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)1;
      byteArray0[2] = (byte)78;
      byteArray0[4] = (byte) (-118);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)73, (byte)126, (byte)78, (byte)0, (byte) (-118)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[3];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)78, 68);
      assertNotNull(constantNameAndType0);
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(78, constantNameAndType0.getNameIndex());
      assertEquals(68, constantNameAndType0.getSignatureIndex());
      
      constantArray0[0] = (Constant) constantNameAndType0;
      byte byte0 = byteSequence0.readByte();
      assertEquals((byte)73, byte0);
      assertArrayEquals(new byte[] {(byte)73, (byte)126, (byte)78, (byte)0, (byte) (-118)}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      
      int int0 = byteSequence0.available();
      assertEquals(4, int0);
      assertArrayEquals(new byte[] {(byte)73, (byte)126, (byte)78, (byte)0, (byte) (-118)}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(3, constantPool0.getLength());
      assertEquals(3, constantArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("iand", string0);
      assertArrayEquals(new byte[] {(byte)73, (byte)126, (byte)78, (byte)0, (byte) (-118)}, byteArray0);
      assertNotNull(string0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(3, constantPool0.getLength());
      assertEquals(5, byteArray0.length);
      assertEquals(3, constantArray0.length);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(3, constantPool1.getLength());
      assertEquals(3, constantArray0.length);
      
      ConstantPool constantPool2 = constantPool1.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertNotNull(constantPool2);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      assertEquals(3, constantPool1.getLength());
      assertEquals(3, constantPool2.getLength());
      assertEquals(3, constantArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("astore_3", string1);
      assertArrayEquals(new byte[] {(byte)73, (byte)126, (byte)78, (byte)0, (byte) (-118)}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertNotNull(string1);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(3, constantPool0.getLength());
      assertEquals(5, byteArray0.length);
      assertEquals(3, constantArray0.length);
      
      int int1 = Utility.setBit(2085, 4);
      assertEquals(2101, int1);
      assertFalse(int1 == int0);
      
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)103;
      byteArray1[1] = (byte)126;
      byteArray1[2] = (byte) (-118);
      byteArray1[3] = (byte) (-103);
      byteArray1[4] = (byte) (-118);
      boolean boolean2 = Utility.equals(byteArray1, byteArray0);
      assertFalse(boolean2);
      assertArrayEquals(new byte[] {(byte)73, (byte)126, (byte)78, (byte)0, (byte) (-118)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)103, (byte)126, (byte) (-118), (byte) (-103), (byte) (-118)}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte)73;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte) (-71);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)98, (byte)73, (byte) (-71), (byte)73}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[3];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-71), 68);
      assertNotNull(constantNameAndType0);
      assertEquals(68, constantNameAndType0.getSignatureIndex());
      assertEquals((-71), constantNameAndType0.getNameIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      
      constantArray0[0] = (Constant) constantNameAndType0;
      byte byte0 = byteSequence0.readByte();
      assertEquals((byte)0, byte0);
      assertArrayEquals(new byte[] {(byte)0, (byte)98, (byte)73, (byte) (-71), (byte)73}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      
      int int0 = byteSequence0.available();
      assertEquals(4, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)98, (byte)73, (byte) (-71), (byte)73}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(3, constantPool0.getLength());
      assertEquals(3, constantArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)98, (byte)73, (byte) (-71), (byte)73}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(5, byteArray0.length);
      
      boolean boolean0 = true;
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("fadd", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)98, (byte)73, (byte) (-71), (byte)73}, byteArray0);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertNotNull(string0);
      assertNotSame(byteSequence0, byteSequence1);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(3, constantPool0.getLength());
      assertEquals(5, byteArray0.length);
      assertEquals(3, constantArray0.length);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)98, (byte)73, (byte) (-71), (byte)73}, byteArray0);
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertNotNull(byteSequence2);
      assertEquals(0, byteSequence2.getIndex());
      assertEquals(5, byteArray0.length);
      
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)98, (byte)73, (byte) (-71), (byte)73}, byteArray0);
      assertFalse(byteSequence3.equals((Object)byteSequence1));
      assertFalse(byteSequence3.equals((Object)byteSequence2));
      assertFalse(byteSequence3.equals((Object)byteSequence0));
      assertNotNull(byteSequence3);
      assertEquals(0, byteSequence3.getIndex());
      assertEquals(5, byteArray0.length);
      
      String string1 = Utility.codeToString(byteSequence3, constantPool0);
      assertEquals("nop", string1);
      assertArrayEquals(new byte[] {(byte)0, (byte)98, (byte)73, (byte) (-71), (byte)73}, byteArray0);
      assertFalse(byteSequence3.equals((Object)byteSequence1));
      assertFalse(byteSequence3.equals((Object)byteSequence2));
      assertFalse(byteSequence3.equals((Object)byteSequence0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(byteSequence3, byteSequence1);
      assertNotSame(byteSequence3, byteSequence2);
      assertNotSame(byteSequence3, byteSequence0);
      assertEquals(1, byteSequence3.getIndex());
      assertEquals(3, constantPool0.getLength());
      assertEquals(5, byteArray0.length);
      assertEquals(3, constantArray0.length);
      
      Code code0 = null;
      try {
        code0 = new Code((byte)0, (byte)73, byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte) (-109);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-109), (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      
      ConstantFloat constantFloat0 = new ConstantFloat((byte)0);
      assertNotNull(constantFloat0);
      assertEquals(0.0F, constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      assertTrue(constantFloat1.equals((Object)constantFloat0));
      assertNotNull(constantFloat1);
      assertEquals(0.0F, constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals((byte)4, constantFloat1.getTag());
      assertEquals(0.0F, constantFloat1.getBytes(), 0.01F);
      
      short short0 = byteSequence0.readShort();
      assertEquals((short)0, short0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-109), (byte)0}, byteArray0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-109), (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(4, byteArray0.length);
      
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(75, 75);
      assertNotNull(constantNameAndType0);
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(75, constantNameAndType0.getNameIndex());
      assertEquals(75, constantNameAndType0.getSignatureIndex());
      
      boolean boolean0 = byteSequence1.markSupported();
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-109), (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(4, byteArray0.length);
      
      byte byte0 = byteSequence1.readByte();
      assertEquals((byte)0, byte0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-109), (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(1, byteSequence1.getIndex());
      assertEquals(4, byteArray0.length);
      
      int int0 = byteSequence1.available();
      assertEquals(3, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-109), (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(1, byteSequence1.getIndex());
      assertEquals(4, byteArray0.length);
      
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("i2s", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-109), (byte)0}, byteArray0);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertNotNull(string0);
      assertNotSame(byteSequence0, byteSequence1);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(4, byteArray0.length);
      
      try { 
        Utility.typeOfMethodSignature("i2s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: i2s
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte)73;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      constantPool0.setConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      constantPool0.setConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals(0, constantArray0.length);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)73}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      
      String string0 = Utility.compactClassName("37'", true);
      assertEquals("37'", string0);
      assertNotNull(string0);
      
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertNotNull(constantPool2);
      assertEquals(0, constantPool2.getLength());
      assertEquals(0, constantArray0.length);
      
      boolean boolean0 = true;
      String string1 = Utility.signatureToString("Byte code error: ", true);
      assertEquals("byte", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.compactClassName("37'");
      assertEquals("37'", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        Utility.replace("37'", (String) null, "if_icmpeq");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("G$+_ZT)dbkK6Bw1>)#)", false);
      assertNotNull(byteArray0);
      assertEquals(18, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantArray0.length);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(18, byteArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantPool1.getLength());
      assertEquals(7, constantArray0.length);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fK");
      assertFalse(boolean0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(18, byteArray0.length);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertNotNull(byteSequence2);
      assertEquals(0, byteSequence2.getIndex());
      assertEquals(18, byteArray0.length);
      
      long long0 = byteSequence2.skip(0L);
      assertEquals(0L, long0);
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertNotSame(byteSequence2, byteSequence1);
      assertNotSame(byteSequence2, byteSequence0);
      assertEquals(0, byteSequence2.getIndex());
      assertEquals(18, byteArray0.length);
      
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)67;
      ConstantLong constantLong0 = new ConstantLong((byte) (-49));
      assertNotNull(constantLong0);
      assertEquals((-49L), constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      
      ConstantLong constantLong1 = new ConstantLong(byteSequence2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(constantLong1.equals((Object)constantLong0));
      assertNotNull(constantLong1);
      assertEquals(8, byteSequence2.getIndex());
      assertEquals(5116194018256577634L, constantLong1.getBytes());
      assertEquals((byte)5, constantLong1.getTag());
      assertEquals(18, byteArray0.length);
      
      ConstantLong constantLong2 = new ConstantLong(constantLong1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(constantLong1.equals((Object)constantLong0));
      assertFalse(constantLong2.equals((Object)constantLong0));
      assertTrue(constantLong2.equals((Object)constantLong1));
      assertNotNull(constantLong2);
      assertEquals(8, byteSequence2.getIndex());
      assertEquals(5116194018256577634L, constantLong1.getBytes());
      assertEquals((byte)5, constantLong1.getTag());
      assertEquals((byte)5, constantLong2.getTag());
      assertEquals(5116194018256577634L, constantLong2.getBytes());
      assertEquals(18, byteArray0.length);
      
      ConstantClass constantClass0 = new ConstantClass((byte)0);
      assertNotNull(constantClass0);
      assertEquals(0, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      assertTrue(constantClass1.equals((Object)constantClass0));
      assertNotNull(constantClass1);
      assertEquals(0, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(0, constantClass1.getNameIndex());
      assertEquals((byte)7, constantClass1.getTag());
      
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertNotNull(constantPool2);
      assertEquals(7, constantPool2.getLength());
      assertEquals(7, constantArray0.length);
      
      ConstantPool constantPool3 = constantPool1.copy();
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertNotNull(constantPool3);
      assertNotSame(constantPool3, constantPool2);
      assertNotSame(constantPool3, constantPool0);
      assertNotSame(constantPool3, constantPool1);
      assertNotSame(constantPool0, constantPool3);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool1, constantPool3);
      assertEquals(7, constantPool3.getLength());
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantPool1.getLength());
      assertEquals(7, constantArray0.length);
      
      ByteSequence byteSequence3 = new ByteSequence(byteArray1);
      assertArrayEquals(new byte[] {(byte)67, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteSequence3.equals((Object)byteSequence2));
      assertFalse(byteSequence3.equals((Object)byteSequence0));
      assertFalse(byteSequence3.equals((Object)byteSequence1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteSequence3);
      assertEquals(0, byteSequence3.getIndex());
      assertEquals(4, byteArray1.length);
      
      String string0 = Utility.codeToString(byteSequence3, constantPool0, false);
      assertEquals("fstore_0", string0);
      assertArrayEquals(new byte[] {(byte)67, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteSequence3.equals((Object)byteSequence2));
      assertFalse(byteSequence3.equals((Object)byteSequence0));
      assertFalse(byteSequence3.equals((Object)byteSequence1));
      assertFalse(constantPool0.equals((Object)constantPool3));
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(string0);
      assertNotSame(byteSequence3, byteSequence2);
      assertNotSame(byteSequence3, byteSequence0);
      assertNotSame(byteSequence3, byteSequence1);
      assertNotSame(constantPool0, constantPool3);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteSequence3.getIndex());
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantArray0.length);
      assertEquals(4, byteArray1.length);
      
      ConstantPool constantPool4 = new ConstantPool(constantArray0);
      assertFalse(constantPool4.equals((Object)constantPool1));
      assertFalse(constantPool4.equals((Object)constantPool0));
      assertFalse(constantPool4.equals((Object)constantPool3));
      assertFalse(constantPool4.equals((Object)constantPool2));
      assertNotNull(constantPool4);
      assertEquals(7, constantPool4.getLength());
      assertEquals(7, constantArray0.length);
      
      String string1 = Utility.codeToString(byteSequence2, constantPool2, true);
      assertEquals("dmul", string1);
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool4));
      assertFalse(constantPool2.equals((Object)constantPool3));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteSequence2.equals((Object)byteSequence3));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertNotNull(string1);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool4);
      assertNotSame(constantPool2, constantPool3);
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteSequence2, byteSequence1);
      assertNotSame(byteSequence2, byteSequence3);
      assertNotSame(byteSequence2, byteSequence0);
      assertEquals(7, constantPool2.getLength());
      assertEquals(9, byteSequence2.getIndex());
      assertEquals(18, byteArray0.length);
      assertEquals(7, constantArray0.length);
      
      try { 
        Utility.typeOfSignature("fstore_0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: fstore_0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)46;
      byteArray0[1] = (byte)46;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)46, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)46, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      
      byte byte1 = byteSequence0.readByte();
      assertEquals((byte)0, byte1);
      assertArrayEquals(new byte[] {(byte)0, (byte)46, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byte1 == byte0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      
      int int0 = byteSequence0.available();
      assertEquals(8, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)46, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)46, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(9, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence1, constantPool0, false);
      assertEquals("nop", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)46, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(string0);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence1.getIndex());
      assertEquals(9, byteArray0.length);
      assertEquals(0, constantArray0.length);
      
      char char0 = '&';
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$A$$$A$A$A$A$A$A$A", string1);
      assertArrayEquals(new byte[] {(byte)0, (byte)46, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(9, byteArray0.length);
      
      String string2 = Utility.classOrInterface(167);
      assertEquals("class", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = Utility.accessToString(202);
      assertEquals("private static volatile transient", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("iaload", string4);
      assertArrayEquals(new byte[] {(byte)0, (byte)46, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertNotSame(byteSequence0, byteSequence1);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      
      try { 
        Utility.methodSignatureArgumentTypes("$A$$$A$A$A$A$A$A$A", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $A$$$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = Utility.compactClassName("S", "S", true);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = Utility.getSignature("S");
      assertEquals("LS;", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)77;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte) (-38);
      byteArray0[4] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)77, (byte)0, (byte)110, (byte) (-38), (byte) (-86)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-38));
      assertNotNull(constantFloat0);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals((-38.0F), constantFloat0.getBytes(), 0.01F);
      
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantFloat0;
      long long0 = byteSequence0.skip((byte) (-38));
      assertEquals(0L, long0);
      assertArrayEquals(new byte[] {(byte)77, (byte)0, (byte)110, (byte) (-38), (byte) (-86)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string2 = Utility.encode(byteArray0, false);
      assertEquals("M$An$da$aa", string2);
      assertArrayEquals(new byte[] {(byte)77, (byte)0, (byte)110, (byte) (-38), (byte) (-86)}, byteArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(5, byteArray0.length);
      
      String string3 = Utility.classOrInterface((-6423));
      assertEquals("interface", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      try { 
        Utility.methodSignatureArgumentTypes("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ConstantFloat constantFloat0 = new ConstantFloat((-1443.6461F));
      assertNotNull(constantFloat0);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals((-1443.6461F), constantFloat0.getBytes(), 0.01F);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte) (-91);
      byteArray0[5] = (byte) (-115);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-80), (byte) (-80), (byte)12, (byte) (-115), (byte) (-91), (byte) (-115)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-80), (byte) (-80), (byte)12, (byte) (-115), (byte) (-91), (byte) (-115)}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(6, byteArray0.length);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-80), (byte) (-80), (byte)12, (byte) (-115), (byte) (-91), (byte) (-115)}, byteArray0);
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertNotNull(byteSequence2);
      assertEquals(0, byteSequence2.getIndex());
      assertEquals(6, byteArray0.length);
      
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-80), (byte) (-80), (byte)12, (byte) (-115), (byte) (-91), (byte) (-115)}, byteArray0);
      assertFalse(byteSequence3.equals((Object)byteSequence2));
      assertFalse(byteSequence3.equals((Object)byteSequence1));
      assertFalse(byteSequence3.equals((Object)byteSequence0));
      assertNotNull(byteSequence3);
      assertEquals(0, byteSequence3.getIndex());
      assertEquals(6, byteArray0.length);
      
      boolean boolean0 = false;
      ByteSequence byteSequence4 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-80), (byte) (-80), (byte)12, (byte) (-115), (byte) (-91), (byte) (-115)}, byteArray0);
      assertFalse(byteSequence4.equals((Object)byteSequence1));
      assertFalse(byteSequence4.equals((Object)byteSequence0));
      assertFalse(byteSequence4.equals((Object)byteSequence3));
      assertFalse(byteSequence4.equals((Object)byteSequence2));
      assertNotNull(byteSequence4);
      assertEquals(0, byteSequence4.getIndex());
      assertEquals(6, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("areturn", string0);
      assertArrayEquals(new byte[] {(byte) (-80), (byte) (-80), (byte)12, (byte) (-115), (byte) (-91), (byte) (-115)}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence4));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(byteSequence1.equals((Object)byteSequence3));
      assertFalse(byteSequence1.equals((Object)byteSequence2));
      assertNotNull(string0);
      assertNotSame(byteSequence1, byteSequence4);
      assertNotSame(byteSequence1, byteSequence0);
      assertNotSame(byteSequence1, byteSequence3);
      assertNotSame(byteSequence1, byteSequence2);
      assertEquals(1, byteSequence1.getIndex());
      assertEquals(6, byteArray0.length);
      
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$b0$b0$M$8d$a5$8d", string1);
      assertArrayEquals(new byte[] {(byte) (-80), (byte) (-80), (byte)12, (byte) (-115), (byte) (-91), (byte) (-115)}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(6, byteArray0.length);
      
      String string2 = Utility.classOrInterface((byte) (-115));
      assertEquals("interface", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      try { 
        Utility.methodSignatureArgumentTypes("areturn", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: areturn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantArray0.length);
      
      Integer integer0 = new Integer((-918));
      assertEquals((-918), (int)integer0);
      assertNotNull(integer0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte) (-62);
      byteArray0[4] = (byte)19;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2814, 94, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      boolean boolean0 = locale0.hasExtensions();
      assertFalse(boolean0);
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("zh", locale1.getLanguage());
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte)100;
      byteArray0[6] = (byte) (-110);
      byteArray0[7] = (byte)80;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)21, (byte)100, (byte)107, (byte)80, (byte)114, (byte)100, (byte) (-110), (byte)80}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(8, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("iload\t\t%100", string0);
      assertArrayEquals(new byte[] {(byte)21, (byte)100, (byte)107, (byte)80, (byte)114, (byte)100, (byte) (-110), (byte)80}, byteArray0);
      assertNotNull(string0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(8, byteArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("invokedynamic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `invokedynamic'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantPool1.getLength());
      assertEquals(7, constantArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte) (-55);
      byteArray0[5] = (byte) (-55);
      byteArray0[6] = (byte) (-55);
      byteArray0[7] = (byte) (-55);
      byteArray0[8] = (byte) (-55);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-55), (byte) (-55), (byte) (-55), (byte) (-55), (byte) (-55), (byte) (-55), (byte) (-55), (byte) (-55), (byte) (-55)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      
      ConstantPool constantPool2 = constantPool0.copy();
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertNotNull(constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantPool2.getLength());
      assertEquals(7, constantArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("jsr_w\t\t#-909522487", string0);
      assertArrayEquals(new byte[] {(byte) (-55), (byte) (-55), (byte) (-55), (byte) (-55), (byte) (-55), (byte) (-55), (byte) (-55), (byte) (-55), (byte) (-55)}, byteArray0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertNotNull(string0);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool1, constantPool2);
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantPool1.getLength());
      assertEquals(5, byteSequence0.getIndex());
      assertEquals(7, constantArray0.length);
      assertEquals(9, byteArray0.length);
      
      String string1 = Utility.convertString("jsr_w\t\t#-909522487");
      assertEquals("jsr_w\t\t#-909522487", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      short short0 = Utility.searchOpcode("RuntimeInvisibleParameterAnnotations");
      assertEquals((short) (-1), short0);
      
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("{x~9bgegwt-`XiM]i.", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      boolean boolean0 = true;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Utility.compactClassName("~&a", "V", true);
      assertEquals("~&a", string0);
      assertNotNull(string0);
      
      byte byte0 = (byte)80;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte) (-110);
      byteArray0[4] = (byte) (-22);
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte)80;
      byteArray0[7] = (byte) (-110);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)80, (byte) (-22), (byte)80, (byte) (-110), (byte) (-22), (byte) (-128), (byte)80, (byte) (-110)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(8, byteArray0.length);
      
      ConstantPool constantPool0 = null;
      boolean boolean2 = false;
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lastore", string1);
      assertArrayEquals(new byte[] {(byte)80, (byte) (-22), (byte)80, (byte) (-110), (byte) (-22), (byte) (-128), (byte)80, (byte) (-110)}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(8, byteArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("instanceof");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `instanceof'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)31;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)101, (byte)31, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)101, (byte)31, (byte)116, (byte) (-1)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      
      byte byte0 = byteSequence0.readByte();
      assertEquals((byte)101, byte0);
      assertArrayEquals(new byte[] {(byte)101, (byte)31, (byte)116, (byte) (-1)}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      
      int int0 = byteSequence0.available();
      assertEquals(3, int0);
      assertArrayEquals(new byte[] {(byte)101, (byte)31, (byte)116, (byte) (-1)}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(0, constantPool1.getLength());
      
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[1] = (byte)31;
      byteArray1[2] = (byte)31;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)31, (byte)31}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(3, byteArray1.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("lload_1", string0);
      assertArrayEquals(new byte[] {(byte)101, (byte)31, (byte)116, (byte) (-1)}, byteArray0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertNotNull(string0);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteSequence0, byteSequence1);
      assertEquals(0, constantPool0.getLength());
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      
      char char0 = '&';
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
      assertArrayEquals(new byte[] {(byte)101, (byte)31, (byte)116, (byte) (-1)}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(string1);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(4, byteArray0.length);
      
      String string2 = Utility.classOrInterface((-520));
      assertEquals("class", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = Utility.accessToString((-676));
      assertEquals("protected static final volatile native abstract strictfp synthetic annotation enum", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ineg", string4);
      assertArrayEquals(new byte[] {(byte)101, (byte)31, (byte)116, (byte) (-1)}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertNotNull(string4);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteSequence0, byteSequence1);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      
      try { 
        Utility.methodSignatureArgumentTypes("null", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte) (-14);
      byteArray0[6] = (byte)11;
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 44, (int) (byte)16, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte) (-118);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)73, (byte)126, (byte)1, (byte)78, (byte) (-118)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[3];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)78, 68);
      assertNotNull(constantNameAndType0);
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(68, constantNameAndType0.getSignatureIndex());
      assertEquals(78, constantNameAndType0.getNameIndex());
      
      constantArray0[0] = (Constant) constantNameAndType0;
      byte byte0 = byteSequence0.readByte();
      assertEquals((byte)73, byte0);
      assertArrayEquals(new byte[] {(byte)73, (byte)126, (byte)1, (byte)78, (byte) (-118)}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      
      int int0 = byteSequence0.available();
      assertEquals(4, int0);
      assertArrayEquals(new byte[] {(byte)73, (byte)126, (byte)1, (byte)78, (byte) (-118)}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      
      char char0 = byteSequence0.readChar();
      assertEquals('\u7E01', char0);
      assertArrayEquals(new byte[] {(byte)73, (byte)126, (byte)1, (byte)78, (byte) (-118)}, byteArray0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(3, constantPool0.getLength());
      assertEquals(3, constantArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("astore_3", string0);
      assertArrayEquals(new byte[] {(byte)73, (byte)126, (byte)1, (byte)78, (byte) (-118)}, byteArray0);
      assertNotNull(string0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(3, constantPool0.getLength());
      assertEquals(5, byteArray0.length);
      assertEquals(3, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("G$+_ZT)dbkK6Bw1>)#)", false);
      assertNotNull(byteArray0);
      assertEquals(18, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantArray0.length);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(18, byteArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantPool1.getLength());
      assertEquals(7, constantArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(18, byteArray0.length);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertNotNull(byteSequence2);
      assertEquals(0, byteSequence2.getIndex());
      assertEquals(18, byteArray0.length);
      
      long long0 = byteSequence2.skip(0L);
      assertEquals(0L, long0);
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertNotSame(byteSequence2, byteSequence1);
      assertNotSame(byteSequence2, byteSequence0);
      assertEquals(0, byteSequence2.getIndex());
      assertEquals(18, byteArray0.length);
      
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)67;
      byteArray1[1] = (byte) (-49);
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "7K");
      assertFalse(boolean0);
      
      ByteSequence byteSequence3 = new ByteSequence(byteArray1);
      assertArrayEquals(new byte[] {(byte)67, (byte) (-49), (byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteSequence3.equals((Object)byteSequence1));
      assertFalse(byteSequence3.equals((Object)byteSequence0));
      assertFalse(byteSequence3.equals((Object)byteSequence2));
      assertNotNull(byteSequence3);
      assertEquals(0, byteSequence3.getIndex());
      assertEquals(5, byteArray1.length);
      
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertNotNull(constantPool2);
      assertEquals(7, constantPool2.getLength());
      assertEquals(7, constantArray0.length);
      
      ConstantPool constantPool3 = new ConstantPool(constantArray0);
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertNotNull(constantPool3);
      assertEquals(7, constantPool3.getLength());
      assertEquals(7, constantArray0.length);
      
      ConstantPool constantPool4 = constantPool1.copy();
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool0.equals((Object)constantPool3));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool1.equals((Object)constantPool3));
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertFalse(constantPool4.equals((Object)constantPool1));
      assertFalse(constantPool4.equals((Object)constantPool2));
      assertFalse(constantPool4.equals((Object)constantPool3));
      assertFalse(constantPool4.equals((Object)constantPool0));
      assertNotNull(constantPool4);
      assertNotSame(constantPool0, constantPool4);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool3);
      assertNotSame(constantPool1, constantPool4);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool1, constantPool3);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool4, constantPool1);
      assertNotSame(constantPool4, constantPool2);
      assertNotSame(constantPool4, constantPool3);
      assertNotSame(constantPool4, constantPool0);
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantPool1.getLength());
      assertEquals(7, constantPool4.getLength());
      assertEquals(7, constantArray0.length);
      
      ConstantPool constantPool5 = new ConstantPool(constantArray0);
      assertFalse(constantPool5.equals((Object)constantPool4));
      assertFalse(constantPool5.equals((Object)constantPool3));
      assertFalse(constantPool5.equals((Object)constantPool2));
      assertFalse(constantPool5.equals((Object)constantPool1));
      assertFalse(constantPool5.equals((Object)constantPool0));
      assertNotNull(constantPool5);
      assertEquals(7, constantPool5.getLength());
      assertEquals(7, constantArray0.length);
      
      ByteSequence byteSequence4 = new ByteSequence(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteSequence4.equals((Object)byteSequence2));
      assertFalse(byteSequence4.equals((Object)byteSequence0));
      assertFalse(byteSequence4.equals((Object)byteSequence1));
      assertFalse(byteSequence4.equals((Object)byteSequence3));
      assertNotNull(byteSequence4);
      assertEquals(0, byteSequence4.getIndex());
      assertEquals(18, byteArray0.length);
      
      boolean boolean1 = byteSequence1.markSupported();
      assertTrue(boolean1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(boolean1 == boolean0);
      assertFalse(byteSequence1.equals((Object)byteSequence2));
      assertFalse(byteSequence1.equals((Object)byteSequence4));
      assertFalse(byteSequence1.equals((Object)byteSequence3));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteSequence1, byteSequence2);
      assertNotSame(byteSequence1, byteSequence4);
      assertNotSame(byteSequence1, byteSequence3);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(18, byteArray0.length);
      
      short short0 = Utility.searchOpcode("nop");
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte) (-72);
      byteArray0[5] = (byte)99;
      byteArray0[7] = (byte) (-58);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-58), (byte)41, (byte)91, (byte)99, (byte) (-72), (byte)99, (byte)0, (byte) (-58)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(8, byteArray0.length);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-58), (byte)41, (byte)91, (byte)99, (byte) (-72), (byte)99, (byte)0, (byte) (-58)}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(8, byteArray0.length);
      
      long long0 = byteSequence0.skip(1L);
      assertEquals(1L, long0);
      assertArrayEquals(new byte[] {(byte) (-58), (byte)41, (byte)91, (byte)99, (byte) (-72), (byte)99, (byte)0, (byte) (-58)}, byteArray0);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertNotSame(byteSequence0, byteSequence1);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(8, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("dload_3", string0);
      assertArrayEquals(new byte[] {(byte) (-58), (byte)41, (byte)91, (byte)99, (byte) (-72), (byte)99, (byte)0, (byte) (-58)}, byteArray0);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertNotNull(string0);
      assertNotSame(byteSequence0, byteSequence1);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(8, byteArray0.length);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-58), (byte)41, (byte)91, (byte)99, (byte) (-72), (byte)99, (byte)0, (byte) (-58)}, byteArray0);
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertNotNull(byteSequence2);
      assertEquals(0, byteSequence2.getIndex());
      assertEquals(8, byteArray0.length);
      
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-58), (byte)41, (byte)91, (byte)99, (byte) (-72), (byte)99, (byte)0, (byte) (-58)}, byteArray0);
      assertFalse(byteSequence3.equals((Object)byteSequence2));
      assertFalse(byteSequence3.equals((Object)byteSequence0));
      assertFalse(byteSequence3.equals((Object)byteSequence1));
      assertNotNull(byteSequence3);
      assertEquals(0, byteSequence3.getIndex());
      assertEquals(8, byteArray0.length);
      
      ByteSequence byteSequence4 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-58), (byte)41, (byte)91, (byte)99, (byte) (-72), (byte)99, (byte)0, (byte) (-58)}, byteArray0);
      assertFalse(byteSequence4.equals((Object)byteSequence2));
      assertFalse(byteSequence4.equals((Object)byteSequence0));
      assertFalse(byteSequence4.equals((Object)byteSequence1));
      assertFalse(byteSequence4.equals((Object)byteSequence3));
      assertNotNull(byteSequence4);
      assertEquals(0, byteSequence4.getIndex());
      assertEquals(8, byteArray0.length);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-58), (byte)41, (byte)91, (byte)99, (byte) (-72), (byte)99, (byte)0, (byte) (-58)}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      long long1 = byteSequence2.skip((byte)99);
      assertEquals(8L, long1);
      assertArrayEquals(new byte[] {(byte) (-58), (byte)41, (byte)91, (byte)99, (byte) (-72), (byte)99, (byte)0, (byte) (-58)}, byteArray0);
      assertFalse(long1 == long0);
      assertFalse(byteSequence2.equals((Object)byteSequence4));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteSequence2.equals((Object)byteSequence3));
      assertNotSame(byteSequence2, byteSequence4);
      assertNotSame(byteSequence2, byteSequence0);
      assertNotSame(byteSequence2, byteSequence1);
      assertNotSame(byteSequence2, byteSequence3);
      assertEquals(8, byteSequence2.getIndex());
      assertEquals(8, byteArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)91, (int) (byte) (-58), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      String string0 = Utility.accessToString((int) (byte) (-108), true);
      assertEquals("protected final transient native abstract strictfp synthetic annotation enum", string0);
      assertNotNull(string0);
      
      byteArray0[2] = (byte) (-108);
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-108);
      byteArray1[1] = (byte) (-108);
      byteArray1[2] = (byte) (-108);
      byteArray0[1] = (byte) (-108);
      byteArray1[4] = (byte) (-108);
      byteArray1[5] = (byte) (-108);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-108), (byte) (-108), (byte) (-108), (byte)0, (byte) (-108), (byte) (-108)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertEquals(6, byteArray1.length);
      
      byteArray0[7] = (byte)52;
      byteArray0[4] = (byte) (-23);
      byteArray0[5] = (byte) (-108);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte) (-108), (byte)0, (byte) (-23), (byte) (-108), (byte)0, (byte)52, (byte)0}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      
      ConstantPool constantPool0 = null;
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("nop", string1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte) (-108), (byte)0, (byte) (-23), (byte) (-108), (byte)0, (byte)52, (byte)0}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(string1);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lcmp", string2);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte) (-108), (byte)0, (byte) (-23), (byte) (-108), (byte)0, (byte)52, (byte)0}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      
      String string3 = "";
      int int0 = byteSequence0.available();
      assertEquals(7, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte) (-108), (byte)0, (byte) (-23), (byte) (-108), (byte)0, (byte)52, (byte)0}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      
      try { 
        Utility.methodSignatureReturnType("108xbx");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `108xbx'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      Locale locale1 = Locale.US;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getVariant());
      assertEquals("US", locale1.getCountry());
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("en_US", locale1.toString());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-65);
      byte byte0 = (byte)3;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte)88;
      byteArray0[5] = (byte)92;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-65), (byte)3, (byte)87, (byte) (-8), (byte)88, (byte)92}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(0, constantPool1.getLength());
      assertEquals(0, constantArray0.length);
      
      int int0 = byteSequence0.available();
      assertEquals(6, int0);
      assertArrayEquals(new byte[] {(byte) (-65), (byte)3, (byte)87, (byte) (-8), (byte)88, (byte)92}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("athrow", string0);
      assertArrayEquals(new byte[] {(byte) (-65), (byte)3, (byte)87, (byte) (-8), (byte)88, (byte)92}, byteArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(string0);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool1.getLength());
      assertEquals(0, constantArray0.length);
      assertEquals(6, byteArray0.length);
      
      ByteSequence byteSequence1 = null;
      try {
        byteSequence1 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)101, (byte)31, (byte)116, (byte) (-1)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      
      byte byte0 = byteSequence0.readByte();
      assertEquals((byte)101, byte0);
      assertArrayEquals(new byte[] {(byte)101, (byte)31, (byte)116, (byte) (-1)}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      
      int int0 = byteSequence0.available();
      assertEquals(3, int0);
      assertArrayEquals(new byte[] {(byte)101, (byte)31, (byte)116, (byte) (-1)}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(0, constantPool1.getLength());
      
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte)31;
      byteArray1[2] = (byte)31;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)31, (byte)31}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(3, byteArray1.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("lload_1", string0);
      assertArrayEquals(new byte[] {(byte)101, (byte)31, (byte)116, (byte) (-1)}, byteArray0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertNotNull(string0);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteSequence0, byteSequence1);
      assertEquals(0, constantPool0.getLength());
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      
      String string1 = Utility.convertString("vdCn]Vw!/q*dI");
      assertEquals("vdCn]Vw!/q*dI", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.replace("n/C4[d[K&av]jt'AWw", ";Zg%X1h|*:3KGM|0", "vdCn]Vw!/q*dI");
      assertEquals("n/C4[d[K&av]jt'AWw", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string3 = Utility.encode(byteArray1, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string3);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)31, (byte)31}, byteArray1);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(string3);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray1.length);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "vdCn]Vw!/q*dI";
      stringArray0[1] = ";Zg%X1h|*:3KGM|0";
      stringArray0[2] = "Illegal type: ";
      stringArray0[3] = "n/C4[d[K&av]jt'AWw";
      stringArray0[4] = "n/C4[d[K&av]jt'AWw";
      stringArray0[5] = "vdCn]Vw!/q*dI";
      stringArray0[6] = "lload_1";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("lload_1", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[d[K&av]jt'AWw
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = Utility.compactClassName("S", "S", true);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = Utility.getSignature("S");
      assertEquals("LS;", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)77;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte) (-38);
      byteArray0[4] = (byte) (-95);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)77, (byte)0, (byte)110, (byte) (-38), (byte) (-95)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-38));
      assertNotNull(constantFloat0);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals((-38.0F), constantFloat0.getBytes(), 0.01F);
      
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      assertTrue(constantFloat1.equals((Object)constantFloat0));
      assertNotNull(constantFloat1);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals((-38.0F), constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat1.getTag());
      assertEquals((-38.0F), constantFloat1.getBytes(), 0.01F);
      
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantFloat0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("");
      assertNotNull(constantUtf8_0);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("", constantUtf8_0.getBytes());
      
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantFloat0;
      String string2 = constantUtf8_0.toString();
      assertEquals("CONSTANT_Utf8[1](\"\")", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("", constantUtf8_0.getBytes());
      
      constantArray0[3] = (Constant) constantFloat0;
      constantArray0[4] = (Constant) constantFloat1;
      constantArray0[5] = (Constant) constantFloat1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(6, constantPool0.getLength());
      assertEquals(6, constantArray0.length);
      
      String string3 = constantPool0.toString();
      assertEquals("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Float[4](bytes = -38.0)\n3)CONSTANT_Float[4](bytes = -38.0)\n4)CONSTANT_Float[4](bytes = -38.0)\n5)CONSTANT_Float[4](bytes = -38.0)\n", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(6, constantPool0.getLength());
      assertEquals(6, constantArray0.length);
      
      String string4 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("astore_2", string4);
      assertArrayEquals(new byte[] {(byte)77, (byte)0, (byte)110, (byte) (-38), (byte) (-95)}, byteArray0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals(6, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      assertEquals(6, constantArray0.length);
      
      String string5 = Utility.signatureToString("LS;");
      assertEquals("S", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte)43;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)70, (byte) (-100), (byte) (-105), (byte)60, (byte)43}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      String string0 = Utility.convertString("ZIY^X*+vISe|T2k`,");
      assertEquals("ZIY^X*+vISe|T2k`,", string0);
      assertNotNull(string0);
      
      String string1 = Utility.compactClassName("*qDnT%", "ZIY^X*+vISe|T2k`,", false);
      assertEquals("*qDnT%", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.replace("Cache hit ", "*qDnT%", "'");
      assertEquals("Cache hit ", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals(0, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)43, 92, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)55;
      byteArray0[6] = (byte) (-69);
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte)55;
      ConstantFloat constantFloat0 = new ConstantFloat((-1.0F));
      assertNotNull(constantFloat0);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals((-1.0F), constantFloat0.getBytes(), 0.01F);
      
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      assertTrue(constantFloat1.equals((Object)constantFloat0));
      assertNotNull(constantFloat1);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals((-1.0F), constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat1.getTag());
      assertEquals((-1.0F), constantFloat1.getBytes(), 0.01F);
      
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantFloat0;
      constantArray0[1] = (Constant) constantFloat1;
      constantArray0[2] = (Constant) constantFloat1;
      constantArray0[3] = (Constant) constantFloat1;
      constantArray0[4] = (Constant) constantFloat0;
      constantArray0[5] = (Constant) constantFloat1;
      constantArray0[6] = (Constant) constantFloat1;
      constantArray0[7] = (Constant) constantFloat1;
      constantArray0[8] = (Constant) constantFloat1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(9, constantPool0.getLength());
      assertEquals(9, constantArray0.length);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)55, (byte)0, (byte)82, (byte)55, (byte)55, (byte)0, (byte) (-69)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      
      int int0 = byteSequence0.readUnsignedByte();
      assertEquals(55, int0);
      assertArrayEquals(new byte[] {(byte)55, (byte)0, (byte)82, (byte)55, (byte)55, (byte)0, (byte) (-69)}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      
      char char0 = byteSequence0.readChar();
      assertEquals('R', char0);
      assertArrayEquals(new byte[] {(byte)55, (byte)0, (byte)82, (byte)55, (byte)55, (byte)0, (byte) (-69)}, byteArray0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      
      int int1 = byteSequence0.readUnsignedShort();
      assertEquals(14135, int1);
      assertArrayEquals(new byte[] {(byte)55, (byte)0, (byte)82, (byte)55, (byte)55, (byte)0, (byte) (-69)}, byteArray0);
      assertFalse(int1 == int0);
      assertEquals(5, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(9, constantPool0.getLength());
      assertEquals(9, constantPool1.getLength());
      assertEquals(9, constantArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("nop", string0);
      assertArrayEquals(new byte[] {(byte)55, (byte)0, (byte)82, (byte)55, (byte)55, (byte)0, (byte) (-69)}, byteArray0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertNotNull(string0);
      assertNotSame(constantPool0, constantPool1);
      assertEquals(9, constantPool0.getLength());
      assertEquals(6, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      assertEquals(9, constantArray0.length);
      
      String string1 = Utility.convertString("nop");
      assertEquals("nop", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("G$+_ZT)dbkK6Bw1>)#)", false);
      assertNotNull(byteArray0);
      assertEquals(18, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantArray0.length);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(18, byteArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantPool1.getLength());
      assertEquals(7, constantArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(18, byteArray0.length);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertNotNull(byteSequence2);
      assertEquals(0, byteSequence2.getIndex());
      assertEquals(18, byteArray0.length);
      
      long long0 = byteSequence2.skip(0L);
      assertEquals(0L, long0);
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertNotSame(byteSequence2, byteSequence1);
      assertNotSame(byteSequence2, byteSequence0);
      assertEquals(0, byteSequence2.getIndex());
      assertEquals(18, byteArray0.length);
      
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)67;
      byteArray1[1] = (byte) (-49);
      ByteSequence byteSequence3 = new ByteSequence(byteArray1);
      assertArrayEquals(new byte[] {(byte)67, (byte) (-49), (byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteSequence3.equals((Object)byteSequence2));
      assertFalse(byteSequence3.equals((Object)byteSequence1));
      assertFalse(byteSequence3.equals((Object)byteSequence0));
      assertNotNull(byteSequence3);
      assertEquals(0, byteSequence3.getIndex());
      assertEquals(5, byteArray1.length);
      
      String string0 = Utility.codeToString(byteSequence3, constantPool1, false);
      assertEquals("fstore_0", string0);
      assertArrayEquals(new byte[] {(byte)67, (byte) (-49), (byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteSequence3.equals((Object)byteSequence2));
      assertFalse(byteSequence3.equals((Object)byteSequence1));
      assertFalse(byteSequence3.equals((Object)byteSequence0));
      assertNotNull(string0);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteSequence3, byteSequence2);
      assertNotSame(byteSequence3, byteSequence1);
      assertNotSame(byteSequence3, byteSequence0);
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantPool1.getLength());
      assertEquals(1, byteSequence3.getIndex());
      assertEquals(7, constantArray0.length);
      assertEquals(5, byteArray1.length);
      
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertNotNull(constantPool2);
      assertEquals(7, constantPool2.getLength());
      assertEquals(7, constantArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("dstore_0", string1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertFalse(byteSequence0.equals((Object)byteSequence2));
      assertFalse(byteSequence0.equals((Object)byteSequence3));
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(byteSequence0, byteSequence1);
      assertNotSame(byteSequence0, byteSequence2);
      assertNotSame(byteSequence0, byteSequence3);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(7, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(7, constantPool1.getLength());
      assertEquals(18, byteArray0.length);
      assertEquals(7, constantArray0.length);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("G$+_ZT)dbkK6Bw1>)#)", false);
      assertNotNull(byteArray0);
      assertEquals(18, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantArray0.length);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(18, byteArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantPool1.getLength());
      assertEquals(7, constantArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(18, byteArray0.length);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertNotNull(byteSequence2);
      assertEquals(0, byteSequence2.getIndex());
      assertEquals(18, byteArray0.length);
      
      long long0 = byteSequence2.skip(0L);
      assertEquals(0L, long0);
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertNotSame(byteSequence2, byteSequence1);
      assertNotSame(byteSequence2, byteSequence0);
      assertEquals(0, byteSequence2.getIndex());
      assertEquals(18, byteArray0.length);
      
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-55);
      byteArray1[1] = (byte) (-49);
      ByteSequence byteSequence3 = new ByteSequence(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-55), (byte) (-49)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteSequence3.equals((Object)byteSequence2));
      assertFalse(byteSequence3.equals((Object)byteSequence0));
      assertFalse(byteSequence3.equals((Object)byteSequence1));
      assertNotNull(byteSequence3);
      assertEquals(0, byteSequence3.getIndex());
      assertEquals(2, byteArray1.length);
      
      try { 
        Utility.codeToString(byteSequence3, constantPool1, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "invokedynamic");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte)100;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)100, (byte) (-110), (byte)100}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      
      int int0 = byteSequence0.readUnsignedByte();
      assertEquals(100, int0);
      assertArrayEquals(new byte[] {(byte)100, (byte) (-110), (byte)100}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      
      ConstantPool constantPool1 = null;
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("i2c", string0);
      assertArrayEquals(new byte[] {(byte)100, (byte) (-110), (byte)100}, byteArray0);
      assertNotNull(string0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("invokedynamic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `invokedynamic'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte) (-118);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)73, (byte)126, (byte)1, (byte)78, (byte) (-118)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[3];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)78, 68);
      assertNotNull(constantNameAndType0);
      assertEquals(68, constantNameAndType0.getSignatureIndex());
      assertEquals(78, constantNameAndType0.getNameIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      
      constantArray0[0] = (Constant) constantNameAndType0;
      byte byte0 = byteSequence0.readByte();
      assertEquals((byte)73, byte0);
      assertArrayEquals(new byte[] {(byte)73, (byte)126, (byte)1, (byte)78, (byte) (-118)}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      
      int int0 = byteSequence0.available();
      assertEquals(4, int0);
      assertArrayEquals(new byte[] {(byte)73, (byte)126, (byte)1, (byte)78, (byte) (-118)}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      
      boolean boolean0 = false;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(3, constantPool0.getLength());
      assertEquals(3, constantArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("iand", string0);
      assertArrayEquals(new byte[] {(byte)73, (byte)126, (byte)1, (byte)78, (byte) (-118)}, byteArray0);
      assertNotNull(string0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(3, constantPool0.getLength());
      assertEquals(5, byteArray0.length);
      assertEquals(3, constantArray0.length);
      
      byte[] byteArray1 = null;
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte) (-53);
      byteArray0[4] = (byte) (-55);
      byteArray0[5] = (byte) (-49);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)6, (byte)51, (byte) (-89), (byte) (-53), (byte) (-55), (byte) (-49)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)6, (byte)51, (byte) (-89), (byte) (-53), (byte) (-55), (byte) (-49)}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(6, byteArray0.length);
      
      long long0 = byteSequence1.skip((byte) (-49));
      assertEquals(0L, long0);
      assertArrayEquals(new byte[] {(byte)6, (byte)51, (byte) (-89), (byte) (-53), (byte) (-55), (byte) (-49)}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(6, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence1, constantPool0, false);
      assertEquals("iconst_3", string0);
      assertArrayEquals(new byte[] {(byte)6, (byte)51, (byte) (-89), (byte) (-53), (byte) (-55), (byte) (-49)}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(string0);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence1.getIndex());
      assertEquals(0, constantArray0.length);
      assertEquals(6, byteArray0.length);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(0, constantPool1.getLength());
      assertEquals(0, constantArray0.length);
      
      String string1 = Utility.codeToString(byteSequence1, constantPool1, false);
      assertEquals("baload", string1);
      assertArrayEquals(new byte[] {(byte)6, (byte)51, (byte) (-89), (byte) (-53), (byte) (-55), (byte) (-49)}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(string1);
      assertNotSame(byteSequence1, byteSequence0);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(2, byteSequence1.getIndex());
      assertEquals(0, constantPool1.getLength());
      assertEquals(0, constantArray0.length);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte) (-118);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)73, (byte) (-128), (byte)1, (byte)78, (byte) (-118)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[3];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)78, 68);
      assertNotNull(constantNameAndType0);
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(78, constantNameAndType0.getNameIndex());
      assertEquals(68, constantNameAndType0.getSignatureIndex());
      
      constantArray0[0] = (Constant) constantNameAndType0;
      byte byte0 = byteSequence0.readByte();
      assertEquals((byte)73, byte0);
      assertArrayEquals(new byte[] {(byte)73, (byte) (-128), (byte)1, (byte)78, (byte) (-118)}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      
      int int0 = byteSequence0.available();
      assertEquals(4, int0);
      assertArrayEquals(new byte[] {(byte)73, (byte) (-128), (byte)1, (byte)78, (byte) (-118)}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      
      boolean boolean0 = false;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(3, constantPool0.getLength());
      assertEquals(3, constantArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("ior", string0);
      assertArrayEquals(new byte[] {(byte)73, (byte) (-128), (byte)1, (byte)78, (byte) (-118)}, byteArray0);
      assertNotNull(string0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(3, constantPool0.getLength());
      assertEquals(5, byteArray0.length);
      assertEquals(3, constantArray0.length);
      
      byte[] byteArray1 = null;
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ConstantInteger constantInteger0 = new ConstantInteger(176);
      assertNotNull(constantInteger0);
      assertEquals(176, constantInteger0.getBytes());
      assertEquals((byte)3, constantInteger0.getTag());
      
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(176, 176);
      assertNotNull(constantMethodHandle0);
      assertEquals(176, constantMethodHandle0.getReferenceIndex());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals(176, constantMethodHandle0.getReferenceKind());
      
      ConstantLong constantLong0 = new ConstantLong(1L);
      assertNotNull(constantLong0);
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals(1L, constantLong0.getBytes());
      
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantInteger0;
      constantArray0[1] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)62;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)62}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(1, byteArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantPool1.getLength());
      assertEquals(2, constantArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)62}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(1, byteArray0.length);
      
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertNotNull(constantPool2);
      assertEquals(2, constantPool2.getLength());
      assertEquals(2, constantArray0.length);
      
      String string0 = Utility.codeToString(byteSequence1, constantPool2, false);
      assertEquals("istore_3", string0);
      assertArrayEquals(new byte[] {(byte)62}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertNotNull(string0);
      assertNotSame(byteSequence1, byteSequence0);
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      assertEquals(1, byteSequence1.getIndex());
      assertEquals(2, constantPool2.getLength());
      assertEquals(2, constantArray0.length);
      assertEquals(1, byteArray0.length);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)62}, byteArray0);
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertNotNull(byteSequence2);
      assertEquals(0, byteSequence2.getIndex());
      assertEquals(1, byteArray0.length);
      
      Constant[] constantArray1 = new Constant[8];
      assertFalse(constantArray1.equals((Object)constantArray0));
      
      constantArray1[0] = (Constant) constantInteger0;
      constantArray1[1] = (Constant) constantInteger0;
      constantArray1[2] = (Constant) constantInteger0;
      constantArray1[3] = (Constant) constantMethodHandle0;
      constantArray1[4] = (Constant) constantMethodHandle0;
      constantArray1[5] = (Constant) constantMethodHandle0;
      constantArray1[6] = (Constant) constantLong0;
      constantArray1[7] = (Constant) constantLong0;
      ConstantPool constantPool3 = new ConstantPool(constantArray1);
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertFalse(constantArray1.equals((Object)constantArray0));
      assertNotNull(constantPool3);
      assertEquals(8, constantPool3.getLength());
      assertEquals(8, constantArray1.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 55, 11, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)41;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-72), (byte)41}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(2, byteArray0.length);
      
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-72), (byte)41}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(2, byteArray0.length);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-72), (byte)41}, byteArray0);
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertNotNull(byteSequence2);
      assertEquals(0, byteSequence2.getIndex());
      assertEquals(2, byteArray0.length);
      
      try { 
        Utility.codeToString(byteSequence2, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-85);
      byteArray0[0] = (byte) (-85);
      byte byte1 = (byte) (-79);
      byteArray0[1] = (byte) (-79);
      byte byte2 = (byte) (-72);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-85), (byte) (-79), (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-85), (byte) (-79), (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(4, byteArray0.length);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-85), (byte) (-79), (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertNotNull(byteSequence2);
      assertEquals(0, byteSequence2.getIndex());
      assertEquals(4, byteArray0.length);
      
      try { 
        Utility.codeToString(byteSequence2, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("G$+_ZT)dbkK6Bw1>)#)", false);
      assertNotNull(byteArray0);
      assertEquals(18, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantArray0.length);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(18, byteArray0.length);
      
      short short0 = byteSequence0.readShort();
      assertEquals((short)18176, short0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(18, byteArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantPool1.getLength());
      assertEquals(7, constantArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("swap", string0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(string0);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(7, constantPool0.getLength());
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(7, constantPool1.getLength());
      assertEquals(18, byteArray0.length);
      assertEquals(7, constantArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(18, byteArray0.length);
      
      Constant[] constantArray1 = new Constant[0];
      assertFalse(constantArray1.equals((Object)constantArray0));
      
      ConstantPool constantPool2 = new ConstantPool(constantArray1);
      assertFalse(constantArray1.equals((Object)constantArray0));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertNotNull(constantPool2);
      assertEquals(0, constantPool2.getLength());
      assertEquals(0, constantArray1.length);
      
      String string1 = Utility.codeToString(byteArray0, constantPool2, (-456), (-456), true);
      assertEquals("0:    dstore_0\n1:    nop\n2:    swap\n3:    dup_x1\n4:    bastore\n5:    dload_3\n6:    isub\n7:    fadd\n8:    dmul\n9:    astore_0\n10:   istore\t\t%66\n12:   dneg\n13:   daload\n14:   istore_3\n15:   dload_3\n16:   fload_1\n17:   dload_3\n", string1);
      assertFalse(constantArray1.equals((Object)constantArray0));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(constantArray1, constantArray0);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      assertEquals(0, constantPool2.getLength());
      assertEquals(18, byteArray0.length);
      assertEquals(0, constantArray1.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 91, (-456), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)56, (byte) (-79), (byte) (-79), (byte)39}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      
      ConstantFloat constantFloat0 = new ConstantFloat((byte)39);
      assertNotNull(constantFloat0);
      assertEquals(39.0F, constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)56, (byte) (-79), (byte) (-79), (byte)39}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(4, byteArray0.length);
      
      ConstantFloat constantFloat1 = new ConstantFloat(25.498373F);
      assertFalse(constantFloat1.equals((Object)constantFloat0));
      assertNotNull(constantFloat1);
      assertEquals(25.498373F, constantFloat1.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat1.getTag());
      
      ConstantFloat constantFloat2 = new ConstantFloat(constantFloat0);
      assertFalse(constantFloat0.equals((Object)constantFloat1));
      assertTrue(constantFloat2.equals((Object)constantFloat0));
      assertFalse(constantFloat2.equals((Object)constantFloat1));
      assertNotNull(constantFloat2);
      assertEquals(39.0F, constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals((byte)4, constantFloat2.getTag());
      assertEquals(39.0F, constantFloat2.getBytes(), 0.01F);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteSequence1, constantPool0, false);
      assertEquals("fstore\t\t%177", string0);
      assertArrayEquals(new byte[] {(byte)56, (byte) (-79), (byte) (-79), (byte)39}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(string0);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(2, byteSequence1.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(4, byteArray0.length);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)56, (byte) (-79), (byte) (-79), (byte)39}, byteArray0);
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertNotNull(byteSequence2);
      assertEquals(0, byteSequence2.getIndex());
      assertEquals(4, byteArray0.length);
      
      String string1 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertEquals("return", string1);
      assertArrayEquals(new byte[] {(byte)56, (byte) (-79), (byte) (-79), (byte)39}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence2));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(byteSequence1, byteSequence2);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(3, byteSequence1.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(4, byteArray0.length);
      
      String string2 = null;
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)0;
      byteArray0[5] = (byte)17;
      byteArray0[3] = (byte) (-128);
      ConstantDouble constantDouble0 = new ConstantDouble((byte)37);
      assertNotNull(constantDouble0);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals(37.0, constantDouble0.getBytes(), 0.01);
      
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(3, constantPool0.getLength());
      assertEquals(3, constantArray0.length);
      
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)37;
      byteArray1[1] = (byte)37;
      byteArray1[2] = (byte)17;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertArrayEquals(new byte[] {(byte)37, (byte)37, (byte)17}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(3, byteArray1.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("fload_3", string0);
      assertArrayEquals(new byte[] {(byte)37, (byte)37, (byte)17}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(string0);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(3, constantArray0.length);
      assertEquals(3, byteArray1.length);
      
      String string1 = Utility.convertString(".1oly");
      assertEquals(".1oly", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = Utility.equals(byteArray1, byteArray1);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)37, (byte)37, (byte)17}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray1.length);
      
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, "goto", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = Utility.accessToString(9, false);
      assertEquals("public static", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)127;
      ConstantFloat constantFloat0 = new ConstantFloat((byte)127);
      assertNotNull(constantFloat0);
      assertEquals(127.0F, constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("SAME_LOCALS_1_STACK");
      assertNotNull(constantUtf8_0);
      assertEquals("SAME_LOCALS_1_STACK", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)127);
      assertNotNull(constantMethodType0);
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(127, constantMethodType0.getDescriptorIndex());
      
      String string1 = constantUtf8_0.toString();
      assertEquals("CONSTANT_Utf8[1](\"SAME_LOCALS_1_STACK\")", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("SAME_LOCALS_1_STACK", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantFloat0;
      constantArray0[1] = (Constant) constantMethodType0;
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(3, constantPool1.getLength());
      assertEquals(3, constantArray0.length);
      
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertNotNull(constantPool2);
      assertEquals(3, constantPool2.getLength());
      assertEquals(3, constantArray0.length);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)73, (byte)127, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      
      String string2 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("dstore_2", string2);
      assertArrayEquals(new byte[] {(byte)73, (byte)127, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(string2);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(3, constantPool1.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      assertEquals(3, constantArray0.length);
      
      String string3 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("land", string3);
      assertArrayEquals(new byte[] {(byte)73, (byte)127, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(string3);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(3, constantPool1.getLength());
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      assertEquals(3, constantArray0.length);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      
      Constant[] constantArray0 = new Constant[0];
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-90);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-90), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".ja+");
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("if_acmpne\t\t#0", string0);
      assertArrayEquals(new byte[] {(byte) (-90), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      assertEquals(6, byteArray0.length);
      
      try { 
        Utility.typeOfMethodSignature(".ja+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .ja+
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte) (-118);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)85, (byte) (-45), (byte)45, (byte)7, (byte) (-81), (byte) (-118), (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      byteArray0[6] = (byte)43;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte)85, (byte) (-45), (byte)45, (byte)7, (byte) (-81), (byte) (-118), (byte)43}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(7, byteArray0.length);
      
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)85, (byte) (-45), (byte)45, (byte)7, (byte) (-81), (byte) (-118), (byte)43}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      
      int int0 = byteSequence0.available();
      assertEquals(7, int0);
      assertArrayEquals(new byte[] {(byte)85, (byte) (-45), (byte)45, (byte)7, (byte) (-81), (byte) (-118), (byte)43}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("castore", string0);
      assertArrayEquals(new byte[] {(byte)85, (byte) (-45), (byte)45, (byte)7, (byte) (-81), (byte) (-118), (byte)43}, byteArray0);
      assertNotNull(string0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      
      byte[] byteArray1 = null;
      ByteSequence byteSequence1 = null;
      try {
        byteSequence1 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      boolean boolean0 = locale0.hasExtensions();
      assertFalse(boolean0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("", locale1.getVariant());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-116);
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "invokedynamic");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte) (-22);
      byteArray0[4] = (byte)80;
      byteArray0[5] = (byte) (-110);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-116), (byte)86, (byte)100, (byte) (-22), (byte)80, (byte) (-110)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      
      ConstantPool constantPool0 = null;
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean2);
      assertArrayEquals(new byte[] {(byte) (-116), (byte)86, (byte)100, (byte) (-22), (byte)80, (byte) (-110)}, byteArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(6, byteArray0.length);
      
      boolean boolean3 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "invokedynamic");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      ConstantPool constantPool1 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1351, (-340), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-88);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-79), (byte) (-88), (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      
      ConstantFloat constantFloat0 = new ConstantFloat((byte)0);
      assertNotNull(constantFloat0);
      assertEquals(0.0F, constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      assertTrue(constantFloat1.equals((Object)constantFloat0));
      assertNotNull(constantFloat1);
      assertEquals(0.0F, constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals(0.0F, constantFloat1.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat1.getTag());
      
      short short0 = byteSequence0.readShort();
      assertEquals((short)177, short0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-79), (byte) (-88), (byte)0}, byteArray0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$A$b1$a8$A", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-79), (byte) (-88), (byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals(4, byteArray0.length);
      
      short short1 = Utility.searchOpcode(">GeyqX)1?t^");
      assertEquals((short) (-1), short1);
      assertFalse(short1 == short0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (short) (-1), 19, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    return
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "invokedynamic");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte)100;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)100, (byte) (-110), (byte)100}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      
      ConstantPool constantPool1 = null;
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("isub", string0);
      assertArrayEquals(new byte[] {(byte)100, (byte) (-110), (byte)100}, byteArray0);
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("invokedynamic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `invokedynamic'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      String string0 = Utility.printArray(objectArray0, false, false);
      assertNotNull(string0);
      assertEquals(2, objectArray0.length);
      
      String string1 = Utility.compactClassName("java.lang.Object@36790839, java.lang.Object@4b4b85fa", true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.getSignature("C+z0a6*'5=('9F_r$ZZ");
      assertEquals("LC+z0a6*'5=('9F_r$ZZ;", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = Utility.methodSignatureReturnType("LC+z0a6*'5=('9F_r$ZZ;", false);
      assertEquals("C+z0a6*'5=('9F_r$ZZ", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte) (-124);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)39, (byte)41, (byte)71, (byte)108, (byte) (-124)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      
      byteSequence0.close();
      assertArrayEquals(new byte[] {(byte)39, (byte)41, (byte)71, (byte)108, (byte) (-124)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      
      long long0 = byteSequence0.skip(0L);
      assertEquals(0L, long0);
      assertArrayEquals(new byte[] {(byte)39, (byte)41, (byte)71, (byte)108, (byte) (-124)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 71
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte) (-72);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-72), (byte) (-72), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte) (-72), (byte) (-72));
      assertNotNull(constantInterfaceMethodref0);
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals((-72), constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals((-72), constantInterfaceMethodref0.getClassIndex());
      
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-72), (byte) (-72), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(5, byteArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 47104. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = "if_icmpge";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "if_icmpge");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-62);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-62)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(1, byteArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-62)}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(1, byteArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("monitorenter", string1);
      assertArrayEquals(new byte[] {(byte) (-62)}, byteArray0);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(byteSequence0, byteSequence1);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(1, byteArray0.length);
      
      String string2 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string2);
      assertArrayEquals(new byte[] {(byte) (-62)}, byteArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(1, byteArray0.length);
      
      // Undeclared exception!
      try { 
        byteSequence1.read(byteArray0, 201, 206);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      
      Constant[] constantArray0 = new Constant[0];
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-77);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-77), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      
      String string0 = ".jar";
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".jar");
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      String string1 = "eTELiSR;BD$f4dZ2ai";
      try { 
        Utility.decode("eTELiSR;BD$f4dZ2ai", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = "if_icmpge";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "if_icmpge");
      assertFalse(boolean0);
      
      String string1 = Utility.compactClassName("if_icmpge");
      assertEquals("if_icmpge", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte)97;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-124), (byte)122, (byte) (-86), (byte)97}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("iinc\t\t%122\t-86", string2);
      assertArrayEquals(new byte[] {(byte) (-124), (byte)122, (byte) (-86), (byte)97}, byteArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      
      try { 
        Utility.typeOfMethodSignature("if_icmpge");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: if_icmpge
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte) (-60);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-120), (byte) (-86), (byte)4, (byte) (-81), (byte) (-60)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      
      ConstantFloat constantFloat0 = new ConstantFloat(2690.15F);
      assertNotNull(constantFloat0);
      assertEquals(2690.15F, constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-120), (byte) (-86), (byte)4, (byte) (-81), (byte) (-60)}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(5, byteArray0.length);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-120), (byte) (-86), (byte)4, (byte) (-81), (byte) (-60)}, byteArray0);
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertNotNull(byteSequence2);
      assertEquals(0, byteSequence2.getIndex());
      assertEquals(5, byteArray0.length);
      
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-120), (byte) (-86), (byte)4, (byte) (-81), (byte) (-60)}, byteArray0);
      assertFalse(byteSequence3.equals((Object)byteSequence0));
      assertFalse(byteSequence3.equals((Object)byteSequence2));
      assertFalse(byteSequence3.equals((Object)byteSequence1));
      assertNotNull(byteSequence3);
      assertEquals(0, byteSequence3.getIndex());
      assertEquals(5, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      assertEquals("l2i", string0);
      assertArrayEquals(new byte[] {(byte) (-120), (byte) (-86), (byte)4, (byte) (-81), (byte) (-60)}, byteArray0);
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence3));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertNotNull(string0);
      assertNotSame(byteSequence2, byteSequence0);
      assertNotSame(byteSequence2, byteSequence3);
      assertNotSame(byteSequence2, byteSequence1);
      assertEquals(1, byteSequence2.getIndex());
      assertEquals(5, byteArray0.length);
      
      // Undeclared exception!
      try { 
        byteSequence2.read(byteArray0, 182, (int) (byte) (-60));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      objectArray0[0] = object0;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte) (-31);
      byteArray0[5] = (byte) (-11);
      byteArray0[6] = (byte)82;
      byteArray0[7] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-96), (byte) (-1), (byte)5, (byte)75, (byte) (-31), (byte) (-11), (byte)82, (byte)86}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(8, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("if_icmpne\t\t#-251", string0);
      assertArrayEquals(new byte[] {(byte) (-96), (byte) (-1), (byte)5, (byte)75, (byte) (-31), (byte) (-11), (byte)82, (byte)86}, byteArray0);
      assertNotNull(string0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(8, byteArray0.length);
      
      byte byte0 = byteSequence0.readByte();
      assertEquals((byte)75, byte0);
      assertArrayEquals(new byte[] {(byte) (-96), (byte) (-1), (byte)5, (byte)75, (byte) (-31), (byte) (-11), (byte)82, (byte)86}, byteArray0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = "e3";
      String string1 = Utility.getSignature("e3");
      assertEquals("Le3;", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = Utility.setBit((-219), 200);
      assertEquals((-219), int0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-51);
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte) (-54);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-83), (byte) (-44), (byte) (-51), (byte)92, (byte) (-54)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lreturn", string2);
      assertArrayEquals(new byte[] {(byte) (-83), (byte) (-44), (byte) (-51), (byte)92, (byte) (-54)}, byteArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      
      // Undeclared exception!
      try { 
        byteSequence0.read(byteArray0, 3781, (int) (byte)92);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-86);
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-86), (byte) (-86), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte) (-86), (byte) (-86));
      assertNotNull(constantInterfaceMethodref0);
      assertEquals((-86), constantInterfaceMethodref0.getClassIndex());
      assertEquals((-86), constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, constantArray0.length);
      
      LocalVariableTable localVariableTable0 = new LocalVariableTable((-455), (-455), (LocalVariable[]) null, constantPool1);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(localVariableTable0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertEquals((byte)5, localVariableTable0.getTag());
      assertEquals((-455), localVariableTable0.getLength());
      assertEquals(0, localVariableTable0.getTableLength());
      assertEquals((-455), localVariableTable0.getNameIndex());
      assertEquals(1, constantArray0.length);
      
      try { 
        Utility.methodSignatureToString("impdep2", "impdep1", "goto", false, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: impdep2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte) (-2);
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)59;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-99), (byte) (-2), (byte)0, (byte) (-99), (byte)1, (byte)59}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte) (-2), (byte)0);
      assertNotNull(constantInterfaceMethodref0);
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals(0, constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals((-2), constantInterfaceMethodref0.getClassIndex());
      
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(0, constantPool1.getLength());
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-99), (byte) (-2), (byte)0, (byte) (-99), (byte)1, (byte)59}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(6, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence1, constantPool1);
      assertEquals("ifgt\t\t#-512", string0);
      assertArrayEquals(new byte[] {(byte) (-99), (byte) (-2), (byte)0, (byte) (-99), (byte)1, (byte)59}, byteArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(string0);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(0, constantPool1.getLength());
      assertEquals(3, byteSequence1.getIndex());
      assertEquals(6, byteArray0.length);
      
      try { 
        Utility.decode("ifgt\t\t#-512", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-73);
      byteArray0[3] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-73), (byte)0, (byte)0, (byte) (-73), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte) (-73), (byte)0);
      assertNotNull(constantInterfaceMethodref0);
      assertEquals((-73), constantInterfaceMethodref0.getClassIndex());
      assertEquals(0, constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-73), (byte)0, (byte)0, (byte) (-73), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(9, byteArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = Utility.getSignature("e3");
      assertEquals("Le3;", string0);
      assertNotNull(string0);
      
      int int0 = Utility.setBit((-219), 200);
      assertEquals((-219), int0);
      
      short short0 = Utility.searchOpcode("|_[%M#z");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)52;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)58;
      byteArray0[6] = (byte)76;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      int int1 = 195;
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-1722771398), 195, false);
      assertEquals("0:    caload\n1:    nop\n2:    aload_3\n3:    ixor\n4:    iconst_2\n5:    astore\t\t%76\n", string1);
      assertArrayEquals(new byte[] {(byte)52, (byte)0, (byte)45, (byte) (-126), (byte)5, (byte)58, (byte)76}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(0, constantPool0.getLength());
      assertEquals(7, byteArray0.length);
      
      // Undeclared exception!
      try { 
        constantPool0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Utility.signatureToString("[Z]");
      assertEquals("boolean[]", string0);
      assertNotNull(string0);
      
      String string1 = Utility.signatureToString("[Z]", false);
      assertEquals("boolean[]", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-73), (byte) (-73), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte) (-73), (byte) (-73));
      assertNotNull(constantInterfaceMethodref0);
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals((-73), constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals((-73), constantInterfaceMethodref0.getClassIndex());
      
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-73), (byte) (-73), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(9, byteArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, constantArray0.length);
      
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-73));
      assertNotNull(constantFloat0);
      assertEquals((-73.0F), constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      assertTrue(constantFloat1.equals((Object)constantFloat0));
      assertNotNull(constantFloat1);
      assertEquals((-73.0F), constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals((byte)4, constantFloat1.getTag());
      assertEquals((-73.0F), constantFloat1.getBytes(), 0.01F);
      
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertNotNull(constantPool2);
      assertEquals(1, constantPool2.getLength());
      assertEquals(1, constantArray0.length);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-73), (byte) (-73), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertNotNull(byteSequence2);
      assertEquals(0, byteSequence2.getIndex());
      assertEquals(9, byteArray0.length);
      
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-73), (byte) (-73), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence3.equals((Object)byteSequence0));
      assertFalse(byteSequence3.equals((Object)byteSequence1));
      assertFalse(byteSequence3.equals((Object)byteSequence2));
      assertNotNull(byteSequence3);
      assertEquals(0, byteSequence3.getIndex());
      assertEquals(9, byteArray0.length);
      
      byteSequence3.close();
      assertArrayEquals(new byte[] {(byte) (-73), (byte) (-73), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence3.equals((Object)byteSequence0));
      assertFalse(byteSequence3.equals((Object)byteSequence1));
      assertFalse(byteSequence3.equals((Object)byteSequence2));
      assertNotSame(byteSequence3, byteSequence0);
      assertNotSame(byteSequence3, byteSequence1);
      assertNotSame(byteSequence3, byteSequence2);
      assertEquals(0, byteSequence3.getIndex());
      assertEquals(9, byteArray0.length);
      
      ConstantPool constantPool3 = new ConstantPool(constantArray0);
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertNotNull(constantPool3);
      assertEquals(1, constantPool3.getLength());
      assertEquals(1, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, constantPool3, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 46848. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = "org.apache.bcel.classfile.Utility$1";
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(54, (-4551));
      assertNotNull(constantInterfaceMethodref0);
      assertEquals((-4551), constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals(54, constantInterfaceMethodref0.getClassIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      String string1 = constantPool0.toString();
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)86;
      byte byte0 = (byte)9;
      byteArray0[1] = (byte)9;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)86, (byte)9}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(2, byteArray0.length);
      
      String string2 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("sastore", string2);
      assertArrayEquals(new byte[] {(byte)86, (byte)9}, byteArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantArray0.length);
      assertEquals(2, byteArray0.length);
      
      try { 
        Utility.methodSignatureReturnType("|_[%M#z", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `|_[%M#z'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-73), (byte) (-73), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte) (-73), (byte) (-73));
      assertNotNull(constantInterfaceMethodref0);
      assertEquals((-73), constantInterfaceMethodref0.getClassIndex());
      assertEquals((-73), constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-73), (byte) (-73), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(9, byteArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 46848. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-75);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-75), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte) (-75), (byte)0);
      assertNotNull(constantInterfaceMethodref0);
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals((-75), constantInterfaceMethodref0.getClassIndex());
      assertEquals(0, constantInterfaceMethodref0.getNameAndTypeIndex());
      
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-75));
      assertNotNull(constantFloat0);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals((-75.0F), constantFloat0.getBytes(), 0.01F);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-75), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(9, byteArray0.length);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-75), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertNotNull(byteSequence2);
      assertEquals(0, byteSequence2.getIndex());
      assertEquals(9, byteArray0.length);
      
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-75), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence3.equals((Object)byteSequence2));
      assertFalse(byteSequence3.equals((Object)byteSequence1));
      assertFalse(byteSequence3.equals((Object)byteSequence0));
      assertNotNull(byteSequence3);
      assertEquals(0, byteSequence3.getIndex());
      assertEquals(9, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      int int0 = byteSequence2.available();
      assertEquals(9, int0);
      assertArrayEquals(new byte[] {(byte) (-75), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence3));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertNotSame(byteSequence2, byteSequence0);
      assertNotSame(byteSequence2, byteSequence3);
      assertNotSame(byteSequence2, byteSequence1);
      assertEquals(0, byteSequence2.getIndex());
      assertEquals(9, byteArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 0. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)0;
      String string0 = Utility.getSignature("goto_w");
      assertEquals("Lgoto_w;", string0);
      assertNotNull(string0);
      
      String string1 = Utility.methodSignatureReturnType("Lgoto_w;", false);
      assertEquals("goto_w", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string2 = Utility.printArray((Object[]) null, false, true);
      assertNull(string2);
      
      int int0 = Utility.setBit((-2474), (byte)0);
      assertEquals((-2473), int0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte) (-39);
      byteArray0[5] = (byte)67;
      byteArray0[6] = (byte) (-101);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)64, (byte) (-115), (byte)8, (byte) (-95), (byte) (-39), (byte)67, (byte) (-101)}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      char char0 = 'q';
      boolean boolean1 = false;
      String string0 = Utility.format(95, (byte) (-101), false, 'q');
      assertEquals("95", string0);
      assertNotNull(string0);
      
      try { 
        Utility.typeOfSignature("95");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 95
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      
      String string0 = locale0.getDisplayVariant(locale0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String string1 = Utility.methodTypeToSignature("", stringArray0);
      assertEquals("(L;)L;", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, stringArray0.length);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string2 = Utility.accessToString(62, true);
      assertEquals("private protected static final", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      byte byte0 = Utility.typeOfMethodSignature("(L;)L;");
      assertEquals((byte)14, byte0);
      
      String string3 = Utility.methodSignatureToString("(L;)L;", "new", "private protected static final");
      assertEquals("private protected static final  new( arg0)", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)14;
      byteArray0[7] = (byte)14;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)14, (byte)14, (byte)14, (byte)14, (byte)14, (byte)14, (byte)14, (byte)14}, byteArray0);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      
      Locale locale1 = Locale.ITALIAN;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("it", locale1.toString());
      assertEquals("", locale1.getCountry());
      
      String string0 = locale1.getDisplayVariant(locale0);
      assertEquals("", string0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(string0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("it", locale1.toString());
      assertEquals("", locale1.getCountry());
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      String string1 = locale1.getDisplayName(locale0);
      assertEquals("\u610F\u5927\u5229\u6587", string1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("it", locale1.toString());
      assertEquals("", locale1.getCountry());
      
      String string2 = locale1.getDisplayLanguage(locale0);
      assertEquals("\u610F\u5927\u5229\u6587", string2);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("it", locale1.toString());
      assertEquals("", locale1.getCountry());
      
      Locale locale2 = Locale.forLanguageTag("");
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(locale2);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals("", locale2.getLanguage());
      assertEquals("", locale2.getISO3Language());
      assertEquals("", locale2.getCountry());
      assertEquals("", locale2.toString());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getISO3Country());
      
      ConstantFloat constantFloat0 = new ConstantFloat((-227));
      assertNotNull(constantFloat0);
      assertEquals((-227.0F), constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("\u610F\u5927\u5229\u6587");
      assertNotNull(constantUtf8_0);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("\u610F\u5927\u5229\u6587", constantUtf8_0.getBytes());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte) (-112);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)72, (byte)0, (byte)0, (byte)0, (byte)2, (byte) (-112)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      
      String string3 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("dstore_1", string3);
      assertArrayEquals(new byte[] {(byte)72, (byte)0, (byte)0, (byte)0, (byte)2, (byte) (-112)}, byteArray0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      assertEquals(6, byteArray0.length);
      
      try { 
        Utility.methodSignatureReturnType("interface", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `interface'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)36;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)36, (byte)36, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)36, (byte)36);
      assertNotNull(constantInterfaceMethodref0);
      assertEquals(36, constantInterfaceMethodref0.getClassIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals(36, constantInterfaceMethodref0.getNameAndTypeIndex());
      
      ConstantFloat constantFloat0 = new ConstantFloat((byte)36);
      assertNotNull(constantFloat0);
      assertEquals(36.0F, constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      assertTrue(constantFloat1.equals((Object)constantFloat0));
      assertNotNull(constantFloat1);
      assertEquals(36.0F, constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals((byte)4, constantFloat1.getTag());
      assertEquals(36.0F, constantFloat1.getBytes(), 0.01F);
      
      ConstantFloat constantFloat2 = (ConstantFloat)constantFloat1.clone();
      assertTrue(constantFloat0.equals((Object)constantFloat1));
      assertTrue(constantFloat1.equals((Object)constantFloat0));
      assertTrue(constantFloat2.equals((Object)constantFloat0));
      assertTrue(constantFloat2.equals((Object)constantFloat1));
      assertNotNull(constantFloat2);
      assertNotSame(constantFloat0, constantFloat1);
      assertNotSame(constantFloat0, constantFloat2);
      assertNotSame(constantFloat1, constantFloat2);
      assertNotSame(constantFloat1, constantFloat0);
      assertNotSame(constantFloat2, constantFloat0);
      assertNotSame(constantFloat2, constantFloat1);
      assertEquals(36.0F, constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals((byte)4, constantFloat1.getTag());
      assertEquals(36.0F, constantFloat1.getBytes(), 0.01F);
      assertEquals(36.0F, constantFloat2.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat2.getTag());
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      String string0 = constantPool0.toString();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      ConstantFloat constantFloat3 = (ConstantFloat)constantFloat0.copy();
      assertTrue(constantFloat0.equals((Object)constantFloat1));
      assertTrue(constantFloat0.equals((Object)constantFloat2));
      assertTrue(constantFloat3.equals((Object)constantFloat2));
      assertTrue(constantFloat3.equals((Object)constantFloat0));
      assertTrue(constantFloat3.equals((Object)constantFloat1));
      assertNotNull(constantFloat3);
      assertNotSame(constantFloat0, constantFloat1);
      assertNotSame(constantFloat0, constantFloat3);
      assertNotSame(constantFloat0, constantFloat2);
      assertNotSame(constantFloat3, constantFloat0);
      assertNotSame(constantFloat3, constantFloat2);
      assertNotSame(constantFloat3, constantFloat1);
      assertEquals(36.0F, constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals((byte)4, constantFloat3.getTag());
      assertEquals(36.0F, constantFloat3.getBytes(), 0.01F);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("fload_2", string1);
      assertArrayEquals(new byte[] {(byte)36, (byte)36, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(9, byteArray0.length);
      assertEquals(0, constantArray0.length);
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("<", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `<'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Utility.replace("if_icmpne", "if_icmpne", "if_icmpne");
      assertEquals("if_icmpne", string0);
      assertNotNull(string0);
      
      String string1 = Utility.getSignature(" ");
      assertEquals("L;", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      short short0 = Utility.searchOpcode("short");
      assertEquals((short) (-1), short0);
      
      String string2 = Utility.compactClassName("Y(Lo", false);
      assertEquals("Y(Lo", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-77);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)91, (int) (byte)20, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)123;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-114), (byte)123, (byte)123}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-114), (byte)123, (byte)123}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(3, byteArray0.length);
      
      byteSequence0.reset();
      assertArrayEquals(new byte[] {(byte) (-114), (byte)123, (byte)123}, byteArray0);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertNotSame(byteSequence0, byteSequence1);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence1, constantPool0);
      assertEquals("d2i", string0);
      assertArrayEquals(new byte[] {(byte) (-114), (byte)123, (byte)123}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(string0);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence1.getIndex());
      assertEquals(3, byteArray0.length);
      
      String string1 = Utility.format(10, (byte) (-114), false, '(');
      assertEquals("10", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      try { 
        Utility.typeOfSignature("10");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 10
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte) (-39);
      byteArray0[4] = (byte) (-117);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)23, (byte)37, (byte) (-121), (byte) (-39), (byte) (-117)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[2];
      ConstantDouble constantDouble0 = new ConstantDouble((-1.0));
      assertNotNull(constantDouble0);
      assertEquals((-1.0), constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      
      constantArray0[0] = (Constant) constantDouble0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(73, 195);
      assertNotNull(constantNameAndType0);
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(73, constantNameAndType0.getNameIndex());
      assertEquals(195, constantNameAndType0.getSignatureIndex());
      
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)23, (byte)37, (byte) (-121), (byte) (-39), (byte) (-117)}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(5, byteArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool0, constantPool1);
      assertEquals(2, constantPool1.getLength());
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("fload\t\t%37", string0);
      assertArrayEquals(new byte[] {(byte)23, (byte)37, (byte) (-121), (byte) (-39), (byte) (-117)}, byteArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertNotNull(string0);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(byteSequence0, byteSequence1);
      assertNotSame(constantPool0, constantPool1);
      assertEquals(2, constantPool1.getLength());
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(2, constantPool0.getLength());
      assertEquals(5, byteArray0.length);
      assertEquals(2, constantArray0.length);
      
      String string1 = Utility.convertString("fload\t\t%37");
      assertEquals("fload\t\t%37", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("fload\t\t%37", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `fload\t\t%37'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      
      String string0 = locale0.getDisplayVariant(locale0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      
      try { 
        Utility.methodSignatureToString("\t\t%", "", "", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t\t%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      Locale locale1 = Locale.ITALIAN;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getCountry());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("it", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      String string0 = locale1.getDisplayName(locale0);
      assertEquals("\u610F\u5927\u5229\u6587", string0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(string0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("it", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      
      Locale locale2 = Locale.US;
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertNotNull(locale2);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertEquals("US", locale2.getCountry());
      assertEquals("en_US", locale2.toString());
      assertEquals("en", locale2.getLanguage());
      assertEquals("USA", locale2.getISO3Country());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      
      Locale locale3 = Locale.CHINESE;
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale0));
      assertNotNull(locale3);
      assertNotSame(locale3, locale2);
      assertNotSame(locale3, locale1);
      assertNotSame(locale3, locale0);
      assertEquals("", locale3.getISO3Country());
      assertEquals("zh", locale3.getLanguage());
      assertEquals("", locale3.getVariant());
      assertEquals("zh", locale3.toString());
      assertEquals("", locale3.getCountry());
      assertEquals("zho", locale3.getISO3Language());
      
      ConstantFloat constantFloat0 = new ConstantFloat(2732.64F);
      assertNotNull(constantFloat0);
      assertEquals(2732.64F, constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      assertTrue(constantFloat1.equals((Object)constantFloat0));
      assertNotNull(constantFloat1);
      assertEquals(2732.64F, constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals(2732.64F, constantFloat1.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat1.getTag());
      
      ConstantFloat constantFloat2 = (ConstantFloat)constantFloat0.clone();
      assertTrue(constantFloat0.equals((Object)constantFloat1));
      assertTrue(constantFloat2.equals((Object)constantFloat1));
      assertTrue(constantFloat2.equals((Object)constantFloat0));
      assertNotNull(constantFloat2);
      assertNotSame(constantFloat0, constantFloat1);
      assertNotSame(constantFloat0, constantFloat2);
      assertNotSame(constantFloat2, constantFloat0);
      assertNotSame(constantFloat2, constantFloat1);
      assertEquals(2732.64F, constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals((byte)4, constantFloat2.getTag());
      assertEquals(2732.64F, constantFloat2.getBytes(), 0.01F);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(0, constantPool1.getLength());
      assertEquals(0, constantArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte) (-65);
      byteArray0[5] = (byte) (-92);
      byteArray0[6] = (byte) (-88);
      byteArray0[7] = (byte) (-59);
      byteArray0[8] = (byte) (-100);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)84, (byte)3, (byte) (-84), (byte) (-86), (byte) (-65), (byte) (-92), (byte) (-88), (byte) (-59), (byte) (-100)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("bastore", string1);
      assertArrayEquals(new byte[] {(byte)84, (byte)3, (byte) (-84), (byte) (-86), (byte) (-65), (byte) (-92), (byte) (-88), (byte) (-59), (byte) (-100)}, byteArray0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(constantPool0, constantPool1);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantArray0.length);
      assertEquals(9, byteArray0.length);
      
      try { 
        Utility.methodSignatureReturnType("bastore", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `bastore'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      
      Constant[] constantArray0 = new Constant[0];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-77);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-77)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(1, byteArray0.length);
      
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      
      Locale locale1 = Locale.ITALIAN;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getISO3Country());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("it", locale1.toString());
      
      String string0 = locale1.getDisplayVariant(locale0);
      assertEquals("", string0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(string0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("it", locale1.toString());
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      ConstantFloat constantFloat0 = new ConstantFloat(246.262F);
      assertNotNull(constantFloat0);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals(246.262F, constantFloat0.getBytes(), 0.01F);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)82;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)82}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(1, byteArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)82}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(1, byteArray0.length);
      
      byteSequence1.close();
      assertArrayEquals(new byte[] {(byte)82}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(1, byteArray0.length);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(0, constantPool1.getLength());
      assertEquals(0, constantArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("dastore", string1);
      assertArrayEquals(new byte[] {(byte)82}, byteArray0);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(byteSequence0, byteSequence1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool1.getLength());
      assertEquals(0, constantArray0.length);
      assertEquals(1, byteArray0.length);
      
      byte byte0 = byteSequence1.readByte();
      assertEquals((byte)82, byte0);
      assertArrayEquals(new byte[] {(byte)82}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(1, byteSequence1.getIndex());
      assertEquals(1, byteArray0.length);
      
      try { 
        Utility.methodSignatureReturnType("R=Jq8HH5O", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R=Jq8HH5O'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string0 = Utility.classOrInterface((-844));
      assertEquals("class", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)93;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)93, (byte)93, (byte)93, (byte)93}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      
      byteSequence0.close();
      assertArrayEquals(new byte[] {(byte)93, (byte)93, (byte)93, (byte)93}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      
      byteSequence0.close();
      assertArrayEquals(new byte[] {(byte)93, (byte)93, (byte)93, (byte)93}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("dup2_x1", string1);
      assertArrayEquals(new byte[] {(byte)93, (byte)93, (byte)93, (byte)93}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      
      byte byte0 = byteSequence0.readByte();
      assertEquals((byte)93, byte0);
      assertArrayEquals(new byte[] {(byte)93, (byte)93, (byte)93, (byte)93}, byteArray0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      
      try { 
        Utility.methodSignatureReturnType("arraylength", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `arraylength'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)42, (byte)42, (byte)42, (byte)40, (byte)40}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)42, (byte)42, (byte)42, (byte)40, (byte)40}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(5, byteArray0.length);
      
      byteSequence1.close();
      assertArrayEquals(new byte[] {(byte)42, (byte)42, (byte)42, (byte)40, (byte)40}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(5, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("aload_0", string0);
      assertArrayEquals(new byte[] {(byte)42, (byte)42, (byte)42, (byte)40, (byte)40}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(string0);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(1, byteSequence1.getIndex());
      assertEquals(5, byteArray0.length);
      
      byte byte0 = byteSequence0.readByte();
      assertEquals((byte)42, byte0);
      assertArrayEquals(new byte[] {(byte)42, (byte)42, (byte)42, (byte)40, (byte)40}, byteArray0);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertNotSame(byteSequence0, byteSequence1);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      
      try { 
        Utility.methodSignatureReturnType("char", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `char'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      Locale locale1 = Locale.ITALIAN;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getCountry());
      assertEquals("it", locale1.toString());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      
      String string0 = locale1.getDisplayVariant(locale0);
      assertEquals("", string0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(string0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("it", locale1.toString());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      String string1 = locale1.getDisplayName(locale0);
      assertEquals("\u610F\u5927\u5229\u6587", string1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("it", locale1.toString());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      
      Locale locale2 = Locale.forLanguageTag("");
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(locale2);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals("", locale2.getCountry());
      assertEquals("", locale2.getLanguage());
      assertEquals("", locale2.toString());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getISO3Language());
      assertEquals("", locale2.getISO3Country());
      
      try { 
        Utility.typeOfSignature("HzL];a4.~s&^!%&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: HzL];a4.~s&^!%&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-86);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte) (-86);
      byteArray0[7] = (byte) (-86);
      byteArray0[8] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-86), (byte)0, (byte) (-86), (byte) (-86), (byte) (-86), (byte) (-86), (byte) (-86), (byte) (-86), (byte) (-86)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      short short0 = byteSequence0.readShort();
      assertEquals((short) (-22016), short0);
      assertArrayEquals(new byte[] {(byte) (-86), (byte)0, (byte) (-86), (byte) (-86), (byte) (-86), (byte) (-86), (byte) (-86), (byte) (-86), (byte) (-86)}, byteArray0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      
      boolean boolean1 = false;
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Utility.getSignature("impdep2");
      assertEquals("Limpdep2;", string0);
      assertNotNull(string0);
      
      ConstantFloat constantFloat0 = new ConstantFloat((-2150.058F));
      assertNotNull(constantFloat0);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals((-2150.058F), constantFloat0.getBytes(), 0.01F);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte) (-82);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)40, (byte)42, (byte) (-82)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)40, (byte)42, (byte) (-82)}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(3, byteArray0.length);
      
      byteSequence1.close();
      assertArrayEquals(new byte[] {(byte)40, (byte)42, (byte) (-82)}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(3, byteArray0.length);
      
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("dload_2", string1);
      assertArrayEquals(new byte[] {(byte)40, (byte)42, (byte) (-82)}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(1, byteSequence1.getIndex());
      assertEquals(3, byteArray0.length);
      
      byte byte0 = byteSequence1.readByte();
      assertEquals((byte)42, byte0);
      assertArrayEquals(new byte[] {(byte)40, (byte)42, (byte) (-82)}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(2, byteSequence1.getIndex());
      assertEquals(3, byteArray0.length);
      
      try { 
        Utility.methodSignatureReturnType("object", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `object'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte byte0 = (byte) (-76);
      // Undeclared exception!
      try { 
        Utility.getSignature("[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = " ],D/uCY4iKq!";
      String string1 = Utility.getSignature(" ],D/uCY4iKq!");
      assertEquals("L],D/uCY4iKq!;", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-91);
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[0] = (byte) (-91);
      byte byte1 = (byte)82;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-91), (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("if_acmpeq\t\t#0", string2);
      assertArrayEquals(new byte[] {(byte) (-91), (byte)0, (byte)0}, byteArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-91), (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(3, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[5];
      ConstantFieldref constantFieldref0 = null;
      try {
        constantFieldref0 = new ConstantFieldref(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = "";
      String string1 = Utility.convertString("");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = ")-R*";
      String string3 = Utility.compactClassName(")\t", ")-R*", true);
      assertEquals(")\t", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte) (-125);
      byteArray0[5] = (byte)93;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 82, (int) (byte)32);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      byte byte0 = (byte) (-57);
      byte[] byteArray0 = new byte[6];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byteArray0[0] = (byte) (-57);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-57), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("ifnonnull\t\t#0", string0);
      assertArrayEquals(new byte[] {(byte) (-57), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("ifnonnull\t\t#0", "ifnonnull\t\t#0", "ifnonnull\t\t#0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ifnonnull\t\t#0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = Utility.signatureToString("Dd`}KS", true);
      assertEquals("double", string0);
      assertNotNull(string0);
      
      try { 
        Utility.typeOfMethodSignature("jsr_w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: jsr_w
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte byte0 = (byte) (-58);
      byte byte1 = (byte)90;
      byte byte2 = (byte)91;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte) (-72);
      byteArray0[5] = (byte)90;
      byteArray0[6] = (byte)91;
      byteArray0[7] = (byte) (-58);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-58), (byte)41, (byte)91, (byte)90, (byte) (-72), (byte)90, (byte)91, (byte) (-58)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(8, byteArray0.length);
      
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-58), (byte)41, (byte)91, (byte)90, (byte) (-72), (byte)90, (byte)91, (byte) (-58)}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(8, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("ifnull\t\t#10587", string0);
      assertArrayEquals(new byte[] {(byte) (-58), (byte)41, (byte)91, (byte)90, (byte) (-72), (byte)90, (byte)91, (byte) (-58)}, byteArray0);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertNotNull(string0);
      assertNotSame(byteSequence0, byteSequence1);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(8, byteArray0.length);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-58), (byte)41, (byte)91, (byte)90, (byte) (-72), (byte)90, (byte)91, (byte) (-58)}, byteArray0);
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertNotNull(byteSequence2);
      assertEquals(0, byteSequence2.getIndex());
      assertEquals(8, byteArray0.length);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(0, constantPool1.getLength());
      
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertNotNull(constantPool2);
      assertEquals(0, constantPool2.getLength());
      
      // Undeclared exception!
      try { 
        constantPool1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte) (-76);
      byteArray0[5] = (byte) (-76);
      byteArray0[6] = (byte) (-76);
      byteArray0[7] = (byte) (-76);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-76), (byte) (-76), (byte) (-76), (byte) (-76), (byte) (-76), (byte) (-76), (byte) (-76), (byte) (-76)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(8, byteArray0.length);
      
      ConstantFloat constantFloat0 = new ConstantFloat((-1000.28F));
      assertNotNull(constantFloat0);
      assertEquals((-1000.28F), constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      assertTrue(constantFloat1.equals((Object)constantFloat0));
      assertNotNull(constantFloat1);
      assertEquals((-1000.28F), constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals((-1000.28F), constantFloat1.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat1.getTag());
      
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantFloat1;
      constantArray0[1] = (Constant) constantFloat0;
      constantArray0[2] = (Constant) constantFloat0;
      constantArray0[3] = (Constant) constantFloat0;
      constantArray0[4] = (Constant) constantFloat0;
      constantArray0[5] = (Constant) constantFloat0;
      constantArray0[6] = (Constant) constantFloat1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 46260. Constant pool size is: 7
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = Utility.getSignature(" ],D/uCY4iKq!");
      assertEquals("L],D/uCY4iKq!;", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[0] = (byte) (-91);
      byteArray0[2] = (byte)82;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-91), (byte)0, (byte)82}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("if_acmpeq\t\t#82", string1);
      assertArrayEquals(new byte[] {(byte) (-91), (byte)0, (byte)82}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      
      String string2 = Utility.compactClassName(" ],D/uCY4iKq!", true);
      assertEquals(" ],D.uCY4iKq!", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(" ],D.uCY4iKq!", " ],D.uCY4iKq!", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      String string0 = "java.lang.java.lang.";
      byte[] byteArray0 = Utility.decode("java.lang.java.lang.", false);
      assertNotNull(byteArray0);
      assertEquals(20, byteArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals(0, constantArray0.length);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(20, byteArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(20, byteArray0.length);
      
      String string1 = Utility.codeToString(byteSequence1, constantPool1, true);
      assertEquals("fmul", string1);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals(1, byteSequence1.getIndex());
      assertEquals(0, constantArray0.length);
      assertEquals(20, byteArray0.length);
      
      String string2 = Utility.accessToString(12);
      assertEquals("protected static", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      try { 
        Utility.methodSignatureReturnType("java.lang.java.lang.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `java.lang.java.lang.'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      Locale locale1 = Locale.ITALIAN;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("it", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("it", locale1.getLanguage());
      assertEquals("ita", locale1.getISO3Language());
      
      String string0 = locale1.getDisplayVariant(locale0);
      assertEquals("", string0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(string0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("it", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("it", locale1.getLanguage());
      assertEquals("ita", locale1.getISO3Language());
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", "{O47GFO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Utility.getSignature("impdep2");
      assertEquals("Limpdep2;", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("PYvmH&yc", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `PYvmH&yc'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      int int0 = Utility.clearBit(7, 0);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-58);
      byteArray0[3] = (byte) (-58);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-58), (byte)0, (byte)0, (byte) (-58), (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("ifnull\t\t#0", string0);
      assertArrayEquals(new byte[] {(byte) (-58), (byte)0, (byte)0, (byte) (-58), (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("boolean", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `boolean'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)17;
      String string0 = Utility.compactClassName("r");
      assertEquals("r", string0);
      assertNotNull(string0);
      
      try { 
        Utility.typeOfSignature("3`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      
      Locale locale1 = Locale.ITALIAN;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getCountry());
      assertEquals("it", locale1.toString());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      
      String string0 = locale1.getDisplayVariant(locale0);
      assertEquals("", string0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(string0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("it", locale1.toString());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains(string0));
      assertEquals(0, linkedList1.size());
      
      String string1 = Locale.lookupTag(linkedList0, linkedList1);
      assertNull(string1);
      assertFalse(linkedList1.contains(string0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      
      String string2 = locale1.getDisplayName(locale0);
      assertEquals("\u610F\u5927\u5229\u6587", string2);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("it", locale1.toString());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      
      Locale locale2 = Locale.forLanguageTag("");
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(locale2);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals("", locale2.getLanguage());
      assertEquals("", locale2.getISO3Language());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getCountry());
      assertEquals("", locale2.toString());
      
      Locale locale3 = Locale.US;
      assertFalse(locale3.equals((Object)locale0));
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale1));
      assertNotNull(locale3);
      assertNotSame(locale3, locale0);
      assertNotSame(locale3, locale2);
      assertNotSame(locale3, locale1);
      assertEquals("", locale3.getVariant());
      assertEquals("en", locale3.getLanguage());
      assertEquals("USA", locale3.getISO3Country());
      assertEquals("en_US", locale3.toString());
      assertEquals("eng", locale3.getISO3Language());
      assertEquals("US", locale3.getCountry());
      
      Locale locale4 = Locale.CHINESE;
      assertFalse(locale4.equals((Object)locale0));
      assertFalse(locale4.equals((Object)locale3));
      assertFalse(locale4.equals((Object)locale2));
      assertFalse(locale4.equals((Object)locale1));
      assertNotNull(locale4);
      assertNotSame(locale4, locale0);
      assertNotSame(locale4, locale3);
      assertNotSame(locale4, locale2);
      assertNotSame(locale4, locale1);
      assertEquals("zho", locale4.getISO3Language());
      assertEquals("zh", locale4.getLanguage());
      assertEquals("", locale4.getISO3Country());
      assertEquals("", locale4.getVariant());
      assertEquals("", locale4.getCountry());
      assertEquals("zh", locale4.toString());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte)94;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)101, (byte)100, (byte)109, (byte)94}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)101, (byte)100, (byte)109, (byte)94}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(4, byteArray0.length);
      
      String string3 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("lsub", string3);
      assertArrayEquals(new byte[] {(byte)101, (byte)100, (byte)109, (byte)94}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(1, byteSequence1.getIndex());
      assertEquals(4, byteArray0.length);
      
      String string4 = Utility.printArray((Object[]) constantArray0);
      assertEquals("{}", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals(0, constantArray0.length);
      
      try { 
        Utility.methodSignatureArgumentTypes("org.apache.bcel.classfile.Utility$JavaWriter");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.bcel.classfile.Utility$JavaWriter
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)81;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-109);
      byteArray0[6] = (byte)15;
      byteArray0[7] = (byte)44;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)81, (byte)0, (byte)7, (byte) (-95), (byte) (-1), (byte) (-109), (byte)15, (byte)44}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(8, byteArray0.length);
      
      ConstantPool constantPool1 = null;
      boolean boolean0 = false;
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fastore", string0);
      assertArrayEquals(new byte[] {(byte)81, (byte)0, (byte)7, (byte) (-95), (byte) (-1), (byte) (-109), (byte)15, (byte)44}, byteArray0);
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(8, byteArray0.length);
      
      String string1 = Utility.printArray((Object[]) null);
      assertNull(string1);
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("nop", string2);
      assertArrayEquals(new byte[] {(byte)81, (byte)0, (byte)7, (byte) (-95), (byte) (-1), (byte) (-109), (byte)15, (byte)44}, byteArray0);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(8, byteArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.compactClassName("'Yol.)TI7ygJ7kwyq`", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = Utility.fillup("if_icmplt", 512, false, 'Y');
      assertEqualsif_icmplt", string0);
      assertNotNull(string0);
      
      try { 
        Utility.typeOfSignature("1o");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1o
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-76);
      byteArray0[3] = (byte) (-76);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-76), (byte)0, (byte)0, (byte) (-76), (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray0[0] = (byte) (-97);
      byteArray0[3] = (byte) (-97);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-97), (byte)0, (byte)0, (byte) (-97), (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("if_icmpeq\t\t#0", string0);
      assertArrayEquals(new byte[] {(byte) (-97), (byte)0, (byte)0, (byte) (-97), (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      
      String string1 = Utility.format(201, (-555), true, '~');
      assertEquals("201", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-97), (byte)0, (byte)0, (byte) (-97), (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(6, byteArray0.length);
      
      String string2 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("if_icmpeq\t\t#0", string2);
      assertArrayEquals(new byte[] {(byte) (-97), (byte)0, (byte)0, (byte) (-97), (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(3, byteSequence1.getIndex());
      assertEquals(6, byteArray0.length);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) "201";
      objectArray0[1] = (Object) "if_icmpeq\t\t#0";
      objectArray0[2] = (Object) "if_icmpeq\t\t#0";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) byteSequence1;
      String string3 = Utility.printArray(objectArray0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(5, objectArray0.length);
      
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertNotNull(byteSequence2);
      assertEquals(0, byteSequence2.getIndex());
      assertEquals(0, byteArray1.length);
      
      try { 
        Utility.codeToString(byteSequence2, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = Utility.fillup("blsz|_~_bb", 91, true, 'a');
      assertEquals("blsz|_~_bbaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("blsz|_~_bbaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `blsz|_~_bbaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      String string0 = Locale.lookupTag(linkedList0, linkedHashSet0);
      assertNull(string0);
      assertEquals(0, linkedList0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Locale.setDefault(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      
      String string1 = Utility.replace("O", "BB}$uSH\"n._*AU", "BB}$uSH\"n._*AU");
      assertEquals("O", string1);
      assertNotNull(string1);
      
      try { 
        Utility.methodSignatureReturnType("O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-10);
      byteArray0[4] = (byte)97;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)88, (byte)3, (byte) (-1), (byte) (-10), (byte)97}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("pop2", string0);
      assertArrayEquals(new byte[] {(byte)88, (byte)3, (byte) (-1), (byte) (-10), (byte)97}, byteArray0);
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(5, byteArray0.length);
      assertEquals(0, constantArray0.length);
      
      byte[] byteArray1 = Utility.decode("pop2", false);
      assertArrayEquals(new byte[] {(byte)112, (byte)111, (byte)112, (byte)50}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(4, byteArray1.length);
      
      try { 
        Utility.typeOfMethodSignature("eS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: eS
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)71;
      byteArray0[6] = (byte)99;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)32;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 8192, (-505), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      
      String string0 = locale1.getDisplayVariant(locale0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      byte[] byteArray0 = Utility.decode("l", false);
      assertArrayEquals(new byte[] {(byte)108}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals(0, constantArray0.length);
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      constantPool0.accept(emptyVisitor0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertNotSame(constantPool0, constantPool1);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)83;
      byteArray1[1] = (byte) (-58);
      byteArray1[2] = (byte)39;
      byteArray1[3] = (byte)76;
      byteArray1[4] = (byte) (-101);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertArrayEquals(new byte[] {(byte)83, (byte) (-58), (byte)39, (byte)76, (byte) (-101)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray1.length);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("aastore", string1);
      assertArrayEquals(new byte[] {(byte)83, (byte) (-58), (byte)39, (byte)76, (byte) (-101)}, byteArray1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(string1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantArray0.length);
      assertEquals(5, byteArray1.length);
      
      String string2 = Utility.compactClassName("j3HvNX6@u");
      assertEquals("j3HvNX6@u", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = Utility.classOrInterface((byte) (-101));
      assertEquals("interface", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      try { 
        Utility.methodSignatureReturnType("j3HvNX6@u", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `j3HvNX6@u'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      boolean boolean0 = locale0.hasExtensions();
      assertFalse(boolean0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)114;
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "invokedynamic");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byteArray0[1] = (byte)86;
      byte byte0 = (byte)100;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte) (-22);
      byteArray0[4] = (byte)80;
      byteArray0[5] = (byte) (-110);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)114, (byte)86, (byte)100, (byte) (-22), (byte)80, (byte) (-110)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      
      ConstantPool constantPool0 = null;
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("frem", string0);
      assertArrayEquals(new byte[] {(byte)114, (byte)86, (byte)100, (byte) (-22), (byte)80, (byte) (-110)}, byteArray0);
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("frem");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `frem'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-71);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-71), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      
      ConstantFloat constantFloat0 = new ConstantFloat((-2150.058F));
      assertNotNull(constantFloat0);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals((-2150.058F), constantFloat0.getBytes(), 0.01F);
      
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      assertTrue(constantFloat1.equals((Object)constantFloat0));
      assertNotNull(constantFloat1);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals((-2150.058F), constantFloat0.getBytes(), 0.01F);
      assertEquals((-2150.058F), constantFloat1.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat1.getTag());
      
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantFloat1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte) (-54);
      byteArray0[3] = (byte) (-112);
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      assertArrayEquals(new byte[] {(byte)4, (byte) (-36), (byte) (-54), (byte) (-112)}, byteArray0);
      assertNotNull(string0);
      assertEquals(4, byteArray0.length);
      
      short short0 = Utility.searchOpcode("$l$8b$I$A$A$A$A$A$A$A");
      assertEquals((short) (-1), short0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-54), 2660, true);
      assertEquals("0:    iconst_1\n1:    <illegal opcode>\n2:    breakpoint\n3:    d2f\n", string1);
      assertArrayEquals(new byte[] {(byte)4, (byte) (-36), (byte) (-54), (byte) (-112)}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(4, byteArray0.length);
      
      String string2 = Utility.compactClassName("$l$8b$I$A$A$A$A$A$A$A");
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      try { 
        Utility.decode("impdep2", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte) (-118);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)73, (byte) (-128), (byte)1, (byte)78, (byte) (-118)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[3];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)78, 68);
      assertNotNull(constantNameAndType0);
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(68, constantNameAndType0.getSignatureIndex());
      assertEquals(78, constantNameAndType0.getNameIndex());
      
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      assertArrayEquals(new byte[] {(byte)73, (byte) (-128), (byte)1, (byte)78, (byte) (-118)}, byteArray0);
      assertNotNull(constantInterfaceMethodref0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(18816, constantInterfaceMethodref0.getClassIndex());
      assertEquals(334, constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals(5, byteArray0.length);
      
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(124, (byte)78);
      assertNotNull(constantFieldref0);
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals(78, constantFieldref0.getNameAndTypeIndex());
      assertEquals(124, constantFieldref0.getClassIndex());
      
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      assertTrue(constantFieldref1.equals((Object)constantFieldref0));
      assertNotNull(constantFieldref1);
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals(78, constantFieldref0.getNameAndTypeIndex());
      assertEquals(124, constantFieldref0.getClassIndex());
      assertEquals((byte)9, constantFieldref1.getTag());
      assertEquals(124, constantFieldref1.getClassIndex());
      assertEquals(78, constantFieldref1.getNameAndTypeIndex());
      
      constantArray0[2] = (Constant) constantFieldref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(3, constantPool0.getLength());
      assertEquals(3, constantArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("l2d", string0);
      assertArrayEquals(new byte[] {(byte)73, (byte) (-128), (byte)1, (byte)78, (byte) (-118)}, byteArray0);
      assertNotNull(string0);
      assertEquals(5, byteSequence0.getIndex());
      assertEquals(3, constantPool0.getLength());
      assertEquals(5, byteArray0.length);
      assertEquals(3, constantArray0.length);
      
      String string1 = Utility.convertString("l2d");
      assertEquals("l2d", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)73, (byte) (-128), (byte)1, (byte)78, (byte) (-118)}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, "byte", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte) (-86);
      byteArray0[7] = (byte) (-86);
      byteArray0[8] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-86), (byte) (-86), (byte) (-86), (byte) (-86), (byte) (-86), (byte) (-86), (byte) (-86), (byte) (-86), (byte) (-86)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = Utility.getSignature(" ],D/uCY4iKq!");
      assertEquals("L],D/uCY4iKq!;", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string1 = Utility.signatureToString("L],D/uCY4iKq!;");
      assertEquals("],D.uCY4iKq!", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte)87;
      byte byte0 = (byte)49;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte) (-69);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1455, (int) (byte) (-69), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)61;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = Utility.isSet(0, (byte)61);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte)37;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)27, (byte)27, (byte)27, (byte)37, (byte)37}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals(0, constantArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("iload_1", string0);
      assertArrayEquals(new byte[] {(byte)27, (byte)27, (byte)27, (byte)37, (byte)37}, byteArray0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(string0);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals(5, byteArray0.length);
      assertEquals(0, constantArray0.length);
      
      String string1 = Utility.convertString("iload_1");
      assertEquals("iload_1", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      try { 
        Utility.methodSignatureReturnType("iload_1", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `iload_1'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)60;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)97, (byte)47, (byte)60}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      ConstantFloat constantFloat0 = new ConstantFloat((-1.0F));
      assertNotNull(constantFloat0);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals((-1.0F), constantFloat0.getBytes(), 0.01F);
      
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      assertTrue(constantFloat1.equals((Object)constantFloat0));
      assertNotNull(constantFloat1);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals((-1.0F), constantFloat0.getBytes(), 0.01F);
      assertEquals((-1.0F), constantFloat1.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat1.getTag());
      
      ConstantFloat constantFloat2 = new ConstantFloat(constantFloat0);
      assertTrue(constantFloat0.equals((Object)constantFloat1));
      assertTrue(constantFloat2.equals((Object)constantFloat0));
      assertTrue(constantFloat2.equals((Object)constantFloat1));
      assertNotNull(constantFloat2);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals((-1.0F), constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat2.getTag());
      assertEquals((-1.0F), constantFloat2.getBytes(), 0.01F);
      
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantFloat1;
      constantArray0[1] = (Constant) constantFloat2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantArray0.length);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)97, (byte)47, (byte)60}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("ladd", string0);
      assertArrayEquals(new byte[] {(byte)97, (byte)47, (byte)60}, byteArray0);
      assertNotNull(string0);
      assertEquals(2, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      assertEquals(2, constantArray0.length);
      
      String string1 = Utility.convertString("LHL!|'8f?TDaV");
      assertEquals("LHL!|\\'8f?TDaV", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = Utility.getSignature(" ],D/uCY4iKq!");
      assertEquals("L],D/uCY4iKq!;", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string1 = Utility.signatureToString("L],D/uCY4iKq!;");
      assertEquals("],D.uCY4iKq!", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) " ],D/uCY4iKq!";
      objectArray0[1] = (Object) "L],D/uCY4iKq!;";
      objectArray0[2] = (Object) "],D.uCY4iKq!";
      objectArray0[3] = (Object) " ],D/uCY4iKq!";
      objectArray0[4] = (Object) "L],D/uCY4iKq!;";
      objectArray0[5] = (Object) " ],D/uCY4iKq!";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[6] = object0;
      objectArray0[7] = (Object) "],D.uCY4iKq!";
      String string2 = Utility.printArray(objectArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(8, objectArray0.length);
      
      boolean boolean1 = Utility.isSet(20, 20);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)124;
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte)44;
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("L],D/uCY4iKq!;");
      assertNotNull(constantUtf8_0);
      assertEquals("L],D/uCY4iKq!;", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 86, 4382);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Utility.compactClassName("(Fq,X4(9yVaLizX\"y", "invokestatic", false);
      assertEquals("(Fq,X4(9yVaLizX\"y", string0);
      assertNotNull(string0);
      
      String string1 = Utility.accessToString(88, false);
      assertEquals("static final volatile", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, constantPool0, 88, 88);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)61;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)61}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      ConstantFloat constantFloat0 = new ConstantFloat((-1.0F));
      assertNotNull(constantFloat0);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals((-1.0F), constantFloat0.getBytes(), 0.01F);
      
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      assertTrue(constantFloat1.equals((Object)constantFloat0));
      assertNotNull(constantFloat1);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals((-1.0F), constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat1.getTag());
      assertEquals((-1.0F), constantFloat1.getBytes(), 0.01F);
      
      ConstantFloat constantFloat2 = new ConstantFloat(constantFloat1);
      assertTrue(constantFloat0.equals((Object)constantFloat1));
      assertTrue(constantFloat1.equals((Object)constantFloat0));
      assertTrue(constantFloat2.equals((Object)constantFloat0));
      assertTrue(constantFloat2.equals((Object)constantFloat1));
      assertNotNull(constantFloat2);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals((-1.0F), constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat1.getTag());
      assertEquals((-1.0F), constantFloat1.getBytes(), 0.01F);
      assertEquals((-1.0F), constantFloat2.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat2.getTag());
      
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantFloat1;
      constantArray0[1] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantArray0.length);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)61}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(1, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("istore_2", string0);
      assertArrayEquals(new byte[] {(byte)61}, byteArray0);
      assertNotNull(string0);
      assertEquals(2, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(1, byteArray0.length);
      assertEquals(2, constantArray0.length);
      
      String string1 = Utility.convertString(" ],D/uCY4iKq!");
      assertEquals(" ],D/uCY4iKq!", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = Utility.getSignature(" ],D/uCY4iKq!");
      assertEquals("L],D/uCY4iKq!;", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(0, byteArray0.length);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String string0 = Utility.getSignature(" ],D/uCY4iKq!");
      assertEquals("L],D/uCY4iKq!;", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)61;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 48, (int) (byte)61, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(21, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("astore_0", string0);
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(21, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      
      String string0 = locale1.toLanguageTag();
      assertEquals("und", string0);
      assertNotNull(string0);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      try { 
        Utility.decode("org.apache.bcel.classfile.Utility$1", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)69;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)44, (byte)69, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[8];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(8, constantPool0.getLength());
      assertEquals(8, constantArray0.length);
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      constantPool0.accept(emptyVisitor0);
      assertEquals(8, constantPool0.getLength());
      assertEquals(8, constantArray0.length);
      
      boolean boolean1 = byteSequence0.markSupported();
      assertTrue(boolean1);
      assertArrayEquals(new byte[] {(byte)44, (byte)69, (byte)0}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(8, constantPool0.getLength());
      assertEquals(8, constantPool1.getLength());
      assertEquals(8, constantArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("aload_2", string0);
      assertArrayEquals(new byte[] {(byte)44, (byte)69, (byte)0}, byteArray0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertNotNull(string0);
      assertNotSame(constantPool0, constantPool1);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(8, constantPool0.getLength());
      assertEquals(3, byteArray0.length);
      assertEquals(8, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      
      String string0 = locale0.getDisplayVariant(locale0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      short short0 = Utility.searchOpcode("qF/$eK83k~zJvvJmL");
      assertEquals((short) (-1), short0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals(0, constantArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte) (-65);
      byte byte0 = (byte) (-82);
      byteArray0[3] = (byte) (-82);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 1433, (-3239), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte) (-30);
      byteArray0[5] = (byte)90;
      byteArray0[6] = (byte)61;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)90, (byte)91, (byte)90, (byte)61, (byte) (-30), (byte)90, (byte)61}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      int int0 = byteSequence0.available();
      assertEquals(7, int0);
      assertArrayEquals(new byte[] {(byte)90, (byte)91, (byte)90, (byte)61, (byte) (-30), (byte)90, (byte)61}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("dup_x1", string0);
      assertArrayEquals(new byte[] {(byte)90, (byte)91, (byte)90, (byte)61, (byte) (-30), (byte)90, (byte)61}, byteArray0);
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(7, byteArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)90, (byte)91, (byte)90, (byte)61, (byte) (-30), (byte)90, (byte)61}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(7, byteArray0.length);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(0, constantPool1.getLength());
      
      // Undeclared exception!
      try { 
        constantPool1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      
      String string0 = locale1.toLanguageTag();
      assertEquals("und", string0);
      assertNotNull(string0);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      
      String string1 = locale1.getDisplayVariant(locale0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      
      Constant[] constantArray0 = new Constant[0];
      String string2 = Utility.getSignature("und");
      assertEquals("Lund;", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = Utility.methodSignatureReturnType("Lund;", false);
      assertEquals("und", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)54;
      byteArray0[6] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)47, (byte)92, (byte)115, (byte)117, (byte)8, (byte)54, (byte)86}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      
      String string4 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("laload", string4);
      assertArrayEquals(new byte[] {(byte)47, (byte)92, (byte)115, (byte)117, (byte)8, (byte)54, (byte)86}, byteArray0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      assertEquals(7, byteArray0.length);
      
      String string5 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string5);
      assertArrayEquals(new byte[] {(byte)47, (byte)92, (byte)115, (byte)117, (byte)8, (byte)54, (byte)86}, byteArray0);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals(7, byteArray0.length);
      
      String string6 = Utility.getSignature("anewarray");
      assertEquals("Lanewarray;", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)34;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)91, (byte)58, (byte)90, (byte)90, (byte)91, (byte)91, (byte)34}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)91, (byte)58, (byte)90, (byte)90, (byte)91, (byte)91, (byte)34}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertEquals(7, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertEquals("dup_x2", string0);
      assertArrayEquals(new byte[] {(byte)91, (byte)58, (byte)90, (byte)90, (byte)91, (byte)91, (byte)34}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(string0);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence1.getIndex());
      assertEquals(7, byteArray0.length);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)91, (byte)58, (byte)90, (byte)90, (byte)91, (byte)91, (byte)34}, byteArray0);
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertNotNull(byteSequence2);
      assertEquals(0, byteSequence2.getIndex());
      assertEquals(7, byteArray0.length);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(0, constantPool1.getLength());
      
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertNotNull(constantPool2);
      assertEquals(0, constantPool2.getLength());
      
      // Undeclared exception!
      try { 
        constantPool2.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      
      String string0 = locale1.getDisplayVariant(locale0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      byte[] byteArray0 = Utility.decode("l", false);
      assertArrayEquals(new byte[] {(byte)108}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals(0, constantArray0.length);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)108}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(1, byteArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("idiv", string1);
      assertArrayEquals(new byte[] {(byte)108}, byteArray0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(constantPool0, constantPool1);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantArray0.length);
      assertEquals(1, byteArray0.length);
      
      short short0 = Utility.searchOpcode("Xo*");
      assertEquals((short) (-1), short0);
      
      String string2 = Utility.accessToString(46, false);
      assertEquals("private protected static synchronized", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte) (-79);
      byteArray0[5] = (byte) (-88);
      byteArray0[6] = (byte) (-79);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)39, (byte)79, (byte)79, (byte) (-88), (byte) (-79), (byte) (-88), (byte) (-79)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      
      ConstantFloat constantFloat0 = new ConstantFloat((byte)79);
      assertNotNull(constantFloat0);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals(79.0F, constantFloat0.getBytes(), 0.01F);
      
      boolean boolean0 = byteSequence0.markSupported();
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)39, (byte)79, (byte)79, (byte) (-88), (byte) (-79), (byte) (-88), (byte) (-79)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      assertTrue(constantFloat1.equals((Object)constantFloat0));
      assertNotNull(constantFloat1);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals(79.0F, constantFloat0.getBytes(), 0.01F);
      assertEquals(79.0F, constantFloat1.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat1.getTag());
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("dload_1", string0);
      assertArrayEquals(new byte[] {(byte)39, (byte)79, (byte)79, (byte) (-88), (byte) (-79), (byte) (-88), (byte) (-79)}, byteArray0);
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(7, byteArray0.length);
      
      String string1 = Utility.convertString("athrow");
      assertEquals("athrow", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte byte0 = Utility.typeOfSignature("Zg/o&<To%FU");
      assertEquals((byte)4, byte0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      
      String string0 = locale1.toLanguageTag();
      assertEquals("und", string0);
      assertNotNull(string0);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      
      String string1 = locale1.getDisplayVariant(locale0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)113;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte) (-30);
      byteArray0[6] = (byte)119;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)91, (byte)69, (byte)65, (byte)113, (byte)47, (byte) (-30), (byte)119}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      
      String string2 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("dup_x2", string2);
      assertArrayEquals(new byte[] {(byte)91, (byte)69, (byte)65, (byte)113, (byte)47, (byte) (-30), (byte)119}, byteArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantArray0.length);
      assertEquals(7, byteArray0.length);
      
      String string3 = Utility.accessToString(1382, true);
      assertEquals("private protected volatile native abstract", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = Utility.compactClassName("double", true);
      assertEquals("double", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-86);
      byte byte0 = (byte)58;
      byteArray0[3] = (byte)90;
      byte byte1 = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-86), (byte) (-86), (byte)0, (byte)90, (byte) (-1), (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)70;
      byteArray1[1] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertArrayEquals(new byte[] {(byte)70, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(2, byteArray1.length);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("fstore_3", string0);
      assertArrayEquals(new byte[] {(byte)70, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(string0);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(2, byteArray1.length);
      assertEquals(0, constantArray0.length);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string1 = Utility.convertString(" $6eg>>WDF7S>>");
      assertEquals(" $6eg>>WDF7S>>", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.encode(byteArray0, false);
      assertEquals("F$A", string2);
      assertArrayEquals(new byte[] {(byte)70, (byte)0}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(2, byteArray0.length);
      
      String string3 = Utility.encode(byteArray0, false);
      assertEquals("F$A", string3);
      assertArrayEquals(new byte[] {(byte)70, (byte)0}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(2, byteArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String string0 = "lz<ataOT";
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "lz<ataOT");
      assertFalse(boolean0);
      
      boolean boolean1 = false;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)52;
      byteArray0[5] = (byte)100;
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte) (-48);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-105), (int) (byte) (-105), true);
      assertEquals("0:    dcmpl\n1:    dcmpl\n2:    <illegal opcode>\n3:    frem\n4:    caload\n5:    isub\n6:    iconst_2\n7:    <illegal opcode>\n", string1);
      assertArrayEquals(new byte[] {(byte) (-105), (byte) (-105), (byte) (-17), (byte)114, (byte)52, (byte)100, (byte)5, (byte) (-48)}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(8, byteArray0.length);
      
      try { 
        Utility.methodSignatureArgumentTypes("short", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: short
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble(1370.098651693);
      assertNotNull(constantDouble0);
      assertEquals(1370.098651693, constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertNotNull(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      assertNotNull(dataOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      constantDouble0.dump(dataOutputStream0);
      assertEquals(1370.098651693, constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals(9, pipedInputStream0.available());
      
      constantDouble0.setBytes(1895.1486285052117);
      assertEquals(1895.1486285052117, constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-106);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-2847), 131, true);
      assertEquals("0:    fcmpg\n", string0);
      assertArrayEquals(new byte[] {(byte) (-106)}, byteArray0);
      assertNotNull(string0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteArray0.length);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-106)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)79;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte byte0 = (byte)123;
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)123;
      byteArray1[1] = (byte)79;
      byteArray1[2] = (byte)79;
      byteArray1[3] = (byte)123;
      byteArray1[4] = (byte)79;
      byteArray1[5] = (byte)79;
      byteArray1[6] = (byte)79;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertArrayEquals(new byte[] {(byte)123, (byte)79, (byte)79, (byte)123, (byte)79, (byte)79, (byte)79}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(7, byteArray1.length);
      
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(" arg");
      assertNotNull(constantUtf8_0);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals(" arg", constantUtf8_0.getBytes());
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("lshr", string0);
      assertArrayEquals(new byte[] {(byte)123, (byte)79, (byte)79, (byte)123, (byte)79, (byte)79, (byte)79}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(string0);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(7, byteArray1.length);
      
      byte[] byteArray2 = new byte[8];
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = (byte) (-64);
      byteArray2[1] = (byte)123;
      byteArray2[2] = (byte) (-64);
      byteArray2[3] = (byte)79;
      byteArray2[4] = (byte) (-64);
      byteArray2[5] = (byte)79;
      byteArray2[6] = (byte)123;
      byteArray2[7] = (byte) (-64);
      boolean boolean0 = true;
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray2, constantPool0, (int) (byte)123, 159, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte) (-95);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)25, (byte)69, (byte) (-95)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat((byte)25);
      assertNotNull(constantFloat0);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals(25.0F, constantFloat0.getBytes(), 0.01F);
      
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      assertTrue(constantFloat1.equals((Object)constantFloat0));
      assertNotNull(constantFloat1);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals(25.0F, constantFloat0.getBytes(), 0.01F);
      assertEquals(25.0F, constantFloat1.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat1.getTag());
      
      constantArray0[0] = (Constant) constantFloat1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantArray0.length);
      
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("\t(wide)");
      assertNotNull(constantUtf8_0);
      assertEquals("\t(wide)", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType(74);
      assertNotNull(constantMethodType0);
      assertEquals(74, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      
      String string0 = constantUtf8_0.toString();
      assertEquals("CONSTANT_Utf8[1](\"\t(wide)\")", string0);
      assertNotNull(string0);
      assertEquals("\t(wide)", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, constantArray0.length);
      
      Constant[] constantArray1 = new Constant[4];
      assertFalse(constantArray1.equals((Object)constantArray0));
      
      constantArray1[0] = (Constant) constantFloat0;
      constantArray1[1] = (Constant) constantUtf8_0;
      constantArray1[2] = (Constant) constantMethodType0;
      constantArray1[3] = (Constant) constantMethodType0;
      ConstantPool constantPool2 = new ConstantPool(constantArray1);
      assertFalse(constantArray1.equals((Object)constantArray0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertNotNull(constantPool2);
      assertEquals(4, constantPool2.getLength());
      assertEquals(4, constantArray1.length);
      
      ConstantPool constantPool3 = constantPool2.copy();
      assertFalse(constantArray1.equals((Object)constantArray0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertNotNull(constantPool3);
      assertNotSame(constantArray1, constantArray0);
      assertNotSame(constantPool2, constantPool3);
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool3, constantPool0);
      assertNotSame(constantPool3, constantPool1);
      assertNotSame(constantPool3, constantPool2);
      assertEquals(4, constantPool2.getLength());
      assertEquals(4, constantPool3.getLength());
      assertEquals(4, constantArray1.length);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool3, true);
      assertEquals("aload\t\t%69", string1);
      assertArrayEquals(new byte[] {(byte)25, (byte)69, (byte) (-95)}, byteArray0);
      assertFalse(constantArray1.equals((Object)constantArray0));
      assertFalse(constantPool2.equals((Object)constantPool3));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(constantArray1, constantArray0);
      assertNotSame(constantPool2, constantPool3);
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool3, constantPool0);
      assertNotSame(constantPool3, constantPool1);
      assertNotSame(constantPool3, constantPool2);
      assertEquals(4, constantPool2.getLength());
      assertEquals(4, constantPool3.getLength());
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(4, constantArray1.length);
      assertEquals(3, byteArray0.length);
      
      try { 
        Utility.codeToString(byteSequence0, constantPool1, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String string0 = Utility.compactClassName("lz<ataOT", "S", true);
      assertEquals("lz<ataOT", string0);
      assertNotNull(string0);
      
      String string1 = Utility.getSignature("S");
      assertEquals("LS;", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)22;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[6] = (byte)125;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 61, (int) (byte)125);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String string0 = Utility.compactClassName("lz<ataOT", "S", true);
      assertEquals("lz<ataOT", string0);
      assertNotNull(string0);
      
      String string1 = Utility.getSignature("S");
      assertEquals("LS;", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte) (-38);
      byteArray0[4] = (byte) (-95);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)76, (byte)2, (byte)110, (byte) (-38), (byte) (-95)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-38));
      assertNotNull(constantFloat0);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals((-38.0F), constantFloat0.getBytes(), 0.01F);
      
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      assertTrue(constantFloat1.equals((Object)constantFloat0));
      assertNotNull(constantFloat1);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals((-38.0F), constantFloat0.getBytes(), 0.01F);
      assertEquals((-38.0F), constantFloat1.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat1.getTag());
      
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantFloat0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("");
      assertNotNull(constantUtf8_0);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("", constantUtf8_0.getBytes());
      
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantFloat0;
      String string2 = constantUtf8_0.toString();
      assertEquals("CONSTANT_Utf8[1](\"\")", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("", constantUtf8_0.getBytes());
      
      constantArray0[3] = (Constant) constantFloat0;
      constantArray0[4] = (Constant) constantFloat1;
      constantArray0[5] = (Constant) constantFloat1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(6, constantPool0.getLength());
      assertEquals(6, constantArray0.length);
      
      String string3 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("astore_1", string3);
      assertArrayEquals(new byte[] {(byte)76, (byte)2, (byte)110, (byte) (-38), (byte) (-95)}, byteArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(6, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      assertEquals(6, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-93);
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray0[6] = (byte)55;
      byteArray1[1] = (byte)55;
      byteArray1[2] = (byte)55;
      byteArray1[3] = (byte) (-93);
      byteArray1[4] = (byte)55;
      byteArray1[5] = (byte)55;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)55, (byte)55, (byte) (-93), (byte)55, (byte)55}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(6, byteArray1.length);
      
      Constant[] constantArray0 = new Constant[3];
      long long0 = byteSequence0.skip((byte) (-93));
      assertEquals(0L, long0);
      assertArrayEquals(new byte[] {(byte)0, (byte)55, (byte)55, (byte) (-93), (byte)55, (byte)55}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(6, byteArray1.length);
      
      int int0 = byteSequence0.readInt();
      assertEquals(3618723, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)55, (byte)55, (byte) (-93), (byte)55, (byte)55}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(6, byteArray1.length);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(3, constantPool0.getLength());
      assertEquals(3, constantArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("lstore\t\t%55", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)55, (byte)55, (byte) (-93), (byte)55, (byte)55}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(string0);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(6, byteSequence0.getIndex());
      assertEquals(3, constantPool0.getLength());
      assertEquals(6, byteArray1.length);
      assertEquals(3, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)55, (int) (byte) (-93));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Invalid constant pool reference: ", true);
      assertEquals("int", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)66;
      byteArray0[0] = (byte)66;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)66, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      
      ConstantFloat constantFloat0 = new ConstantFloat((byte)66);
      assertNotNull(constantFloat0);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals(66.0F, constantFloat0.getBytes(), 0.01F);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      assertTrue(constantFloat1.equals((Object)constantFloat0));
      assertNotNull(constantFloat1);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals(66.0F, constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat1.getTag());
      assertEquals(66.0F, constantFloat1.getBytes(), 0.01F);
      
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("lstore_3", string1);
      assertArrayEquals(new byte[] {(byte)66, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(1, constantPool0.getLength());
      assertEquals(5, byteArray0.length);
      assertEquals(1, constantArray0.length);
      
      String string2 = Utility.convertString("^TA:q@|(!)QY:,=v(");
      assertEquals("^TA:q@|(!)QY:,=v(", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      try { 
        Utility.typeOfSignature("lstore_3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lstore_3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)122;
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)55;
      byteArray1[1] = (byte)55;
      byteArray1[2] = (byte)55;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("7a 00 00 00 00 00 00 00 00", string0);
      assertArrayEquals(new byte[] {(byte)122, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(string0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(9, byteArray0.length);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)122, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      
      String string1 = Utility.accessToString((-3326));
      assertEquals("private native interface synthetic annotation enum", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      ConstantPool constantPool0 = null;
      LocalVariable localVariable0 = new LocalVariable(30, 30, (byte)55, (byte)55, (-3002), (ConstantPool) null);
      assertNotNull(localVariable0);
      assertEquals(30, localVariable0.getLength());
      assertEquals(30, localVariable0.getStartPC());
      assertEquals(55, localVariable0.getNameIndex());
      assertEquals(55, localVariable0.getSignatureIndex());
      assertEquals((-3002), localVariable0.getIndex());
      
      LocalVariable[] localVariableArray0 = new LocalVariable[2];
      localVariableArray0[0] = localVariable0;
      localVariableArray0[1] = localVariable0;
      LocalVariableTable localVariableTable0 = new LocalVariableTable((byte)55, 818, localVariableArray0, (ConstantPool) null);
      assertNotNull(localVariableTable0);
      assertEquals(818, localVariableTable0.getLength());
      assertEquals((byte)5, localVariableTable0.getTag());
      assertEquals(55, localVariableTable0.getNameIndex());
      assertEquals(2, localVariableTable0.getTableLength());
      assertEquals(2, localVariableArray0.length);
      
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureToString(" Ox5rQN", " Ox5rQN", " Ox5rQN", true, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  Ox5rQN
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      
      String string0 = Utility.accessToString(9, false);
      assertEquals("public static", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)73;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)73, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      
      ConstantFloat constantFloat0 = new ConstantFloat((-3058.0F));
      assertNotNull(constantFloat0);
      assertEquals((-3058.0F), constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      assertTrue(constantFloat1.equals((Object)constantFloat0));
      assertNotNull(constantFloat1);
      assertEquals((-3058.0F), constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals((-3058.0F), constantFloat1.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat1.getTag());
      
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantFloat0;
      constantArray0[1] = (Constant) constantFloat1;
      constantArray0[2] = (Constant) constantFloat1;
      constantArray0[3] = (Constant) constantFloat0;
      constantArray0[4] = (Constant) constantFloat1;
      constantArray0[6] = (Constant) constantFloat1;
      constantArray0[7] = (Constant) constantFloat0;
      constantArray0[8] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(9, constantPool0.getLength());
      assertEquals(9, constantArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("dstore_2", string1);
      assertArrayEquals(new byte[] {(byte)73, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(9, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      assertEquals(9, constantArray0.length);
      
      try { 
        Utility.typeOfSignature("dstore_2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dstore_2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)122;
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)55;
      byteArray1[1] = (byte)55;
      byteArray1[2] = (byte)55;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("7a 00 00 00 00 00 00 00 00", string0);
      assertArrayEquals(new byte[] {(byte)122, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(string0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(9, byteArray0.length);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)122, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      
      String string1 = Utility.accessToString((-3326));
      assertEquals("private native interface synthetic annotation enum", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ishr", string2);
      assertArrayEquals(new byte[] {(byte)122, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("ireturn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ireturn'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = Utility.signatureToString("Z=Xi*)0WA,");
      assertEquals("boolean", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte)96;
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)72;
      byteArray0[7] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte) (-63), (byte) (-109), (byte) (-57), (byte)96, (byte)11, (byte)72, (byte)86}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(8, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[1];
      byte byte0 = byteSequence0.readByte();
      assertEquals((byte)65, byte0);
      assertArrayEquals(new byte[] {(byte)65, (byte) (-63), (byte) (-109), (byte) (-57), (byte)96, (byte)11, (byte)72, (byte)86}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(8, byteArray0.length);
      
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("\t(wide)");
      assertNotNull(constantUtf8_0);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("\t(wide)", constantUtf8_0.getBytes());
      
      constantArray0[0] = (Constant) constantUtf8_0;
      String string1 = Utility.signatureToString("Z=Xi*)0WA,", true);
      assertEquals("boolean", string1);
      assertNotNull(string1);
      
      String string2 = Utility.getSignature("\t(wide)");
      assertEquals("L(wide);", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      try { 
        Utility.methodSignatureReturnType("Z=Xi*)0WA,", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0WA,'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "double");
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      String string0 = Utility.compactClassName("double", "=4YqJS", false);
      assertEquals("double", string0);
      assertNotNull(string0);
      
      Integer integer0 = new Integer((-161));
      assertEquals((-161), (int)integer0);
      assertNotNull(integer0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte) (-122);
      byteArray0[4] = (byte) (-122);
      byteArray0[5] = (byte) (-122);
      byteArray0[6] = (byte) (-122);
      byteArray0[7] = (byte) (-122);
      byteArray0[8] = (byte) (-122);
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("86 aa 86 86 86 86 86 86 86", string1);
      assertArrayEquals(new byte[] {(byte) (-122), (byte) (-86), (byte) (-122), (byte) (-122), (byte) (-122), (byte) (-122), (byte) (-122), (byte) (-122), (byte) (-122)}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(9, byteArray0.length);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-122), (byte) (-86), (byte) (-122), (byte) (-122), (byte) (-122), (byte) (-122), (byte) (-122), (byte) (-122), (byte) (-122)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      
      String string2 = Utility.accessToString(236);
      assertEquals("protected static synchronized volatile transient", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("i2f", string3);
      assertArrayEquals(new byte[] {(byte) (-122), (byte) (-86), (byte) (-122), (byte) (-122), (byte) (-122), (byte) (-122), (byte) (-122), (byte) (-122), (byte) (-122)}, byteArray0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = "Exception while looking for class ";
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Exception while looking for class ");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte)82;
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-71), 765, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      
      String string0 = Utility.accessToString(9, false);
      assertEquals("public static", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte) (-80);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)73, (byte)127, (byte)32, (byte) (-56), (byte) (-80)}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "`wu={J/");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3445, (int) (byte)32, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)79, (byte) (-79), (byte) (-88), (byte)39}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      
      ConstantFloat constantFloat0 = new ConstantFloat((byte)39);
      assertNotNull(constantFloat0);
      assertEquals(39.0F, constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      assertTrue(constantFloat1.equals((Object)constantFloat0));
      assertNotNull(constantFloat1);
      assertEquals(39.0F, constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals(39.0F, constantFloat1.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat1.getTag());
      
      short short0 = byteSequence0.readShort();
      assertEquals((short)20401, short0);
      assertArrayEquals(new byte[] {(byte)79, (byte) (-79), (byte) (-88), (byte)39}, byteArray0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Utility.classOrInterface(66);
      assertEquals("class", string0);
      assertNotNull(string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte) (-23);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-23), 43, false);
      assertEquals("0:    <illegal opcode>\n1:    <illegal opcode>\n2:    <illegal opcode>\n3:    <illegal opcode>\n", string1);
      assertArrayEquals(new byte[] {(byte) (-23), (byte) (-23), (byte) (-23), (byte) (-23)}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(4, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(100, 113);
      assertNotNull(constantInterfaceMethodref0);
      assertEquals(100, constantInterfaceMethodref0.getClassIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals(113, constantInterfaceMethodref0.getNameAndTypeIndex());
      
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantArray0.length);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-23), (byte) (-23), (byte) (-23), (byte) (-23)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      
      String string2 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("<illegal opcode>", string2);
      assertArrayEquals(new byte[] {(byte) (-23), (byte) (-23), (byte) (-23), (byte) (-23)}, byteArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      assertEquals(1, constantArray0.length);
      
      String string3 = Utility.convertString("0:    <illegal opcode>\n1:    <illegal opcode>\n2:    <illegal opcode>\n3:    <illegal opcode>\n");
      assertEquals("0:    <illegal opcode>\\n1:    <illegal opcode>\\n2:    <illegal opcode>\\n3:    <illegal opcode>\\n", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = Utility.replace("<~1)*]", "0:    <illegal opcode>\n1:    <illegal opcode>\n2:    <illegal opcode>\n3:    <illegal opcode>\n", "S.Cz*[,=qs");
      assertEquals("<~1)*]", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = Utility.getSignature("xI>l4q$XvnAdg%E");
      assertEquals("LxI>l4q$XvnAdg%E;", string0);
      assertNotNull(string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-64);
      byteArray0[6] = (byte)123;
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte)123;
      boolean boolean0 = Utility.isSet((-1455), (-1455));
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("RuntimeInvisibleParameterAnnotations", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RuntimeInvisibleParameterAnnotations'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      byteArray0[1] = (byte)46;
      byteArray0[1] = (byte)39;
      byteArray0[6] = (byte)39;
      byteArray0[4] = (byte)105;
      String string0 = Utility.format((byte)0, (byte)14, false, 'f');
      assertEquals("fffffffffffff0", string0);
      assertNotNull(string0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("00 27 00 00 69 00 27 00 00", string1);
      assertArrayEquals(new byte[] {(byte)0, (byte)39, (byte)0, (byte)0, (byte)105, (byte)0, (byte)39, (byte)0, (byte)0}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(9, byteArray0.length);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)14;
      byteArray1[1] = (byte)39;
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byteArray1[2] = (byte)14;
      byteArray1[3] = (byte) (-57);
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("fffffffffffff0");
      assertNotNull(constantUtf8_0);
      assertEquals("fffffffffffff0", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantDouble constantDouble0 = null;
      try {
        constantDouble0 = new ConstantDouble((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)56, (byte) (-79), (byte) (-88), (byte)39}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      
      ConstantFloat constantFloat0 = new ConstantFloat((byte)39);
      assertNotNull(constantFloat0);
      assertEquals(39.0F, constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      assertTrue(constantFloat1.equals((Object)constantFloat0));
      assertNotNull(constantFloat1);
      assertEquals(39.0F, constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals((byte)4, constantFloat1.getTag());
      assertEquals(39.0F, constantFloat1.getBytes(), 0.01F);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("fstore\t\t%177", string0);
      assertArrayEquals(new byte[] {(byte)56, (byte) (-79), (byte) (-88), (byte)39}, byteArray0);
      assertNotNull(string0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(4, byteArray0.length);
      assertEquals(0, constantArray0.length);
      
      String string1 = Utility.convertString("org.apache.bcel.classfile.ParameterAnnotations");
      assertEquals("org.apache.bcel.classfile.ParameterAnnotations", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      try { 
        Utility.typeOfSignature("wide");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: wide
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte)31;
      byteArray0[6] = (byte) (-60);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-3906), (int) (byte)43, false);
      assertEquals("0:    aload_1\n1:    aload_1\n2:    aload_1\n3:    aload_1\n4:    aload_1\n5:    lload_1\n6:    wide\t(wide)\n", string0);
      assertArrayEquals(new byte[] {(byte)43, (byte)43, (byte)43, (byte)43, (byte)43, (byte)31, (byte) (-60)}, byteArray0);
      assertNotNull(string0);
      assertEquals(7, byteArray0.length);
      
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("2b 2b 2b 2b 2b 1f c4", string1);
      assertArrayEquals(new byte[] {(byte)43, (byte)43, (byte)43, (byte)43, (byte)43, (byte)31, (byte) (-60)}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(7, byteArray0.length);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)43, (byte)43, (byte)43, (byte)43, (byte)43, (byte)31, (byte) (-60)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      
      boolean boolean0 = false;
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("aload_1", string2);
      assertArrayEquals(new byte[] {(byte)43, (byte)43, (byte)43, (byte)43, (byte)43, (byte)31, (byte) (-60)}, byteArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("[}", "[}", "DK'6rRFN<Y", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: [}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = Utility.getSignature("xI>l4q$XvnAdg%E");
      assertEquals("LxI>l4q$XvnAdg%E;", string0);
      assertNotNull(string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-64);
      byteArray0[6] = (byte)123;
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte) (-64);
      byteArray0[7] = (byte)123;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(12, byteArray0.length);
      
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("LxI>l4q$XvnAdg%E;");
      assertNotNull(constantUtf8_0);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("LxI>l4q$XvnAdg%E;", constantUtf8_0.getBytes());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("dconst_1");
      assertNotNull(constantUtf8_0);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("dconst_1", constantUtf8_0.getBytes());
      
      String string0 = Utility.getSignature("dconst_1");
      assertEquals("Ldconst_1;", string0);
      assertNotNull(string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(0, byteArray0.length);
      
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("class");
      assertFalse(constantUtf8_1.equals((Object)constantUtf8_0));
      assertNotNull(constantUtf8_1);
      assertEquals((byte)1, constantUtf8_1.getTag());
      assertEquals("class", constantUtf8_1.getBytes());
      
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-613), 1980);
      assertEquals("", string1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Invalid signature: `");
      assertEquals((byte)10, byte0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Utility.signatureToString("Invalid signature: `", true);
      assertEquals("int", string0);
      assertNotNull(string0);
      
      String string1 = Utility.convertString("int");
      assertEquals("int", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[2];
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(2, byteArray0.length);
      
      boolean boolean2 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(2, byteArray0.length);
      
      String string2 = Utility.toHexString(byteArray0);
      assertEquals("00 00", string2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(2, byteArray0.length);
      
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-25);
      byteArray1[1] = (byte) (-25);
      byteArray1[2] = (byte) (-25);
      byteArray1[3] = (byte) (-25);
      byteArray1[4] = (byte)10;
      byteArray1[5] = (byte) (-25);
      byteArray1[6] = (byte) (-25);
      byteArray1[7] = (byte) (-25);
      String string3 = Utility.encode(byteArray1, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string3);
      assertArrayEquals(new byte[] {(byte) (-25), (byte) (-25), (byte) (-25), (byte) (-25), (byte)10, (byte) (-25), (byte) (-25), (byte) (-25)}, byteArray1);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(string3);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(8, byteArray1.length);
      
      // Undeclared exception!
      Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-25), 5, false);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("dconst_1");
      assertNotNull(constantUtf8_0);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("dconst_1", constantUtf8_0.getBytes());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte)117;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-1475), 368);
      assertEquals("0:    if_acmpne\t\t#30147\n3:    lneg\n", string0);
      assertArrayEquals(new byte[] {(byte) (-90), (byte)117, (byte) (-61), (byte)117}, byteArray0);
      assertNotNull(string0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(4, byteArray0.length);
      
      String string1 = Utility.fillup("S< 4", (byte)117, false, 'J');
      assertEquals("JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJS< 4", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte byte0 = Utility.typeOfSignature("S< 4");
      assertEquals((byte)9, byte0);
      
      String string2 = Utility.format(2717, (byte)55, false, 'J');
      assertEquals("JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ2717", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = Utility.getSignature("S< 4");
      assertEquals("LS<;", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Invalid constant pool reference: ", true);
      assertEquals("int", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte)66;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)66, (byte) (-103), (byte)57, (byte) (-64), (byte)66}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      assertArrayEquals(new byte[] {(byte)66, (byte) (-103), (byte)57, (byte) (-64), (byte)66}, byteArray0);
      assertNotNull(constantMethodHandle0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(66, constantMethodHandle0.getReferenceKind());
      assertEquals(39225, constantMethodHandle0.getReferenceIndex());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals(5, byteArray0.length);
      
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantArray0.length);
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      constantPool0.accept(emptyVisitor0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantArray0.length);
      
      String string1 = constantPool0.toString();
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantArray0.length);
      
      String string2 = Utility.codeToString(byteArray0, constantPool0, (-4664), (-4664));
      assertEquals("0:    lstore_3\n1:    ifeq\t\t#14785\n4:    lstore_3\n", string2);
      assertArrayEquals(new byte[] {(byte)66, (byte) (-103), (byte)57, (byte) (-64), (byte)66}, byteArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(1, constantPool0.getLength());
      assertEquals(5, byteArray0.length);
      assertEquals(1, constantArray0.length);
      
      try { 
        Utility.typeOfSignature("elz<ataOT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: elz<ataOT
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = Utility.compactClassName("lz<ataOT", "e", true);
      assertEquals("lz<ataOT", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[0];
      String string1 = Utility.getSignature("e");
      assertEquals("Le;", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)22;
      byteArray0[6] = (byte)125;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 61, (int) (byte)125);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)79, (byte) (-79), (byte) (-88), (byte)39}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      
      ConstantFloat constantFloat0 = new ConstantFloat((byte)39);
      assertNotNull(constantFloat0);
      assertEquals(39.0F, constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      assertTrue(constantFloat1.equals((Object)constantFloat0));
      assertNotNull(constantFloat1);
      assertEquals(39.0F, constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals(39.0F, constantFloat1.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat1.getTag());
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      boolean boolean0 = false;
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("iastore", string0);
      assertArrayEquals(new byte[] {(byte)79, (byte) (-79), (byte) (-88), (byte)39}, byteArray0);
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(4, byteArray0.length);
      assertEquals(0, constantArray0.length);
      
      String string1 = "`uL.}!608R";
      String string2 = Utility.convertString("org.apache.bcel.classfile.ParameterAnnotations");
      assertEquals("org.apache.bcel.classfile.ParameterAnnotations", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      try { 
        Utility.typeOfSignature("wide");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: wide
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      String string0 = Utility.accessToString((int) (byte) (-108), true);
      assertEquals("protected final transient native abstract strictfp synthetic annotation enum", string0);
      assertNotNull(string0);
      
      byteArray0[2] = (byte) (-108);
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-108);
      byteArray1[1] = (byte) (-108);
      byteArray1[2] = (byte) (-108);
      byteArray1[3] = (byte) (-108);
      byteArray1[4] = (byte) (-108);
      byteArray1[5] = (byte) (-108);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-108), (byte) (-108), (byte) (-108), (byte) (-108), (byte) (-108), (byte) (-108)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertEquals(6, byteArray1.length);
      
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte) (-108);
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)101;
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "protected final transient native abstract strictfp synthetic annotation enum");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)66, (int) (byte)101, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = Utility.signatureToString("Z=Xi*)0WA,");
      assertEquals("boolean", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[5] = (byte)65;
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)65, (byte)0, (byte)0}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(8, byteArray0.length);
      
      byte[] byteArray1 = Utility.decode("", false);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray1.length);
      
      ByteSequence byteSequence0 = null;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte)55;
      byteArray0[6] = (byte)55;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)122, (byte)122, (byte)55, (byte)122, (byte)55, (byte)55, (byte)55}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      String string0 = constantPool0.toString();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("G$+_ZT)dbkK6Bw1>)#)", false);
      assertNotNull(byteArray0);
      assertEquals(18, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantArray0.length);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(18, byteArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantPool1.getLength());
      assertEquals(7, constantArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("dstore_0", string0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(string0);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(7, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(7, constantPool1.getLength());
      assertEquals(18, byteArray0.length);
      assertEquals(7, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("lbS", "dstore_0", "invokevirtual", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lbS
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("V", true);
      assertEquals("void", string0);
      assertNotNull(string0);
      
      int int0 = Utility.clearBit((-33), (-33));
      assertEquals(2147483615, int0);
      
      int int1 = Utility.setBit((-33), 2147483615);
      assertEquals((-33), int1);
      assertFalse(int1 == int0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte) (-110);
      byteArray0[5] = (byte) (-16);
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
      assertArrayEquals(new byte[] {(byte)71, (byte)76, (byte)68, (byte)18, (byte) (-110), (byte) (-16)}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = Utility.compactClassName("*k'[k/eySnP_3((", true);
      assertEquals("*k'[k.eySnP_3((", string0);
      assertNotNull(string0);
      
      String string1 = Utility.printArray((Object[]) null, true, true);
      assertNull(string1);
      
      String string2 = Utility.printArray((Object[]) null);
      assertNull(string2);
      
      ConstantString constantString0 = new ConstantString((-2344));
      assertNotNull(constantString0);
      assertEquals((-2344), constantString0.getStringIndex());
      assertEquals((byte)8, constantString0.getTag());
      
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte)28;
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte)28;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)28, (byte)28, (byte)28, (byte)28, (byte)28, (byte)28}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      
      String string3 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("iload_2", string3);
      assertArrayEquals(new byte[] {(byte)28, (byte)28, (byte)28, (byte)28, (byte)28, (byte)28}, byteArray0);
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(2, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(2, constantArray0.length);
      assertEquals(6, byteArray0.length);
      
      String string4 = Utility.convertString("iload_2");
      assertEquals("iload_2", string4);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Invalid constant pool reference: ", true);
      assertEquals("int", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte)66;
      boolean boolean0 = false;
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("B$999$c0B", string1);
      assertArrayEquals(new byte[] {(byte)66, (byte) (-103), (byte)57, (byte) (-64), (byte)66}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(5, byteArray0.length);
      
      try { 
        Utility.decode("B$999$c0B", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      String string0 = "?\"R\\=<@";
      try { 
        Utility.typeOfSignature("?\"R=<@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?\"R=<@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)97;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-242), 164, true);
      assertEquals("0:    fstore_3\n1:    fstore_3\n2:    ladd\n", string0);
      assertArrayEquals(new byte[] {(byte)70, (byte)70, (byte)97}, byteArray0);
      assertNotNull(string0);
      assertEquals(3, byteArray0.length);
      
      String string1 = Utility.compactClassName("elz<ataOT", "Wl=)b0:04Mm<", true);
      assertEquals("elz<ataOT", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      short short0 = Utility.searchOpcode("IJ9cG*");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "double");
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Utility.compactClassName("~&a", "V", true);
      assertEquals("~&a", string0);
      assertNotNull(string0);
      
      Integer integer0 = new Integer((-161));
      assertEquals((-161), (int)integer0);
      assertNotNull(integer0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-122);
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("86", string1);
      assertArrayEquals(new byte[] {(byte) (-122)}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, byteArray0.length);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-122)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(1, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      String string2 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("i2f", string2);
      assertArrayEquals(new byte[] {(byte) (-122)}, byteArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteArray0.length);
      assertEquals(0, constantArray0.length);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      String string0 = locale0.getDisplayVariant(locale0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)45}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(1, byteArray0.length);
      
      ConstantFloat constantFloat0 = new ConstantFloat((byte)45);
      assertNotNull(constantFloat0);
      assertEquals(45.0F, constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantFloat0;
      constantArray0[1] = (Constant) constantFloat0;
      constantArray0[2] = (Constant) constantFloat0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte) (-127));
      assertNotNull(constantMethodType0);
      assertEquals((-127), constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      assertTrue(constantMethodType1.equals((Object)constantMethodType0));
      assertNotNull(constantMethodType1);
      assertEquals((-127), constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals((-127), constantMethodType1.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType1.getTag());
      
      constantArray0[3] = (Constant) constantMethodType1;
      constantArray0[4] = (Constant) constantFloat0;
      constantArray0[5] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(6, constantPool0.getLength());
      assertEquals(6, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 174, (int) (byte)45, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-23);
      ConstantFloat constantFloat0 = new ConstantFloat(1951.4271F);
      assertNotNull(constantFloat0);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals(1951.4271F, constantFloat0.getBytes(), 0.01F);
      
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      assertTrue(constantFloat1.equals((Object)constantFloat0));
      assertNotNull(constantFloat1);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals(1951.4271F, constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat1.getTag());
      assertEquals(1951.4271F, constantFloat1.getBytes(), 0.01F);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      boolean boolean0 = false;
      ByteSequence byteSequence0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, constantPool0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-101);
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)55;
      byteArray1[1] = (byte)55;
      byteArray1[2] = (byte)55;
      byteArray1[3] = (byte) (-101);
      byteArray1[4] = (byte)55;
      byteArray1[5] = (byte)55;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertArrayEquals(new byte[] {(byte)55, (byte)55, (byte)55, (byte) (-101), (byte)55, (byte)55, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(7, byteArray1.length);
      
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(3, constantPool0.getLength());
      assertEquals(3, constantArray0.length);
      
      String string0 = constantPool0.toString();
      assertEquals("1)null\n2)null\n", string0);
      assertNotNull(string0);
      assertEquals(3, constantPool0.getLength());
      assertEquals(3, constantArray0.length);
      
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-456), (int) (byte) (-101));
      assertEquals("0:    iflt\t\t#0\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n", string1);
      assertArrayEquals(new byte[] {(byte) (-101), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(3, constantPool0.getLength());
      assertEquals(9, byteArray0.length);
      assertEquals(3, constantArray0.length);
      
      String string2 = Utility.classOrInterface(512);
      assertEquals("interface", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = Utility.clearBit((byte)55, 176);
      assertEquals(55, int0);
      
      String string3 = Utility.accessToString(63, false);
      assertEquals("public private protected static final synchronized", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = Utility.compactClassName("*k'[k/eySnP_3((", true);
      assertEquals("*k'[k.eySnP_3((", string0);
      assertNotNull(string0);
      
      String string1 = Utility.replace("*k'[k.eySnP_3((", "*k'[k/eySnP_3((", "*k'[k/eySnP_3((");
      assertEquals("*k'[k.eySnP_3((", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.printArray((Object[]) null, true, false);
      assertNull(string2);
      
      String string3 = Utility.printArray((Object[]) null);
      assertNull(string3);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-36);
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte) (-54);
      byteArray0[7] = (byte)53;
      byteArray0[8] = (byte)95;
      Constant[] constantArray0 = new Constant[8];
      ConstantString constantString0 = new ConstantString((byte)10);
      assertNotNull(constantString0);
      assertEquals((byte)8, constantString0.getTag());
      assertEquals(10, constantString0.getStringIndex());
      
      constantArray0[0] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(8, constantPool0.getLength());
      assertEquals(8, constantArray0.length);
      
      String string4 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, 135, true);
      assertEquals("0:    iload_2\n1:    lconst_1\n2:    <illegal opcode>\n3:    fconst_1\n4:    nop\n5:    castore\n6:    breakpoint\n7:    saload\n8:    swap\n", string4);
      assertArrayEquals(new byte[] {(byte)28, (byte)10, (byte) (-36), (byte)12, (byte)0, (byte)85, (byte) (-54), (byte)53, (byte)95}, byteArray0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals(8, constantPool0.getLength());
      assertEquals(9, byteArray0.length);
      assertEquals(8, constantArray0.length);
      
      String string5 = Utility.accessToString((int) (byte)12);
      assertEquals("protected static", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      int int0 = Utility.clearBit(3157, 3157);
      assertEquals(3157, int0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-115);
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-115));
      assertNotNull(constantFloat0);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals((-115.0F), constantFloat0.getBytes(), 0.01F);
      
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      assertTrue(constantFloat1.equals((Object)constantFloat0));
      assertNotNull(constantFloat1);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals((-115.0F), constantFloat0.getBytes(), 0.01F);
      assertEquals((-115.0F), constantFloat1.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat1.getTag());
      
      Constant[] constantArray0 = new Constant[8];
      ConstantString constantString0 = new ConstantString((byte) (-115));
      assertNotNull(constantString0);
      assertEquals((byte)8, constantString0.getTag());
      assertEquals((-115), constantString0.getStringIndex());
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(8, constantPool0.getLength());
      assertEquals(8, constantArray0.length);
      
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-781), 98, false);
      assertEquals("0:    f2d\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n", string0);
      assertArrayEquals(new byte[] {(byte) (-115), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals(8, constantPool0.getLength());
      assertEquals(5, byteArray0.length);
      assertEquals(8, constantArray0.length);
      
      MockFile mockFile0 = new MockFile("'[)Th+2I^o5zz <(", "\n");
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      PrintStream printStream0 = mockPrintStream0.format(locale0, "OLA!MS}|faNvv2:hG$", (Object[]) constantArray0);
      assertNotNull(printStream0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals(18L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals("\n", mockFile0.getName());
      assertEquals("/home/apaniche/performance/Dataset/gordon_scripts/projects/1_bcel/'[)Th+2I^o5zz <(/\n", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/apaniche/performance/Dataset/gordon_scripts/projects/1_bcel/'[)Th+2I^o5zz <(", mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals(8, constantArray0.length);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(printStream0);
      assertNotNull(dataOutputStream0);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals(18L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals("\n", mockFile0.getName());
      assertEquals("/home/apaniche/performance/Dataset/gordon_scripts/projects/1_bcel/'[)Th+2I^o5zz <(/\n", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/apaniche/performance/Dataset/gordon_scripts/projects/1_bcel/'[)Th+2I^o5zz <(", mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals(8, constantArray0.length);
      
      constantPool0.dump(dataOutputStream0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertEquals(8, constantPool0.getLength());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(20L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals("\n", mockFile0.getName());
      assertEquals("/home/apaniche/performance/Dataset/gordon_scripts/projects/1_bcel/'[)Th+2I^o5zz <(/\n", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/apaniche/performance/Dataset/gordon_scripts/projects/1_bcel/'[)Th+2I^o5zz <(", mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals(8, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("Yb0/bdJN|aM,gG??E1'", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Yb0/bdJN|aM,gG??E1''
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte) (-118);
      byteArray0[6] = (byte)43;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)85, (byte) (-45), (byte)45, (byte)7, (byte) (-81), (byte) (-118), (byte)43}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = Utility.compactClassName("=ASqo", "=ASqo", false);
      assertEquals("=ASqo", string0);
      assertNotNull(string0);
      
      boolean boolean2 = false;
      byte[] byteArray1 = Utility.decode("Invalid si", false);
      assertArrayEquals(new byte[] {(byte)73, (byte)110, (byte)118, (byte)97, (byte)108, (byte)105, (byte)100, (byte)32, (byte)115, (byte)105}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(10, byteArray1.length);
      
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantArray0.length);
      
      int int0 = 224;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 224, 224, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature(">_[Q0!]8*<.S>", stringArray0);
      assertEquals("()[L>_;", string0);
      assertNotNull(string0);
      assertEquals(0, stringArray0.length);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray0 = Utility.decode("=ASqo", false);
      assertArrayEquals(new byte[] {(byte)61, (byte)65, (byte)83, (byte)113, (byte)111}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      String string0 = locale0.getDisplayVariant(locale0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)45;
      byteArray0[0] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)45}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(1, byteArray0.length);
      
      ConstantFloat constantFloat0 = new ConstantFloat((byte)45);
      assertNotNull(constantFloat0);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals(45.0F, constantFloat0.getBytes(), 0.01F);
      
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      assertTrue(constantFloat1.equals((Object)constantFloat0));
      assertNotNull(constantFloat1);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals(45.0F, constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat1.getTag());
      assertEquals(45.0F, constantFloat1.getBytes(), 0.01F);
      
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantArray0.length);
      
      boolean boolean0 = false;
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("aload_3", string1);
      assertArrayEquals(new byte[] {(byte)45}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, byteArray0.length);
      assertEquals(1, constantArray0.length);
      
      String string2 = "`uL.}!608R";
      String string3 = Utility.convertString("`uL.}!608R");
      assertEquals("`uL.}!608R", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      try { 
        Utility.typeOfSignature("<B:nHra");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <B:nHra
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = Utility.getSignature("=ASqo");
      assertEquals("L=ASqo;", string0);
      assertNotNull(string0);
      
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)123;
      byteArray0[0] = (byte) (-77);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("=ASqo");
      assertNotNull(mockFileOutputStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      assertNotNull(dataOutputStream0);
      
      constantPool0.dump(dataOutputStream0);
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantArray0.length);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-77), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("/XqV");
      assertNotNull(constantUtf8_0);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("/XqV", constantUtf8_0.getBytes());
      
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (-478), (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0);
      assertEquals("{}", string0);
      assertNotNull(string0);
      assertEquals(0, objectArray0.length);
      
      ConstantString constantString0 = new ConstantString((byte)10);
      assertNotNull(constantString0);
      assertEquals((byte)8, constantString0.getTag());
      assertEquals(10, constantString0.getStringIndex());
      
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantString0;
      constantArray0[1] = (Constant) constantString0;
      constantArray0[2] = (Constant) constantString0;
      ConstantDouble constantDouble0 = new ConstantDouble((byte)0);
      assertNotNull(constantDouble0);
      assertEquals(0.0, constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      
      constantArray0[3] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(4, constantPool0.getLength());
      assertEquals(4, constantArray0.length);
      
      String string1 = Utility.format(2109, (byte)0, true, 'f');
      assertEquals("2109", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-25);
      byteArray0[5] = (byte)10;
      String string2 = Utility.toHexString(byteArray0);
      assertEquals("0a 00 00 00 e7 0a", string2);
      assertArrayEquals(new byte[] {(byte)10, (byte)0, (byte)0, (byte)0, (byte) (-25), (byte)10}, byteArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(6, byteArray0.length);
      
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-25);
      String string3 = Utility.encode(byteArray1, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string3);
      assertArrayEquals(new byte[] {(byte) (-25)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray1.length);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      assertNotNull(mockPrintWriter0);
      
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      int int0 = Utility.clearBit(3157, 3157);
      assertEquals(3157, int0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-115);
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-80));
      assertNotNull(constantFloat0);
      assertEquals((-80.0F), constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      assertTrue(constantFloat1.equals((Object)constantFloat0));
      assertNotNull(constantFloat1);
      assertEquals((-80.0F), constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals((byte)4, constantFloat1.getTag());
      assertEquals((-80.0F), constantFloat1.getBytes(), 0.01F);
      
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantFloat0;
      constantArray0[1] = (Constant) constantFloat1;
      ConstantString constantString0 = new ConstantString((-315));
      assertNotNull(constantString0);
      assertEquals((-315), constantString0.getStringIndex());
      assertEquals((byte)8, constantString0.getTag());
      
      constantArray0[2] = (Constant) constantString0;
      constantArray0[3] = (Constant) constantFloat0;
      constantArray0[4] = (Constant) constantFloat1;
      constantArray0[5] = (Constant) constantFloat0;
      constantArray0[6] = (Constant) constantFloat1;
      constantArray0[7] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(8, constantPool0.getLength());
      assertEquals(8, constantArray0.length);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-115), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("f2d", string0);
      assertArrayEquals(new byte[] {(byte) (-115), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(8, constantPool0.getLength());
      assertEquals(5, byteArray0.length);
      assertEquals(8, constantArray0.length);
      
      String string1 = Utility.convertString("f2d");
      assertEquals("f2d", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      try { 
        Utility.typeOfSignature("lK0+o@L08_7yp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lK0+o@L08_7yp
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte)55;
      byteArray0[6] = (byte)55;
      byteArray0[7] = (byte)55;
      byteArray0[8] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)55, (byte) (-1), (byte) (-1), (byte)55, (byte)55, (byte)55, (byte)55, (byte)55, (byte) (-1)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-1));
      assertNotNull(constantFloat0);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals((-1.0F), constantFloat0.getBytes(), 0.01F);
      
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      assertTrue(constantFloat1.equals((Object)constantFloat0));
      assertNotNull(constantFloat1);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals((-1.0F), constantFloat0.getBytes(), 0.01F);
      assertEquals((-1.0F), constantFloat1.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat1.getTag());
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("lstore\t\t%255", string0);
      assertArrayEquals(new byte[] {(byte)55, (byte) (-1), (byte) (-1), (byte)55, (byte)55, (byte)55, (byte)55, (byte)55, (byte) (-1)}, byteArray0);
      assertNotNull(string0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(9, byteArray0.length);
      
      String string1 = Utility.convertString("mkd4b@^+^~5-B");
      assertEquals("mkd4b@^+^~5-B", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      try { 
        Utility.typeOfSignature("java.lang.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String string0 = "Xo.*";
      byte[] byteArray0 = new byte[8];
      try { 
        Utility.typeOfSignature("Xo.*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Xo.*
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      File file0 = MockFile.createTempFile("\\lfgEpGaqyvI %", "\\lfgEpGaqyvI %");
      assertNotNull(file0);
      assertEquals("\\lfgEpGaqyvI %0\\lfgEpGaqyvI %", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/\\lfgEpGaqyvI %0\\lfgEpGaqyvI %", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      
      String string0 = locale1.getDisplayVariant(locale0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      
      int int0 = new Integer(539);
      assertEquals(539, int0);
      
      ConstantPool constantPool0 = null;
      byte byte0 = (byte) (-127);
      byte byte1 = (byte)111;
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[4];
      byte byte2 = (byte) (-16);
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-127);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 172, 174, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)69;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)69, (byte)69}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(2, byteArray0.length);
      
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-1));
      assertNotNull(constantFloat0);
      assertEquals((-1.0F), constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      assertTrue(constantFloat1.equals((Object)constantFloat0));
      assertNotNull(constantFloat1);
      assertEquals((-1.0F), constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals((byte)4, constantFloat1.getTag());
      assertEquals((-1.0F), constantFloat1.getBytes(), 0.01F);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("fstore_2", string0);
      assertArrayEquals(new byte[] {(byte)69, (byte)69}, byteArray0);
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(2, byteArray0.length);
      assertEquals(0, constantArray0.length);
      
      String string1 = Utility.convertString("fstore_2");
      assertEquals("fstore_2", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      try { 
        Utility.typeOfSignature("fstore_2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: fstore_2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("`aom7b/tCpG{Qj");
      assertNotNull(mockPrintStream0);
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "interface", objectArray0);
      assertNotNull(printStream0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals(0, objectArray0.length);
      
      Utility.printArray(printStream0, objectArray0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals(0, objectArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte)126;
      byteArray0[7] = (byte) (-67);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)121, (byte)95, (byte)113, (byte)7, (byte)101, (byte)70, (byte)126, (byte) (-67)}, byteArray0);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)55;
      String string0 = Utility.accessToString((int) (byte)122, true);
      assertEquals("private static final volatile", string0);
      assertNotNull(string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = 39;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals(0, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)55, (int) (byte)122, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String string0 = Utility.getSignature("=ASqo");
      assertEquals("L=ASqo;", string0);
      assertNotNull(string0);
      
      ConstantString constantString0 = new ConstantString(166);
      assertNotNull(constantString0);
      assertEquals(166, constantString0.getStringIndex());
      assertEquals((byte)8, constantString0.getTag());
      
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantString0;
      constantArray0[1] = (Constant) constantString0;
      constantArray0[6] = (Constant) constantString0;
      constantArray0[3] = (Constant) constantString0;
      constantArray0[4] = (Constant) constantString0;
      constantArray0[5] = (Constant) constantString0;
      constantArray0[6] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte)49;
      byteArray0[6] = (byte) (-78);
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("f5 00 55 10 47 31 b2", string1);
      assertArrayEquals(new byte[] {(byte) (-11), (byte)0, (byte)85, (byte)16, (byte)71, (byte)49, (byte) (-78)}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(7, byteArray0.length);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(0, constantPool1.getLength());
      
      // Undeclared exception!
      try { 
        constantPool1.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      boolean boolean0 = true;
      String string0 = Utility.compactClassName("lz<ataOT", "e", true);
      assertEquals("lz<ataOT", string0);
      assertNotNull(string0);
      
      String string1 = "\tdefault = ";
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\tdefault = ");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      try { 
        Utility.typeOfSignature("O*;d\"y5(9H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O*;d\"y5(9H
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte byte0 = Utility.typeOfSignature("CV");
      assertEquals((byte)5, byte0);
      
      String string0 = Utility.signatureToString("CV", true);
      assertEquals("char", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)8;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)55;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 13, (int) (byte)8, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      String string0 = Utility.replace("(J;}M`O+=M_Dw*LFIZ", "(J;}M`O+=M_Dw*LFIZ", "(J;}M`O+=M_Dw*LFIZ");
      assertEquals("(J;}M`O+=M_Dw*LFIZ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = true;
      boolean boolean1 = false;
      String string1 = Utility.accessToString(2011, false);
      assertEquals("public private static final volatile transient native interface abstract", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte) (-117);
      byteArray0[5] = (byte) (-87);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1680, 4183, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)0;
      byteArray0[5] = (byte)17;
      byteArray0[3] = (byte) (-128);
      ConstantDouble constantDouble0 = new ConstantDouble((byte)37);
      assertNotNull(constantDouble0);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals(37.0, constantDouble0.getBytes(), 0.01);
      
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantDouble0;
      constantArray0[1] = (Constant) constantDouble0;
      constantArray0[2] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(3, constantPool0.getLength());
      assertEquals(3, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)37, (int) (byte)17, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      String string0 = Utility.getSignature("9hgnTmJq");
      assertEquals("L9hgnTmJq;", string0);
      assertNotNull(string0);
      
      int int0 = 123;
      ConstantString constantString0 = new ConstantString(123);
      assertNotNull(constantString0);
      assertEquals(123, constantString0.getStringIndex());
      assertEquals((byte)8, constantString0.getTag());
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("/XqV");
      assertNotNull(constantUtf8_0);
      assertEquals("/XqV", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 172, (-1254));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String string0 = Utility.getSignature("Yc;.;%'+,lJZ^>p$>f");
      assertEquals("LYc;/;%'+,lJZ^>p$>f;", string0);
      assertNotNull(string0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "LYc;/;%'+,lJZ^>p$>f;");
      assertFalse(boolean0);
      
      String string1 = "\t\t%";
      boolean boolean1 = false;
      String string2 = Utility.compactClassName("\t\t%", "LYc;/;%'+,lJZ^>p$>f;", false);
      assertEquals("\t\t%", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      try { 
        Utility.methodSignatureReturnType("Yc;.;%'+,lJZ^>p$>f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Yc;.;%'+,lJZ^>p$>f'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)6;
      String string0 = "W;+No\\|19y+pCM{";
      byte[] byteArray1 = Utility.decode("W;+No|19y+pCM{", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(14, byteArray1.length);
      
      String string1 = Utility.compactClassName("char", true);
      assertEquals("char", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(14, byteArray0.length);
      
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("char");
      assertNotNull(constantUtf8_0);
      assertEquals("char", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      String string2 = Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)6, 274);
      assertEquals("6:    daload\n7:    dstore\t\t%121\n9:    aload_1\n10:   irem\n11:   fstore_0\n12:   astore_2\n13:   lshr\n", string2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(14, byteArray1.length);
      
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte)58;
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 6183, 6183, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)55;
      byteArray0[0] = (byte)122;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)122, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("k5?RyBz9v_c");
      assertNotNull(constantUtf8_0);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("k5?RyBz9v_c", constantUtf8_0.getBytes());
      
      ConstantUtf8 constantUtf8_1 = (ConstantUtf8)constantUtf8_0.clone();
      assertTrue(constantUtf8_1.equals((Object)constantUtf8_0));
      assertNotNull(constantUtf8_1);
      assertNotSame(constantUtf8_0, constantUtf8_1);
      assertNotSame(constantUtf8_1, constantUtf8_0);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("k5?RyBz9v_c", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_1.getTag());
      assertEquals("k5?RyBz9v_c", constantUtf8_1.getBytes());
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-1868));
      assertNotNull(constantMethodType0);
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals((-1868), constantMethodType0.getDescriptorIndex());
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)34;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-60), (int) (byte)34, false);
      assertEquals("0:    wide\t(wide)\n1:    fload_0\n", string0);
      assertArrayEquals(new byte[] {(byte) (-60), (byte)34}, byteArray0);
      assertNotNull(string0);
      assertEquals(2, byteArray0.length);
      
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("c4 22", string1);
      assertArrayEquals(new byte[] {(byte) (-60), (byte)34}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(2, byteArray0.length);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-60), (byte)34}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(2, byteArray0.length);
      
      long long0 = byteSequence0.skip(1L);
      assertEquals(1L, long0);
      assertArrayEquals(new byte[] {(byte) (-60), (byte)34}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(2, byteArray0.length);
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fload_0", string2);
      assertArrayEquals(new byte[] {(byte) (-60), (byte)34}, byteArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(2, byteArray0.length);
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("?>...", ";");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // ;
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Utility.compactClassName("=ASqo", "=ASqo", false);
      assertEquals("=ASqo", string0);
      assertNotNull(string0);
      
      boolean boolean1 = false;
      byte[] byteArray0 = Utility.decode("G$+_ZT)dbkK6Bw1>)#)", false);
      assertNotNull(byteArray0);
      assertEquals(18, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 224, 224, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String string0 = "float";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = false;
      boolean boolean1 = true;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte) (-97);
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte)17;
      byteArray0[8] = (byte)17;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)8, 39, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)55;
      byteArray0[0] = (byte)122;
      String string0 = Utility.accessToString((int) (byte)6, true);
      assertEquals("private protected", string0);
      assertNotNull(string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 6194, 39, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte) (-117);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "L-i'{?30jy.bOI";
      stringArray0[1] = "L-i'{?30jy.bOI";
      stringArray0[2] = "L-i'{?30jy.bOI";
      stringArray0[3] = "float";
      String string0 = Utility.methodTypeToSignature("L-i'{?30jy.bOI", stringArray0);
      assertEquals("(LL-i'{?30jy/bOI;LL-i'{?30jy/bOI;LL-i'{?30jy/bOI;F)LL-i'{?30jy/bOI;", string0);
      assertNotNull(string0);
      assertEquals(4, stringArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string1 = Utility.compactClassName("L-i'{?30jy.bOI", "float", false);
      assertEquals("L-i'{?30jy.bOI", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.encode(byteArray0, false);
      assertEquals("7$8b$A$A$A$A$A$A$A", string2);
      assertArrayEquals(new byte[] {(byte)55, (byte) (-117), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(9, byteArray0.length);
      
      byte byte0 = Utility.typeOfMethodSignature("(LL-i'{?30jy/bOI;LL-i'{?30jy/bOI;LL-i'{?30jy/bOI;F)LL-i'{?30jy/bOI;");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)34;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-60), (int) (byte)34, false);
      assertEquals("0:    wide\t(wide)\n1:    fload_0\n", string0);
      assertArrayEquals(new byte[] {(byte) (-60), (byte)34}, byteArray0);
      assertNotNull(string0);
      assertEquals(2, byteArray0.length);
      
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("c4 22", string1);
      assertArrayEquals(new byte[] {(byte) (-60), (byte)34}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(2, byteArray0.length);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-60), (byte)34}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(2, byteArray0.length);
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("wide\t(wide)", string2);
      assertArrayEquals(new byte[] {(byte) (-60), (byte)34}, byteArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(2, byteArray0.length);
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("?>...", ";");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // ;
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "TjRoa(d";
      stringArray0[1] = "Wl=)b0:04Mm<";
      stringArray0[2] = "TjRoa(d";
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)16;
      byteArray0[0] = (byte)16;
      byte byte1 = (byte)70;
      byteArray0[1] = (byte)70;
      byte byte2 = (byte)82;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)69;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)70, (int) (byte)69, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Utility.accessToString(79, true);
      assertEquals("public private protected static volatile", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte) (-23);
      byteArray0[5] = (byte) (-117);
      byteArray0[6] = (byte)43;
      byteArray0[7] = (byte) (-117);
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
      assertArrayEquals(new byte[] {(byte)101, (byte) (-23), (byte)43, (byte)55, (byte) (-23), (byte) (-117), (byte)43, (byte) (-117)}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(8, byteArray0.length);
      
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "TjRoa(d";
      stringArray0[1] = "Wl=)b0:04Mm<";
      stringArray0[2] = "TjRoa(d";
      stringArray0[3] = "TjRoa(d";
      stringArray0[4] = "TjRoa(d";
      stringArray0[5] = ">_[Q0!]8*<.S>";
      String string0 = Utility.methodTypeToSignature("TjRoa(d", stringArray0);
      assertEquals("(LTjRoa(d;LWl=)b0:04Mm<;LTjRoa(d;LTjRoa(d;LTjRoa(d;[L>_;)LTjRoa(d;", string0);
      assertNotNull(string0);
      assertEquals(6, stringArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = Utility.decode("TjRoa(d", false);
      assertArrayEquals(new byte[] {(byte)84, (byte)106, (byte)82, (byte)111, (byte)97, (byte)40, (byte)100}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Utility.accessToString(66, false);
      assertEquals("private volatile", string0);
      assertNotNull(string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte) (-23);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-23), 43, false);
      assertEquals("0:    <illegal opcode>\n1:    <illegal opcode>\n2:    <illegal opcode>\n3:    <illegal opcode>\n", string1);
      assertArrayEquals(new byte[] {(byte) (-23), (byte) (-23), (byte) (-23), (byte) (-23)}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(4, byteArray0.length);
      
      String string2 = Utility.format((byte) (-23), 2702, true, 'n');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = Utility.encode(byteArray0, false);
      assertEquals("$e9$e9$e9$e9", string3);
      assertArrayEquals(new byte[] {(byte) (-23), (byte) (-23), (byte) (-23), (byte) (-23)}, byteArray0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(4, byteArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("[]", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray0[6] = (byte)0;
      byteArray0[5] = (byte)17;
      byteArray0[3] = (byte)114;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)114, (byte)0, (byte)17, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("00 00 00 72 00 11 00", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)114, (byte)0, (byte)17, (byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals(7, byteArray0.length);
      
      String string1 = Utility.accessToString((int) (byte)0, true);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)6;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-60), (int) (byte)6, false);
      assertEquals("0:    wide\t(wide)\n1:    iconst_3\n", string0);
      assertArrayEquals(new byte[] {(byte) (-60), (byte)6}, byteArray0);
      assertNotNull(string0);
      assertEquals(2, byteArray0.length);
      
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("c4 06", string1);
      assertArrayEquals(new byte[] {(byte) (-60), (byte)6}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(2, byteArray0.length);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-60), (byte)6}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(2, byteArray0.length);
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("wide\t(wide)", string2);
      assertArrayEquals(new byte[] {(byte) (-60), (byte)6}, byteArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte byte0 = (byte)37;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)0;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)17, (int) (byte)17, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      String string0 = Utility.getSignature("=ASqo");
      assertEquals("L=ASqo;", string0);
      assertNotNull(string0);
      
      ConstantString constantString0 = new ConstantString(166);
      assertNotNull(constantString0);
      assertEquals((byte)8, constantString0.getTag());
      assertEquals(166, constantString0.getStringIndex());
      
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantString0;
      constantArray0[1] = (Constant) constantString0;
      constantArray0[6] = (Constant) constantString0;
      constantArray0[3] = (Constant) constantString0;
      constantArray0[4] = (Constant) constantString0;
      constantArray0[5] = (Constant) constantString0;
      constantArray0[6] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-64);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)123, (byte) (-64), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("/XqV");
      assertNotNull(constantUtf8_0);
      assertEquals("/XqV", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-456), (int) (byte) (-64));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected class `CONSTANT_Class' at index 0 and got CONSTANT_String[8](string_index = 166)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      String string0 = Utility.signatureToString("Z=Xi*)0WA,");
      assertEquals("boolean", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte)96;
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)72;
      byteArray0[7] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte) (-63), (byte) (-109), (byte) (-57), (byte)96, (byte)11, (byte)72, (byte)86}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(8, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("\t(wide)");
      assertNotNull(constantUtf8_0);
      assertEquals("\t(wide)", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte) (-109));
      assertNotNull(constantMethodType0);
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals((-109), constantMethodType0.getDescriptorIndex());
      
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("lstore_2", string1);
      assertArrayEquals(new byte[] {(byte)65, (byte) (-63), (byte) (-109), (byte) (-57), (byte)96, (byte)11, (byte)72, (byte)86}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(2, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(8, byteArray0.length);
      assertEquals(2, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 37831. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)55;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      String string0 = "*k'[k.eySn";
      try { 
        Utility.typeOfSignature("*k'[k.eySn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: k'[k.eySn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)39;
      byteArray0[6] = (byte)83;
      byteArray0[4] = (byte)105;
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)39, (int) (byte)39, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)55;
      byteArray0[0] = (byte) (-117);
      byte byte0 = (byte) (-89);
      String string0 = Utility.accessToString((int) (byte) (-89), true);
      assertEquals("public private protected transient native abstract strictfp synthetic annotation enum", string0);
      assertNotNull(string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 6183, 39, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte) (-117);
      String string0 = Utility.accessToString((int) (byte) (-89), true);
      assertEquals("public private protected transient native abstract strictfp synthetic annotation enum", string0);
      assertNotNull(string0);
      
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte) (-23);
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)101;
      byteArray0[7] = (byte)127;
      byteArray0[8] = (byte)43;
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("7$8b$a7$3a$e9$De$7f$x", string1);
      assertArrayEquals(new byte[] {(byte)55, (byte) (-117), (byte) (-89), (byte)58, (byte) (-23), (byte)3, (byte)101, (byte)127, (byte)43}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(9, byteArray0.length);
      
      try { 
        Utility.decode("7$8b$a7$3a$e9$De$7f$x", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      String string0 = "O78W7^>";
      int int0 = 97;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = Utility.fillup("O78W7^>", 97, true, 'Q');
      assertEquals("O78W7^>QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.signatureToString("S3k=CSr731q-)73", true);
      assertEquals("short", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = Utility.accessToString(7, true);
      assertEquals("public private protected", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      byte[] byteArray0 = null;
      ByteArrayInputStream byteArrayInputStream0 = null;
      try {
        byteArrayInputStream0 = new ByteArrayInputStream((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      File file0 = MockFile.createTempFile("\\lfgEpGaqyvI %", "\\lfgEpGaqyvI %");
      assertNotNull(file0);
      assertEquals("\\lfgEpGaqyvI %0\\lfgEpGaqyvI %", file0.getName());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/\\lfgEpGaqyvI %0\\lfgEpGaqyvI %", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      boolean boolean0 = true;
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.toString());
      
      String string0 = locale1.getDisplayVariant(locale0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.toString());
      
      int int0 = Utility.clearBit((-722), 527);
      assertEquals((-33490), int0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte) (-127);
      byteArray0[5] = (byte)15;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 527, (int) (byte)0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      String string0 = "\\\\lfgEpGaqyvI %";
      File file0 = MockFile.createTempFile("\\lfgEpGaqyvI %", "\\lfgEpGaqyvI %");
      assertNotNull(file0);
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertEquals("\\lfgEpGaqyvI %0\\lfgEpGaqyvI %", file0.getName());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/\\lfgEpGaqyvI %0\\lfgEpGaqyvI %", file0.toString());
      assertEquals(0L, file0.length());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      assertNotNull(mockPrintStream0);
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      
      mockPrintStream0.print(true);
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertEquals("\\lfgEpGaqyvI %0\\lfgEpGaqyvI %", file0.getName());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(4L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/\\lfgEpGaqyvI %0\\lfgEpGaqyvI %", file0.toString());
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      
      String string1 = locale1.getDisplayVariant(locale0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) file0;
      objectArray0[1] = (Object) "ohHXKw=";
      PrintStream printStream0 = mockPrintStream0.format(locale1, "ohHXKw=", objectArray0);
      assertNotNull(printStream0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertSame(printStream0, mockPrintStream0);
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertEquals("\\lfgEpGaqyvI %0\\lfgEpGaqyvI %", file0.getName());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(11L, file0.length());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/\\lfgEpGaqyvI %0\\lfgEpGaqyvI %", file0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      assertEquals(2, objectArray0.length);
      
      Utility.printArray(printStream0, objectArray0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertSame(printStream0, mockPrintStream0);
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertEquals("\\lfgEpGaqyvI %0\\lfgEpGaqyvI %", file0.getName());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(57L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/\\lfgEpGaqyvI %0\\lfgEpGaqyvI %", file0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      assertEquals(2, objectArray0.length);
      
      mockPrintStream0.print("");
      assertSame(mockPrintStream0, printStream0);
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertEquals("\\lfgEpGaqyvI %0\\lfgEpGaqyvI %", file0.getName());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(57L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/\\lfgEpGaqyvI %0\\lfgEpGaqyvI %", file0.toString());
      
      Constant[] constantArray0 = new Constant[0];
      PrintStream printStream1 = mockPrintStream0.append('1');
      assertNotNull(printStream1);
      assertSame(mockPrintStream0, printStream0);
      assertSame(mockPrintStream0, printStream1);
      assertSame(printStream1, mockPrintStream0);
      assertSame(printStream1, printStream0);
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertEquals("\\lfgEpGaqyvI %0\\lfgEpGaqyvI %", file0.getName());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(58L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/\\lfgEpGaqyvI %0\\lfgEpGaqyvI %", file0.toString());
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      assertNotNull(dataOutputStream0);
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertEquals("\\lfgEpGaqyvI %0\\lfgEpGaqyvI %", file0.getName());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(58L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/\\lfgEpGaqyvI %0\\lfgEpGaqyvI %", file0.toString());
      
      dataOutputStream0.writeBoolean(true);
      assertSame(mockPrintStream0, printStream0);
      assertSame(mockPrintStream0, printStream1);
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertEquals("\\lfgEpGaqyvI %0\\lfgEpGaqyvI %", file0.getName());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(59L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/\\lfgEpGaqyvI %0\\lfgEpGaqyvI %", file0.toString());
      
      constantPool0.dump(dataOutputStream0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(mockPrintStream0, printStream1);
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertEquals("\\lfgEpGaqyvI %0\\lfgEpGaqyvI %", file0.getName());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/\\lfgEpGaqyvI %0\\lfgEpGaqyvI %", file0.toString());
      assertEquals(61L, file0.length());
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.decode("qF/$eK83k~zJvvJmL", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"eK\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      String string0 = Utility.compactClassName("ifnonnull");
      assertEquals("ifnonnull", string0);
      assertNotNull(string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('&');
      assertFalse(boolean0);
      
      int int0 = Utility.clearBit(220, 220);
      assertEquals(220, int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte) (-127);
      byteArray0[5] = (byte) (-127);
      byteArray0[6] = (byte) (-127);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 186, true);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    ddiv\n4:    lor\n5:    lor\n6:    lor\n7:    nop\n", string1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)111, (byte) (-127), (byte) (-127), (byte) (-127), (byte)0}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(8, byteArray0.length);
      
      try { 
        Utility.decode("Invalid type: ", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = "dconst_1";
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("dconst_1");
      assertNotNull(constantUtf8_0);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("dconst_1", constantUtf8_0.getBytes());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-11);
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte) (-46);
      byteArray0[6] = (byte) (-90);
      byteArray0[8] = (byte)117;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 885, (int) (byte) (-11));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      String string0 = Utility.getSignature("=ASqo");
      assertEquals("L=ASqo;", string0);
      assertNotNull(string0);
      
      ConstantString constantString0 = new ConstantString(166);
      assertNotNull(constantString0);
      assertEquals(166, constantString0.getStringIndex());
      assertEquals((byte)8, constantString0.getTag());
      
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantString0;
      constantArray0[1] = (Constant) constantString0;
      constantArray0[6] = (Constant) constantString0;
      constantArray0[3] = (Constant) constantString0;
      constantArray0[4] = (Constant) constantString0;
      constantArray0[5] = (Constant) constantString0;
      constantArray0[6] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)123;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)123, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("CN;:L9MZ");
      assertNotNull(constantUtf8_0);
      assertEquals("CN;:L9MZ", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 166, (-2404));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = 66;
      String string0 = Utility.accessToString(66, false);
      assertEquals("private volatile", string0);
      assertNotNull(string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte byte0 = (byte) (-23);
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-23);
      byte byte1 = (byte)103;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte) (-23);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-23), 43, false);
      assertEquals("0:    <illegal opcode>\n1:    dsub\n2:    <illegal opcode>\n3:    <illegal opcode>\n", string1);
      assertArrayEquals(new byte[] {(byte) (-23), (byte)103, (byte) (-23), (byte) (-23)}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(4, byteArray0.length);
      
      boolean boolean0 = true;
      String string2 = Utility.format((byte) (-23), 2702, true, 'n');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = Utility.classOrInterface(103);
      assertEquals("class", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("9]", "ifnull");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"ifnull\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      boolean boolean0 = false;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = "CV";
      try { 
        Utility.typeOfSignature("8(iiD4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8(iiD4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Utility.accessToString((int) (byte) (-108), true);
      assertEquals("protected final transient native abstract strictfp synthetic annotation enum", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)101;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-598), (int) (byte)67, true);
      assertEquals("0:    fstore_0\n1:    caload\n2:    iconst_0\n3:    lsub\n", string1);
      assertArrayEquals(new byte[] {(byte)67, (byte)52, (byte)3, (byte)101}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(4, byteArray0.length);
      
      String string2 = Utility.format((byte)67, (byte)101, false, '\'');
      assertEquals("'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''67", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = Utility.classOrInterface((byte)52);
      assertEquals("class", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      try { 
        Utility.methodSignatureArgumentTypes("aload_3", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: aload_3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      String string0 = Utility.getSignature("=ASqo");
      assertEquals("L=ASqo;", string0);
      assertNotNull(string0);
      
      ConstantString constantString0 = new ConstantString(166);
      assertNotNull(constantString0);
      assertEquals(166, constantString0.getStringIndex());
      assertEquals((byte)8, constantString0.getTag());
      
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantString0;
      constantArray0[1] = (Constant) constantString0;
      constantArray0[6] = (Constant) constantString0;
      constantArray0[3] = (Constant) constantString0;
      constantArray0[4] = (Constant) constantString0;
      constantArray0[5] = (Constant) constantString0;
      constantArray0[6] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte) (-65);
      byteArray0[5] = (byte)1;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)1, 963, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 2610. Constant pool size is: 7
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte)12;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)48, (byte) (-111), (byte) (-69), (byte)12, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      
      String string0 = "\t\t%";
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("\t\t%");
      assertNotNull(constantUtf8_0);
      assertEquals("\t\t%", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)48, (int) (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)4;
      String string0 = Utility.accessToString((-741), true);
      assertEquals("public private static final native abstract strictfp synthetic annotation enum", string0);
      assertNotNull(string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)48, (byte) (-111), (byte) (-69), (byte)12, (byte)4}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(",Zr%Azx>[r[yeQq");
      assertNotNull(constantUtf8_0);
      assertEquals(",Zr%Azx>[r[yeQq", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)12, 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Utility.accessToString(66, false);
      assertEquals("private volatile", string0);
      assertNotNull(string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte) (-23);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-23), 43, false);
      assertEquals("0:    <illegal opcode>\n1:    lstore_0\n2:    <illegal opcode>\n3:    <illegal opcode>\n", string1);
      assertArrayEquals(new byte[] {(byte) (-23), (byte)63, (byte) (-23), (byte) (-23)}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(4, byteArray0.length);
      
      String string2 = Utility.format((byte) (-23), 2702, true, 'n');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = Utility.classOrInterface(103);
      assertEquals("class", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      try { 
        Utility.methodSignatureArgumentTypes("getfield", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: getfield
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      String string0 = Utility.getSignature("Yc;.;%'+,lJZ^>p$>f");
      assertEquals("LYc;/;%'+,lJZ^>p$>f;", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "LYc;/;%'+,lJZ^>p$>f;");
      assertFalse(boolean0);
      
      byte byte0 = Utility.typeOfSignature("LYc;/;%'+,lJZ^>p$>f;");
      assertEquals((byte)14, byte0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)96;
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byteArray0[2] = (byte)96;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)86, (byte)96, (byte)96}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("CN;:L9MZ");
      assertNotNull(constantUtf8_0);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("CN;:L9MZ", constantUtf8_0.getBytes());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)86, (int) (byte)96);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)0;
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte)89;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)37, (byte)0, (byte)0, (byte)17, (byte)89}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("00 00 25 00 00 11 59", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)37, (byte)0, (byte)0, (byte)17, (byte)89}, byteArray0);
      assertNotNull(string0);
      assertEquals(7, byteArray0.length);
      
      int int0 = Utility.clearBit((byte)0, 41);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte byte0 = Utility.typeOfSignature("CV");
      assertEquals((byte)5, byte0);
      
      String string0 = Utility.signatureToString("CV", true);
      assertEquals("char", string0);
      assertNotNull(string0);
      
      boolean boolean2 = Utility.isJavaIdentifierPart('G');
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      int int0 = Utility.clearBit(299, (byte)55);
      assertEquals(299, int0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte)5;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)5, 299, false);
      assertEquals("", string1);
      assertArrayEquals(new byte[] {(byte)5, (byte) (-108), (byte)5, (byte)55, (byte)55, (byte)5}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(6, byteArray0.length);
      
      String string2 = Utility.accessToString((int) (byte)5, true);
      assertEquals("public protected", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte) (-117);
      String string0 = Utility.accessToString((int) (byte) (-108), true);
      assertEquals("protected final transient native abstract strictfp synthetic annotation enum", string0);
      assertNotNull(string0);
      
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte) (-23);
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)101;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)55, (byte) (-117), (byte) (-108), (byte)58, (byte) (-23), (byte)3, (byte)101, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(",Zr%Azx>[r[yeQq");
      assertNotNull(constantUtf8_0);
      assertEquals(",Zr%Azx>[r[yeQq", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-3908), (int) (byte)58);
      assertEquals("0:    lstore\t\t%139\n2:    lcmp\n3:    astore\t\t%233\n5:    iconst_0\n6:    lsub\n7:    nop\n8:    nop\n", string1);
      assertArrayEquals(new byte[] {(byte)55, (byte) (-117), (byte) (-108), (byte)58, (byte) (-23), (byte)3, (byte)101, (byte)0, (byte)0}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      String string0 = Utility.signatureToString("Z=Xi*)0WA,");
      assertEquals("boolean", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte) (-57);
      byteArray0[1] = (byte)96;
      byteArray0[6] = (byte)72;
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("A$60$93$c7$A$AH$A", string1);
      assertArrayEquals(new byte[] {(byte)65, (byte)96, (byte) (-109), (byte) (-57), (byte)0, (byte)0, (byte)72, (byte)0}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(8, byteArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      String string0 = Utility.getSignature("Yc;.;%'+,lJZ^>p$>f");
      assertEquals("LYc;/;%'+,lJZ^>p$>f;", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "LYc;/;%'+,lJZ^>p$>f;");
      assertFalse(boolean0);
      
      byte byte0 = Utility.typeOfSignature("LYc;/;%'+,lJZ^>p$>f;");
      assertEquals((byte)14, byte0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)96;
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byteArray0[2] = (byte)96;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-33), (byte)96, (byte)96}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("CN;:L9MZ");
      assertNotNull(constantUtf8_0);
      assertEquals("CN;:L9MZ", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)86, (int) (byte)96);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      String string0 = Utility.getSignature("):\n");
      assertEquals("L):;", string0);
      assertNotNull(string0);
      
      String string1 = Utility.getSignature(";SHK;0W");
      assertEquals("L;SHK;0W;", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[6];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(constantPool0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(6, byteArray0.length);
      
      LocalVariableTable localVariableTable0 = new LocalVariableTable(447, 447, (LocalVariable[]) null, constantPool0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(localVariableTable0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, localVariableTable0.getTableLength());
      assertEquals(447, localVariableTable0.getLength());
      assertEquals((byte)5, localVariableTable0.getTag());
      assertEquals(447, localVariableTable0.getNameIndex());
      assertEquals(6, byteArray0.length);
      
      try { 
        Utility.methodSignatureToString("arraylength", "F", "kTy?}+1s", false, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: arraylength
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      boolean boolean0 = false;
      String string0 = Utility.signatureToString("L-;V", false);
      assertEquals("-", string0);
      assertNotNull(string0);
      
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte byte0 = Utility.typeOfSignature("CV");
      assertEquals((byte)5, byte0);
      
      String string0 = Utility.signatureToString("CV", true);
      assertEquals("char", string0);
      assertNotNull(string0);
      
      boolean boolean1 = Utility.isJavaIdentifierPart('G');
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = Utility.clearBit(299, (byte)55);
      assertEquals(299, int0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte)55;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)55, 299, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('f');
      assertTrue(boolean0);
      
      String string0 = Utility.accessToString((-329), true);
      assertEquals("public private protected final transient abstract strictfp synthetic annotation enum", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) "public private protected final transient abstract strictfp synthetic annotation enum";
      objectArray0[2] = (Object) "public private protected final transient abstract strictfp synthetic annotation enum";
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte byte0 = (byte) (-23);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte) (-23);
      byte byte1 = (byte) (-15);
      byteArray0[3] = (byte) (-15);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-55), (-55), false);
      assertEquals("0:    <illegal opcode>\n1:    <illegal opcode>\n2:    <illegal opcode>\n3:    <illegal opcode>\n", string1);
      assertArrayEquals(new byte[] {(byte) (-23), (byte) (-23), (byte) (-23), (byte) (-15)}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(4, byteArray0.length);
      
      String string2 = Utility.format((byte) (-23), (byte) (-23), true, '1');
      assertEquals("-23", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = Utility.classOrInterface(2681);
      assertEquals("interface", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      String string0 = Utility.compactClassName("*k'[k/eySnP_3((", true);
      assertEquals("*k'[k.eySnP_3((", string0);
      assertNotNull(string0);
      
      String string1 = Utility.printArray((Object[]) null, true, true);
      assertNull(string1);
      
      String string2 = Utility.printArray((Object[]) null, true, false);
      assertNull(string2);
      
      String string3 = Utility.printArray((Object[]) null);
      assertNull(string3);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-36);
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte) (-54);
      byteArray0[7] = (byte)53;
      byteArray0[8] = (byte)95;
      Constant[] constantArray0 = new Constant[1];
      ConstantString constantString0 = new ConstantString((byte)10);
      assertNotNull(constantString0);
      assertEquals((byte)8, constantString0.getTag());
      assertEquals(10, constantString0.getStringIndex());
      
      constantArray0[0] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantArray0.length);
      
      String string4 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, 135, true);
      assertEquals("0:    iload_2\n1:    lconst_1\n2:    <illegal opcode>\n3:    fconst_1\n4:    nop\n5:    castore\n6:    breakpoint\n7:    saload\n8:    swap\n", string4);
      assertArrayEquals(new byte[] {(byte)28, (byte)10, (byte) (-36), (byte)12, (byte)0, (byte)85, (byte) (-54), (byte)53, (byte)95}, byteArray0);
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals(1, constantPool0.getLength());
      assertEquals(9, byteArray0.length);
      assertEquals(1, constantArray0.length);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte) (-117);
      boolean boolean0 = true;
      String string0 = Utility.accessToString((int) (byte) (-108), true);
      assertEquals("protected final transient native abstract strictfp synthetic annotation enum", string0);
      assertNotNull(string0);
      
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte) (-23);
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)101;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)52, 34, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      String string0 = Utility.fillup("int", 53, false, 'D');
      assertEquals("DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDint", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)109;
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("m", string1);
      assertArrayEquals(new byte[] {(byte)109}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, byteArray0.length);
      
      short short0 = Utility.searchOpcode("int");
      assertEquals((short) (-1), short0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)109}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(1, byteArray0.length);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      int int0 = byteSequence0.available();
      assertEquals(1, int0);
      assertArrayEquals(new byte[] {(byte)109}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(1, byteArray0.length);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-808));
      assertNotNull(constantMethodType0);
      assertEquals((-808), constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(45, (-808));
      assertNotNull(constantInvokeDynamic0);
      assertEquals(45, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals((-808), constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals(45, constantInvokeDynamic0.getClassIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      assertTrue(constantInvokeDynamic1.equals((Object)constantInvokeDynamic0));
      assertNotNull(constantInvokeDynamic1);
      assertEquals(45, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals((-808), constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals(45, constantInvokeDynamic0.getClassIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals(45, constantInvokeDynamic1.getClassIndex());
      assertEquals((byte)18, constantInvokeDynamic1.getTag());
      assertEquals((-808), constantInvokeDynamic1.getNameAndTypeIndex());
      assertEquals(45, constantInvokeDynamic1.getBootstrapMethodAttrIndex());
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string2 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("ldiv", string2);
      assertArrayEquals(new byte[] {(byte)109}, byteArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteArray0.length);
      
      String string3 = Utility.compactClassName("imul");
      assertEquals("imul", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string4);
      assertArrayEquals(new byte[] {(byte)109}, byteArray0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      short short0 = Utility.searchOpcode("e");
      assertEquals((short) (-1), short0);
      
      String string0 = Utility.compactClassName("E~L6VJ~WfN<", "e", true);
      assertEquals("E~L6VJ~WfN<", string0);
      assertNotNull(string0);
      
      ConstantString constantString0 = new ConstantString((byte)53);
      assertNotNull(constantString0);
      assertEquals((byte)8, constantString0.getTag());
      assertEquals(53, constantString0.getStringIndex());
      
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantString0;
      constantArray0[1] = (Constant) constantString0;
      constantArray0[2] = (Constant) constantString0;
      constantArray0[3] = (Constant) constantString0;
      constantArray0[4] = (Constant) constantString0;
      constantArray0[5] = (Constant) constantString0;
      constantArray0[6] = (Constant) constantString0;
      constantArray0[7] = (Constant) constantString0;
      constantArray0[8] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(9, constantPool0.getLength());
      assertEquals(9, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, constantPool0, 133, 3085, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte) (-117);
      boolean boolean0 = true;
      String string0 = Utility.accessToString((int) (byte) (-108), true);
      assertEquals("protected final transient native abstract strictfp synthetic annotation enum", string0);
      assertNotNull(string0);
      
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte) (-23);
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)101;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)58, 34, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      String string0 = Utility.signatureToString("Z=Xi*)0WA,");
      assertEquals("boolean", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte)96;
      byteArray0[6] = (byte)72;
      byteArray0[7] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte) (-63), (byte) (-109), (byte) (-57), (byte)96, (byte)0, (byte)72, (byte)86}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(8, byteArray0.length);
      
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("\t(wide)");
      assertNotNull(constantUtf8_0);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("\t(wide)", constantUtf8_0.getBytes());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-109), (int) (byte)65);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(0, byteArray0.length);
      
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("@S~95)Ijp|B@");
      assertNotNull(constantUtf8_0);
      assertEquals("@S~95)Ijp|B@", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType(95);
      assertNotNull(constantMethodType0);
      assertEquals(95, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte) (-33), 5);
      assertNotNull(constantInvokeDynamic0);
      assertEquals(5, constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals((-33), constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals((-33), constantInvokeDynamic0.getClassIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      assertTrue(constantInvokeDynamic1.equals((Object)constantInvokeDynamic0));
      assertNotNull(constantInvokeDynamic1);
      assertEquals(5, constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals((-33), constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals((-33), constantInvokeDynamic0.getClassIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals((-33), constantInvokeDynamic1.getBootstrapMethodAttrIndex());
      assertEquals((byte)18, constantInvokeDynamic1.getTag());
      assertEquals((-33), constantInvokeDynamic1.getClassIndex());
      assertEquals(5, constantInvokeDynamic1.getNameAndTypeIndex());
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      boolean boolean1 = true;
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("TjRoa(d");
      assertEquals((byte)14, byte0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "TjRoa(d";
      objectArray0[1] = (Object) "Iv*";
      objectArray0[2] = object0;
      ConstantString constantString0 = new ConstantString((byte)95);
      assertNotNull(constantString0);
      assertEquals((byte)8, constantString0.getTag());
      assertEquals(95, constantString0.getStringIndex());
      
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantString0;
      constantArray0[1] = (Constant) constantString0;
      constantArray0[2] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(3, constantPool0.getLength());
      assertEquals(3, constantArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)53;
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-1166), 2325, false);
      assertEquals("0:    nop\n1:    swap\n2:    swap\n3:    saload\n", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)95, (byte)95, (byte)53}, byteArray0);
      assertNotNull(string0);
      assertEquals(3, constantPool0.getLength());
      assertEquals(3, constantArray0.length);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string0 = Utility.getSignature("t");
      assertEquals("Lt;", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-53);
      byteArray0[6] = (byte)109;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-86), (byte) (-86), (byte)58, (byte)90, (byte) (-1), (byte) (-53), (byte)109}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('%');
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte) (-49);
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean1);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte) (-28), (byte)54, (byte)97, (byte) (-49)}, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(6, byteArray0.length);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      short short0 = Utility.searchOpcode("");
      assertEquals((short) (-1), short0);
      
      String string0 = Utility.accessToString((int) (byte)0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      try { 
        Utility.methodSignatureToString("", "", "ifnull", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('%');
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte) (-49);
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean1);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte) (-28), (byte)54, (byte)97, (byte) (-49)}, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(6, byteArray0.length);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      short short0 = Utility.searchOpcode("");
      assertEquals((short) (-1), short0);
      
      String string0 = Utility.accessToString(42);
      assertEquals("private static synchronized", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "new", (String) null, true, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)51;
      byte byte0 = (byte)90;
      byteArray0[3] = (byte)90;
      byteArray0[5] = (byte)122;
      byte byte1 = (byte)14;
      byteArray0[6] = (byte)14;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("a$m3Z$Az$O$A", string0);
      assertArrayEquals(new byte[] {(byte)97, (byte)32, (byte)51, (byte)90, (byte)0, (byte)122, (byte)14, (byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals(8, byteArray0.length);
      
      String string1 = Utility.fillup("@nHEOH6OK44?<+<cy", (byte)0, false, 'p');
      assertEquals("@nHEOH6OK44?<+<cy", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureArgumentTypes("@nHEOH6OK44?<+<cy", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @nHEOH6OK44?<+<cy
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      String string0 = Utility.replace("(J;}M`O+=M_Dw*LFIZ", "(J;}M`O+=M_Dw*LFIZ", "(J;}M`O+=M_Dw*LFIZ");
      assertEquals("(J;}M`O+=M_Dw*LFIZ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string1 = Utility.convertString("P}Uq]JK3&");
      assertEquals("P}Uq]JK3&", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(J;}M`O+=M_Dw*LFIZ", "P}Uq]JK3&", "(J;}M`O+=M_Dw*LFIZ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `;}M`O+=M_Dw*LFIZ'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('E');
      assertTrue(boolean0);
      
      try { 
        Utility.typeOfSignature("\"&FD)\bHV2c{Q<]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"&FD)\bHV2c{Q<]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      String string0 = "ifnonnull";
      try { 
        Utility.typeOfSignature("=M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =M
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte byte0 = Utility.typeOfSignature("Invalid signature: `");
      assertEquals((byte)10, byte0);
      
      String string0 = Utility.signatureToString("Invalid signature: `", true);
      assertEquals("int", string0);
      assertNotNull(string0);
      
      boolean boolean1 = Utility.isJavaIdentifierPart('G');
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = Utility.clearBit(898, 299);
      assertEquals(898, int0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte)10;
      byteArray0[8] = (byte)10;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)10, (int) (byte)10, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      int int0 = Utility.clearBit(10, 10);
      assertEquals(10, int0);
      
      try { 
        Utility.typeOfSignature("+?-(~tU89,FK!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?-(~tU89,FK!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      short short0 = Utility.searchOpcode("M");
      assertEquals((short) (-1), short0);
      
      boolean boolean0 = Utility.isSet((short) (-1), 95);
      assertTrue(boolean0);
      
      short short1 = Utility.searchOpcode("jsr_w");
      assertEquals((short)201, short1);
      assertFalse(short1 == short0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(constantPool0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(3, byteArray0.length);
      
      String string0 = Utility.convertString("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      short short0 = Utility.searchOpcode("wide");
      assertEquals((short)196, short0);
      
      String string1 = Utility.compactClassName("Yr\"-~Xzx");
      assertEquals("Yr\"-~Xzx", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      try { 
        Utility.typeOfSignature("5>@4HYH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5>@4HYH
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      String string0 = Utility.replace("(J;}M`O+=M_Dw*LFIZ", "(J;}M`O+=M_Dw*LFIZ", "(J;}M`O+=M_Dw*LFIZ");
      assertEquals("(J;}M`O+=M_Dw*LFIZ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        Utility.typeOfSignature("P}Uq]JK3&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P}Uq]JK3&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      try { 
        Utility.typeOfSignature("R]?LtEM+uVvr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R]?LtEM+uVvr
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(constantPool0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(3, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("nop", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(3, byteArray0.length);
      
      short short0 = Utility.searchOpcode("wide");
      assertEquals((short)196, short0);
      
      String string1 = Utility.compactClassName("Y8\"-~Xzx");
      assertEquals("Y8\"-~Xzx", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      boolean boolean0 = false;
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0, false, true);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, objectArray0.length);
      
      String string1 = null;
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      String string0 = "2\\uT7H4b";
      try { 
        Utility.typeOfSignature(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2\\uT7H4b
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      String string0 = Utility.convertString("invokestatic");
      assertEquals("invokestatic", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "invokestatic";
      objectArray0[1] = (Object) "invokestatic";
      objectArray0[2] = (Object) "invokestatic";
      objectArray0[3] = (Object) "invokestatic";
      objectArray0[4] = (Object) "invokestatic";
      objectArray0[5] = (Object) "invokestatic";
      objectArray0[6] = (Object) "invokestatic";
      objectArray0[7] = (Object) "invokestatic";
      String string1 = Utility.printArray(objectArray0);
      assertEquals("{invokestatic, invokestatic, invokestatic, invokestatic, invokestatic, invokestatic, invokestatic, invokestatic}", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(8, objectArray0.length);
      
      try { 
        Utility.methodSignatureToString("{invokestatic, invokestatic, invokestatic, invokestatic, invokestatic, invokestatic, invokestatic, invokestatic}", "invokestatic", "{invokestatic, invokestatic, invokestatic, invokestatic, invokestatic, invokestatic, invokestatic, invokestatic}", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {invokestatic, invokestatic, invokestatic, invokestatic, invokestatic, invokestatic, invokestatic, invokestatic}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      String string0 = Utility.classOrInterface(28);
      assertEquals("class", string0);
      assertNotNull(string0);
      
      int int0 = Utility.clearBit(28, (-3070));
      assertEquals(24, int0);
      
      byte byte0 = Utility.typeOfSignature("Invalid mthd sinature: ");
      assertEquals((byte)10, byte0);
      
      String string1 = Utility.replace("class", "Invalid mthd sinature: ", "Invalid mthd sinature: ");
      assertEquals("class", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "if_icmplt", "dreturn");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      String string0 = Utility.accessToString((-591), false);
      assertEquals("public final synchronized transient native abstract strictfp synthetic annotation enum", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte) (-59);
      byteArray0[5] = (byte) (-28);
      byteArray0[6] = (byte) (-86);
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "The wildcard must not be null");
      assertFalse(boolean0);
      
      byteArray0[7] = (byte)57;
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("cc 5c 86 51 c5 e4 aa 39", string1);
      assertArrayEquals(new byte[] {(byte) (-52), (byte)92, (byte) (-122), (byte)81, (byte) (-59), (byte) (-28), (byte) (-86), (byte)57}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(8, byteArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("PF!io:IvMeR/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `PF!io:IvMeR/'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Utility.classOrInterface(91);
      assertEquals("class", string0);
      assertNotNull(string0);
      
      boolean boolean1 = Utility.isJavaIdentifierPart('0');
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      int int0 = Utility.clearBit(106, 106);
      assertEquals(106, int0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = "{M>qH";
      int int0 = (-603);
      String string1 = "Invalid method sinature: ";
      try { 
        Utility.typeOfSignature("'<X,J7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '<X,J7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Xo.*", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Xo.*'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "M-Gc6,%Nsg,L.Bv");
      assertFalse(boolean0);
      
      String string0 = Utility.convertString("org.apache.bcel.generic.Type");
      assertEquals("org.apache.bcel.generic.Type", string0);
      assertNotNull(string0);
      
      String string1 = Utility.replace("short", "org.apache.bcel.classfile.ConstantNameAndType", "org.apache.bcel.generic.Type");
      assertEquals("short", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      try { 
        Utility.typeOfSignature("%uLtiane9arr;y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %uLtiane9arr;y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('%');
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte) (-49);
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean1);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte) (-28), (byte)54, (byte)97, (byte) (-49)}, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(6, byteArray0.length);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      short short0 = Utility.searchOpcode("");
      assertEquals((short) (-1), short0);
      
      String string0 = Utility.accessToString((-2625));
      assertEquals("public private protected static final synchronized transient native abstract synthetic annotation enum", string0);
      assertNotNull(string0);
      
      try { 
        Utility.methodSignatureToString("org.apache.bcel.classfile.Utility$JavaWriter", "", "Z", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.bcel.classfile.Utility$JavaWriter
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("N!>f}I4v^4", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N!>f}I4v^4'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      String string0 = "$pUibOa>m11vl!";
      try { 
        Utility.typeOfSignature("$pUibOa>m11vl!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $pUibOa>m11vl!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[9];
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(9, byteArray0.length);
      
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("00 00 00 00 00 00 00 00 00", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals(9, byteArray0.length);
      
      try { 
        Utility.typeOfSignature("00 00 00 00 00 00 00 00 00");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 00 00 00 00 00 00 00 00 00
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      try { 
        Utility.typeOfSignature("/:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      try { 
        Utility.typeOfSignature("A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte byte0 = Utility.typeOfSignature("[+bc[UXL@t?");
      assertEquals((byte)13, byte0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        Utility.typeOfSignature("KlIuEa");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: KlIuEa
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('');
      assertFalse(boolean0);
      
      String string0 = Utility.compactClassName("boolean");
      assertEquals("boolean", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[0];
      String string1 = Utility.printArray(objectArray0);
      assertEquals("{}", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("The FilenameFilter must not be null");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      String string0 = "K_L_;[|xSy#8{nPh(&";
      // Undeclared exception!
      try { 
        Utility.signatureToString("K_L_;[|xSy#8{nPh(&", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K_L_;[|xSy#8{nPh(&'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte byte0 = Utility.typeOfSignature("ZnbJ");
      assertEquals((byte)4, byte0);
      
      String string0 = "sm4.Wn v+#u/%[0L}xm";
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "ZnbJ";
      objectArray0[1] = (Object) "ZnbJ";
      objectArray0[2] = (Object) "sm4.Wn v+#u/%[0L}xm";
      String string1 = Utility.printArray(objectArray0);
      assertEquals("{ZnbJ, ZnbJ, sm4.Wn v+#u/%[0L}xm}", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(3, objectArray0.length);
      
      String string2 = null;
      String string3 = null;
      LocalVariable[] localVariableArray0 = new LocalVariable[1];
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("LiAG0jG(<0X", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LiAG0jG(<0X
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte byte0 = Utility.typeOfSignature("LA2rI8BYyP}rNbrjt;V");
      assertEquals((byte)14, byte0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = Utility.isJavaIdentifierPart('|');
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      short short0 = Utility.searchOpcode("LA2rI8BYyP}rNbrjt;V");
      assertEquals((short) (-1), short0);
      
      String string0 = Utility.signatureToString("LA2rI8BYyP}rNbrjt;V");
      assertEquals("A2rI8BYyP}rNbrjt", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      String string0 = "Invalid frame type found while parsing stack map table: ";
      String string1 = Utility.signatureToString("Invalid frame type found while parsing stack map table: ");
      assertEquals("int", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      try { 
        Utility.typeOfSignature("!.ujRScs@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .ujRScs@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Q&u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q&u
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte) (-95);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)25, (byte)69, (byte) (-95)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat((byte)25);
      assertNotNull(constantFloat0);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals(25.0F, constantFloat0.getBytes(), 0.01F);
      
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      assertTrue(constantFloat1.equals((Object)constantFloat0));
      assertNotNull(constantFloat1);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals(25.0F, constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat1.getTag());
      assertEquals(25.0F, constantFloat1.getBytes(), 0.01F);
      
      constantArray0[0] = (Constant) constantFloat1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("aload\t\t%69", string0);
      assertArrayEquals(new byte[] {(byte)25, (byte)69, (byte) (-95)}, byteArray0);
      assertNotNull(string0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(1, constantPool0.getLength());
      assertEquals(3, byteArray0.length);
      assertEquals(1, constantArray0.length);
      
      String string1 = Utility.convertString("}(CB");
      assertEquals("}(CB", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      try { 
        Utility.typeOfSignature("480h6uM\"`:Xs\"~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 480h6uM\"`:Xs\"~
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)70;
      String string0 = "#zFA;$)6#[XV5";
      try { 
        Utility.typeOfSignature("#zFA;$)6#[XV5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #zFA;$)6#[XV5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Izgn,eO?7$64vq|Rw-");
      assertEquals("int", string0);
      assertNotNull(string0);
      
      String string1 = Utility.compactClassName("<&IRcT/ue");
      assertEquals("<&IRcT.ue", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)113;
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte)56;
      byteArray0[6] = (byte)73;
      byteArray0[7] = (byte)83;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)10, (byte) (-85), (byte)38, (byte)113, (byte) (-75), (byte)56, (byte)73, (byte)83}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(8, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[2];
      ConstantInteger constantInteger0 = new ConstantInteger((byte)10);
      assertNotNull(constantInteger0);
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals(10, constantInteger0.getBytes());
      
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      assertTrue(constantInteger1.equals((Object)constantInteger0));
      assertNotNull(constantInteger1);
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals(10, constantInteger0.getBytes());
      assertEquals((byte)3, constantInteger1.getTag());
      assertEquals(10, constantInteger1.getBytes());
      
      constantArray0[0] = (Constant) constantInteger1;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)56, (byte)10);
      assertNotNull(constantFieldref0);
      assertEquals(56, constantFieldref0.getClassIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals(10, constantFieldref0.getNameAndTypeIndex());
      
      constantArray0[1] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantArray0.length);
      
      String string2 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("lconst_1", string2);
      assertArrayEquals(new byte[] {(byte)10, (byte) (-85), (byte)38, (byte)113, (byte) (-75), (byte)56, (byte)73, (byte)83}, byteArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(2, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(8, byteArray0.length);
      assertEquals(2, constantArray0.length);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte byte0 = Utility.typeOfSignature("JTjoad");
      assertEquals((byte)11, byte0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)11;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)11, (byte)11, (byte)11}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("areturn", "j+g_79(oA</");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"j+g_79(oA</\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      try { 
        Utility.typeOfSignature("7'k)-%2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7'k)-%2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("M2~Icp{Ma?y(6V", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M2~Icp{Ma?y(6V'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('<');
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = "istore_1";
      String string1 = "The magic number cannot be null";
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("2[yxN=&Zp", "dtcE!", "static", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2[yxN=&Zp
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Utility.signatureToString("JTjoad", true);
      assertEquals("long", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("Tjoad", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Tjoad
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        Utility.typeOfSignature("480h6uM\"`:Xs\"~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 480h6uM\"`:Xs\"~
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      String string0 = "k;O|Q,!p1yv";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      try { 
        Utility.typeOfSignature("M$Nd8B(y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M$Nd8B(y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte byte0 = Utility.typeOfSignature("F!y& <3]ZT[jN)uw/;");
      assertEquals((byte)6, byte0);
      
      String string0 = Utility.signatureToString("F!y& <3]ZT[jN)uw/;", true);
      assertEquals("float", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("BootstrapMethods");
      assertEquals("byte", string0);
      assertNotNull(string0);
      
      String string1 = "\\qBUR=jl@-";
      try { 
        Utility.methodSignatureArgumentTypes("qBUR=jl@-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: qBUR=jl@-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      String string0 = "CCOVp*s";
      boolean boolean0 = false;
      String string1 = Utility.signatureToString("CCOVp*s", false);
      assertEquals("char", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      try { 
        Utility.typeOfSignature("char");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: char
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      String string0 = Utility.replace("(J;}M`O+=M_Dw*LFIZ", "(J;}M`O+=M_Dw*LFIZ", "(J;}M`O+=M_Dw*LFIZ");
      assertEquals("(J;}M`O+=M_Dw*LFIZ", string0);
      assertNotNull(string0);
      
      try { 
        Utility.methodSignatureArgumentTypes("(J;}M`O+=M_Dw*LFIZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `;}M`O+=M_Dw*LFIZ'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("BootstrapMethods");
      assertEquals((byte)8, byte0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("S[T1MPX`#X^E/IXe");
      assertEquals((byte)9, byte0);
      
      try { 
        Utility.typeOfSignature("! qgK&CgshsvJ!:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  qgK&CgshsvJ!:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      String string0 = Utility.convertString("E%5^IEl");
      assertEquals("E%5^IEl", string0);
      assertNotNull(string0);
      
      try { 
        Utility.typeOfSignature("E%5^IEl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E%5^IEl
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte byte0 = Utility.typeOfSignature("Invalid signature: `");
      assertEquals((byte)10, byte0);
      
      int int0 = 55;
      String string0 = Utility.classOrInterface(55);
      assertEquals("class", string0);
      assertNotNull(string0);
      
      String string1 = Utility.accessToString(0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      try { 
        Utility.methodSignatureReturnType("bytes must not be null!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `bytes must not be null!'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      int int0 = Utility.clearBit((-2390), (-2390));
      assertEquals((-3414), int0);
      
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("LineNumberTable");
      assertEquals((byte)14, byte0);
      
      String string0 = Utility.replace("G$+_ZT)dbkY6Bw1`)W)", "LineNumberTable", "\"");
      assertEquals("G$+_ZT)dbkY6Bw1`)W)", string0);
      assertNotNull(string0);
      
      String string1 = Utility.format((byte)14, (byte)14, true, 'C');
      assertEquals("14CCCCCCCCCCCC", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      try { 
        Utility.typeOfSignature("&G?F]PuJ;&w>f$i4st_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &G?F]PuJ;&w>f$i4st_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      String string0 = "- LsV2<(9PsHe~";
      try { 
        Utility.typeOfSignature("- LsV2<(9PsHe~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: - LsV2<(9PsHe~
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      try { 
        Utility.typeOfSignature("N!>f}I4v^4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: N!>f}I4v^4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      String string0 = Utility.methodSignatureReturnType("System");
      assertEquals("short", string0);
      assertNotNull(string0);
      
      String string1 = Utility.accessToString((-1464));
      assertEquals("static volatile interface strictfp synthetic annotation enum", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("CONSTANT_String");
      assertEquals((byte)5, byte0);
      
      String string0 = Utility.compactClassName("O*/a6<");
      assertEquals("O*.a6<", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("Q]Ttv5&S,=0K?", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q]Ttv5&S,=0K?'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Dont call getValueLong() on a non LONG ElementValue");
      assertEquals((byte)7, byte0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Q L*V2<(9PsHe~", "OiI0Xkh.[%i", "Q L*V2<(9PsHe~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q L*V2<(9PsHe~
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      String string0 = Utility.getSignature("xtIaInr@4E.@=C\">_");
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("!Bv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: !Bv
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte byte0 = Utility.typeOfSignature("Invalid signature: `");
      assertEquals((byte)10, byte0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = true;
      String string0 = Utility.signatureToString("Invalid signature: `", true);
      assertEquals("int", string0);
      assertNotNull(string0);
      
      try { 
        Utility.typeOfSignature(";<qGW~qi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;<qGW~qi
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      String string0 = Utility.compactClassName("ekP^`wtSu]g?JQ^-", "", true);
      assertEquals("ekP^`wtSu]g?JQ^-", string0);
      assertNotNull(string0);
      
      String string1 = Utility.compactClassName("", true);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte) (-1);
      String string2 = Utility.toHexString(byteArray0);
      assertEquals("ae ff", string2);
      assertArrayEquals(new byte[] {(byte) (-82), (byte) (-1)}, byteArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Utility.convertString("dconst_1");
      assertEquals("dconst_1", string0);
      assertNotNull(string0);
      
      try { 
        Utility.decode("t)i{PdvM$-Izq+XT4", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("E%5^IEl", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E%5^IEl'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      String string0 = "):\n";
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      String string0 = "G$+_ZT)dbkY6Bw1`)W)";
      // Undeclared exception!
      try { 
        Utility.signatureToString("G$+_ZT)dbkY6Bw1`)W)", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G$+_ZT)dbkY6Bw1`)W)'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      String string0 = "TAsYT5M^4mG";
      // Undeclared exception!
      try { 
        Utility.signatureToString("TAsYT5M^4mG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: TAsYT5M^4mG
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = false;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("", string0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(string0);
      assertEquals(0, byteArray0.length);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(0, byteArray0.length);
      
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      String string0 = Utility.convertString(";x");
      assertEquals(";x", string0);
      assertNotNull(string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('\\');
      assertFalse(boolean0);
      
      String string1 = Utility.replace(";x", ";x", (String) null);
      assertEquals("null", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.convertString(";x");
      assertEquals(";x", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = Utility.methodTypeToSignature(";x", (String[]) null);
      assertEquals("()L;x;", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = Utility.compactClassName("*`zIGzJ>y%8ND|");
      assertEquals("*`zIGzJ>y%8ND|", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = Utility.compactClassName(";x");
      assertEquals(";x", string5);
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      String string6 = Utility.methodSignatureToString("()L;x;", "()L;x;", "*`zIGzJ>y%8ND|", false);
      assertEquals("*`zIGzJ>y%8ND|  ()L;x;()", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(0, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[1];
      String string7 = Utility.replace(";x", "*`zIGzJ>y%8ND|", "%M8|qKSq4\"(");
      assertEquals(";x", string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      
      char char0 = '_';
      boolean boolean1 = Utility.isJavaIdentifierPart('_');
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("ifnonnull", "*`zIGzJ>y%8ND|");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // *`zIGzJ>y%8ND|
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      String string0 = Utility.compactClassName(".{!G+K-Z");
      assertEquals(".{!G+K-Z", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Invalid signature: `");
      assertEquals((byte)10, byte0);
      
      String string0 = Utility.signatureToString("Invalid signature: `", true);
      assertEquals("int", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("@n>ql z", (String) null, "byte");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @n>ql z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      try { 
        Utility.typeOfSignature("):\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ):
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      try { 
        Utility.typeOfSignature("<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("wide", "@n>ql z", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)91;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-115), (byte)91}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      try { 
        Utility.typeOfSignature(",<w|8e[u[$7O{9@;V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,<w|8e[u[$7O{9@;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Jt");
      assertEquals("long", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "long";
      objectArray0[1] = (Object) "Jt";
      objectArray0[2] = (Object) "Jt";
      String string1 = Utility.printArray(objectArray0, false, true);
      assertEquals("\"long\", \"Jt\", \"Jt\"", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(3, objectArray0.length);
      
      try { 
        Utility.methodSignatureArgumentTypes("long", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: long
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      String string0 = ":_+be|r)";
      try { 
        Utility.typeOfSignature("Warning: Padding byte != 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Warning: Padding byte != 0 in 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      String string0 = Utility.convertString("0Ci");
      assertEquals("0Ci", string0);
      assertNotNull(string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('8');
      assertTrue(boolean0);
      
      try { 
        Utility.methodSignatureArgumentTypes("org.apache.bcel.classfile.ExceptionTable");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.bcel.classfile.ExceptionTable
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      String string0 = "}C\\H";
      boolean boolean0 = true;
      try { 
        Utility.decode("}CH", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      String string0 = Utility.convertString("g6|u$yJ^z");
      assertEquals("g6|u$yJ^z", string0);
      assertNotNull(string0);
      
      try { 
        Utility.decode("g6|u$yJ^z", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      String string0 = Utility.compactClassName("ekP^`wtSu]g?JQ^-", "", true);
      assertEquals("ekP^`wtSu]g?JQ^-", string0);
      assertNotNull(string0);
      
      String string1 = Utility.compactClassName("");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte) (-1);
      String string2 = Utility.toHexString(byteArray0);
      assertEquals("ae ff", string2);
      assertArrayEquals(new byte[] {(byte) (-82), (byte) (-1)}, byteArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      String string0 = Utility.getSignature("_oTjM3-K`oV{u");
      assertEquals("L_oTjM3-K`oV{u;", string0);
      assertNotNull(string0);
      
      String string1 = Utility.convertString("wide");
      assertEquals("wide", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = "boolean";
      try { 
        Utility.typeOfSignature("Y/Y1H}xB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y/Y1H}xB
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      String string0 = Utility.getSignature("\t<");
      assertEquals("L<;", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("S5k0Ih0#d[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      int int0 = Utility.setBit((-1178), (-1178));
      assertEquals((-1178), int0);
      
      String string0 = Utility.compactClassName("bB\\OO");
      assertEquals("bB\\OO", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)80;
      byte byte0 = (byte) (-98);
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)41;
      Constant[] constantArray0 = new Constant[4];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("bB\\OO");
      assertNotNull(constantUtf8_0);
      assertEquals("bB\\OO", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      constantArray0[0] = (Constant) constantUtf8_0;
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("!4|%mx]^@nj+R", "!4|%mx]^@nj+R");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"!4|%mx]^@nj+R\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      File file0 = MockFile.createTempFile("\\lfgEpGaqyvI %", "\\lfgEpGaqyvI %");
      assertNotNull(file0);
      assertEquals("/tmp/\\lfgEpGaqyvI %0\\lfgEpGaqyvI %", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("\\lfgEpGaqyvI %0\\lfgEpGaqyvI %", file0.getName());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      assertNotNull(mockPrintStream0);
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      
      mockPrintStream0.print(true);
      assertEquals("/tmp/\\lfgEpGaqyvI %0\\lfgEpGaqyvI %", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals(4L, file0.length());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("\\lfgEpGaqyvI %0\\lfgEpGaqyvI %", file0.getName());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.toString());
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) file0;
      objectArray0[1] = (Object) "ohHXKw=";
      PrintStream printStream0 = mockPrintStream0.format(locale1, "ohHXKw=", objectArray0);
      assertNotNull(printStream0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertSame(printStream0, mockPrintStream0);
      assertEquals("/tmp/\\lfgEpGaqyvI %0\\lfgEpGaqyvI %", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("\\lfgEpGaqyvI %0\\lfgEpGaqyvI %", file0.getName());
      assertTrue(file0.canWrite());
      assertEquals(11L, file0.length());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.toString());
      assertEquals(2, objectArray0.length);
      
      Utility.printArray(printStream0, objectArray0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertSame(printStream0, mockPrintStream0);
      assertEquals("/tmp/\\lfgEpGaqyvI %0\\lfgEpGaqyvI %", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(57L, file0.length());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("\\lfgEpGaqyvI %0\\lfgEpGaqyvI %", file0.getName());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.toString());
      assertEquals(2, objectArray0.length);
      
      Constant[] constantArray0 = new Constant[0];
      PrintStream printStream1 = mockPrintStream0.append('1');
      assertNotNull(printStream1);
      assertSame(mockPrintStream0, printStream0);
      assertSame(mockPrintStream0, printStream1);
      assertSame(printStream1, mockPrintStream0);
      assertSame(printStream1, printStream0);
      assertEquals("/tmp/\\lfgEpGaqyvI %0\\lfgEpGaqyvI %", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(58L, file0.length());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("\\lfgEpGaqyvI %0\\lfgEpGaqyvI %", file0.getName());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      assertNotNull(dataOutputStream0);
      assertEquals("/tmp/\\lfgEpGaqyvI %0\\lfgEpGaqyvI %", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(58L, file0.length());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("\\lfgEpGaqyvI %0\\lfgEpGaqyvI %", file0.getName());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      
      dataOutputStream0.writeBoolean(true);
      assertSame(mockPrintStream0, printStream0);
      assertSame(mockPrintStream0, printStream1);
      assertEquals("/tmp/\\lfgEpGaqyvI %0\\lfgEpGaqyvI %", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(59L, file0.length());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("\\lfgEpGaqyvI %0\\lfgEpGaqyvI %", file0.getName());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      
      constantPool0.dump(dataOutputStream0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(mockPrintStream0, printStream1);
      assertEquals("/tmp/\\lfgEpGaqyvI %0\\lfgEpGaqyvI %", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(61L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("\\lfgEpGaqyvI %0\\lfgEpGaqyvI %", file0.getName());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool0, constantPool1);
      assertEquals(0, constantPool1.getLength());
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, constantPool1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = "KrG/|wO^>\":?P5!";
      try { 
        Utility.methodSignatureReturnType("KrG/|wO^>\":?P5!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `KrG/|wO^>\":?P5!'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      String string0 = Utility.replace("\"", "monitorenter", "~;jrn0");
      assertEquals("\"", string0);
      assertNotNull(string0);
      
      String string1 = Utility.convertString("\"");
      assertEquals("\\\"", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte) (-32);
      String string2 = Utility.toHexString(byteArray0);
      assertEquals("dd 33 e0", string2);
      assertArrayEquals(new byte[] {(byte) (-35), (byte)51, (byte) (-32)}, byteArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(3, byteArray0.length);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('z');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("WG\"_P:*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `WG\"_P:*'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Utility.convertString("{MZo@'lu4i");
      assertEquals("{MZo@\\'lu4i", string0);
      assertNotNull(string0);
      
      int int0 = Utility.setBit(90, 90);
      assertEquals(67108954, int0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte) (-38);
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte) (-51);
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte) (-52);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)31, (byte)59, (byte) (-38), (byte)51, (byte) (-51), (byte)11, (byte) (-52)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("~8`qtNyBpoi^KhfBR", "Lstatic;V");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"Lstatic;V\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte)63;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-84), (byte) (-96), (byte)60, (byte)58, (byte)46, (byte)103, (byte)63}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      try { 
        Utility.methodSignatureReturnType("Gx  /| ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Gx  /| '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        Utility.typeOfSignature("@>ql z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @>ql z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      try { 
        Utility.typeOfSignature("6r*1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6r*1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      byte byte0 = Utility.typeOfSignature("System");
      assertEquals((byte)9, byte0);
      
      try { 
        Utility.methodSignatureReturnType("M_DN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M_DN'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("filename\t\t", "new", (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      try { 
        Utility.methodSignatureReturnType("M_DN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M_DN'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Utility.compactClassName("ZwGz", "@>ql z", true);
      assertEquals("ZwGz", string0);
      assertNotNull(string0);
      
      int int0 = Utility.setBit(1055, 1055);
      assertEquals((-2147482593), int0);
      
      try { 
        Utility.methodSignatureArgumentTypes("A\"T", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A\"T
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      try { 
        Utility.typeOfSignature(":_+be|r)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :_+be|r)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string0 = "t";
      String string1 = Utility.getSignature("t");
      assertEquals("Lt;", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-53);
      byteArray0[6] = (byte)109;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-86), (byte)72, (byte)58, (byte)90, (byte) (-1), (byte) (-53), (byte)109}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      boolean boolean0 = Utility.isSet(3958, 3958);
      assertFalse(boolean0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("6+dr.");
      assertNotNull(mockPrintStream0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) "6+dr.";
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) mockPrintStream0;
      objectArray0[6] = (Object) mockPrintStream0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[7] = object0;
      objectArray0[8] = (Object) "6+dr.";
      PrintStream printStream0 = mockPrintStream0.printf("6+dr.", objectArray0);
      assertNotNull(printStream0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertEquals(9, objectArray0.length);
      
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertFalse(mockPrintStream1.equals((Object)printStream0));
      assertNotNull(mockPrintStream1);
      assertEquals(9, objectArray0.length);
      
      Utility.printArray((PrintStream) mockPrintStream1, objectArray0);
      assertFalse(mockPrintStream0.equals((Object)mockPrintStream1));
      assertFalse(printStream0.equals((Object)mockPrintStream1));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertFalse(mockPrintStream1.equals((Object)printStream0));
      assertSame(mockPrintStream0, printStream0);
      assertNotSame(mockPrintStream0, mockPrintStream1);
      assertNotSame(printStream0, mockPrintStream1);
      assertSame(printStream0, mockPrintStream0);
      assertNotSame(mockPrintStream1, mockPrintStream0);
      assertNotSame(mockPrintStream1, printStream0);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object3));
      assertNotNull(object4);
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object0));
      assertNotNull(object5);
      
      objectArray0[5] = object5;
      Object object6 = new Object();
      assertFalse(object6.equals((Object)object0));
      assertFalse(object6.equals((Object)object5));
      assertFalse(object6.equals((Object)object3));
      assertFalse(object6.equals((Object)object2));
      assertFalse(object6.equals((Object)object4));
      assertFalse(object6.equals((Object)object1));
      assertNotNull(object6);
      
      objectArray0[6] = object6;
      Object object7 = new Object();
      assertFalse(object7.equals((Object)object6));
      assertFalse(object7.equals((Object)object4));
      assertFalse(object7.equals((Object)object1));
      assertFalse(object7.equals((Object)object5));
      assertFalse(object7.equals((Object)object0));
      assertFalse(object7.equals((Object)object2));
      assertFalse(object7.equals((Object)object3));
      assertNotNull(object7);
      
      objectArray0[7] = object7;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "s/o\"K7-a9");
      assertFalse(boolean0);
      
      boolean boolean1 = false;
      String string0 = Utility.printArray(objectArray0, false);
      assertNotNull(string0);
      assertEquals(8, objectArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)70;
      String string0 = "U:<I7]";
      try { 
        Utility.typeOfSignature("U:<I7]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: U:<I7]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      // Undeclared exception!
      try { 
        Utility.compactClassName("5d%0Zqur50o+%A?{", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte)2;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-101), (byte)2}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      byte byte0 = Utility.typeOfSignature("VHQ)f&SjRnqR!t&>cJ6");
      assertEquals((byte)12, byte0);
      
      try { 
        Utility.methodSignatureArgumentTypes("~&a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ~&a
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      String string0 = "}G,Np qLu]";
      // Undeclared exception!
      try { 
        Utility.replace((String) null, "~g{$NE.(TG>Br]", "Lmphf)D?I");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "double");
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Utility.compactClassName("~&a", "V", true);
      assertEquals("~&a", string0);
      assertNotNull(string0);
      
      int int0 = Utility.clearBit(91, (-161));
      assertEquals(91, int0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-121);
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("87", string1);
      assertArrayEquals(new byte[] {(byte) (-121)}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, byteArray0.length);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-121)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(1, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      String string2 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("i2d", string2);
      assertArrayEquals(new byte[] {(byte) (-121)}, byteArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteArray0.length);
      assertEquals(0, constantArray0.length);
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("char", false);
      assertArrayEquals(new byte[] {(byte)99, (byte)104, (byte)97, (byte)114}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(4, byteArray0.length);
      
      String string0 = Utility.getSignature("char");
      assertEquals("C", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      String string0 = "";
      String string1 = Utility.getSignature("");
      assertEquals("L;", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string2 = "lsub";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("8*e_3Y_|i|/b]o>", (String) null, "lsub", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8*e_3Y_|i|/b]o>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      String string0 = "(_beFWAr)";
      try { 
        Utility.typeOfMethodSignature("(_beFWAr)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Invalid constant pool reference: ", true);
      assertEquals("int", string0);
      assertNotNull(string0);
      
      byte byte0 = Utility.typeOfSignature("Invalid constant pool reference: ");
      assertEquals((byte)10, byte0);
      
      String string1 = Utility.compactClassName("4v?u", "Invalid constant pool reference: ", true);
      assertEquals("4v?u", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, byteArray0.length);
      
      boolean boolean2 = Utility.isJavaIdentifierPart('P');
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string0 = Utility.convertString("g6@2qlkyy3pwBO>=S");
      assertNotNull(string0);
      
      String string1 = "(_beFWAr)";
      try { 
        Utility.typeOfSignature("(_beFWAr)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (_beFWAr)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      String string0 = Utility.replace("invokevirtual", "invokevirtual", "invokevirtual");
      assertEquals("invokevirtual", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("HB[9x#kK9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `HB[9x#kK9'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      String string0 = Utility.compactClassName("l", "~&", false);
      assertEquals("l", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = Utility.decode("l", false);
      assertArrayEquals(new byte[] {(byte)108}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      try { 
        Utility.methodSignatureArgumentTypes("\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      String string0 = "(_beFWAr)";
      try { 
        Utility.typeOfSignature("(_beFWAr)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (_beFWAr)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)51;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-55), (byte) (-125), (byte)60, (byte) (-2), (byte) (-61), (byte) (-1), (byte)51}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean1 = Utility.equals(byteArray1, byteArray1);
      assertTrue(boolean1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray1.length);
      
      String string0 = "UDTlstore_2";
      boolean boolean2 = true;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(0, byteArray1.length);
      
      try { 
        Utility.typeOfSignature("g+Dmo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: g+Dmo
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Invalid constant pool reference: ", true);
      assertEquals("int", string0);
      assertNotNull(string0);
      
      String string1 = Utility.compactClassName("int", "short", true);
      assertEquals("int", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        Utility.decode((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      String string0 = Utility.compactClassName("*o", "~&a", true);
      assertEquals("*o", string0);
      assertNotNull(string0);
      
      boolean boolean0 = Utility.isSet(35, (-334));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      String string0 = ">vE";
      String string1 = Utility.compactClassName(">vE");
      assertEquals(">vE", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.accessToString(105, false);
      assertEquals("public static synchronized volatile", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      try { 
        Utility.typeOfSignature(">vE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >vE
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, "(_5bWACDr)", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("<'Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `<'Z'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      int int0 = Utility.setBit(239, 43);
      assertEquals(2287, int0);
      
      String string0 = Utility.compactClassName("`giFeOI;", "java.lang.", true);
      assertEquals("`giFeOI;", string0);
      assertNotNull(string0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("", string1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(0, byteArray0.length);
      
      boolean boolean1 = Utility.isJavaIdentifierPart('(');
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      String string0 = Utility.compactClassName("nx#b", "UDT", true);
      assertEquals("nx#b", string0);
      assertNotNull(string0);
      
      String string1 = Utility.fillup("UDT", 3, true, 'W');
      assertEquals("UDT", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      String string0 = Utility.format((-1111), (-1111), true, '!');
      assertEquals("-1111", string0);
      assertNotNull(string0);
      
      try { 
        Utility.methodSignatureReturnType("E1`7U6uvI,e/u[MZC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E1`7U6uvI,e/u[MZC'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("UPr,Ej#61", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `UPr,Ej#61'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Utility.signatureToString("VVNO\"E$_],UbD*rg", false);
      assertEquals("void", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      String string0 = Utility.signatureToString("VP\"e xmWpA*|(", false);
      assertEquals("void", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "VP\"e xmWpA*|(";
      stringArray0[1] = "void";
      stringArray0[2] = "VP\"e xmWpA*|(";
      stringArray0[3] = "VP\"e xmWpA*|(";
      try { 
        Utility.methodTypeToSignature("VP\"e xmWpA*|(", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte byte0 = Utility.typeOfSignature("LineNumberTable");
      assertEquals((byte)14, byte0);
      
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("LineNumberTable", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LineNumberTable
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      assertNotNull(bufferedOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      assertNotNull(mockPrintWriter0);
      
      PrintWriter printWriter0 = mockPrintWriter0.append('i');
      assertNotNull(printWriter0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      byteArrayOutputStream0.write(34);
      assertEquals("\"", byteArrayOutputStream0.toString());
      assertEquals(1, byteArrayOutputStream0.size());
      
      Utility.printArray(printWriter0, (Object[]) null);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertEquals("\"", byteArrayOutputStream0.toString());
      assertEquals(1, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      int int0 = Utility.setBit(717, 717);
      assertEquals(8909, int0);
      
      String string0 = "GJU[L|2";
      try { 
        Utility.typeOfSignature("GJU[L|2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: GJU[L|2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Invalid constant pool reference: ", true);
      assertEquals("int", string0);
      assertNotNull(string0);
      
      String string1 = Utility.format(2139, (-3767), true, 'z');
      assertEquals("2139", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      int int0 = 239;
      int int1 = 43;
      int int2 = Utility.setBit(239, 43);
      assertEquals(2287, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      String string0 = "(_beFWAr)";
      String string1 = Utility.convertString("(_beFWAr)");
      assertEquals("(_beFWAr)", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.replace("(_beFWAr)", "(_beFWAr)", "");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = "long";
      String string4 = "WH";
      int int3 = 112;
      LocalVariable[] localVariableArray0 = new LocalVariable[1];
      int int4 = 66;
      Attribute[] attributeArray0 = new Attribute[5];
      int int5 = (-2753);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(0, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[5];
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile((File) null, "(_beFWAr)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"(_beFWAr)\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      int int0 = new Integer(239);
      assertEquals(239, int0);
      
      String string0 = Utility.convertString("(_\beFWAr)");
      assertEquals("(_\beFWAr)", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "(_\\beFWAr)";
      objectArray0[1] = (Object) "(_\\beFWAr)";
      String string1 = Utility.printArray(objectArray0, true, true);
      assertEquals("{\"(_\\beFWAr)\", \"(_\\beFWAr)\"}", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      int int0 = 43;
      try { 
        Utility.typeOfMethodSignature("(_beFWAr)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      String string0 = Utility.compactClassName("lstore_2", "lstore_2", true);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = Utility.accessToString((-2356), false);
      assertEquals("protected static volatile transient interface abstract synthetic annotation enum", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.accessToString(254, true);
      assertEquals("private protected static final volatile transient", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)70;
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("U:<I7]", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U:<I7]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      int int0 = 2647;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "lload_1");
      assertFalse(boolean0);
      
      boolean boolean1 = false;
      char char0 = 'p';
      String string0 = Utility.format(2647, 130, false, 'p');
      assertEquals("pppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp2647", string0);
      assertNotNull(string0);
      
      try { 
        Utility.typeOfMethodSignature("n-YHbApA!H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: n-YHbApA!H
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      String[] stringArray0 = new String[1];
      int int0 = Utility.setBit(0, 208);
      assertEquals(65536, int0);
      
      String string0 = "";
      boolean boolean0 = Utility.isJavaIdentifierPart('_');
      assertTrue(boolean0);
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("", "");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)0;
      Utility.format((-957), 606, false, '.');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(Fq,X4(9yVaLizX\"y", "java.lang.DZ+F{*[a>nY+ko", "lstore_2lstore_2", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `q,X4(9yVaLizX\"y'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)90;
      byteArray0[5] = (byte)122;
      byteArray0[6] = (byte)14;
      byteArray0[7] = (byte)69;
      Utility.encode(byteArray0, false);
      Utility.fillup("@nHEOH6OK44?<+<cy", (byte)69, false, 'p');
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureArgumentTypes("pppppppppppppppppppppppppppppppppppppppppppppppppppp@nHEOH6OK44?<+<cy", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: pppppppppppppppppppppppppppppppppppppppppppppppppppp@nHEOH6OK44?<+<cy
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)8;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)47;
      byteArray1[1] = (byte)47;
      byteArray1[2] = (byte)8;
      byteArray1[3] = (byte)47;
      Utility.equals(byteArray0, byteArray1);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.replace("2tM59.xE", (String) null, "anewarray");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("DZ+F{*[a>nY+ko", true);
      assertEquals("double", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte)25;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)5;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)25;
      byteArray1[3] = (byte)53;
      byteArray1[4] = (byte)18;
      byteArray1[5] = (byte)53;
      byteArray1[6] = (byte)59;
      byteArray1[7] = (byte)25;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      Utility.convertString(";x");
      Utility.isJavaIdentifierPart('\\');
      Utility.replace(";x", ";x", (String) null);
      Utility.convertString(";x");
      Utility.format(2598, 97, false, '\\');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "org.apache.bcel.classfile.Utility$JavaReader", "athrow", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.fillup("YumU#` ,g;)23$", 2627, true, 'D');
      try { 
        Utility.methodSignatureArgumentTypes("org.apache.commons.io.filefilter.HiddenFileFilter", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.commons.io.filefilter.HiddenFileFilter
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      String string0 = "DZ+F{*[a>n\\Y+ko";
      Utility.setBit(208, 97);
      String string1 = "";
      String string2 = "";
      // Undeclared exception!
      Utility.replace("DZ+F{*[a>nY+ko", "", "");
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      boolean boolean0 = true;
      Utility.methodSignatureReturnType("Z+F{*[>Y+ko", true);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Z+F{*[>Y+ko";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("Z+F{*[>Y+ko", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[>Y+ko
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      String string0 = "";
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      String string0 = "(reference_kind = ";
      try { 
        Utility.methodSignatureArgumentTypes("(reference_kind = ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `reference_kind = '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)20;
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      Utility.compactClassName("int");
      Utility.format(80, 9, false, '%');
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "%%%%%%%80";
      objectArray0[1] = (Object) "int";
      Utility.format(80, 3, false, '5');
      Utility.replace("int", "jar:file:", "+av*;,XzE");
      MockPrintStream mockPrintStream0 = new MockPrintStream("+av*;,XzE");
      Locale locale0 = Locale.ROOT;
      String string0 = "";
      // Undeclared exception!
      try { 
        locale0.getUnicodeLocaleType("%%%%%%%80");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed Unicode locale key: %%%%%%%80
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      Utility.methodSignatureReturnType("Could not create the directory ", true);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "char";
      stringArray0[1] = "char";
      stringArray0[2] = "Could not create the directory ";
      stringArray0[3] = "DZ+F{*[a>nY+ko";
      stringArray0[4] = "DZ+F{*[a>nY+ko";
      stringArray0[5] = "DZ+F{*[a>nY+ko";
      stringArray0[6] = "Could not create the directory ";
      stringArray0[7] = "Could not create the directory ";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("char", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[a>nY+ko
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("G$+_ZT)dbkY6Bw1`)W)", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      String string0 = "char";
      String string1 = "J).I4\\}c4Maf&0~WI";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("#", "char", "J).I4}c4Maf&0~WI", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      Utility.convertString(";x");
      Utility.isJavaIdentifierPart('\\');
      Utility.replace(";x", ";x", (String) null);
      Utility.convertString(";x");
      Utility.methodTypeToSignature(";x", (String[]) null);
      Utility.compactClassName("*`zIGzJ>y%8ND|");
      Utility.compactClassName(";x");
      Utility.getSignature("*`zIGzJ>y%8ND|");
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      Utility.methodSignatureReturnType("()L;x;");
      char char0 = '_';
      Utility.isJavaIdentifierPart('_');
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("ifnC>null", "*`zIGzJ>y%8ND|");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // *`zIGzJ>y%8ND|
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      String string0 = ";x";
      Utility.convertString(";x");
      Utility.isJavaIdentifierPart('\\');
      Utility.replace(";x", ";x", (String) null);
      Utility.convertString(";x");
      String[] stringArray0 = null;
      Utility.methodTypeToSignature(";x", (String[]) null);
      String string1 = "*`zIGzJ>y%8ND|";
      Utility.compactClassName("*`zIGzJ>y%8ND|");
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-30);
      byteArray0[5] = (byte) (-92);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)6;
      Utility.toHexString(byteArray0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "2d 00 00 00 e2 a4 00 06";
      Object object0 = new Object();
      File file0 = MockFile.createTempFile("2d 00 00 00 e2 a4 00 06", "2d 00 00 00 e2 a4 00 06");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Locale locale0 = Locale.FRANCE;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "2d 00 00 00 e2 a4 00 06", objectArray0);
      Utility.printArray(printWriter0, objectArray0);
      assertSame(printWriter0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      int int0 = new Integer(3157);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("f2d", string0);
      
      Utility.classOrInterface((byte) (-79));
      boolean boolean0 = Utility.isSet((-2748), 1972);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[0];
      int int1 = Utility.setBit(3157, (-2748));
      assertEquals(3157, int1);
      
      String string1 = Utility.accessToString(1972);
      String string2 = Utility.fillup("protected final synchronized transient native interface abstract", (-2748), true, 'e');
      assertTrue(string2.equals((Object)string1));
      
      String string3 = Utility.printArray(objectArray0, false);
      assertEquals("", string3);
      
      String string4 = Utility.classOrInterface(604);
      assertEquals("interface", string4);
      
      String string5 = Utility.classOrInterface((byte)81);
      assertEquals("class", string5);
      
      String string6 = Utility.printArray(objectArray0, true);
      assertEquals("{}", string6);
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-24);
      Utility.encode(byteArray0, false);
      Utility.getSignature(", catch_type = ");
      Utility.searchOpcode("Could not create the directory ");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "SNK`W'UixV( swQ0";
      stringArray0[1] = "$e8";
      stringArray0[2] = ", catch_type = ";
      stringArray0[3] = "multianewarray";
      stringArray0[4] = "$e8";
      stringArray0[5] = "putstatic";
      stringArray0[6] = "L,;";
      stringArray0[7] = ", catch_type = ";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("*k'[k/eySnP_3((", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[k/eySnP_3((
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      String string0 = ":'Q0K1G*n8?gT\\xP-";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ir>g%FBn7v:8kt");
      Utility.compactClassName(":'Q0K1G*n8?gTxP-", false);
      Utility.printArray((Object[]) null, true);
      Utility.printArray((Object[]) null, false, true);
      Utility.printArray((Object[]) null);
      ConstantString constantString0 = new ConstantString((byte)85);
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantString0;
      constantArray0[1] = (Constant) constantString0;
      constantArray0[2] = (Constant) constantString0;
      constantArray0[3] = (Constant) constantString0;
      constantArray0[4] = (Constant) constantString0;
      constantArray0[5] = (Constant) constantString0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(46, 7);
      constantArray0[6] = (Constant) constantInterfaceMethodref0;
      constantArray0[7] = (Constant) constantString0;
      constantArray0[8] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 46, (-3039), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      Utility.isJavaIdentifierPart('f');
      Utility.accessToString((-329), true);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "public private protected final transient abstract strictfp synthetic annotation enum";
      objectArray0[2] = (Object) "public private protected final transient abstract strictfp synthetic annotation enum";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "public private protected final transient abstract strictfp synthetic annotation enum";
      objectArray0[5] = (Object) "public private protected final transient abstract strictfp synthetic annotation enum";
      Utility.printArray(objectArray0, false, false);
      Utility.isSet((-329), 1779);
      Utility.replace("public private protected final transient abstract strictfp synthetic annotation enum", "public private protected final transient abstract strictfp synthetic annotation enum", "public private protected final transient abstract strictfp synthetic annotation enum");
      Utility.replace("public private protected final transient abstract strictfp synthetic annotation enum, null, public private protected final transient abstract strictfp synthetic annotation enum, java.lang.Object@19ef6117, public private protected final transient abstract strictfp synthetic annotation enum, public private protected final transient abstract strictfp synthetic annotation enum", "public private protected final transient abstract strictfp synthetic annotation enum", "public private protected final transient abstract strictfp synthetic annotation enum, null, public private protected final transient abstract strictfp synthetic annotation enum, java.lang.Object@19ef6117, public private protected final transient abstract strictfp synthetic annotation enum, public private protected final transient abstract strictfp synthetic annotation enum");
      Utility.isSet(117, 117);
      byte[] byteArray0 = new byte[0];
      Constant[] constantArray0 = new Constant[8];
      ConstantDouble constantDouble0 = new ConstantDouble(3036.08037845766);
      constantArray0[0] = (Constant) constantDouble0;
      ConstantString constantString0 = new ConstantString(1779);
      constantArray0[1] = (Constant) constantString0;
      ConstantDouble constantDouble1 = null;
      try {
        constantDouble1 = new ConstantDouble((ConstantDouble) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      Utility.clearBit((-840), 787);
      Utility.fillup("]fo", 787, true, 'n');
      boolean boolean0 = true;
      Utility.compactClassName("]fonnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn", "]fo", true);
      Utility.fillup("nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn", 787, true, 'k');
      Utility.searchOpcode("");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-66);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      Utility.convertString(";x");
      Utility.isJavaIdentifierPart('\\');
      Utility.replace(";x", ";x", (String) null);
      Utility.convertString(";x");
      Utility.methodTypeToSignature(";x", (String[]) null);
      Utility.compactClassName("*`zIGzJ>y%8ND|");
      Utility.compactClassName(";x");
      Utility.getSignature("*`zIGzJ>y%8ND|");
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      Utility.replace(";x", "*`zIGzJ>y%8ND|", "%M8|qKSq4\"(");
      char char0 = '_';
      Utility.isJavaIdentifierPart('_');
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("ifnonnull", "*`zIGzJ>y%8ND|");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // *`zIGzJ>y%8ND|
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      Utility.clearBit(3157, 3157);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte) (-79);
      byte byte0 = (byte)81;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.classOrInterface((byte) (-79));
      int int0 = (-2748);
      int int1 = 1972;
      Utility.isSet((-2748), 1972);
      MockFile mockFile0 = new MockFile("interface");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "f2d");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // f2d
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      String string0 = Utility.compactClassName("char", "char", false);
      assertEquals("char", string0);
      
      String string1 = Utility.compactClassName("ifge", true);
      assertEquals("ifge", string1);
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "A2rI8BYyP}rNbrjt";
      stringArray0[2] = "";
      stringArray0[3] = "";
      String string0 = Utility.methodTypeToSignature("", stringArray0);
      assertEquals("(L;LA2rI8BYyP}rNbrjt;L;L;)L;", string0);
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      String string0 = Utility.accessToString(11, true);
      assertEquals("public private static", string0);
      
      int int0 = Utility.setBit(11, 122);
      assertEquals(67108875, int0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte) (-42);
      byteArray0[7] = (byte)84;
      byteArray0[8] = (byte)9;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      Utility.format(175, 175, true, 'B');
      try { 
        Utility.methodSignatureReturnType("175BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `175BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      char char0 = '$';
      Utility.isJavaIdentifierPart('$');
      Utility.clearBit(512, 512);
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Utility.printArray(objectArray0);
      Utility.printArray(objectArray0, false);
      String string0 = "";
      MockFile mockFile0 = new MockFile("");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      Utility.compactClassName("dstore_1");
      Utility.replace("A88L", "dstore_1", "A88L");
      Utility.fillup("L(M.}'D", 122, true, '7');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte) (-45);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -121
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte) (-24);
      byteArray0[6] = (byte)0;
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      Utility.getSignature("$l$8b$I$A$A$A$A$A$A$A");
      short short0 = Utility.searchOpcode("Could not create the directory ");
      assertEquals((short) (-1), short0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Could not create the directory ";
      stringArray0[1] = "L$l$8b$I$A$A$A$A$A$A$A;";
      stringArray0[2] = "L$l$8b$I$A$A$A$A$A$A$A;";
      stringArray0[3] = "Could not create the directory ";
      String string1 = Utility.methodTypeToSignature("L$l$8b$I$A$A$A$A$A$A$A;", stringArray0);
      assertEquals("(LCould;LL$l$8b$I$A$A$A$A$A$A$A;;LL$l$8b$I$A$A$A$A$A$A$A;;LCould;)LL$l$8b$I$A$A$A$A$A$A$A;;", string1);
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      String string0 = Utility.printArray(objectArray0, true);
      assertNotNull(string0);
      
      Utility.convertString("{java.lang.Object@e4ba1b5, java.lang.Object@1c5df5a5}");
      String string1 = Utility.fillup("{java.lang.Object@e4ba1b5, java.lang.Object@1c5df5a5}", 1018, false, '&');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte) (-25);
      byteArray0[3] = (byte)122;
      Constant[] constantArray0 = new Constant[8];
      MockFile mockFile0 = new MockFile("y)O-&/Lm_{Ma^3", "J");
      MockFile mockFile1 = new MockFile(mockFile0, "y)O-&/Lm_{Ma^3");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile1, string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode{java.lang.Object@e4ba1b5, java.lang.Object@1c5df5a5}\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      Utility.printArray(objectArray0, true, false);
      Utility.isSet((-2410), 0);
      String string0 = Utility.accessToString(778, true);
      String string1 = Utility.compactClassName("{java.lang.Object@4d1ec2f8, java.lang.Object@715b5775, java.lang.Object@24839215, java.lang.Object@7edab665, java.lang.Object@4568b244, java.lang.Object@6ea3b563, java.lang.Object@56088198, java.lang.Object@7dca7ca2, java.lang.Object@7db00bcd}", "private static native", true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      Utility.format(3244, 0, false, '_');
      try { 
        MockURI.URI("3244", "3244", "\n");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 0: 3244:3244#%0A
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      int int0 = 787;
      Utility.clearBit((-840), 787);
      boolean boolean0 = true;
      Utility.fillup("]fo", 787, true, 'n');
      boolean boolean1 = true;
      try { 
        Utility.methodSignatureReturnType("]fo", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `]fo'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      int int0 = 1030;
      Utility.accessToString(1030);
      String string0 = "_&BH";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("private protected abstract", "private protected abstract", "_&BH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: private protected abstract
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", "", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      boolean boolean0 = true;
      Utility.compactClassName("", "~<[Z_ne(.|{)Z", true);
      // Undeclared exception!
      Utility.replace("", "", "(-kH|^0{Ny*x");
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      String string0 = Utility.compactClassName("*k'[k/eySnP_3((", true);
      assertEquals("*k'[k.eySnP_3((", string0);
      
      Utility.printArray((Object[]) null, true);
      Utility.printArray((Object[]) null, true, false);
      Utility.printArray((Object[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-36);
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte) (-54);
      byteArray0[7] = (byte)53;
      byteArray0[8] = (byte)95;
      Constant[] constantArray0 = new Constant[1];
      ConstantString constantString0 = new ConstantString((byte)10);
      constantArray0[0] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, 135, true);
      assertEquals("0:    iload_2\n1:    lconst_1\n2:    <illegal opcode>\n3:    fconst_1\n4:    nop\n5:    castore\n6:    breakpoint\n7:    saload\n8:    swap\n", string1);
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      Utility.isJavaIdentifierPart('f');
      Utility.accessToString((-329), true);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "public private protected final transient abstract strictfp synthetic annotation enum";
      objectArray0[1] = (Object) "public private protected final transient abstract strictfp synthetic annotation enum";
      objectArray0[2] = (Object) "public private protected final transient abstract strictfp synthetic annotation enum";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "public private protected final transient abstract strictfp synthetic annotation enum";
      objectArray0[5] = (Object) "public private protected final transient abstract strictfp synthetic annotation enum";
      Utility.printArray(objectArray0, true, true);
      Utility.isSet((-329), 1779);
      Utility.replace("public private protected final transient abstract strictfp synthetic annotation enum", "public private protected final transient abstract strictfp synthetic annotation enum", "public private protected final transient abstract strictfp synthetic annotation enum");
      Utility.convertString("{\"public private protected final transient abstract strictfp synthetic annotation enum\", \"public private protected final transient abstract strictfp synthetic annotation enum\", \"public private protected final transient abstract strictfp synthetic annotation enum\", \"java.lang.Object@73193a91\", \"public private protected final transient abstract strictfp synthetic annotation enum\", \"public private protected final transient abstract strictfp synthetic annotation enum\"}");
      Utility.isSet(117, 117);
      byte[] byteArray0 = new byte[0];
      Constant[] constantArray0 = new Constant[8];
      ConstantDouble constantDouble0 = new ConstantDouble(3036.08037845766);
      constantArray0[0] = (Constant) constantDouble0;
      ConstantString constantString0 = new ConstantString(1779);
      constantArray0[1] = (Constant) constantString0;
      ConstantDouble constantDouble1 = null;
      try {
        constantDouble1 = new ConstantDouble((ConstantDouble) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)0;
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("org.apache.commons.io.filefilter.SuffixFileFilter", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `org.apache.commons.io.filefilter.SuffixFileFilter'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      String string0 = Utility.printArray(objectArray0, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)0;
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, (byte)70, false, 'D');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      Utility.convertString(";x");
      Utility.isJavaIdentifierPart('\\');
      Utility.replace(";x", ";x", (String) null);
      Utility.convertString(";x");
      Utility.methodTypeToSignature(";x", (String[]) null);
      Utility.compactClassName("*`zIGzJ>y%8ND|");
      Utility.compactClassName(";x");
      Utility.getSignature("*`zIGzJ>y%8ND|");
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantString constantString0 = null;
      try {
        constantString0 = new ConstantString(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      Utility.format(2273, 2273, true, '-');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("]waMM_Sv^<z=HNO6B\"", "dtcE!", "SyntheticRepository could not load ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ]waMM_Sv^<z=HNO6B\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      boolean boolean0 = Utility.isSet(43, 43);
      assertFalse(boolean0);
      
      boolean boolean1 = Utility.isJavaIdentifierPart('%');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte) (-49);
      boolean boolean2 = Utility.equals(byteArray0, byteArray0);
      assertFalse(boolean2 == boolean1);
      
      short short0 = Utility.searchOpcode("");
      assertEquals((short) (-1), short0);
      
      String string0 = Utility.accessToString((-2625));
      assertEquals("public private protected static final synchronized transient native abstract synthetic annotation enum", string0);
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-92);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)6;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("2d 00 00 00 00 a4 00 06", string0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "2d 00 00 00 00 a4 00 06";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) (byte)6;
      Utility.printArray(objectArray0);
      Object[] objectArray1 = new Object[0];
      String string1 = Utility.printArray(objectArray1, false);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      String string0 = Utility.printArray(objectArray0, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("Jb|=_W<S ^$Qp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Jb|=_W<S ^$Qp
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      String string0 = Utility.classOrInterface(0);
      assertEquals("class", string0);
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      Utility.methodSignatureReturnType("DZ+F{*[a>nY+ko", true);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "DZ+F{*[a>nY+ko";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("DZ+F{*[a>nY+ko", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[a>nY+ko
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = true;
      Utility.fillup("", (-433), true, '`');
      Utility.searchOpcode("");
      String string1 = "kJG8opG}Wr";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "kJG8opG}Wr", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Qd", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Qd'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      int int0 = (-1180);
      Utility.classOrInterface((-1180));
      int int1 = (-3049);
      Utility.classOrInterface((-3049));
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        byteSequence0.readShort();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }
}
