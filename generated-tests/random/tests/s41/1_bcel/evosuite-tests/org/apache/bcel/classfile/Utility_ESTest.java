/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 02:36:52 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URISyntaxException;
import java.util.Locale;
import java.util.zip.ZipException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.EnclosingMethod;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.util.ClassPath;
import org.apache.bcel.util.ClassPathRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = "7";
      try { 
        Utility.typeOfSignature("7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte)13;
      byteArray0[7] = (byte)118;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 179, (int) (byte)81);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-119);
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("?)");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantInteger constantInteger0 = new ConstantInteger(186);
      constantArray0[1] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 186, 186, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("&Dw(<c}}@5Vly");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &Dw(<c}}@5Vly
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Utility.fillup("new", (-486), false, '#');
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte) (-55);
      byteArray0[5] = (byte)105;
      byteArray0[6] = (byte)102;
      byteArray0[7] = (byte)21;
      byteArray0[8] = (byte) (-93);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.fillup("Xj$;I)/iK", 198, false, 'm');
      LocalVariable[] localVariableArray0 = new LocalVariable[0];
      LocalVariableTable localVariableTable0 = new LocalVariableTable(192, (byte)39, localVariableArray0, (ConstantPool) null);
      try { 
        Utility.methodSignatureToString("new", "mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmXj$;I)/iK", "dJ>J9j", false, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: new
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = "STjR3Q<1.2";
      Utility.replace("if_icmple", "STjR3Q<1.2", "\t");
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)97;
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)96;
      Utility.toHexString(byteArray0);
      Utility.searchOpcode("if_icmple");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      constantPool0.toString();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)96, (int) (byte)97, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      try { 
        Utility.typeOfSignature("2bt%K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2bt%K
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = "CONSTANT_String";
      Utility.typeOfSignature("CONSTANT_String");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)5;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "CONSTANT_String");
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte)11;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.accessToString(13, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)78;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)68, (int) (byte)78, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)88;
      byteArray0[5] = (byte)38;
      byteArray0[6] = (byte)53;
      Constant[] constantArray0 = new Constant[2];
      ConstantDouble constantDouble0 = new ConstantDouble((byte)81);
      constantArray0[0] = (Constant) constantDouble0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(4031, 74);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[1] = (Constant) constantFieldref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 73, (-488));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(")^CM=L9J#$", false);
      assertArrayEquals(new byte[] {(byte)41, (byte)94, (byte)67, (byte)77, (byte)61, (byte)76, (byte)57, (byte)74, (byte)35}, byteArray0);
      
      String string0 = Utility.fillup(")^CM=L9J#$", 65, false, 'm');
      assertEquals("mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm)^CM=L9J#$", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      char char0 = '0';
      Utility.isJavaIdentifierPart('0');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte)60;
      byteArray0[7] = (byte)112;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 193, (int) (byte)112, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Utility.setBit(1969, 1969);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)28;
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong(771L);
      constantArray0[0] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)68, (-890), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Utility.replace("\t\t#", "[K+=Z'\"P$[Nm#]]mx", "a[)D[a0lM@d^eZu)En#");
      Utility.getSignature("\t\t#");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte) (-78);
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte)102;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("?9vb*fe|)@e`/x+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `?9vb*fe|)@e`/x+'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "2CcYS]eJBH*");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte) (-49);
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte) (-113);
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte) (-107);
      byteArray0[7] = (byte) (-8);
      byteArray0[8] = (byte) (-110);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-49), (-1044));
      assertEquals("0:    monitorexit\n1:    <illegal opcode>\n2:    lload_0\n3:    dup2_x1\n4:    d2l\n5:    fsub\n6:    fcmpl\n7:    <illegal opcode>\n8:    i2c\n", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-116);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-116), (-1139), false);
      try { 
        Utility.methodSignatureArgumentTypes("0:    f2l\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    f2l
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-48);
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte) (-107);
      byteArray0[5] = (byte)13;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantString constantString0 = new ConstantString((byte)13);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[0] = (Constant) constantString1;
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-47));
      constantArray0[1] = (Constant) constantFloat0;
      ConstantFloat constantFloat1 = new ConstantFloat(byteSequence0);
      constantArray0[2] = (Constant) constantFloat1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("fcmpl", string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-82);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Y_rpC~GCo&wwj");
      byteArray0[3] = (byte)43;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)43, (int) (byte)1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      String string0 = Utility.printArray(objectArray0, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte) (-45);
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte) (-70);
      byteArray0[7] = (byte)95;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Utility.format(79, 79, false, 's');
      Utility.getSignature("sssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss79");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-96);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)38;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.equals(byteArray0, byteArray0);
      ConstantPool constantPool1 = null;
      try {
        constantPool1 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 81
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte) (-81);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4864, (int) (byte) (-81), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-113);
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte) (-71);
      ConstantPool constantPool0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-2109), 3907);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    if_icmpne\t\t#14752
         // 3:    d2l
         // 4:    istore_3
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte) (-65);
      byteArray0[6] = (byte)67;
      byteArray0[7] = (byte) (-99);
      byteArray0[8] = (byte)91;
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("GC]S7+A<Z)zm!.I");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: GC]S7+A<Z)zm!.I
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Utility.convertString("getstatic");
      String string0 = Utility.accessToString((-343), true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)11;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte) (-16);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-16), (int) (byte) (-16), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 47020. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "Z[%";
      Utility.signatureToString("Z[%");
      try { 
        Utility.typeOfMethodSignature("Z[%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Z[%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = 88;
      Utility.setBit(88, (-5077));
      String string0 = "I";
      Utility.compactClassName("I", false);
      byte[] byteArray0 = Utility.decode("'RZq34Y", false);
      Utility.accessToString((-1337));
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1337), 2136);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("c|f>w2|?lxk5amr15,t", "public private protected volatile transient interface strictfp synthetic annotation enum", "0:    dload_1\n1:    dastore\n2:    dup_x1\n3:    lrem\n4:    baload\n5:    caload\n6:    dup\n", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: c|f>w2|?lxk5amr15,t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte) (-99);
      byteArray0[6] = (byte)113;
      byteArray0[7] = (byte)70;
      byteArray0[8] = (byte) (-109);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-501), (int) (byte)28, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 27710. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte)118;
      byteArray0[4] = (byte)91;
      Constant[] constantArray0 = new Constant[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("<illegal opcode>");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 11, 187, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Utility.isSet(799, 799);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte)103;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 83, 39, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Unknown constant type ");
      Utility.isSet(24, 24);
      Utility.isJavaIdentifierPart('\\');
      Utility.searchOpcode("t-~");
      Utility.format(24, 4711, false, '+');
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "Unknown constant type ";
      objectArray0[2] = (Object) null;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) "Unknown constant type ";
      objectArray0[5] = (Object) "Unknown constant type ";
      objectArray0[6] = (Object) "t-~";
      Utility.printArray(objectArray0, false);
      Utility.compactClassName("Unknown constant type ");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte) (-31);
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)41;
      byteArray0[6] = (byte)47;
      byteArray0[7] = (byte)86;
      byteArray0[8] = (byte)71;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)41, 42);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      Utility.convertString("aload_3");
      Utility.getSignature("aload_3");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      int int0 = 101;
      Utility.setBit(101, 1795);
      EnclosingMethod enclosingMethod0 = null;
      try {
        enclosingMethod0 = new EnclosingMethod(1795, (-482), byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "+'P\"w<1;sD)'\"Mv";
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte) (-77);
      byte byte0 = (byte)33;
      byteArray0[4] = (byte)33;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        Utility.typeOfSignature("+'P\"w<1;sD)'\"Mv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 'P\"w<1;sD)'\"Mv
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Utility.classOrInterface(4096);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte) (-114);
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)96;
      byteArray0[6] = (byte)76;
      byteArray0[7] = (byte)35;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)96, (int) (byte)4, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte)104;
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte)123;
      byteArray0[7] = (byte)7;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 34, 5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte) (-27);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 64, (int) (byte) (-49), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = "!*";
      try { 
        Utility.typeOfSignature("!*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0, false);
      Utility.setBit(240, 234);
      Utility.getSignature("HC!;9X)%=N9^^q4og");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-100);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      Class<String> class0 = String.class;
      JavaClass javaClass0 = classPathRepository0.loadClass(class0);
      JavaClass javaClass1 = javaClass0.getSuperClass();
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass1, emptyVisitor0);
      constantPool0.accept(descendingVisitor0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 234, (int) (byte) (-100));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte)118;
      byteArray0[4] = (byte) (-122);
      byteArray0[5] = (byte) (-67);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 97, 92, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte) (-77);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ireturn");
      byteArray0[2] = (byte) (-67);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.equals(byteArray0, byteArray0);
      Utility.compactClassName("getstatic", false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.classOrInterface(2875);
      Utility.compactClassName("getstatic");
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("lushr");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 193, 2248, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      boolean boolean0 = true;
      String string0 = ".-Jc(Er|=>";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".-Jc(Er|=>");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String string1 = "yIu3!";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "yIu3!");
      String string2 = "!N$Ij";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("!N$Ij");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: N$Ij
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte) (-128);
      byteArray0[7] = (byte)118;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 179, (int) (byte)81);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Utility.typeOfSignature("[]");
      String string0 = "";
      // Undeclared exception!
      try { 
        Utility.signatureToString("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Only element values of type array can be built with this ctor - type specified: ");
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Utility.printArray(objectArray0, true, false);
      String string0 = ".B6>Qs";
      try { 
        Utility.typeOfSignature(".B6>Qs");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .B6>Qs
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = Utility.fillup("Z@_U4#i", 337, false, 'J');
      assertEquals("JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJZ@_U4#i", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("astore\t\t%0", string1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      try { 
        Utility.typeOfSignature("#Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #Y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      boolean boolean0 = true;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte) (-110);
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte)92;
      byteArray0[7] = (byte)4;
      byteArray0[8] = (byte)21;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.fillup("dNsdhCDp+", 70, true, '\"');
      Utility.decode("dNsdhCDp+", false);
      Utility.accessToString((-1858));
      Utility.accessToString(1);
      Utility.accessToString(70, true);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)91;
      byteArray1[1] = (byte) (-96);
      byteArray1[2] = (byte) (-86);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 154, (int) (byte) (-86));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "lshr");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte) (-114);
      byteArray0[5] = (byte)69;
      byteArray0[6] = (byte) (-4);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(752);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("astore_0", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Utility.replace("l_XRg!fDp@dLO4%vmr", "l_XRg!fDp@dLO4%vmr", "r5qQ{XTOS92S!VwNJ");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-68);
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)122;
      byteArray0[6] = (byte) (-5);
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[0] = (Constant) constantFloat1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 5604, (int) (byte) (-46), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Utility.isJavaIdentifierPart('?');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte)64;
      byteArray0[6] = (byte) (-49);
      byteArray0[7] = (byte) (-94);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 592, (-84), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte) (-18);
      byteArray0[4] = (byte)16;
      String string0 = Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(9998, (byte)1);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[0] = (Constant) constantFieldref1;
      ConstantClass constantClass0 = new ConstantClass((byte)73);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[1] = (Constant) constantClass1;
      constantClass0.toString();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte)2;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-3408), (int) (byte) (-40));
      assertEquals("0:    <illegal opcode>\n1:    d2l\n2:    <illegal opcode>\n3:    iconst_m1\n", string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Sbg@JGYJ!u%HCfE", false);
      assertEquals("short", string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte)59;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 34, (int) (byte)59);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)88;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte) (-51);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 859, (int) (byte)72, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = Utility.convertString("ZWE@S$;X]V 7`i5g");
      assertEquals("ZWE@S$;X]V 7`i5g", string0);
      
      String string1 = Utility.classOrInterface(186);
      assertEquals("class", string1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte) (-57);
      byteArray0[6] = (byte)8;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      byteSequence0.mark((-352));
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("ifne\t\t#10499", string2);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      try { 
        Utility.typeOfSignature("=class ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =class 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Utility.classOrInterface(255);
      Utility.replace("class", "class", "class");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte) (-10);
      byte byte0 = (byte) (-73);
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte) (-26);
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)72;
      byteArray0[6] = (byte)44;
      byteArray0[7] = (byte) (-20);
      Utility.equals(byteArray0, byteArray0);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("class", stringArray0);
      Utility.accessToString((-223));
      try { 
        Utility.typeOfSignature("KNFv.0V&Isr|(\"#6?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: KNFv.0V&Isr|(\"#6?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte) (-59);
      byteArray0[5] = (byte)79;
      byteArray0[6] = (byte) (-83);
      byteArray0[7] = (byte)5;
      byteArray0[8] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(2291, (byte)5);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("lstore\t\t%83", string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('r');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-101);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Utility.typeOfSignature("StackMap");
      Utility.clearBit(97, 97);
      try { 
        Utility.typeOfMethodSignature("StackMap");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: StackMap
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Utility.accessToString(32);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.apache.bcel.classfile.ConstantMethodType";
      stringArray0[1] = "synchronized";
      stringArray0[2] = "org.apache.bcel.classfile.ConstantMethodType";
      stringArray0[3] = "java.lang.Float";
      stringArray0[4] = "'";
      stringArray0[5] = "synchronized";
      stringArray0[6] = "synchronized";
      stringArray0[7] = "synchronized";
      Utility.methodTypeToSignature("org.apache.bcel.classfile.ConstantMethodType", stringArray0);
      LocalVariable[] localVariableArray0 = new LocalVariable[0];
      LocalVariableTable localVariableTable0 = new LocalVariableTable((-1200), 75, localVariableArray0, (ConstantPool) null);
      localVariableTable0.setConstantPool((ConstantPool) null);
      Utility.methodSignatureToString("(Lorg/apache/bcel/classfile/ConstantMethodType;Lsynchronized;Lorg/apache/bcel/classfile/ConstantMethodType;Ljava/lang/Float;L';Lsynchronized;Lsynchronized;Lsynchronized;)Lorg/apache/bcel/classfile/ConstantMethodType;", "synchronized", "(Lorg/apache/bcel/classfile/ConstantMethodType;Lsynchronized;Lorg/apache/bcel/classfile/ConstantMethodType;Ljava/lang/Float;L';Lsynchronized;Lsynchronized;Lsynchronized;)Lorg/apache/bcel/classfile/ConstantMethodType;", false, localVariableTable0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("org.apache.bcel.classfile.ConstantMethodType", ", low = ", "P&29NHU,P", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.bcel.classfile.ConstantMethodType
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte) (-62);
      byteArray0[5] = (byte)0;
      boolean boolean0 = false;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.encode(byteArray0, false);
      Utility.compactClassName("$BCA$q$c2$A", false);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (byte)67;
      objectArray0[1] = (Object) "$BCA$q$c2$A";
      boolean boolean1 = true;
      Utility.printArray(objectArray0, true, true);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)65, (int) (byte)67);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)28;
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte) (-69);
      byte byte1 = (byte) (-75);
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte) (-79);
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 188, 2481, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = Utility.compactClassName("jsr", "jsr", false);
      String string1 = Utility.methodTypeToSignature("jsr", (String[]) null);
      assertEquals("()Ljsr;", string1);
      
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String string2 = Utility.fillup("jsr", 79, false, 'y');
      assertEquals("yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyjsr", string2);
      
      Utility.methodSignatureArgumentTypes("()Ljsr;", true);
      String string3 = Utility.replace("jsr", "fconst_0", "()Ljsr;");
      assertTrue(string3.equals((Object)string0));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)3;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Utility.convertString("anewarray");
      Utility.convertString("OsyudS`LUQ&'(0.$m");
      Utility.format(156, 156, true, 'b');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte) (-20);
      byteArray0[3] = (byte) (-114);
      byteArray0[4] = (byte) (-87);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 68, (int) (byte) (-20));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Utility.searchOpcode("PDh#d0G%+'T]2we");
      Utility.compactClassName("4ODx&r");
      Utility.compactClassName("jsr_w");
      try { 
        Utility.typeOfSignature("PDh#d0G%+'T]2we");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: PDh#d0G%+'T]2we
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)36;
      byteArray0[6] = (byte)72;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool0.toString();
      Utility.codeToString(byteSequence0, constantPool1);
      String string0 = Utility.convertString("pop2");
      assertEquals("pop2", string0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence1, constantPool1, true);
      assertEquals("ifeq\t\t#-16550", string1);
      
      String string2 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string2);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("F", stringArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte)79;
      byteArray0[6] = (byte)124;
      byteArray0[7] = (byte)86;
      byteArray0[8] = (byte) (-6);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(126, 45);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("()LF;");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(5137, (-975));
      constantArray0[2] = (Constant) constantMethodref0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(10, 1855);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[3] = (Constant) constantNameAndType1;
      ConstantInteger constantInteger0 = new ConstantInteger(111);
      constantArray0[4] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals(1, byteSequence0.getIndex());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = "I!<$j|PE=&dcpw&0=E";
      Utility.getSignature("I!<$j|PE=&dcpw&0=E");
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureReturnType("LI!<$j|PE=&dcpw&0=E;", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LI!<$j|PE=&dcpw&0=E;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = "H[;v3>|";
      try { 
        Utility.typeOfSignature("H[;v3>|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H[;v3>|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-65);
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)16;
      byte byte1 = (byte)67;
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte) (-52);
      byte byte2 = (byte) (-118);
      byteArray0[5] = (byte) (-118);
      byte byte3 = (byte)123;
      byteArray0[6] = (byte)123;
      byte byte4 = (byte)105;
      byteArray0[7] = (byte)105;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 921, (-2872));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "'lv0!t$*";
      try { 
        Utility.typeOfSignature("'lv0!t$*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 'lv0!t$*
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = Utility.getSignature("jhy9");
      assertEquals("Ljhy9;", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte) (-74);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("dload_2", string1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Utility.compactClassName("5jL^V", "CCB{z%*Q%z$!g^s0", false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte)43;
      byteArray0[6] = (byte)18;
      byteArray0[7] = (byte) (-57);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[7];
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[0] = (Constant) constantClass0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("CCB{z%*Q%z$!g^s0");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[1] = (Constant) constantUtf8_1;
      ConstantDouble constantDouble0 = new ConstantDouble((-558.372));
      constantArray0[2] = (Constant) constantDouble0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(1879, (-1101041341));
      constantArray0[3] = (Constant) constantMethodHandle0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-1472), (byte) (-66));
      constantArray0[4] = (Constant) constantFieldref0;
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[5] = (Constant) constantInteger1;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(104, (byte) (-57));
      constantArray0[6] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 199. Constant pool size is: 7
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte)110;
      byteArray0[5] = (byte)101;
      byteArray0[6] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$c6$a6$f9n$Ae$ff", string0);
      
      Constant[] constantArray0 = new Constant[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteSequence0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(dataInputStream0);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantLong constantLong0 = new ConstantLong(87L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[1] = (Constant) constantLong1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-1685), (int) (byte) (-58));
      assertEquals("0:    ifnull\t\t#-22791\n3:    fdiv\n4:    nop\n5:    lsub\n6:    impdep2\n", string1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = Utility.convertString("[B");
      assertEquals("[B", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte) (-53);
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)52;
      byteArray0[7] = (byte)11;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-1909842763), (int) (byte)16);
      assertEquals("0:    lconst_1\n1:    astore_2\n2:    ladd\n3:    <illegal opcode>\n4:    <illegal opcode>\n5:    bipush\t\t52\n7:    fconst_0\n", string1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[6] = (byte) (-80);
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte) (-63);
      byteArray0[2] = (byte)29;
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte)25;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-123);
      byteArray0[8] = (byte)3;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-565), 4096);
      assertEquals("0:    nop\n1:    ineg\n2:    iload_3\n3:    nop\n4:    aload_1\n5:    aload\t\t%0\n7:    i2l\n8:    iconst_0\n", string0);
      
      String string1 = Utility.accessToString(2900);
      assertEquals("protected final volatile native interface strictfp", string1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte) (-65);
      byteArray0[6] = (byte)27;
      byteArray0[7] = (byte)90;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)90, 47, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)10;
      byte byte0 = (byte)14;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)84;
      Utility.equals(byteArray0, byteArray0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "void";
      stringArray0[1] = "void";
      stringArray0[2] = "void";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[3] = "void";
      stringArray0[4] = "void";
      stringArray0[5] = "void";
      try { 
        Utility.methodTypeToSignature("void", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Utility.searchOpcode("");
      String string0 = "";
      Utility.getSignature("");
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      String string1 = "-mqa9O>pr$c~<UrBEIi";
      try { 
        Utility.typeOfSignature("-mqa9O>pr$c~<UrBEIi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -mqa9O>pr$c~<UrBEIi
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte)63;
      byteArray0[5] = (byte)25;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-123);
      byteArray0[8] = (byte)3;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-565), 4096);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = Utility.classOrInterface(2347);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte) (-40);
      byteArray0[4] = (byte) (-69);
      byteArray0[5] = (byte)50;
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("20 bf a9 d8 bb 32", string1);
      
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)50;
      byteArray1[1] = (byte) (-69);
      byteArray1[2] = (byte)50;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string2 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("aaload", string2);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = (-1792);
      Utility.setBit(175, (-1792));
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "dup2_x1";
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(JWBOKsX^i|z2=r@F", "dup2_x1", "dup2_x1", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `WBOKsX^i|z2=r@F'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")\n");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte) (-70);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte) (-32);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1383), (int) (byte)115, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)88;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)72;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)72, 8);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = ")";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")");
      int int0 = 3256;
      Utility.classOrInterface(3256);
      try { 
        Utility.methodSignatureReturnType("Long", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Long
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte) (-123);
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte) (-109);
      byteArray0[6] = (byte)123;
      Constant[] constantArray0 = new Constant[4];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantInteger constantInteger0 = new ConstantInteger(48);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[1] = (Constant) constantInteger1;
      ConstantLong constantLong0 = new ConstantLong((-2412L));
      constantArray0[2] = (Constant) constantLong0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(48, 918);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[3] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, 2, 119);
      assertEquals("3:    i2l\n4:    jsr\t\t#-27777\n", string0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = Utility.fillup("2(WeLv+0?Rko'NX9", (-932), false, '~');
      assertEquals("2(WeLv+0?Rko'NX9", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte) (-53);
      byteArray0[5] = (byte)18;
      byteArray0[6] = (byte)114;
      byteArray0[7] = (byte) (-22);
      byteArray0[8] = (byte) (-37);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("lload\t\t%181", string1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte) (-19);
      byteArray0[4] = (byte) (-25);
      byteArray0[5] = (byte)30;
      Constant[] constantArray0 = new Constant[6];
      ConstantLong constantLong0 = new ConstantLong(1034L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[0] = (Constant) constantLong1;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(566, (byte)30);
      constantArray0[1] = (Constant) constantFieldref0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(87);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[2] = (Constant) constantMethodType1;
      ConstantLong constantLong2 = new ConstantLong((byte) (-19));
      constantArray0[3] = (Constant) constantLong2;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(57, (byte) (-19));
      constantArray0[4] = (Constant) constantInterfaceMethodref0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-15), 192);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[5] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-25), 198);
      assertEquals("0:    i2s\n1:    <illegal opcode>\n2:    <illegal opcode>\n3:    <illegal opcode>\n4:    <illegal opcode>\n5:    lload_0\n", string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)21, (byte)21);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      try { 
        MockURI.URI("iload\t\t%4", "vOY{", "vOY{", (int) (byte) (-85), (String) null, "iload\t\t%4", (String) null);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 5: iload\t\t%4://vOY%7B@vOY{:-85?iload%09%09%254
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)51;
      byteArray0[7] = (byte)42;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-68), (int) (byte)9, false);
      assertEquals("0:    pop\n1:    dsub\n2:    istore_2\n3:    fstore_3\n4:    lconst_0\n5:    iconst_2\n6:    baload\n7:    aload_0\n", string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = 234;
      Utility.setBit(209, 234);
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte) (-83);
      byte byte0 = (byte) (-93);
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte) (-24);
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte)76;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-24), (int) (byte) (-24));
      Utility.format((byte)76, 234, true, 'r');
      Utility.isSet(2805, 1822);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("76rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr", "0:    lreturn\n1:    if_icmpgt\t\t#-18594\n4:    <illegal opcode>\n5:    lstore_2\n6:    astore_1\n", "0:    lreturn\n1:    if_icmpgt\t\t#-18594\n4:    <illegal opcode>\n5:    lstore_2\n6:    astore_1\n", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 76rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      String string0 = "(descriptor_index = ";
      try { 
        Utility.typeOfMethodSignature("(descriptor_index = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (descriptor_index = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "(,+1'}#UA";
      try { 
        Utility.methodSignatureArgumentTypes("(,+1'}#UA", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `,+1'}#UA'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-98);
      byteArray0[4] = (byte) (-67);
      byteArray0[5] = (byte)83;
      byteArray0[6] = (byte)14;
      byteArray0[7] = (byte)32;
      byteArray0[8] = (byte)46;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("athrow", string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte) (-9);
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte) (-56);
      byteArray0[7] = (byte)19;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.getSignature("float");
      Utility.convertString("F");
      Utility.accessToString((-6163));
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 76, (int) (byte)79, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Utility.convertString("ZWE@S$;X]V 7`i5g");
      Utility.classOrInterface(186);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte) (-57);
      byteArray0[6] = (byte)8;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("i2l", string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)36;
      byteArray0[6] = (byte)72;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("pop2", string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte)19;
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("if_acmpeq");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(9);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[1] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 9, (int) (byte)19, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("YBEtfV<I~1qG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YBEtfV<I~1qG'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Utility.isSet(1197, 34);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)24;
      byteArray0[6] = (byte) (-70);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte) (-28));
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)24, 2148);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Utility.format(88, 95, true, '?');
      Utility.compactClassName("X[H]k", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-69);
      byteArray0[7] = (byte)4;
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(524);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[0] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (-2796), (int) (byte)16, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    istore_3
         // 1:    dadd
         // 2:    dup2_x1
         // 3:    iconst_2
         // 4:    bipush\t\t0
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = Utility.getSignature("");
      assertEquals("L;", string0);
      
      byte byte0 = Utility.typeOfSignature("L;");
      assertEquals((byte)14, byte0);
      
      MockFile mockFile0 = new MockFile("yk\"0x8soG>>BR0");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "yk\"0x8soG>>BR0";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockFile0;
      objectArray0[5] = (Object) "yk\"0x8soG>>BR0";
      objectArray0[6] = (Object) "yk\"0x8soG>>BR0";
      objectArray0[7] = (Object) "yk\"0x8soG>>BR0";
      objectArray0[8] = (Object) "yk\"0x8soG>>BR0";
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      assertEquals(9, objectArray0.length);
      
      byte byte1 = Utility.typeOfSignature("D");
      assertEquals((byte)7, byte1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = "7[zT(|?C$/,SOj9";
      Utility.decode("7[zT(|?C$/,SOj9", false);
      int int0 = 1822;
      Utility.classOrInterface(1822);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "7[zT(|?C$/,SOj9";
      objectArray0[1] = (Object) "7[zT(|?C$/,SOj9";
      objectArray0[2] = (Object) "interface";
      objectArray0[3] = (Object) "interface";
      objectArray0[4] = (Object) "7[zT(|?C$/,SOj9";
      objectArray0[5] = (Object) "7[zT(|?C$/,SOj9";
      objectArray0[6] = (Object) "7[zT(|?C$/,SOj9";
      objectArray0[7] = (Object) "7[zT(|?C$/,SOj9";
      Utility.printArray(objectArray0, false, false);
      try { 
        Utility.decode("org.apache.bcel.classfile.InnerClass", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)56;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-2), (int) (byte) (-2), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lmul
         // 1:    impdep1
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte) (-112);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-24);
      byteArray0[7] = (byte) (-92);
      byteArray0[8] = (byte) (-29);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)109, (int) (byte)109, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)104;
      byteArray0[6] = (byte)13;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 61, (int) (byte)9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = "\"";
      try { 
        Utility.typeOfSignature("\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = "),}";
      Utility.compactClassName("),}", "),}", true);
      int int0 = 74;
      Utility.accessToString(74, false);
      Utility.convertString("private static volatile");
      try { 
        Utility.typeOfSignature("E.y1!z\"P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E.y1!z\"P
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = "Y%V|^],+]gPp.u,'=";
      try { 
        Utility.typeOfSignature("Y%V|^],+]gPp.u,'=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y%V|^],+]gPp.u,'=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte) (-80);
      byteArray0[5] = (byte) (-65);
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-80), (-1974), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte)101;
      byteArray0[6] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.encode(byteArray0, false);
      Constant[] constantArray0 = new Constant[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteSequence0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(dataInputStream0);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantLong constantLong0 = new ConstantLong(87L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[1] = (Constant) constantLong1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-1685), (int) (byte) (-58));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 26111. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-68);
      byteArray0[0] = (byte) (-68);
      byte byte1 = (byte) (-92);
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte) (-24);
      byte byte2 = (byte) (-3);
      byteArray0[3] = (byte) (-3);
      byte byte3 = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[0] = (byte)14;
      byte byte4 = (byte)74;
      byteArray0[6] = (byte)74;
      byte byte5 = (byte)45;
      byteArray0[7] = (byte)45;
      byteArray0[8] = (byte)105;
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (-885), false);
      Utility.setBit((byte) (-3), (byte) (-24));
      try { 
        Utility.methodSignatureArgumentTypes("0:    dconst_0\n1:    if_icmple\t\t#-5890\n4:    nop\n5:    nop\n6:    dstore_3\n7:    aload_3\n8:    lmul\n", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    dconst_0
         // 1:    if_icmple\t\t#-5890
         // 4:    nop
         // 5:    nop
         // 6:    dstore_3
         // 7:    aload_3
         // 8:    lmul
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte byte0 = Utility.typeOfSignature("ZgGEw]7<dp");
      assertEquals((byte)4, byte0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)6;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "The FileFilter must not be null");
      byteArray0[3] = (byte)53;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "iA%(Abfdm|(l<B_{k");
      Utility.equals(byteArray0, byteArray0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (byte)120;
      objectArray0[1] = (Object) (byte)120;
      objectArray0[2] = (Object) (byte) (-66);
      objectArray0[3] = (Object) (byte)120;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) (byte)53;
      objectArray0[6] = (Object) (byte) (-66);
      String string0 = Utility.printArray(objectArray0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "iA%(Abfdm|(l<B_{k";
      stringArray0[1] = "{120, 120, -66, 120, java.lang.Object@3534ba48, 53, -66}";
      stringArray0[2] = "{120, 120, -66, 120, java.lang.Object@3534ba48, 53, -66}";
      stringArray0[3] = "{120, 120, -66, 120, java.lang.Object@3534ba48, 53, -66}";
      stringArray0[4] = "iA%(Abfdm|(l<B_{k";
      stringArray0[5] = "iA%(Abfdm|(l<B_{k";
      stringArray0[6] = "iA%(Abfdm|(l<B_{k";
      Utility.methodTypeToSignature("{120, 120, -66, 120, java.lang.Object@3534ba48, 53, -66}", stringArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-66);
      byteArray1[1] = (byte) (-66);
      byteArray1[2] = (byte)6;
      byteArray1[3] = (byte) (-66);
      byteArray1[4] = (byte)6;
      byteArray1[5] = (byte)120;
      byteArray1[6] = (byte)53;
      byteArray1[7] = (byte)53;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = "QRLk}_>Fpd";
      try { 
        Utility.methodSignatureReturnType("QRLk}_>Fpd", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `QRLk}_>Fpd'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte) (-91);
      byteArray0[6] = (byte) (-59);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)32, 144, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = "OHzM\\d?v}Dfj>";
      try { 
        Utility.typeOfSignature("OHzMd?v}Dfj>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: OHzMd?v}Dfj>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte)121;
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte) (-54);
      byteArray0[7] = (byte) (-97);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.isSet((byte) (-70), 38);
      Utility.compactClassName("9tOk&mwW2lu6_i^");
      char char0 = 'f';
      Utility.isJavaIdentifierPart('f');
      try { 
        Utility.typeOfSignature("@bYw4SSiG)%e=l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @bYw4SSiG)%e=l
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)110;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1066, (int) (byte)110, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("NljzSUk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `NljzSUk'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte) (-41);
      byteArray0[5] = (byte)106;
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte)86;
      byteArray0[8] = (byte)28;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(4025, (byte)28);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 59968. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte) (-74);
      byteArray0[5] = (byte) (-68);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)83;
      byteArray0[8] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.replace("lrem", "arraylength", "arraylength");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)83, (int) (byte) (-68), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Utility.classOrInterface((-633));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-46);
      byteArray0[4] = (byte) (-91);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 2, 97);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-64);
      byteArray0[0] = (byte) (-14);
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-13);
      byteArray0[5] = (byte) (-74);
      byteArray0[6] = (byte) (-2);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-14), (-63));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    nop
         // 2:    dstore_0
         // 3:    aconst_null
         // 4:    <illegal opcode>
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte)32;
      Constant[] constantArray0 = new Constant[4];
      ConstantLong constantLong0 = new ConstantLong((byte)19);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[0] = (Constant) constantLong1;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("g2p18PKm");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantUtf8.printStats();
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("lookupswitch");
      constantArray0[2] = (Constant) constantUtf8_1;
      ConstantUtf8 constantUtf8_2 = new ConstantUtf8("Total of ");
      constantArray0[3] = (Constant) constantUtf8_2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-99), 48);
      assertEquals("0:    ifgt\t\t#-1773\n3:    <illegal opcode>\n4:    lload_2\n", string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "O:u{f!ocn6V'";
      stringArray0[1] = "0:    ifgt\t\t#-1773\n3:    <illegal opcode>\n4:    lload_2\n";
      String string1 = Utility.methodTypeToSignature(" k", stringArray0);
      assertEquals("(LO:u{f!ocn6V';L0:;)Lk;", string1);
      
      String string2 = Utility.accessToString((-935), false);
      assertEquals("public static final volatile abstract strictfp synthetic annotation enum", string2);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Utility.compactClassName("Lasg", "Lasg", true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("E{wg o1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E{wg o1'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "&!.]n-X!c)";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "&!.]n-X!c)");
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string1 = "(lS5|7XHi:jlcn/qSY";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(lS5|7XHi:jlcn/qSY", "&!.]n-X!c)", "&!.]n-X!c)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `lS5|7XHi:jlcn/qSY'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      Utility.printArray(objectArray0, true);
      Utility.searchOpcode("na&2Uz3$d");
      Utility.format((-4518), 2005, true, '7');
      String[] stringArray0 = new String[4];
      stringArray0[0] = "na&2Uz3$d";
      stringArray0[1] = "{java.lang.Object@625c3ac5, java.lang.Object@449b26ab, java.lang.Object@7e10ffe0, java.lang.Object@6f522b07, java.lang.Object@6cdbae3a, java.lang.Object@71e86374, java.lang.Object@87e7d56, java.lang.Object@760a654d, java.lang.Object@4791bfc8}";
      stringArray0[2] = "na&2Uz3$d";
      stringArray0[3] = "{java.lang.Object@625c3ac5, java.lang.Object@449b26ab, java.lang.Object@7e10ffe0, java.lang.Object@6f522b07, java.lang.Object@6cdbae3a, java.lang.Object@71e86374, java.lang.Object@87e7d56, java.lang.Object@760a654d, java.lang.Object@4791bfc8}";
      Utility.methodTypeToSignature("na&2Uz3$d", stringArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-49);
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)20;
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-49), (byte)24);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[0] = (Constant) constantMethodref1;
      ConstantMethodref constantMethodref2 = new ConstantMethodref((byte)20, (-4518));
      constantArray0[1] = (Constant) constantMethodref2;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("new");
      constantArray0[2] = (Constant) constantUtf8_0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      constantArray0[3] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)24, (int) (byte)34, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = "K$7Aik3{e[HwZV~%";
      int int0 = 34;
      boolean boolean0 = false;
      Utility.fillup("K$7Aik3{e[HwZV~%", 34, false, 's');
      Utility.decode("K$7Aik3{e[HwZV~%", false);
      try { 
        Utility.methodSignatureReturnType("K$7Aik3{e[HwZV~%", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K$7Aik3{e[HwZV~%'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.accessToString(177, false);
      Utility.compactClassName("if_icmplt", "V", false);
      Utility.printArray((Object[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte) (-26);
      Utility.toHexString(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 196, 20);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 10671. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Utility.accessToString(69, true);
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "public protected volatile";
      objectArray0[2] = (Object) "public protected volatile";
      objectArray0[3] = (Object) "public protected volatile";
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) "public protected volatile";
      String string0 = Utility.printArray(objectArray0, true);
      Utility.searchOpcode("H5)y2");
      Utility.printArray(objectArray0);
      Utility.isSet(69, (-1125));
      Utility.signatureToString("Invalid type: ");
      Utility.compactClassName("{java.lang.Object@710d5929, public protected volatile, public protected volatile, public protected volatile, java.lang.Object@5067a098, public protected volatile}", "{java.lang.Object@710d5929, public protected volatile, public protected volatile, public protected volatile, java.lang.Object@5067a098, public protected volatile}", true);
      Utility.setBit(180, (short) (-1));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)81;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantInteger constantInteger0 = new ConstantInteger(69);
      constantArray0[0] = (Constant) constantInteger0;
      Constant constant0 = constantInteger0.copy();
      constantArray0[1] = constant0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int int0 = 82;
      Utility.setBit(82, 63);
      Utility.isJavaIdentifierPart('o');
      Utility.accessToString(70);
      try { 
        Utility.typeOfSignature("9;BLgvqJc6f|RTTM,[:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9;BLgvqJc6f|RTTM,[:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)23;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 576, 57, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.signatureToString("Bv*G\"C+");
      String string0 = "Byte code error: ";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Byte code error: ", "Bv*G\"C+", "class");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte)94;
      byteArray0[4] = (byte)117;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat((-2368.0583F));
      BCELComparator bCELComparator0 = Constant.getComparator();
      Constant.setComparator(bCELComparator0);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.clearBit((byte)38, 90);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 38, (-603));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "%7?<=.XI|s:cPdwm.)");
      String string0 = "(";
      try { 
        Utility.methodSignatureArgumentTypes("(", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Utility.format(104, (-3263), false, 'a');
      Utility.format((-3263), 1949, true, 'a');
      try { 
        Utility.typeOfSignature("104");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 104
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = "'M8.J$U`8CE@UA";
      Utility.searchOpcode("'M8.J$U`8CE@UA");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "'M8.J$U`8CE@UA";
      Utility.printArray(objectArray0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "#8V1";
      Utility.methodTypeToSignature("'M8.J$U`8CE@UA", stringArray0);
      try { 
        Utility.typeOfSignature("(L#8V1;)L'M8/J$U`8CE@UA;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (L#8V1;)L'M8/J$U`8CE@UA;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0);
      String string0 = ")";
      try { 
        Utility.typeOfSignature(")");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0, true, true);
      String string0 = Utility.compactClassName("E6WvIk1|E7jp3R");
      assertEquals("E6WvIk1|E7jp3R", string0);
      
      Utility.getSignature("{\"java.lang.Object@291304bc\", \"java.lang.Object@6354388f\", \"java.lang.Object@6ef698b6\"}");
      Object[] objectArray1 = new Object[0];
      String string1 = Utility.printArray(objectArray1, false, false);
      assertNotNull(string1);
      assertEquals("", string1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fsub", string2);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)86;
      byte byte0 = (byte)5;
      byteArray0[2] = (byte)5;
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)5, (int) (byte)5, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      String string1 = "[";
      // Undeclared exception!
      try { 
        Utility.getSignature("[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte)32;
      Constant[] constantArray0 = new Constant[4];
      ConstantLong constantLong0 = new ConstantLong((byte)19);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[0] = (Constant) constantLong1;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("g2p18PKm");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("lookupswitch");
      constantArray0[2] = (Constant) constantUtf8_1;
      ConstantUtf8 constantUtf8_2 = new ConstantUtf8("Total of ");
      constantArray0[3] = (Constant) constantUtf8_2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-99), 48);
      assertEquals("0:    ifgt\t\t#-1773\n3:    <illegal opcode>\n4:    lload_2\n", string0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte) (-67);
      byteArray0[6] = (byte) (-70);
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-70), 30, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    iconst_1
         // 1:    iconst_1
         // 2:    lstore_3
         // 3:    fmul
         // 4:    dup
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "!wS0 PM";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "!wS0 PM");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte) (-35);
      byteArray0[4] = (byte) (-88);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-50), (int) (byte)85, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    istore\t\t%206
         // 2:    castore
         // 3:    <illegal opcode>
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-72);
      byteArray0[0] = (byte) (-72);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)107;
      byteArray0[5] = (byte) (-48);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (-446), (int) (byte)4, false);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte) (-10);
      Utility.toHexString(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)26;
      byteArray1[1] = (byte)11;
      byteArray1[2] = (byte)26;
      byteArray1[3] = (byte)99;
      Utility.equals(byteArray1, byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("1a 63 f6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `1a 63 f6'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.typeOfSignature("dup2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dup2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = "Warning: Padding byte != 0 in ";
      try { 
        Utility.methodSignatureReturnType("Warning: Padding byte != 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Warning: Padding byte != 0 in '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      try { 
        Utility.typeOfSignature("M6#s9U`j!H[9To<}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M6#s9U`j!H[9To<}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Utility.isJavaIdentifierPart('q');
      Utility.setBit(73, 79);
      String string0 = "Unreachable default case reached!";
      try { 
        Utility.typeOfSignature("Unreachable default case reached!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Unreachable default case reached!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte) (-19);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)31;
      byteArray1[1] = (byte)0;
      // Undeclared exception!
      Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)0, (int) (byte)0, true);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Utility.format(68, (-3263), false, 'a');
      Utility.format((-3263), 1949, true, 'a');
      try { 
        Utility.typeOfSignature("68");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 68
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = "A]t$L:x$5a)_C";
      try { 
        Utility.typeOfSignature("A]t$L:x$5a)_C");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A]t$L:x$5a)_C
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)61;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("aastore", string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)103;
      byteArray0[0] = (byte)103;
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      String string0 = "Warning: Padding byte != 0 in ";
      try { 
        Utility.typeOfSignature("Warning: Padding byte != 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Warning: Padding byte != 0 in 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      try { 
        Utility.typeOfSignature(";MJ7)ct!r/q7[+9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;MJ7)ct!r/q7[+9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("HXr@@7G9cB\"Lei(Ohw");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `HXr@@7G9cB\"Lei(Ohw'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "V}=3LmxsI";
      Utility.typeOfSignature("V}=3LmxsI");
      int int0 = 3830;
      boolean boolean0 = false;
      Utility.fillup("V}=3LmxsI", 3830, false, '4');
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.fillup("org.apache.bcel.classfile.Utility$1", 5332, true, 'a');
      try { 
        Utility.decode("org.apache.bcel.classfile.Utility$1", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Qzh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Qzh
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = ":'AHlJh7./r";
      try { 
        Utility.typeOfSignature(":'AHlJh7./r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :'AHlJh7./r
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Utility.compactClassName("?tuaKLHD1LkB", false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)99;
      byteArray0[6] = (byte)52;
      byteArray0[7] = (byte)38;
      Utility.toHexString(byteArray0);
      Utility.classOrInterface((byte)93);
      Utility.getSignature("MmzubR%a>vxn;D");
      try { 
        Utility.typeOfSignature("54 5d 5d 6c 30 63 34 26");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 54 5d 5d 6c 30 63 34 26
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Utility.setBit((-5465), (-5465));
      Utility.getSignature("putstatic");
      boolean boolean0 = true;
      Utility.compactClassName("Lputstatic;", true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("P@.g2#guG>2L|[yF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P@.g2#guG>2L|[yF'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = "M5,8";
      try { 
        Utility.methodSignatureReturnType("M5,8", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M5,8'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = ">k</wDGA:&,*b?>@{=l";
      try { 
        Utility.typeOfSignature(">k</wDGA:&,*b?>@{=l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >k</wDGA:&,*b?>@{=l
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Utility.isJavaIdentifierPart('%');
      Utility.fillup("T1!'i:%c_", 41, false, '%');
      Utility.clearBit((-1), (-2071));
      Utility.classOrInterface((-2071));
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      try { 
        Utility.typeOfSignature("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%T1!'i:%c_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%T1!'i:%c_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Utility.signatureToString("D?u ,;Pn", false);
      String string0 = "Z|L";
      String string1 = "invokestatic";
      Utility.replace("Z|L", "invokestatic", "Z|L");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("p`,7\"cQ~/u*`", "s,C3H&hWe_wApU$S");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // s,C3H&hWe_wApU$S
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Utility.isSet(61, 61);
      Utility.compactClassName("6VovDNpDDL$x:fMR", "6VovDNpDDL$x:fMR", true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte) (-27);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 71, 61, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = Utility.convertString("*17?R");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String string1 = Utility.getSignature("B8hAz8XUSsxJ");
      assertEquals("LB8hAz8XUSsxJ;", string1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) fileSystemHandling0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "LB8hAz8XUSsxJ;";
      objectArray0[3] = (Object) fileSystemHandling0;
      String string2 = Utility.printArray(objectArray0, false, false);
      Utility.accessToString((-148));
      String string3 = Utility.accessToString((-148));
      assertEquals("protected static synchronized volatile native interface abstract strictfp synthetic annotation enum", string3);
      
      String string4 = Utility.printArray(objectArray0);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte)107;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      byte byte0 = Utility.typeOfSignature("B8hAz8XUSsxJ");
      assertEquals((byte)8, byte0);
      
      String string5 = Utility.replace("*17?R", "protected static synchronized volatile native interface abstract strictfp synthetic annotation enum", "getstatic");
      assertTrue(string5.equals((Object)string0));
      
      String string6 = Utility.convertString("boolean");
      assertEquals("boolean", string6);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "";
      Utility.compactClassName("");
      String string1 = "Upg*5)/IZuX4l[/lY";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Upg*5)/IZuX4l[/lY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Upg*5)/IZuX4l[/lY'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte)105;
      Utility.encode(byteArray0, false);
      Utility.accessToString((int) (byte)105);
      String string0 = "6ozLA~%WZfF`;n:";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("3%K'", "6ozLA~%WZfF`;n:", "public static synchronized volatile");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3%K'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.signatureToString("JVz_ eCs\"", false);
      String string0 = "double";
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-92);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        Utility.methodSignatureArgumentTypes("double", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: double
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)121;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      byteArray0[3] = (byte) (-27);
      byteArray0[4] = (byte) (-53);
      byteArray0[5] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byteSequence0.readChar();
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, constantPool0, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.searchOpcode("char");
      String string0 = "kHg0[UKigJ[";
      try { 
        Utility.methodSignatureArgumentTypes("kHg0[UKigJ[", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: kHg0[UKigJ[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "invokevirtual";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "invokevirtual");
      Utility.isSet(115, 115);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte) (-106);
      byteArray0[5] = (byte)101;
      byteArray0[6] = (byte) (-105);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.compactClassName("O=a/C~i}6n2?*", false);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)98;
      Utility.toHexString(byteArray1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 128, (int) (byte)98);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfSignature("$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      try { 
        Utility.typeOfSignature("R%j.4iS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R%j.4iS
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Utility.methodSignatureReturnType("F", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("float");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "zP");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "float");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "float";
      objectArray0[1] = (Object) "F";
      objectArray0[2] = (Object) "F";
      objectArray0[3] = (Object) "F";
      Utility.printArray(printStream0, objectArray0);
      Utility.convertString("F");
      Utility.isJavaIdentifierPart('S');
      Utility.accessToString(149, true);
      try { 
        Utility.methodSignatureArgumentTypes("public protected final transient");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: public protected final transient
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = "ireturn";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = true;
      Utility.compactClassName("ireturn", "Only element values of type array can be built with this ctor - type specified: ", true);
      Utility.setBit(182, 182);
      Utility.methodSignatureReturnType("[C~$wrA#k]", true);
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte) (-101);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        byteSequence0.readFully(byteArray0, 1104, 182);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)52;
      byte byte0 = (byte)72;
      byteArray0[1] = (byte)72;
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfSignature("4H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4H
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Xa4[zLXh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Xa4[zLXh
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)66;
      ConstantPool constantPool0 = null;
      int int0 = 85;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 85, (int) (byte)106);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-68);
      byte byte0 = (byte) (-92);
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte) (-24);
      byte byte1 = (byte) (-3);
      byteArray0[3] = (byte) (-3);
      byte byte2 = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)74;
      byteArray0[7] = (byte)45;
      byteArray0[8] = (byte)105;
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)14, (-885), false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)43;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte)1;
      byte byte0 = (byte) (-123);
      byteArray0[6] = (byte) (-123);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        Utility.typeOfSignature("3LgBur(imw");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3LgBur(imw
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      short short0 = Utility.searchOpcode("C|f>W2|?LXk5Amr15,t");
      assertEquals((short) (-1), short0);
      
      String string0 = Utility.methodTypeToSignature("C|f>W2|?LXk5Amr15,t", (String[]) null);
      assertEquals("()LC|f>W2|?LXk5Amr15,t;", string0);
      
      byte[] byteArray0 = Utility.decode("lFkQ4*-", false);
      String string1 = Utility.replace("dload_2", "()LC|f>W2|?LXk5Amr15,t;", "(MhU}v");
      assertEquals("dload_2", string1);
      
      Constant[] constantArray0 = new Constant[2];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-2750), 65);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      constantArray0[1] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string2 = Utility.codeToString(byteArray0, constantPool1, (-2750), (-2750), true);
      assertArrayEquals(new byte[] {(byte)108, (byte)70, (byte)107, (byte)81, (byte)52, (byte)42, (byte)45}, byteArray0);
      assertEquals("0:    idiv\n1:    fstore_3\n2:    dmul\n3:    fastore\n4:    caload\n5:    aload_0\n6:    aload_3\n", string2);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("The magic number must contain at least one byte");
      assertEquals((byte)14, byte0);
      
      String string0 = Utility.format((byte)14, (byte)14, false, 'D');
      assertEquals("DDDDDDDDDDDD14", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)96;
      byteArray0[6] = (byte)14;
      byteArray0[7] = (byte)14;
      byteArray0[8] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantLong constantLong0 = new ConstantLong(byteSequence0);
      constantArray0[0] = (Constant) constantLong0;
      ConstantInteger constantInteger0 = new ConstantInteger((byte)14);
      constantArray0[1] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ST");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Locale locale0 = Locale.FRENCH;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "ST", (Object[]) constantArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      Utility.printArray((PrintWriter) mockPrintWriter1, (Object[]) constantArray0);
      String string2 = Utility.fillup("dconst_0", 1819, false, '3');
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.compactClassName("yLcD");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 89, (-1948), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String string0 = "V";
      Utility.methodSignatureReturnType("V", true);
      Utility.isJavaIdentifierPart('<');
      Utility.accessToString(1595);
      // Undeclared exception!
      Utility.format(40, 65536, false, ')');
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte) (-34);
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte)81;
      byteArray0[7] = (byte)26;
      byteArray0[8] = (byte) (-70);
      Utility.encode(byteArray0, false);
      try { 
        Utility.decode("$5b$C$3e$u$de$tQ$g$ba", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String string0 = ",h)mdV+Q&1Txedh";
      try { 
        Utility.typeOfSignature(",h)mdV+Q&1Txedh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,h)mdV+Q&1Txedh
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte) (-88);
      byte byte0 = (byte)111;
      byteArray0[4] = (byte)111;
      byteArray0[5] = (byte) (-122);
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte)6;
      byteArray0[8] = (byte)1;
      Utility.encode(byteArray0, true);
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("09 3b 67 a8 6f 86 04 06 01");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 09 3b 67 a8 6f 86 04 06 01
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String string0 = Utility.convertString("{lWGOa~j-QQY");
      assertEquals("{lWGOa~j-QQY", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("lshr", string1);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "s^P7L#`3ZhMpl");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte) (-67);
      byteArray0[5] = (byte)85;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("lcmp", string0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Utility.isJavaIdentifierPart('O');
      String string0 = "KkB]Lf$fL*(oU=W~a:c";
      // Undeclared exception!
      try { 
        Utility.decode("KkB]Lf$fL*(oU=W~a:c", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"fL\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      boolean boolean0 = Utility.isSet(9, 9);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\t<";
      stringArray0[1] = "\t<";
      String string0 = Utility.methodTypeToSignature("\t<", stringArray0);
      assertEquals("(L<;L<;)L<;", string0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String string0 = "Jq!:u";
      Utility.typeOfSignature("Jq!:u");
      Utility.isSet((byte)11, 2);
      Utility.getSignature("Jq!:u");
      try { 
        Utility.decode("Jq!:u", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Utility.compactClassName("(", false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = Utility.classOrInterface(40);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte) (-47);
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)33;
      byteArray0[7] = (byte) (-104);
      byteArray0[8] = (byte)55;
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("p$a0$fe$d1_$I$n$987", string1);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Illegal type: ");
      assertEquals((byte)10, byte0);
      
      String string0 = Utility.compactClassName("Illegal type: ", "^rd7S<hwCl#zN", true);
      assertEquals("Illegal type: ", string0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("if_icmpne", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[6];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(56, 34);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[0] = (Constant) constantMethodref1;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      constantArray0[1] = (Constant) constantFieldref0;
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[2] = (Constant) constantString1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(34, 57);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[3] = (Constant) constantInvokeDynamic1;
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[4] = (Constant) constantFloat1;
      ConstantFloat constantFloat2 = new ConstantFloat(constantFloat0);
      constantArray0[5] = (Constant) constantFloat2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("irem", string0);
      assertArrayEquals(new byte[] {(byte)105, (byte)102, (byte)95, (byte)105, (byte)99, (byte)109, (byte)112, (byte)110, (byte)101}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte) (-3);
      byteArray0[5] = (byte) (-89);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte) (-83);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-4474));
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(",");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[1] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-3), 2271, true);
      assertEquals("0:    <illegal opcode>\n1:    <illegal opcode>\n2:    dcmpl\n3:    lushr\n4:    <illegal opcode>\n5:    goto\t\t#260\n8:    lreturn\n", string0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      try { 
        Utility.typeOfSignature("? super ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ? super 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.clearBit(91, 91);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "iconst_1");
      Utility.setBit((-1346), 1060);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.replace("=MO^[Jj", "=MO^[Jj", "dkq.k5");
      byte[] byteArray0 = new byte[3];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)105;
      Utility.toHexString(byteArray0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "e2 27 69";
      objectArray0[1] = (Object) "e2 27 69";
      Utility.printArray(objectArray0);
      try { 
        Utility.typeOfMethodSignature("if_icmpgt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: if_icmpgt
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: T
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String string0 = "RuntimeInvisibleParameterAnnotations";
      try { 
        Utility.methodSignatureReturnType("RuntimeInvisibleParameterAnnotations", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RuntimeInvisibleParameterAnnotations'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String string0 = "~mDRVC]23>PNi`~W36";
      Utility.searchOpcode("~mDRVC]23>PNi`~W36");
      try { 
        Utility.decode("~mDRVC]23>PNi`~W36", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "java.lang.fAe";
      stringArray0[1] = "java.lang.fAe";
      stringArray0[2] = "java.lang.fAe";
      stringArray0[3] = "java.lang.fAe";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "java.lang.fAe");
      stringArray0[4] = "java.lang.fAe";
      stringArray0[5] = "java.lang.fAe";
      stringArray0[6] = "java.lang.fAe";
      stringArray0[7] = "java.lang.fAe";
      stringArray0[8] = "java.lang.fAe";
      Utility.methodTypeToSignature("java.lang.fAe", stringArray0);
      Utility.printArray((Object[]) stringArray0, true);
      Utility.printArray((Object[]) stringArray0, true, true);
      Utility.compactClassName("i2s", "K", true);
      String string0 = "r&YSE33[U-";
      Utility.compactClassName("if_icmpge", "r&YSE33[U-", true);
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)121;
      Utility.encode(byteArray0, false);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte)121;
      objectArray0[1] = (Object) "$9ey";
      objectArray0[2] = (Object) (byte)121;
      objectArray0[3] = (Object) (byte)121;
      Utility.printArray(objectArray0, false, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("$9ey");
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("\"121\", \"$9ey\", \"121\", \"121\"", ".jar", "line.separator", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"121\", \"$9ey\", \"121\", \"121\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("[cBDXuQ[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `cBDXuQ['
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Utility.isJavaIdentifierPart('T');
      try { 
        Utility.methodSignatureReturnType("Grp$<q#Ps`92(-KJ7xv", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Grp$<q#Ps`92(-KJ7xv'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte) (-43);
      boolean boolean1 = false;
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("X", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = "OOE]qd8~\"3";
      // Undeclared exception!
      try { 
        Utility.signatureToString("OOE]qd8~\"3", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `OOE]qd8~\"3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Utility.compactClassName("<clinit>");
      byte[] byteArray0 = Utility.decode("ifgt", false);
      Utility.searchOpcode("<clinit>");
      Utility.equals(byteArray0, byteArray0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "ifgt";
      objectArray0[1] = (Object) "<clinit>";
      objectArray0[2] = (Object) "<clinit>";
      objectArray0[3] = (Object) "<clinit>";
      objectArray0[4] = (Object) "<clinit>";
      objectArray0[5] = (Object) "<clinit>";
      objectArray0[6] = (Object) "<clinit>";
      String string0 = Utility.printArray(objectArray0);
      Utility.isJavaIdentifierPart('8');
      String string1 = Utility.format((short) (-1), 1064, true, '\"');
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = "/rq/~.f6%o8vj";
      try { 
        Utility.typeOfSignature("/rq/~.f6%o8vj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /rq/~.f6%o8vj
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte)52;
      byteArray0[6] = (byte)32;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 41, (int) (byte)8, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "short";
      stringArray0[1] = "short";
      stringArray0[2] = "short";
      stringArray0[3] = "short";
      stringArray0[4] = "short";
      stringArray0[5] = "short";
      stringArray0[6] = "short";
      stringArray0[7] = "invokestatic";
      Utility.methodTypeToSignature("short", stringArray0);
      try { 
        Utility.methodSignatureArgumentTypes("ireturn", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ireturn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "";
      String string1 = "=;?d'?,;9ej3{";
      // Undeclared exception!
      Utility.replace("", "", "=;?d'?,;9ej3{");
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "instanceof";
      stringArray0[1] = "instanceof";
      stringArray0[2] = "instanceof";
      stringArray0[3] = "instanceof";
      stringArray0[4] = "instanceof";
      stringArray0[5] = "filename\t\t";
      String string0 = Utility.methodTypeToSignature("instanceof", stringArray0);
      assertEquals("(Linstanceof;Linstanceof;Linstanceof;Linstanceof;Linstanceof;Lfilename;)Linstanceof;", string0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Utility.convertString(" 1e*}=0pbYxppA");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) " 1e*}=0pbYxppA";
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-13);
      byteArray0[5] = (byte) (-74);
      byteArray0[6] = (byte) (-2);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-64), (-63));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Utility.isSet(47, 47);
      Utility.decode("Illegally nested brackets:", false);
      Utility.convertString("Illegally nested brackets:");
      Utility.clearBit(47, 81);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object[] objectArray0 = null;
      Utility.printArray((Object[]) null, false);
      String string0 = "oe_G\"u2Hz/djTt#VrH";
      // Undeclared exception!
      try { 
        Utility.signatureToString("oe_G\"u2Hz/djTt#VrH", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `oe_G\"u2Hz/djTt#VrH'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-39);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-39), 71);
      String string0 = "!8?iPw";
      try { 
        Utility.typeOfSignature("!8?iPw");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8?iPw
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = "%G!0^\\2Q0bxD5[Y'Q@6";
      Utility.convertString("%G!0^\u0002Q0bxD5[Y'Q@6");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Utility.accessToString((-613));
      Utility.compactClassName("%G!0^\u0002Q0bxD5[Y'Q@6");
      Utility.searchOpcode("<");
      OutputStream outputStream0 = null;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, true, "g<9LY/q5");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.getSignature("3^jMjk[@`<5&s_'6G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[@`<5&s_'6G
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte)88;
      byteArray0[6] = (byte)111;
      byteArray0[7] = (byte)39;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.compactClassName("dcmpg");
      Utility.compactClassName("g:o", "Ar1G@QaVa", false);
      Object[] objectArray0 = new Object[2];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "qQQ-\"qvp1#8]");
      objectArray0[0] = (Object) (byte)104;
      objectArray0[1] = (Object) (byte)88;
      Utility.printArray(objectArray0, false, false);
      Utility.clearBit((byte) (-64), (byte)104);
      Utility.fillup("g:o", (byte) (-64), false, 'C');
      // Undeclared exception!
      try { 
        Utility.signatureToString("Ar1G@QaVa", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Ar1G@QaVa'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "8_sddX<9 <l";
      try { 
        Utility.typeOfSignature("8_sddX<9 <l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8_sddX<9 <l
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Utility.isJavaIdentifierPart('W');
      Utility.compactClassName("Byte code error: ", true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte) (-78);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)8, (int) (byte) (-51));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte)63;
      byteArray0[5] = (byte)30;
      byteArray0[6] = (byte) (-9);
      byteArray0[7] = (byte)18;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("53 02 17 82 3f 1e f7 12", string0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String string0 = "qvw\\:2%M!sd1ue@\"dh";
      Utility.convertString("qvw:2%M!sd1ue@\"dh");
      // Undeclared exception!
      try { 
        Utility.signatureToString("qvw:2%M!sd1ue@\"dh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `qvw:2%M!sd1ue@\"dh'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Utility.accessToString(774, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte) (-67);
      byteArray0[5] = (byte)80;
      byteArray0[6] = (byte) (-21);
      byteArray0[7] = (byte) (-83);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-67), (int) (byte)39, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte)30;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$mP$f3$k", string0);
      
      int int0 = Utility.setBit(178, 178);
      assertEquals(262322, int0);
      
      String string1 = Utility.fillup("$mP$f3$k", (byte)32, true, ';');
      assertEquals("$mP$f3$k;;;;;;;;;;;;;;;;;;;;;;;;", string1);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = "9CT2w? A0?)";
      String string1 = "java.lang.";
      Utility.replace("hDR)\"N+eiS0ykLZ9O$", "9CT2w? A0?)", "java.lang.");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-114);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)57;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 30
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-48);
      byte byte0 = (byte)37;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte) (-9);
      byteArray0[3] = (byte)56;
      byte byte1 = (byte)36;
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte)20;
      byteArray0[6] = (byte)18;
      byte byte2 = (byte) (-47);
      byteArray0[7] = (byte) (-47);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "";
      Utility.compactClassName("", "", true);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) (byte)56;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) (byte)18;
      Utility.printArray(objectArray0);
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      boolean boolean0 = false;
      Utility.compactClassName("bM~6\";\"O~e", false);
      Utility.signatureToString("Lprivate;V");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)108;
      byte byte0 = (byte)13;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)52;
      MockFile mockFile0 = new MockFile("byte", "]K)*F");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, "#e6Ryln");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"#e6Ryln\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte) (-52);
      byteArray0[4] = (byte)71;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteArray0, constantPool0, (-889275714), (int) (byte) (-52), true);
      int int0 = 178;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        constantPool0.getConstant((int) (byte) (-41), (byte)106);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = Utility.format(177, (-1933457229), false, '$');
      assertEquals("177", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte)38;
      String string1 = Utility.toHexString(byteArray0);
      String string2 = Utility.compactClassName("44 92 89 26", "44 92 89 26", false);
      assertTrue(string2.equals((Object)string1));
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "44 92 89 26";
      stringArray0[1] = "44 92 89 26";
      String string3 = Utility.methodTypeToSignature("?Q 7Qv@V.", stringArray0);
      assertEquals("(L44;L44;)L?Q;", string3);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      short short0 = Utility.searchOpcode("ret");
      assertEquals((short)169, short0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Utility.accessToString(1966, true);
      try { 
        Utility.typeOfSignature("float");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: float
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = "goto_w";
      Utility.searchOpcode("goto_w");
      String string1 = "instanceof";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("instanceof", "instanceof");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // instanceof
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Utility.printArray(objectArray0, false);
      int int0 = 47;
      Utility.clearBit(47, 80);
      Utility.compactClassName("java.lang.Object@740e3b79, java.lang.Object@7b3325bf, java.lang.Object@39d0ee97, java.lang.Object@23b03ab1, java.lang.Object@26e0184d, java.lang.Object@441ccff3, java.lang.Object@7a0635b1", "java.lang.Object@740e3b79, java.lang.Object@7b3325bf, java.lang.Object@39d0ee97, java.lang.Object@23b03ab1, java.lang.Object@26e0184d, java.lang.Object@441ccff3, java.lang.Object@7a0635b1", false);
      Utility.accessToString(80, true);
      Utility.clearBit(73, 2389);
      Utility.compactClassName("java.lang.Object@740e3b79, java.lang.Object@7b3325bf, java.lang.Object@39d0ee97, java.lang.Object@23b03ab1, java.lang.Object@26e0184d, java.lang.Object@441ccff3, java.lang.Object@7a0635b1");
      try { 
        Utility.typeOfMethodSignature("java.lang.Object@740e3b79, java.lang.Object@7b3325bf, java.lang.Object@39d0ee97, java.lang.Object@23b03ab1, java.lang.Object@26e0184d, java.lang.Object@441ccff3, java.lang.Object@7a0635b1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.Object@740e3b79, java.lang.Object@7b3325bf, java.lang.Object@39d0ee97, java.lang.Object@23b03ab1, java.lang.Object@26e0184d, java.lang.Object@441ccff3, java.lang.Object@7a0635b1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String[] stringArray0 = null;
      Utility.methodTypeToSignature("? extends ", (String[]) null);
      Utility.searchOpcode("`1u/XBSJXJ=P?H");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Utility.classOrInterface(256);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-18);
      Utility.encode(byteArray0, true);
      Utility.isSet((byte) (-18), (byte) (-18));
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Utility.printArray(objectArray0, true, true);
      Utility.clearBit((-651), 137);
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false);
      int int0 = 11;
      Utility.classOrInterface(11);
      String string0 = Utility.format(11, 4464, true, '?');
      try { 
        Utility.methodSignatureArgumentTypes(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Utility.convertString("j$-Ff4");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "j$-Ff4";
      objectArray0[1] = (Object) "j$-Ff4";
      objectArray0[2] = (Object) "j$-Ff4";
      objectArray0[3] = (Object) "j$-Ff4";
      objectArray0[4] = (Object) "j$-Ff4";
      objectArray0[5] = (Object) "j$-Ff4";
      objectArray0[6] = (Object) "j$-Ff4";
      objectArray0[7] = (Object) "j$-Ff4";
      Utility.printArray(objectArray0, true, true);
      Utility.isSet(242, 241);
      Utility.accessToString(242, false);
      Utility.isSet(242, 14);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("private final synchronized volatile transient", "lor", "(a;@^b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: private final synchronized volatile transient
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      PrintStream printStream0 = null;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) null;
      objectArray0[8] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Utility.accessToString(2, false);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "{86?~-Rr2Z";
      stringArray0[1] = "{86?~-Rr2Z";
      stringArray0[2] = "{86?~-Rr2Z";
      stringArray0[3] = "private";
      stringArray0[4] = "private";
      Utility.methodTypeToSignature("{86?~-Rr2Z", stringArray0);
      Utility.classOrInterface(713);
      try { 
        Utility.typeOfSignature(" (");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte) (-19);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-2645), 223);
      String string0 = "9 ,d~R#E:";
      // Undeclared exception!
      try { 
        Utility.replace((String) null, "9 ,d~R#E:", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)80;
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)80;
      byteArray1[1] = (byte)80;
      Utility.equals(byteArray0, byteArray1);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (byte)118;
      objectArray0[1] = (Object) (byte)80;
      Utility.printArray(objectArray0, false, false);
      String string0 = "VU$";
      Utility.searchOpcode("VU$");
      try { 
        Utility.typeOfMethodSignature("VU$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: VU$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = "E4EOt.H{25`k3-v@W";
      try { 
        Utility.typeOfMethodSignature("E4EOt.H{25`k3-v@W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E4EOt.H{25`k3-v@W
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false);
      try { 
        Utility.typeOfSignature("\nAnnotation(s):\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         // Annotation(s):
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = "SzKmWB{[hYK`";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("SzKmWB{[hYK`", "(", "fd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: SzKmWB{[hYK`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Utility.compactClassName("long", false);
      Utility.clearBit(11, 183);
      Utility.fillup("long", 1355, false, '0');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("long", "jRlqjM", "a1PJt&({|", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: long
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Utility.convertString("|A1yCxj+~4");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-100);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-1267), 18);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[0] = (Constant) constantMethodref1;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("|A1yCxj+~4");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      constantArray0[2] = (Constant) constantFloat0;
      int int0 = 611;
      int int1 = 856;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Utility.convertString("VU$[I]ncZp6");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "VU$[I]ncZp6";
      stringArray0[1] = "VU$[I]ncZp6";
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = "VU$[I]ncZp6";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String string0 = ":d=P#f)F]4C*";
      Utility.searchOpcode(":d=P#f)F]4C*");
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Utility.methodSignatureReturnType("I!<$j|PE=&dcpw&0=E");
      boolean boolean0 = false;
      Utility.convertString("int");
      byte[] byteArray0 = Utility.decode("I!<$j|PE=&dcpw&0=E", false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.compactClassName("int", "I!<$j|PE=&dcpw&0=E", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 250, 250);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String string0 = "?>...";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte) (-109);
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte)49;
      byteArray0[6] = (byte)83;
      byteArray0[7] = (byte)79;
      byteArray0[8] = (byte)67;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("?>...", "p ^{hoO|Q$'9*oIV");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // p ^{hoO|Q$'9*oIV
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Utility.accessToString((-2814));
      Utility.clearBit((-470), 103);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-3);
      Utility.equals(byteArray0, byteArray0);
      Utility.format(103, (-2575), false, 'E');
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Utility.compactClassName("!6ak/wqXB(ruke:s64o");
      String string0 = "<";
      // Undeclared exception!
      try { 
        Utility.signatureToString("<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `<'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      String string0 = "int";
      try { 
        Utility.methodSignatureArgumentTypes("int");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: int
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.getSignature("<Y9%qEWwj?^\"");
      Utility.setBit(277, 277);
      Utility.accessToString((-366), false);
      Utility.isSet((-366), 2097429);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "*l<fn6`dq";
      stringArray0[1] = "L<Y9%qEWwj?^\";";
      Utility.methodTypeToSignature("private final transient interface abstract strictfp synthetic annotation enum", stringArray0);
      Utility.setBit(39, 144);
      Utility.methodTypeToSignature("N?O:?=kS1", stringArray0);
      MockFile mockFile0 = new MockFile("(L*l<fn6`dq;LL<Y9%qEWwj?^\";;)Lprivate;", "(L*l<fn6`dq;LL<Y9%qEWwj?^\";;)LN?O:?=kS1;");
      File file0 = MockFile.createTempFile("<Y9%qEWwj?^\"", "*l<fn6`dq", (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockPrintStream0.println(861L);
      Utility.printArray((PrintStream) mockPrintStream0, (Object[]) stringArray0);
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, 2097429, false, '$');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String string0 = "monitorexit";
      try { 
        Utility.typeOfSignature("monitorexit");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: monitorexit
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
