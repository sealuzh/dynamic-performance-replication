/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 07:33:51 GMT 2018
 */

package okhttp3.internal.http;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.URI;
import java.net.URL;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.BiConsumer;
import okhttp3.Challenge;
import okhttp3.CookieJar;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.internal.http.HttpHeaders;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpHeaders_ESTest extends HttpHeaders_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = HttpHeaders.skipUntil("08E[IL]Xc-y)", 1238, "08E[IL]Xc-y)");
      int int1 = HttpHeaders.skipWhitespace("08E[IL]Xc-y)", 1238);
      assertTrue(int1 == int0);
      assertEquals(1238, int1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      hashMap0.clear();
      hashMap0.put("request == null", "request == null");
      headers0.values("request == null");
      hashMap0.put("request == null", "SH7SHj-U");
      Headers headers1 = Headers.of((Map<String, String>) hashMap0);
      HttpHeaders.varyFields(headers0);
      headers0.newBuilder();
      HttpHeaders.varyFields(headers0);
      HttpHeaders.contentLength(headers0);
      HttpHeaders.contentLength(headers0);
      HttpHeaders.varyHeaders(headers1, headers1);
      headers1.names();
      HttpHeaders.skipUntil("request == null", Integer.MAX_VALUE, "request == null");
      HttpHeaders.parseChallenges(headers1, "chunked");
      // Undeclared exception!
      try { 
        HttpHeaders.skipUntil("SH7SHj-U", (-1556), "request == null");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      Headers headers1 = HttpHeaders.varyHeaders(headers0, headers0);
      List<Challenge> list0 = HttpHeaders.parseChallenges(headers1, "min-frUsh=");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      Headers headers1 = HttpHeaders.varyHeaders(headers0, headers0);
      headers1.getDate("&u<fnDs");
      headers1.toMultimap();
      headers1.toMultimap();
      long long0 = HttpHeaders.contentLength(headers1);
      assertEquals((-1L), long0);
      
      boolean boolean0 = HttpHeaders.hasVaryAll(headers1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Response response0 = null;
      // Undeclared exception!
      try { 
        HttpHeaders.varyHeaders((Response) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Response response0 = null;
      // Undeclared exception!
      try { 
        HttpHeaders.hasVaryAll((Response) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "unexpected port: ";
      HttpHeaders.skipWhitespace("unexpected port: ", 255);
      HttpHeaders.skipUntil("unexpected port: ", 255, "unexpected port: ");
      Response response0 = null;
      // Undeclared exception!
      try { 
        HttpHeaders.contentLength((Response) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "";
      HttpHeaders.skipUntil("NMz:~3>", 0, "");
      int int0 = 5;
      HttpHeaders.skipUntil("", 5, "NMz:~3>");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "NMz:~3>";
      // Undeclared exception!
      try { 
        Headers.of(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected alternating header names and values
         //
         verifyException("okhttp3.Headers", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = HttpHeaders.skipUntil("c?4)%2&z", 0, "c?4)%2&z");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HttpHeaders.skipWhitespace("4gZ#A", 90);
      int int0 = HttpHeaders.parseSeconds("pathSegment == null", 90);
      assertEquals(90, int0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      headers0.toMultimap();
      headers0.values("pathSegment == null");
      headers0.names();
      hashMap0.put("4gZ#A", "C?XB'g\"");
      headers0.names();
      headers0.newBuilder();
      headers0.newBuilder();
      HttpHeaders.contentLength(headers0);
      HttpHeaders.varyFields(headers0);
      HttpHeaders.skipWhitespace("pathSegment == null", 1);
      HttpHeaders.hasVaryAll(headers0);
      HttpHeaders.skipWhitespace("pathSegment == null", 90);
      HttpHeaders.parseChallenges(headers0, ">- q[rInB(7n=");
      Headers headers1 = HttpHeaders.varyHeaders(headers0, headers0);
      int int1 = HttpHeaders.skipWhitespace(">- q[rInB(7n=", 1);
      assertEquals(1, int1);
      
      CookieJar cookieJar0 = mock(CookieJar.class, new ViolatedAssumptionAnswer());
      HttpUrl.parse("fiG%N#J?WSEy'");
      HttpHeaders.receiveHeaders(cookieJar0, (HttpUrl) null, headers0);
      HttpHeaders.hasVaryAll(headers0);
      hashMap0.put("HEAD", (String) null);
      boolean boolean0 = HttpHeaders.hasVaryAll(headers1);
      assertFalse(boolean0);
      
      long long0 = HttpHeaders.contentLength(headers0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = HttpHeaders.parseSeconds("Vary", (-1996190502));
      assertEquals((-1996190502), int0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Vary";
      stringArray0[1] = "Vary";
      stringArray0[2] = "Vary";
      stringArray0[3] = "Vary";
      stringArray0[4] = "Vary";
      stringArray0[5] = "?xcRH.MPf>8eLXt";
      stringArray0[6] = "Vary";
      stringArray0[7] = "Pragma";
      Headers headers0 = Headers.of(stringArray0);
      Set<String> set0 = HttpHeaders.varyFields(headers0);
      assertEquals(3, set0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("vary", "vary");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      Headers headers1 = HttpHeaders.varyHeaders(headers0, headers0);
      assertEquals(1, headers1.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("os=sic$d6~'l;i4)+}u", "=pdsh`");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      List<Challenge> list0 = HttpHeaders.parseChallenges(headers0, "os=sic$d6~'l;i4)+}u");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = HttpHeaders.parseSeconds("data == null", (-1111641269));
      assertEquals((-1111641269), int0);
      
      int int1 = HttpHeaders.skipWhitespace("data == null", 7);
      assertEquals(8, int1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      HttpHeaders.varyHeaders(headers0, headers0);
      int int0 = HttpHeaders.parseSeconds("99", (-558));
      assertEquals(99, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HttpHeaders.skipWhitespace("jq9!=;o#zh*lo,dg8", 4);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "vary";
      stringArray0[1] = "jq9!=;o#zh*lo,dg8";
      stringArray0[2] = "jq9!=;o#zh*lo,dg8";
      stringArray0[3] = "jq9!=;o#zh*lo,dg8";
      stringArray0[4] = "jq9!=;o#zh*lo,dg8";
      stringArray0[5] = "jq9!=;o#zh*lo,dg8";
      Headers headers0 = Headers.of(stringArray0);
      Headers headers1 = HttpHeaders.varyHeaders(headers0, headers0);
      List<Challenge> list0 = HttpHeaders.parseChallenges(headers1, "M4");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "endindex < beginindex:";
      stringArray0[1] = "zbfd$Jfb\"2 nA^";
      stringArray0[2] = "%POe/GYf";
      stringArray0[3] = "S(U#c:kF+R*v]";
      stringArray0[4] = "arg'J-)[";
      stringArray0[5] = "([^ \"=]*)";
      Headers headers0 = Headers.of(stringArray0);
      headers0.names();
      headers0.names();
      headers0.values("#IL");
      headers0.values("#IL");
      headers0.names();
      headers0.getDate("%*");
      headers0.toString();
      headers0.newBuilder();
      boolean boolean0 = HttpHeaders.hasVaryAll(headers0);
      assertFalse(boolean0);
      
      List<Challenge> list0 = HttpHeaders.parseChallenges(headers0, "endindex < beginindex:");
      assertTrue(list0.isEmpty());
      
      long long0 = HttpHeaders.contentLength(headers0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap1);
      HttpHeaders.receiveHeaders((CookieJar) null, (HttpUrl) null, headers0);
      // Undeclared exception!
      try { 
        HttpHeaders.varyMatches((Response) null, headers0, (Request) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "RB'";
      stringArray0[1] = "Transfer-Encoding";
      stringArray0[2] = "Transfer-Encoding";
      stringArray0[3] = "Transfer-Encoding";
      stringArray0[4] = "Transfer-Encoding";
      stringArray0[5] = "Transfer-Encoding";
      stringArray0[6] = "Transfer-Encoding";
      stringArray0[7] = "Transfer-Encoding";
      Headers headers0 = Headers.of(stringArray0);
      Headers.of(stringArray0);
      headers0.toString();
      headers0.toString();
      HttpHeaders.parseChallenges(headers0, "Content-Length");
      String[] stringArray1 = new String[6];
      stringArray1[0] = "Content-Length";
      stringArray1[1] = "Content-Length";
      stringArray1[2] = "Content-Length";
      stringArray1[3] = "okhttp3.internal.http.HttpHeaders";
      stringArray1[4] = "RB': Transfer-Encoding\nTransfer-Encoding: Transfer-Encoding\nTransfer-Encoding: Transfer-Encoding\nTransfer-Encoding: Transfer-Encoding\n";
      stringArray1[5] = "Content-Length";
      Headers headers1 = Headers.of(stringArray1);
      Headers headers2 = Headers.of(stringArray1);
      headers1.toString();
      HttpHeaders.contentLength(headers1);
      HttpUrl.parse("okhttp3.internal.http.HttpHeaders");
      HttpHeaders.receiveHeaders((CookieJar) null, (HttpUrl) null, headers1);
      assertTrue(headers1.equals((Object)headers2));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "o(rc @=\\his";
      stringArray0[1] = "o(rc @=\\his";
      Headers headers0 = Headers.of(stringArray0);
      List<Challenge> list0 = HttpHeaders.parseChallenges(headers0, "o(rc @=\\his");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "ourc @=0this";
      stringArray0[1] = "ourc @=0this";
      Headers headers0 = Headers.of(stringArray0);
      HttpHeaders.parseChallenges(headers0, "ourc @=0this");
      // Undeclared exception!
      try { 
        HttpHeaders.skipUntil("ourc @=0this", (-2354), "*");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
}
