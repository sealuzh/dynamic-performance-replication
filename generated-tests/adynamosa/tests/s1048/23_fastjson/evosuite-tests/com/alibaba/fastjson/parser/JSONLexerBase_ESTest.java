/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 25 07:37:34 GMT 2019
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringReader;
import java.math.BigDecimal;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONLexerBase_ESTest extends JSONLexerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error parse null or new");
      BigDecimal bigDecimal0 = new BigDecimal(1071);
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.lexError("@w=`!y^=Uz:", (Object[]) null);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2((char[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      BigDecimal bigDecimal0 = new BigDecimal(0);
      jSONReaderScanner0.scanIdent();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false");
      BigDecimal bigDecimal0 = new BigDecimal(0);
      jSONReaderScanner0.scanIdent();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nv", 34);
      jSONScanner0.isRef();
      char[] charArray0 = new char[0];
      jSONScanner0.scanISO8601DateIfMatch(false);
      jSONScanner0.scanFieldFloat(charArray0);
      jSONScanner0.scanType("nv");
      jSONScanner0.sbuf = charArray0;
      jSONScanner0.isRef();
      jSONScanner0.scanISO8601DateIfMatch();
      SymbolTable symbolTable0 = new SymbolTable(34);
      char char0 = 'n';
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0, 'n');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nv");
      jSONReaderScanner0.scanBoolean('n');
      char[] charArray0 = new char[3];
      charArray0[0] = 'n';
      TimeZone timeZone0 = TimeZone.getDefault();
      jSONReaderScanner0.timeZone = timeZone0;
      charArray0[1] = 'n';
      charArray0[2] = 'n';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.arrayCopy(956, charArray0, 59, 956);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nv");
      jSONReaderScanner0.scanString('?');
      jSONReaderScanner0.scanUUID('S');
      char[] charArray0 = new char[9];
      charArray0[0] = 'g';
      charArray0[1] = 'S';
      charArray0[2] = 'g';
      charArray0[3] = 'S';
      charArray0[4] = 'S';
      charArray0[5] = 'g';
      charArray0[6] = '?';
      charArray0[7] = 'S';
      charArray0[8] = 'S';
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDate('A');
      assertFalse(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0Sg");
      char[] charArray0 = new char[3];
      charArray0[0] = 'w';
      charArray0[1] = '/';
      jSONReaderScanner0.putChar('t');
      charArray0[2] = 'M';
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      int int0 = JSONLexerBase.INT_MULTMIN_RADIX_TEN;
      jSONReaderScanner0.scanBoolean('w');
      jSONReaderScanner0.scanUUID('M');
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-214748364));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false");
      jSONReaderScanner0.nextToken();
      double double0 = jSONReaderScanner0.scanDouble('1');
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("5Y");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      Locale locale0 = Locale.FRANCE;
      jSONReaderScanner0.setLocale(locale0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nv");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1:Jwt(e<x");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("1:Jwt(e<x");
      jSONReaderScanner1.scanLong('Z');
      jSONReaderScanner1.scanUUID('#');
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      jSONReaderScanner0.scanStringArray(set0, 'Z');
      JSONScanner jSONScanner0 = new JSONScanner("1:Jwt(e<x", 59);
      // Undeclared exception!
      try { 
        jSONScanner0.sub_chars(0, 102);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1:Cwt");
      BigDecimal bigDecimal0 = new BigDecimal(76);
      char[] charArray0 = new char[2];
      charArray0[0] = '^';
      charArray0[1] = '#';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 83);
      jSONReaderScanner1.scanFieldDate(charArray0);
      jSONReaderScanner1.scanFieldBigInteger(charArray0);
      assertEquals((-2), jSONReaderScanner1.matchStat);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nv");
      jSONReaderScanner0.scanUUID('n');
      SymbolTable symbolTable0 = new SymbolTable(48);
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, 'd');
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false");
      BigDecimal bigDecimal0 = new BigDecimal(1612);
      jSONReaderScanner0.scanFalse();
      jSONReaderScanner0.scanFloat('\'');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ngq");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ngq");
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      Locale locale0 = new Locale("ngq");
      jSONReaderScanner0.setLocale(locale0);
      jSONReaderScanner0.token();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("i``");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      jSONReaderScanner0.np = 55296;
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.scanUUID('+');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ngq");
      jSONReaderScanner0.scanLong('9');
      jSONReaderScanner0.scanDate('@');
      jSONReaderScanner0.close();
      int int0 = JSONLexer.UNKNOWN;
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StringReader stringReader0 = new StringReader("true");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      stringReader0.reset();
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDate((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      int int0 = JSONLexerBase.INT_MULTMIN_RADIX_TEN;
      jSONReaderScanner0.scanBoolean('F');
      jSONReaderScanner0.scanUUID('g');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '-';
      charArray0[1] = '-';
      charArray0[2] = '-';
      charArray0[3] = '-';
      charArray0[4] = '-';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1411, (-2194));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.longValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanDouble('e');
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.token();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("z");
      BigDecimal bigDecimal0 = new BigDecimal(0);
      jSONReaderScanner0.scanDecimal('z');
      jSONReaderScanner0.scanSymbolWithSeperator((SymbolTable) null, '');
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      int int0 = JSONLexerBase.INT_MULTMIN_RADIX_TEN;
      jSONReaderScanner0.scanUUID('g');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("+ m\"N5oI7A\"YzzyKDc");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.setToken(26);
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.putChar('6');
      jSONReaderScanner0.integerValue();
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanInt('n');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StringReader stringReader0 = new StringReader("12Hwt(e<");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("12Hwt(e<");
      stringReader0.ready();
      stringReader0.reset();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      stringReader0.read(charBuffer0);
      jSONReaderScanner0.scanLong('.');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner1.scanUUID('a');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('_');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match _ - 1, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("%*mf.]SY7#}z");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanUUID('+');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StringReader stringReader0 = new StringReader("true");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDate(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("12Hwt(efV");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONLexerBase.isWhitespace('^');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed.str", '^');
      char[] charArray0 = new char[1];
      char[] charArray1 = new char[7];
      charArray1[0] = '^';
      charArray1[1] = '^';
      charArray1[2] = '^';
      charArray1[3] = '^';
      charArray1[4] = '^';
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      jSONReaderScanner0.scanStringArray(set0, '^');
      charArray1[5] = ' ';
      charArray1[6] = '^';
      jSONReaderScanner0.scanFieldString(charArray1);
      charArray0[0] = '^';
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("set");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      int int0 = JSONLexer.END;
      jSONReaderScanner0.scanUUID('z');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fse");
      jSONReaderScanner0.scanBoolean('q');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\":\"");
      jSONReaderScanner0.putChar('A');
      char char0 = 'C';
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(0, "\":\"", 0, (-779), (-3612), 13, (-3612), 34, 34, (-779), (-779), 34, 19);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start day of week 3612
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = 484;
      char[] charArray0 = new char[1];
      charArray0[0] = 'n';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 484, 484);
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-2));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("@I5X", 6);
      char[] charArray0 = new char[6];
      jSONScanner0.scanFieldBigInteger(charArray0);
      charArray0[0] = 'o';
      charArray0[1] = '&';
      charArray0[2] = '\"';
      charArray0[3] = 'p';
      charArray0[4] = 'b';
      charArray0[5] = 'g';
      SymbolTable symbolTable0 = new SymbolTable(96);
      jSONScanner0.scanSymbolWithSeperator(symbolTable0, '9');
      jSONScanner0.scanFieldBoolean(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undefined");
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.close();
      assertEquals(23, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StringReader stringReader0 = new StringReader("fase");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("4+qxLMLj}2>");
      boolean boolean0 = jSONReaderScanner0.scanBoolean('\u0084');
      assertFalse(boolean0);
      
      int int0 = jSONReaderScanner0.scanInt('v');
      assertEquals(4, int0);
      
      jSONReaderScanner0.scanUUID('\u0084');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1:Jwt(e<x");
      char char0 = '9';
      char char1 = 'G';
      jSONReaderScanner0.scanString('G');
      jSONReaderScanner0.scanDate('9');
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set");
      jSONReaderScanner0.scanUUID('@');
      jSONReaderScanner0.scanInt('5');
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      HashSet<Locale> hashSet0 = new HashSet<Locale>();
      Locale.lookup(arrayList0, hashSet0);
      jSONReaderScanner0.setLocale((Locale) null);
      jSONReaderScanner0.nextToken(0);
      assertEquals(21, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("x Rc");
      Locale locale0 = new Locale("x Rc", "m?txvE");
      jSONReaderScanner0.setLocale(locale0);
      jSONReaderScanner0.scanDecimal(';');
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken((-642));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state.  
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"O4p");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      stringReader0.reset();
      jSONReaderScanner0.scanFloat('3');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("- ");
      char[] charArray0 = new char[4];
      charArray0[0] = 'F';
      charArray0[1] = 'S';
      charArray0[2] = '_';
      charArray0[3] = 'd';
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.scanDecimal('l');
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanBoolean('G');
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ngq");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDecimal('S');
      jSONReaderScanner0.scanSymbolWithSeperator((SymbolTable) null, 'i');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1:Jwt(e<x");
      BigDecimal bigDecimal0 = new BigDecimal(0);
      jSONReaderScanner0.bytesValue();
      boolean boolean0 = jSONReaderScanner0.isEnabled((-654));
      assertTrue(boolean0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ngq");
      jSONReaderScanner0.scanUUID('S');
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.scanDecimal('S');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = "fase";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fase");
      jSONReaderScanner0.scanBoolean('q');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set");
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("w");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("m8");
      StringReader stringReader0 = new StringReader("m8");
      stringReader0.reset();
      jSONReaderScanner1.nextToken(16);
      assertEquals('8', jSONReaderScanner1.getCurrent());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        JSONLexerBase.readString((char[]) null, (-2200));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0Sg");
      jSONReaderScanner0.scanNumber();
      char[] charArray0 = new char[7];
      charArray0[0] = 'S';
      charArray0[1] = 'S';
      charArray0[2] = 'S';
      charArray0[3] = '.';
      charArray0[4] = 'S';
      charArray0[5] = 'S';
      charArray0[6] = 'S';
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.scanDecimal('S');
      jSONReaderScanner0.floatValue();
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" Rc");
      jSONReaderScanner0.tokenName();
      char[] charArray0 = new char[4];
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.scanFieldDouble(charArray0);
      charArray0[0] = '/';
      charArray0[1] = 'J';
      charArray0[2] = ',';
      charArray0[3] = '&';
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.scanInt('&');
      jSONReaderScanner0.nextToken(26);
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StringReader stringReader0 = new StringReader("true");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("true", 0);
      jSONReaderScanner1.scanDate('a');
      jSONReaderScanner0.scanString('a');
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanFieldLong((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1:Jwt(e<x");
      jSONReaderScanner0.putChar('&');
      char[] charArray0 = new char[7];
      charArray0[0] = '&';
      charArray0[1] = '&';
      charArray0[2] = '&';
      charArray0[3] = '&';
      charArray0[4] = '&';
      jSONReaderScanner0.scanLong('&');
      charArray0[5] = '&';
      charArray0[6] = '&';
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal('w');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0&g");
      jSONReaderScanner0.scanDate('@');
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = "true";
      StringReader stringReader0 = new StringReader("true");
      char char0 = 'd';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true", (-2702));
      jSONReaderScanner0.scanBoolean('d');
      Collection<String> collection0 = null;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ngq");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.tokenName();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringReader stringReader0 = new StringReader("true");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      stringReader0.reset();
      jSONReaderScanner0.scanFloat('3');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // scan true error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1:Jwt(e<x");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StringReader stringReader0 = new StringReader("12Hwt(e<");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      stringReader0.reset();
      jSONReaderScanner0.nextToken(1458);
      assertEquals(2, jSONReaderScanner0.token());
      
      float float0 = jSONReaderScanner0.floatValue();
      assertEquals(12.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("12Mwt3m(e<");
      jSONScanner0.bytesValue();
      jSONScanner0.scanNumber();
      jSONScanner0.scanDate('h');
      int int0 = jSONScanner0.intValue();
      assertEquals('M', jSONScanner0.getCurrent());
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StringReader stringReader0 = new StringReader("xKGO");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("xKGO");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(627);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. K
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1:Jwt(e<x");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.scanFloat('4');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldBigInteger((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StringReader stringReader0 = new StringReader("true");
      stringReader0.skip((-48L));
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.nextToken();
      stringReader0.reset();
      jSONReaderScanner0.intValue();
      Feature feature0 = Feature.SortFeidFastMatch;
      jSONReaderScanner0.config(feature0, true);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"m|u");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      stringReader0.reset();
      jSONReaderScanner0.nextToken(12);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("12Hwt(efV");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDate(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1:Jwt(e<x");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.isRef();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal('&');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undefined");
      jSONReaderScanner0.scanDate('@');
      jSONReaderScanner0.nextToken(4096);
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0Sg");
      StringReader stringReader0 = new StringReader("0Sg");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0);
      stringReader0.reset();
      jSONReaderScanner0.nextToken(12);
      assertEquals(2, jSONReaderScanner0.token());
      
      jSONReaderScanner0.floatValue();
      assertEquals(0, jSONReaderScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StringReader stringReader0 = new StringReader("i``");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("i``");
      jSONReaderScanner0.scanDate('a');
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("<r@NOvJuzmi|");
      char char0 = '&';
      jSONReaderScanner0.scanDecimal('&');
      char char1 = '+';
      jSONReaderScanner0.scanFloat('+');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'E';
      charArray0[1] = '&';
      charArray0[2] = 'f';
      charArray0[3] = '?';
      charArray0[4] = '=';
      charArray0[5] = 'K';
      charArray0[6] = '?';
      charArray0[7] = 'w';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 70);
      jSONReaderScanner0.scanNumber();
      assertEquals(3, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(":Jwt(e<x");
      jSONReaderScanner0.scanDouble('i');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldFloatArray2((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("12Hwt(e<");
      jSONReaderScanner0.scanInt('2');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      float float0 = jSONReaderScanner0.scanFloat('Z');
      assertEquals(12.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1:Jwt(e<x");
      jSONReaderScanner0.scanInt('q');
      jSONReaderScanner0.nextToken(1);
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StringReader stringReader0 = new StringReader("true");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.scanTrue();
      StringReader stringReader1 = new StringReader("true");
      char[] charArray0 = new char[6];
      charArray0[0] = '\'';
      charArray0[1] = '?';
      charArray0[2] = 'W';
      charArray0[3] = '@';
      charArray0[4] = 'W';
      charArray0[5] = 'i';
      jSONReaderScanner0.scanFieldInt(charArray0);
      stringReader1.reset();
      char[] charArray1 = new char[0];
      int int0 = JSONLexerBase.INT_MULTMIN_RADIX_TEN;
      jSONReaderScanner0.nextToken(2);
      jSONReaderScanner0.tokenName();
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1:Jwt(e<x");
      jSONReaderScanner0.nextToken(1563);
      jSONReaderScanner0.scanDouble('Y');
      jSONReaderScanner0.longValue();
      boolean boolean0 = jSONReaderScanner0.scanBoolean('Y');
      assertEquals(2, jSONReaderScanner0.token());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("12Hwt(e<");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      float float0 = jSONReaderScanner0.scanFloat('Z');
      assertEquals(12.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("iL|,^'^");
      jSONReaderScanner0.scanInt('t');
      jSONReaderScanner0.nextToken((-2466));
      SymbolTable symbolTable0 = new SymbolTable(15);
      jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
      assertEquals('|', jSONReaderScanner0.getCurrent());
      
      char[] charArray0 = new char[7];
      charArray0[0] = 't';
      charArray0[1] = 't';
      charArray0[2] = 't';
      charArray0[3] = ';';
      charArray0[4] = 't';
      charArray0[5] = 't';
      charArray0[6] = 't';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, (-1));
      jSONScanner0.scanISO8601DateIfMatch(true);
      assertEquals((-1), jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0Sg");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("0Sg");
      jSONReaderScanner1.scanInt('t');
      jSONReaderScanner0.nextToken((-1));
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("12Hwt(e<");
      jSONReaderScanner0.scanDate('@');
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ngq");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ngq");
      SymbolTable symbolTable0 = new SymbolTable(102);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ngq");
      Locale locale0 = Locale.KOREAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.scanStringArray(set0, 'U');
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("12Hwt(e<");
      double double0 = jSONReaderScanner0.scanDouble('h');
      assertEquals(12.0, double0, 0.01);
      
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(0L, long0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(":Jwt(e<x");
      jSONReaderScanner0.nextTokenWithColon();
      double double0 = jSONReaderScanner0.scanDouble('i');
      assertEquals('w', jSONReaderScanner0.getCurrent());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<String> class0 = String.class;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("m", 34);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray((char[]) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ngq");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ngq");
      jSONReaderScanner0.scanDouble('O');
      jSONReaderScanner0.scanInt('O');
      jSONReaderScanner0.next();
      jSONReaderScanner0.nextToken((-1163));
      jSONReaderScanner0.bytesValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted((SymbolTable) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<r@NOvJuzmi|");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.close();
      char[] charArray0 = new char[4];
      charArray0[0] = 'G';
      charArray0[1] = 'j';
      charArray0[2] = 'M';
      charArray0[3] = 'w';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldInt(charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ru");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ru");
      double double0 = jSONReaderScanner0.scanDouble('\\');
      assertEquals(0.0, double0, 0.01);
      
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      Class<String> class0 = String.class;
      SymbolTable symbolTable0 = new SymbolTable(114);
      jSONReaderScanner0.scanEnum(class0, symbolTable0, '\\');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StringReader stringReader0 = new StringReader("true");
      stringReader0.reset();
      stringReader0.reset();
      char[] charArray0 = new char[3];
      charArray0[1] = 'f';
      charArray0[2] = '|';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 14);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken((-1418));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringReader stringReader0 = new StringReader("I}jY<fg{P:}J");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("I}jY<fg{P:}J");
      jSONReaderScanner0.nextToken(4);
      stringReader0.reset();
      jSONReaderScanner0.nextToken(159);
      assertEquals('j', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StringReader stringReader0 = new StringReader("i``");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("hashCode");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.nextToken(20);
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringReader stringReader0 = new StringReader("true");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, (-1580));
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanFloat('s');
      jSONReaderScanner0.scanTrue();
      assertEquals((-1580), jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NV+U<]*XhV1B_ TS");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("]L~=f_hLeiK1Bn");
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      jSONReaderScanner0.scanFloat('H');
      BigDecimal bigDecimal0 = new BigDecimal((-1));
      jSONReaderScanner0.isEOF();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanBoolean('8');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">ngq");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0!z^\"pJX\"I");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal('@');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("12Hwt(e<");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal('j');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 96, 0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 9, 9);
      jSONReaderScanner1.scanDouble('8');
      jSONReaderScanner0.matchField(charArray0);
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      
      jSONReaderScanner1.bytesValue();
      assertEquals(9, jSONReaderScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StringReader stringReader0 = new StringReader("i``");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8hashCode");
      jSONReaderScanner0.scanString('^');
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDouble('1');
      jSONReaderScanner0.scanString('1');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StringReader stringReader0 = new StringReader("tre");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      StringReader stringReader1 = new StringReader("tre");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(2280);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("w");
      jSONReaderScanner0.nextToken();
      BigDecimal bigDecimal0 = new BigDecimal(0);
      jSONReaderScanner0.scanDate('y');
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.isBlankInput();
      assertEquals(1, jSONReaderScanner0.token());
      
      JSONScanner jSONScanner0 = new JSONScanner("", (-1));
      char[] charArray0 = new char[2];
      charArray0[0] = 'y';
      charArray0[1] = 'y';
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StringReader stringReader0 = new StringReader("/dfR4<!R/I xih!2");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("/dfR4<!R/I xih!2");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.sub_chars(443, 443);
      BigDecimal bigDecimal0 = new BigDecimal(37);
      BigDecimal bigDecimal1 = new BigDecimal(16);
      jSONReaderScanner0.setTimeZone((TimeZone) null);
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ngq");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDecimal('S');
      jSONReaderScanner0.scanUUID('S');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '-';
      charArray0[1] = '-';
      charArray0[2] = '-';
      charArray0[3] = '-';
      charArray0[4] = '-';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1405, (-2194));
      Feature feature0 = Feature.IgnoreAutoType;
      jSONReaderScanner0.config(feature0, false);
      jSONReaderScanner0.scanFloat('V');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.longValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Set");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      StringReader stringReader1 = new StringReader("Set");
      stringReader1.reset();
      jSONReaderScanner0.nextToken(2);
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StringReader stringReader0 = new StringReader("new");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.scanNullOrNew();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0, 0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      jSONReaderScanner1.scanDecimal('6');
      jSONReaderScanner0.scanUUID(' ');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0Sg");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("0Sg");
      jSONReaderScanner0.scanFloat('O');
      BigDecimal bigDecimal0 = new BigDecimal(120);
      assertEquals((byte)120, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NV+U<]*XhV1B_ TS");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.nextToken((-3424));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ngq");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0!z^\"pJ,\"Ia");
      double double0 = jSONReaderScanner0.scanDouble('R');
      assertEquals(0.0, double0, 0.01);
      
      jSONReaderScanner0.scanString('#');
      float float0 = jSONReaderScanner0.scanFloat('R');
      assertEquals(0.0F, float0, 0.01F);
      
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanEnum(class0, (SymbolTable) null, 'e');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ngq");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ngq");
      jSONReaderScanner0.scanFloat('K');
      jSONReaderScanner0.scanString('B');
      jSONReaderScanner0.indexOf('B', 120);
      SymbolTable symbolTable0 = new SymbolTable(120);
      jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<9B");
      stringReader0.read();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("<9B");
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("'aefY}E*U?Uh6j/g");
      // Undeclared exception!
      try { 
        jSONReaderScanner2.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StringReader stringReader0 = new StringReader("true");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(":f,");
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StringReader stringReader0 = new StringReader("TreeSet");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info : ");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanString('v');
      assertEquals(16, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0ng");
      jSONReaderScanner0.putChar('^');
      jSONReaderScanner0.scanDate('v');
      jSONReaderScanner0.nextToken();
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      jSONReaderScanner0.bytesValue();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(619, "0ng");
      jSONReaderScanner0.setTimeZone(simpleTimeZone0);
      assertEquals('n', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '#';
      charArray0[1] = '9';
      charArray0[2] = 'f';
      charArray0[3] = 'h';
      charArray0[4] = '0';
      charArray0[5] = 'A';
      charArray0[6] = 'b';
      charArray0[7] = '~';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2737, 2737);
      jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("r", 1428);
      jSONScanner0.eofPos = 1428;
      jSONScanner0.scanISO8601DateIfMatch();
      jSONScanner0.info();
      assertEquals(1428, jSONScanner0.getFeatures());
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'F';
      charArray0[1] = 'b';
      charArray0[2] = '1';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 0);
      jSONReaderScanner0.charArrayCompare(charArray0);
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{o!");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("{o!");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanString('\u0019');
      assertEquals('o', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StringReader stringReader0 = new StringReader("true");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1:Jwt(e<x");
      SymbolTable symbolTable0 = new SymbolTable(57);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0, 'U');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StringReader stringReader0 = new StringReader("+ m\"N5oI7A\"YzzyKDc");
      stringReader0.read();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("+ m\"N5oI7A\"YzzyKDc", 43);
      jSONReaderScanner0.scanDate(']');
      jSONReaderScanner0.nextToken();
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ngq");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, (-347));
      char[] charArray0 = new char[0];
      JSONLexerBase.readString(charArray0, 0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      stringReader0.read(charBuffer0);
      jSONReaderScanner0.putChar('C');
      jSONReaderScanner0.integerValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<9B");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" - ");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanIdent();
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ngq");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ngq");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner1.ch = '(';
      jSONReaderScanner1.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner1.nextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '+';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1143, 4041);
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.nextTokenWithChar('+');
      assertEquals(20, jSONReaderScanner0.token());
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) jSONReaderScanner0;
      objectArray0[1] = (Object) "AO/f4^4:zn<zm";
      objectArray0[2] = (Object) "AO/f4^4:zn<zm";
      objectArray0[3] = (Object) '+';
      objectArray0[4] = (Object) '+';
      objectArray0[5] = (Object) "AO/f4^4:zn<zm";
      objectArray0[6] = (Object) '+';
      objectArray0[7] = (Object) "AO/f4^4:zn<zm";
      objectArray0[8] = (Object) jSONReaderScanner0;
      jSONReaderScanner0.lexError("AO/f4^4:zn<zm", objectArray0);
      jSONReaderScanner0.scanDouble('+');
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.bytesValue();
      assertEquals(4041, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ngq");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ngq");
      Class<String> class0 = String.class;
      jSONReaderScanner0.scanEnum(class0, (SymbolTable) null, 'w');
      char[] charArray0 = new char[3];
      charArray0[0] = '!';
      charArray0[1] = '/';
      charArray0[2] = 'f';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StringReader stringReader0 = new StringReader("tuu");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("0Biy\"8&GTSx");
      jSONReaderScanner1.scanLong('\\');
      jSONReaderScanner1.nextToken();
      char[] charArray0 = new char[4];
      charArray0[0] = '#';
      charArray0[1] = 'X';
      charArray0[2] = '\\';
      charArray0[3] = '\\';
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.isBlankInput();
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ckji*j@G");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBigInteger(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      char[] charArray0 = new char[2];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("58&,J$:`LX0H5/3: ");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 4, 9);
      jSONReaderScanner1.stringVal();
      jSONReaderScanner1.scanDouble('*');
      jSONReaderScanner1.longValue();
      jSONReaderScanner0.scanNumber();
      assertEquals('&', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w");
      char[] charArray0 = new char[9];
      charArray0[0] = '|';
      charArray0[1] = '.';
      charArray0[2] = '|';
      charArray0[3] = 'R';
      charArray0[4] = '|';
      charArray0[5] = '|';
      charArray0[6] = '|';
      charArray0[7] = '|';
      charArray0[8] = '|';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 479, 479);
      jSONReaderScanner0.setToken(479);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StringReader stringReader0 = new StringReader("true");
      char[] charArray0 = new char[1];
      charArray0[0] = '6';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 8192, 123);
      double double0 = jSONReaderScanner0.scanDouble('6');
      assertEquals(6.0, double0, 0.01);
      
      jSONReaderScanner0.matchField(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0, 41);
      jSONReaderScanner1.bytesValue();
      assertEquals(41, jSONReaderScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|\"2R");
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      char[] charArray0 = new char[0];
      SymbolTable symbolTable0 = new SymbolTable(1352);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 48, symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.scanFloat('Z');
      String string0 = jSONReaderScanner0.scanString('Z');
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(string0);
      assertFalse(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("]\"}|7mLse&");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.token = 40;
      jSONReaderScanner0.longValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString('D');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StringReader stringReader0 = new StringReader("i``");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("i``");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDouble('3');
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|\"2R");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      stringReader0.reset();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StringReader stringReader0 = new StringReader("i``");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("i``");
      jSONReaderScanner0.scanString('i');
      char[] charArray0 = new char[1];
      charArray0[0] = 'i';
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      Class<Object> class0 = Object.class;
      SymbolTable symbolTable0 = new SymbolTable(606);
      jSONReaderScanner0.scanEnum(class0, symbolTable0, 'i');
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      StringReader stringReader0 = new StringReader("true");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      jSONReaderScanner0.scanIdent();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<9B");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed string : ");
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("]\"}|7mLse&");
      jSONReaderScanner0.nextToken();
      char char0 = 'P';
      jSONReaderScanner0.scanDecimal('P');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \", info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      StringReader stringReader0 = new StringReader("true");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1:Jwt(e<x");
      jSONReaderScanner0.scanBoolean('<');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '-';
      charArray0[1] = '-';
      charArray0[2] = '-';
      charArray0[3] = '-';
      charArray0[4] = '-';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1405, (-2194));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.longValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      StringReader stringReader0 = new StringReader("new");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      stringReader0.ready();
      stringReader0.reset();
      jSONReaderScanner0.scanLong('C');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(14);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // scan new error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("w");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDouble('u');
      jSONReaderScanner0.scanString('6');
      assertFalse(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 110);
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(0L, long0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner1.scanNumber();
      assertEquals(989, jSONReaderScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0ng");
      jSONReaderScanner0.nextToken(49);
      jSONReaderScanner0.scanDouble('-');
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("w");
      jSONReaderScanner0.nextToken();
      double double0 = jSONReaderScanner0.scanDouble('-');
      assertEquals(0.0, double0, 0.01);
      
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(0L, long0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      jSONReaderScanner0.token();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0ng");
      jSONReaderScanner0.scanDate('v');
      jSONReaderScanner0.nextToken();
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"", 1254);
      jSONScanner0.scanInt('.');
      char[] charArray0 = new char[5];
      charArray0[0] = '.';
      charArray0[1] = '\'';
      charArray0[2] = '.';
      charArray0[3] = '.';
      charArray0[4] = '~';
      jSONScanner0.matchField2(charArray0);
      jSONScanner0.scanFieldDecimal(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|\"2R");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      stringReader0.reset();
      jSONReaderScanner0.nextToken(12);
      assertEquals('\"', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      char[] charArray0 = new char[6];
      charArray0[0] = '[';
      charArray0[1] = 'r';
      charArray0[2] = '?';
      locale0.getExtensionKeys();
      charArray0[3] = '3';
      charArray0[1] = '>';
      charArray0[5] = 'Y';
      int int0 = 2428;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2428);
      jSONReaderScanner0.setLocale(locale0);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanDouble('n');
      jSONReaderScanner0.intValue();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("undefined");
      // Undeclared exception!
      try { 
        jSONReaderScanner1.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ngq");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0!z^\"pJ,\"Ia");
      double double0 = jSONReaderScanner0.scanDouble('R');
      assertEquals(0.0, double0, 0.01);
      
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ngq");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ngq");
      jSONReaderScanner0.scanDouble('O');
      jSONReaderScanner0.longValue();
      char[] charArray0 = new char[8];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      charArray0[2] = 'O';
      charArray0[3] = 'O';
      charArray0[4] = 'O';
      jSONReaderScanner0.scanDate('O');
      charArray0[5] = 'O';
      charArray0[6] = 'O';
      charArray0[7] = 'O';
      jSONReaderScanner0.scanFieldFloat(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("I");
      char[] charArray0 = new char[9];
      charArray0[0] = ' ';
      charArray0[1] = '^';
      charArray0[2] = 'h';
      charArray0[3] = '&';
      charArray0[4] = 'Z';
      charArray0[5] = ',';
      charArray0[6] = 't';
      charArray0[7] = 'U';
      charArray0[8] = '&';
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      jSONReaderScanner0.bp = (-544);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("D=gi%zj%K. %yXx[|", (-584));
      jSONReaderScanner0.setToken(116);
      char[] charArray0 = new char[7];
      charArray0[0] = '6';
      charArray0[1] = '6';
      charArray0[2] = '6';
      charArray0[3] = '6';
      charArray0[4] = '6';
      charArray0[5] = '6';
      charArray0[6] = '6';
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.putChar('6');
      jSONReaderScanner0.integerValue();
      jSONReaderScanner0.nextToken();
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("+ m\"N5oI7A\"YzzyKDc");
      StringReader stringReader0 = new StringReader("K4");
      jSONReaderScanner0.nextToken(4);
      char[] charArray0 = new char[3];
      charArray0[0] = '8';
      charArray0[1] = '7';
      charArray0[2] = '-';
      SymbolTable symbolTable0 = new SymbolTable(44);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 20, symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      StringReader stringReader0 = new StringReader("tru");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      char char0 = 'w';
      jSONReaderScanner0.lexError("tru", (Object[]) null);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('w');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match w - t, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\":\"");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.nextToken();
      assertEquals(4, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("]\"}|7mLse&");
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString('i');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      StringReader stringReader0 = new StringReader("i`");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("i`");
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.scanBoolean('.');
      jSONReaderScanner0.nextToken(11);
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      StringReader stringReader0 = new StringReader("true");
      char[] charArray0 = new char[8];
      charArray0[0] = 'L';
      charArray0[1] = 'V';
      charArray0[2] = '2';
      charArray0[3] = 'M';
      charArray0[4] = ')';
      charArray0[5] = 'm';
      charArray0[6] = '/';
      charArray0[7] = 'c';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 58);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ngq");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ngq");
      jSONReaderScanner0.scanDecimal('R');
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(0L, long0);
      
      jSONReaderScanner0.scanUUID('R');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ngq");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ngq");
      jSONReaderScanner0.scanDecimal('A');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      StringReader stringReader0 = new StringReader("i``");
      stringReader0.ready();
      stringReader0.read();
      char[] charArray0 = new char[12];
      charArray0[0] = 'I';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 105, (-215));
      jSONReaderScanner0.scanString('I');
      int int0 = JSONLexer.UNKNOWN;
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("w");
      Locale locale0 = Locale.FRANCE;
      jSONReaderScanner0.setLocale(locale0);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanDouble('A');
      jSONReaderScanner0.intValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("]\"}|7mLse&");
      jSONReaderScanner0.nextToken();
      long long0 = jSONReaderScanner0.longValue();
      assertEquals('\"', jSONReaderScanner0.getCurrent());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("EOF");
      jSONScanner0.scanNumber();
      jSONScanner0.tokenName();
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      StringReader stringReader0 = new StringReader("true");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      stringReader0.reset();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(12);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // scan true error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      StringReader stringReader0 = new StringReader("new");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      stringReader0.reset();
      char[] charArray0 = new char[4];
      charArray0[0] = 's';
      charArray0[1] = 'z';
      charArray0[2] = 'h';
      charArray0[3] = ']';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 14, (SymbolTable) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("+ m\"N5oI7A\"YzzyKDc");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.setToken(26);
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.putChar('6');
      jSONReaderScanner0.integerValue();
      jSONReaderScanner0.nextToken();
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      StringReader stringReader0 = new StringReader("+ m`N5oI7A\"YzmyKDc");
      int int0 = JSONLexer.END;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.nextToken((-3048));
      jSONReaderScanner0.scanBoolean('3');
      assertEquals(' ', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NV+U<]*XhV1B_ TS");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("]L~=f_hLeiK1Bn");
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.nextToken((-496));
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      StringReader stringReader0 = new StringReader("i``");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("hashCode");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.scanInt('F');
      jSONReaderScanner0.nextToken((-1));
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      StringReader stringReader0 = new StringReader("4");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ngq");
      jSONReaderScanner0.scanInt('o');
      char[] charArray0 = new char[6];
      charArray0[0] = 'o';
      charArray0[1] = 'q';
      charArray0[2] = 'o';
      charArray0[3] = 'o';
      charArray0[4] = 'o';
      charArray0[5] = 'o';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 224);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ngq");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ngq");
      jSONReaderScanner0.scanDouble('A');
      jSONReaderScanner0.intValue();
      SymbolTable symbolTable0 = new SymbolTable(41);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0, 'A');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      StringReader stringReader0 = new StringReader("tue");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("tue");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '(';
      charArray0[1] = 'G';
      charArray0[2] = '|';
      charArray0[3] = '-';
      charArray0[4] = '>';
      charArray0[5] = '9';
      charArray0[6] = '-';
      charArray0[7] = ';';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 10);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(">Xj");
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.nextToken(13);
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("+ m\"N5oI7A\"YzzyKDc");
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      timeZone0.clone();
      jSONReaderScanner0.setTimeZone(timeZone0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanString('*');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      StringReader stringReader0 = new StringReader("truc");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.intValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(1044);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      StringReader stringReader0 = new StringReader("truu");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ngq");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ngq");
      jSONReaderScanner0.scanDouble('A');
      jSONReaderScanner0.intValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("+ m\"N5oI7A\"YzzyKDc");
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      StringReader stringReader0 = new StringReader("]MLVrVsiDe8NgM^+r.");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      int int0 = JSONLexer.NOT_MATCH_NAME;
      jSONReaderScanner0.nextToken((-2));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.subString((-2), (-2));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("+ m\"N5oI7A\"YzzyKDc");
      jSONReaderScanner0.features = 13;
      jSONReaderScanner0.nextToken();
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      StringReader stringReader0 = new StringReader("i``");
      stringReader0.read();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      SymbolTable symbolTable0 = new SymbolTable(9);
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, 'A');
      jSONReaderScanner0.info();
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      StringReader stringReader0 = new StringReader(", info : ");
      StringReader stringReader1 = new StringReader(", info : ");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.nextToken(680);
      assertEquals(16, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      StringReader stringReader0 = new StringReader(":AlGz ");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      stringReader0.reset();
      jSONReaderScanner0.scanDouble(')');
      int int0 = 12;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldFloatArray((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      StringReader stringReader0 = new StringReader("true");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1:Jwt(e<x");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal('@');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<r@NOvJuzmi|");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      stringReader0.reset();
      jSONReaderScanner0.nextToken(12);
      assertEquals('r', jSONReaderScanner0.getCurrent());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("+ m\"N5oI7A\"YzzyKDc");
      jSONReaderScanner0.matchStat = 47;
      jSONReaderScanner0.nextToken(2);
      char[] charArray0 = null;
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((char[]) null, 47);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      StringReader stringReader0 = new StringReader("undefined");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undefined");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanString('E');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("+ m\"N5oI7A\"YzzyKDc");
      char[] charArray0 = new char[9];
      charArray0[1] = '*';
      charArray0[2] = '*';
      jSONReaderScanner0.intValue();
      charArray0[3] = '*';
      charArray0[4] = '*';
      charArray0[5] = '*';
      charArray0[6] = '*';
      charArray0[7] = '*';
      charArray0[8] = '*';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      jSONReaderScanner1.scanInt('*');
      jSONReaderScanner0.close();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'XUC^MKoL!C(8TJ?&V");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      stringReader0.reset();
      jSONReaderScanner0.nextToken(14);
      char[] charArray0 = new char[8];
      charArray0[0] = '';
      stringReader0.read(charArray0);
      charArray0[1] = '\"';
      charArray0[2] = '1';
      charArray0[3] = 'j';
      charArray0[4] = '<';
      charArray0[5] = 'a';
      charArray0[6] = 'F';
      charArray0[7] = '%';
      jSONReaderScanner0.scanFieldDate(charArray0);
      assertEquals('X', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      StringReader stringReader0 = new StringReader("+ m\"N5oI7A\"YzzyKDc");
      stringReader0.read();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.nextToken();
      assertEquals('\"', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      StringReader stringReader0 = new StringReader("*Qg0JtjcB/rG");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      Locale locale0 = Locale.CANADA;
      jSONReaderScanner0.setLocale(locale0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldBigInteger((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      StringReader stringReader0 = new StringReader("new");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.scanString('C');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("toJSON error");
      jSONScanner0.scanDate('C');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      StringReader stringReader0 = new StringReader("true");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(0L, long0);
      
      jSONReaderScanner0.nextToken(4);
      jSONReaderScanner0.scanBoolean('a');
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      StringReader stringReader0 = new StringReader("new");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.scanNullOrNew();
      jSONReaderScanner0.scanInt('p');
      jSONReaderScanner0.nextToken((-2212));
      jSONReaderScanner0.bytesValue();
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      StringReader stringReader0 = new StringReader("new");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.nextToken((-2212));
      jSONReaderScanner0.bytesValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldFloat((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      StringReader stringReader0 = new StringReader("e");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("*~81");
      jSONReaderScanner0.nextToken(6);
      boolean boolean0 = jSONReaderScanner0.scanBoolean('i');
      assertEquals('~', jSONReaderScanner0.getCurrent());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      StringReader stringReader0 = new StringReader("i``");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.scanDecimal('j');
      char[] charArray0 = new char[3];
      HashSet<String> hashSet0 = new HashSet<String>();
      jSONReaderScanner0.scanStringArray(hashSet0, 'L');
      charArray0[0] = 'j';
      charArray0[1] = 'j';
      charArray0[2] = 'j';
      double double0 = jSONReaderScanner0.scanFieldDouble(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7&rZ(MGtIg");
      StringReader stringReader1 = new StringReader("new");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7&rZ(MGtIg");
      jSONReaderScanner0.setToken((-2924));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      StringReader stringReader0 = new StringReader("true");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.scanDecimal('K');
      jSONReaderScanner0.setToken(0);
      jSONReaderScanner0.nextToken(0);
      jSONReaderScanner0.skipWhitespace();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONReaderScanner0.arrayCopy(125, charArray0, 125, 125);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("+ m\"N5oI7A\"YzzyKDc");
      String string0 = jSONReaderScanner0.scanString('*');
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("TreeSet", 1308);
      char[] charArray0 = new char[7];
      charArray0[0] = 'K';
      charArray0[1] = 'M';
      charArray0[2] = 'A';
      charArray0[3] = 'w';
      charArray0[4] = 'a';
      charArray0[5] = '0';
      charArray0[6] = 'F';
      jSONScanner0.scanFieldDecimal(charArray0);
      boolean boolean0 = jSONScanner0.isEnabled(4811);
      assertEquals((-2), jSONScanner0.matchStat);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(":U:i6dP+O%#(3D;Nmw?");
      jSONScanner0.scanInt(']');
      jSONScanner0.nextToken(36);
      assertEquals('U', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("scan null error", (-899));
      char[] charArray0 = new char[6];
      charArray0[0] = ',';
      charArray0[1] = 'K';
      charArray0[2] = 'E';
      charArray0[3] = 'Z';
      charArray0[4] = 'L';
      jSONReaderScanner0.scanLong('Z');
      charArray0[5] = 'z';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 46);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6");
      StringReader stringReader1 = new StringReader("6");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("6");
      char[] charArray0 = new char[5];
      charArray0[0] = '';
      charArray0[1] = 'R';
      charArray0[2] = 'l';
      charArray0[3] = 'K';
      charArray0[4] = '8';
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.nextToken();
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      StringReader stringReader0 = new StringReader("e");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("*~81");
      jSONReaderScanner0.nextToken(6);
      char[] charArray0 = new char[3];
      charArray0[0] = 'J';
      charArray0[1] = 'J';
      charArray0[2] = 'J';
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      StringReader stringReader0 = new StringReader("new");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.features = 1181;
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.nextToken(2);
      jSONReaderScanner0.bytesValue();
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      StringReader stringReader0 = new StringReader("new");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      PipedReader pipedReader0 = new PipedReader();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("new", 0);
      jSONReaderScanner1.nextToken();
      jSONReaderScanner0.scanType("com.alibaba.fastjson.JSON");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      StringReader stringReader0 = new StringReader("true");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1:Jwt(e<x");
      jSONReaderScanner0.subString(16, 16);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldUUID((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      StringReader stringReader0 = new StringReader("new");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0, 99);
      jSONReaderScanner1.scanDecimal('r');
      jSONReaderScanner0.setToken(555);
      assertEquals(555, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      StringReader stringReader0 = new StringReader("e");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("e");
      jSONReaderScanner0.scanLong('`');
      jSONReaderScanner0.nextToken(479);
      jSONReaderScanner0.scanBoolean('D');
      int int0 = jSONReaderScanner0.token();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      StringReader stringReader0 = new StringReader("new");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      CharBuffer.wrap((CharSequence) "new");
      StringReader stringReader1 = new StringReader("5");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader1, 10);
      jSONReaderScanner1.nextToken(833);
      char[] charArray0 = new char[5];
      charArray0[0] = 'S';
      charArray0[1] = 'g';
      charArray0[2] = 'f';
      charArray0[3] = '<';
      charArray0[4] = 'a';
      stringReader1.ready();
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.sub_chars(0, 833);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.nextToken();
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new", 12);
      char[] charArray0 = new char[1];
      charArray0[0] = '-';
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "error";
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      jSONReaderScanner0.lexError("error", objectArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      StringReader stringReader0 = new StringReader("new");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanFloat('j');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.read();
      char[] charArray0 = new char[5];
      charArray0[0] = ';';
      charArray0[1] = 'S';
      charArray0[2] = 'O';
      charArray0[3] = 'p';
      charArray0[4] = 'y';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 18, 18);
      jSONReaderScanner0.nextToken((-1));
      jSONReaderScanner0.bytesValue();
      assertEquals('S', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<r@NOvJuzmi|");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      stringReader0.reset();
      jSONReaderScanner0.nextToken(14);
      assertEquals('r', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      int int0 = 554;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TODO : ", 554);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("WriteNullBooleanAsFalse");
      char[] charArray0 = new char[4];
      jSONReaderScanner0.sp = 217;
      charArray0[0] = '8';
      jSONReaderScanner0.token = 1655;
      charArray0[1] = 'S';
      jSONReaderScanner0.isBlankInput();
      charArray0[2] = '-';
      charArray0[3] = '_';
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.charAt(732);
      jSONReaderScanner0.getFeatures();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. W
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      StringReader stringReader0 = new StringReader(")\"/(gf=Po3|<c2");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.nextToken(3562);
      assertEquals('\"', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      StringReader stringReader0 = new StringReader("true");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      char[] charArray0 = new char[4];
      charArray0[1] = '\u0000';
      charArray0[2] = '.';
      charArray0[3] = 'n';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 17, 44);
      jSONReaderScanner1.nextIdent();
      int int0 = jSONReaderScanner1.pos();
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      StringReader stringReader0 = new StringReader("true");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      jSONReaderScanner0.nextToken(2);
      jSONReaderScanner0.nextToken(17);
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XF2nM2zGOFX%$)z");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      stringReader0.skip(0);
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.newCollectionByType(class0);
      int int0 = 8;
      CharBuffer charBuffer0 = CharBuffer.allocate(8);
      stringReader0.read(charBuffer0);
      char char0 = 'e';
      jSONReaderScanner0.putChar('e');
      jSONReaderScanner0.integerValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // For input string: \"X\", 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      StringReader stringReader0 = new StringReader("qZo");
      JSONScanner jSONScanner0 = new JSONScanner("K\"s?5@M", 58);
      jSONScanner0.scanISO8601DateIfMatch();
      jSONScanner0.pos();
      jSONScanner0.scanUUID('l');
      Feature feature0 = Feature.DisableCircularReferenceDetect;
      boolean boolean0 = jSONScanner0.isEnabled(feature0);
      assertFalse(boolean0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(58, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed.str", 50);
      char[] charArray0 = new char[4];
      jSONScanner0.scanFieldFloatArray2(charArray0);
      charArray0[0] = 'c';
      charArray0[1] = 'T';
      charArray0[2] = 'o';
      charArray0[3] = '6';
      jSONScanner0.scanFieldString(charArray0);
      jSONScanner0.skipWhitespace();
      Feature feature0 = Feature.AllowArbitraryCommas;
      jSONScanner0.config(feature0, true);
      // Undeclared exception!
      try { 
        jSONScanner0.subString(50, 50);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{7SKU^|");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.nextToken(15);
      jSONReaderScanner0.scanBoolean('Z');
      assertEquals('7', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m_");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0<d7");
      jSONReaderScanner0.nextToken(2);
      JSONScanner jSONScanner0 = new JSONScanner("false", (-363));
      // Undeclared exception!
      try { 
        jSONScanner0.setTime(']', ']', ']', ']', 'F', 'f');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{7SKU^|");
      char[] charArray0 = new char[5];
      charArray0[0] = '(';
      charArray0[1] = ',';
      charArray0[2] = 't';
      charArray0[3] = '\\';
      charArray0[4] = ')';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 512);
      jSONReaderScanner0.nextToken((-1763));
      jSONReaderScanner0.scanDecimal('\\');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      StringReader stringReader0 = new StringReader("true");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      jSONReaderScanner1.scanBoolean('|');
      jSONReaderScanner1.scanFloat(')');
      assertFalse(jSONReaderScanner1.isEOF());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TODO : ");
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.nextToken(1133);
      assertEquals(' ', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("MapSortField", 123);
      Class<String> class0 = String.class;
      SymbolTable symbolTable0 = new SymbolTable(1237);
      jSONReaderScanner0.scanEnum(class0, symbolTable0, 's');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      boolean boolean0 = JSONLexerBase.isWhitespace('+');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      JSONScanner jSONScanner0 = new JSONScanner("@Wrl4J", (-2909));
      jSONScanner0.scanISO8601DateIfMatch();
      jSONScanner0.pos();
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanUUID('3');
      assertEquals(0, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      StringReader stringReader0 = new StringReader("new");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      stringReader0.reset();
      jSONReaderScanner0.calendar = null;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken((-29));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // scan new error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      StringReader stringReader0 = new StringReader("fastjson.parser.autoTypeSupport");
      stringReader0.ready();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'K';
      charArray0[1] = 'j';
      charArray0[2] = '+';
      charArray0[3] = '&';
      charArray0[4] = ':';
      charArray0[5] = 'K';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer.wrap((CharSequence) charBuffer0);
      stringReader0.read(charBuffer0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '|';
      charArray0[1] = 'p';
      charArray0[2] = '`';
      charArray0[3] = 'a';
      charArray0[4] = 'z';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 10, 10);
      SymbolTable symbolTable0 = new SymbolTable(2934);
      char char0 = '!';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0, '!');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      StringReader stringReader0 = new StringReader("true");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      float float0 = jSONReaderScanner0.scanFloat('A');
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      StringReader stringReader0 = new StringReader("true");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.nextToken(15);
      jSONReaderScanner0.nextToken(15);
      char char0 = jSONReaderScanner0.getCurrent();
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals('\u001A', char0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("e/.0;w8{mFGo_kR");
      char[] charArray0 = new char[9];
      charArray0[0] = '';
      charArray0[1] = '3';
      charArray0[2] = '^';
      charArray0[3] = 'm';
      charArray0[4] = '}';
      charArray0[5] = 'Q';
      charArray0[6] = 'S';
      charArray0[7] = 'R';
      charArray0[8] = 'Z';
      jSONScanner0.scanFieldFloatArray(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldBoolean((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{7SKU^|");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.nextToken(9);
      assertEquals('7', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m_");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(12, "com.alibaba.fastjson.parser.JSONLexerBase");
      Locale locale0 = Locale.KOREA;
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      jSONReaderScanner0.calendar = calendar0;
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.newCollectionByType(class0);
      jSONReaderScanner0.putChar('Q');
      char[] charArray0 = new char[5];
      charArray0[0] = 'Q';
      charArray0[1] = 'Q';
      charArray0[2] = '';
      charArray0[3] = 'Q';
      charArray0[4] = 'Q';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 59, 1993);
      jSONReaderScanner1.nextToken(1783);
      assertEquals(1, jSONReaderScanner1.token());
      
      int int0 = jSONReaderScanner0.matchStat();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m_");
      char[] charArray0 = new char[2];
      charArray0[0] = 'j';
      charArray0[1] = '_';
      stringReader0.read(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      stringReader0.markSupported();
      jSONReaderScanner0.nextToken(19);
      jSONReaderScanner0.scanBoolean('m');
      jSONReaderScanner0.info();
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m_");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("n5o", 0);
      // Undeclared exception!
      try { 
        jSONReaderScanner1.nextToken(103);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSONLexerBase.isWhitespace('9');
      StringReader stringReader0 = new StringReader("0J.eB72F&");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 2335);
      stringReader0.read();
      jSONReaderScanner0.nextToken(24);
      jSONReaderScanner0.scanDecimal('9');
      char[] charArray0 = new char[5];
      charArray0[0] = '9';
      charArray0[1] = '9';
      charArray0[2] = '9';
      jSONReaderScanner0.numberString();
      charArray0[3] = '9';
      charArray0[4] = '9';
      jSONReaderScanner0.charArrayCompare(charArray0);
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.nextToken(15);
      jSONReaderScanner0.putChar('4');
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      StringReader stringReader0 = new StringReader("e");
      char[] charArray0 = new char[6];
      charArray0[0] = 'w';
      charArray0[1] = '[';
      charArray0[2] = 'm';
      charArray0[3] = '/';
      charArray0[4] = '\'';
      charArray0[5] = 'S';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 159, 84);
      jSONReaderScanner0.nextToken(127);
      jSONReaderScanner0.scanStringArray((Collection<String>) null, '9');
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m_");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.nextToken(15);
      assertEquals('_', jSONReaderScanner0.getCurrent());
      
      jSONReaderScanner0.scanBoolean('9');
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("jPRa]o5HhS>Nr0Gpl", 40);
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.nextToken(2092);
      jSONReaderScanner0.stringDefaultValue();
      char[] charArray0 = new char[8];
      charArray0[0] = '(';
      charArray0[1] = 'x';
      charArray0[2] = 'j';
      charArray0[3] = '>';
      charArray0[4] = '3';
      charArray0[5] = 'D';
      charArray0[6] = 'n';
      charArray0[7] = '$';
      boolean boolean0 = JSONScanner.charArrayCompare("utf8 decode error, ", 40, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      char char0 = '9';
      JSONLexerBase.isWhitespace('9');
      StringReader stringReader0 = new StringReader("0J.eB72F&");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldIntArray((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m_");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.nextToken(15);
      boolean boolean0 = JSONLexerBase.isWhitespace('A');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '/';
      charArray0[1] = '}';
      charArray0[2] = '\'';
      charArray0[3] = '6';
      JSONScanner.checkDate('b', '\'', '6', 'F', '/', '}', 86, 86);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.indexOf('b', 119);
      jSONReaderScanner0.setToken(0);
      Locale locale0 = Locale.ITALIAN;
      jSONReaderScanner0.setLocale(locale0);
      int int0 = (-730);
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.scanFieldLong(charArray0);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null, (-730));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m_");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.nextToken((-1430));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null, '9');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      StringReader stringReader0 = new StringReader("true");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.putChar('!');
      jSONReaderScanner0.scanInt('4');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0, 634);
      // Undeclared exception!
      try { 
        jSONReaderScanner1.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      StringReader stringReader0 = new StringReader("new");
      char[] charArray0 = new char[6];
      charArray0[0] = '-';
      charArray0[1] = '>';
      charArray0[2] = 'o';
      charArray0[3] = 'r';
      charArray0[4] = '\'';
      charArray0[5] = '';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2);
      jSONReaderScanner0.nextToken(2);
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("m_");
      jSONReaderScanner0.getTimeZone();
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.newCollectionByType(class0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      StringReader stringReader0 = new StringReader("true");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      SymbolTable symbolTable0 = new SymbolTable(16);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray((char[]) null, 20, symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m_");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("\":\"");
      jSONReaderScanner1.nextToken(1119);
      assertEquals('\u001A', jSONReaderScanner1.getCurrent());
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5IMO9H#_Hu_W");
      char[] charArray0 = new char[2];
      charArray0[0] = 'r';
      stringReader0.read(charArray0);
      charArray0[1] = '5';
      stringReader0.read(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.nextToken(10);
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      StringReader stringReader0 = new StringReader("new");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.bp = 19;
      jSONReaderScanner0.nextToken(18);
      assertEquals(18, jSONReaderScanner0.token());
      
      jSONReaderScanner1.scanDecimal('E');
      assertEquals(989, jSONReaderScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m_");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      float float0 = jSONReaderScanner0.scanFloat('1');
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      StringReader stringReader0 = new StringReader("true");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      JSONLexerBase.isWhitespace('9');
      StringReader stringReader0 = new StringReader("0J.eB72F&");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('9');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match 9 - 0, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      StringReader stringReader0 = new StringReader("true");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      char[] charArray0 = new char[23];
      charArray0[0] = '<';
      charArray0[1] = 'I';
      jSONReaderScanner0.close();
      charArray0[6] = 'l';
      charArray0[3] = 'h';
      charArray0[4] = '4';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDecimal(charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      StringReader stringReader0 = new StringReader("e");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.nextToken(18);
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      StringReader stringReader0 = new StringReader("true");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 270);
      char[] charArray0 = new char[3];
      charArray0[0] = '7';
      charArray0[1] = '.';
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.scanDouble('\u0000');
      jSONReaderScanner0.scanFieldString(charArray0);
      SymbolTable symbolTable0 = new SymbolTable(24180);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      StringReader stringReader0 = new StringReader("new");
      char[] charArray0 = new char[5];
      charArray0[0] = 'C';
      charArray0[1] = ':';
      charArray0[2] = 'I';
      charArray0[3] = ',';
      charArray0[4] = '!';
      stringReader0.read(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.scanFloat(':');
      jSONReaderScanner0.nextToken((-1));
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" is not a primitive type");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.nextToken(10);
      assertEquals('s', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      StringReader stringReader0 = new StringReader("true");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.nextToken(2);
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      
      jSONReaderScanner0.getCalendar();
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      StringReader stringReader0 = new StringReader("new");
      int int0 = 1836;
      CharBuffer charBuffer0 = CharBuffer.allocate(1836);
      stringReader0.read(charBuffer0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      Feature feature0 = Feature.DisableCircularReferenceDetect;
      jSONReaderScanner0.config(feature0, false);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m_");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2((char[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m_");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.scanDecimal('8');
      jSONReaderScanner0.nextToken(3);
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      StringReader stringReader0 = new StringReader("false");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.nextToken((-675));
      char char0 = ' ';
      JSONScanner.checkDate(' ', ' ', ' ', ' ', '%', ' ', (-675), (-675));
      char[] charArray0 = new char[4];
      charArray0[0] = ' ';
      charArray0[1] = '%';
      charArray0[2] = '%';
      charArray0[3] = ' ';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 552);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("~5");
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. ~
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("02o&/h%y");
      Class<Object> class0 = Object.class;
      Feature feature0 = Feature.DisableCircularReferenceDetect;
      jSONScanner0.intValue();
      char[] charArray0 = new char[3];
      charArray0[0] = '|';
      charArray0[1] = 'I';
      int int0 = 119;
      jSONScanner0.matchStat = 119;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONScanner0.scanStringArray(linkedList0, '=');
      charArray0[2] = 'g';
      jSONScanner0.sbuf = charArray0;
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.nextToken(2048);
      jSONReaderScanner0.info();
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m_");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'X';
      charArray0[1] = '[';
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.nextToken(2);
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m_");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.parser.JSONToken", (-1334));
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      float float0 = jSONReaderScanner0.scanFloat('j');
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m_");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("r44Pc!`");
      jSONScanner0.nextToken(5);
      jSONScanner0.putChar('k');
      jSONScanner0.getLocale();
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m_");
      stringReader0.markSupported();
      stringReader0.markSupported();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.nextToken(2);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDecimal((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m_");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'p';
      charArray0[1] = 'Y';
      charArray0[2] = 'M';
      charArray0[3] = 'R';
      charArray0[4] = '9';
      charArray0[5] = '';
      charArray0[6] = 'A';
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.nextToken(9);
      assertEquals('_', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m_");
      stringReader0.markSupported();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.nextToken(6);
      assertEquals('_', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 96, 0);
      jSONReaderScanner0.putChar(' ');
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[0];
      jSONReaderScanner0.lexError("v25][F", objectArray0);
      jSONReaderScanner0.newCollectionByType(class0);
      jSONReaderScanner0.putChar('Q');
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\u0000\u0000\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      StringReader stringReader0 = new StringReader("new");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.nextToken(0);
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m_");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.nextToken(3);
      assertEquals('_', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m_");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.isEnabled(3043, 3043);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDouble((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m_");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.nextToken(10);
      assertEquals('_', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m_");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      char[] charArray0 = new char[4];
      charArray0[0] = ')';
      charArray0[1] = '+';
      charArray0[2] = '5';
      charArray0[3] = 'H';
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.nextToken(3591);
      jSONReaderScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m_");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.newCollectionByType(class0);
      jSONReaderScanner0.putChar('Q');
      Number number0 = jSONReaderScanner0.integerValue();
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(61, number0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'g';
      charArray0[1] = 'I';
      charArray0[2] = 'D';
      charArray0[3] = '';
      int int0 = 11;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 11, 11);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.charArrayCompare(charArray0);
      int int1 = 59;
      JSONScanner jSONScanner0 = new JSONScanner("qZo$B{pS>~T>,`", 59);
      jSONScanner0.nextIdent();
      jSONScanner0.matchField(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.setTime('}', 'w', 'I', '', 'w', 'S');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("=Ix9a2[\"6W|H,\"\t%", 31);
      char[] charArray0 = new char[5];
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.intValue();
      charArray0[0] = '3';
      charArray0[1] = '`';
      charArray0[2] = '%';
      charArray0[3] = '7';
      charArray0[4] = 'm';
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.sp = 20;
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.arrayCopy(1, charArray0, 19, (-713));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m_");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.nextToken(2);
      assertEquals('_', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m_");
      char[] charArray0 = new char[1];
      charArray0[0] = 'u';
      stringReader0.read(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.nextToken(0);
      char[] charArray1 = new char[9];
      charArray1[0] = 'u';
      charArray1[1] = 'u';
      charArray1[2] = 'u';
      charArray1[3] = '3';
      charArray1[4] = '0';
      charArray1[5] = 'u';
      charArray1[6] = 'u';
      charArray1[7] = 'u';
      charArray1[8] = 'E';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray1, 0);
      // Undeclared exception!
      try { 
        jSONReaderScanner1.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m_");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("m_", 0);
      boolean boolean0 = jSONReaderScanner1.isEnabled(0, 0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = 96;
      int int1 = 0;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 96, 0);
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      Object[] objectArray0 = new Object[0];
      jSONReaderScanner0.lexError("v25][F", objectArray0);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m_");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.nextToken(9);
      assertEquals('_', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m_");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("m_");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m_");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[3] = (Object) stringReader0;
      objectArray0[4] = (Object) "m_";
      jSONReaderScanner0.lexError((String) null, objectArray0);
      char[] charArray0 = new char[3];
      charArray0[0] = 'u';
      charArray0[1] = '@';
      charArray0[2] = ';';
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.scanDouble('m');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.copyTo(3877, 2076, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = 96;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 96, 0);
      int int1 = 554;
      jSONReaderScanner0.isEnabled(48, 554);
      SymbolTable symbolTable0 = new SymbolTable(59);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      StringReader stringReader0 = new StringReader("YLm53zuiI");
      char[] charArray0 = new char[7];
      charArray0[0] = 'u';
      charArray0[1] = 'u';
      charArray0[2] = 'u';
      charArray0[3] = 'u';
      charArray0[4] = 'u';
      charArray0[5] = 'u';
      charArray0[6] = 'u';
      stringReader0.read(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.nextToken(7);
      jSONReaderScanner0.scanDecimal('u');
      jSONReaderScanner0.isBlankInput();
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m_");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.nextToken((-2397));
      assertEquals(1, jSONReaderScanner0.token());
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'z';
      charArray0[1] = '{';
      charArray0[2] = '[';
      charArray0[3] = 'k';
      charArray0[4] = 'b';
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals('_', jSONReaderScanner0.getCurrent());
      
      jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal identifier : ");
      int int0 = 125;
      jSONReaderScanner0.charAt(125);
      char char0 = 'X';
      jSONReaderScanner0.scanLong('X');
      char[] charArray0 = new char[4];
      charArray0[0] = 'X';
      charArray0[1] = 'X';
      charArray0[2] = 'X';
      charArray0[3] = 'X';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(">");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : >
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("toString", (-1549));
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.scanDouble('m');
      int int0 = 2076;
      char[] charArray0 = new char[8];
      charArray0[0] = 'm';
      charArray0[1] = '|';
      charArray0[4] = 'm';
      charArray0[3] = 'm';
      charArray0[4] = 'm';
      charArray0[5] = '7';
      charArray0[6] = 'y';
      charArray0[7] = 'm';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.copyTo(214, 2283, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 96, 0);
      Object[] objectArray0 = new Object[0];
      jSONReaderScanner0.lexError("v25][F", objectArray0);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.scanDouble('m');
      jSONReaderScanner0.scanFieldString(charArray0);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-2204));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(">");
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '9';
      charArray0[1] = '2';
      charArray0[2] = '_';
      charArray0[3] = 'L';
      charArray0[4] = '6';
      charArray0[5] = 'u';
      charArray0[6] = '#';
      charArray0[7] = 'H';
      charArray0[8] = 'u';
      String string0 = JSONLexerBase.readString(charArray0, 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(">");
      int int0 = (-2359);
      jSONReaderScanner0.nextToken((-2359));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      char[] charArray0 = new char[4];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 96, 96);
      Object[] objectArray0 = new Object[0];
      jSONReaderScanner0.lexError("v25][F", objectArray0);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.scanDouble('m');
      boolean boolean0 = jSONReaderScanner0.isEnabled((-1665), (-1345));
      assertTrue(boolean0);
      
      jSONReaderScanner0.scanLong('E');
      assertEquals(96, jSONReaderScanner0.getFeatures());
      
      JSONScanner jSONScanner0 = new JSONScanner("unclosed string : ", (-1));
      jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.google.common.collect.");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TreeSet", 5970);
      int int0 = jSONReaderScanner0.pos();
      assertEquals(5970, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5IMO9H#_Hu_W");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.nextToken(84);
      jSONReaderScanner0.scanNumber();
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m_");
      char[] charArray0 = new char[1];
      charArray0[0] = 'u';
      stringReader0.read(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.nextToken(0);
      jSONReaderScanner0.scanDecimal('E');
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      int int0 = (-1549);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("toString", (-1549));
      char char0 = '>';
      jSONReaderScanner0.isEOF();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m_");
      char[] charArray0 = new char[1];
      charArray0[0] = '&';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 110, 109);
      jSONReaderScanner0.scanType("true");
      jSONReaderScanner0.scanInt('~');
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 39);
      PipedWriter pipedWriter1 = null;
      try {
        pipedWriter1 = new PipedWriter(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("java.time.Duration", 0);
      boolean boolean0 = jSONReaderScanner0.isEnabled(1929, 1929);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '%';
      charArray0[1] = '~';
      charArray0[2] = 'U';
      charArray0[3] = '*';
      charArray0[4] = '|';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3870);
      jSONReaderScanner0.nextToken();
      assertEquals('~', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m_");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      boolean boolean0 = jSONReaderScanner0.isEnabled(554, 0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
      
      SymbolTable symbolTable0 = new SymbolTable(3439);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '/';
      charArray0[1] = '}';
      charArray0[2] = '\'';
      charArray0[3] = '6';
      JSONScanner.checkDate('b', '\'', '6', 'F', '/', '}', 86, 86);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.indexOf('b', 119);
      jSONReaderScanner0.setToken(0);
      int int0 = (-730);
      jSONReaderScanner0.scanFieldLong(charArray0);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null, (-730));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '/';
      charArray0[1] = '}';
      charArray0[2] = '\'';
      charArray0[3] = '6';
      JSONScanner.checkDate('b', '7', '6', 'F', '/', '}', 86, 86);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.setToken(0);
      int int0 = (-730);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null, (-730));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      int int0 = (-1549);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("toString", (-1549));
      jSONReaderScanner0.isEOF();
      int int1 = 2283;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldString((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("toString", (-1549));
      jSONReaderScanner0.isEOF();
      SymbolTable symbolTable0 = new SymbolTable(2283);
      jSONReaderScanner0.addSymbol(2283, 2283, (-1549), symbolTable0);
      char[] charArray0 = new char[2];
      charArray0[0] = '>';
      charArray0[1] = '>';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, (-1455));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6V%");
      char[] charArray0 = new char[4];
      charArray0[0] = 'a';
      charArray0[1] = 'z';
      charArray0[2] = 'a';
      charArray0[3] = 'z';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 110, 10);
      jSONReaderScanner0.scanType("true");
      jSONReaderScanner0.scanInt('z');
      jSONReaderScanner0.indexOf('a', 'z');
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m_");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = 96;
      int int1 = 0;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 96, 0);
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      Object[] objectArray0 = new Object[0];
      jSONReaderScanner0.lexError("v25][F", objectArray0);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(96);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m_");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'u';
      charArray0[1] = '[';
      charArray0[2] = '3';
      charArray0[3] = '[';
      charArray0[4] = 'V';
      charArray0[5] = 'B';
      int int0 = 120;
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 56320, 120);
      jSONReaderScanner1.nextToken(0);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 47, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m_");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      JSONScanner.checkDate('P', 'P', 'P', 'P', 'P', 'P', (-1724060299), (-127));
      JSONScanner jSONScanner0 = new JSONScanner("m_", (-718));
      jSONReaderScanner0.scanBoolean('P');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.nextToken(59);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m_");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      JSONScanner jSONScanner0 = new JSONScanner("Set");
      char[] charArray0 = new char[9];
      charArray0[0] = 'G';
      charArray0[1] = 'G';
      charArray0[2] = 'G';
      charArray0[3] = 'G';
      charArray0[4] = 'G';
      charArray0[5] = 'G';
      charArray0[6] = '?';
      charArray0[7] = 'G';
      charArray0[8] = 'G';
      jSONScanner0.scanFieldLong(charArray0);
      jSONScanner0.resetStringPosition();
      jSONScanner0.isBlankInput();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("Set");
      jSONReaderScanner0.charArrayCompare(charArray0);
      char char0 = ']';
      // Undeclared exception!
      try { 
        jSONReaderScanner1.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - S, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("7|KS{/SG!U<p%", 108);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m_");
      char[] charArray0 = new char[8];
      charArray0[0] = 'j';
      charArray0[1] = 'T';
      charArray0[2] = 'J';
      charArray0[3] = '~';
      charArray0[3] = 'j';
      charArray0[5] = '~';
      charArray0[6] = 'J';
      charArray0[7] = 'j';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 107);
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.scanFloat('V');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.charAt((-2678));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '|';
      charArray0[1] = 'p';
      charArray0[2] = '`';
      charArray0[3] = 'a';
      charArray0[4] = 'z';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 10, 10);
      jSONReaderScanner0.scanType("true");
      jSONReaderScanner0.scanInt('V');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.indexOf('S', (-1580));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '|';
      charArray0[1] = 'p';
      charArray0[2] = '`';
      charArray0[3] = 'a';
      charArray0[4] = 'z';
      JSONScanner jSONScanner0 = new JSONScanner("1>J");
      SymbolTable symbolTable0 = new SymbolTable(2517);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : 1pos 0, json : 1>J
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      StringReader stringReader0 = new StringReader("N5o+RS");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'l';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.intValue();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '|';
      charArray0[1] = 'p';
      charArray0[2] = '`';
      charArray0[3] = 'a';
      charArray0[4] = 'z';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 10, 10);
      jSONReaderScanner0.scanType("G&X^_Pb_6yoaFC4");
      char[] charArray1 = new char[0];
      jSONReaderScanner0.scanFieldDouble(charArray1);
      jSONReaderScanner0.indexOf('J', 20);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("illegal setter");
      jSONScanner0.stringDefaultValue = "";
      PipedReader pipedReader0 = new PipedReader();
      JSONScanner jSONScanner1 = new JSONScanner("illegal setter", 0);
      char[] charArray0 = new char[3];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      charArray0[2] = '+';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 120);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("toString");
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 96, 0);
      Object[] objectArray0 = new Object[0];
      jSONReaderScanner0.lexError("v25][F", objectArray0);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.copyTo(2076, 0, charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("v25][F", 0);
      jSONScanner0.getCurrent();
      assertEquals(0, jSONScanner0.matchStat());
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("vk", 0);
      char[] charArray0 = new char[9];
      jSONScanner0.close();
      charArray0[0] = 'S';
      charArray0[1] = '-';
      charArray0[2] = '?';
      charArray0[3] = '[';
      charArray0[4] = '.';
      charArray0[5] = '{';
      jSONScanner0.scanDouble('S');
      jSONScanner0.scanDate('{');
      charArray0[6] = 'T';
      charArray0[7] = '>';
      charArray0[8] = 'G';
      jSONScanner0.scanFieldLong(charArray0);
      jSONScanner0.resetStringPosition();
      jSONScanner0.isBlankInput();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("vk");
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.scanDate('G');
      jSONReaderScanner0.stringDefaultValue = "vk";
      jSONReaderScanner0.tokenName();
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. v
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("_{4ynec)~=t&T8");
      char[] charArray0 = new char[7];
      charArray0[0] = 'G';
      charArray0[1] = '{';
      jSONReaderScanner0.isBlankInput();
      charArray0[3] = 'j';
      charArray0[4] = 'j';
      charArray0[5] = 'T';
      char[] charArray1 = new char[8];
      charArray1[0] = 'j';
      charArray1[1] = 'T';
      charArray1[2] = 'j';
      charArray1[3] = 'G';
      charArray1[4] = '%';
      charArray1[5] = 'G';
      charArray1[6] = 'J';
      charArray1[7] = '~';
      jSONReaderScanner0.scanFieldDate(charArray1);
      jSONReaderScanner0.hasSpecial = true;
      charArray0[6] = 'T';
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.bp = (-14);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFloat('T');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("toString", (-1549));
      jSONReaderScanner0.isEOF();
      SymbolTable symbolTable0 = new SymbolTable(2283);
      jSONReaderScanner0.addSymbol(2283, 2283, (-1549), symbolTable0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      String string0 = "N5o+RS";
      StringReader stringReader0 = new StringReader("N5o+RS");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      JSONScanner jSONScanner0 = new JSONScanner("N5o+RS", 0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'l';
      jSONScanner0.scanFieldDate(charArray0);
      jSONScanner0.nextToken(0);
      jSONScanner0.charArrayCompare(charArray0);
      jSONScanner0.next();
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, 35, 2136);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"D&\"TQal]}KQE");
      jSONScanner0.scanString();
      jSONScanner0.scanUUID('+');
      jSONScanner0.nextIdent();
      char[] charArray0 = new char[6];
      charArray0[0] = '+';
      charArray0[1] = '+';
      charArray0[2] = '+';
      charArray0[3] = '+';
      charArray0[4] = '+';
      charArray0[5] = '+';
      jSONScanner0.matchField2(charArray0);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m_");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      JSONScanner jSONScanner0 = new JSONScanner("Set");
      char[] charArray0 = new char[9];
      charArray0[0] = 'G';
      charArray0[1] = 'G';
      charArray0[2] = 'G';
      charArray0[3] = 'G';
      charArray0[4] = 'G';
      charArray0[5] = 'G';
      charArray0[6] = '?';
      charArray0[7] = 'G';
      charArray0[8] = 'G';
      jSONScanner0.scanFieldLong(charArray0);
      jSONScanner0.resetStringPosition();
      jSONScanner0.isBlankInput();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("Set");
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner1.scanDate(']');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m_");
      stringReader0.skip(0L);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.nextToken(0);
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(">Xj", (-128));
      char[] charArray0 = new char[4];
      jSONScanner0.scanIdent();
      charArray0[0] = 'Q';
      jSONScanner0.matchField(charArray0);
      jSONScanner0.isBlankInput();
      charArray0[1] = 'd';
      jSONScanner0.putChar('_');
      Feature feature0 = Feature.InternFieldNames;
      jSONScanner0.config(feature0, false);
      jSONScanner0.isRef();
      charArray0[2] = ',';
      charArray0[3] = 'D';
      jSONScanner0.scanFieldBigInteger(charArray0);
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(charArray0, (-128), (-2762));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '3';
      charArray0[1] = 'K';
      charArray0[2] = 'u';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      String string0 = jSONScanner0.tokenName();
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals("Unknown", string0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      int int0 = (-1549);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("toString", (-1549));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('>');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match > - t, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      int int0 = (-128);
      JSONScanner jSONScanner0 = new JSONScanner(">Xj", (-128));
      char[] charArray0 = new char[4];
      char char0 = 'Q';
      jSONScanner0.scanIdent();
      charArray0[0] = 'Q';
      jSONScanner0.matchField(charArray0);
      jSONScanner0.isBlankInput();
      charArray0[1] = 'd';
      jSONScanner0.putChar('_');
      Feature feature0 = Feature.InternFieldNames;
      jSONScanner0.config(feature0, false);
      jSONScanner0.isRef();
      charArray0[2] = ',';
      charArray0[3] = 'D';
      jSONScanner0.scanFieldBoolean(charArray0);
      jSONScanner0.scanDouble('4');
      // Undeclared exception!
      try { 
        jSONScanner0.scanIdent();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 96, 0);
      Object[] objectArray0 = new Object[0];
      jSONReaderScanner0.lexError("v25][F", objectArray0);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.scanDouble('m');
      jSONReaderScanner0.copyTo(2076, 0, charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("x/G\"Hg");
      jSONScanner0.isRef();
      jSONScanner0.scanDecimal('}');
      jSONScanner0.token();
      char[] charArray0 = new char[4];
      charArray0[0] = '/';
      charArray0[1] = 'i';
      jSONScanner0.longValue();
      charArray0[2] = '\'';
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("vk", 0);
      char[] charArray0 = new char[9];
      jSONScanner0.close();
      charArray0[0] = 'S';
      charArray0[1] = '-';
      charArray0[2] = '?';
      charArray0[3] = '[';
      charArray0[4] = '.';
      charArray0[5] = '{';
      jSONScanner0.scanDouble('S');
      jSONScanner0.scanDate('{');
      charArray0[6] = 'T';
      charArray0[7] = 'G';
      charArray0[8] = 'G';
      jSONScanner0.scanFieldLong(charArray0);
      jSONScanner0.resetStringPosition();
      jSONScanner0.isBlankInput();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("vk");
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.scanDate('G');
      jSONReaderScanner0.stringDefaultValue = "vk";
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      int int0 = 108;
      JSONScanner jSONScanner0 = new JSONScanner("", 108);
      jSONScanner0.longValue();
      // Undeclared exception!
      try { 
        jSONScanner0.subString(108, 117);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("_{4ynec)~=t&T8");
      int int0 = (-14);
      char[] charArray0 = new char[7];
      charArray0[0] = 'G';
      charArray0[1] = '{';
      jSONReaderScanner0.isBlankInput();
      charArray0[2] = '%';
      charArray0[3] = 'j';
      charArray0[4] = 'j';
      charArray0[5] = 'T';
      char[] charArray1 = new char[8];
      charArray1[0] = 'j';
      charArray1[1] = 'T';
      charArray1[2] = 'j';
      charArray1[3] = 'G';
      charArray1[4] = '%';
      charArray1[5] = 'G';
      charArray1[6] = 'J';
      charArray1[7] = '~';
      jSONReaderScanner0.scanFieldDate(charArray1);
      jSONReaderScanner0.hasSpecial = true;
      charArray0[6] = 'T';
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.bp = (-14);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFloat('T');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      int int0 = (-886);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("AllowISO8601DateFormat", (-886));
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("illegal setter");
      char char0 = '+';
      jSONScanner0.stringDefaultValue = "";
      jSONScanner0.stringDefaultValue = "illegal setter";
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '|';
      charArray0[1] = 'p';
      charArray0[2] = '`';
      charArray0[3] = 'a';
      charArray0[4] = 'z';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 10, 10);
      int int0 = jSONReaderScanner0.scanType("G&X^_Pb_6yoaFC4");
      assertEquals((-2), int0);
      
      jSONReaderScanner0.indexOf('J', 20);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(10, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '\'';
      charArray0[1] = 'i';
      JSONScanner.charArrayCompare("", (-1), charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("");
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.features = 26085;
      Class<String> class0 = String.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONScanner0.matchStat();
      jSONScanner0.scanLong('p');
      assertEquals((-1), jSONScanner0.matchStat());
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      StringReader stringReader0 = new StringReader("N5o+RS");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      JSONScanner jSONScanner0 = new JSONScanner("N5o+RS", 0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'l';
      charArray0[1] = 's';
      Class<String> class0 = String.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONReaderScanner0.scanStringArray((Collection<String>) null, 'T');
      // Undeclared exception!
      try { 
        jSONScanner0.charAt((-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nZmy:");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.matchStat = 116;
      jSONReaderScanner0.isBlankInput();
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.scanISO8601DateIfMatch(false);
      int int0 = (-2350);
      // Undeclared exception!
      try { 
        jSONScanner0.stringVal();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Vm<m&G!40Z1j&cRQS(!");
      Class<String> class0 = String.class;
      SymbolTable symbolTable0 = null;
      char char0 = 'v';
      char char1 = '&';
      jSONScanner0.scanBoolean('&');
      jSONScanner0.scanEnum(class0, (SymbolTable) null, 'v');
      jSONScanner0.intValue();
      jSONScanner0.scanInt('G');
      Class<String> class1 = String.class;
      // Undeclared exception!
      try { 
        jSONScanner0.newCollectionByType(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }
}
