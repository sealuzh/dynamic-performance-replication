/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 18:30:38 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Parser;
import com.google.re2j.Regexp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[0];
      int int0 = 0;
      Parser.subarray(regexpArray0, 0, 0);
      String string0 = ")`y";
      try { 
        Parser.parse(")`y", 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      try { 
        Parser.parse("|?Pg", 124);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      try { 
        Parser.parse("(?Pg", 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      try { 
        Parser.parse("+4r", 532);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `+`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Regexp regexp0 = Parser.parse("-]", 3016);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = (-856);
      String string0 = "\\Pr class]";
      Parser.parse("Pr class]", (-856));
      Parser parser0 = new Parser(string0, int0);
      String string1 = null;
      int int1 = 383;
      // Undeclared exception!
      try { 
        Parser.parse(string1, int1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\r", (-635));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      try { 
        Parser.parse("M(?", (-2599));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = "cTE^OTZs/*T}oaaa*}";
      int int0 = 205;
      try { 
        Parser.parse("U(", 205);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `U(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      try { 
        Parser.parse("(S", 124);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(S`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Regexp regexp0 = Parser.parse("+", 1011);
      Parser.parse("[:^graph:]", 1011);
      int[] intArray0 = new int[0];
      regexp0.runes = intArray0;
      Regexp regexp1 = Parser.parse("[:^graph:]", 2689);
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp0;
      regexp1.runes = intArray0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp1;
      Regexp regexp2 = new Regexp(regexp0);
      regexpArray0[4] = regexp2;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp1;
      Parser.subarray(regexpArray0, 1011, 1011);
      Parser parser0 = new Parser("+", 0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      try { 
        Parser.parse("+4r", (-2228));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `+`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Regexp regexp0 = Parser.parse("PE", 3008);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Parser.parse("[:]", 100);
      Parser parser0 = new Parser("U#?vg[Cg[4x s1Yr", 100);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      try { 
        Parser.parse("[]", 97);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[]`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = 3961;
      String string0 = "\\P\\l";
      Parser.parse("C", 3961);
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\P`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = "\\E";
      int int0 = (-308);
      Regexp regexp0 = Parser.parse("E", (-308));
      Parser parser0 = new Parser(string0, int0);
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp0;
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\E`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Regexp regexp0 = Parser.parse("p", 124);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Regexp regexp0 = Parser.parse("^C", 1913);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Parser.parse("1b4N/:^6!C4b", 697);
      Parser parser0 = new Parser("8", 256);
      Regexp regexp0 = Parser.parse("", (-2720));
      Regexp regexp1 = Parser.parse("1b4N/:^6!C4b", 697);
      int[] intArray0 = new int[6];
      intArray0[0] = 256;
      intArray0[1] = 256;
      intArray0[2] = 256;
      intArray0[3] = 256;
      intArray0[4] = 256;
      intArray0[5] = 697;
      regexp1.runes = intArray0;
      Regexp[] regexpArray0 = new Regexp[2];
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 256, 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Parser.parse("^", 9);
      Parser parser0 = new Parser("^", 9);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Regexp regexp0 = Parser.parse(".w#7.k4J?RWb%d}Vz%", (-335));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = 124;
      Regexp[] regexpArray0 = Parser.subarray((Regexp[]) null, 124, 124);
      Parser.subarray(regexpArray0, 124, 124);
      int int1 = 0;
      Parser.subarray(regexpArray0, 0, 0);
      String string0 = "<D3V<n_w";
      Parser parser0 = new Parser("<D3V<n_w", 2607);
      Parser.parse("", (-1350));
      Parser.parse("<D3V<n_w", 43597);
      Parser.parse("<D3V<n_w", 3166);
      Parser.parse("<D3V<n_w", 0);
      try { 
        Parser.parse("FX,R=(qd%yA.l=4\"?v0", (-1928));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `FX,R=(qd%yA.l=4\"?v0`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = 3961;
      String string0 = "\\P\\l";
      try { 
        Parser.parse("(?P<", 3961);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid named capture: `(?P<`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      try { 
        Parser.parse("(", 40);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = "'8 M8G*Xgzs7qH-qj";
      Parser.parse("'8 M8G*Xgzs7qH-qj", 305);
      Parser parser0 = new Parser("'8 M8G*Xgzs7qH-qj", 0);
      String string1 = "9)";
      try { 
        Parser.parse("9)", 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Parser parser0 = new Parser("{t:+:w", (-2909));
      Regexp[] regexpArray0 = new Regexp[7];
      Regexp regexp0 = Parser.parse("{t:+:w", (-2909));
      regexpArray0[0] = regexp0;
      Regexp regexp1 = Parser.parse("{t:+:w", (-2909));
      regexpArray0[1] = regexp1;
      Regexp regexp2 = new Regexp(regexp0);
      regexpArray0[2] = regexp2;
      Regexp regexp3 = new Regexp(regexp2);
      regexpArray0[3] = regexp3;
      Regexp regexp4 = Parser.parse("{t:+:w", 0);
      regexpArray0[4] = regexp4;
      Regexp regexp5 = new Regexp(regexp1);
      regexpArray0[5] = regexp5;
      Regexp regexp6 = new Regexp(regexp5);
      regexpArray0[6] = regexp6;
      int int0 = 9679;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 9679, (-2909));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      try { 
        Parser.parse("{?@xw:Ok{C", (-3735));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid nested repetition operator: `{?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[5];
      int int0 = 1988;
      Regexp regexp0 = Parser.parse("p^\"!=Ql", 1988);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp regexp2 = new Regexp(regexp1);
      regexpArray0[1] = regexp2;
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp3 = new Regexp(regexp_Op0);
      regexpArray0[2] = regexp3;
      Regexp regexp4 = new Regexp(regexp3);
      regexpArray0[3] = regexp4;
      Regexp regexp5 = new Regexp(regexp0);
      regexpArray0[4] = regexp5;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 1988, 903);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      try { 
        Parser.parse("(?Pg", 3961);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?P`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Parser.parse("", (-1875));
      int int0 = 124;
      Parser.parse("", 124);
      Parser.parse("", 94);
      Parser.parse("Cyrillic", 1849);
      try { 
        Parser.parse("'[q", 124);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[q`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Parser parser0 = new Parser("iYV", 1011);
      Parser.parse("1.w/dI.", 1011);
      Regexp regexp0 = Parser.parse("=7'6Tqs0MP#qT#", (-2771));
      Regexp regexp1 = new Regexp(regexp0);
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp regexp2 = new Regexp(regexp_Op0);
      Regexp regexp3 = new Regexp(regexp2);
      // Undeclared exception!
      try { 
        Parser.subarray((Regexp[]) null, (-2771), (-1459));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[0];
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 2671, 2671);
      Parser.subarray(regexpArray0, 0, 0);
      Parser.parse("4s", 0);
      Parser.subarray(regexpArray0, 0, 0);
      int int0 = 0;
      Parser parser0 = new Parser("CxW", 0);
      Parser.parse("CxW", 0);
      Parser.parse("", 0);
      Parser.parse("4s", 0);
      Parser.parse("88#8I{/TNF=I", 0);
      Parser.parse("", 2671);
      Parser.parse("4s", (-3818));
      Parser.parse("4s", 0);
      int int1 = (-2327);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray1, 0, (-2327));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Regexp regexp0 = Parser.parse("$", 1284);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[3];
      Parser.parse("#_eX.3$TZ", (-187));
      Parser parser0 = new Parser("", 3176);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Regexp regexp0 = Parser.parse("|", 124);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[9];
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      String string0 = "HJ_X1~D# 6|h";
      Regexp regexp1 = Parser.parse("HJ_X1~D# 6|h", (-4968));
      regexpArray0[1] = regexp1;
      Regexp regexp2 = new Regexp(regexp0);
      regexpArray0[2] = regexp2;
      Regexp regexp3 = Parser.parse("HJ_X1~D# 6|h", (-4968));
      regexpArray0[3] = regexp3;
      Regexp regexp4 = new Regexp(regexp_Op0);
      regexpArray0[4] = regexp4;
      int int0 = 1020;
      Regexp regexp5 = Parser.parse("HJ_X1~D# 6|h", 1020);
      regexpArray0[5] = regexp5;
      Regexp regexp6 = new Regexp(regexp_Op0);
      regexpArray0[6] = regexp6;
      try { 
        Parser.parse("MVp21yNE!Z(FW(eO+", (-4968));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `MVp21yNE!Z(FW(eO+`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Regexp regexp0 = Parser.parse("z|", 124);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Regexp regexp0 = Parser.parse("G|di", (-1072));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Regexp regexp0 = Parser.parse("|@", 108);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = 1457;
      Regexp regexp0 = Parser.parse("\u0007", 1457);
      String string0 = "NB@{}kBuNk:@.X>de";
      Regexp regexp1 = Parser.parse(string0, int0);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Regexp regexp0 = Parser.parse("-.Q=ms\u0006", (-163));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[8];
      Regexp regexp0 = Parser.parse("&8!c+", (-4150));
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = Parser.parse("&8!c+", 248);
      regexpArray0[2] = regexp2;
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp3 = new Regexp(regexp_Op0);
      regexpArray0[3] = regexp3;
      Regexp.Op regexp_Op1 = Regexp.Op.END_TEXT;
      Regexp regexp4 = new Regexp(regexp_Op1);
      regexpArray0[4] = regexp4;
      Regexp regexp5 = new Regexp(regexp3);
      regexpArray0[5] = regexp5;
      Regexp regexp6 = Parser.parse("&8!c+", (-4150));
      regexpArray0[6] = regexp6;
      Regexp regexp7 = Parser.parse("vJZi:", 110);
      regexpArray0[7] = regexp7;
      Parser.subarray(regexpArray0, 248, 248);
      Regexp regexp8 = Parser.parse("(?", 775);
      assertFalse(regexp8.equals((Object)regexp7));
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[1];
      Parser parser0 = new Parser("p.e:", 2399);
      Parser.parse("d", (-3603));
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, (-308), (-308));
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray1, 3233, 91);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[1];
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.max = (-1145);
      int int0 = (-1);
      regexp0.cap = (-1);
      regexpArray0[0] = regexp0;
      Parser.subarray(regexpArray0, 121, 121);
      regexp0.name = ":]";
      regexp0.name = ":]";
      String string0 = "r}N0FK>qHn*'${1*r";
      int int1 = 180;
      Parser.parse("r}N0FK>qHn*'${1*r", 180);
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 180, 180);
      Parser parser0 = new Parser((String) null, 180);
      Parser.parse(":]", 68176);
      Parser.parse("r}N0FK>qHn*'${1*r", 121);
      int int2 = 32;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray1, (-1), 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      try { 
        Parser.parse("d{2Y)KG5Lnyu", 36);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Parser.parse("|Mi|r}LqZo839H", 3961);
      Parser parser0 = new Parser("|Mi|r}LqZo839H", 3961);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Parser parser0 = new Parser(";]6}iki5{z9{", 10);
      Regexp regexp0 = Parser.parse(";]6}iki5{z9{", (-315));
      Regexp[] regexpArray0 = new Regexp[5];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 10, (-315));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = 740;
      Regexp regexp0 = Parser.parse("pPl", 740);
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp0;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, int0, int0);
      assertNotSame(regexpArray0, regexpArray1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[4];
      Regexp regexp0 = Parser.parse("'H5tBP$B", 468);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = Parser.parse("'H5tBP$B", 468);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = Parser.parse("p", 468);
      regexpArray0[2] = regexp2;
      String string0 = "\\P>~b Mjg,u=?H";
      int int0 = (-2152);
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\P`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\r", 97);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Regexp regexp0 = Parser.parse("4]v~<Z8z", 120);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[::]", 1781);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = 3961;
      String string0 = "\\P\\E";
      Parser parser0 = new Parser("PE", 3961);
      String string1 = "(?Pg";
      try { 
        Parser.parse("(?Pg", 3961);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?P`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Regexp regexp0 = Parser.parse("(?:)", 193);
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[6] = regexp0;
      regexpArray0[7] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-1585), 6016);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1585
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = 835;
      Regexp regexp0 = Parser.parse("Gw%1^RLg>`W14ax*gM", 835);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = Parser.parse("d", 835);
      Regexp regexp3 = Parser.parse("d", 3282);
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp4 = new Regexp(regexp_Op0);
      Parser.parse("d", 112);
      Regexp regexp5 = new Regexp(regexp_Op0);
      String string0 = "(?:)";
      Regexp regexp6 = Parser.parse("(?:)", 1020);
      Regexp regexp7 = new Regexp(regexp1);
      Parser.parse("MVp21yNE!Z(FW(eO+", 835);
      Regexp[] regexpArray0 = new Regexp[6];
      regexp7.cap = 110;
      Regexp regexp8 = new Regexp(regexp1);
      regexpArray0[0] = regexp8;
      regexpArray0[1] = regexp2;
      Regexp regexp9 = Parser.parse("Gw%1^RLg>`W14ax*gM", 835);
      regexpArray0[2] = regexp9;
      regexpArray0[3] = regexp6;
      regexpArray0[4] = regexp3;
      regexpArray0[5] = regexp7;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 2004, 368);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Regexp regexp0 = Parser.parse("x", 1284);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Regexp regexp0 = Parser.parse("x{", (-1243));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[^x00-x{10FFFF}]", 8248);
      Regexp regexp1 = Parser.parse("", (-1309));
      Regexp[] regexpArray0 = new Regexp[3];
      Regexp regexp2 = new Regexp(regexp1);
      regexpArray0[0] = regexp2;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp1;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 45, 8248);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 45
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Parser parser0 = new Parser(":", (-163));
      Parser.parse("v}:2Ls4\bRP^gR", 110);
      Regexp regexp0 = Parser.parse("^x00-x{10FFFF}", 53);
      Regexp regexp1 = Parser.parse("^x00-x{10FFFF}", 53);
      assertNotSame(regexp1, regexp0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = (-163);
      Parser parser0 = new Parser(":", (-163));
      Regexp regexp0 = Parser.parse("^x0>Q0-x{10FFFF}", (-163));
      String string0 = "Syloti_Nagri";
      Regexp regexp1 = Parser.parse(string0, int0);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Regexp regexp0 = Parser.parse("xnpP", (-2612));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = "\\";
      int int0 = 97;
      Parser.parse("", 97);
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: trailing backslash at end of expression
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Regexp regexp0 = Parser.parse("kpP|p", 2268);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Parser.parse("J8mP+5&\"|", (-812));
      Parser parser0 = new Parser("END_TEXT", (-1627));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      try { 
        Parser.parse("(?i:", (-1064));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(?i:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      try { 
        Parser.parse("49RPHq 6[~uW-l&", 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[~uW-l&`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[9];
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = new Regexp(regexp1);
      regexpArray0[2] = regexp2;
      Regexp regexp3 = new Regexp(regexp0);
      regexpArray0[3] = regexp3;
      Regexp regexp4 = new Regexp(regexp1);
      regexpArray0[4] = regexp4;
      int int0 = 1920;
      Regexp regexp5 = Parser.parse("\u0001CYN.^$Vcba#C p", 1920);
      Regexp regexp6 = new Regexp(regexp5);
      regexpArray0[5] = regexp6;
      Regexp regexp7 = new Regexp(regexp_Op0);
      regexpArray0[6] = regexp7;
      Regexp.Op regexp_Op1 = Regexp.Op.REPEAT;
      Regexp regexp8 = new Regexp(regexp_Op1);
      regexpArray0[7] = regexp8;
      Regexp regexp9 = new Regexp(regexpArray0[1]);
      regexpArray0[8] = regexp9;
      int int1 = (-2);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int0, int1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Regexp regexp0 = new Regexp((Regexp.Op) null);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = new Regexp(regexp1);
      Regexp regexp3 = Parser.parse("\u0001CYN.^$Vcba#C p", 40);
      assertFalse(regexp3.equals((Object)regexp1));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[7];
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[1] = regexp1;
      int int0 = 105;
      Regexp regexp2 = Parser.parse("gZ'CUfoFzt", 105);
      regexpArray0[2] = regexp2;
      Regexp regexp3 = new Regexp(regexp1);
      regexpArray0[3] = regexp3;
      try { 
        Parser.parse("m$c[", 105);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = 2372;
      Parser.parse("l2'2cxda3\u0004p}n*H", 2372);
      Regexp[] regexpArray0 = new Regexp[0];
      int int1 = 2552;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int1, int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Regexp regexp0 = Parser.parse("|<c%Q9,(=vG)l", 8008);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = 3961;
      String string0 = "tx1]yJ9M\\2daa [FF";
      try { 
        Parser.parse("tx1]yJ9M\u0002daa [FF", 3961);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[FF`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Parser parser0 = new Parser("Ua[q5x#n>908OC", 2569);
      try { 
        Parser.parse("Ua[q5x#n>908OC", 2569);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[q5x#n>908OC`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Parser parser0 = new Parser(":", (-163));
      Regexp regexp0 = Parser.parse("v}:2Ls4\bRP^gR", 110);
      Regexp regexp1 = Parser.parse("v}:2Ls4\bRP^gR", (-163));
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Regexp regexp0 = Parser.parse("~|u", (-3660));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      Parser parser0 = new Parser("X4d]?1[cW]Z?!K;", 180);
      Regexp regexp0 = Parser.parse("X4d]?1[cW]Z?!K;", 180);
      Regexp regexp1 = Parser.parse("X4d]?1[cW]Z?!K;", 86);
      Regexp regexp2 = new Regexp(regexp1);
      assertFalse(regexp2.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Parser parser0 = new Parser("p", (-1735));
      Regexp[] regexpArray0 = new Regexp[3];
      Regexp.Op regexp_Op0 = Regexp.Op.LEFT_PAREN;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp.Op regexp_Op1 = Regexp.Op.STAR;
      Regexp regexp2 = new Regexp(regexp_Op1);
      regexpArray0[1] = regexp2;
      Regexp regexp3 = Parser.parse("\n", 112);
      regexpArray0[2] = regexp3;
      regexp3.toString();
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-1735), (-1399));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1735
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\f", 1300);
      Regexp[] regexpArray0 = new Regexp[2];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 43346, 1300);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0000", 500);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      Regexp regexp0 = Parser.parse("C/-S\u0000x*Z=ymK7#p", 3848);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Regexp regexp0 = Parser.parse("t\"rkwk\u0000:1zo", (-700));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Regexp regexp0 = Parser.parse("(?)g", 104);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Regexp regexp0 = Parser.parse("(?-s:.)", (-163));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = 104;
      try { 
        Parser.parse("(?-s", 104);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?-s`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:l:]", (-2704));
      Regexp regexp1 = Parser.parse("[:l:]", (-2704));
      assertTrue(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = "^\\x00-\\x#10dFFF}";
      int int0 = 105;
      Regexp regexp0 = Parser.parse("^x00-x#10dFFF}", 105);
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      Parser.subarray(regexpArray0, int0, int0);
      int int1 = 2533;
      Parser parser0 = new Parser(string0, int1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Regexp regexp0 = Parser.parse("R'm6'*cTX94xI/nBc", 124);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Regexp regexp0 = Parser.parse("cj$j{70g]rR", 76);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = "[1|)(f98-R-<";
      int int0 = 96;
      try { 
        Parser.parse("[1|)(f98-R-<", 96);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[1|)(f98-R-<`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      try { 
        Parser.parse("[:8-R-<", (-2008));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `[:8-R-<`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = 45;
      try { 
        Parser.parse("vG$9aIM[-f", 45);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-f`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Regexp regexp0 = Parser.parse("ziUQt2SV", 2164);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Parser parser0 = new Parser("T?m]>7{DU=]S!3$4", 1463);
      Regexp regexp0 = Parser.parse("\u0003@", 57);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = "(?-m:$)";
      Regexp regexp0 = Parser.parse("(?-m:$)", (-3223));
      Regexp regexp1 = Parser.parse("P", (-3223));
      assertFalse(regexp1.equals((Object)regexp0));
      
      int int0 = 118;
      Regexp regexp2 = Parser.parse(string0, int0);
      assertFalse(regexp2.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Parser.parse("pPp", 1489);
      Parser parser0 = new Parser("p4p}n*H", 1489);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Regexp regexp0 = Parser.parse("pP", 3269);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Regexp regexp0 = Parser.parse("8!OrY-8g<N~j::l", 3008);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Regexp regexp0 = Parser.parse("pPp", (-1088));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[9];
      Regexp regexp0 = Parser.parse(".UZD=ka9Lz&guTJx>", (-923));
      regexpArray0[0] = regexp0;
      Regexp regexp1 = Parser.parse("gi", (-923));
      regexpArray0[1] = regexp1;
      Regexp regexp2 = new Regexp(regexp0);
      regexpArray0[2] = regexp2;
      Regexp regexp3 = Parser.parse(".UZD=ka9Lz&guTJx>", (-923));
      regexpArray0[3] = regexp3;
      Regexp regexp4 = new Regexp(regexp3);
      regexpArray0[4] = regexp4;
      int int0 = 1625;
      Regexp regexp5 = Parser.parse("Ll", 1625);
      regexpArray0[5] = regexp5;
      try { 
        Parser.parse("0?# (~`?-H|sB", 1625);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `0?# (~`?-H|sB`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = (-1079);
      Parser.parse("@", (-1079));
      String string0 = "n";
      int int1 = 128;
      Parser parser0 = new Parser("n", 128);
      Regexp regexp0 = Parser.parse("U#.6B0l#qm{o%-}\u0007+/", (-1079));
      Parser.parse(string0, int0);
      String string1 = "XV0Y97\"#,zU?w";
      Regexp regexp1 = Parser.parse(string1, int1);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = 208;
      Regexp regexp0 = Parser.parse("#AA8", 208);
      Parser parser0 = new Parser("#AA8", 208);
      Parser.parse("", 785);
      String string0 = "Pc";
      int[] intArray0 = new int[2];
      intArray0[0] = 208;
      int int1 = 947;
      intArray0[1] = 947;
      regexp0.runes = intArray0;
      int int2 = 9290;
      Parser.parse("Pc", 9290);
      Regexp[] regexpArray0 = new Regexp[7];
      regexp0.subs = regexpArray0;
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexp0.runes = intArray0;
      regexpArray0[5] = regexp0;
      regexp0.toString();
      regexpArray0[6] = regexp0;
      Parser.subarray(regexpArray0, int0, int0);
      regexp0.runes = intArray0;
      String string1 = "regexp/syntax: internal error";
      Parser.parse(string1, int0);
      int int3 = 114;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int1, int3);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Parser parser0 = new Parser("iA%d:CI]eMr+I", 500);
      Regexp regexp0 = Parser.parse("\u0000", 500);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Regexp regexp0 = Parser.parse("pP|p", 1476);
      Regexp[] regexpArray0 = new Regexp[4];
      Regexp regexp1 = Parser.parse("pP|p", 83);
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 1476, 13);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      try { 
        Parser.parse("[::>-", 2748);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[::>-`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Regexp regexp0 = Parser.parse("phsZQCLAN\t9@b#j4", 92);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Regexp regexp0 = Parser.parse("Ufx3@cs`2Mb", 2353);
      Parser parser0 = new Parser("Ufx3@cs`2Mb", 1134);
      Regexp regexp1 = Parser.parse("C\u0005h>MtglKE4+g99s", 120);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = "\\D";
      Regexp regexp0 = Parser.parse("D", 193);
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      Parser.subarray(regexpArray0, 193, 193);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 95, 82);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Regexp regexp0 = Parser.parse("`|p", 509);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp_Op0);
      Regexp regexp2 = Parser.parse("[^x00-x{10FFFF}]", 81);
      Parser.parse("P|p", 2722);
      Regexp regexp3 = Parser.parse("[^x00-x{10FFFF}]", 1932);
      assertFalse(regexp3.equals((Object)regexp2));
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[v]w9t50!q/Q4", 2921);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[v]w9t50!q/Q4", 1);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      try { 
        Parser.parse("[:P8-K-", (-1604));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `[:P8-K-`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = 54;
      Parser parser0 = new Parser("invalid nested repetition operator", 54);
      Regexp[] regexpArray0 = new Regexp[4];
      int int1 = 8960;
      try { 
        Parser.parse("VDBM8~(gaZ{9,-_MG", 8960);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `VDBM8~(gaZ{9,-_MG`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      try { 
        Parser.parse("VDM8~(ga{9,-_MG", 1348);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `VDM8~(ga{9,-_MG`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Regexp regexp0 = Parser.parse("pP{|p", 1992);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Regexp regexp0 = Parser.parse("p{|p", 77);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Parser parser0 = new Parser("9rpD--a'[AD[:&0", 55);
      Regexp[] regexpArray0 = new Regexp[4];
      int int0 = 948;
      try { 
        Parser.parse("9rpD--a'[AD[:&0", 948);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[AD[:&0`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      try { 
        Parser.parse("[>[:&0", 1348);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[>[:&0`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Regexp regexp0 = Parser.parse("p|p", (-2588));
      assertNotNull(regexp0);
  }
}
