/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 02:16:29 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.SymbolTable;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.ExtraProcessor;
import com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider;
import com.alibaba.fastjson.parser.deserializer.FieldTypeResolver;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.PageAttributes;
import java.awt.Point;
import java.awt.Rectangle;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.ObjectInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.math.BigInteger;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.ChoiceFormat;
import java.text.Collator;
import java.text.DateFormat;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.text.RuleBasedCollator;
import java.text.StringCharacterIterator;
import java.time.LocalDate;
import java.time.Month;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.IdentityHashMap;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.ToLongFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultJSONParser_ESTest extends DefaultJSONParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("setter not found, class ");
      int int0 = defaultJSONParser0.getResolveStatus();
      assertEquals(0, int0);
      
      defaultJSONParser0.getFieldTypeResolver();
      defaultJSONParser0.getInput();
      Hashtable<ThrowableDeserializer, ChoiceFormat> hashtable0 = new Hashtable<ThrowableDeserializer, ChoiceFormat>();
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      Class<NumberFormat> class0 = NumberFormat.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      ChoiceFormat choiceFormat0 = new ChoiceFormat("fastjson.parser.autoTypeAccept");
      hashtable0.put(throwableDeserializer0, choiceFormat0);
      Dimension dimension0 = new Dimension(0, 1);
      defaultJSONParser0.checkMapResolve(hashtable0, dimension0);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.parser.deserializer.JSONPDeserializer", (-86));
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(boolean0, jSONScanner0, parserConfig0);
      defaultJSONParser0.setContext((Object) parserConfig0, (Object) null);
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      LinkedHashMap<Rectangle, ParameterizedTypeImpl> linkedHashMap0 = new LinkedHashMap<Rectangle, ParameterizedTypeImpl>(0, 1);
      defaultJSONParser0.checkMapResolve(linkedHashMap0, linkedHashMap0);
      defaultJSONParser0.handleResovleTask((Object) null);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TN5w98O4%8R", 2781);
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.getInput();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'F';
      charArray0[1] = 'y';
      charArray0[2] = ')';
      charArray0[3] = '?';
      charArray0[4] = '2';
      charArray0[5] = 's';
      charArray0[6] = 'f';
      charArray0[7] = 'b';
      charArray0[8] = '3';
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      int int0 = 15;
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser(charArray0, 44, parserConfig0, 15);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("java.util.Collections$EmptyMap", parserConfig0);
      defaultJSONParser0.getResolveTaskList();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : java.util.Collections$EmptyMap
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      defaultJSONParser0.parse((Object) "");
      Object object0 = defaultJSONParser0.getObject("");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 102);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      LinkedHashMap<BufferCapabilities, BigInteger> linkedHashMap0 = new LinkedHashMap<BufferCapabilities, BigInteger>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) linkedHashMap0, (Object) jSONReaderScanner0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'T';
      charArray0[1] = '}';
      char char0 = '.';
      charArray0[2] = '.';
      char char1 = 'Z';
      charArray0[3] = 'Z';
      charArray0[4] = '<';
      charArray0[5] = 'l';
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 0, parserConfig0, 0);
      defaultJSONParser0.getContext();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF, pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("NaN");
      defaultJSONParser0.parse();
      defaultJSONParser0.getExtraProcessors();
      String string0 = defaultJSONParser0.getDateFomartPattern();
      assertEquals("yyyy-MM-dd HH:mm:ss", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("SHHnV;#5X");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) "SHHnV;#5X");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 5, json : SHHnV;#5X
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(">");
      Class<Rectangle> class0 = Rectangle.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.serializer.AwtCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("syntax error", parserConfig0, (-2674));
      JSON.DEFAULT_TYPE_KEY = "fastjson.parser.autoTypeSupport";
      JSONLexer jSONLexer0 = defaultJSONParser0.getLexer();
      ParserConfig parserConfig1 = defaultJSONParser0.getConfig();
      Type[] typeArray0 = new Type[4];
      String[] stringArray0 = new String[5];
      stringArray0[0] = "fastjson.parser.deny";
      stringArray0[1] = "fastjson.parser.autoTypeSupport";
      stringArray0[2] = "fastjson.parser.deny";
      stringArray0[3] = "fastjson.parser.autoTypeSupport";
      stringArray0[4] = "fastjson.parser.deny";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      simplePropertyPreFilter0.getClazz();
      typeArray0[0] = (Type) null;
      Class<Byte> class0 = Byte.TYPE;
      typeArray0[1] = (Type) class0;
      char[] charArray0 = new char[5];
      charArray0[0] = 'L';
      charArray0[1] = 'b';
      charArray0[2] = 'Z';
      charArray0[3] = '1';
      charArray0[4] = 'Q';
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(charArray0, 2, parserConfig1, 0);
      DefaultJSONParser defaultJSONParser2 = new DefaultJSONParser(defaultJSONParser0.lexer, parserConfig1);
      ParseContext parseContext0 = defaultJSONParser2.setContext((Object) null, (Object) "syntax error");
      Locale locale0 = new Locale("", "_ x><r$.aB>O.[@r", "unterminated json string, ");
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance(locale0);
      ParseContext parseContext1 = defaultJSONParser1.setContext(parseContext0, (Object) decimalFormatSymbols0, (Object) parserConfig1);
      Type type0 = parseContext1.type;
      typeArray0[2] = null;
      Type type1 = parseContext1.type;
      typeArray0[3] = null;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, (Type) null);
      defaultJSONParser0.setContext((Object) parameterizedTypeImpl0, (Object) jSONLexer0);
      assertEquals(1, jSONLexer0.pos());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.parser.deserializer.JSONPDeserializer");
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(boolean0, jSONScanner0, parserConfig0);
      defaultJSONParser0.setContext((Object) parserConfig0, (Object) null);
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("NonStringKeyAsString");
      Stack<ExtraTypeProvider> stack0 = new Stack<ExtraTypeProvider>();
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Class<?>) class0, (Collection) stack0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but ident, pos 20, json : NonStringKeyAsString
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      defaultJSONParser0.getDateFomartPattern();
      Locale locale0 = Locale.CHINESE;
      NumberFormat numberFormat0 = NumberFormat.getInstance(locale0);
      defaultJSONParser0.parse((Object) numberFormat0);
      // Undeclared exception!
      try { 
        locale0.getUnicodeLocaleType("yyyy-MM-dd HH:mm:ss");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed Unicode locale key: yyyy-MM-dd HH:mm:ss
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(C)Z");
      ParserConfig.global = null;
      defaultJSONParser0.resolveReference("(C)Z");
      defaultJSONParser0.accept(10, 10);
      Feature feature0 = Feature.SupportNonPublicField;
      defaultJSONParser0.setResolveStatus((-4482));
      defaultJSONParser0.config(feature0, true);
      assertEquals((-4482), defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      defaultJSONParser0.close();
      defaultJSONParser0.parse((Object) "");
      Object object0 = defaultJSONParser0.resolveReference("");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("NaN");
      defaultJSONParser0.getExtraTypeProviders();
      defaultJSONParser0.getLexer();
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept((-3074), 12);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual ident
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = '8';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1627);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      LinkedList<JavaBeanDeserializer> linkedList0 = new LinkedList<JavaBeanDeserializer>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual int, pos 1, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Object object0 = new Object();
      char[] charArray0 = new char[8];
      charArray0[0] = '-';
      charArray0[1] = '3';
      charArray0[2] = 'I';
      charArray0[3] = 'd';
      charArray0[4] = 'W';
      charArray0[5] = 'S';
      charArray0[6] = 'N';
      charArray0[7] = 'b';
      int int0 = 0;
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 0);
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(object0, jSONScanner0, parserConfig0);
      defaultJSONParser0.getContext();
      ArrayList<Point> arrayList0 = new ArrayList<Point>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual EOF, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("java.util.Collections$EmptyMap");
      // Undeclared exception!
      try { 
        defaultJSONParser0.popContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("syntax error, expect {, actual ");
      defaultJSONParser0.resolveStatus = 0;
      defaultJSONParser0.resolveReference("TODO : ");
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(3330, 1246);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("java.util.Collections$EmptyMap");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) "TN5w98O4%8R");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      parserConfig0.addAccept("");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0, 134);
      JSONObject jSONObject0 = new JSONObject(1609, false);
      defaultJSONParser0.setContext((Object) jSONObject0, (Object) jSONObject0);
      LinkedHashSet<MockHijrahDate> linkedHashSet0 = new LinkedHashSet<MockHijrahDate>();
      defaultJSONParser0.resolveReference("fastjson.parser.autoTypeSupport");
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(134);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      parserConfig0.propertyNamingStrategy = propertyNamingStrategy0;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("SHHnV", parserConfig0, 2);
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect int, actual ident
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("TODO : ");
      JSONObject jSONObject0 = new JSONObject(5, false);
      defaultJSONParser0.setContext((Object) "TODO : ", (Object) "TODO : ");
      defaultJSONParser0.resolveReference("@type");
      defaultJSONParser0.popContext();
      assertEquals(0, DefaultJSONParser.NONE);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0, 8);
      defaultJSONParser0.getContext();
      Float float0 = new Float((float) 0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(C)Z");
      defaultJSONParser0.getFieldTypeResolver();
      Float float0 = new Float(1.0F);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) null, (Object) null);
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, "(C)Z");
      Locale locale0 = JSON.defaultLocale;
      Collator.getInstance();
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>(2048, 1.0F, true);
      ParserConfig.getFieldFromCache("R8rH", linkedHashMap0);
      linkedHashMap0.put("R8rH", (Field) null);
      ParserConfig.getFieldFromCache("^zPr?;Q1KG=1E>", linkedHashMap0);
      Function<Collator, Double> function0 = (Function<Collator, Double>) mock(Function.class, new ViolatedAssumptionAnswer());
      Comparator.comparing((Function<? super RuleBasedCollator, ? extends Double>) function0);
      ChoiceFormat choiceFormat0 = new ChoiceFormat("(C)Z");
      ParseContext parseContext1 = defaultJSONParser0.setContext(defaultJSONParser_ResolveTask0.context, (Object) mockJapaneseDate0, (Object) choiceFormat0);
      assertNotSame(parseContext0, parseContext1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("NonStringKeyAsString");
      Stack<ExtraTypeProvider> stack0 = new Stack<ExtraTypeProvider>();
      defaultJSONParser0.getObject("SHHn");
      DecimalFormat decimalFormat0 = new DecimalFormat();
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) null, (Object) decimalFormat0);
      ParseContext parseContext1 = defaultJSONParser0.setContext(parseContext0, (Object) null, (Object) null);
      assertFalse(parseContext1.equals((Object)parseContext0));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(C)Z");
      defaultJSONParser0.getFieldTypeResolver();
      Float float0 = new Float((float) 0);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      Class<MessageFormat> class0 = MessageFormat.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.text.MessageFormat
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "=kU.0";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("=kU.0");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : =kU.0
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("SHHn");
      defaultJSONParser0.setDateFormat("2O?TriH/eg+@)");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual ident, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'y';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1627);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      Locale locale0 = Locale.GERMAN;
      DateFormat dateFormat0 = DateFormat.getDateTimeInstance(0, 1, locale0);
      defaultJSONParser0.setDateFomrat(dateFormat0);
      Class<Rectangle> class0 = Rectangle.class;
      defaultJSONParser0.setDateFomrat(dateFormat0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.serializer.AwtCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parseObject("7Z>S22'g/%W'\"Lr$W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(C)Z");
      // Undeclared exception!
      try { 
        defaultJSONParser0.close();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : (
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(C)Z");
      defaultJSONParser0.getDateFormat();
      // Undeclared exception!
      try { 
        defaultJSONParser0.popContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      LinkedHashSet<Timestamp> linkedHashSet0 = new LinkedHashSet<Timestamp>();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0, 13);
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but EOF, pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scanFieldInt", (-2548));
      char[] charArray0 = new char[1];
      charArray0[0] = 'R';
      jSONScanner0.scanFieldDate(charArray0);
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : scanFieldInt
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("2(2_D}G\\9DgIfZ", parserConfig0);
      Class<Dimension> class0 = Dimension.class;
      Locale locale0 = Locale.ITALY;
      Collator collator0 = Collator.getInstance(locale0);
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      collator0.thenComparingLong(toLongFunction0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual int, pos 0, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      Class<Object> class0 = Object.class;
      defaultJSONParser0.parseObject(class0);
      List<DefaultJSONParser.ResolveTask> list0 = defaultJSONParser0.getResolveTaskList();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("SHHn:;#5X");
      defaultJSONParser0.getExtraProcessors();
      // Undeclared exception!
      try { 
        defaultJSONParser0.popContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      TreeMap<DecimalFormatSymbols, TimeZone> treeMap0 = new TreeMap<DecimalFormatSymbols, TimeZone>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.getLastResolveTask();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("NonStringKeyAsString");
      List<ExtraTypeProvider> list0 = new Stack<ExtraTypeProvider>();
      Object object0 = defaultJSONParser0.getObject("SHHn");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      defaultJSONParser0.close();
      Class<BitSet> class0 = BitSet.class;
      Stack<Double> stack0 = new Stack<Double>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Class<?>) class0, (Collection) stack0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but EOF, pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("1.2.46");
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("1.2.46", parserConfig0, (-1));
      defaultJSONParser1.parse();
      defaultJSONParser1.popContext();
      assertEquals(0, defaultJSONParser1.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      defaultJSONParser0.getObject("");
      Type[] typeArray0 = new Type[1];
      Class<Byte> class0 = Byte.TYPE;
      typeArray0[0] = (Type) class0;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "$");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("TqODO : ");
      Type[] typeArray0 = new Type[0];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : ident
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(C)Z");
      defaultJSONParser0.getExtraProcessors();
      defaultJSONParser0.handleResovleTask("(C)Z");
      Feature feature0 = Feature.SupportNonPublicField;
      defaultJSONParser0.isEnabled(feature0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "(C)Z";
      stringArray0[1] = "(C)Z";
      stringArray0[2] = "(C)Z";
      stringArray0[3] = "(C)Z";
      stringArray0[4] = "(C)Z";
      stringArray0[5] = "(C)Z";
      stringArray0[6] = "(C)Z";
      String string0 = "NaN";
      stringArray0[7] = "NaN";
      ChoiceFormat choiceFormat0 = null;
      try {
        choiceFormat0 = new ChoiceFormat(doubleArray0, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array and limit arrays must be of the same length.
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("]D7A:c");
      Locale locale0 = Locale.CHINESE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) locale0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ]D7A:c
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(">");
      ArrayDeque<Method> arrayDeque0 = new ArrayDeque<Method>();
      defaultJSONParser0.checkListResolve(arrayDeque0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) ">");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : >
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(")Z");
      ArrayList<ChoiceFormat> arrayList0 = new ArrayList<ChoiceFormat>();
      defaultJSONParser0.checkListResolve(arrayList0);
      Locale locale0 = new Locale(",,XMZT9DHQQ8D", ")Z");
      List<Locale.LanguageRange> list0 = new LinkedList<Locale.LanguageRange>();
      defaultJSONParser0.getConfig();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(",,XMZT9DHQQ8D");
      List<ExtraTypeProvider> list1 = defaultJSONParser1.getExtraTypeProviders();
      assertTrue(list1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(C)Z");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) "(C)Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : (C)Z
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(C)Z");
      defaultJSONParser0.getResolveTaskList();
      SymbolTable symbolTable0 = defaultJSONParser0.getSymbolTable();
      assertNotNull(symbolTable0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("()CC)Z");
      defaultJSONParser0.getResolveTaskList();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("E8 c/w,&Ez");
      Class<Double> class0 = Double.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.reflect.ParameterizedType
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("PPzBp573@3N UuS{:]x", parserConfig0);
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("yiH5> LV[17");
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) "TODO : ", (Object) "TODO : ");
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, "TOD");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "{\"$ref\":\"@\"}");
      JSONScanner jSONScanner0 = new JSONScanner("{\"$ref\":\"@\"}");
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      defaultJSONParser0.getContext();
      parserConfig0.setDefaultClassLoader(classLoader0);
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, "a]fh_3");
      Collator.getInstance();
      defaultJSONParser0.parseObject();
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONScanner jSONScanner0 = new JSONScanner("{\"$ref\":\"@\"}");
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      defaultJSONParser0.getContext();
      parserConfig0.setDefaultClassLoader(classLoader0);
      ZoneInfo zoneInfo0 = (ZoneInfo)JSON.defaultTimeZone;
      JSON.defaultTimeZone = (TimeZone) zoneInfo0;
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, "a]fh_3");
      Collator.getInstance();
      LinkedHashSet<Timestamp> linkedHashSet0 = new LinkedHashSet<Timestamp>();
      defaultJSONParser0.parseObject();
      assertEquals(20, jSONScanner0.token());
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{-s(&`&ofWpF");
      TreeMap<Insets, PageAttributes> treeMap0 = new TreeMap<Insets, PageAttributes>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parse number key errorpos 2, json : {-s(&`&ofWpF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[D");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : [D
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("1.2.46");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("1.2.46");
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      defaultJSONParser1.setDateFomrat(dateFormat0);
      DateFormat dateFormat1 = defaultJSONParser1.getDateFormat();
      assertSame(dateFormat1, dateFormat0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",1)");
      Double double0 = new Double(3.0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ,1)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(">");
      defaultJSONParser0.handleResovleTask(">");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@i5@aKB^J'SGNN`u!");
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(propertyProcessable0).toString();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) propertyProcessable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}eeofhFk");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) "}eeofhFk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : }eeofhFk
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("1.2.46");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      defaultJSONParser1.getDateFormat();
      ParseContext parseContext0 = defaultJSONParser1.context;
      defaultJSONParser0.setContext((ParseContext) null);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 4, json : 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      String string0 = "TODO : ";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("TODO : ");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseExtra("TODO : ", "com.alibaba.fastjson.serializer.AtomicCodec");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 0, json : TODO : 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ArrayDeque<StringCharacterIterator> arrayDeque0 = new ArrayDeque<StringCharacterIterator>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("javax.xml.datatype.XMLGregorianCalendar", parserConfig0, (-2466));
      defaultJSONParser0.checkListResolve(arrayDeque0);
      defaultJSONParser0.close();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-3511), 1, (-1935), 1752, (-1935), (-1935));
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) arrayDeque0, (Object) mockGregorianCalendar0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-3511,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1935,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=1752,HOUR_OF_DAY=1752,MINUTE=-1935,SECOND=-1935,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("TODO : ");
      // Undeclared exception!
      try { 
        defaultJSONParser0.acceptType((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(" 1");
      defaultJSONParser0.getResolveTaskList();
      defaultJSONParser0.handleResovleTask(" 1");
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("]D7zA:c");
      List<ExtraProcessor> list0 = defaultJSONParser0.getExtraProcessors();
      List<ExtraProcessor> list1 = defaultJSONParser0.getExtraProcessors();
      assertSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      String string0 = "1.2.46";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("1.2.46");
      Locale locale0 = Locale.CANADA;
      Collator collator0 = Collator.getInstance(locale0);
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) "1.2.46", (Object) collator0);
      defaultJSONParser0.setContext(parseContext0);
      defaultJSONParser0.getObject("1.2.46");
      // Undeclared exception!
      try { 
        defaultJSONParser0.acceptType("j:)'t?@19{.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - ., info : pos 3, json : 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("TODO : ");
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 6, json : TODO : 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"$ref\":\"@\"}");
      TreeMap<Insets, PageAttributes> treeMap0 = new TreeMap<Insets, PageAttributes>();
      defaultJSONParser0.parseObject((Map) treeMap0);
      Object object0 = new Object();
      File file0 = MockFile.createTempFile("{\"$ref\":\"@\"}", "{\"$ref\":\"@\"}");
      MockFileReader mockFileReader0 = new MockFileReader(file0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(mockFileReader0, 68);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      defaultJSONParser1.getContext();
      defaultJSONParser0.setContext((ParseContext) null);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",p;oFO_U[Jx;A5>", parserConfig0, 4904);
      defaultJSONParser0.getContext();
      Float float0 = new Float((float) 0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("TDO : ");
      defaultJSONParser0.getExtraTypeProviders();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseExtra("TDO : ", "aCcx|IWzLV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 0, json : TDO : 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("TODO : ");
      defaultJSONParser0.getExtraTypeProviders();
      Integer integer0 = new Integer((-2516));
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseExtra(integer0, "B(W4-2HhzDHkW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 0, json : TODO : 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      String string0 = ")Z";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(")Z");
      String string1 = "iq4u'*O2'Em8}v1-sC9";
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("iq4u'*O2'Em8}v1-sC9");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : )Z
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";uTODO : ");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(";uTODO : ");
      // Undeclared exception!
      try { 
        defaultJSONParser1.parse((Object) ";uTODO : ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ;uTODO : 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("TODO : ");
      defaultJSONParser0.getResolveTaskList();
      List<DefaultJSONParser.ResolveTask> list0 = defaultJSONParser0.getResolveTaskList();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{-s(&`&ofWpF");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parse number key errorpos 2, json : {-s(&`&ofWpF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", actual ");
      defaultJSONParser0.getContext();
      ParseContext parseContext0 = new ParseContext((ParseContext) null, ", actual ", ", actual ");
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, ", actual ");
      ParseContext parseContext1 = defaultJSONParser0.setContext(parseContext0, (Object) dateFormatSymbols0, (Object) defaultJSONParser_ResolveTask0);
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask1 = new DefaultJSONParser.ResolveTask(parseContext1, "0");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask1);
      defaultJSONParser0.getResolveTaskList();
      defaultJSONParser0.handleResovleTask(", actual ");
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{-s(&`&ofWpbF");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("{-s(&`&ofWpbF", parserConfig0, 0);
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parse number key errorpos 2, json : {-s(&`&ofWpbF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      String string0 = "{-s(\\&`&ofWpF";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{-s(&`&ofWpF");
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {-s(&`&ofWpF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{s(&`&ofWp");
      JSON.DEFAULT_GENERATE_FEATURE = 0;
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) "{s(&`&ofWp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual (
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{s(&`&ofWp");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("a5_Z:T2M'c");
      DefaultJSONParser defaultJSONParser2 = new DefaultJSONParser("{s(&`&ofWp");
      // Undeclared exception!
      try { 
        defaultJSONParser2.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual (
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{-s(&M&ofnXbF");
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : -pos 1, json : {-s(&M&ofnXbF
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }
}
