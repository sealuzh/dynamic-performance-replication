/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 05:08:33 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.UnsupportedCharsetException;
import java.util.Enumeration;
import java.util.Locale;
import java.util.zip.Deflater;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.DeflaterSink;
import okio.GzipSource;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteString_ESTest extends ByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ByteString.codePointIndexToCharIndex("(BtGA.@V~y-IK6z{", (-3390));
      // Undeclared exception!
      try { 
        HashingSource.sha1((Source) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // delegate == null
         //
         verifyException("okio.ForwardingSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-78);
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.indexOf(byteArray0, (int) (byte) (-78));
      assertEquals(0, int0);
      
      String string0 = byteString0.toString();
      assertEquals("[hex=b2]", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)81;
      byteString0.rangeEquals(1383, byteArray0, 11, (int) (byte)0);
      // Undeclared exception!
      try { 
        byteString0.write((Buffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8(":V/b;(UrVj_f");
      String string0 = byteString0.base64Url();
      assertEquals("OlYvYjsoVXJWal9m", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(dataInputStream0, dataInputStream0);
      try { 
        ByteString.read(sequenceInputStream0, 16);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.hashCode();
      int int0 = byteString0.lastIndexOf(byteArray0, (int) (byte)116);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-103);
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)51;
      ByteString byteString0 = ByteString.of(byteArray0);
      byteString0.EMPTY.hashCode();
      ByteBuffer byteBuffer0 = byteString0.asByteBuffer();
      ByteString.of(byteBuffer0);
      // Undeclared exception!
      try { 
        Charset.forName("okio.SegmentedByteString");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // okio.SegmentedByteString
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "resizeBuffer() only permitted for read/write buffers");
      ByteString byteString0 = ByteString.decodeHex("");
      assertEquals(0, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)108;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.asByteBuffer();
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
      assertArrayEquals(new byte[] {(byte)80, (byte)77, (byte)61, (byte)57, (byte)0, (byte)0, (byte)108, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)116;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("raZt8U\"2f2]6gv4#0N");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: r
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)87;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toString();
      InflaterSource inflaterSource0 = null;
      try {
        inflaterSource0 = new InflaterSource((BufferedSource) null, (Inflater) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)81;
      byteString0.rangeEquals(1383, byteArray0, 11, (int) (byte)0);
      byteString0.toByteArray();
      byteString0.toByteArray();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("%'*,");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: %
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.substring((-3374), (-3374));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)116;
      byteArray0[0] = (byte)116;
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.indexOf((ByteString) null, 15);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("");
      int int0 = 1383;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte) (-98);
      // Undeclared exception!
      try { 
        byteString0.substring((int) (byte)105, 80);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(0)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte)116;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.toAsciiUppercase();
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)116;
      int int0 = byteString0.indexOf(byteArray1, (int) (byte)116);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      ByteString byteString0 = ByteString.encodeUtf8("");
      Charset charset0 = Charset.defaultCharset();
      byteString0.EMPTY.string(charset0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      ByteString byteString1 = new ByteString(byteArray0);
      int int0 = byteString1.lastIndexOf(byteArray0, (-3485));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      byteString0.EMPTY.string(charset0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      int int1 = ByteString.codePointIndexToCharIndex("", 2);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteString byteString0 = new ByteString(byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)75;
      ByteString byteString1 = new ByteString(byteArray1);
      int int0 = byteString1.EMPTY.indexOf(byteArray0, (int) (byte)75);
      assertEquals((-1), int0);
      
      String string0 = byteString1.toString();
      assertEquals("[text=K]", string0);
      
      Object object0 = new Object();
      boolean boolean0 = byteString1.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)56;
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)116;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toString();
      InflaterSource inflaterSource0 = null;
      try {
        inflaterSource0 = new InflaterSource((BufferedSource) null, (Inflater) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(dataInputStream0, dataInputStream0);
      try { 
        ByteString.read(dataInputStream0, (byte)34);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ByteString.decodeBase64("");
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      try { 
        ByteString.read(sequenceInputStream0, 61);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)16;
      byteArray0[0] = (byte)16;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.sha256();
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)16;
      byteArray1[1] = (byte)16;
      byteArray1[2] = (byte)16;
      byteArray1[3] = (byte)16;
      byteArray1[4] = (byte)16;
      byteArray1[5] = (byte) (-87);
      byteArray1[6] = (byte)16;
      byteArray1[7] = (byte)16;
      // Undeclared exception!
      try { 
        ByteString.of(byteArray1, (int) (byte)16, (int) (byte)16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=8 offset=16 byteCount=16
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "base64 == null");
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HashingSink hashingSink0 = HashingSink.md5(deflaterSink0);
      deflater0.end();
      ByteString byteString0 = hashingSink0.hash();
      HashingSink.sha512(buffer0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      ByteString byteString2 = byteString0.hmacSha512(byteString1);
      Charset charset0 = Charset.defaultCharset();
      byteString2.string(charset0);
      byteString1.sha1();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte) (-128);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[2] = (byte)19;
      byte byte0 = (byte)65;
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, (-1918), (int) (byte)104);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=7 offset=-1918 byteCount=104
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.emitCompleteSegments();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte)124;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha1(bufferedSink0, byteString0);
      ByteString byteString1 = hashingSink0.hash();
      Pipe pipe0 = new Pipe((byte)13);
      Source source0 = pipe0.source();
      HashingSource hashingSource0 = HashingSource.sha1(source0);
      ByteString byteString2 = hashingSource0.hash();
      ByteString byteString3 = byteString1.hmacSha1(byteString2);
      assertFalse(byteString3.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      int int0 = byteString0.lastIndexOf(byteString1, (-3881));
      assertEquals((-1), int0);
      
      byteString0.utf8();
      String string0 = byteString1.toString();
      assertEquals("[hex=22]", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-78);
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      HashingSource hashingSource0 = HashingSource.hmacSha1(realBufferedSource0, byteString0);
      HashingSource.sha1(hashingSource0);
      ByteString byteString1 = hashingSource0.hash();
      byteString0.EMPTY.rangeEquals((int) (byte) (-78), byteString1, (int) (byte) (-78), 84);
      // Undeclared exception!
      try { 
        HashingSource.hmacSha256((Source) null, byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // delegate == null
         //
         verifyException("okio.ForwardingSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Charset charset0 = Charset.defaultCharset();
      Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("", charset0);
      ByteBuffer byteBuffer0 = byteString0.asByteBuffer();
      charset0.decode(byteBuffer0);
      byteString0.utf8 = "";
      byteString0.utf8();
      byteString0.asByteBuffer();
      byte[] byteArray0 = new byte[0];
      int int0 = 1;
      // Undeclared exception!
      try { 
        byteString0.EMPTY.substring(1, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(0)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)108;
      byteArray1[1] = (byte)18;
      byteArray1[2] = (byte) (-44);
      byteArray1[3] = (byte)50;
      byteArray1[4] = (byte)16;
      ByteString byteString0 = new ByteString(byteArray1);
      // Undeclared exception!
      try { 
        byteString0.substring(15);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      HashingSink hashingSink0 = HashingSink.sha256(buffer1);
      ByteString byteString0 = hashingSink0.hash();
      ByteString byteString1 = realBufferedSource0.readByteString(0L);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte) (-39);
      int int0 = byteString1.indexOf(byteArray0, (-559));
      assertEquals((-1), int0);
      
      int int1 = byteString0.lastIndexOf(byteString1);
      assertEquals(32, int1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)122;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiUppercase();
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
      assertArrayEquals(new byte[] {(byte)34, (byte)77, (byte)64, (byte)122}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte)64;
      byteArray0[3] = (byte)122;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiUppercase();
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)122}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      ByteString byteString1 = byteString0.toAsciiUppercase();
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      boolean boolean0 = byteString0.startsWith(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-43);
      byteArray1[1] = (byte)80;
      byteArray1[2] = (byte)122;
      byteArray1[3] = (byte)55;
      byteArray1[4] = (byte)88;
      ByteString byteString1 = new ByteString(byteArray1);
      boolean boolean1 = byteString0.startsWith(byteString1);
      assertFalse(boolean1 == boolean0);
      
      ByteBuffer byteBuffer0 = byteString1.asByteBuffer();
      ByteString byteString2 = ByteString.of(byteBuffer0);
      assertTrue(byteString2.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      Pipe pipe0 = new Pipe(100000000000L);
      Source source0 = pipe0.source();
      HashingSource hashingSource0 = HashingSource.sha1(source0);
      ByteString byteString1 = hashingSource0.hash();
      byteString0.endsWith(byteString1);
      int int0 = byteString1.compareTo(byteString0);
      assertEquals(1, int0);
      
      boolean boolean0 = byteString0.startsWith(byteString1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int1 = ByteString.codePointIndexToCharIndex("\r", 1);
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.substring(1);
      byteString1.base64();
      int int2 = byteString0.compareTo(byteString1);
      assertTrue(int2 == int1);
      assertEquals(1, int2);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      ByteString.codePointIndexToCharIndex("", 11);
      ByteString byteString1 = byteString0.substring(0);
      int int1 = byteString0.compareTo(byteString1);
      assertSame(byteString1, byteString0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer0 = new Buffer();
      BufferedSink bufferedSink0 = buffer0.emit();
      HashingSink hashingSink0 = HashingSink.sha512(bufferedSink0);
      ByteString byteString1 = hashingSink0.hash();
      int int0 = byteString0.indexOf(byteString1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)108;
      byteArray1[1] = (byte)18;
      byteArray1[2] = (byte) (-44);
      byteArray1[3] = (byte)50;
      byteArray1[4] = (byte)16;
      ByteString byteString0 = new ByteString(byteArray1);
      ByteString byteString1 = new ByteString(byteArray0);
      int int0 = byteString0.lastIndexOf(byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteString byteString0 = new ByteString(byteArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("@2b~B");
      Locale locale0 = Locale.FRANCE;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "@2b~B", (Object[]) null);
      byteString0.write(printStream0);
      ByteString byteString1 = new ByteString(byteArray0);
      ByteString byteString2 = ByteString.encodeUtf8("@2b~B");
      assertEquals(5, byteString2.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.base64();
      MockFile mockFile0 = new MockFile("okio.SegmentPool", "y-o#iU[DEa");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      byteString0.write(mockFileOutputStream0);
      assertEquals(5, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.utf8();
      boolean boolean0 = byteString0.endsWith(byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = "";
      ByteString byteString0 = ByteString.decodeBase64("");
      byteString0.base64Url();
      byteString0.toAsciiLowercase();
      String string1 = "X,v4";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("", "X,v4");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)16;
      byteArray0[2] = (byte)87;
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      InputStream inputStream0 = realBufferedSource0.inputStream();
      ByteString byteString1 = ByteString.read(inputStream0, (byte)0);
      byteString0.toString();
      ByteString byteString2 = byteString1.sha512();
      assertEquals(64, byteString2.size());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      boolean boolean0 = byteString0.equals(byteArray0);
      assertFalse(boolean0);
      
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = byteString0;
      Options.of(byteStringArray0);
      int int0 = byteString0.indexOf(byteArray0, (-116));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      boolean boolean0 = byteString1.EMPTY.equals(byteArray0);
      assertFalse(boolean0);
      
      ByteString byteString2 = byteString0.hmacSha512(byteString1);
      assertFalse(byteString2.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteString byteString0 = new ByteString(byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte)11;
      byteArray1[2] = (byte)32;
      byteArray1[3] = (byte) (-3);
      byteArray1[4] = (byte)16;
      byteArray1[5] = (byte)126;
      int int0 = byteString0.indexOf(byteArray1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      byteString0.equals(byteString1);
      ByteString byteString2 = byteString0.toAsciiLowercase();
      assertTrue(byteString2.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)122;
      Pipe pipe0 = new Pipe((byte)122);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      pipe0.sourceClosed = true;
      HashingSource hashingSource0 = HashingSource.sha1(pipe_PipeSource0);
      ByteString byteString0 = hashingSource0.hash();
      byteString0.toString();
      ByteString byteString1 = byteString0.md5();
      assertNotSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)34;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)122;
      Buffer buffer0 = new Buffer();
      GzipSource gzipSource0 = new GzipSource(buffer0);
      HashingSource hashingSource0 = HashingSource.md5(gzipSource0);
      HashingSource hashingSource1 = HashingSource.sha1(hashingSource0);
      ByteString byteString0 = hashingSource1.hash();
      byteString0.indexOf(byteArray0, 2);
      // Undeclared exception!
      try { 
        byteString0.substring(354);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      byteString1.EMPTY.hmacSha256(byteString0);
      byteString0.equals(byteString1);
      // Undeclared exception!
      try { 
        Options.of((ByteString[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      HashingSource hashingSource0 = HashingSource.sha256(inflaterSource0);
      ByteString byteString0 = hashingSource0.hash();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte) (-36);
      byteString0.startsWith(byteArray0);
      byteString0.internalArray();
      byteString0.toString();
      ByteString byteString1 = hashingSource0.hash();
      byteString0.indexOf(byteString1);
      byteString1.utf8();
      byteString0.toString();
      byteString1.size();
      // Undeclared exception!
      try { 
        byteString1.getByte((byte) (-83));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -83
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)16;
      byteArray1[1] = (byte)16;
      byteArray1[2] = (byte)16;
      byteArray1[3] = (byte)16;
      byteArray1[4] = (byte)16;
      byteArray1[5] = (byte)16;
      byteArray1[6] = (byte)16;
      ByteString byteString0 = new ByteString(byteArray1);
      byteString0.base64();
      ByteString byteString1 = byteString0.substring(1);
      assertEquals(6, byteString1.size());
      
      byteString0.base64();
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      realBufferedSource0.inputStream();
      ByteString byteString2 = new ByteString(byteArray0);
      ByteString byteString3 = byteString2.toAsciiLowercase();
      assertSame(byteString3, byteString2);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.md5();
      ByteString byteString2 = new ByteString(byteArray0);
      int int0 = byteString2.lastIndexOf(byteArray0);
      assertEquals(0, int0);
      
      boolean boolean0 = byteString0.equals(byteString1);
      assertFalse(boolean0);
      
      ByteString byteString3 = new ByteString(byteArray0);
      assertTrue(byteString3.equals((Object)byteString2));
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte)64;
      byteArray0[3] = (byte)122;
      ByteString byteString0 = new ByteString(byteArray0);
      Pipe pipe0 = new Pipe((byte)122);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource hashingSource0 = HashingSource.md5(pipe_PipeSource0);
      GzipSource gzipSource0 = new GzipSource(hashingSource0);
      HashingSource hashingSource1 = HashingSource.sha256(gzipSource0);
      ByteString byteString1 = hashingSource1.hash();
      ByteString byteString2 = byteString1.toAsciiUppercase();
      byteString2.sha256();
      assertNotSame(byteString2, byteString1);
      assertFalse(byteString2.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte)105;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.equals(byteArray0);
      ByteString byteString1 = byteString0.toAsciiUppercase();
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
      assertArrayEquals(new byte[] {(byte)115, (byte)6, (byte) (-75), (byte)105}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte) (-11);
      byteArray0[6] = (byte)39;
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte) (-44);
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer0, byteString0);
      HashingSink hashingSink1 = HashingSink.sha256(hashingSink0);
      ByteString byteString1 = hashingSink1.hash();
      int int0 = byteString1.compareTo(byteString0);
      assertEquals(1, int0);
      
      int int1 = byteString0.indexOf(byteArray0, 7);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      Deflater deflater0 = new Deflater();
      byteString0.equals(byteArray0);
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource(buffer0, inflater0);
      HashingSource hashingSource0 = HashingSource.hmacSha256(inflaterSource0, byteString0);
      Source source0 = hashingSource0.delegate();
      HashingSource hashingSource1 = HashingSource.sha1(source0);
      ByteString byteString1 = hashingSource1.hash();
      byteString0.compareTo(byteString1);
      ByteString byteString2 = new ByteString((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      Deflater deflater0 = new Deflater();
      boolean boolean0 = byteString0.equals("");
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource(buffer0, inflater0);
      inflaterSource0.refill();
      HashingSource.hmacSha256(inflaterSource0, byteString0);
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer0, byteString0);
      hashingSource0.delegate();
      HashingSource.sha1(hashingSource0);
      ByteString byteString1 = hashingSource0.hash();
      boolean boolean1 = byteString0.rangeEquals(1440, byteString1, 50, 58);
      assertTrue(boolean1 == boolean0);
      
      int int0 = byteString1.compareTo(byteString0);
      assertEquals(1, int0);
      
      ByteString byteString2 = new ByteString(byteArray0);
      assertTrue(byteString2.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      ByteString.codePointIndexToCharIndex("\n", 85);
      // Undeclared exception!
      try { 
        byteString0.substring(85);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }
}
