/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 06:10:22 GMT 2018
 */

package org.apache.commons.math3.ode.nonstiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondaryEquations;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EmbeddedRungeKuttaIntegrator_ESTest extends EmbeddedRungeKuttaIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1.0, 1.0, 1.0, 1.0);
      highamHall54Integrator0.setStepSizeControl(1.0, 4155.1362, 1.0, 1.0);
      highamHall54Integrator0.getOrder();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      highamHall54Integrator0.integrate(expandableStatefulODE0, 398.750510065);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(721.76, 7052.6594, 1442.019961443, 10.0);
      dormandPrince853Integrator0.getEventHandlers();
      dormandPrince853Integrator0.getOrder();
      dormandPrince853Integrator0.clearStepHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      dormandPrince853Integrator0.integrate(expandableStatefulODE0, (-2270.3));
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-106.02789463360077);
      doubleArray0[1] = (-106.02789463360077);
      doubleArray0[2] = (-106.02789463360077);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-106.02789463360077), (-106.02789463360077), doubleArray0, doubleArray0);
      double double0 = dormandPrince853Integrator0.getMaxGrowth();
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(10.0, double0, 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 0.0, 0.0, 0.0);
      double double0 = highamHall54Integrator0.getMaxGrowth();
      assertEquals(10.0, double0, 0.01);
      
      double double1 = highamHall54Integrator0.getMinReduction();
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(0.2, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1.0, 520.02807622, 1.0, 520.02807622);
      highamHall54Integrator0.setStepSizeControl(520.02807622, 0.0, 520.02807622, 520.02807622);
      highamHall54Integrator0.getOrder();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime((-5.451390316294111E-8));
      try { 
        highamHall54Integrator0.integrate(expandableStatefulODE0, 398.750510065);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minimal step size (5.20E02) reached, integration needs 0.00E00
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1.0, 1.0, 1.0, 1.0);
      LinkedList<EventHandler> linkedList0 = new LinkedList<EventHandler>();
      dormandPrince853Integrator0.getOrder();
      dormandPrince853Integrator0.clearStepHandlers();
      double[][] doubleArray0 = new double[0][2];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 1.0;
      double double0 = 1519.1046342011;
      doubleArray1[3] = 1519.1046342011;
      doubleArray1[4] = 1.0;
      dormandPrince853Integrator0.estimateError(doubleArray0, doubleArray1, doubleArray1, 0.0);
      double double1 = (-3.448944157854234E-8);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 0.6724261045455933, doubleArray1, doubleArray1);
      highamHall54Integrator0.setStepSizeControl((-5.451390316294111E-8), 0.2637145055999756, doubleArray1, doubleArray1);
      double double2 = 956.316850586;
      highamHall54Integrator0.setStepSizeControl(2604.04, Double.NaN, 0.0, 956.316850586);
      highamHall54Integrator0.getOrder();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter1);
      expandableStatefulODE0.setTime((-356.261265582594));
      // Undeclared exception!
      highamHall54Integrator0.integrate(expandableStatefulODE0, (-2.3718944120137026E-7));
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1.0, 1.0, 1.0, 1.0);
      dormandPrince853Integrator0.getOrder();
      double[][] doubleArray0 = new double[0][3];
      double[] doubleArray1 = new double[3];
      dormandPrince853Integrator0.clearStepHandlers();
      dormandPrince853Integrator0.estimateError(doubleArray0, doubleArray1, doubleArray1, 1.0);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1.0, 8, doubleArray1, doubleArray1);
      highamHall54Integrator0.setStepSizeControl(3091.280109071466, 3091.280109071466, 1.0, (-3.448944157854234E-8));
      int int0 = Double.MIN_EXPONENT;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      SecondaryEquations secondaryEquations0 = mock(SecondaryEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondaryEquations0).getDimension();
      expandableStatefulODE0.addSecondaryEquations(secondaryEquations0);
      expandableStatefulODE0.setTime(1080.3692);
      dormandPrince853Integrator0.setSafety(8);
      highamHall54Integrator0.integrate(expandableStatefulODE0, (-3.448944157854234E-8));
      Double double0 = new Double(Double.NaN);
      highamHall54Integrator0.getMinReduction();
      double double1 = highamHall54Integrator0.getSafety();
      assertEquals(15, highamHall54Integrator0.getEvaluations());
      assertEquals(0.9, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1442.019961443, 2.3318915367126465, doubleArray0, doubleArray0);
      int int0 = 0;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      dormandPrince853Integrator0.setInitialStepSize(2.3318915367126465);
      double double0 = (-995.251387809175);
      // Undeclared exception!
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2.3318915367126465, doubleArray0, 1442.019961443, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1.0, 1.0, 1.0, 1.0);
      LinkedList<EventHandler> linkedList0 = new LinkedList<EventHandler>();
      dormandPrince853Integrator0.getOrder();
      double[][] doubleArray0 = new double[0][3];
      double[] doubleArray1 = new double[3];
      dormandPrince853Integrator0.clearStepHandlers();
      dormandPrince853Integrator0.clearStepHandlers();
      dormandPrince853Integrator0.estimateError(doubleArray0, doubleArray1, doubleArray1, 1.0);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1.8349670703969982E-34), 1200.806371069, doubleArray1, doubleArray1);
      highamHall54Integrator0.setStepSizeControl(3091.280109071466, 3091.280109071466, 1.0, (-3.448944157854234E-8));
      highamHall54Integrator0.getOrder();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      SecondaryEquations secondaryEquations0 = mock(SecondaryEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondaryEquations0).getDimension();
      expandableStatefulODE0.addSecondaryEquations(secondaryEquations0);
      expandableStatefulODE0.setTime(1080.3692);
      // Undeclared exception!
      highamHall54Integrator0.integrate(expandableStatefulODE0, (-3.448944157854234E-8));
  }
}
