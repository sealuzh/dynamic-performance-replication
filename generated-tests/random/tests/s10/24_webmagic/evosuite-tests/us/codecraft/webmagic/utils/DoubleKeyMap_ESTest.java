/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 18:53:38 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DoubleKeyMap<String, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Object, Integer>();
      Object object0 = new Object();
      Integer integer0 = doubleKeyMap0.remove("", object0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HashMap<String, Map<String, String>> hashMap0 = new HashMap<String, Map<String, String>>();
      DoubleKeyMap<String, String, String> doubleKeyMap0 = new DoubleKeyMap<String, String, String>(hashMap0);
      Map<String, String> map0 = doubleKeyMap0.get("");
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HashMap<Integer, Map<String, Object>> hashMap0 = new HashMap<Integer, Map<String, Object>>();
      DoubleKeyMap<Integer, String, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Object>(hashMap0);
      Integer integer0 = new Integer((-1));
      DoubleKeyMap<String, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<String, Object, Integer>();
      Object object0 = doubleKeyMap0.remove(integer0, "");
      doubleKeyMap1.put("", (Object) doubleKeyMap0, integer0);
      Integer integer1 = doubleKeyMap1.remove("", object0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Object>(class0);
      Object object0 = doubleKeyMap0.remove("", (Integer) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HashMap<Integer, Map<String, Object>> hashMap0 = new HashMap<Integer, Map<String, Object>>();
      DoubleKeyMap<Integer, String, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Object>(hashMap0);
      Integer integer0 = new Integer((-1));
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Object, Object> doubleKeyMap1 = new DoubleKeyMap<String, Object, Object>(class0);
      Map<String, Object> map0 = doubleKeyMap1.newMap();
      hashMap0.put(integer0, map0);
      doubleKeyMap0.remove(integer0, "");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      HashMap<Integer, Map<String, String>> hashMap0 = new HashMap<Integer, Map<String, String>>();
      Class<Map> class0 = Map.class;
      Integer integer0 = new Integer(445);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap0.put(integer0, hashMap1);
      DoubleKeyMap<Integer, String, String> doubleKeyMap0 = new DoubleKeyMap<Integer, String, String>(hashMap0, class0);
      String string0 = doubleKeyMap0.put(integer0, "us.codecraft.webmagic.utils.MultiKeyMapBase", "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      HashMap<Map<Integer, Object>, Map<HashMap<String, String>, HashMap<Object, String>>> hashMap0 = new HashMap<Map<Integer, Object>, Map<HashMap<String, String>, HashMap<Object, String>>>();
      DoubleKeyMap<Map<Integer, Object>, HashMap<String, String>, HashMap<Object, String>> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, Object>, HashMap<String, String>, HashMap<Object, String>>(hashMap0);
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      doubleKeyMap0.put((Map<Integer, Object>) hashMap1, hashMap2, (HashMap<Object, String>) null);
      HashMap<Object, String> hashMap3 = doubleKeyMap0.get((Map<Integer, Object>) hashMap1, hashMap2);
      assertNull(hashMap3);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DoubleKeyMap<HashMap<String, Object>, String, HashMap<Integer, Integer>> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, String, HashMap<Integer, Integer>>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      HashMap<Integer, Integer> hashMap1 = doubleKeyMap0.get(hashMap0, "9U,JqOA(U^_ 5X");
      assertNull(hashMap1);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<Object, Object>, Integer, HashMap<Object, Map<Integer, Object>>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, Integer, HashMap<Object, Map<Integer, Object>>>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      DoubleKeyMap<Object, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, String>();
      Integer integer0 = new Integer(1);
      Map<Integer, String> map0 = doubleKeyMap0.remove((Object) integer0);
      assertNull(map0);
  }
}
