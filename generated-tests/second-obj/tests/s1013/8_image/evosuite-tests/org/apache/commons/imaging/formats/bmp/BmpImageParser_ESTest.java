/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 01:44:43 GMT 2018
 */

package org.apache.commons.imaging.formats.bmp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Dimension;
import java.awt.image.BufferedImage;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Map;
import java.util.function.BiFunction;
import javax.accessibility.AccessibleContext;
import javax.swing.DebugGraphics;
import javax.swing.JLayeredPane;
import javax.swing.JSplitPane;
import javax.swing.KeyStroke;
import javax.swing.ScrollPaneConstants;
import javax.swing.text.AbstractDocument;
import org.apache.commons.imaging.ImageFormat;
import org.apache.commons.imaging.ImageFormats;
import org.apache.commons.imaging.ImageInfo;
import org.apache.commons.imaging.common.bytesource.ByteSource;
import org.apache.commons.imaging.common.bytesource.ByteSourceArray;
import org.apache.commons.imaging.common.bytesource.ByteSourceFile;
import org.apache.commons.imaging.common.bytesource.ByteSourceInputStream;
import org.apache.commons.imaging.formats.bmp.BmpImageParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BmpImageParser_ESTest extends BmpImageParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      byte[] byteArray0 = new byte[16];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      try { 
        bmpImageParser0.getFormatCompliance((ByteSource) byteSourceArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(pipedInputStream0, ",iN&?Aj+Q");
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      String string0 = bmpImageParser0.getXmpXml(byteSourceInputStream0, hashtable0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      String string0 = bmpImageParser0.getDefaultExtension();
      assertEquals(".bmp", string0);
      
      bmpImageParser0.getAcceptedTypes();
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)110;
      try { 
        bmpImageParser0.dumpImageFile(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      byte[] byteArray0 = new byte[6];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      try { 
        bmpImageParser0.getImageSize((ByteSource) byteSourceArray0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      byte[] byteArray0 = new byte[19];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      ArrayList<BufferedImage> arrayList0 = new ArrayList<BufferedImage>();
      ByteSourceArray byteSourceArray1 = new ByteSourceArray(byteArray0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      KeyStroke.getKeyStroke(101, 101, true);
      hashMap0.entrySet();
      hashMap0.put("STRICT", byteSourceArray0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      try { 
        bmpImageParser0.getBufferedImage((InputStream) null, (Map<String, Object>) hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown parameter: STRICT
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[19];
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("alphaMask", bmpImageParser0);
      try { 
        bmpImageParser0.getImageInfo(byteArray0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown parameter: alphaMask
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      byte[] byteArray0 = new byte[8];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String string0 = "BUFFERED_IMAGE_FACTORY";
      hashMap0.put("BUFFERED_IMAGE_FACTORY", byteSourceArray0);
      try { 
        bmpImageParser0.getBufferedImage((ByteSource) byteSourceArray0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      MockPrintStream mockPrintStream0 = new MockPrintStream("VERBOSE");
      // Undeclared exception!
      try { 
        bmpImageParser0.writeImage((BufferedImage) null, mockPrintStream0, (Map<String, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.palette.PaletteFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      ByteSource byteSource0 = null;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      hashMap0.put("(^]Y_4/9E-,t1", integer0);
      try { 
        bmpImageParser0.getImageSize((ByteSource) null, (Map<String, Object>) hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown parameter: (^]Y_4/9E-,t1
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      byte[] byteArray0 = new byte[19];
      try { 
        bmpImageParser0.getImageSize(byteArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid/unsupported BMP file
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      File file0 = MockFile.createTempFile("BUFFERED_IMAGE_FACTORY", "1/4sj$F9 _$D0@=.),#", (File) null);
      bmpImageParser0.getBufferedImage(file0, (Map<String, Object>) hashMap0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "BUFFERED_IMAGE_FACTORY");
      ByteSourceArray byteSourceArray0 = new ByteSourceArray((byte[]) null);
      ByteSourceArray byteSourceArray1 = new ByteSourceArray((byte[]) null);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      BiFunction<Object, Object, KeyStroke> biFunction0 = (BiFunction<Object, Object, KeyStroke>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashtable0.merge("VERBOSE", bmpImageParser0, biFunction0);
      // Undeclared exception!
      try { 
        bmpImageParser0.getImageSize((ByteSource) byteSourceArray1, (Map<String, Object>) hashtable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      String string0 = "VERBOSE";
      MockPrintStream mockPrintStream0 = new MockPrintStream("VERBOSE");
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      String string1 = "";
      hashtable0.put("", "");
      try { 
        bmpImageParser0.writeImage((BufferedImage) null, mockPrintStream0, hashtable0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown parameter: 
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      MockFile mockFile0 = new MockFile("Parsing XPM file failed, no 'char' token");
      MockFile mockFile1 = new MockFile("Parsing XPM file failed, no 'char' token", "Parsing XPM file failed, no 'char' token");
      File file0 = mockFile1.getCanonicalFile();
      mockFile1.delete();
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(file0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte)126;
      byteArray0[5] = (byte)91;
      bmpImageParser0.getName();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      hashMap0.put("VERBOSE", "Parsing XPM file failed, no 'char' token");
      bmpImageParser0.getICCProfileBytes((ByteSource) byteSourceFile0, (Map<String, Object>) hashMap0);
      byteArray0[5] = (byte)29;
      try { 
        bmpImageParser0.getImageInfo(byteArray0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      MockPrintStream mockPrintStream0 = new MockPrintStream("FORMAT");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      hashtable0.put("FORMAT", bmpImageParser0);
      // Undeclared exception!
      try { 
        bmpImageParser0.writeImage((BufferedImage) null, mockPrintStream0, hashtable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.palette.PaletteFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      MockFile mockFile0 = new MockFile("Parsing XPM file failed, no 'char' token");
      MockFile mockFile1 = new MockFile(mockFile0, "Parsing XPM file failed, no 'char' token");
      mockFile1.setReadOnly();
      File file0 = mockFile1.getCanonicalFile();
      file0.setReadOnly();
      mockFile1.delete();
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(file0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/8_image/Parsing XPM file failed, no 'char' token/Parsing XPM file failed, no 'char' token");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Parsing XPM file failed, no 'char' token");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "Parsing XPM file failed, no 'char' token");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "BUFFERED_IMAGE_FACTORY");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "Parsing XPM file failed, no 'char' token");
      bmpImageParser0.getName();
      try { 
        bmpImageParser0.getBufferedImage((ByteSource) byteSourceFile0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      byte[] byteArray0 = new byte[3];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[1] = (byte)7;
      String string0 = AbstractDocument.ParagraphElementName;
      MockPrintStream mockPrintStream0 = new MockPrintStream("paragraph");
      mockPrintStream0.print(77);
      BufferedImage bufferedImage0 = new BufferedImage(96, (byte)7, (byte)7);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, (String) null);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      Hashtable<String, Object> hashtable1 = new Hashtable<String, Object>();
      bmpImageParser0.writeImage(bufferedImage0, mockPrintStream0, hashtable1);
      MockFile mockFile0 = new MockFile("paragraph");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      try { 
        bmpImageParser0.getImageInfo((ByteSource) byteSourceFile0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File count: -1 read: 6 length: 262144
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      byte[] byteArray0 = new byte[7];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/8_image/paragraph");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      byteArray0[1] = (byte)2;
      FileSystemHandling.appendLineToFile(evoSuiteFile0, (String) null);
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, true);
      String string0 = AccessibleContext.ACCESSIBLE_CHILD_PROPERTY;
      MockPrintStream mockPrintStream0 = new MockPrintStream("AccessibleChild");
      BufferedImage bufferedImage0 = new BufferedImage((byte)2, (byte)2, (byte)2);
      bufferedImage0.flush();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      bmpImageParser0.writeImage(bufferedImage0, mockPrintStream0, hashMap0);
      MockFile mockFile0 = new MockFile("AccessibleChild");
      mockFile0.renameTo(mockFile0);
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      ByteSourceFile byteSourceFile1 = new ByteSourceFile(mockFile0);
      byteSourceFile0.getInputStream();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      bmpImageParser0.getBufferedImage((ByteSource) byteSourceFile0, (Map<String, Object>) hashMap0);
      assertEquals(66L, mockFile0.length());
      assertEquals(66L, byteSourceFile0.getLength());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)110;
      String string0 = AbstractDocument.ParagraphElementName;
      MockPrintStream mockPrintStream0 = new MockPrintStream("paragraph");
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      BufferedImage bufferedImage0 = new BufferedImage(85, (byte)2, (byte)2);
      Hashtable<String, Object> hashtable1 = new Hashtable<String, Object>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      bmpImageParser0.writeImage(bufferedImage0, mockPrintStream0, hashMap0);
      MockFile mockFile0 = new MockFile("paragraph");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      MockFile mockFile1 = new MockFile("PIXEL_DENSITY");
      ByteSourceFile byteSourceFile1 = new ByteSourceFile(mockFile0);
      InputStream inputStream0 = byteSourceFile0.getInputStream();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      bufferedImage0.toString();
      ByteSourceArray byteSourceArray0 = new ByteSourceArray("BufferedImage@f75c729: type = 2 DirectColorModel: rmask=ff0000 gmask=ff00 bmask=ff amask=ff000000 IntegerInterleavedRaster: width = 85 height = 2 #Bands = 4 xOff = 0 yOff = 0 dataOffset[0] 0", byteArray0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      HashMap<String, Object> hashMap2 = new HashMap<String, Object>();
      Dimension dimension0 = new Dimension();
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(inputStream0, "PIXEL_DENSITY");
      bmpImageParser0.getFormatCompliance((ByteSource) byteSourceInputStream0);
      ImageFormat[] imageFormatArray0 = bmpImageParser0.getAcceptedTypes();
      assertNotNull(imageFormatArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)2;
      String string0 = AbstractDocument.ParagraphElementName;
      MockPrintStream mockPrintStream0 = new MockPrintStream("paragraph");
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      BufferedImage bufferedImage0 = new BufferedImage(85, (byte)2, (byte)2);
      Hashtable<String, Object> hashtable1 = new Hashtable<String, Object>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      bmpImageParser0.writeImage(bufferedImage0, mockPrintStream0, hashMap0);
      MockFile mockFile0 = new MockFile("paragraph");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      MockFile mockFile1 = new MockFile("PIXEL_DENSITY");
      ByteSourceArray byteSourceArray0 = new ByteSourceArray("paragraph", byteArray0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      HashMap<String, Object> hashMap2 = new HashMap<String, Object>();
      Dimension dimension0 = new Dimension();
      String string1 = bmpImageParser0.getDefaultExtension();
      assertEquals(".bmp", string1);
      
      String string2 = ScrollPaneConstants.LOWER_RIGHT_CORNER;
      ImageInfo imageInfo0 = bmpImageParser0.getImageInfo((ByteSource) byteSourceFile0, (Map<String, Object>) hashtable0);
      assertTrue(imageInfo0.usesPalette());
      assertEquals("Bmp (BM: Windows 3.1x, 95, NT,)", imageInfo0.getFormatDetails());
      
      bmpImageParser0.getMetadata((ByteSource) byteSourceFile0, (Map<String, Object>) hashMap1);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      byte[] byteArray0 = new byte[7];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/8_image/paragraph");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      byteArray0[1] = (byte)2;
      FileSystemHandling.appendLineToFile(evoSuiteFile0, (String) null);
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, true);
      String string0 = AccessibleContext.ACCESSIBLE_CHILD_PROPERTY;
      MockPrintStream mockPrintStream0 = new MockPrintStream("AccessibleChild");
      BufferedImage bufferedImage0 = new BufferedImage((byte)2, (byte)2, (byte)2);
      bufferedImage0.flush();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      bmpImageParser0.writeImage(bufferedImage0, mockPrintStream0, hashMap0);
      MockFile mockFile0 = new MockFile("AccessibleChild");
      mockFile0.renameTo(mockFile0);
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      ByteSourceFile byteSourceFile1 = new ByteSourceFile(mockFile0);
      byteSourceFile0.getInputStream();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Dimension dimension0 = bmpImageParser0.getImageSize((ByteSource) byteSourceFile0, (Map<String, Object>) hashMap0);
      assertEquals(2, dimension0.height);
      assertEquals(66L, mockFile0.length());
      assertEquals(2, dimension0.width);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)110;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/8_image");
      FileSystemHandling.createFolder(evoSuiteFile0);
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-76);
      String string0 = AbstractDocument.ParagraphElementName;
      MockPrintStream mockPrintStream0 = new MockPrintStream("paragraph");
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      mockPrintStream0.print((-764L));
      BufferedImage bufferedImage0 = new BufferedImage(96, (byte)7, (byte)7);
      Hashtable<String, Object> hashtable1 = new Hashtable<String, Object>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      bmpImageParser0.writeImage(bufferedImage0, mockPrintStream0, hashMap0);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "paragraph");
      MockFile mockFile0 = new MockFile("paragraph");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      byteSourceFile0.getAll();
      MockFile mockFile1 = new MockFile("#k!");
      ByteSourceFile byteSourceFile1 = new ByteSourceFile(mockFile0);
      byteSourceFile0.getAll();
      try { 
        bmpImageParser0.getBufferedImage((ByteSource) byteSourceFile0, (Map<String, Object>) hashtable1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // BMP: Unknown Compression: 65537
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      byte[] byteArray0 = new byte[3];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[1] = (byte)7;
      String string0 = AbstractDocument.ParagraphElementName;
      MockPrintStream mockPrintStream0 = new MockPrintStream("paragraph");
      mockPrintStream0.print((int) (byte)7);
      BufferedImage bufferedImage0 = new BufferedImage(96, (byte)7, (byte)7);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, (String) null);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      Hashtable<String, Object> hashtable1 = new Hashtable<String, Object>();
      bmpImageParser0.writeImage(bufferedImage0, mockPrintStream0, hashtable1);
      MockFile mockFile0 = new MockFile("paragraph");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      byte[] byteArray1 = byteSourceFile0.getAll();
      Dimension dimension0 = new Dimension(96, 96);
      bmpImageParser0.getAcceptedExtensions();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      KeyStroke keyStroke0 = KeyStroke.getKeyStroke((int) (byte)7, 96);
      hashtable0.remove((Object) keyStroke0);
      try { 
        bmpImageParser0.getAllBufferedImages(byteArray1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File count: -1 read: 5 length: 4594
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }
}
