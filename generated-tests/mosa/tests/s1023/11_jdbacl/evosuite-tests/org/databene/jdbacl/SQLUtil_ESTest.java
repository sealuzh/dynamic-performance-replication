/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 13:55:39 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataOutputStream;
import java.io.File;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.time.Clock;
import java.time.chrono.ThaiBuddhistDate;
import java.util.List;
import java.util.Locale;
import java.util.concurrent.ThreadPoolExecutor;
import org.apache.derby.iapi.sql.compile.Optimizer;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.store.raw.log.LogToFile;
import org.databene.commons.bean.UntypedPropertyMutator;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.FKChangeRule;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl;
import org.firebirdsql.jdbc.FBConnectionProperties;
import org.h2.value.ValueDecimal;
import org.hsqldb.lib.FileUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = AbstractJavaGDSImpl.PURE_JAVA_TYPE_NAME;
      SQLUtil.mutatesDataOrStructure("PURE_JAVA");
      SQLUtil.normalize("qc@G3YvJV/';H=B", true);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("PURE_JAVA", stringBuilder0);
      assertEquals("PURE_JAVA", stringBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("alter table");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.typeAndName((DBObject) null);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, (-1879658051), " ADD ");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("null  ADD  NULL", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SQLUtil.removeComments("org.apache.derby.impl.sql.catalog.SYSPERMSRowFactory");
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.leftJoin("org.apache.derby.impl.sql.catalog.SYSPERMSRowFactory", stringArray0, "org.apache.derby.impl.sql.catalog.SYSPERMSRowFactory", (String) null, stringArray0);
      assertEquals("left join org.apache.derby.impl.sql.catalog.SYSPERMSRowFactory as null on ", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "cv#f{O(+n!D}{ib;4";
      stringArray0[1] = "cv#f{O(+n!D}{ib;4";
      String string0 = SQLUtil.innerJoin("cv#f{O(+n!D}{ib;4", stringArray0, "R`CG^", "cv#f{O(+n!D}{ib;4", stringArray0);
      assertEquals("R`CG^ as cv#f{O(+n!D}{ib;4 on cv#f{O(+n!D}{ib;4.cv#f{O(+n!D}{ib;4 = cv#f{O(+n!D}{ib;4.cv#f{O(+n!D}{ib;4 and cv#f{O(+n!D}{ib;4.cv#f{O(+n!D}{ib;4 = cv#f{O(+n!D}{ib;4.cv#f{O(+n!D}{ib;4", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.typeAndName(defaultDBTable0);
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnListWithTableName("table null", stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SQLUtil.removeComments("r+m");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "r+m";
      stringArray0[1] = "r+m";
      String string0 = SQLUtil.renderColumnListWithTableName((String) null, stringArray0);
      assertEquals("null.r+m, null.r+m", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("yW1", true, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("yW1", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall(" DEFAULT ");
      assertFalse(boolean0);
      
      String string0 = SQLUtil.renderValue(" DEFAULT ");
      assertEquals("' DEFAULT '", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("select into");
      assertFalse(boolean0);
      
      String string0 = SQLUtil.normalize("select into", false);
      assertEquals("select into", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = SQLUtil.normalize("+|_.C)%xm/c4O6", true);
      assertEquals("+ | _.C) % xm / c4O6", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = SQLUtil.removeComments("drp index");
      Boolean boolean0 = Boolean.TRUE;
      String[] stringArray0 = new String[0];
      String string1 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("yTxsAe01<2LU");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "yTxsAe01<2LU";
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM yTxsAe01<2LU WHERE yTxsAe01<2LU = 'yTxsAe01<2LU'", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ValueDecimal valueDecimal0 = (ValueDecimal)ValueDecimal.ZERO;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Tyt?nM6W{l|mQm;q/Bu";
      stringArray0[1] = "Tyt?nM6W{l|mQm;q/Bu";
      stringArray0[2] = "Tyt?nM6W{l|mQm;q/Bu";
      stringArray0[3] = "Tyt?nM6W{l|mQm;q/Bu";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("Tyt?nM6W{l|mQm;q/Bu = 'Tyt?nM6W{l|mQm;q/Bu' AND Tyt?nM6W{l|mQm;q/Bu = 'Tyt?nM6W{l|mQm;q/Bu' AND Tyt?nM6W{l|mQm;q/Bu = 'Tyt?nM6W{l|mQm;q/Bu' AND Tyt?nM6W{l|mQm;q/Bu = 'Tyt?nM6W{l|mQm;q/Bu'", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
      
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "],", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ()", string1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("MismatchedNotSetException(", false, "Provided Reader failed.", "execute");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT MismatchedNotSetException( ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SQLUtil.normalize("qc@G3YvJV/';H=B", false);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockFile mockFile0 = new MockFile("CURRENT", "CURRENT");
      File file0 = FileUtil.canonicalFile((File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "CURRENT");
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("qn>Q?S~B", true, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      assertEquals(FKChangeRule.NO_ACTION, dBForeignKeyConstraint0.getDeleteRule());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("ud=mSB.!Znkx%]o'", false, defaultDBTable0, "sleep");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK sleep", string0);
      
      String string1 = SQLUtil.renderValue("ud=mSB.!Znkx%]o'");
      assertEquals("'ud=mSB.!Znkx%]o''", string1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = FBConnectionProperties.LOCAL_ENCODING_PROPERTY;
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("localEncoding");
      assertNull(boolean0);
      
      String string1 = SQLUtil.normalize("//", false);
      assertEquals("/ /", string1);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("/ /");
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("/ /", defaultDBTable0, 911, "alter materialized view>^hmb=dp^|a).vk");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string2 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = Optimizer.MAX_MEMORY_PER_TABLE;
      SQLUtil.mutatesDataOrStructure("derby.language.maxMemoryPerTable");
      StringBuilder stringBuilder0 = new StringBuilder("derby.language.maxMemoryPerTable");
      SQLUtil.addRequiredCondition("derby.language.maxMemoryPerTable", stringBuilder0);
      assertEquals("derby.language.maxMemoryPerTable and derby.language.maxMemoryPerTable", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("s,'Y'F*");
      SQLUtil.normalize("qc@G3YvJV/';H=B", false);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "qc @ G3YvJV / ';H=B'");
      SQLUtil.addOptionalCondition("", stringBuilder0);
      assertEquals("qc @ G3YvJV / ';H=B' or ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("exec");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = FBConnectionProperties.LOCAL_ENCODING_PROPERTY;
      Boolean boolean0 = Boolean.FALSE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("insert//");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("localEncoding", true, defaultDBTable0, "call");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT localEncoding CHECK call", string1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      Clock clock0 = MockClock.systemDefaultZone();
      MockThaiBuddhistDate.now(clock0);
      SQLUtil.renderValue(mockThaiBuddhistDate0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("z#2bB");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("NbIHaT.F;Q*TRMr-f&", false, dBPrimaryKeyConstraint0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = new DBPrimaryKeyConstraint(defaultDBTable0, "drop index", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      File file0 = FileUtil.canonicalFile("-]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("SYSSCHEMAS", false, "insertexecfrn$3t)l&n[", "i+to");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK i+to", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("qc@G3YvJV/';H=B");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      String string1 = SQLUtil.normalize("- 0", false);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "/4y 1qt8sdrY[6'K_", true, (String[]) null);
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("CONSTRAINT \"/4y 1qt8sdrY[6'K_\" ", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.normalize("XhxN7tr3N!Gp(v`}ILG", true);
      assertEquals("XhxN7tr3N ! Gp (v ` } ILG", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.setDoc("?*Vw\"6igrpEW");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "?*Vw\"6igrpEW", false, (String[]) null);
      defaultDBTable0.isIdentical(dBUniqueConstraint0);
      SQLUtil.constraintName(dBUniqueConstraint0);
      SQLUtil.normalize("CONSTRAINT ?*Vw\"6igrpEW ", false);
      SQLUtil.ownerDotComponent(dBUniqueConstraint0);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("KTD1/QS:NEr)rW_");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("drop index;2beyv");
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      String string0 = SQLUtil.normalize("drop index;2beyv", false);
      assertEquals("drop index ; 2beyv", string0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.derby.catalog.AliasInfo");
      mockPrintWriter0.append((CharSequence) "drop index;2beyv");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" (");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter materialized view>^hmb=dp^|a).vk", defaultDBTable0, (-1583), "?3i");
      DBColumn[] dBColumnArray0 = new DBColumn[4];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      String string1 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("alter materialized view>^hmb=dp^|a).vk, alter materialized view>^hmb=dp^|a).vk, alter materialized view>^hmb=dp^|a).vk, alter materialized view>^hmb=dp^|a).vk", string1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = SQLUtil.normalize("{x{s7D*+cAFaI[3aZyB", false);
      assertEquals("{ x { s7D * + cAFaI [ 3aZyB", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SQLUtil.removeComments("O");
      String string0 = SQLUtil.substituteMarkers("O", "O5XkM1?f?++cp'oT4J", "O5XkM1?f?++cp'oT4J");
      TableContainer tableContainer0 = new TableContainer("O");
      String string1 = SQLUtil.ownerDotComponent(tableContainer0);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("delete");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = Optimizer.MAX_MEMORY_PER_TABLE;
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("derby.language.maxMemoryPerTable");
      assertNull(boolean0);
      
      Character character0 = new Character('I');
      String string1 = SQLUtil.substituteMarkers("derby.language.maxMemoryPerTable", "derby.language.maxMemoryPerTable", character0);
      String string2 = SQLUtil.normalize("'I'", false);
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = SQLUtil.normalize("exec;fv6$:bk,eo", true);
      assertEquals("exec ; fv6 $ : bk, eo", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = "";
      String[] stringArray0 = new String[5];
      stringArray0[3] = "";
      stringArray0[4] = "";
      UntypedPropertyMutator untypedPropertyMutator0 = new UntypedPropertyMutator("}zqm<P~xu=", false);
      SQLUtil.substituteMarkers("", "", stringArray0[1]);
      SQLUtil.normalize("-- rollback ", false);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      UntypedPropertyMutator untypedPropertyMutator0 = new UntypedPropertyMutator("{x7D*+cAFaI[3aZyB", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, true, (String) null, "VL*cHjMk");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK VL*cHjMk", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      UntypedPropertyMutator untypedPropertyMutator0 = new UntypedPropertyMutator("{x7D*+cAFaI[3aZyB", true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "{x7D*+cAFaI[3aZyB", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("alter index", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(dBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals("table", dBTable0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(90087, "!}i9:\"j2B}<1-/0");
      Integer integer0 = new Integer(90087);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("!}i9:\"j2B}<1-/0", defaultDBTable0, dBDataType0, integer0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getName());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now(clock0);
      SQLUtil.renderValue(thaiBuddhistDate0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("execfrn$3t)l&n[");
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = " = ";
      stringArray0[3] = "ThaiBuddhist BE 2557-02-14";
      stringArray0[4] = "";
      stringArray0[5] = " = ";
      stringArray0[7] = " = ";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "CLOB", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("alter materialized view", true, dBPrimaryKeyConstraint0);
      SQLUtil.removeComments("");
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      stringBuilder0.append("");
      StringBuilder stringBuilder1 = stringBuilder0.reverse();
      SQLUtil.addOptionalCondition("CLOB", stringBuilder0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder1, nameSpec0);
      assertEquals("CLOB", stringBuilder0.toString());
      assertEquals("CLOB", stringBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("dU8,K\").{");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) nameSpec0;
      objectArray0[1] = (Object) defaultDBTable0;
      PrintWriter printWriter0 = mockPrintWriter0.format("insert", objectArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("insert", defaultDBTable0, 911, "dU8,K\").{");
      DBColumn[] dBColumnArray0 = new DBColumn[5];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("8yZn;", defaultDBTable0, (-212611242), "dU8,K\").{");
      dBColumnArray0[2] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      SQLUtil sQLUtil0 = new SQLUtil();
      Locale locale0 = Locale.GERMANY;
      PrintWriter printWriter1 = mockPrintWriter0.printf(locale0, "O@>#@V7", (Object[]) dBColumnArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter1);
      assertNull(defaultDBTable0.getDoc());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.setDoc("xVf4%QmP(HEq");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "xVf4%QmP(HEq", false, (String[]) null);
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("CONSTRAINT xVf4%QmP(HEq ", string0);
      
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, (String[]) null);
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLUtil.isQuery("select qnto");
      // Undeclared exception!
      try { 
        DBDataType.getInstance("select qnto");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.setDoc("?*Vw\"6igrpEW");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("]0_byz2Q#;F9( $S", defaultDBTable0, 759, "S}eyDv7");
      boolean boolean0 = true;
      defaultDBTable0.getPrimaryKeyConstraint();
      defaultDBColumn0.setDefaultValue("]0_byz2Q#;F9( $S");
      defaultDBColumn0.addUkConstraint((DBUniqueConstraint) null);
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.typeAndName((DBObject) null);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("f[9Zu+c3i#UWX(+^s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: f[9Zu+c3i#UWX(+^s
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = LogToFile.TEST_SWITCH_LOG_FAIL2;
      Boolean.valueOf((String) null);
      SQLUtil.typeAndName((DBObject) null);
      String[] stringArray0 = new String[0];
      String string1 = SQLUtil.join((String) null, (String) null, stringArray0, " NOT", "Z'ce\"", stringArray0);
      assertEquals(" NOT as Z'ce\" on ", string1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SQLUtil.normalize("W*/", false);
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("W */");
      Integer integer0 = RawTransaction.ABORT;
      String string0 = SQLUtil.removeComments("o?/}cg&|UD3d2.. ");
      assertEquals("o?/}cg&|UD3d2.. ", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.mutatesStructure("/*");
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-2), "IOException: ");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer.getInteger("IOException: ");
      Integer integer1 = RawTransaction.ABORT;
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("truncateallowduplicates", defaultDBTable0, dBDataType0, integer1, integer2);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("truncateallowduplicates IOEXCEPTION: (1,3) NULL", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{x{s7D*+cAFaI[3aZyB");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = (-2553.038022);
      SQLUtil.renderNumber(streamTokenizer0);
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      MockFile mockFile0 = new MockFile("CURRENT", "CURRENT");
      File file0 = FileUtil.canonicalFile((File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      mockPrintWriter0.append((CharSequence) "CURRENT");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter session");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "AM", true, stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringReader stringReader0 = new StringReader("qc@G3YvJV/';H=B");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = 0.9;
      SQLUtil.renderNumber(streamTokenizer0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("0.9");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("{x7D*+cAFaI[3aZyB");
      DBDataType dBDataType0 = DBDataType.getInstance(90087, " as ");
      Integer integer0 = new Integer(90087);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("No statemet was executed.", defaultDBTable0, dBDataType0, integer0);
      String string0 = SQLUtil.normalize("DELETE FROM ", true);
      assertEquals("DELETE FROM", string0);
      
      List<DBColumn> list0 = defaultDBTable0.getColumns();
      SQLUtil.renderColumnNames(list0);
      String string1 = SQLUtil.typeAndName(defaultDBColumn0);
      assertEquals("column No statemet was executed.", string1);
  }
}
