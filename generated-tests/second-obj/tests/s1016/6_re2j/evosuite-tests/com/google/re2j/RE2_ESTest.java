/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 03:56:59 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Machine;
import com.google.re2j.RE2;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RE2_ESTest extends RE2_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      int int0 = rE2_0.numberOfCapturingGroups();
      assertEquals(0, int0);
      
      int[] intArray0 = rE2_0.findSubmatchIndex("");
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      String string0 = rE2_0.replaceAll("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      byte[] byteArray0 = new byte[2];
      byte[][] byteArray1 = rE2_0.findUTF8Submatch(byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      List<int[]> list0 = rE2_0.findAllIndex("", 4613);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[0];
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray0, 436);
      assertEquals("", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Machine machine0 = rE2_0.get();
      assertEquals("", rE2_0.toString());
      assertNotNull(machine0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<int[]> list0 = rE2_0.findAllIndex("", (-1814));
      assertEquals("", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      String string0 = rE2_0.replaceAll("s", "(v0k$u4}om Arp");
      assertEquals("", rE2_0.toString());
      assertNotNull(string0);
      assertEquals("(v0k$u4}om Arps(v0k$u4}om Arp", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("aX");
      assertEquals("aX", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String string0 = rE2_0.replaceFirst("aX", "can't happen");
      assertEquals("aX", rE2_0.toString());
      assertNotNull(string0);
      assertEquals("can't happen", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String string0 = rE2_0.replaceFirst("s:1\"", "");
      assertEquals("", rE2_0.toString());
      assertNotNull(string0);
      assertEquals("s:1\"", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RE2 rE2_0 = new RE2("com.google.re2j.RE2");
      assertEquals("com.google.re2j.RE2", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String string0 = rE2_0.replaceAll("com.google.re2j.RE2", "com.google.re2j.RE2");
      assertEquals("com.google.re2j.RE2", rE2_0.toString());
      assertNotNull(string0);
      assertEquals("com.google.re2j.RE2", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RE2 rE2_0 = new RE2("can't happen");
      assertEquals("can't happen", rE2_0.toString());
      assertNotNull(rE2_0);
      
      int[] intArray0 = rE2_0.findIndex("can't happen");
      assertEquals("can't happen", rE2_0.toString());
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0, 12}, intArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("com.google.re2j.RE2");
      assertEquals("com.google.re2j.RE2", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[0];
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, 1424);
      assertEquals("com.google.re2j.RE2", rE2_0.toString());
      assertNull(list0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String string0 = RE2.quoteMeta("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      List<String[]> list0 = rE2_0.findAllSubmatch("", 745);
      assertEquals("", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("SZ{p&aJ`5x3]VRVNTn");
      assertEquals("SZ{p&aJ`5x3]VRVNTn", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<String[]> list0 = rE2_0.findAllSubmatch("SZ{p&aJ`5x3]VRVNTn", (byte)0);
      assertEquals("SZ{p&aJ`5x3]VRVNTn", rE2_0.toString());
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)1;
      byteArray0[3] = (byte) (-18);
      byteArray0[4] = (byte) (-9);
      byteArray0[6] = (byte) (-32);
      byteArray0[7] = (byte)11;
      byteArray0[8] = (byte) (-41);
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, (byte)1);
      assertEquals("", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String string0 = rE2_0.find("");
      assertEquals("", rE2_0.toString());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-18);
      RE2 rE2_0 = RE2.compile("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      int[] intArray0 = rE2_0.findUTF8Index(byteArray0);
      assertEquals("", rE2_0.toString());
      assertNotNull(intArray0);
      assertArrayEquals(new byte[] {(byte) (-18), (byte)0}, byteArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RE2 rE2_0 = new RE2(">gID@#t5}q{;nDc$i");
      assertEquals(">gID@#t5}q{;nDc$i", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<String[]> list0 = rE2_0.findAllSubmatch(">gID@#t5}q{;nDc$i", (-1476));
      assertEquals(">gID@#t5}q{;nDc$i", rE2_0.toString());
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("1$HKTF1=Tc");
      assertEquals("1$HKTF1=Tc", rE2_0.toString());
      assertNotNull(rE2_0);
      
      int int0 = rE2_0.numberOfCapturingGroups();
      assertEquals("1$HKTF1=Tc", rE2_0.toString());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String string0 = rE2_0.replaceFirst("", "");
      assertEquals("", rE2_0.toString());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RE2 rE2_0 = new RE2("#!5t<>K#GIo^lu");
      assertEquals("#!5t<>K#GIo^lu", rE2_0.toString());
      assertNotNull(rE2_0);
      
      int int0 = rE2_0.numberOfCapturingGroups();
      assertEquals("#!5t<>K#GIo^lu", rE2_0.toString());
      assertEquals(0, int0);
      
      int[] intArray0 = rE2_0.findSubmatchIndex("#!5t<>K#GIo^lu");
      assertEquals("#!5t<>K#GIo^lu", rE2_0.toString());
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX(".M{/38mLxBYf");
      assertEquals(".M{/38mLxBYf", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[20];
      byteArray0[6] = (byte)7;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)14;
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray0, 465);
      assertEquals(".M{/38mLxBYf", rE2_0.toString());
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RE2 rE2_0 = new RE2("can't happen");
      assertEquals("can't happen", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String string0 = rE2_0.find("(cQE36Hl2]A");
      assertEquals("can't happen", rE2_0.toString());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("$HKTF1Tc");
      assertEquals("$HKTF1Tc", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String string0 = rE2_0.replaceFirst("$HKTF1Tc", "|+@W)vI0k<?5");
      assertEquals("$HKTF1Tc", rE2_0.toString());
      assertNotNull(string0);
      assertEquals("$HKTF1Tc", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RE2 rE2_0 = new RE2("#!5t<>K#GIo^lu");
      assertEquals("#!5t<>K#GIo^lu", rE2_0.toString());
      assertNotNull(rE2_0);
      
      int int0 = rE2_0.numberOfCapturingGroups();
      assertEquals("#!5t<>K#GIo^lu", rE2_0.toString());
      assertEquals(0, int0);
      
      int[] intArray0 = rE2_0.findIndex("#!5t<>K#GIo^lu");
      assertEquals("#!5t<>K#GIo^lu", rE2_0.toString());
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte)18;
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray0, 7);
      assertEquals("", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertArrayEquals(new byte[] {(byte) (-114), (byte)18}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String string0 = rE2_0.replaceAll("", "");
      assertEquals("", rE2_0.toString());
      assertNotNull(string0);
      assertEquals("", string0);
      
      byte[] byteArray0 = new byte[2];
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray0, (byte)0);
      assertEquals("", rE2_0.toString());
      assertNull(list0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("(<g:]G>8=GaPQ)a#");
      assertEquals("(<g:]G>8=GaPQ)a#", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = rE2_0.matchUTF8(byteArray0);
      assertEquals("(<g:]G>8=GaPQ)a#", rE2_0.toString());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(boolean0);
      
      String string0 = RE2.quoteMeta("(<g:]G>8=GaPQ)a#");
      assertNotNull(string0);
      assertEquals("\\(<g:\\]G>8=GaPQ\\)a#", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RE2 rE2_0 = new RE2("@<PvZ3' 9C$f$py0fdn");
      assertEquals("@<PvZ3' 9C$f$py0fdn", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<String> list0 = rE2_0.findAll("@<PvZ3' 9C$f$py0fdn", 606);
      assertEquals("@<PvZ3' 9C$f$py0fdn", rE2_0.toString());
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX(",pw&hKQ");
      assertEquals(",pw&hKQ", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String[] stringArray0 = rE2_0.findSubmatch(",pw&hKQ");
      assertEquals(",pw&hKQ", rE2_0.toString());
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("ASCII_Hex_Digit");
      assertEquals("ASCII_Hex_Digit", rE2_0.toString());
      assertNotNull(rE2_0);
      
      int[] intArray0 = rE2_0.findSubmatchIndex("ASCII_Hex_Digit");
      assertEquals("ASCII_Hex_Digit", rE2_0.toString());
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0, 15}, intArray0);
      
      rE2_0.reset();
      assertEquals("ASCII_Hex_Digit", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = RE2.quoteMeta("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      RE2 rE2_0 = RE2.compile("^HD!G+@gik");
      assertEquals("^HD!G+@gik", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[0];
      int[] intArray0 = rE2_0.findUTF8SubmatchIndex(byteArray0);
      assertEquals("^HD!G+@gik", rE2_0.toString());
      assertNull(intArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("T;~%UWh;\"tj", 6, true);
      assertEquals("T;~%UWh;\"tj", rE2_0.toString());
      assertNotNull(rE2_0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 5;
      intArray0[1] = 1;
      intArray0[2] = 3540;
      intArray0[3] = 6;
      boolean boolean0 = rE2_0.match("T;~%UWh;\"tj", 1, 3540, 5, intArray0, 3235);
      assertEquals("T;~%UWh;\"tj", rE2_0.toString());
      assertArrayEquals(new int[] {5, 1, 3540, 6}, intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("/z9>%Cqu0%X3j");
      assertEquals("/z9>%Cqu0%X3j", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[0];
      int[] intArray0 = rE2_0.findUTF8Index(byteArray0);
      assertEquals("/z9>%Cqu0%X3j", rE2_0.toString());
      assertNull(intArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RE2 rE2_0 = new RE2("%");
      assertEquals("%", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[0];
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, 19);
      assertEquals("%", rE2_0.toString());
      assertNull(list0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("(<g:]G>8=GaPQ)a#");
      assertEquals("(<g:]G>8=GaPQ)a#", rE2_0.toString());
      assertNotNull(rE2_0);
      
      boolean boolean0 = rE2_0.match("(<g:]G>8=GaPQ)a#");
      assertEquals("(<g:]G>8=GaPQ)a#", rE2_0.toString());
      assertFalse(boolean0);
      
      String string0 = RE2.quoteMeta("(<g:]G>8=GaPQ)a#");
      assertNotNull(string0);
      assertEquals("\\(<g:\\]G>8=GaPQ\\)a#", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[0];
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, 19);
      assertEquals("", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("", (-182), true);
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[0];
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, (-182));
      assertEquals("", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<int[]> list0 = rE2_0.findAllSubmatchIndex("", 1079);
      assertEquals("", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RE2 rE2_0 = new RE2("UTF-8");
      assertEquals("UTF-8", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[2];
      byte[][] byteArray1 = rE2_0.findUTF8Submatch(byteArray0);
      assertEquals("UTF-8", rE2_0.toString());
      assertNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RE2 rE2_0 = new RE2("SZ{p&aJ`5x3]VRVNTn");
      assertEquals("SZ{p&aJ`5x3]VRVNTn", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<String[]> list0 = rE2_0.findAllSubmatch("SZ{p&aJ`5x3]VRVNTn", 2);
      assertEquals("SZ{p&aJ`5x3]VRVNTn", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      boolean boolean0 = RE2.match("Radical", "Radical");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<String> list0 = rE2_0.findAll("", 611);
      assertEquals("", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = new RE2("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      Machine machine0 = rE2_0.get();
      assertEquals("", rE2_0.toString());
      assertNotNull(machine0);
      
      int[] intArray0 = new int[4];
      boolean boolean0 = rE2_0.match("", 0, 0, 2562, intArray0, 0);
      assertEquals("", rE2_0.toString());
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertTrue(boolean0);
      
      int int0 = rE2_0.numberOfCapturingGroups();
      assertEquals("", rE2_0.toString());
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        rE2_0.findAll((String) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("", 1341, true);
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)89;
      boolean boolean0 = rE2_0.matchUTF8(byteArray0);
      assertEquals("", rE2_0.toString());
      assertTrue(boolean0);
      
      byteArray0[2] = (byte)31;
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, (byte)0);
      assertEquals("", rE2_0.toString());
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("/z9>%Cqu0%X3j");
      assertEquals("/z9>%Cqu0%X3j", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String[] stringArray0 = rE2_0.findSubmatch("/z9>%Cqu0%X3j");
      assertEquals("/z9>%Cqu0%X3j", rE2_0.toString());
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)13;
      byte[] byteArray1 = rE2_0.findUTF8(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals("", rE2_0.toString());
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)13}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      RE2 rE2_0 = new RE2("Runic");
      assertEquals("Runic", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String string0 = rE2_0.toString();
      assertEquals("Runic", rE2_0.toString());
      assertNotNull(string0);
      assertEquals("Runic", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("$HKT1Tc");
      assertEquals("$HKT1Tc", rE2_0.toString());
      assertNotNull(rE2_0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 2269;
      boolean boolean0 = rE2_0.match("kjl-s/\"", 2269, 1, 1, intArray0, 0);
      assertEquals("$HKT1Tc", rE2_0.toString());
      assertArrayEquals(new int[] {2269, 0}, intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("lo2!I+/;\">");
      assertEquals("lo2!I+/;\">", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<int[]> list0 = rE2_0.findAllSubmatchIndex("I<l}GGCa,$%P:JxX", 212);
      assertEquals("lo2!I+/;\">", rE2_0.toString());
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("lo2!I+;\">");
      assertEquals("lo2!I+;\">", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<int[]> list0 = rE2_0.findAllIndex("I<l}GGCa,$%P:JxX", 189);
      assertEquals("lo2!I+;\">", rE2_0.toString());
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("A%5", (-1), false);
      assertEquals("A%5", rE2_0.toString());
      assertNotNull(rE2_0);
      
      int int0 = rE2_0.numberOfCapturingGroups();
      assertEquals("A%5", rE2_0.toString());
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = rE2_0.findUTF8(byteArray0);
      assertEquals("A%5", rE2_0.toString());
      assertNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = "$";
      RE2 rE2_0 = RE2.compile("$");
      assertEquals("$", rE2_0.toString());
      assertNotNull(rE2_0);
      
      rE2_0.prefixRune = 852;
      assertEquals("$", rE2_0.toString());
      
      String string1 = "com.google.|e2j.RE2";
      byte[] byteArray0 = rE2_0.prefixUTF8;
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      List<int[]> list0 = rE2_0.findAllSubmatchIndex("com.google.|e2j.RE2", 2906);
      assertEquals("$", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      int int0 = rE2_0.numberOfCapturingGroups();
      assertEquals("$", rE2_0.toString());
      assertEquals(0, int0);
      
      try { 
        RE2.compilePOSIX("`,!'f[Sc9NmErT\"`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[Sc9NmErT\"``
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RE2 rE2_0 = new RE2("$");
      assertEquals("$", rE2_0.toString());
      assertNotNull(rE2_0);
      
      rE2_0.prefixRune = 4;
      assertEquals("$", rE2_0.toString());
      
      Machine machine0 = rE2_0.get();
      assertEquals("$", rE2_0.toString());
      assertNotNull(machine0);
      
      String string0 = "com.google.re2j.RE2";
      RE2 rE2_1 = RE2.compileImpl("|8", 4, true);
      assertNotSame(rE2_1, rE2_0);
      assertFalse(rE2_1.equals((Object)rE2_0));
      assertEquals("|8", rE2_1.toString());
      assertNotNull(rE2_1);
      
      String[] stringArray0 = rE2_0.findSubmatch("com.google.re2j.RE2");
      assertNotSame(rE2_0, rE2_1);
      assertFalse(rE2_0.equals((Object)rE2_1));
      assertEquals("$", rE2_0.toString());
      assertNotNull(stringArray0);
      
      byte[] byteArray0 = rE2_0.prefixUTF8;
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      String string1 = rE2_0.replaceAll("com.google.re2j.RE2", "$");
      assertNotSame(rE2_0, rE2_1);
      assertFalse(rE2_0.equals((Object)rE2_1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("$", rE2_0.toString());
      assertNotNull(string1);
      assertEquals("com.google.re2j.RE2$", string1);
      
      try { 
        RE2.compilePOSIX("`,!'f[Sc9NmErT\"`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[Sc9NmErT\"``
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      boolean boolean0 = rE2_0.longest;
      assertFalse(boolean0);
      
      boolean boolean1 = rE2_0.match("", 0, 0, 2562, (int[]) null, 0);
      assertFalse(boolean1 == boolean0);
      assertEquals("", rE2_0.toString());
      assertTrue(boolean1);
      
      int int0 = rE2_0.numberOfCapturingGroups();
      assertEquals("", rE2_0.toString());
      assertEquals(0, int0);
      
      RE2 rE2_1 = RE2.compileImpl("OSxQ< S", 0, false);
      assertNotSame(rE2_1, rE2_0);
      assertFalse(rE2_1.equals((Object)rE2_0));
      assertEquals("OSxQ< S", rE2_1.toString());
      assertNotNull(rE2_1);
  }
}
