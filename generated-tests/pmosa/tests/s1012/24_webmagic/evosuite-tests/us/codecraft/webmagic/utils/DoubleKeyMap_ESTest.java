/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 22:51:17 GMT 2018
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Integer>(class0);
      Integer integer0 = new Integer(1);
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      hashMap0.clone();
      // Undeclared exception!
      try { 
        doubleKeyMap0.put(integer0, (Map<Object, Integer>) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>();
      DoubleKeyMap<String, Object, Object> doubleKeyMap1 = new DoubleKeyMap<String, Object, Object>();
      Object object0 = new Object();
      doubleKeyMap1.remove("", object0);
      HashMap<Object, Map<Object, Integer>> hashMap0 = new HashMap<Object, Map<Object, Integer>>();
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap2 = new DoubleKeyMap<Object, Object, Integer>(hashMap0);
      Map<Object, Integer> map0 = doubleKeyMap2.remove((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Object object0 = new Object();
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>();
      doubleKeyMap0.newMap();
      String string0 = doubleKeyMap0.remove((Object) "{k,%QA^KPI'K{0X=7", (Object) "{k,%QA^KPI'K{0X=7");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HashMap<String, Map<Object, Object>> hashMap0 = new HashMap<String, Map<Object, Object>>(2117);
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>(hashMap0);
      Map<Object, Map<String, String>> map0 = doubleKeyMap0.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, String, String> doubleKeyMap1 = new DoubleKeyMap<Object, String, String>(map0, class0);
      Object object0 = new Object();
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      doubleKeyMap0.get("{k,%QA^KPI'K{0X=7", (Object) hashMap1);
      DoubleKeyMap<Object, Object, String> doubleKeyMap2 = new DoubleKeyMap<Object, Object, String>();
      doubleKeyMap2.put((Object) hashMap1, (Object) doubleKeyMap0, "{k,%QA^KPI'K{0X=7");
      Object object1 = new Object();
      Integer integer0 = new Integer(2117);
      HashMap<Object, String> hashMap2 = new HashMap<Object, String>();
      Object object2 = new Object();
      String string0 = doubleKeyMap2.remove((Object) hashMap2, object2);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HashMap<Object, Map<Object, Map<Object, String>>> hashMap0 = new HashMap<Object, Map<Object, Map<Object, String>>>();
      DoubleKeyMap<Object, Object, Map<Object, String>> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Map<Object, String>>(hashMap0);
      Object object0 = new Object();
      HashMap<Object, Map<String, String>> hashMap1 = new HashMap<Object, Map<String, String>>();
      DoubleKeyMap<Object, String, String> doubleKeyMap1 = new DoubleKeyMap<Object, String, String>(hashMap1);
      Map<Object, Map<Object, String>> map0 = doubleKeyMap1.newMap();
      hashMap0.put(object0, map0);
      doubleKeyMap0.remove(object0, (Object) hashMap0);
      doubleKeyMap0.remove((Object) hashMap0);
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Integer, Object> doubleKeyMap2 = null;
      try {
        doubleKeyMap2 = new DoubleKeyMap<String, Integer, Object>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DoubleKeyMap<Integer, String, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Object>();
      Integer integer0 = new Integer(1);
      doubleKeyMap0.remove(integer0);
      String string0 = null;
      doubleKeyMap0.put((Integer) null, (String) null, (Object) null);
      Map<String, Map<String, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<String, String, String> doubleKeyMap1 = new DoubleKeyMap<String, String, String>(map0);
      HashMap<Map<Object, String>, Map<String, String>> hashMap0 = new HashMap<Map<Object, String>, Map<String, String>>();
      DoubleKeyMap<Map<Object, String>, String, String> doubleKeyMap2 = new DoubleKeyMap<Map<Object, String>, String, String>(hashMap0);
      Map<Object, String> map1 = doubleKeyMap1.newMap();
      doubleKeyMap1.remove((String) null);
      doubleKeyMap0.put((Integer) null, (String) null, (Object) map1);
      doubleKeyMap2.get(map1);
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<Object, String>, Object, Map<Object, String>> doubleKeyMap3 = null;
      try {
        doubleKeyMap3 = new DoubleKeyMap<Map<Object, String>, Object, Map<Object, String>>((Map<Map<Object, String>, Map<Object, Map<Object, String>>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      HashMap<String, Map<Object, Object>> hashMap0 = new HashMap<String, Map<Object, Object>>(2117);
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>(hashMap0);
      DoubleKeyMap<String, Object, Object> doubleKeyMap1 = new DoubleKeyMap<String, Object, Object>();
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      hashMap0.put("", hashMap1);
      doubleKeyMap1.newMap();
      Object object0 = new Object();
      Object object1 = doubleKeyMap0.get("", (Object) "");
      assertNull(object1);
  }
}
