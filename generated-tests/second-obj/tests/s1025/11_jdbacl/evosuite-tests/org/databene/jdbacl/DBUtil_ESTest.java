/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 11:10:34 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.CharArrayReader;
import java.io.Reader;
import java.lang.reflect.Proxy;
import java.sql.Connection;
import java.sql.ResultSet;
import org.databene.commons.ErrorHandler;
import org.databene.commons.Level;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.DBExecutionResult;
import org.databene.jdbacl.DBUtil;
import org.databene.jdbacl.JDBCConnectData;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.databene.jdbacl.model.TableHolder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.jca.FBManagedConnection;
import org.firebirdsql.jdbc.AbstractConnection;
import org.firebirdsql.jdbc.FBConnection;
import org.firebirdsql.jdbc.InternalTransactionCoordinator;
import org.h2.command.ddl.AlterTableAlterColumn;
import org.h2.engine.SessionRemote;
import org.h2.tools.Csv;
import org.h2.tools.Recover;
import org.hsqldb.SessionInterface;
import org.hsqldb.jdbc.jdbcConnection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DBUtil_ESTest extends DBUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = AlterTableAlterColumn.ADD;
      DBUtil.resetMonitors();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "NA<<Tz/ID*h7;L4j";
      stringArray0[1] = "'Z\"D@";
      stringArray0[3] = "NA<<Tz/ID*h7;L4j";
      stringArray0[5] = "'Z\"D@";
      stringArray0[6] = "'Z\"D@";
      stringArray0[7] = "Fwc<moiLJ";
      stringArray0[8] = "~_^/4lR~;EgU0R,";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      // Undeclared exception!
      try { 
        DBUtil.equivalent((DBUniqueConstraint) null, (DBPrimaryKeyConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.closeResultSetAndStatement((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DBUtil.resetMonitors();
      DBCatalog dBCatalog0 = new DBCatalog("q`@'T>");
      DBSchema dBSchema0 = new DBSchema("q`@'T>", dBCatalog0);
      DBUtil.dependencyOrderedTables(dBSchema0);
      DBUtil.getOpenPreparedStatementCount();
      // Undeclared exception!
      try { 
        DBUtil.getStatement((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      boolean boolean0 = DBUtil.available("~X", "~X", "~X", "D");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DBUtil.assertAllDbResourcesClosed(false);
      // Undeclared exception!
      try { 
        DBUtil.connect("9FQ=0w1wsIDM%)f)", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No environment definition '9FQ=0w1wsIDM%)f).env.properties' found
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "+\"$0*}}-";
      DBUtil.getOpenStatementCount();
      DBUtil.resetMonitors();
      Connection connection0 = null;
      String string1 = "Error querying table ";
      // Undeclared exception!
      try { 
        DBUtil.prepareStatement((Connection) null, "Error querying table ", true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Tried to mutate a database with read-only settings: Error querying table 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DBUtil.escape("+\"$0*}}-");
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        DBUtil.checkReadOnly("+\"$0*}}-", true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Tried to mutate a database with read-only settings: +\"$0*}}-
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("5@s;`");
      DBUtil.getOpenPreparedStatementCount();
      boolean boolean0 = DBUtil.existsEnvironment((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Recover recover0 = new Recover();
      recover0.getLobConnection();
      String string0 = "derby.__rt.serviceDirectory";
      boolean boolean0 = true;
      try { 
        DBUtil.getMetaData((Connection) null, "derby.__rt.serviceDirectory", "", true, true, true, true, "", true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting null failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DBUtil.getOpenStatementCount();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("SIN", 142);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      DBUtil.resetMonitors();
      SessionRemote sessionRemote0 = new SessionRemote();
      sessionRemote0.autoCommitIfCluster();
      boolean boolean0 = DBUtil.available("\"", (String) null, "\"", "_p+MV");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDBCConnectData jDBCConnectData0 = new JDBCConnectData("kmF=c$5r7JcD", "kmF=c$5r7JcD", "kmF=c$5r7JcD", "kmF=c$5r7JcD");
      try { 
        DBUtil.connect(jDBCConnectData0, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting kmF=c$5r7JcD failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDBCConnectData jDBCConnectData0 = new JDBCConnectData("", "42XA6", "42XA6", "42XA6");
      // Undeclared exception!
      try { 
        DBUtil.connect(jDBCConnectData0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No JDBC driver class name specified
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DBUtil.assertAllDbResourcesClosed(true);
      Proxy proxy0 = (Proxy)DBUtil.wrapWithPooledConnection((Connection) null, false);
      // Undeclared exception!
      try { 
        DBUtil.queryLong((String) null, (Connection) proxy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ResultSet resultSet0 = null;
      // Undeclared exception!
      try { 
        DBUtil.currentLine((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DBUtil.getOpenStatementCount();
      DBUtil.resetMonitors();
      DBUtil.checkReadOnly((String) null, false);
      DBUtil.getOpenConnectionCount();
      SessionRemote sessionRemote0 = new SessionRemote();
      sessionRemote0.getLobConnection();
      // Undeclared exception!
      try { 
        DBUtil.queryAndSimplify("Resource not found: ", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Connection connection0 = null;
      String string0 = "''";
      // Undeclared exception!
      try { 
        DBUtil.prepareStatement((Connection) null, "''", false, (-1528), (-1528), 2185);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = SessionInterface.INFO_SESSION_ID;
      DBUtil.resetMonitors();
      Connection connection0 = null;
      String string0 = null;
      boolean boolean0 = false;
      Proxy proxy0 = (Proxy)DBUtil.wrapWithPooledConnection((Connection) null, false);
      // Undeclared exception!
      try { 
        DBUtil.prepareStatement((Connection) proxy0, "`3_L&kkWJH@5XK1", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      String string0 = "G)E{\"";
      // Undeclared exception!
      try { 
        DBUtil.query("G)E{\"", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DBUtil.getOpenStatementCount();
      DBUtil.resetMonitors();
      Level level0 = Level.fatal;
      ErrorHandler errorHandler0 = new ErrorHandler("IOException", level0);
      ErrorHandler errorHandler1 = new ErrorHandler("--3\"K|o+][", level0);
      // Undeclared exception!
      try { 
        DBUtil.logMetaData((Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DBUtil.resetMonitors();
      SessionRemote sessionRemote0 = new SessionRemote();
      Class<DBForeignKeyConstraint> class0 = DBForeignKeyConstraint.class;
      ErrorHandler errorHandler0 = new ErrorHandler(class0);
      Level level0 = Level.debug;
      ErrorHandler.setDefaultLevel(level0);
      // Undeclared exception!
      try { 
        DBUtil.runScript("(eicc", (Connection) null, true, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DBUtil.getOpenStatementCount();
      DBUtil.resetMonitors();
      Level level0 = Level.fatal;
      ErrorHandler errorHandler0 = new ErrorHandler("IOException", level0);
      // Undeclared exception!
      try { 
        DBUtil.runScript("\"", (Connection) null, false, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ErrorHandler errorHandler0 = ErrorHandler.getDefault();
      errorHandler0.setLoggingStackTrace(false);
      // Undeclared exception!
      try { 
        DBUtil.runScript("'u3#p8eQf9M", (String) null, (Connection) null, false, errorHandler0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Resource not found: 'u3#p8eQf9M
         //
         verifyException("org.databene.commons.IOUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DBUtil.getOpenStatementCount();
      DBUtil.resetMonitors();
      String string0 = "IOException";
      Level level0 = Level.error;
      ErrorHandler errorHandler0 = new ErrorHandler("IOException", level0);
      DBUtil.runScript("", (Connection) null, false, errorHandler0);
      SessionRemote sessionRemote0 = new SessionRemote();
      sessionRemote0.autoCommitIfCluster();
      sessionRemote0.autoCommitIfCluster();
      // Undeclared exception!
      try { 
        DBUtil.connect("--BbLP@l:K:.", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No environment definition '--BbLP@l:K:..env.properties' found
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Connection connection0 = null;
      Level level0 = Level.ignore;
      ErrorHandler errorHandler0 = new ErrorHandler("IOException", level0);
      errorHandler0.handleError("org.apache.derby.impl.sql.execute.AlterTableConstantAction");
      String string0 = "--~X";
      DBUtil.runScript("--~X", (Connection) null, false, errorHandler0);
      // Undeclared exception!
      try { 
        DBUtil.logMetaData((Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DBUtil.getOpenStatementCount();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("SIN", 142);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      DBUtil.resetMonitors();
      SessionRemote sessionRemote0 = new SessionRemote();
      // Undeclared exception!
      try { 
        DBUtil.queryWithMetadata("''", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DBUtil.getOpenStatementCount();
      DBUtil.resetMonitors();
      Connection connection0 = null;
      DBUtil.close((Connection) null);
      TableContainer tableContainer0 = new TableContainer((String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "--BbLP@l:K:.");
      DBSchema dBSchema0 = new DBSchema("oZEN7&`FY");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("oZEN7&`FY", dBSchema0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "oZEN7&`FY";
      stringArray0[1] = "oZEN7&`FY";
      stringArray0[2] = null;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "ERROR: unknown type ", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex((String) null, false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      tableContainer0.addTable(dBTable0);
      DBUtil.dependencyOrderedTables(tableContainer0);
      DBUtil.getOpenPreparedStatementCount();
      DefaultDatabase defaultDatabase0 = new DefaultDatabase((String) null, (String) null, (VersionNumber) null);
      DBUtil.assertAllDbResourcesClosed(true);
      DBUtil.getOpenPreparedStatementCount();
      String string0 = "Database query failed: ";
      // Undeclared exception!
      try { 
        DBUtil.queryLong("Database query failed: ", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }
}
