/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 15:41:03 GMT 2018
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ObjectStreamConstants;
import java.lang.reflect.Member;
import java.util.regex.Pattern;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.Field;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.generic.ANEWARRAY;
import org.apache.bcel.generic.ArrayType;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.Type;
import org.apache.bcel.util.BCELComparator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConstantPoolGen_ESTest extends ConstantPoolGen_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = Type.OBJECT;
      ObjectType objectType1 = Type.STRING;
      int int0 = constantPoolGen0.addClass(objectType0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = constantPoolGen0.toString();
      assertEquals("", string0);
      
      int int0 = constantPoolGen0.lookupClass("fsub");
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addMethodref("zfB=Ubj^_&Ben3@J", (String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes must not be null!
         //
         verifyException("org.apache.bcel.classfile.ConstantUtf8", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addClass("' is referenced, but cannot be loaded: '");
      int int0 = constantPoolGen0.lookupString("()<illega$ opcode>%{<rw(U[suBt&[ANhuB.");
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantDouble constantDouble0 = new ConstantDouble((-1364.98426167));
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantPoolGen0.setConstant(248, constantDouble1);
      assertEquals(1, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("\n");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantFloat constantFloat0 = new ConstantFloat(46);
      constantArray0[1] = (Constant) constantFloat0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.lookupDouble(46);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addInteger((-128));
      constantPoolGen0.toString();
      assertEquals(2, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.lookupClass("3#ZSIn}VHK3");
      assertEquals((-1), int0);
      assertEquals(2, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.getConstant(0);
      constantArray0[0] = null;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(0, 0);
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(1912, 1912);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(1912, 1912);
      constantArray0[1] = (Constant) constantFieldref0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1912
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("\n");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(168, 168);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[1] = (Constant) constantMethodHandle1;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      String string0 = constantPoolGen0.toString();
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(0, 0);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[0] = (Constant) constantMethodref1;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("#");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[1] = (Constant) constantUtf8_1;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.addFloat(0.0F);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[0] = (Constant) constantDouble1;
      ConstantLong constantLong0 = new ConstantLong(3582L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[1] = (Constant) constantLong1;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen0.lookupMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getFinalConstantPool();
      constantPoolGen0.lookupMethodref("U^expected constant type: ", ")", ")");
      constantPoolGen0.addDouble((-3276.684849));
      int int0 = constantPoolGen0.addLong(1);
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      int int0 = 0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(0, 0);
      ConstantString constantString0 = new ConstantString(0);
      constantArray0[5] = (Constant) constantString0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupMethodref("!o2PR$h/nc/+yznJ*._", "!o2PR$h/nc/+yznJ*._", "!o2PR$h/nc/+yznJ*._");
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-1), (-1));
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      constantPoolGen0.size = (-1);
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      ConstantUtf8.getInstance("!o2PR$h/nc/+yznJ*._");
      ConstantDouble constantDouble0 = new ConstantDouble(1);
      // Undeclared exception!
      try { 
        constantPoolGen0.addFieldref("iFv'v", ")", "UlCLd/H<(Qk&3");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addDouble(1.0);
      constantPoolGen0.addInteger(3085);
      constantPoolGen0.getFinalConstantPool();
      assertEquals(4, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupInterfaceMethodref("ssOv7jWGlCE<z>%", "ssOv7jWGlCE<z>%", "4 Ow>^xt]");
      constantPoolGen0.addFloat(822.17816F);
      int int0 = constantPoolGen0.lookupFloat((-1));
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupLong((-236L));
      constantPoolGen0.addUtf8("a>,");
      int int0 = constantPoolGen0.lookupFloat(0.0F);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantClass constantClass0 = new ConstantClass(196);
      constantArray0[0] = (Constant) constantClass0;
      ConstantDouble constantDouble0 = new ConstantDouble(3187.0);
      constantArray0[1] = (Constant) constantDouble0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.lookupDouble(196);
      assertEquals((-1), int0);
      assertEquals(2, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addLong((-1811L));
      constantPoolGen0.addInteger(119);
      int int0 = constantPoolGen0.lookupInteger(1176);
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(411, (-765));
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[0] = (Constant) constantNameAndType1;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantNameAndType1, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 411
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(1912, 1912);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.lookupUtf8("The 'objref' item '");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantArray0[0], constantPoolGen1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown constant type CONSTANT_MethodHandle[15](reference_kind = 1912, reference_index = 1912)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addDouble(0.0);
      int int0 = Pattern.UNICODE_CASE;
      constantPoolGen0.lookupDouble(0.0);
      int int1 = 1769;
      // Undeclared exception!
      try { 
        constantPoolGen0.getConstant(1769);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1769
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(":");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(1176, 1961);
      Constant constant0 = constantNameAndType0.copy();
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = constant0;
      constantArray0[1] = (Constant) constantUtf8_1;
      constantArray0[2] = (Constant) constantUtf8_1;
      constantArray0[1] = (Constant) constantUtf8_1;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = constantPoolGen0.getSize();
      assertEquals(5, int0);
      
      int int1 = constantPoolGen0.lookupClass("!>C5;_~X^s&2OG}+RU");
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getSize();
      int int0 = Pattern.COMMENTS;
      ObjectType objectType0 = new ObjectType(". xF+BOw&,D");
      String[] stringArray0 = new String[0];
      objectType0.toString();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      InstructionList instructionList0 = new InstructionList(byteArray0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, true);
      InstructionList instructionList1 = new InstructionList(pUSH0);
      instructionList0.insert(instructionList1);
      MethodGen methodGen0 = new MethodGen((byte)0, objectType0, objectType0.NO_ARGS, stringArray0, "h(]EvO,\"", "J!;pWaI@4P0R-P?3Ce?", instructionList0, constantPoolGen0);
      MethodGen methodGen1 = methodGen0.copy(". xF+BOw&,D", constantPoolGen0);
      constantPoolGen0.addInterfaceMethodref(methodGen1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int1 = Double.SIZE;
      constantPoolGen0.addInterfaceMethodref(methodGen1);
      constantPoolGen0.lookupUtf8(":vE`G5a3=*:Hf/CW");
      assertEquals(11, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantFloat constantFloat0 = new ConstantFloat((-1424.126F));
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(32);
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(32, 32);
      constantNameAndType0.copy();
      constantArray0[2] = (Constant) constantNameAndType0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Tunt!,%|;n%uuAe:f");
      constantPoolGen0.addFloat((-1676.5382F));
      constantPoolGen0.addInteger(119);
      int int0 = constantPoolGen0.lookupInteger(119);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("[");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("[");
      constantArray0[0] = (Constant) constantUtf8_1;
      ConstantInteger constantInteger0 = new ConstantInteger((-1994091957));
      constantArray0[2] = (Constant) constantInteger0;
      ConstantUtf8 constantUtf8_2 = new ConstantUtf8("CL7eos1T.#IOR/6+9.");
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(3638);
      BCELComparator bCELComparator0 = Field.getComparator();
      Constant.setComparator(bCELComparator0);
      constantPool0.copy();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantPoolGen0.addConstant(constantArray0[2], constantPoolGen1);
      // Undeclared exception!
      try { 
        constantPoolGen0.getConstant((-1994091957));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1994091957
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantLong constantLong0 = new ConstantLong(3204L);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(3304, 3304);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(129, 3304);
      ConstantString constantString0 = new ConstantString((-1327));
      ConstantString constantString1 = new ConstantString(constantString0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(3304);
      BCELComparator bCELComparator0 = Field.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantString0, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1327
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.lookupInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantFieldref constantFieldref0 = new ConstantFieldref(242, 3304);
      ConstantString constantString0 = new ConstantString(242);
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<clinit>");
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool1);
      constantFieldref0.clone();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantFieldref0, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3304
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("[");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[0] = (Constant) constantUtf8_1;
      ConstantInteger constantInteger0 = new ConstantInteger((-1994091957));
      constantArray0[2] = (Constant) constantInteger0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-1));
      Field.getComparator();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPool constantPool2 = constantPool1.copy();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool2);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      ConstantInteger constantInteger1 = new ConstantInteger((-2075900857));
      constantPoolGen0.addConstant(constantInteger1, constantPoolGen1);
      assertEquals(5, constantPoolGen0.getSize());
      
      int int0 = Byte.BYTES;
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantInteger constantInteger0 = new ConstantInteger((-1994091957));
      constantArray0[2] = (Constant) constantInteger0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("CL7eos1T.#IOR/6+9.");
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(3638);
      JavaClass.getComparator();
      constantPool0.copy();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantPoolGen0.addConstant(constantUtf8_0, constantPoolGen1);
      assertEquals(4, constantPoolGen0.getSize());
      
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(3, 3638);
      String string0 = constantPoolGen1.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(217, (-4598));
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      org.apache.bcel.classfile.Visitor visitor0 = mock(org.apache.bcel.classfile.Visitor.class, new ViolatedAssumptionAnswer());
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, visitor0);
      ConstantInteger constantInteger0 = new ConstantInteger(251);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("\n");
      ConstantFloat constantFloat0 = new ConstantFloat(217);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantFloat1.copy();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(251);
      BCELComparator bCELComparator0 = Field.getComparator();
      Constant.setComparator(bCELComparator0);
      constantPool0.copy();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen();
      constantPoolGen1.lookupFieldref(">;", "lOy\"u /8DXC", "caload");
      constantPoolGen1.addConstant(constantFloat1, constantPoolGen0);
      int int0 = constantPoolGen0.addInteger(243);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addString(",8H]V2oUg'JqiY2BY$");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      constantPoolGen0.addString(",8H]V2oUg'JqiY2BY$");
      constantPoolGen0.addInteger(4712);
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      constantPoolGen0.lookupMethodref("EX@'#wsM@zijLm7E)", "EX@'#wsM@zijLm7E)", "Could not create the directory ");
      constantPool0.copy();
      int int0 = constantPoolGen0.addString(",8H]V2oUg'JqiY2BY$");
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Constant[] constantArray0 = new Constant[21];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(594, (-3959));
      ConstantDouble constantDouble0 = new ConstantDouble(594);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      ConstantClass constantClass0 = new ConstantClass((-2028178999));
      constantArray0[3] = (Constant) constantClass0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2028178999
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantLong constantLong0 = new ConstantLong(3192L);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(3304, 3304);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(129, (-1));
      ConstantString constantString0 = new ConstantString(2584);
      ConstantString constantString1 = new ConstantString(129);
      constantString1.toString();
      ConstantString constantString2 = new ConstantString(constantString1);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(3304);
      BCELComparator bCELComparator0 = Field.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      constantPoolGen1.addConstant(constantLong0, constantPoolGen0);
      constantPoolGen0.addClass("D");
      ArrayType arrayType0 = null;
      try {
        arrayType0 = new ArrayType((byte) (-41), 6126);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: -41
         //
         verifyException("org.apache.bcel.generic.BasicType", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      constantPoolGen0.addString(",8H]V2oUg'JqiY2BY$");
      ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool1);
      constantPool0.copy();
      ConstantString constantString0 = new ConstantString(2);
      ConstantString constantString1 = new ConstantString(constantString0);
      // Undeclared exception!
      try { 
        constantPool0.getConstant(1123);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 1123. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("[");
      ConstantDouble constantDouble0 = new ConstantDouble((-1.0));
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      ConstantInteger constantInteger0 = new ConstantInteger(39);
      ConstantClass constantClass0 = new ConstantClass(39);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.setConstant(39, constantInteger0);
      constantPoolGen0.getConstantPool();
      ObjectType objectType0 = new ObjectType("[");
      constantPoolGen0.lookupMethodref("[", "[", "[");
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantClass0, constantPoolGen0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantInteger cannot be cast to org.apache.bcel.classfile.ConstantUtf8
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantDouble constantDouble0 = new ConstantDouble((-247.8));
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantDouble0;
      constantArray0[1] = (Constant) constantDouble0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.addConstant(constantDouble1, constantPoolGen1);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addDouble(0.0);
      constantPoolGen0.addDouble(0.0);
      String string0 = "NWm@LDPQ6";
      constantPoolGen0.lookupUtf8("NWm@LDPQ6");
      constantPoolGen0.addDouble((-1));
      String string1 = "@TM*685?";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(1, 1480);
      constantPoolGen0.addInteger((-148));
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool1);
      constantPool1.copy();
      // Undeclared exception!
      try { 
        constantPool0.getConstant((-148));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: -148. Constant pool size is: 256
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addInterfaceMethodref("LBO#(Oscmm(MnQ\"", "LBO#(Oscmm(MnQ\"", "LBO#(Oscmm(MnQ\"");
      constantPoolGen0.lookupInteger(4711);
      int int0 = ObjectStreamConstants.baseWireHandle;
      ConstantPool constantPool1 = constantPoolGen0.getFinalConstantPool();
      int int1 = Double.MAX_EXPONENT;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(8257536, 4);
      ConstantString constantString0 = new ConstantString((-1));
      int int2 = Character.MIN_SUPPLEMENTARY_CODE_POINT;
      constantPool0.copy();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "il.append(_factory.create");
      constantPoolGen0.adjustSize();
      ConstantFieldref constantFieldref1 = new ConstantFieldref(2, 1);
      constantFieldref0.clone();
      constantFieldref1.toString();
      ObjectType objectType0 = Type.STRING;
      int int3 = Member.PUBLIC;
      ConstantFieldref constantFieldref2 = new ConstantFieldref(constantFieldref1);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool1);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantFieldref2, constantPoolGen1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantUtf8 cannot be cast to org.apache.bcel.classfile.ConstantNameAndType
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Constant[] constantArray0 = new Constant[11];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.lookupInteger(13);
      constantPoolGen0.getFinalConstantPool();
      constantPoolGen0.addLong(13);
      int int0 = constantPoolGen0.lookupLong(13);
      assertEquals(13, constantPoolGen0.getSize());
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Constant[] constantArray0 = new Constant[11];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.lookupInteger(4712);
      constantPoolGen0.addDouble(2193.248418181);
      constantPoolGen0.getFinalConstantPool();
      constantPoolGen0.addLong((-767L));
      constantPoolGen0.lookupLong(13);
      assertEquals(15, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantString constantString0 = new ConstantString(248);
      constantArray0[0] = (Constant) constantString0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("tableswitch");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantFloat constantFloat0 = new ConstantFloat(248);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[2] = (Constant) constantFloat1;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.addFloat(248);
      assertEquals(2, int0);
      assertEquals(3, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Constant.getComparator();
      int int0 = 12;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(12, 314);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantInterfaceMethodref1, constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 314
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantInteger constantInteger0 = new ConstantInteger(256);
      Constant.getComparator();
      Integer integer0 = new Integer(390);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      String string0 = "m0dW*p)}@x";
      constantPoolGen0.addString("m0dW*p)}@x");
      constantPoolGen0.addLong(4648436095074172928L);
      String string1 = "~\\hoJ7mjmFH/5-v";
      constantPoolGen0.lookupInterfaceMethodref("~hoJ7mjmFH/5-v", "Y1`'rYdJJ;*C&~", "<clinit>");
      constantPoolGen0.addLong(4648436095074172928L);
      ConstantUtf8 constantUtf8_0 = null;
      try {
        constantUtf8_0 = new ConstantUtf8((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes must not be null!
         //
         verifyException("org.apache.bcel.classfile.ConstantUtf8", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(0, 0);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantMethodref0, constantPoolGen1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantMethodref cannot be cast to org.apache.bcel.classfile.ConstantClass
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFieldref("Stack next-to-next-to-top must be of type long[] but is '", "Stack next-to-next-to-top must be of type long[] but is '", "Stack next-to-next-to-top must be of type long[] but is '");
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      Constant constant0 = constantPool0.getConstant(4);
      constantPoolGen0.addConstant(constant0, constantPoolGen0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addArrayClass((ArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addMethodref("\n", "\n", "\n");
      constantPoolGen0.adjustSize();
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = Pattern.CANON_EQ;
      constantPoolGen0.getConstantPool();
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.addDouble((-355.454655803));
      // Undeclared exception!
      try { 
        constantPoolGen0.addInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFloat(0.0F);
      constantPoolGen0.addNameAndType("#", "#");
      constantPoolGen0.lookupNameAndType("#", "#");
      int int0 = constantPoolGen0.addDouble(3);
      assertEquals(6, constantPoolGen0.getSize());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFieldref("!R$h/nc/+yznJ*._", "!R$h/nc/+yznJ*._", "!R$h/nc/+yznJ*._");
      constantPoolGen0.addInterfaceMethodref("!R$h/nc/+yznJ*._", "!R$h/nc/+yznJ*._", "!R$h/nc/+yznJ*._");
      Boolean boolean0 = new Boolean("!R$h/nc/+yznJ*._");
      constantPoolGen0.adjustSize();
      int int0 = Character.MAX_RADIX;
      BCELComparator bCELComparator0 = MethodGen.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantLong constantLong0 = new ConstantLong(5);
      ConstantString constantString0 = new ConstantString(6);
      ConstantString constantString1 = new ConstantString(constantString0);
      ConstantString constantString2 = new ConstantString(constantString1);
      assertEquals(6, constantString2.getStringIndex());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupMethodref("R\"h/ncH+yznJ*._", "R\"h/ncH+yznJ*._", "R\"h/ncH+yznJ*._");
      constantPoolGen0.addFieldref("R\"h/ncH+yznJ*._", "R\"h/ncH+yznJ*._", "R\"h/ncH+yznJ*._");
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      constantPoolGen0.getConstantPool();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      constantPool0.toString();
      Constant constant0 = constantPool0.getConstant(5);
      byte[] byteArray0 = new byte[36];
      byteArray0[0] = (byte)90;
      constantPoolGen0.addConstant(constant0, constantPoolGen0);
      Method method0 = new Method();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)90, 6);
      ConstantUtf8.getInstance("UlCLd/H<(Qk&3");
      ConstantDouble constantDouble0 = new ConstantDouble(5);
      int int0 = Float.MIN_EXPONENT;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      MethodGen methodGen0 = null;
      try {
        methodGen0 = new MethodGen((Method) null, "u;k04Ft_5NWDZ,Z;n(", constantPoolGen1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.MethodGen", e);
      }
  }
}
