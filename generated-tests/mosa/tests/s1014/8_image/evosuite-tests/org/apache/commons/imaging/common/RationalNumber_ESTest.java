/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 05:09:13 GMT 2018
 */

package org.apache.commons.imaging.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.imaging.common.RationalNumber;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RationalNumber_ESTest extends RationalNumber_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-2950.598556602668));
      assertEquals((-2950.598556608029), rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2277.2576797585075);
      assertEquals(20237989, rationalNumber0.numerator);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber(0, 0);
      String string0 = rationalNumber0.toString();
      assertEquals("Invalid rational (0/0)", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0.0);
      int int0 = rationalNumber0.intValue();
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(0, int0);
      assertEquals(0.0, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-2997.6545198277));
      float float0 = rationalNumber0.floatValue();
      assertEquals((-2997.6545F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(189L);
      long long0 = rationalNumber0.longValue();
      assertEquals(189L, long0);
      assertEquals(189.0, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2147483648L), (-2147483648L));
      String string0 = rationalNumber0.toString();
      assertEquals(1, rationalNumber0.divisor);
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-2150.08));
      String string0 = rationalNumber0.toString();
      assertEquals("-53752/25 (-2,150.08)", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-1010.3460405402741));
      String string0 = rationalNumber0.toDisplayString();
      assertEquals((-5830707), rationalNumber0.numerator);
      assertEquals("-1,010.346", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-2.147483647E9));
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("-2147483647", string0);
      assertEquals(1, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2.147483647E9);
      assertEquals(2.147483647E9, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-1819.49728898188));
      assertEquals((-1819.4973F), rationalNumber0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-2.1474836241349306E9));
      assertEquals((-2147483624L), rationalNumber0.longValue());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2147483649L), (-2147483649L));
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber((-3091), (-3091));
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(209L, 2147483681L);
      assertEquals(13, rationalNumber1.numerator);
      assertEquals(9.685754631671986E-8, rationalNumber1.doubleValue(), 0.01);
      
      RationalNumber rationalNumber2 = RationalNumber.factoryMethod(1L, 209L);
      assertEquals(0.004784689F, rationalNumber2.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      long long0 = 0L;
      // Undeclared exception!
      try { 
        RationalNumber.factoryMethod((-2147483664L), 0L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Invalid value, numerator: -2147483664, divisor: 0
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-812.3168141866));
      String string0 = rationalNumber0.toString();
      assertEquals("-38175641/46996 (-812.317)", string0);
      
      RationalNumber rationalNumber1 = RationalNumber.valueOf(1.0E-8);
      RationalNumber rationalNumber2 = RationalNumber.valueOf(100000000);
      rationalNumber0.doubleValue();
      rationalNumber1.toString();
      RationalNumber rationalNumber3 = RationalNumber.factoryMethod(1L, (-2147483661L));
      assertEquals(2147483635, rationalNumber3.divisor);
      
      int int0 = rationalNumber2.intValue();
      assertEquals(100000000, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(812.3076923076923);
      assertEquals(10560, rationalNumber0.numerator);
      
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod((-2974L), (-2147483649L));
      assertEquals(1.3848766671634496E-6, rationalNumber1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1987.778952);
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("1,987.779", string0);
      
      RationalNumber rationalNumber1 = RationalNumber.valueOf(3.817566110750739E7);
      rationalNumber0.doubleValue();
      String string1 = rationalNumber1.toString();
      assertEquals("1068918511/28 (38,175,661.107)", string1);
      
      RationalNumber rationalNumber2 = RationalNumber.valueOf(3.817566110750739E7);
      assertEquals(3.817566110714286E7, rationalNumber2.doubleValue(), 0.01);
  }
}
