/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 23:21:22 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixVectorOperation;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.vector.DenseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CRSMatrix_ESTest extends CRSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(1986, 1986);
      Matrix matrix0 = cRSMatrix0.copy();
      CRSMatrix.block(cRSMatrix0, matrix0, matrix0, cRSMatrix0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1980);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(109);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      ooPlaceMatricesMultiplication0.apply((RowMajorSparseMatrix) cRSMatrix0, (RowMajorSparseMatrix) cRSMatrix0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Matrix matrix0 = cRSMatrix0.copy();
      assertTrue(matrix0.equals((Object)cRSMatrix0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(1958, 1958, 1958);
      DenseMatrix denseMatrix0 = cRSMatrix0.toDenseMatrix();
      // Undeclared exception!
      try { 
        CRSMatrix.block(denseMatrix0, cRSMatrix0, denseMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '1959' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.multiplyByItsTranspose();
      CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)0;
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(273, (double) (byte)0, (Random) mockRandom0);
      cRSMatrix0.rotate();
      cRSMatrix0.set(695, 4586, (byte)2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[][] doubleArray0 = new double[7][6];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = rowMajorSparseMatrix0.rotate();
      // Undeclared exception!
      try { 
        CRSMatrix.block(rowMajorSparseMatrix0, rowMajorSparseMatrix0, matrix0, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(0, 0, doubleArray0);
      cRSMatrix0.nonZeroRowMajorIterator();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.toBinary();
      cRSMatrix0.each((MatrixProcedure) null);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1980);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 109;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(109);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      cRSMatrix0.sliceTopLeft(109, 109);
      CRSMatrix cRSMatrix1 = new CRSMatrix(int0, int0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1980);
      cRSMatrix0.setColumn(4, (double) 4);
      MatrixProcedure matrixProcedure0 = null;
      cRSMatrix0.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1986, 1986);
      cRSMatrix0.copy();
      cRSMatrix0.each((MatrixProcedure) null);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("");
      cRSMatrix0.norm();
      // Undeclared exception!
      try { 
        cRSMatrix0.getRow(1932);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1933
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(4, 4, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 26;
      double[] doubleArray0 = new double[14];
      doubleArray0[1] = (double) 26;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(26, 26, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 14
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CRSMatrix.identity(6);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = (double) 6;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(6, 6, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      CRSMatrix cRSMatrix1 = CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      cRSMatrix1.max();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[][] doubleArray0 = new double[3][5];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1831.8904335165);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (-1831.8904335165);
      doubleArray1[0] = (-1831.8904335165);
      doubleArray2[2] = (-1831.8904335165);
      doubleArray2[3] = (-1831.8904335165);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = (-1831.8904335165);
      doubleArray3[1] = (-1831.8904335165);
      doubleArray3[3] = (-1831.8904335165);
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      cRSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)36;
      double[][] doubleArray0 = new double[2][0];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) (byte)36;
      doubleArray1[1] = (double) (byte)36;
      doubleArray1[2] = (double) (byte)36;
      doubleArray1[3] = (-1847.1523367056654);
      doubleArray1[4] = (double) (byte)36;
      doubleArray1[5] = (double) (byte)36;
      doubleArray1[6] = (-1847.1523367056654);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) (byte)36;
      doubleArray2[1] = (double) (byte)36;
      doubleArray2[2] = (double) (byte)36;
      doubleArray2[3] = (-1847.1523367056654);
      doubleArray2[4] = (-1847.1523367056654);
      doubleArray2[5] = (double) (byte)36;
      doubleArray2[6] = (-1847.1523367056654);
      doubleArray2[7] = (double) (byte)36;
      doubleArray2[8] = (double) (byte)36;
      doubleArray0[1] = doubleArray2;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      cRSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)2;
      int int0 = 291;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 447.2086226848561;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)36;
      doubleArray0[3] = (-1549.2367517925113);
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(291, (byte)0, doubleArray0);
      Matrix.zero((byte)36, 332);
      cRSMatrix0.iteratorOfNonZeroRows();
      // Undeclared exception!
      try { 
        cRSMatrix0.copyOfShape((-736), 332);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -736x332
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1980);
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix1 = CRSMatrix.random((-2941), 1980, (double) 1980, (Random) mockRandom0);
      CRSMatrix.block(cRSMatrix1, cRSMatrix0, cRSMatrix0, cRSMatrix1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1980, 1980, 1980);
      Matrix matrix0 = cRSMatrix0.rotate();
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      Matrix matrix1 = cRSMatrix0.copy();
      CRSMatrix.block(matrix0, matrix1, matrix0, matrix0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(109);
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.copy();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix1.foldNonZeroInColumn(4, vectorAccumulator0);
      cRSMatrix1.each((MatrixProcedure) null);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1926);
      cRSMatrix0.copy();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachInRow(98, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(49);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      cRSMatrix0.foldNonZero(matrixAccumulator0);
      double double0 = new Integer(49);
      cRSMatrix0.rotate();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      int[] intArray0 = new int[6];
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1950, (-977.6388767540425));
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cRSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      cRSMatrix0.to(matrixFactory0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(1980, 1980);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply((RowMajorSparseMatrix) cRSMatrix0, (RowMajorSparseMatrix) cRSMatrix0);
      cRSMatrix0.maxInRow(1907);
      CRSMatrix.block(matrix0, cRSMatrix0, matrix0, matrix0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int[] intArray0 = new int[6];
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("");
      cRSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CRSMatrix.random(318, (-1357), (double) (-1357), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(109);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      double double0 = new Integer(109);
      cRSMatrix0.min();
      CRSMatrix.identity(109);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.toSparseMatrix();
      cRSMatrix0.toBinary();
      MatrixFactory<CRSMatrix> matrixFactory0 = (MatrixFactory<CRSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        cRSMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(11);
      cRSMatrix0.setColumn(4, 0.0);
      // Undeclared exception!
      try { 
        cRSMatrix0.eachNonZero((MatrixProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      byte[] byteArray0 = cRSMatrix0.toBinary();
      CRSMatrix.fromBinary(byteArray0);
      cRSMatrix0.setColumn(0, (double) 0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 77;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(77);
      cRSMatrix0.removeFirstColumn();
      RowMajorSparseMatrix.zero(int0, int0);
      cRSMatrix0.minInRow(int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1980);
      Matrix matrix0 = cRSMatrix0.copyOfShape(1980, 1440);
      cRSMatrix0.swapColumns(1517, (-250));
      matrix0.copy();
      MatrixProcedure matrixProcedure0 = null;
      matrix0.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.setAll(194.02148557639995);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1980, 1980);
      int int0 = 1440;
      Matrix matrix0 = cRSMatrix0.copyOfShape(1980, 1440);
      int int1 = 1510;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Matrix matrix1 = cRSMatrix0.transformColumn(1510, vectorFunction0);
      cRSMatrix0.swapColumns(1510, (-250));
      int int2 = 5;
      int int3 = (-993);
      int int4 = 17;
      int int5 = 1201;
      int int6 = 3;
      cRSMatrix0.insert(matrix1, int3, int2, int4, int5, int1, int6);
      double[] doubleArray0 = new double[0];
      Matrix matrix2 = Matrix.from1DArray(int0, int2, doubleArray0);
      int int7 = (-409);
      long long0 = 3920400L;
      MockRandom mockRandom0 = new MockRandom(long0);
      Matrix.randomSymmetric(int7, mockRandom0);
      CRSMatrix.block(cRSMatrix0, matrix2, matrix0, matrix2);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      byte byte0 = (byte)2;
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      CRSMatrix.randomSymmetric(1533, 0.1, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1986);
      cRSMatrix0.copy();
      int int0 = 978;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.updateColumn(978, vectorFunction0);
      MatrixProcedure matrixProcedure0 = null;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.transform(matrixFunction0);
      cRSMatrix0.each(matrixProcedure0);
      cRSMatrix0.setAll(int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double[][] doubleArray0 = new double[7][6];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      rowMajorSparseMatrix0.forEach(consumer0);
      // Undeclared exception!
      try { 
        CRSMatrix.block(rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '8' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      CRSMatrix cRSMatrix1 = new CRSMatrix(497, 497, 497);
      cRSMatrix0.swapColumns(497, 1517);
      cRSMatrix1.setAll(497);
      String string0 = "HW";
      CRSMatrix.fromMatrixMarket(string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.toBinary();
      cRSMatrix0.copyOfShape(0, 1962);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(0, 0);
      cRSMatrix0.add((Matrix) columnMajorSparseMatrix0);
      int[] intArray0 = new int[18];
      intArray0[0] = 0;
      intArray0[1] = 0;
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(0, 4, 0);
      cRSMatrix1.setAll(0);
      // Undeclared exception!
      try { 
        CRSMatrix.identity((-1505));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(1986, 1986);
      CRSMatrix cRSMatrix1 = CRSMatrix.fromCSV("");
      cRSMatrix1.sum();
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix1, cRSMatrix0, cRSMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(13);
      cRSMatrix0.determinant();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints();
      CRSMatrix.random(72, 58, 1.0, (Random) mockRandom0);
      cRSMatrix0.to((MatrixFactory<Matrix>) null);
      cRSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = 1980;
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-583.23);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 0.0;
      int int1 = 2625;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(2625, (-583.23));
      cRSMatrix0.min();
      MockRandom mockRandom0 = new MockRandom();
      SparseMatrix.fromMatrixMarket("EIGEN");
      double double0 = Double.POSITIVE_INFINITY;
      cRSMatrix0.setColumn(int0, double0);
      MatrixProcedure matrixProcedure0 = null;
      int int2 = 150;
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(int1, int2);
      cRSMatrix0.eachNonZero(matrixProcedure0);
      cRSMatrix1.toBinary();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1980, 1980, 1980);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.updateRow(1011, vectorFunction0);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      cRSMatrix0.to(matrixFactory0);
      MatrixProcedure matrixProcedure0 = null;
      cRSMatrix0.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1986);
      Matrix matrix0 = cRSMatrix0.copy();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)1986, (double)604, (double)1986, (double)1986, (double)1986).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.updateRow(604, vectorFunction0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      CRSMatrix.block(cRSMatrix0, matrix0, cRSMatrix0, cRSMatrix0);
      CRSMatrix.block(cRSMatrix0, matrix0, matrix0, matrix0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1986);
      int int0 = 3594;
      cRSMatrix0.copyOfShape(1902, 3594);
      int int1 = (-3587);
      CRSMatrix cRSMatrix1 = CRSMatrix.from1DArray((-955), 1902, (double[]) null);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.to(matrixFactory0);
      MatrixProcedure matrixProcedure0 = null;
      int int2 = 1946;
      CRSMatrix cRSMatrix2 = new CRSMatrix(int0, int1, int2);
      cRSMatrix2.eachNonZero(matrixProcedure0);
      int int3 = 1950;
      int int4 = (-1475);
      int int5 = (-1879);
      CRSMatrix cRSMatrix3 = new CRSMatrix(int3, int4, int5);
      double double0 = 223.2;
      cRSMatrix3.setAll(double0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)88;
      CRSMatrix cRSMatrix0 = CRSMatrix.random((int) (byte)88, 318, (double) (byte)0, (Random) mockRandom0);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cRSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      cRSMatrix0.to(matrixFactory0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1986);
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.copy();
      int int0 = Integer.MAX_VALUE;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.updateRow(604, vectorFunction0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      CRSMatrix.block(cRSMatrix0, cRSMatrix1, cRSMatrix0, cRSMatrix0);
      cRSMatrix1.foldNonZeroInColumn(int0, vectorAccumulator0);
      MatrixProcedure matrixProcedure0 = null;
      cRSMatrix0.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(1986, 1986);
      CRSMatrix cRSMatrix1 = CRSMatrix.fromCSV("");
      cRSMatrix1.sum();
      CRSMatrix cRSMatrix2 = new CRSMatrix(1986, 1986);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix2, cRSMatrix2, cRSMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1986);
      byte[] byteArray0 = cRSMatrix0.toBinary();
      CRSMatrix.fromBinary(byteArray0);
      CRSMatrix.fromMatrixMarket("");
      int int0 = 2446;
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(int0);
      cRSMatrix1.setColumn(int0, (double) int0);
      cRSMatrix0.iteratorOfNonZeroRows();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1986);
      CRSMatrix cRSMatrix1 = new CRSMatrix(1986, 1986, 1986);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      cRSMatrix0.maxInRow(1708);
      CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix1, cRSMatrix0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1980);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInRows(vectorAccumulator0);
      cRSMatrix0.setColumn(1980, (double) 1980);
      MatrixProcedure matrixProcedure0 = null;
      cRSMatrix0.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(109);
      cRSMatrix0.copy();
      cRSMatrix0.minInRow(4);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1986);
      CRSMatrix cRSMatrix1 = new CRSMatrix(1986, 1986, 1986);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int[] intArray0 = new int[4];
      intArray0[0] = 1708;
      intArray0[1] = 1986;
      intArray0[2] = 1986;
      intArray0[3] = 1708;
      cRSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(72);
      int[] intArray0 = new int[0];
      cRSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CRSMatrix.identity(1986);
      CRSMatrix cRSMatrix0 = new CRSMatrix(1986, 1986, 1986);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int[] intArray0 = new int[4];
      intArray0[0] = 1708;
      intArray0[1] = 1986;
      intArray0[2] = 1986;
      cRSMatrix0.select(intArray0, intArray0);
  }
}
