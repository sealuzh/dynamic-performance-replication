/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 06:08:54 GMT 2018
 */

package org.apache.commons.imaging.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.imaging.common.RationalNumber;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RationalNumber_ESTest extends RationalNumber_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(3.249343831157603E-4);
      String string0 = rationalNumber0.toString();
      assertEquals("2/6155 (0)", string0);
      
      long long0 = rationalNumber0.longValue();
      assertEquals(0L, long0);
      
      float float0 = rationalNumber0.floatValue();
      assertEquals(3.249391E-4F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2139.35914325313);
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      RationalNumber rationalNumber2 = RationalNumber.factoryMethod(42549714, 19889);
      RationalNumber rationalNumber3 = rationalNumber2.negate();
      String string0 = rationalNumber3.toString();
      assertEquals("-42549714/19889 (-2,139.359)", string0);
      
      RationalNumber rationalNumber4 = RationalNumber.valueOf(19889);
      String string1 = rationalNumber4.toDisplayString();
      assertEquals("19889", string1);
      
      long long0 = rationalNumber0.longValue();
      assertEquals(2139L, long0);
      
      RationalNumber rationalNumber5 = RationalNumber.valueOf(0.0);
      assertEquals(0L, rationalNumber5.longValue());
      
      rationalNumber0.floatValue();
      String string2 = rationalNumber4.toString();
      assertEquals("19,889", string2);
      
      String string3 = rationalNumber2.toString();
      assertEquals("42549714/19889 (2,139.359)", string3);
      
      rationalNumber4.intValue();
      assertEquals(19889.0F, rationalNumber4.floatValue(), 0.01F);
      
      String string4 = rationalNumber1.toDisplayString();
      assertEquals("-2,139.359", string4);
      assertEquals((byte) (-91), rationalNumber1.byteValue());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber((-1869), (-1869));
      rationalNumber0.toString();
      RationalNumber rationalNumber1 = RationalNumber.valueOf((-963.572985));
      String string0 = rationalNumber0.toString();
      assertEquals("1", string0);
      
      String string1 = rationalNumber0.toDisplayString();
      assertTrue(string1.equals((Object)string0));
      
      RationalNumber.valueOf((-2609.09524));
      RationalNumber rationalNumber2 = rationalNumber1.negate();
      String string2 = rationalNumber2.toDisplayString();
      assertEquals("963.573", string2);
      
      String string3 = rationalNumber1.toDisplayString();
      assertEquals("-963.573", string3);
      
      String string4 = rationalNumber1.toString();
      assertEquals("-8225059/8536 (-963.573)", string4);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(0L, (-3146L));
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      RationalNumber rationalNumber2 = rationalNumber1.negate();
      String string0 = rationalNumber1.toString();
      assertEquals("0", string0);
      
      RationalNumber rationalNumber3 = rationalNumber0.negate();
      String string1 = rationalNumber3.toDisplayString();
      assertEquals("0", string1);
      
      rationalNumber0.negate();
      RationalNumber rationalNumber4 = RationalNumber.valueOf(1);
      assertEquals((short)1, rationalNumber4.shortValue());
      
      rationalNumber3.toString();
      rationalNumber1.toString();
      rationalNumber1.intValue();
      rationalNumber0.toString();
      rationalNumber3.intValue();
      rationalNumber2.intValue();
      rationalNumber0.longValue();
      RationalNumber rationalNumber5 = RationalNumber.valueOf(3.3458763937233016E-7);
      assertEquals(1, rationalNumber5.numerator);
      
      RationalNumber rationalNumber6 = RationalNumber.valueOf((-3532.8127));
      assertEquals((-3532L), rationalNumber6.longValue());
      assertEquals((-3532.8127), rationalNumber6.doubleValue(), 0.01);
      assertEquals((short) (-3532), rationalNumber6.shortValue());
      
      int int0 = rationalNumber1.intValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        RationalNumber.factoryMethod(2147483673L, 0L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Invalid value, numerator: 2147483673, divisor: 0
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      long long0 = 0L;
      // Undeclared exception!
      try { 
        RationalNumber.factoryMethod(2147483673L, 0L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Invalid value, numerator: 2147483673, divisor: 0
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(2147483673L, 2147483673L);
      float float0 = rationalNumber0.floatValue();
      assertEquals(1, rationalNumber0.numerator);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(2147483648L, (-19L));
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      RationalNumber rationalNumber2 = rationalNumber1.negate();
      String string0 = rationalNumber2.toString();
      assertEquals("-536870912/5 (-107,374,182.4)", string0);
      
      RationalNumber rationalNumber3 = rationalNumber0.negate();
      String string1 = rationalNumber1.toDisplayString();
      assertEquals("107,374,182.4", string1);
      
      RationalNumber rationalNumber4 = rationalNumber0.negate();
      RationalNumber rationalNumber5 = RationalNumber.valueOf((-487.4366794308198));
      rationalNumber0.toString();
      rationalNumber0.toString();
      rationalNumber3.intValue();
      rationalNumber0.toString();
      RationalNumber rationalNumber6 = rationalNumber5.negate();
      rationalNumber6.intValue();
      assertEquals(3564137, rationalNumber6.numerator);
      
      rationalNumber3.intValue();
      rationalNumber4.longValue();
      RationalNumber.valueOf(5);
      RationalNumber rationalNumber7 = RationalNumber.valueOf(697.0);
      assertEquals(697L, rationalNumber7.longValue());
      
      int int0 = rationalNumber1.intValue();
      assertEquals(107374182, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-2.147483647E9));
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      RationalNumber rationalNumber2 = RationalNumber.valueOf((-1691.0));
      String string0 = rationalNumber1.toString();
      assertEquals("2,147,483,647", string0);
      
      RationalNumber.valueOf((-1.0));
      RationalNumber rationalNumber3 = RationalNumber.valueOf(0.0);
      RationalNumber rationalNumber4 = rationalNumber3.negate();
      assertEquals(1, rationalNumber4.divisor);
      
      RationalNumber rationalNumber5 = RationalNumber.valueOf(3.8467752483093425E-6);
      RationalNumber rationalNumber6 = RationalNumber.factoryMethod(0, (-4398L));
      RationalNumber.factoryMethod((-2147483648L), 1);
      RationalNumber rationalNumber7 = RationalNumber.factoryMethod((-919L), 2147483673L);
      assertEquals((-4.284083795352834E-7), rationalNumber7.doubleValue(), 0.01);
      
      rationalNumber2.toString();
      assertEquals((-1691L), rationalNumber2.longValue());
      
      String string1 = rationalNumber6.toString();
      assertEquals("0", string1);
      
      rationalNumber5.intValue();
      assertEquals(3.8467752483093425E-6, rationalNumber5.doubleValue(), 0.01);
      
      rationalNumber0.longValue();
      RationalNumber rationalNumber8 = RationalNumber.valueOf(1170.7058001397625);
      assertEquals((byte) (-110), rationalNumber8.byteValue());
      assertEquals(1675280, rationalNumber8.numerator);
      
      RationalNumber rationalNumber9 = RationalNumber.valueOf((-2.147483647E9));
      rationalNumber9.intValue();
      RationalNumber rationalNumber10 = RationalNumber.valueOf(1);
      assertEquals((short)1, rationalNumber10.shortValue());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2147483673L);
      assertEquals(2.147483647E9, rationalNumber0.doubleValue(), 0.01);
      
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(1, 2147483673L);
      assertEquals((-4.656612927287502E-10), rationalNumber1.doubleValue(), 0.01);
      
      RationalNumber rationalNumber2 = RationalNumber.factoryMethod(Integer.MAX_VALUE, (-50L));
      RationalNumber rationalNumber3 = RationalNumber.factoryMethod((-4178L), (-1255L));
      String string0 = rationalNumber2.toString();
      assertEquals("-2147483647/50 (-42,949,672.94)", string0);
      
      RationalNumber rationalNumber4 = RationalNumber.valueOf((-1.0));
      assertEquals((-1.0), rationalNumber4.doubleValue(), 0.01);
      
      RationalNumber rationalNumber5 = RationalNumber.valueOf(1);
      assertEquals(1, rationalNumber5.intValue());
      
      int int0 = rationalNumber3.intValue();
      assertEquals(4178, rationalNumber3.numerator);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2147483652L), (-2147483652L));
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(1, (-2147483652L));
      RationalNumber rationalNumber2 = rationalNumber1.negate();
      assertEquals((-4.656613E-10F), rationalNumber2.floatValue(), 0.01F);
      
      RationalNumber rationalNumber3 = RationalNumber.valueOf(2483.475092499);
      assertEquals(28865431, rationalNumber3.numerator);
      
      RationalNumber rationalNumber4 = rationalNumber0.negate();
      assertEquals((-1.0), rationalNumber4.doubleValue(), 0.01);
  }
}
