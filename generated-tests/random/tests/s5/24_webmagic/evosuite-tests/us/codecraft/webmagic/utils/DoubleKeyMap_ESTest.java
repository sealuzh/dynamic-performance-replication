/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 13:48:31 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HashMap<HashMap<String, Map<Integer, String>>, Map<Object, String>> hashMap0 = new HashMap<HashMap<String, Map<Integer, String>>, Map<Object, String>>();
      DoubleKeyMap<HashMap<String, Map<Integer, String>>, Object, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Map<Integer, String>>, Object, String>(hashMap0);
      HashMap<String, Map<Integer, String>> hashMap1 = new HashMap<String, Map<Integer, String>>();
      Map<Object, String> map0 = doubleKeyMap0.get(hashMap1);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DoubleKeyMap<Object, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Integer>();
      Integer integer0 = new Integer((-1));
      Integer integer1 = doubleKeyMap0.put((Object) null, integer0, integer0);
      Integer integer2 = doubleKeyMap0.remove((Object) null, integer1);
      assertNull(integer2);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HashMap<String, Map<Map<Integer, String>, Integer>> hashMap0 = new HashMap<String, Map<Map<Integer, String>, Integer>>();
      DoubleKeyMap<Map<Integer, String>, Object, HashMap<Object, String>> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, String>, Object, HashMap<Object, String>>();
      Map<Map<Integer, String>, Integer> map0 = doubleKeyMap0.newMap();
      hashMap0.put("", map0);
      DoubleKeyMap<String, Map<Integer, String>, Integer> doubleKeyMap1 = new DoubleKeyMap<String, Map<Integer, String>, Integer>(hashMap0);
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      doubleKeyMap1.remove("", (Map<Integer, String>) hashMap1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, String>, Map<Integer, String>, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, String>, Map<Integer, String>, String>((Map<HashMap<Object, String>, Map<Map<Integer, String>, String>>) null);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      doubleKeyMap0.put(hashMap0, (Map<Integer, String>) hashMap1, "");
      String string0 = doubleKeyMap0.put(hashMap0, (Map<Integer, String>) hashMap1, "wrong proto type map ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      HashMap<Map<Integer, String>, Map<String, Integer>> hashMap1 = new HashMap<Map<Integer, String>, Map<String, Integer>>();
      DoubleKeyMap<Map<Integer, String>, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, String>, String, Integer>(hashMap1);
      Integer integer0 = doubleKeyMap0.get((Map<Integer, String>) hashMap0, "swK5\"+c");
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      HashMap<String, Map<HashMap<Object, String>, Object>> hashMap0 = new HashMap<String, Map<HashMap<Object, String>, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, HashMap<Object, String>, Object> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<Object, String>, Object>(hashMap0, class0);
      HashMap<HashMap<Object, String>, Object> hashMap1 = new HashMap<HashMap<Object, String>, Object>();
      hashMap0.put(")/", hashMap1);
      HashMap<Object, String> hashMap2 = new HashMap<Object, String>();
      Object object0 = doubleKeyMap0.get(")/", hashMap2);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      HashMap<String, Map<Map<Integer, String>, Integer>> hashMap0 = new HashMap<String, Map<Map<Integer, String>, Integer>>();
      DoubleKeyMap<String, Map<Integer, String>, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Map<Integer, String>, Integer>(hashMap0);
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      Integer integer0 = doubleKeyMap0.remove("", (Map<Integer, String>) hashMap1);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Object, HashMap<Object, Object>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, Object, HashMap<Object, Object>>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      DoubleKeyMap<Integer, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Integer>();
      Map<Integer, Map<HashMap<Integer, Integer>, HashMap<Map<Integer, String>, Map<Integer, String>>>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Integer, HashMap<Integer, Integer>, HashMap<Map<Integer, String>, Map<Integer, String>>> doubleKeyMap1 = new DoubleKeyMap<Integer, HashMap<Integer, Integer>, HashMap<Map<Integer, String>, Map<Integer, String>>>(map0);
      Integer integer0 = new Integer(0);
      Map<HashMap<Integer, Integer>, HashMap<Map<Integer, String>, Map<Integer, String>>> map1 = doubleKeyMap1.remove(integer0);
      assertNull(map1);
  }
}
