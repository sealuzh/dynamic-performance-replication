/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 23:53:49 GMT 2018
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.literal();
      xPathLexer0.or();
      xPathLexer0.mod();
      xPathLexer0.and();
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      
      xPathLexer0.leftBracket();
      Token token1 = xPathLexer0.literal();
      assertNull(token1);
      
      xPathLexer0.setXPath("");
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
      assertNotNull(token2);
      
      xPathLexer0.setXPath("dX&");
      Token token3 = xPathLexer0.doubleColon();
      assertEquals("dX", token3.getTokenText());
      
      xPathLexer0.getXPath();
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      
      Token token5 = xPathLexer0.colon();
      assertEquals("&", token5.getTokenText());
      
      xPathLexer0.doubleColon();
      xPathLexer0.leftBracket();
      Token token6 = xPathLexer0.at();
      assertEquals(16, token6.getTokenType());
      
      Token token7 = xPathLexer0.rightBracket();
      assertEquals(4, token7.getTokenType());
      
      xPathLexer0.colon();
      Token token8 = xPathLexer0.colon();
      assertEquals(18, token8.getTokenType());
      
      xPathLexer0.leftBracket();
      xPathLexer0.relationalOperator();
      xPathLexer0.currentPosition();
      Token token9 = xPathLexer0.minus();
      assertEquals(6, token9.getTokenType());
      
      xPathLexer0.mod();
      Token token10 = xPathLexer0.leftBracket();
      assertEquals(3, token10.getTokenType());
      
      xPathLexer0.getXPath();
      xPathLexer0.or();
      Token token11 = xPathLexer0.doubleColon();
      assertEquals(19, token11.getTokenType());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.equals();
      xPathLexer0.equals();
      xPathLexer0.star();
      xPathLexer0.plus();
      xPathLexer0.or();
      xPathLexer0.and();
      xPathLexer0.setPreviousToken((Token) null);
      assertNull(xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.whitespace();
      xPathLexer0.leftParen();
      xPathLexer0.isIdentifierStartChar('L');
      Token token0 = xPathLexer0.rightParen();
      xPathLexer0.at();
      char char0 = '(';
      String string0 = ") (";
      xPathLexer0.setXPath(") (");
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      Token token0 = xPathLexer0.notEquals();
      assertEquals("[ ", token0.getTokenText());
      
      Token token1 = xPathLexer0.number();
      assertEquals("", token1.getTokenText());
      assertEquals(30, token1.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.getXPath();
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      
      xPathLexer0.mod();
      Token token4 = xPathLexer0.pipe();
      assertEquals(17, token4.getTokenType());
      
      xPathLexer0.mod();
      Token token5 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token5.getTokenType());
      assertNotNull(token5);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.slashes();
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      
      xPathLexer0.nextToken();
      Token token2 = xPathLexer0.getPreviousToken();
      assertEquals((-1), token2.getTokenType());
      
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      
      Token token4 = xPathLexer0.star();
      assertEquals(20, token4.getTokenType());
      
      xPathLexer0.or();
      Token token5 = xPathLexer0.identifierOrOperatorName();
      assertNull(token5);
      
      xPathLexer0.consume();
      Token token6 = xPathLexer0.leftBracket();
      assertEquals(3, token6.getTokenType());
      
      xPathLexer0.leftParen();
      xPathLexer0.consume();
      xPathLexer0.consume((-1));
      xPathLexer0.mod();
      xPathLexer0.currentPosition();
      xPathLexer0.leftParen();
      Token token7 = xPathLexer0.dots();
      assertEquals(13, token7.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.endPosition();
      Token token8 = xPathLexer0.colon();
      assertEquals(18, token8.getTokenType());
      
      xPathLexer0.equals();
      int int0 = xPathLexer0.currentPosition();
      assertEquals(12, int0);
      
      Token token9 = xPathLexer0.equals();
      assertEquals(21, token9.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.hasMoreChars();
      Token token10 = xPathLexer0.rightBracket();
      assertEquals(4, token10.getTokenType());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.consume(1);
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("cvF[vjL");
      xPathLexer0.not();
      xPathLexer0.mod();
      xPathLexer0.and();
      Token token0 = xPathLexer0.comma();
      xPathLexer0.or();
      token0.toString();
      token0.toString();
      xPathLexer0.minus();
      token0.toString();
      xPathLexer0.doubleColon();
      token0.toString();
      xPathLexer0.div();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.leftBracket();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.getXPath();
      xPathLexer0.slashes();
      xPathLexer0.equals();
      xPathLexer0.mod();
      xPathLexer0.consume(0);
      xPathLexer0.rightParen();
      xPathLexer0.identifier();
      xPathLexer0.getXPath();
      xPathLexer0.div();
      xPathLexer0.dollar();
      Token token1 = xPathLexer0.and();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer(":NosyH");
      Token token0 = xPathLexer1.nextToken();
      assertEquals(18, token0.getTokenType());
      assertEquals(":", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("LhWdD4[Df|");
      xPathLexer0.or();
      xPathLexer0.consume(136);
      xPathLexer0.setXPath(": cq{F@");
      xPathLexer0.nextToken();
      xPathLexer0.plus();
      xPathLexer0.operatorName();
      xPathLexer0.leftParen();
      xPathLexer0.pipe();
      xPathLexer0.slashes();
      xPathLexer0.getPreviousToken();
      xPathLexer0.comma();
      xPathLexer0.rightBracket();
      xPathLexer0.isIdentifierChar('+');
      xPathLexer0.relationalOperator();
      xPathLexer0.not();
      xPathLexer0.whitespace();
      xPathLexer0.endPosition();
      xPathLexer0.getXPath();
      xPathLexer0.colon();
      xPathLexer0.doubleColon();
      xPathLexer0.setXPath("");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.or();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.and();
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.setXPath("96*5-IbEk]|Z%9oOZ*`");
      xPathLexer0.at();
      Token token2 = xPathLexer0.at();
      assertEquals("6", token2.getTokenText());
      
      Token token3 = xPathLexer0.notEquals();
      assertEquals(22, token3.getTokenType());
      assertEquals("*5", token3.getTokenText());
      
      xPathLexer0.relationalOperator();
      char char0 = xPathLexer0.LA(5399);
      assertEquals('\uFFFF', char0);
      
      Token token4 = xPathLexer0.plus();
      assertEquals("-", token4.getTokenText());
      assertEquals(5, token4.getTokenType());
      
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      
      Token token6 = xPathLexer0.not();
      assertEquals(23, token6.getTokenType());
      assertEquals("I", token6.getTokenText());
      
      Token token7 = xPathLexer0.identifierOrOperatorName();
      assertEquals("bEk", token7.getTokenText());
      
      Token token8 = xPathLexer0.minus();
      assertEquals("]", token8.getTokenText());
      
      xPathLexer0.literal();
      xPathLexer0.consume(3819);
      xPathLexer0.minus();
      xPathLexer0.leftParen();
      xPathLexer0.at();
      int int0 = xPathLexer0.currentPosition();
      assertEquals(3841, int0);
      
      Token token9 = xPathLexer0.minus();
      assertEquals(6, token9.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.consume();
      xPathLexer0.relationalOperator();
      Token token10 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token10);
      
      xPathLexer0.or();
      Token token11 = xPathLexer0.nextToken();
      assertEquals((-1), token11.getTokenType());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("w.(7I");
      Token token0 = xPathLexer0.equals();
      assertEquals("w", token0.getTokenText());
      assertEquals(21, token0.getTokenType());
      
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      
      Token token2 = xPathLexer0.rightBracket();
      token2.toString();
      String string0 = token2.toString();
      assertEquals("[ (4) ()", string0);
      
      xPathLexer0.consume();
      xPathLexer0.setPreviousToken(token2);
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertNull(token3);
      
      Token token4 = xPathLexer0.doubleColon();
      assertEquals("(7", token4.getTokenText());
      assertEquals(19, token4.getTokenType());
      
      xPathLexer0.getPreviousToken();
      Token token5 = xPathLexer0.rightParen();
      assertEquals("I", token5.getTokenText());
      assertEquals(2, token5.getTokenType());
      
      Token token6 = xPathLexer0.dollar();
      assertEquals(26, token6.getTokenType());
      
      Token token7 = xPathLexer0.pipe();
      assertEquals(17, token7.getTokenType());
      
      xPathLexer0.hasMoreChars();
      Token token8 = xPathLexer0.whitespace();
      assertEquals((-2), token8.getTokenType());
      
      Token token9 = xPathLexer0.not();
      assertEquals(23, token9.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.and();
      Token token10 = xPathLexer0.plus();
      assertEquals(5, token10.getTokenType());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
      
      xPathLexer0.setXPath("QR.`LV@{dam!EjE");
      Token token1 = xPathLexer0.dots();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      String string0 = token1.toString();
      assertEquals("[ (13) (Q)", string0);
      
      xPathLexer0.setPreviousToken(token1);
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      assertEquals("R", token2.getTokenText());
      
      Token token3 = xPathLexer0.at();
      assertEquals(".", token3.getTokenText());
      
      Token token4 = xPathLexer0.identifier();
      assertEquals(15, token4.getTokenType());
      
      xPathLexer0.consume(0);
      xPathLexer0.equals();
      Token token5 = xPathLexer0.doubleColon();
      assertEquals("LV", token5.getTokenText());
      assertEquals(19, token5.getTokenType());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(15, int0);
      
      xPathLexer0.whitespace();
      Token token6 = xPathLexer0.at();
      assertEquals(16, token6.getTokenType());
      
      char char0 = xPathLexer0.LA(0);
      assertEquals('{', char0);
      
      xPathLexer0.notEquals();
      Token token7 = xPathLexer0.whitespace();
      assertEquals((-2), token7.getTokenType());
      assertEquals("", token7.getTokenText());
      
      xPathLexer0.consume(0);
      Token token8 = xPathLexer0.notEquals();
      assertEquals("!E", token8.getTokenText());
      assertEquals(22, token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("LhWdD4[Df|");
      xPathLexer0.or();
      xPathLexer0.consume(136);
      xPathLexer0.setXPath(": cq{F@");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.plus();
      assertEquals(" ", token0.getTokenText());
      assertEquals(5, token0.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.leftParen();
      Token token1 = xPathLexer0.pipe();
      assertEquals("q", token1.getTokenText());
      
      Token token2 = xPathLexer0.slashes();
      assertEquals(11, token2.getTokenType());
      assertEquals("{", token2.getTokenText());
      
      Token token3 = xPathLexer0.getPreviousToken();
      assertEquals(":", token3.getTokenText());
      assertEquals(18, token3.getTokenType());
      
      Token token4 = xPathLexer0.comma();
      assertEquals(32, token4.getTokenType());
      assertEquals("F", token4.getTokenText());
      
      xPathLexer0.getXPath();
      Token token5 = xPathLexer0.at();
      assertEquals("@", token5.getTokenText());
      
      xPathLexer0.mod();
      Token token6 = xPathLexer0.pipe();
      assertEquals(17, token6.getTokenType());
      
      xPathLexer0.mod();
      Token token7 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token7.getTokenType());
      
      Token token8 = xPathLexer0.at();
      assertEquals(16, token8.getTokenType());
      
      Token token9 = xPathLexer0.identifier();
      assertEquals(15, token9.getTokenType());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.and();
      xPathLexer0.doubleColon();
      xPathLexer0.equals();
      xPathLexer0.consume();
      xPathLexer0.setXPath("96*5-IbEk]|Z%9oOZ*`");
      xPathLexer0.nextToken();
      xPathLexer0.plus();
      xPathLexer0.operatorName();
      xPathLexer0.leftParen();
      xPathLexer0.pipe();
      xPathLexer0.slashes();
      xPathLexer0.getPreviousToken();
      xPathLexer0.comma();
      xPathLexer0.rightBracket();
      xPathLexer0.isIdentifierChar('+');
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.not();
      xPathLexer1.whitespace();
      xPathLexer0.endPosition();
      xPathLexer1.getXPath();
      xPathLexer0.colon();
      xPathLexer0.doubleColon();
      xPathLexer0.setXPath("mSK:$F((*~GL:nu0");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.operatorName();
      Token token0 = xPathLexer1.or();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("LhWdD4[Df|");
      xPathLexer0.or();
      xPathLexer0.consume(136);
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setXPath(",Z^h7^H[Dm%%");
      xPathLexer0.at();
      Token token0 = xPathLexer1.at();
      assertEquals(",", token0.getTokenText());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      
      xPathLexer0.relationalOperator();
      char char0 = xPathLexer1.LA(136);
      assertEquals('\uFFFF', char0);
      
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      
      xPathLexer0.number();
      Token token3 = xPathLexer1.not();
      assertEquals("Z", token3.getTokenText());
      assertEquals(23, token3.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.minus();
      xPathLexer0.literal();
      xPathLexer0.consume(1);
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.minus();
      xPathLexer2.leftParen();
      Token token4 = xPathLexer0.at();
      assertEquals(16, token4.getTokenType());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(144, int0);
      
      Token token5 = xPathLexer1.minus();
      assertEquals(6, token5.getTokenType());
      assertEquals("^", token5.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer1.consume();
      xPathLexer0.relationalOperator();
      Token token6 = xPathLexer2.identifierOrOperatorName();
      assertEquals(15, token6.getTokenType());
      assertNotNull(token6);
      
      xPathLexer2.or();
      Token token7 = xPathLexer1.nextToken();
      assertEquals("7", token7.getTokenText());
      assertEquals(30, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.whitespace();
      xPathLexer0.leftParen();
      xPathLexer0.isIdentifierStartChar('L');
      xPathLexer0.setXPath("yMn&p7");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.plus();
      assertEquals(5, token0.getTokenType());
      assertEquals("&", token0.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer0.leftParen();
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      assertEquals("7", token1.getTokenText());
      
      Token token2 = xPathLexer0.slashes();
      assertEquals(11, token2.getTokenType());
      
      Token token3 = xPathLexer0.getPreviousToken();
      assertEquals("yMn", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.comma();
      assertEquals(32, token4.getTokenType());
      
      Token token5 = xPathLexer0.rightBracket();
      assertEquals(4, token5.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('z');
      assertTrue(boolean0);
      
      xPathLexer0.relationalOperator();
      Token token6 = xPathLexer0.not();
      assertEquals(23, token6.getTokenType());
      
      xPathLexer0.whitespace();
      xPathLexer0.endPosition();
      xPathLexer0.getXPath();
      Token token7 = xPathLexer0.colon();
      assertEquals(18, token7.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("yMn&p7");
      Token token8 = xPathLexer1.doubleColon();
      assertEquals(19, token8.getTokenType());
      assertEquals("yM", token8.getTokenText());
      
      xPathLexer1.setXPath("yMn&p7");
      xPathLexer1.operatorName();
      xPathLexer0.or();
      Token token9 = xPathLexer1.leftParen();
      assertEquals(1, token9.getTokenType());
      assertEquals("y", token9.getTokenText());
      
      boolean boolean1 = xPathLexer0.hasMoreChars();
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      assertEquals("[", token0.getTokenText());
      
      xPathLexer0.div();
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(" (", token1.getTokenText());
      assertEquals(19, token1.getTokenType());
      
      Token token2 = xPathLexer0.number();
      assertEquals("", token2.getTokenText());
      
      xPathLexer0.identifier();
      Token token3 = xPathLexer0.nextToken();
      assertEquals((-1), token3.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      xPathLexer0.currentPosition();
      xPathLexer0.consume();
      Token token4 = xPathLexer0.plus();
      assertEquals(5, token4.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("[ (");
      xPathLexer1.relationalOperator();
      Token token5 = xPathLexer1.nextToken();
      assertEquals(3, token5.getTokenType());
      assertEquals("[", token5.getTokenText());
      
      Token token6 = xPathLexer0.number();
      assertEquals(30, token6.getTokenType());
      
      Token token7 = xPathLexer0.identifier();
      assertEquals(15, token7.getTokenType());
      
      Token token8 = xPathLexer1.notEquals();
      assertEquals(" (", token8.getTokenText());
      assertEquals(22, token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("tfkgX:tr!YN'oi2I$$%");
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.nextToken();
      assertEquals("tfkgX", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.identifier();
      assertEquals("", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token2 = xPathLexer1.notEquals();
      assertEquals(22, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      assertEquals("[", token0.getTokenText());
      
      xPathLexer0.div();
      Token token1 = xPathLexer0.number();
      assertEquals("", token1.getTokenText());
      
      Token token2 = xPathLexer0.identifier();
      assertEquals("", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      Token token4 = xPathLexer0.rightParen();
      assertEquals(2, token4.getTokenType());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(4, int0);
      
      xPathLexer0.consume();
      String string0 = token3.toString();
      assertEquals("[ (1) (()", string0);
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.consume();
      Token token5 = xPathLexer1.nextToken();
      assertEquals((-1), token5.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token6 = xPathLexer1.equals();
      assertEquals(21, token6.getTokenType());
      
      Token token7 = xPathLexer0.number();
      assertEquals(30, token7.getTokenType());
      
      Token token8 = xPathLexer0.identifier();
      assertEquals(15, token8.getTokenType());
      
      Token token9 = xPathLexer1.notEquals();
      assertEquals(22, token9.getTokenType());
      
      boolean boolean0 = xPathLexer2.isIdentifierStartChar('z');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.equals();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.consume();
      xPathLexer1.setXPath("96*5-IbEk]|Z%9oOZ*`");
      xPathLexer1.nextToken();
      xPathLexer1.plus();
      XPathLexer xPathLexer2 = new XPathLexer(") (");
      xPathLexer2.operatorName();
      xPathLexer2.leftParen();
      xPathLexer2.pipe();
      xPathLexer1.slashes();
      xPathLexer1.getPreviousToken();
      xPathLexer1.comma();
      xPathLexer1.rightBracket();
      xPathLexer2.isIdentifierChar('.');
      xPathLexer2.relationalOperator();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.not();
      xPathLexer1.whitespace();
      xPathLexer3.endPosition();
      xPathLexer1.getXPath();
      xPathLexer3.colon();
      xPathLexer2.doubleColon();
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer4.setXPath(") (");
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer1.operatorName();
      xPathLexer0.or();
      Token token0 = xPathLexer2.getPreviousToken();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.and();
      xPathLexer0.doubleColon();
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.setXPath("96*5-IbEk]|Z%9oOZ*`");
      Token token1 = xPathLexer0.at();
      xPathLexer0.at();
      Token token2 = xPathLexer0.nextToken();
      assertEquals("*", token2.getTokenText());
      assertEquals(20, token2.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.setPreviousToken(token1);
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token3.getTokenType());
      assertEquals("5-IbEk", token3.getTokenText());
      
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(19, token4.getTokenType());
      assertEquals("]|", token4.getTokenText());
      
      Token token5 = xPathLexer0.getPreviousToken();
      assertEquals("9", token5.getTokenText());
      assertEquals(16, token5.getTokenType());
      
      xPathLexer0.dollar();
      Token token6 = xPathLexer0.rightParen();
      assertEquals(2, token6.getTokenType());
      assertEquals("%", token6.getTokenText());
      
      Token token7 = xPathLexer0.dollar();
      assertEquals("9", token7.getTokenText());
      assertEquals(26, token7.getTokenType());
      
      Token token8 = xPathLexer0.pipe();
      assertEquals(17, token8.getTokenType());
      assertEquals("o", token8.getTokenText());
      
      xPathLexer0.hasMoreChars();
      Token token9 = xPathLexer0.whitespace();
      assertEquals((-2), token9.getTokenType());
      
      Token token10 = xPathLexer0.not();
      assertEquals("Z", token10.getTokenText());
      assertEquals(23, token10.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.relationalOperator();
      Token token11 = xPathLexer1.slashes();
      assertEquals(11, token11.getTokenType());
      
      Token token12 = xPathLexer1.plus();
      assertEquals(5, token12.getTokenType());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      Token token0 = xPathLexer0.nextToken();
      Token token1 = xPathLexer0.rightBracket();
      String string0 = token1.toString();
      assertEquals("[ (4) ( )", string0);
      
      String string1 = token0.toString();
      assertEquals("[ (2) ())", string1);
      
      xPathLexer0.consume();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(")", token0.getTokenText());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertNull(token2);
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      
      xPathLexer0.getPreviousToken();
      XPathLexer xPathLexer1 = new XPathLexer("[ (4) ( )");
      xPathLexer1.rightParen();
      Token token4 = xPathLexer1.dollar();
      assertEquals(26, token4.getTokenType());
      assertEquals(" ", token4.getTokenText());
      
      Token token5 = xPathLexer1.pipe();
      assertEquals("(", token5.getTokenText());
      assertEquals(17, token5.getTokenType());
      
      boolean boolean0 = xPathLexer1.hasMoreChars();
      assertTrue(boolean0);
      
      Token token6 = xPathLexer1.whitespace();
      assertEquals((-2), token6.getTokenType());
      assertEquals("", token6.getTokenText());
      
      Token token7 = xPathLexer0.not();
      assertEquals(23, token7.getTokenType());
      
      xPathLexer1.relationalOperator();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token8 = xPathLexer2.notEquals();
      assertEquals(22, token8.getTokenType());
      
      xPathLexer0.dots();
      Token token9 = xPathLexer2.dots();
      assertEquals(13, token9.getTokenType());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("w.(7I");
      Token token0 = xPathLexer0.equals();
      Token token1 = xPathLexer0.number();
      assertEquals("", token1.getTokenText());
      assertEquals(30, token1.getTokenType());
      
      Token token2 = xPathLexer0.rightBracket();
      token2.toString();
      token2.toString();
      String string0 = token2.toString();
      assertEquals("[ (4) ()", string0);
      
      xPathLexer0.consume();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(21, token0.getTokenType());
      assertEquals("w", token0.getTokenText());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token3.getTokenType());
      assertEquals("", token3.getTokenText());
      
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.and();
      xPathLexer0.consume();
      Token token4 = xPathLexer0.slashes();
      assertEquals("7", token4.getTokenText());
      assertEquals(11, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("tfkgX:tr!YN'oi2I$$%");
      Token token0 = xPathLexer0.dots();
      assertEquals("t", token0.getTokenText());
      assertEquals(13, token0.getTokenType());
      
      xPathLexer0.or();
      Token token1 = xPathLexer0.number();
      assertEquals("", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token2 = xPathLexer1.equals();
      assertEquals(21, token2.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer1.getXPath();
      Token token3 = xPathLexer0.nextToken();
      assertEquals("kgX", token3.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token4 = xPathLexer2.number();
      assertEquals(30, token4.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token5 = xPathLexer3.identifier();
      assertEquals(15, token5.getTokenType());
      
      Token token6 = xPathLexer3.notEquals();
      assertEquals(22, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("LhWdD4[Df|");
      xPathLexer0.or();
      xPathLexer0.consume(136);
      xPathLexer0.setXPath(": cq{F@");
      Token token0 = xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.dollar();
      xPathLexer0.at();
      xPathLexer0.and();
      token0.toString();
      token0.toString();
      xPathLexer0.consume();
      xPathLexer0.getXPath();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.werken.saxpath.XPathLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.not();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.comma();
      xPathLexer0.consume(106);
      xPathLexer0.operatorName();
      xPathLexer0.pipe();
      xPathLexer0.div();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.consume(0);
      xPathLexer0.notEquals();
      xPathLexer0.setXPath("");
      xPathLexer0.whitespace();
      xPathLexer0.not();
      xPathLexer0.identifier();
      xPathLexer0.dollar();
      xPathLexer0.identifier();
      xPathLexer0.leftBracket();
      xPathLexer0.comma();
      xPathLexer0.isIdentifierChar('!');
      xPathLexer0.setXPath("1{;3\"Pm");
      xPathLexer0.dollar();
      xPathLexer0.doubleColon();
      xPathLexer0.whitespace();
      xPathLexer0.setXPath("E,Vpvg}?-f7~QYyw");
      xPathLexer0.whitespace();
      xPathLexer0.div();
      Token token1 = xPathLexer0.operatorName();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("tfkgX:tr!YN'oi2I$$%");
      Token token0 = xPathLexer0.rightBracket();
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (4) (t)", string0);
      
      xPathLexer0.consume();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("s70-{+jN5fn2");
      xPathLexer0.and();
      xPathLexer0.consume();
      Token token1 = xPathLexer0.slashes();
      assertEquals("g", token1.getTokenText());
      assertEquals(11, token1.getTokenType());
      
      Token token2 = xPathLexer0.dots();
      assertEquals("X", token2.getTokenText());
      assertEquals(13, token2.getTokenType());
      
      Token token3 = xPathLexer1.nextToken();
      assertEquals("s70-", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("tfkgX:tr!YN'oi2I$$%");
      Token token0 = xPathLexer0.leftBracket();
      String string0 = token0.toString();
      assertEquals("[ (3) (t)", string0);
      
      Token token1 = xPathLexer0.minus();
      xPathLexer0.setPreviousToken(token1);
      assertEquals(6, token1.getTokenType());
      assertEquals("f", token1.getTokenText());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
      assertEquals("kgX", token2.getTokenText());
      
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("tfkgX:tr!YN'oi2I$$%");
      xPathLexer0.and();
      xPathLexer1.consume();
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("tfkgX:tr!YN'oi2I$$%");
      XPathLexer xPathLexer1 = new XPathLexer("tfkgX:tr!YN'oi2I$$%");
      XPathLexer xPathLexer2 = new XPathLexer("r");
      xPathLexer0.consume();
      xPathLexer2.setPreviousToken((Token) null);
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals("fkgX", token0.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.or();
      xPathLexer3.and();
      Token token1 = xPathLexer2.nextToken();
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("tfkgX:tr!YN'oi2I$$%");
      Token token0 = xPathLexer0.leftBracket();
      Token token1 = xPathLexer0.number();
      Token token2 = xPathLexer0.rightBracket();
      token1.toString();
      token0.toString();
      token2.toString();
      xPathLexer0.consume();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.or();
      Token token3 = xPathLexer0.and();
      assertNull(token3);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("LhWdD4[Df|");
      Token token0 = xPathLexer0.equals();
      Token token1 = xPathLexer0.number();
      xPathLexer0.rightBracket();
      token1.toString();
      token0.toString();
      token1.toString();
      XPathLexer xPathLexer1 = new XPathLexer("[ (30) ()");
      xPathLexer1.consume();
      Token token2 = xPathLexer1.dollar();
      xPathLexer0.setPreviousToken(token2);
      xPathLexer0.identifierOrOperatorName();
      xPathLexer1.or();
      Token token3 = xPathLexer1.and();
      assertNull(token3);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("w.(7I");
      xPathLexer0.equals();
      xPathLexer0.not();
      xPathLexer0.number();
      Token token0 = xPathLexer0.rightBracket();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.consume();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.or();
      xPathLexer0.and();
      String string0 = xPathLexer0.getXPath();
      assertEquals("w.(7I", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("tfkgX:tr!YN'oi2I$$%");
      Token token0 = xPathLexer0.leftBracket();
      token0.toString();
      xPathLexer0.minus();
      token0.toString();
      xPathLexer0.consume();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.or();
      Token token1 = xPathLexer0.and();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("LhWdD4[Df|");
      xPathLexer0.or();
      xPathLexer0.consume(136);
      xPathLexer0.setXPath(": cq{F@");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.dollar();
      Token token0 = xPathLexer0.nextToken();
      token0.toString();
      xPathLexer0.operatorName();
      xPathLexer0.leftBracket();
      xPathLexer1.and();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.and();
      Token token1 = xPathLexer2.getPreviousToken();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("w.(7I");
      Token token0 = xPathLexer0.equals();
      assertEquals("w", token0.getTokenText());
      assertEquals(21, token0.getTokenType());
      
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("w.(7I");
      XPathLexer xPathLexer2 = new XPathLexer("r");
      Token token2 = xPathLexer2.dots();
      assertEquals(13, token2.getTokenType());
      assertEquals("r", token2.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer2.operatorName();
      Token token3 = xPathLexer0.dots();
      assertEquals(14, token3.getTokenType());
      assertEquals(".", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("w.(7I");
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("w", token0.getTokenText());
      
      xPathLexer0.number();
      Token token1 = xPathLexer0.rightBracket();
      token1.toString();
      token1.toString();
      String string0 = token1.toString();
      assertEquals("[ (4) ()", string0);
      
      XPathLexer xPathLexer1 = new XPathLexer("w.(7I");
      XPathLexer xPathLexer2 = new XPathLexer("F{`V;^s9Mqo");
      xPathLexer2.currentPosition();
      xPathLexer1.consume();
      Token token2 = xPathLexer1.plus();
      assertEquals(5, token2.getTokenType());
      assertEquals("", token2.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer3.relationalOperator();
      Token token3 = xPathLexer0.nextToken();
      assertEquals(13, token3.getTokenType());
      
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      
      Token token5 = xPathLexer1.identifier();
      assertEquals(15, token5.getTokenType());
      assertEquals(".", token5.getTokenText());
      
      Token token6 = xPathLexer1.notEquals();
      assertEquals(22, token6.getTokenType());
      assertEquals("(7", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("tfkgX:tr!YN'oi2I$$%");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      assertEquals("t", token0.getTokenText());
      
      xPathLexer0.isIdentifierChar('L');
      Token token1 = xPathLexer0.pipe();
      xPathLexer0.setPreviousToken(token1);
      assertEquals(17, token1.getTokenType());
      assertEquals("f", token1.getTokenText());
      
      xPathLexer0.mod();
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      assertEquals("k", token2.getTokenText());
      
      Token token3 = xPathLexer0.minus();
      assertEquals(6, token3.getTokenType());
      
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(19, token4.getTokenType());
      assertEquals("X:", token4.getTokenText());
      
      Token token5 = xPathLexer0.at();
      assertEquals("t", token5.getTokenText());
      assertEquals(16, token5.getTokenType());
      
      xPathLexer0.mod();
      Token token6 = xPathLexer0.identifier();
      assertEquals(15, token6.getTokenType());
      
      xPathLexer0.and();
      Token token7 = xPathLexer0.nextToken();
      assertEquals("!", token7.getTokenText());
      assertEquals(23, token7.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.and();
      xPathLexer1.operatorName();
      xPathLexer1.currentPosition();
      xPathLexer1.or();
      xPathLexer1.operatorName();
      Token token8 = xPathLexer0.dollar();
      assertEquals(26, token8.getTokenType());
      assertEquals("Y", token8.getTokenText());
      
      Token token9 = xPathLexer1.rightBracket();
      assertEquals(4, token9.getTokenType());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("tfkgX:tr!YN'oi2I$$%");
      xPathLexer0.leftBracket();
      xPathLexer0.nextToken();
      xPathLexer0.plus();
      xPathLexer0.operatorName();
      xPathLexer0.leftParen();
      xPathLexer0.pipe();
      xPathLexer0.slashes();
      xPathLexer0.comma();
      xPathLexer0.comma();
      xPathLexer0.rightBracket();
      xPathLexer0.isIdentifierChar('8');
      xPathLexer0.relationalOperator();
      xPathLexer0.not();
      xPathLexer0.whitespace();
      xPathLexer0.endPosition();
      xPathLexer0.getXPath();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer("0k");
      xPathLexer1.doubleColon();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.setXPath("tfkgX:tr!YN'oi2I$$%");
      xPathLexer0.operatorName();
      xPathLexer1.or();
      xPathLexer2.leftParen();
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("tfkgX:tr!YN'oi2I$$%");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.getPreviousToken();
      xPathLexer0.comma();
      xPathLexer0.getXPath();
      xPathLexer0.at();
      xPathLexer0.mod();
      xPathLexer0.pipe();
      xPathLexer1.consume();
      xPathLexer0.getXPath();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("=NEO{Y}E{wP1iP");
      xPathLexer2.leftBracket();
      Token token0 = xPathLexer1.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.and();
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.setXPath("96*5-IbEk]|Z%9oOZ*`");
      xPathLexer0.nextToken();
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      assertEquals("*", token2.getTokenText());
      
      xPathLexer0.operatorName();
      Token token3 = xPathLexer0.leftParen();
      assertEquals(1, token3.getTokenType());
      
      Token token4 = xPathLexer0.pipe();
      assertEquals(17, token4.getTokenType());
      assertEquals("-", token4.getTokenText());
      
      Token token5 = xPathLexer0.slashes();
      assertEquals(11, token5.getTokenType());
      assertEquals("I", token5.getTokenText());
      
      Token token6 = xPathLexer0.getPreviousToken();
      assertEquals(30, token6.getTokenType());
      
      Token token7 = xPathLexer0.comma();
      assertEquals("b", token7.getTokenText());
      assertEquals(32, token7.getTokenType());
      
      xPathLexer0.rightBracket();
      xPathLexer0.isIdentifierChar('+');
      xPathLexer0.relationalOperator();
      Token token8 = xPathLexer0.identifier();
      assertEquals(15, token8.getTokenType());
      assertEquals("k", token8.getTokenText());
      
      xPathLexer0.and();
      Token token9 = xPathLexer0.nextToken();
      assertEquals("]", token9.getTokenText());
      assertEquals(4, token9.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.operatorName();
      xPathLexer0.currentPosition();
      xPathLexer0.or();
      xPathLexer0.operatorName();
      Token token10 = xPathLexer0.dollar();
      assertEquals(26, token10.getTokenType());
      assertEquals("|", token10.getTokenText());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
      
      xPathLexer0.setXPath("QR.`LV@{dam!EjE");
      Token token1 = xPathLexer0.dots();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      String string0 = token1.toString();
      assertEquals("[ (13) (Q)", string0);
      
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.mod();
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      assertEquals("R", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("QR.`LV@{dam!EjE");
      xPathLexer0.mod();
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertNull(token3);
      
      Token token4 = xPathLexer0.at();
      assertEquals(".", token4.getTokenText());
      assertEquals(16, token4.getTokenType());
      
      Token token5 = xPathLexer0.identifier();
      assertEquals("", token5.getTokenText());
      
      Token token6 = xPathLexer1.identifier();
      assertEquals("QR.", token6.getTokenText());
      assertEquals(15, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("LhWdD4[Df|");
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.operatorName();
      xPathLexer0.identifier();
      xPathLexer0.relationalOperator();
      xPathLexer0.nextToken();
      xPathLexer0.identifier();
      XPathLexer xPathLexer1 = new XPathLexer();
      assertNull(xPathLexer1.getXPath());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.literal();
      xPathLexer0.setXPath("QR.`LV@{dam!EjE");
      Token token0 = xPathLexer0.dots();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.not();
      xPathLexer0.at();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.getXPath();
      xPathLexer0.nextToken();
      xPathLexer1.leftBracket();
      Token token1 = xPathLexer1.and();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.and();
      Token token0 = xPathLexer0.doubleColon();
      xPathLexer0.equals();
      xPathLexer0.consume();
      xPathLexer0.setXPath("96*5-IbEk]|Z%9oOZ*`");
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      
      xPathLexer0.operatorName();
      Token token2 = xPathLexer0.leftParen();
      assertEquals("5", token2.getTokenText());
      
      Token token3 = xPathLexer0.pipe();
      assertEquals("-", token3.getTokenText());
      assertEquals(17, token3.getTokenType());
      
      Token token4 = xPathLexer0.slashes();
      assertEquals(11, token4.getTokenType());
      assertEquals("I", token4.getTokenText());
      
      Token token5 = xPathLexer0.getPreviousToken();
      assertEquals(30, token5.getTokenType());
      
      Token token6 = xPathLexer0.comma();
      assertEquals("b", token6.getTokenText());
      assertEquals(32, token6.getTokenType());
      
      xPathLexer0.rightBracket();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(19, token0.getTokenType());
      
      Token token7 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token7.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.and();
      Token token8 = xPathLexer0.nextToken();
      assertEquals("]", token8.getTokenText());
      assertEquals(4, token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.whitespace();
      xPathLexer0.leftParen();
      xPathLexer0.isIdentifierStartChar('L');
      xPathLexer0.setXPath("yMn&p7");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("o'A");
      xPathLexer1.operatorName();
      xPathLexer1.setPreviousToken((Token) null);
      xPathLexer0.identifierOrOperatorName();
      xPathLexer1.or();
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("tfkgX:tr!YN'oi2I$$%");
      Token token0 = xPathLexer0.leftBracket();
      xPathLexer0.nextToken();
      xPathLexer0.plus();
      xPathLexer0.operatorName();
      xPathLexer0.leftParen();
      xPathLexer0.pipe();
      Token token1 = xPathLexer0.slashes();
      xPathLexer0.comma();
      xPathLexer0.comma();
      xPathLexer0.rightBracket();
      xPathLexer0.isIdentifierChar('8');
      token0.toString();
      xPathLexer0.consume();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.or();
      Token token2 = xPathLexer0.and();
      assertNull(token2);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.whitespace();
      xPathLexer0.leftParen();
      xPathLexer0.isIdentifierStartChar('L');
      xPathLexer0.setXPath("yMn&p7");
      xPathLexer0.notEquals();
      xPathLexer0.nextToken();
      xPathLexer0.plus();
      xPathLexer0.operatorName();
      xPathLexer0.leftParen();
      xPathLexer0.pipe();
      xPathLexer0.slashes();
      xPathLexer0.getPreviousToken();
      xPathLexer0.comma();
      xPathLexer0.rightBracket();
      xPathLexer0.isIdentifierChar('z');
      xPathLexer0.relationalOperator();
      xPathLexer0.not();
      xPathLexer0.whitespace();
      XPathLexer xPathLexer1 = new XPathLexer("yMn&p7");
      xPathLexer1.relationalOperator();
      xPathLexer0.nextToken();
      xPathLexer0.number();
      xPathLexer1.identifier();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.notEquals();
      String string0 = xPathLexer0.getXPath();
      assertEquals("yMn&p7", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("LhWdD4[Df|");
      Token token0 = xPathLexer0.equals();
      Token token1 = xPathLexer0.number();
      xPathLexer0.rightBracket();
      token1.toString();
      token0.toString();
      token1.toString();
      XPathLexer xPathLexer1 = new XPathLexer("[ (30) ()");
      xPathLexer1.consume();
      xPathLexer1.dollar();
      xPathLexer0.leftBracket();
      xPathLexer0.and();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token2 = xPathLexer0.operatorName();
      assertNull(token2);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("dob");
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
      
      xPathLexer0.setXPath("Q USin[Z");
      Token token1 = xPathLexer0.dots();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      String string0 = token1.toString();
      assertEquals("[ (13) (Q)", string0);
      
      xPathLexer0.currentPosition();
      xPathLexer0.consume();
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("_q`hM[mvvt 3,,,$8$.");
      xPathLexer0.relationalOperator();
      Token token3 = xPathLexer1.nextToken();
      assertEquals("_q", token3.getTokenText());
      
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      
      Token token5 = xPathLexer1.identifier();
      assertEquals(15, token5.getTokenType());
      assertEquals("", token5.getTokenText());
      
      Token token6 = xPathLexer1.notEquals();
      assertEquals("`h", token6.getTokenText());
      assertEquals(22, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-pF2=-|");
      Token token0 = xPathLexer0.leftBracket();
      xPathLexer0.nextToken();
      xPathLexer0.plus();
      xPathLexer0.operatorName();
      xPathLexer0.leftParen();
      xPathLexer0.pipe();
      Token token1 = xPathLexer0.slashes();
      xPathLexer0.comma();
      xPathLexer0.comma();
      xPathLexer0.rightBracket();
      xPathLexer0.isIdentifierChar('8');
      token0.toString();
      xPathLexer0.consume();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.or();
      Token token2 = xPathLexer0.and();
      assertNull(token2);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("[j)<E\"");
      xPathLexer1.relationalOperator();
      XPathLexer xPathLexer2 = new XPathLexer("eNsmyS5)F~");
      xPathLexer2.nextToken();
      xPathLexer2.operatorName();
      xPathLexer2.identifier();
      xPathLexer2.relationalOperator();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer("eNsmyS5)F~");
      xPathLexer3.identifier();
      xPathLexer1.at();
      Token token0 = xPathLexer1.literal();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.and();
      xPathLexer0.doubleColon();
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.setXPath("96*5-IbEk]|Z%9oOZ*`");
      xPathLexer0.at();
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      assertEquals("6", token1.getTokenText());
      
      xPathLexer0.nextToken();
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals("]|", token3.getTokenText());
      assertEquals(19, token3.getTokenType());
      
      Token token4 = xPathLexer0.getPreviousToken();
      assertEquals("*", token4.getTokenText());
      assertEquals(20, token4.getTokenType());
      
      xPathLexer0.dollar();
      Token token5 = xPathLexer0.dots();
      assertEquals(13, token5.getTokenType());
      assertEquals("%", token5.getTokenText());
      
      Token token6 = xPathLexer0.rightParen();
      assertEquals(2, token6.getTokenType());
      assertEquals("9", token6.getTokenText());
      
      Token token7 = xPathLexer0.dollar();
      assertEquals(26, token7.getTokenType());
      
      Token token8 = xPathLexer0.pipe();
      assertEquals(17, token8.getTokenType());
      
      xPathLexer0.hasMoreChars();
      Token token9 = xPathLexer0.whitespace();
      assertEquals((-2), token9.getTokenType());
      
      Token token10 = xPathLexer0.not();
      assertEquals(23, token10.getTokenType());
      assertEquals("*", token10.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.relationalOperator();
      Token token11 = xPathLexer1.slashes();
      assertEquals(11, token11.getTokenType());
      
      Token token12 = xPathLexer0.minus();
      assertEquals("`", token12.getTokenText());
      assertEquals(6, token12.getTokenType());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("CyTZ*#a|:");
      xPathLexer0.relationalOperator();
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.nextToken();
      assertEquals("*", token0.getTokenText());
      assertEquals(20, token0.getTokenType());
      
      xPathLexer0.identifier();
      Token token1 = xPathLexer0.rightParen();
      assertEquals("#", token1.getTokenText());
      assertEquals(2, token1.getTokenType());
      
      xPathLexer0.operatorName();
      Token token2 = xPathLexer0.identifier();
      assertEquals("a", token2.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token3 = xPathLexer0.nextToken();
      assertEquals("|", token3.getTokenText());
      assertEquals(17, token3.getTokenType());
      
      Token token4 = xPathLexer0.identifier();
      assertEquals(15, token4.getTokenType());
      
      Token token5 = xPathLexer0.whitespace();
      assertEquals((-2), token5.getTokenType());
      assertEquals("", token5.getTokenText());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("akd6|.61Sd{Ycn!k:x/");
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.literal();
      xPathLexer0.setXPath("QR.`LV@{dam!EjE");
      Token token0 = xPathLexer0.dots();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.relationalOperator();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.identifier();
      XPathLexer xPathLexer2 = new XPathLexer();
      assertFalse(xPathLexer2.equals((Object)xPathLexer1));
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("tfkgX:tr!YN'oi2I$$%");
      xPathLexer0.whitespace();
      xPathLexer0.leftParen();
      xPathLexer0.isIdentifierStartChar('c');
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setXPath("");
      xPathLexer0.notEquals();
      xPathLexer0.nextToken();
      xPathLexer1.plus();
      xPathLexer0.operatorName();
      xPathLexer0.leftParen();
      xPathLexer1.pipe();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.slashes();
      xPathLexer0.getPreviousToken();
      xPathLexer1.comma();
      xPathLexer1.rightBracket();
      xPathLexer2.isIdentifierChar('z');
      xPathLexer0.relationalOperator();
      xPathLexer2.not();
      xPathLexer1.whitespace();
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer2.relationalOperator();
      xPathLexer2.nextToken();
      xPathLexer0.number();
      xPathLexer3.identifier();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer1.notEquals();
      String string0 = xPathLexer1.getXPath();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("|Z#l`b%viL|<i0");
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.operatorName();
      xPathLexer0.identifier();
      xPathLexer0.relationalOperator();
      xPathLexer0.nextToken();
      xPathLexer0.identifier();
      XPathLexer xPathLexer1 = new XPathLexer();
      assertNull(xPathLexer1.getXPath());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("LhWdD4[Df|");
      xPathLexer0.equals();
      Token token0 = xPathLexer0.number();
      xPathLexer0.rightBracket();
      String string0 = token0.toString();
      xPathLexer0.pipe();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.slashes();
      xPathLexer1.getPreviousToken();
      xPathLexer1.comma();
      xPathLexer1.rightBracket();
      xPathLexer1.isIdentifierChar('z');
      xPathLexer0.relationalOperator();
      xPathLexer0.not();
      xPathLexer1.whitespace();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.relationalOperator();
      xPathLexer0.nextToken();
      xPathLexer1.leftBracket();
      xPathLexer0.number();
      xPathLexer1.identifier();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.doubleColon();
      xPathLexer2.notEquals();
      String string1 = xPathLexer0.getXPath();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.whitespace();
      xPathLexer0.leftParen();
      xPathLexer0.isIdentifierStartChar('p');
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setXPath("3TdaZwGBM");
      xPathLexer1.notEquals();
      xPathLexer1.nextToken();
      xPathLexer0.plus();
      xPathLexer0.operatorName();
      xPathLexer0.leftParen();
      xPathLexer0.pipe();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.slashes();
      xPathLexer0.getPreviousToken();
      xPathLexer2.comma();
      xPathLexer1.rightBracket();
      xPathLexer2.isIdentifierChar('p');
      xPathLexer1.relationalOperator();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.not();
      xPathLexer0.whitespace();
      XPathLexer xPathLexer4 = new XPathLexer("3TdaZwGBM");
      xPathLexer0.relationalOperator();
      xPathLexer2.nextToken();
      xPathLexer1.number();
      xPathLexer2.identifier();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer0.notEquals();
      String string0 = xPathLexer1.getXPath();
      assertEquals("3TdaZwGBM", string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("LhWdD4[Df|");
      Token token0 = xPathLexer0.equals();
      Token token1 = xPathLexer0.number();
      xPathLexer0.rightBracket();
      token1.toString();
      token0.toString();
      token1.toString();
      XPathLexer xPathLexer1 = new XPathLexer("[ (30) ()");
      xPathLexer1.consume();
      xPathLexer1.dollar();
      xPathLexer0.nextToken();
      xPathLexer0.identifier();
      XPathLexer xPathLexer2 = new XPathLexer();
      assertFalse(xPathLexer2.equals((Object)xPathLexer1));
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("LhWdD4[Df|");
      xPathLexer0.or();
      xPathLexer0.setXPath(": cq{F@");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(18, token0.getTokenType());
      assertEquals(":", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("LhWdD4[Df|");
      xPathLexer1.and();
      xPathLexer1.currentPosition();
      xPathLexer0.consume();
      Token token1 = xPathLexer1.plus();
      assertEquals("L", token1.getTokenText());
      assertEquals(5, token1.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("LhWdD4[Df|");
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer2.not();
      assertEquals(23, token2.getTokenType());
      assertEquals("L", token2.getTokenText());
      
      Token token3 = xPathLexer1.nextToken();
      assertEquals("hWdD4", token3.getTokenText());
      
      Token token4 = xPathLexer2.number();
      assertEquals(30, token4.getTokenType());
      assertEquals("", token4.getTokenText());
      
      Token token5 = xPathLexer2.identifier();
      assertEquals(15, token5.getTokenType());
      
      Token token6 = xPathLexer0.notEquals();
      assertEquals("cq", token6.getTokenText());
      assertEquals(22, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("tfkgX:tr!YN'oi2I$$%");
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      
      Token token1 = xPathLexer0.leftParen();
      xPathLexer0.isIdentifierStartChar('c');
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setXPath("");
      Token token2 = xPathLexer0.notEquals();
      assertEquals("kg", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      Token token4 = xPathLexer1.plus();
      assertEquals(5, token4.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.leftParen();
      Token token5 = xPathLexer1.pipe();
      String string0 = token3.toString();
      assertEquals("[ (15) (X)", string0);
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer0.consume();
      Token token6 = xPathLexer1.dollar();
      assertEquals(26, token6.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.setPreviousToken(token1);
      assertEquals("f", token1.getTokenText());
      
      Token token7 = xPathLexer3.identifierOrOperatorName();
      assertNotNull(token7);
      
      xPathLexer0.consume();
      Token token8 = xPathLexer3.slashes();
      assertEquals(11, token8.getTokenType());
      
      Token token9 = xPathLexer2.notEquals();
      assertEquals(22, token9.getTokenType());
      
      xPathLexer2.setPreviousToken(token5);
      assertEquals(17, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("LhWdD4[Df|");
      xPathLexer0.or();
      xPathLexer0.setXPath(": cq{F@");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(18, token0.getTokenType());
      assertEquals(":", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token1 = xPathLexer0.nextToken();
      String string0 = token1.toString();
      assertEquals("[ (15) (cq)", string0);
      
      XPathLexer xPathLexer2 = new XPathLexer(".Esv?J!9eM0#G'N/BkC");
      Token token2 = xPathLexer2.minus();
      assertEquals(".", token2.getTokenText());
      
      xPathLexer1.leftParen();
      Token token3 = xPathLexer2.at();
      assertEquals("E", token3.getTokenText());
      assertEquals(16, token3.getTokenType());
      
      xPathLexer0.currentPosition();
      Token token4 = xPathLexer2.minus();
      assertEquals(6, token4.getTokenType());
      
      xPathLexer1.operatorName();
      xPathLexer1.consume();
      xPathLexer1.relationalOperator();
      xPathLexer2.identifierOrOperatorName();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.or();
      Token token5 = xPathLexer2.nextToken();
      assertEquals("?J!9eM0#G'N/BkC", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("LhWdD4[Df|");
      xPathLexer0.or();
      xPathLexer0.consume(136);
      XPathLexer xPathLexer1 = new XPathLexer("LhWdD4[Df|");
      xPathLexer1.setXPath(",Z^h7^H[Dm%%");
      xPathLexer0.at();
      Token token0 = xPathLexer1.at();
      xPathLexer0.notEquals();
      xPathLexer0.relationalOperator();
      xPathLexer1.LA(136);
      xPathLexer0.plus();
      xPathLexer0.number();
      xPathLexer1.not();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.minus();
      xPathLexer0.literal();
      xPathLexer0.consume();
      XPathLexer xPathLexer2 = new XPathLexer("BHm $1ELlbNH");
      xPathLexer2.nextToken();
      xPathLexer2.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      xPathLexer2.star();
      xPathLexer2.or();
      Token token1 = xPathLexer2.and();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
      
      xPathLexer0.setXPath("Q USin[Z");
      xPathLexer0.or();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("Q", token1.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer0.identifier();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer(") (");
      Token token2 = xPathLexer1.nextToken();
      assertEquals(2, token2.getTokenType());
      assertEquals(")", token2.getTokenText());
      
      Token token3 = xPathLexer1.identifier();
      assertEquals("", token3.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      assertEquals("", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("w.(7I");
      xPathLexer0.equals();
      Token token0 = xPathLexer0.not();
      xPathLexer0.dots();
      token0.toString();
      Token token1 = xPathLexer0.whitespace();
      token1.toString();
      XPathLexer xPathLexer1 = new XPathLexer("w.(7I");
      xPathLexer1.mod();
      xPathLexer1.pipe();
      xPathLexer0.consume();
      xPathLexer1.getXPath();
      xPathLexer0.nextToken();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer0.or();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token2 = xPathLexer2.and();
      assertNull(token2);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("tfkgX:tr!YN'oi2I$$%");
      Token token0 = xPathLexer0.leftBracket();
      XPathLexer xPathLexer1 = new XPathLexer("0^WJ2a1o2:NT");
      Token token1 = xPathLexer1.nextToken();
      assertEquals(30, token1.getTokenType());
      
      String string0 = token0.toString();
      assertEquals("[ (3) (t)", string0);
      
      XPathLexer xPathLexer2 = new XPathLexer("tfkgX:tr!YN'oi2I$$%");
      xPathLexer0.minus();
      Token token2 = xPathLexer0.leftParen();
      assertEquals("k", token2.getTokenText());
      assertEquals(1, token2.getTokenType());
      
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      assertEquals("g", token3.getTokenText());
      
      xPathLexer2.currentPosition();
      Token token4 = xPathLexer2.minus();
      assertEquals("t", token4.getTokenText());
      assertEquals(6, token4.getTokenType());
      
      xPathLexer1.operatorName();
      xPathLexer2.consume();
      xPathLexer2.relationalOperator();
      xPathLexer1.identifierOrOperatorName();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.or();
      Token token5 = xPathLexer2.nextToken();
      assertEquals(15, token5.getTokenType());
      assertEquals("kgX", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-pF2=-|");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      assertEquals("-", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("pF2", token1.getTokenText());
      
      Token token2 = xPathLexer0.plus();
      assertEquals("=", token2.getTokenText());
      assertEquals(5, token2.getTokenType());
      
      Token token3 = xPathLexer0.rightParen();
      assertEquals(2, token3.getTokenType());
      assertEquals("-", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("|", token4.getTokenText());
      assertEquals(17, token4.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.identifier();
      xPathLexer0.relationalOperator();
      Token token5 = xPathLexer0.nextToken();
      assertEquals((-1), token5.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.identifier();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token6 = xPathLexer2.identifier();
      assertEquals(15, token6.getTokenType());
      
      Token token7 = xPathLexer2.comma();
      assertEquals(32, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("|Z#l`b%viL|<i0");
      xPathLexer0.or();
      Token token0 = xPathLexer0.nextToken();
      assertEquals("|", token0.getTokenText());
      
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      
      xPathLexer0.identifier();
      Token token2 = xPathLexer0.leftParen();
      assertEquals("#", token2.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token3 = xPathLexer0.nextToken();
      assertEquals("l", token3.getTokenText());
      
      Token token4 = xPathLexer0.identifier();
      assertEquals(15, token4.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token5 = xPathLexer0.doubleColon();
      assertEquals(19, token5.getTokenType());
      assertEquals("`b", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("LhWdD4[Df|");
      Token token0 = xPathLexer0.rightBracket();
      xPathLexer0.nextToken();
      xPathLexer0.relationalOperator();
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer("O$~A+S8");
      xPathLexer1.nextToken();
      xPathLexer0.setPreviousToken(token0);
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.identifierOrOperatorName();
      xPathLexer2.star();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.or();
      Token token1 = xPathLexer0.and();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("LhWdD4[Df|");
      xPathLexer0.or();
      xPathLexer0.setXPath(": cq{F@");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(18, token0.getTokenType());
      assertEquals(":", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      String string0 = token1.toString();
      assertEquals("[ (15) (cq)", string0);
      
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.and();
      xPathLexer1.identifier();
      Token token2 = xPathLexer1.leftBracket();
      assertEquals(3, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("LhWdD4[Df|");
      Token token0 = xPathLexer0.equals();
      Token token1 = xPathLexer0.slashes();
      Token token2 = xPathLexer0.rightBracket();
      assertEquals(4, token2.getTokenType());
      assertEquals("W", token2.getTokenText());
      
      token1.toString();
      String string0 = token0.toString();
      assertEquals("[ (21) (L)", string0);
      
      String string1 = token1.toString();
      assertEquals("[ (11) (h)", string1);
      
      XPathLexer xPathLexer1 = new XPathLexer("[ (11) (h)");
      xPathLexer1.and();
      xPathLexer0.isIdentifierChar('x');
      xPathLexer0.relationalOperator();
      Token token3 = xPathLexer0.not();
      assertEquals("d", token3.getTokenText());
      assertEquals(23, token3.getTokenType());
      
      Token token4 = xPathLexer0.whitespace();
      assertEquals((-2), token4.getTokenType());
      assertEquals("", token4.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("Z2fj\"Nvd+W/ e");
      xPathLexer2.consume();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token5 = xPathLexer3.dollar();
      assertEquals(26, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("4", token6.getTokenText());
      assertEquals(30, token6.getTokenType());
      
      Token token7 = xPathLexer2.identifier();
      assertEquals("2fj", token7.getTokenText());
      assertEquals(15, token7.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('x');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("LhWdD4[Df|");
      xPathLexer0.or();
      xPathLexer0.setXPath("E7(+ARr^XPo");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("E7", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("yMn&p7");
      Token token1 = xPathLexer1.dots();
      assertEquals(13, token1.getTokenType());
      assertEquals("y", token1.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer1.setPreviousToken((Token) null);
      Token token2 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.and();
      int int0 = xPathLexer0.endPosition();
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.literal();
      xPathLexer0.setXPath("Q USin[Z");
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.operatorName();
      xPathLexer0.identifier();
      xPathLexer0.relationalOperator();
      xPathLexer0.at();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.getXPath();
      xPathLexer0.nextToken();
      xPathLexer0.leftBracket();
      xPathLexer1.and();
      Token token0 = xPathLexer1.getPreviousToken();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
      
      xPathLexer0.setXPath("Q USin[Z");
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setXPath("!y1p58z#ZU7M%;sJ");
      Token token1 = xPathLexer1.notEquals();
      assertEquals(22, token1.getTokenType());
      assertEquals("!y", token1.getTokenText());
      
      Token token2 = xPathLexer1.nextToken();
      assertEquals(30, token2.getTokenType());
      
      Token token3 = xPathLexer0.plus();
      assertEquals("Q", token3.getTokenText());
      
      Token token4 = xPathLexer0.plus();
      assertEquals(5, token4.getTokenType());
      
      xPathLexer0.operatorName();
      Token token5 = xPathLexer0.identifier();
      assertEquals("USin", token5.getTokenText());
      
      xPathLexer1.relationalOperator();
      Token token6 = xPathLexer1.nextToken();
      assertEquals("p58z#ZU7M%;sJ", token6.getTokenText());
      
      Token token7 = xPathLexer0.identifier();
      assertEquals(15, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.literal();
      xPathLexer0.setXPath("Q USin[Z");
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("[ (");
      xPathLexer1.whitespace();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token0 = xPathLexer2.star();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("tfkgX:tr!YN'oi2I$$%");
      xPathLexer0.whitespace();
      xPathLexer0.leftParen();
      xPathLexer0.isIdentifierStartChar('c');
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer("O$~A+S8");
      XPathLexer xPathLexer2 = new XPathLexer("@NV+P");
      Token token0 = xPathLexer2.nextToken();
      xPathLexer0.setPreviousToken(token0);
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.identifierOrOperatorName();
      xPathLexer3.star();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer2.or();
      Token token1 = xPathLexer2.and();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("tfkgX:tr!YN'oi2I$$%");
      xPathLexer0.leftBracket();
      xPathLexer0.nextToken();
      xPathLexer0.rightBracket();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.operatorName();
      xPathLexer1.comma();
      xPathLexer0.identifier();
      xPathLexer1.relationalOperator();
      xPathLexer0.at();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.getXPath();
      xPathLexer0.nextToken();
      xPathLexer0.leftBracket();
      xPathLexer1.and();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.operatorName();
      Token token0 = xPathLexer3.or();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("LhWdD4[Df|");
      xPathLexer0.rightBracket();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.dots();
      token0.toString();
      Token token1 = xPathLexer0.whitespace();
      token1.toString();
      XPathLexer xPathLexer1 = new XPathLexer("");
      XPathLexer xPathLexer2 = new XPathLexer("u(y2vI*o");
      xPathLexer2.mod();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.pipe();
      xPathLexer3.consume();
      xPathLexer1.getXPath();
      xPathLexer2.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.or();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token2 = xPathLexer0.and();
      assertNull(token2);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("LhWdD4[Df|");
      xPathLexer0.or();
      xPathLexer0.setXPath("E7(+ARr^XPo");
      XPathLexer xPathLexer1 = new XPathLexer("ZaH=k3lIh");
      xPathLexer1.mod();
      xPathLexer0.pipe();
      xPathLexer1.consume();
      xPathLexer0.getXPath();
      xPathLexer1.nextToken();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer1.or();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer("_");
      xPathLexer3.and();
      xPathLexer3.hasMoreChars();
      xPathLexer0.setXPath("_");
      assertNotSame(xPathLexer0, xPathLexer3);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("LhWdD4[Df|");
      xPathLexer0.or();
      xPathLexer0.setXPath(": cq{F@");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token0 = xPathLexer0.nextToken();
      token0.toString();
      XPathLexer xPathLexer2 = new XPathLexer(".Esv?J!9eM0#G'N/BkC");
      xPathLexer2.minus();
      xPathLexer2.leftParen();
      xPathLexer2.at();
      xPathLexer0.currentPosition();
      xPathLexer1.rightBracket();
      xPathLexer1.operatorName();
      xPathLexer2.nextToken();
      xPathLexer0.leftBracket();
      xPathLexer2.and();
      Token token1 = xPathLexer1.getPreviousToken();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.literal();
      xPathLexer0.setXPath("6HU8)Aul-]%S9tz");
      Token token0 = xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token1 = xPathLexer1.literal();
      assertNull(token1);
      
      String string0 = token0.toString();
      assertEquals("[ (30) (6)", string0);
      
      XPathLexer xPathLexer2 = new XPathLexer("Q USin[Z");
      xPathLexer0.minus();
      Token token2 = xPathLexer2.leftParen();
      assertEquals("Q", token2.getTokenText());
      
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      assertEquals("U", token3.getTokenText());
      
      xPathLexer2.currentPosition();
      Token token4 = xPathLexer2.minus();
      assertEquals(6, token4.getTokenType());
      assertEquals(" ", token4.getTokenText());
      
      xPathLexer1.operatorName();
      xPathLexer1.consume();
      xPathLexer1.relationalOperator();
      Token token5 = xPathLexer0.rightBracket();
      assertEquals(4, token5.getTokenType());
      assertEquals("8", token5.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.or();
      Token token6 = xPathLexer2.nextToken();
      assertEquals("USin", token6.getTokenText());
      assertEquals(15, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("w.(7I");
      Token token0 = xPathLexer0.equals();
      assertEquals("w", token0.getTokenText());
      assertEquals(21, token0.getTokenType());
      
      xPathLexer0.setXPath(": cq{F@");
      Token token1 = xPathLexer0.nextToken();
      assertEquals(":", token1.getTokenText());
      assertEquals(18, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer(";?r>b>M22P");
      Token token2 = xPathLexer1.nextToken();
      String string0 = token2.toString();
      assertEquals("[ (-1) (;?r>b>M22P)", string0);
      
      XPathLexer xPathLexer2 = new XPathLexer("Ib`");
      xPathLexer1.minus();
      Token token3 = xPathLexer2.leftParen();
      assertEquals("I", token3.getTokenText());
      
      Token token4 = xPathLexer2.at();
      assertEquals(16, token4.getTokenType());
      assertEquals("b", token4.getTokenText());
      
      xPathLexer0.currentPosition();
      Token token5 = xPathLexer0.minus();
      assertEquals(" ", token5.getTokenText());
      assertEquals(6, token5.getTokenType());
      
      xPathLexer1.operatorName();
      xPathLexer0.consume();
      xPathLexer0.relationalOperator();
      xPathLexer2.identifierOrOperatorName();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.or();
      Token token6 = xPathLexer0.nextToken();
      assertEquals(15, token6.getTokenType());
      assertEquals("q", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("|Z#l`b%viL|<i0");
      xPathLexer0.or();
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      assertEquals("|", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("Z", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.setXPath("|Z#l`b%viL|<i0");
      XPathLexer xPathLexer2 = new XPathLexer("^-vby%|u(E");
      Token token2 = xPathLexer2.notEquals();
      assertEquals("^-", token2.getTokenText());
      assertEquals(22, token2.getTokenType());
      
      xPathLexer2.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.plus();
      Token token3 = xPathLexer1.plus();
      assertEquals(5, token3.getTokenType());
      
      xPathLexer3.operatorName();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.identifier();
      xPathLexer1.relationalOperator();
      Token token4 = xPathLexer3.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      Token token5 = xPathLexer4.identifier();
      assertEquals(15, token5.getTokenType());
      
      Token token6 = xPathLexer2.not();
      assertEquals(23, token6.getTokenType());
      assertEquals("%", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
      
      xPathLexer0.setXPath("Q USin[Z");
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setXPath("!y1p58z#ZU7M%;sJ");
      Token token1 = xPathLexer1.notEquals();
      XPathLexer xPathLexer2 = new XPathLexer("U|G");
      xPathLexer1.operatorName();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.setPreviousToken(token1);
      assertEquals("!y", token1.getTokenText());
      assertEquals(22, token1.getTokenType());
      
      Token token2 = xPathLexer3.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.comma();
      assertEquals("Q", token3.getTokenText());
      assertEquals(32, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("tfkgX:tr!YN'oi2I$$%");
      xPathLexer0.setXPath("tfkgX:tr!YN'oi2I$$%");
      Token token0 = xPathLexer0.dots();
      token0.toString();
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (13) (t)", string0);
      
      xPathLexer0.currentPosition();
      xPathLexer0.consume();
      Token token1 = xPathLexer0.plus();
      assertEquals("k", token1.getTokenText());
      assertEquals(5, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("[ (13) (t)");
      XPathLexer xPathLexer2 = new XPathLexer("<'bYio6MfHc*!qC6)9K");
      Token token2 = xPathLexer2.relationalOperator();
      assertEquals(7, token2.getTokenType());
      assertEquals("<", token2.getTokenText());
      
      Token token3 = xPathLexer1.nextToken();
      assertEquals("[", token3.getTokenText());
      assertEquals(3, token3.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("[ (13) (t)");
      Token token4 = xPathLexer3.number();
      assertEquals(30, token4.getTokenType());
      
      Token token5 = xPathLexer1.identifier();
      assertEquals("", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
      
      Token token6 = xPathLexer1.notEquals();
      assertEquals(22, token6.getTokenType());
      assertEquals(" (", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("tfkgX:tr!YN'oi2I$$%");
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftParen();
      assertEquals(1, token1.getTokenType());
      assertEquals("f", token1.getTokenText());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('c');
      assertTrue(boolean0);
      
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer("O$~A+S8");
      XPathLexer xPathLexer2 = new XPathLexer("@N$PV+P");
      Token token2 = xPathLexer2.nextToken();
      assertEquals(16, token2.getTokenType());
      assertEquals("@", token2.getTokenText());
      
      Token token3 = xPathLexer1.star();
      assertEquals("O", token3.getTokenText());
      assertEquals(20, token3.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token4 = xPathLexer1.nextToken();
      assertEquals(26, token4.getTokenType());
      assertEquals("$", token4.getTokenText());
      
      xPathLexer1.and();
      Token token5 = xPathLexer2.identifier();
      assertEquals(15, token5.getTokenType());
      
      Token token6 = xPathLexer2.leftBracket();
      assertEquals("$", token6.getTokenText());
      assertEquals(3, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("tfkgX:tr!YN'oi2I$$%");
      xPathLexer0.whitespace();
      Token token0 = xPathLexer0.leftParen();
      assertEquals("f", token0.getTokenText());
      
      xPathLexer0.isIdentifierStartChar('c');
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer("O$~A+S8");
      Token token1 = xPathLexer1.doubleColon();
      assertEquals(19, token1.getTokenType());
      assertEquals("O$", token1.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("@N$PV+P");
      Token token2 = xPathLexer2.nextToken();
      assertEquals("@", token2.getTokenText());
      assertEquals(16, token2.getTokenType());
      
      Token token3 = xPathLexer1.star();
      assertEquals(20, token3.getTokenType());
      assertEquals("~", token3.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token4 = xPathLexer1.nextToken();
      assertEquals("A", token4.getTokenText());
      
      xPathLexer1.and();
      Token token5 = xPathLexer2.identifier();
      assertEquals(15, token5.getTokenType());
      
      Token token6 = xPathLexer2.leftBracket();
      assertEquals(3, token6.getTokenType());
      assertEquals("$", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("tfkgX:tr!YN'oi2I$$%");
      xPathLexer0.setXPath("i");
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setXPath("");
      Token token0 = xPathLexer1.notEquals();
      assertEquals(22, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      
      xPathLexer0.plus();
      XPathLexer xPathLexer2 = new XPathLexer("4NA");
      Token token2 = xPathLexer2.plus();
      assertEquals("4", token2.getTokenText());
      assertEquals(5, token2.getTokenType());
      
      xPathLexer0.operatorName();
      Token token3 = xPathLexer2.identifier();
      assertEquals("NA", token3.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token4 = xPathLexer1.dots();
      assertEquals(13, token4.getTokenType());
      
      Token token5 = xPathLexer0.identifier();
      assertEquals(15, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.equals();
      xPathLexer0.setXPath("F7)N^L2[Lo^-D.C]");
      Token token0 = xPathLexer0.pipe();
      assertEquals("F", token0.getTokenText());
      assertEquals(17, token0.getTokenType());
      
      xPathLexer0.identifier();
      Token token1 = xPathLexer0.leftParen();
      assertEquals(")", token1.getTokenText());
      assertEquals(1, token1.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("N", token2.getTokenText());
      
      xPathLexer0.and();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.operatorName();
      Token token3 = xPathLexer1.equals();
      assertEquals(21, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("|Z#l`b%viL|<i0");
      xPathLexer0.literal();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.pipe();
      xPathLexer0.identifier();
      xPathLexer0.leftParen();
      xPathLexer0.relationalOperator();
      xPathLexer0.nextToken();
      xPathLexer0.and();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.not();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("LhWdD4[Df|");
      xPathLexer0.or();
      xPathLexer0.setXPath(": cq{F@");
      Token token0 = xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.nextToken();
      String string0 = token0.toString();
      assertEquals("[ (18) (:)", string0);
      
      XPathLexer xPathLexer2 = new XPathLexer("E5w^,8 fdd{_T");
      xPathLexer0.minus();
      Token token1 = xPathLexer0.leftParen();
      assertEquals("c", token1.getTokenText());
      assertEquals(1, token1.getTokenType());
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      assertEquals("q", token2.getTokenText());
      
      xPathLexer0.currentPosition();
      XPathLexer xPathLexer3 = new XPathLexer("p^J7_l\"OFh)0x4");
      Token token3 = xPathLexer3.minus();
      assertEquals(6, token3.getTokenType());
      assertEquals("p", token3.getTokenText());
      
      xPathLexer3.operatorName();
      xPathLexer0.consume();
      xPathLexer2.relationalOperator();
      Token token4 = xPathLexer2.identifierOrOperatorName();
      assertNotNull(token4);
      assertEquals("E5w", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer1.or();
      Token token5 = xPathLexer2.nextToken();
      assertEquals("^,8 fdd{_T", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("!y1p58z#ZU7M%;sJ");
      xPathLexer0.notEquals();
      xPathLexer0.nextToken();
      xPathLexer0.consume();
      xPathLexer0.getXPath();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("tfkgX:tr!YN'oi2I$$%");
      Token token0 = xPathLexer0.whitespace();
      xPathLexer0.consume();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("kgX", token1.getTokenText());
      
      xPathLexer0.setPreviousToken(token0);
      assertEquals((-2), token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("tfkgX:tr!YN'oi2I$$%");
      Token token2 = xPathLexer0.plus();
      xPathLexer1.setPreviousToken(token2);
      assertEquals(":", token2.getTokenText());
      assertEquals(5, token2.getTokenType());
      
      Token token3 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.comma();
      assertEquals(32, token4.getTokenType());
      assertEquals("t", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("pib>*,q>(n3<yn;&+");
      Token token0 = xPathLexer0.equals();
      Token token1 = xPathLexer0.number();
      Token token2 = xPathLexer0.rightBracket();
      token1.toString();
      token0.toString();
      token2.toString();
      token1.toString();
      XPathLexer xPathLexer1 = new XPathLexer("[ (21) (p)");
      XPathLexer xPathLexer2 = new XPathLexer("T.g.");
      int int0 = xPathLexer2.currentPosition();
      xPathLexer1.consume();
      xPathLexer1.plus();
      XPathLexer xPathLexer3 = new XPathLexer("");
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.relationalOperator();
      xPathLexer2.nextToken();
      xPathLexer3.relationalOperator();
      xPathLexer1.getXPath();
      int int1 = xPathLexer0.currentPosition();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.whitespace();
      XPathLexer xPathLexer1 = new XPathLexer("8");
      XPathLexer xPathLexer2 = new XPathLexer(") (");
      XPathLexer xPathLexer3 = new XPathLexer(") (");
      xPathLexer1.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("[j)<E\"");
      xPathLexer1.relationalOperator();
      XPathLexer xPathLexer2 = new XPathLexer("[j)<E\"");
      xPathLexer1.comma();
      xPathLexer2.operatorName();
      xPathLexer2.identifier();
      xPathLexer2.relationalOperator();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer("[j)<E\"");
      xPathLexer3.identifier();
      xPathLexer1.at();
      Token token0 = xPathLexer1.literal();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("f.t+NI,\".a?NoSO8u},");
      Token token0 = xPathLexer0.plus();
      token0.toString();
      xPathLexer0.minus();
      xPathLexer0.at();
      xPathLexer0.relationalOperator();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer(")3Jzc@kw");
      xPathLexer1.identifier();
      String string0 = xPathLexer1.getXPath();
      assertEquals(")3Jzc@kw", string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("|Z#l`b%viL|<i0");
      Token token0 = xPathLexer0.literal();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.consume();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer("[ (27) (Z#l`b%viL)");
      xPathLexer1.or();
      Token token1 = xPathLexer0.relationalOperator();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-pF2=-|");
      xPathLexer0.leftBracket();
      xPathLexer0.getPreviousToken();
      xPathLexer0.plus();
      xPathLexer0.rightParen();
      xPathLexer0.operatorName();
      xPathLexer0.operatorName();
      xPathLexer0.identifier();
      xPathLexer0.relationalOperator();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.identifier();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.identifier();
      xPathLexer2.comma();
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("LhWdD4[Df|");
      xPathLexer0.or();
      xPathLexer0.setXPath("E7(+ARr^XPo");
      XPathLexer xPathLexer1 = new XPathLexer("ZaH=k3lIh");
      xPathLexer1.whitespace();
      xPathLexer0.pipe();
      xPathLexer1.consume();
      xPathLexer0.getXPath();
      xPathLexer1.nextToken();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer1.or();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer("_");
      xPathLexer1.and();
      xPathLexer3.hasMoreChars();
      xPathLexer0.setXPath("_");
      assertEquals("_", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.slashes();
      XPathLexer xPathLexer1 = new XPathLexer("O$~A+S8");
      XPathLexer xPathLexer2 = new XPathLexer("DVPcZ?iy7zd2");
      xPathLexer2.notEquals();
      xPathLexer2.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer();
      assertFalse(xPathLexer3.equals((Object)xPathLexer2));
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".8JLUn>9U&IV");
      XPathLexer xPathLexer1 = new XPathLexer(".8JLUn>9U&IV");
      xPathLexer0.slashes();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer1.doubleColon();
      xPathLexer0.slashes();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      assertNull(xPathLexer2.getXPath());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("Q USin[Z");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals(4, token0.getTokenType());
      assertEquals("Q", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("Q USin[Z");
      Token token1 = xPathLexer1.doubleColon();
      assertEquals(19, token1.getTokenType());
      assertEquals("Q ", token1.getTokenText());
      
      Token token2 = xPathLexer1.slashes();
      assertEquals(11, token2.getTokenType());
      assertEquals("U", token2.getTokenText());
      
      Token token3 = xPathLexer1.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("Sin", token3.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token4 = xPathLexer2.minus();
      assertEquals(6, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("#51%9,4`Yx-XOJM. ");
      xPathLexer0.equals();
      xPathLexer0.number();
      xPathLexer0.rightBracket();
      xPathLexer0.rightBracket();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      assertFalse(xPathLexer1.equals((Object)xPathLexer0));
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(";?r>b>M22P");
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      assertEquals(";", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("?r>b>M22P", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("KLHk5>\"NaWiI:tZ L%");
      Token token2 = xPathLexer1.nextToken();
      assertEquals("KLHk5", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(";?r>b>M22P");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(";?", token0.getTokenText());
      assertEquals(19, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftParen();
      assertEquals(1, token1.getTokenType());
      assertEquals("r", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(">", token2.getTokenText());
      assertEquals(9, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("><,'=lIF");
      xPathLexer0.nextToken();
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("k~-?O7Uf2");
      Token token0 = xPathLexer1.slashes();
      assertEquals("k", token0.getTokenText());
      assertEquals(11, token0.getTokenType());
      
      Token token1 = xPathLexer1.leftParen();
      assertEquals("~", token1.getTokenText());
      assertEquals(1, token1.getTokenType());
      
      Token token2 = xPathLexer1.nextToken();
      assertEquals("-", token2.getTokenText());
      assertEquals(6, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("wI\"YCt;MYlv@9aeIv");
      Token token0 = xPathLexer0.notEquals();
      assertEquals("wI", token0.getTokenText());
      assertEquals(22, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("n$BJYo46Cih");
      Token token2 = xPathLexer2.nextToken();
      assertEquals("n", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("m]$HT^_}dV( Gjvq\"");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      assertEquals("]", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zPEQ?c~dg");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("zPEQ", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/3YNy[1zp,R?t+");
      Token token0 = xPathLexer0.number();
      Token token1 = xPathLexer0.rightBracket();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (30) ()", string0);
      
      XPathLexer xPathLexer1 = new XPathLexer("/3YNy[1zp,R?t+");
      String string1 = token1.toString();
      assertEquals("[ (4) (/)", string1);
      
      xPathLexer0.consume();
      Token token2 = xPathLexer1.dollar();
      assertEquals("/", token2.getTokenText());
      assertEquals(26, token2.getTokenType());
      
      xPathLexer0.setPreviousToken(token1);
      xPathLexer1.consume();
      Token token3 = xPathLexer0.slashes();
      assertEquals("Y", token3.getTokenText());
      assertEquals(11, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("r%&A3W");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("r", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.pipe();
      assertEquals("%", token1.getTokenText());
      assertEquals(17, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("&A3W", token2.getTokenText());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals("&A", token3.getTokenText());
      assertEquals(19, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("|Z#l`b%viL|<i0");
      Token token0 = xPathLexer0.literal();
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (27) (Z#l`b%viL)", string0);
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("<", token1.getTokenText());
      assertEquals(7, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("i0", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("V6c'|C9<`SR7=dw[*:v");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("V6c", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('c');
      assertTrue(boolean0);
      
      Token token0 = xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("_ NL,+9}*m/eDN");
      xPathLexer1.setPreviousToken(token0);
      assertEquals((-1), token0.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("/0?CGt&}Y*'jLyng");
      xPathLexer1.operatorName();
      Token token1 = xPathLexer2.nextToken();
      assertEquals(11, token1.getTokenType());
      assertEquals("/", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("7_r%&W");
      xPathLexer0.consume(1);
      Token token0 = xPathLexer0.slashes();
      assertEquals("_", token0.getTokenText());
      assertEquals(11, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("r", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("%&W", token2.getTokenText());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals("%&", token3.getTokenText());
      assertEquals(19, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("(x33RR&.)<l@");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("(", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("x33RR", token1.getTokenText());
      
      Token token2 = xPathLexer0.doubleColon();
      assertEquals("&.", token2.getTokenText());
      assertEquals(19, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("h:~2");
      xPathLexer1.operatorName();
      Token token1 = xPathLexer1.rightBracket();
      assertEquals(4, token1.getTokenType());
      
      Token token2 = xPathLexer1.dots();
      assertEquals(13, token2.getTokenType());
      assertEquals(":", token2.getTokenText());
      
      Token token3 = xPathLexer1.rightParen();
      assertEquals(2, token3.getTokenType());
      
      Token token4 = xPathLexer1.nextToken();
      assertEquals(30, token4.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.or();
      Token token5 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token5.getTokenType());
      
      xPathLexer1.nextToken();
      Token token6 = xPathLexer0.slashes();
      assertEquals(11, token6.getTokenType());
      
      Token token7 = xPathLexer0.doubleColon();
      assertEquals(19, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("LhWdD4[Df|");
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("L", token0.getTokenText());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals("h", token1.getTokenText());
      assertEquals(11, token1.getTokenType());
      
      xPathLexer0.setXPath("M*cZS");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token2 = xPathLexer1.nextToken();
      assertEquals((-1), token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("M", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("|Z#l`b%viL|<i0");
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("|", token0.getTokenText());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      assertEquals("Z", token1.getTokenText());
      
      Token token2 = xPathLexer0.rightBracket();
      assertEquals(4, token2.getTokenType());
      assertEquals("#", token2.getTokenText());
      
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      assertEquals("l", token3.getTokenText());
      
      Token token4 = xPathLexer0.rightParen();
      assertEquals("`", token4.getTokenText());
      assertEquals(2, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(15, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("%viL|<i0", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/0?~CGt&}Y*'jLyng");
      XPathLexer xPathLexer1 = new XPathLexer("3*89q<T%|I}f");
      Token token0 = xPathLexer1.nextToken();
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(11, token1.getTokenType());
      assertEquals("/", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(">lMhm_{HI");
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.nextToken();
      assertEquals(">", token0.getTokenText());
      
      xPathLexer0.identifier();
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.leftParen();
      assertEquals(1, token1.getTokenType());
      assertEquals("{", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.operatorName();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("HI", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".7");
      Token token0 = xPathLexer0.colon();
      assertEquals("", token0.getTokenText());
      assertEquals(18, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(31, token1.getTokenType());
      assertEquals(".7", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("u0GQY+j%\"3RuYM");
      xPathLexer0.rightParen();
      xPathLexer0.comma();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("T.7");
      Token token0 = xPathLexer0.pipe();
      assertEquals("T", token0.getTokenText());
      assertEquals(17, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(".7", token1.getTokenText());
      assertEquals(31, token1.getTokenType());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertNull(token2);
      
      Token token3 = xPathLexer0.dollar();
      assertEquals(26, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("//0d~Ct&}Y*'jLyng");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("//", token0.getTokenText());
      assertEquals(12, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals("0d", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = new Token(14, " ", 14, 14);
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      Token token0 = new Token(28, ") (", (-1652), 28);
      xPathLexer0.and();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals("", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer(".9e}x`6^wYu6#(;Yj");
      Token token1 = xPathLexer1.nextToken();
      assertEquals(31, token1.getTokenType());
      assertEquals(".9", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("mcH^}dV2(`U GjHq\"");
      Token token0 = new Token(25, "mcH^}dV2(`U GjHq\"", 25, 25);
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals("mcH", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      
      Token token1 = new Token(24, "", 5, 24);
      xPathLexer0.setPreviousToken(token1);
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      
      Token token4 = xPathLexer0.equals();
      assertEquals(21, token4.getTokenType());
  }
}
