/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 08:03:31 GMT 2019
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.text.NumberFormat;
import java.util.LinkedList;
import java.util.Random;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CRSMatrix_ESTest extends CRSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 2617;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(2617, 2547.9317982686);
      CRSMatrix.zero(2617, 2617);
      cRSMatrix0.nonZeroRowMajorIterator();
      cRSMatrix0.max();
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(2617);
      cRSMatrix1.nonZeroIteratorOfColumn(2617);
      cRSMatrix1.nonZeroRowMajorIterator();
      int[] intArray0 = new int[7];
      intArray0[0] = 2611;
      intArray0[1] = 2617;
      intArray0[2] = 2617;
      intArray0[3] = 2617;
      intArray0[4] = 2617;
      intArray0[5] = 3056;
      intArray0[6] = 2617;
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '2617' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 13;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(13, (-458.006));
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      // Undeclared exception!
      try { 
        cRSMatrix0.iteratorOfRow((-1447));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1447
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 13;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(13, 13);
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      cRSMatrix0.mkString(numberFormat0);
      int[] intArray0 = new int[1];
      int int1 = 2;
      intArray0[0] = 2;
      cRSMatrix0.select(intArray0, intArray0);
      // Undeclared exception!
      try { 
        cRSMatrix0.getRow(13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 14
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(5);
      Integer integer0 = new Integer(5);
      cRSMatrix0.toDenseMatrix();
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(12, 1960);
      cRSMatrix0.minInRow(0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cRSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      cRSMatrix1.to(matrixFactory0);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 1960;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[2] = 12;
      intArray0[8] = 12;
      // Undeclared exception!
      try { 
        cRSMatrix1.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '12' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 0;
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0);
      cRSMatrix0.multiply(1.0);
      cRSMatrix0.setAll(0);
      cRSMatrix0.toBinary();
      int int1 = 1644;
      CRSMatrix.zero(1644, 13);
      MockRandom mockRandom0 = new MockRandom((-702));
      // Undeclared exception!
      try { 
        SparseMatrix.random(1644, (-702), 423.4526488730702, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1);
      cRSMatrix0.trace();
      cRSMatrix0.max();
      byte[] byteArray0 = cRSMatrix0.toBinary();
      CRSMatrix.fromBinary(byteArray0);
      // Undeclared exception!
      try { 
        cRSMatrix0.iteratorOfRow((-1499));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1499
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 13;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(13, 13);
      cRSMatrix0.setAll(13);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SMART;
      cRSMatrix0.withSolver(linearAlgebra_SolverFactory0);
      int int1 = 16;
      // Undeclared exception!
      try { 
        cRSMatrix0.getOrElse(16, 16, Double.NEGATIVE_INFINITY);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '16' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 0;
      DenseMatrix.from1DArray(1, 0, doubleArray0);
      // Undeclared exception!
      try { 
        SparseMatrix.from1DArray(725, 708, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(1152, 1924);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1924;
      doubleArray0[1] = (double) 1924;
      doubleArray0[2] = (double) 1924;
      doubleArray0[3] = (double) 1152;
      doubleArray0[4] = (double) 1152;
      doubleArray0[5] = (double) 1924;
      doubleArray0[6] = (double) 1924;
      doubleArray0[7] = (double) 1924;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      // Undeclared exception!
      try { 
        CRSMatrix.block(sparseMatrix0, sparseMatrix0, sparseMatrix0, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 1090;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1090);
      int int1 = 380;
      int int2 = (-930);
      int int3 = (-255);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZeroInColumn((-255), vectorProcedure0);
      // Undeclared exception!
      try { 
        cRSMatrix0.blankOfShape(1090, (-930));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 1090x-930
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1000, 1000);
      int int0 = 32;
      int int1 = 2930;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      // Undeclared exception!
      cRSMatrix0.foldRows(vectorAccumulator0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[][] doubleArray0 = new double[8][5];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 1336.1539888;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = Double.POSITIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = Double.POSITIVE_INFINITY;
      doubleArray2[1] = 1336.1539888;
      doubleArray2[2] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = (-2227.7125587465644);
      doubleArray3[1] = 0.0;
      doubleArray3[2] = Double.POSITIVE_INFINITY;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = Double.POSITIVE_INFINITY;
      doubleArray3[6] = Double.POSITIVE_INFINITY;
      doubleArray3[7] = 1336.1539888;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = 1336.1539888;
      doubleArray4[1] = (-2227.7125587465644);
      doubleArray4[2] = (-2227.7125587465644);
      doubleArray4[3] = 1336.1539888;
      doubleArray4[4] = Double.POSITIVE_INFINITY;
      doubleArray4[5] = 1.0;
      doubleArray4[6] = 1336.1539888;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      doubleArray5[0] = 1336.1539888;
      doubleArray5[1] = Double.POSITIVE_INFINITY;
      doubleArray5[2] = Double.POSITIVE_INFINITY;
      doubleArray5[3] = 0.0;
      doubleArray5[4] = 1336.1539888;
      doubleArray5[5] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      doubleArray6[0] = 2764.548124659;
      doubleArray6[1] = 0.0;
      doubleArray6[2] = 1336.1539888;
      doubleArray6[3] = Double.POSITIVE_INFINITY;
      doubleArray6[4] = Double.POSITIVE_INFINITY;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[7];
      doubleArray7[0] = 1.0;
      doubleArray7[1] = (-2227.7125587465644);
      doubleArray7[2] = 1.0;
      doubleArray7[3] = 2764.548124659;
      doubleArray7[4] = 2764.548124659;
      doubleArray7[5] = (-1.0);
      doubleArray7[6] = 1.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[3];
      doubleArray8[0] = 1.0;
      doubleArray8[1] = Double.POSITIVE_INFINITY;
      doubleArray8[2] = (-2227.7125587465644);
      doubleArray0[7] = doubleArray8;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '4' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 901;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(901, 17);
      cRSMatrix0.subtract(2896.23);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-43.691713), (double)17, 2896.23, (-466.4625053118774), (-43.691713)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      cRSMatrix0.transformRow(32, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(7, mockRandom0);
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(denseMatrix0);
      Matrix matrix1 = ooPlaceMatrixByItsTransposeMultiplication0.apply(denseMatrix0);
      ooPlaceMatrixByItsTransposeMultiplication0.ensureApplicableTo(matrix0);
      int int0 = (-4767);
      mockRandom0.ints(5496L, (-4767), 7);
      matrix1.toRowMajorSparseMatrix();
      // Undeclared exception!
      try { 
        CRSMatrix.block(matrix1, denseMatrix0, denseMatrix0, matrix1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(321, 321);
      Matrix matrix0 = cRSMatrix0.copyOfRows(330);
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)100;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(2622, 310);
      // Undeclared exception!
      try { 
        CRSMatrix.block(sparseMatrix0, sparseMatrix0, cRSMatrix0, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 3521;
      double double0 = (-1477.0);
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(3521, (-1477.0));
      int int1 = 2073;
      cRSMatrix0.maxInRow(2073);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.toRowVector();
      // Undeclared exception!
      cRSMatrix0.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1145, 1145);
      int int0 = 4972;
      int int1 = 1;
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(1);
      cRSMatrix1.blankOfColumns(1);
      int int2 = 0;
      // Undeclared exception!
      try { 
        cRSMatrix0.copyOfShape(4972, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1146
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 16;
      int int1 = 10;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      CRSMatrix cRSMatrix0 = CRSMatrix.random(16, 10, 1.0, (Random) mockRandom0);
      cRSMatrix0.toCSV();
      // Undeclared exception!
      try { 
        mockRandom0.ints(16, (-956));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1094);
      int int0 = 1078;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInRow(1078, vectorAccumulator0);
      // Undeclared exception!
      try { 
        cRSMatrix0.minInColumn(1097);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '1097' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(333, 18, 5);
      double double0 = cRSMatrix0.max();
      assertEquals(0.0, double0, 0.01);
      
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(333, 18);
      cRSMatrix1.nonZeroIteratorOfRow(2);
      assertEquals(18, cRSMatrix1.columns());
      assertEquals(333, cRSMatrix1.rows());
      
      Matrix matrix0 = Matrix.identity(5);
      assertEquals(1.0, matrix0.max(), 0.01);
      assertEquals(5, matrix0.columns());
      
      cRSMatrix0.eachNonZeroInRow(19, (VectorProcedure) null);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(32, 32);
      cRSMatrix0.manhattanNorm();
      cRSMatrix0.toCSV();
      byte[] byteArray0 = cRSMatrix0.toBinary();
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(32);
      Matrix.zero(2018, 746);
      CRSMatrix cRSMatrix2 = (CRSMatrix)cRSMatrix1.insert((Matrix) cRSMatrix0);
      assertEquals(0, cRSMatrix2.cardinality());
      
      cRSMatrix1.iteratorOfNonZeroRows();
      cRSMatrix1.iteratorOfNonZeroRows();
      assertEquals(32, cRSMatrix1.cardinality());
      
      CRSMatrix cRSMatrix3 = CRSMatrix.fromBinary(byteArray0);
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertEquals(145, byteArray0.length);
      assertEquals(0, cRSMatrix3.cardinality());
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix2));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 9;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(9, 9, 5);
      cRSMatrix0.copyOfShape(9, 5);
      int int1 = 2358;
      int int2 = (-1377);
      double double0 = Double.NEGATIVE_INFINITY;
      RowMajorSparseMatrix.diagonal(2212, 32.0);
      // Undeclared exception!
      try { 
        cRSMatrix0.get(9, 9);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '9' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 546;
      CRSMatrix cRSMatrix0 = new CRSMatrix(546, 546, 546);
      cRSMatrix0.iteratorOfNonZeroRows();
      cRSMatrix0.rowMajorIterator();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      // Undeclared exception!
      cRSMatrix0.foldRows(vectorAccumulator0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 901;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(901, 17);
      cRSMatrix0.subtract(2896.23);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.transformRow(32, vectorFunction0);
      // Undeclared exception!
      cRSMatrix0.euclideanNorm();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte)4;
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(728);
      cRSMatrix0.set(16, 0, 728);
      // Undeclared exception!
      try { 
        CRSMatrix.fromCSV("s%3g");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 25;
      double double0 = (-1659.42081996122);
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(25, (-1659.42081996122));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.forEach(consumer0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      int int1 = (-2609);
      int int2 = 0;
      long long0 = 125L;
      MockRandom mockRandom0 = new MockRandom(125L);
      long long1 = 289L;
      mockRandom0.doubles(289L);
      // Undeclared exception!
      try { 
        CRSMatrix.random((-2609), 0, (double) 0, (Random) mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 48;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(48, 48);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      int int1 = 1244;
      int int2 = 13;
      DenseMatrix denseMatrix0 = DenseMatrix.zero(1244, 13);
      // Undeclared exception!
      try { 
        inPlaceCopyMatrixToMatrix0.applySimple(denseMatrix0, (SparseMatrix) cRSMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(32);
      cRSMatrix0.manhattanNorm();
      cRSMatrix0.toBinary();
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(32);
      cRSMatrix1.insert((Matrix) cRSMatrix0);
      cRSMatrix1.iteratorOfNonZeroRows();
      cRSMatrix1.iteratorOfNonZeroRows();
      int[] intArray0 = new int[3];
      intArray0[0] = 32;
      intArray0[1] = (-884);
      intArray0[2] = (-450);
      // Undeclared exception!
      try { 
        cRSMatrix1.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '32' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(431, 431);
      cRSMatrix0.copyOfRows(32);
      Matrix.diagonal(431, (-3013.91));
      cRSMatrix0.max();
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 4;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(4, 4);
      cRSMatrix0.setAll(4);
      cRSMatrix0.toRowVector();
      cRSMatrix0.getColumn(32);
      cRSMatrix0.multiplyByItsTranspose();
      cRSMatrix0.iteratorOfRow(0);
      // Undeclared exception!
      try { 
        cRSMatrix0.set(100, 1167, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '100' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 2256;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2256);
      VectorAccumulator vectorAccumulator0 = null;
      // Undeclared exception!
      try { 
        cRSMatrix0.foldNonZeroInColumns((VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 994;
      MockRandom mockRandom0 = new MockRandom(994);
      // Undeclared exception!
      CRSMatrix.randomSymmetric(994, 1.0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 48;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(48);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(2911);
      // Undeclared exception!
      try { 
        inPlaceCopyMatrixToMatrix0.apply(columnMajorSparseMatrix0, (RowMajorSparseMatrix) cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '48' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(5);
      double double0 = new Integer(5);
      cRSMatrix0.toDenseMatrix();
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(12, 1960);
      cRSMatrix0.minInRow(0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cRSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      cRSMatrix1.to(matrixFactory0);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 1960;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 12;
      intArray0[8] = 12;
      // Undeclared exception!
      try { 
        cRSMatrix1.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '1960' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(0, (-514.2759279205), (Random) null);
      cRSMatrix0.subtract((-514.2759279205));
      cRSMatrix0.toMatrixMarket();
      cRSMatrix0.min();
      // Undeclared exception!
      try { 
        CRSMatrix.randomSymmetric(2225, 1206.20012047, (Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 4950625.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 9;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(9, 9, 5);
      cRSMatrix0.copyOfShape(5, 5);
      int int1 = 2358;
      int int2 = (-1377);
      double double0 = Double.NEGATIVE_INFINITY;
      RowMajorSparseMatrix.diagonal(2212, 32.0);
      // Undeclared exception!
      try { 
        cRSMatrix0.get(9, 9);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '9' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(32, 32);
      double double0 = cRSMatrix0.diagonalProduct();
      assertEquals(1.4615016373309029E48, double0, 0.01);
      
      Matrix matrix0 = cRSMatrix0.copy();
      byte[] byteArray0 = cRSMatrix0.toBinary();
      assertEquals(529, byteArray0.length);
      
      cRSMatrix0.nonZeroIteratorOfRow(32);
      assertTrue(cRSMatrix0.equals((Object)matrix0));
      assertEquals(32, cRSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(454);
      cRSMatrix0.getColumn(7);
      String string0 = "org.la4j.matrix.sparse.CCSMatrix$3";
      // Undeclared exception!
      try { 
        CRSMatrix.fromCSV("org.la4j.matrix.sparse.CCSMatrix$3");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(1000, 1);
      cRSMatrix0.toRowMajorSparseMatrix();
      CRSMatrix.zero(1000, 1, 1);
      double[][] doubleArray0 = new double[0][3];
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = 1;
      org.evosuite.runtime.Random.setNextRandom(1);
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1, Double.NEGATIVE_INFINITY);
      SparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      int int1 = (-1607);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZeroInColumn(1, vectorProcedure0);
      // Undeclared exception!
      try { 
        cRSMatrix0.sliceTopLeft((-1607), (-1607));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..-1607][0..-1607].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[][] doubleArray0 = new double[3][4];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1340.7863596755;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 1340.7863596755;
      doubleArray2[1] = 2.0;
      doubleArray2[2] = 1340.7863596755;
      doubleArray2[3] = 1340.7863596755;
      doubleArray2[4] = 1340.7863596755;
      doubleArray2[5] = 1340.7863596755;
      doubleArray2[6] = 1340.7863596755;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = 1340.7863596755;
      doubleArray0[2] = doubleArray3;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '4' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 8;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 8;
      doubleArray0[1] = (double) 8;
      doubleArray0[2] = (double) 3430;
      doubleArray0[3] = (-43.691713);
      doubleArray0[4] = (double) 8;
      doubleArray0[5] = (double) 549;
      int[] intArray0 = new int[2];
      intArray0[0] = 3430;
      intArray0[1] = 3430;
      CRSMatrix cRSMatrix0 = new CRSMatrix(8, 549, 3430, doubleArray0, intArray0, intArray0);
      double[][] doubleArray1 = new double[7][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray1);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.withDecompositor((LinearAlgebra.DecompositorFactory) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[][] doubleArray0 = new double[4][3];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 2.0;
      doubleArray2[1] = (-1282.489306);
      doubleArray2[2] = 411.61111794;
      doubleArray2[3] = Double.POSITIVE_INFINITY;
      doubleArray2[4] = 3697.60945;
      doubleArray2[5] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = (-1282.489306);
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 2.0;
      doubleArray3[3] = 2.0;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 411.61111794;
      doubleArray3[6] = (-1282.489306);
      doubleArray3[7] = 3697.60945;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = 411.61111794;
      doubleArray4[1] = 2.0;
      doubleArray4[2] = (-1692.32);
      doubleArray4[3] = 2.0;
      doubleArray4[4] = Double.POSITIVE_INFINITY;
      doubleArray4[5] = 2.0;
      doubleArray0[3] = doubleArray4;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      int[] intArray0 = new int[8];
      intArray0[0] = 1761;
      intArray0[1] = (-2939);
      intArray0[2] = 1795;
      intArray0[3] = (-889);
      intArray0[4] = 993;
      intArray0[5] = 1791;
      intArray0[6] = (-864);
      intArray0[7] = 1767;
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1761' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double[][] doubleArray0 = new double[3][4];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 3221.0896767;
      doubleArray1[1] = 1256.808;
      doubleArray1[2] = 1571.0;
      doubleArray1[3] = 191.0;
      doubleArray1[4] = (-1421.355711);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 1571.0;
      doubleArray2[1] = 1571.0;
      doubleArray2[2] = (-1421.355711);
      doubleArray2[3] = 1571.0;
      doubleArray2[4] = 191.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = 191.0;
      doubleArray3[1] = 1571.0;
      doubleArray3[2] = 3221.0896767;
      doubleArray3[3] = 191.0;
      doubleArray3[4] = 1571.0;
      doubleArray3[5] = (-1421.355711);
      doubleArray3[6] = 1571.0;
      doubleArray3[7] = (-1421.355711);
      doubleArray3[8] = 3221.0896767;
      doubleArray0[2] = doubleArray3;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      double double0 = cRSMatrix0.min();
      assertEquals((-1421.355711), double0, 0.01);
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = (-3537);
      MockRandom mockRandom0 = new MockRandom(586L);
      // Undeclared exception!
      try { 
        CRSMatrix.random(448, (-3537), 1.0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 448x-3537
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 2;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(2, 2);
      cRSMatrix0.iteratorOfRow(2);
      cRSMatrix0.nonZeroRowMajorIterator();
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '3' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      SparseMatrix.zero(992, 992);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(5265, 5265, 1220);
      cRSMatrix0.nonZeroAt(1220, 1077);
      double[][] doubleArray0 = new double[3][5];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 1077;
      doubleArray1[1] = (double) 5265;
      doubleArray1[2] = (double) 1220;
      doubleArray1[3] = (double) 1220;
      doubleArray1[4] = (double) 5265;
      doubleArray1[5] = (double) 1077;
      doubleArray1[6] = 1931.939544055657;
      doubleArray1[7] = (double) 5265;
      doubleArray1[8] = (double) 5265;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) 1220;
      doubleArray2[1] = (double) 1077;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (-1.0);
      doubleArray0[2] = doubleArray3;
      // Undeclared exception!
      try { 
        CRSMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = 1.0;
      doubleArray0[8] = (double) 0;
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 8;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0, 0, doubleArray0, intArray0, intArray0);
      // Undeclared exception!
      try { 
        cRSMatrix0.getRow(951);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 952
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = 311;
      int int1 = 8;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(311, 311, 8);
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.applySymmetric((SparseMatrix) columnMajorSparseMatrix0, (SparseMatrix) columnMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        CRSMatrix.block(columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0, matrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '312' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(32, 32);
      cRSMatrix0.manhattanNorm();
      cRSMatrix0.toBinary();
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(32);
      // Undeclared exception!
      cRSMatrix1.insert((Matrix) cRSMatrix0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.each((MatrixProcedure) null);
      cRSMatrix0.nonZeroIteratorOfColumn((-2893));
      CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      cRSMatrix0.sum();
      // Undeclared exception!
      try { 
        Matrix.zero((-2893), 4321);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("");
      cRSMatrix0.slice((-1201), (-2140), (-1201), 807);
      cRSMatrix0.setAll((-52.0));
      cRSMatrix0.nonZeroRowMajorIterator();
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroIteratorOfRow(972);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = 7;
      int int1 = 0;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 7;
      doubleArray0[4] = (double) 0;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(7, 0, doubleArray0);
      // Undeclared exception!
      try { 
        cRSMatrix0.blankOfColumns((-2518));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 7x-2518
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      double[][] doubleArray0 = new double[8][2];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-764.213694422);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = 65.0;
      doubleArray1[4] = (-4732.88);
      doubleArray1[5] = 478.0;
      doubleArray1[6] = 2.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 100.0;
      doubleArray2[1] = (-1.0);
      doubleArray2[2] = 478.0;
      doubleArray2[3] = 3.5;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (-4732.88);
      doubleArray2[6] = 65.0;
      doubleArray2[7] = 2.0;
      doubleArray2[8] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = 65.0;
      doubleArray3[1] = 478.0;
      doubleArray3[2] = 478.0;
      doubleArray3[3] = 3.5;
      doubleArray3[4] = 100.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = (-764.213694422);
      doubleArray4[1] = (-1928.88);
      doubleArray4[2] = 3.5;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = (-4732.88);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      doubleArray6[0] = 3.5;
      doubleArray6[1] = 478.0;
      doubleArray6[2] = (-52.0);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[9];
      doubleArray7[0] = 478.0;
      doubleArray7[1] = (-764.213694422);
      doubleArray7[2] = 100.0;
      doubleArray7[3] = 641.924321929726;
      doubleArray7[4] = (-1.0);
      doubleArray7[5] = 478.0;
      doubleArray7[6] = 65.0;
      doubleArray7[7] = (-764.213694422);
      doubleArray7[8] = 0.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[1];
      doubleArray8[0] = 3.5;
      doubleArray0[7] = doubleArray8;
      // Undeclared exception!
      try { 
        CRSMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray1[1] = 2245.26506;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = Double.POSITIVE_INFINITY;
      doubleArray2[1] = Double.POSITIVE_INFINITY;
      doubleArray2[2] = 2245.26506;
      doubleArray2[3] = 2245.26506;
      doubleArray2[4] = 2245.26506;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = Double.POSITIVE_INFINITY;
      doubleArray3[1] = Double.POSITIVE_INFINITY;
      doubleArray3[2] = Double.POSITIVE_INFINITY;
      doubleArray3[3] = Double.POSITIVE_INFINITY;
      doubleArray3[4] = Double.POSITIVE_INFINITY;
      doubleArray3[5] = Double.POSITIVE_INFINITY;
      doubleArray3[6] = Double.POSITIVE_INFINITY;
      doubleArray3[7] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.copyOfShape(25, 25);
      assertEquals(0.0096, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CRSMatrix.fromCSV("");
      // Undeclared exception!
      try { 
        SparseMatrix.fromMatrixMarket("E=l?J*4daR&.M9");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)2;
      doubleArray0[1] = (double) (byte)71;
      doubleArray0[2] = (double) 2;
      int[] intArray0 = new int[9];
      intArray0[0] = 2146519786;
      intArray0[1] = (int) (byte)17;
      intArray0[2] = (int) (byte)2;
      intArray0[3] = (int) (byte)2;
      intArray0[4] = 2;
      intArray0[5] = 2;
      intArray0[6] = 748;
      intArray0[7] = 2;
      intArray0[8] = (int) (byte)2;
      CRSMatrix cRSMatrix0 = new CRSMatrix(2146519786, (byte)2, 2, doubleArray0, intArray0, intArray0);
      double double0 = cRSMatrix0.maxInRow(2);
      double double1 = cRSMatrix0.min();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(2238, 2238);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2238;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(2242, 2242, doubleArray0);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 438;
      doubleArray0[1] = (double) 438;
      doubleArray0[2] = (double) 2222;
      doubleArray0[3] = (double) 2222;
      doubleArray0[4] = (double) 438;
      doubleArray0[5] = (double) 438;
      doubleArray0[6] = (double) 438;
      int[] intArray0 = new int[2];
      intArray0[0] = 438;
      intArray0[1] = 438;
      CRSMatrix cRSMatrix0 = new CRSMatrix(2222, 2222, 438, doubleArray0, intArray0, intArray0);
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      Integer.getInteger("%");
      linkedList0.add((Integer) null);
      Vector vector0 = ooPlaceMatrixByVectorMultiplication0.apply((RowMajorSparseMatrix) cRSMatrix0, sparseVector0);
      // Undeclared exception!
      cRSMatrix0.insertColumn(438, vector0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CRSMatrix.diagonal(2227, 2227);
      double[][] doubleArray0 = new double[6][1];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 2227;
      doubleArray1[1] = (double) 2227;
      doubleArray1[2] = (double) 2227;
      doubleArray1[3] = (double) 2227;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (double) 2227;
      doubleArray2[1] = (double) 2227;
      doubleArray2[2] = (double) 2227;
      doubleArray2[3] = (double) 2227;
      doubleArray2[4] = 3221.0;
      doubleArray2[5] = (-2125.353337072877);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = (double) 2227;
      doubleArray3[1] = (-2125.353337072877);
      doubleArray3[2] = (-2125.353337072877);
      doubleArray3[3] = 1212.8887951;
      doubleArray3[4] = 3221.0;
      doubleArray3[5] = (-2125.353337072877);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = 1.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      doubleArray5[0] = (-1019.78655279);
      doubleArray5[1] = 1.0;
      doubleArray5[2] = 1212.8887951;
      doubleArray5[3] = (double) 2227;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      doubleArray6[0] = 1212.8887951;
      doubleArray6[1] = (-2087.661348);
      doubleArray6[2] = 3221.0;
      doubleArray6[3] = (-2125.353337072877);
      doubleArray6[4] = 1212.8887951;
      doubleArray0[5] = doubleArray6;
      // Undeclared exception!
      try { 
        CRSMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)71;
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int int0 = 4;
      int int1 = (-1);
      Random random0 = null;
      // Undeclared exception!
      try { 
        CRSMatrix.random(4, (-1), 1179.0, (Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      int int0 = (-2146851663);
      double[] doubleArray0 = new double[0];
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Vector vector0 = cRSMatrix0.multiply((Vector) sparseVector0);
      vector0.manhattanNorm();
      cRSMatrix0.setRow((-2146851663), vector0);
      cRSMatrix0.transpose();
      int int1 = 9;
      int int2 = (-756);
      // Undeclared exception!
      try { 
        CRSMatrix.zero(9, 9, (-756));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -756.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.from2DArray((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) 1166;
      doubleArray0[2] = (double) (-1583);
      doubleArray0[3] = (double) 1166;
      doubleArray0[4] = (double) (-1583);
      doubleArray0[5] = (double) 1166;
      doubleArray0[6] = (double) 1166;
      doubleArray0[7] = (double) (-1583);
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray((-1583), 1166, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1583x1166
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.fromCSV("EyH9CJ<p?dhC\rEXqLy");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      int int0 = (-3397);
      int int1 = 1524;
      MockRandom mockRandom0 = new MockRandom((-3397));
      mockRandom0.setSeed(1524);
      mockRandom0.doubles((long) 1524);
      mockRandom0.nextInt((-3397));
      mockRandom0.nextInt();
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.random((-3397), 1524, (double) (-3397), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      int int0 = 8;
      CRSMatrix.identity(8);
      int int1 = (-1115);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CRSMatrix.random(8, (-1115), (double) (-1115), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      int int0 = 17;
      CRSMatrix cRSMatrix0 = new CRSMatrix(17, 17);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cRSMatrix0.non(matrixPredicate0);
      cRSMatrix0.setAll(1476.0);
      int int1 = 2048;
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(2048);
      // Undeclared exception!
      cRSMatrix1.rotate();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.iteratorOfNonZeroRows();
      int int0 = (-687);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = cRSMatrix0.toColumnMajorSparseMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.insert((Matrix) columnMajorSparseMatrix0, 1963, 1995);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 1963 rows and 1995 cols at 0, 0 in a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      int int0 = (-1183);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1982;
      int[] intArray0 = new int[4];
      intArray0[0] = (-1183);
      intArray0[1] = 1982;
      intArray0[2] = 1982;
      intArray0[3] = 1982;
      CRSMatrix cRSMatrix0 = null;
      try {
        cRSMatrix0 = new CRSMatrix(1982, 1982, (-1183), doubleArray0, intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -1183.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(5);
      cRSMatrix0.determinant();
      int int0 = 0;
      cRSMatrix0.toDenseMatrix();
      int int1 = 17;
      int int2 = 1960;
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(17, 1960);
      cRSMatrix0.minInRow(0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        cRSMatrix1.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(8, 1320, 1320);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cRSMatrix0.non(matrixPredicate0);
      cRSMatrix0.rowMajorIterator();
      cRSMatrix0.max();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1179.0;
      doubleArray0[1] = (double) 258;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(258, 34, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("org.la4j.matrix.SparseMatrix$4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }
}
