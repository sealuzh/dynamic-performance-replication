/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 19:22:23 GMT 2018
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.Reader;
import java.io.StreamTokenizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSListAxioms;
import umd.cs.shop.JSListLogicalAtoms;
import umd.cs.shop.JSListSubstitution;
import umd.cs.shop.JSOperator;
import umd.cs.shop.JSPlan;
import umd.cs.shop.JSPlanningDomain;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSState;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTasks;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSState_ESTest extends JSState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(93);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.ordinaryChars(93, 0);
      streamTokenizer0.whitespaceChars(0, (-1848));
      JSState jSState0 = null;
      try {
        jSState0 = new JSState(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JSState jSState0 = new JSState();
      JSPlan jSPlan0 = new JSPlan();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSTasks jSTasks0 = jSPlan0.cloneTasks();
      jSTasks0.add((Object) jSState0);
      jSState0.addElementsToState(jSTasks0);
      JSPredicateForm jSPredicateForm0 = null;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSListAxioms jSListAxioms0 = new JSListAxioms();
      JSSubstitution jSSubstitution1 = jSState0.satisfies(jSPlan0, jSSubstitution0, jSListAxioms0);
      jSSubstitution0.add((Object) jSSubstitution1);
      jSState0.add(1, (Object) jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSListAxioms jSListAxioms1 = new JSListAxioms();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Object object0 = new Object();
      jSSubstitution2.add(object0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      JSState jSState0 = new JSState();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.setSize(0);
      jSState0.removeElement(jSSubstitution0);
      JSPlan jSPlan0 = new JSPlan();
      JSPlan jSPlan1 = new JSPlan();
      JSState jSState1 = jSState0.apply(jSPlan1);
      JSListAxioms jSListAxioms0 = new JSListAxioms();
      JSListSubstitution jSListSubstitution0 = jSState1.satisfiesAll(jSState0, jSSubstitution0, jSListAxioms0);
      assertEquals(1, jSListSubstitution0.size());
      
      JSSubstitution jSSubstitution1 = jSState1.satisfies(jSPlan0, jSSubstitution0, jSListAxioms0);
      assertNotSame(jSState1, jSState0);
      assertEquals(0, jSSubstitution1.capacity());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      JSState jSState0 = new JSState();
      JSListLogicalAtoms jSListLogicalAtoms0 = jSState0.Cdr();
      jSState0.addElementsToState(jSListLogicalAtoms0);
      JSTerm jSTerm0 = new JSTerm();
      JSPlan jSPlan0 = new JSPlan();
      JSState jSState1 = jSState0.apply(jSPlan0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSListAxioms jSListAxioms0 = new JSListAxioms();
      JSSubstitution jSSubstitution1 = jSState0.satisfies(jSState1, jSSubstitution0, jSListAxioms0);
      JSSubstitution jSSubstitution2 = jSState0.satisfies(jSListLogicalAtoms0, jSSubstitution1, jSListAxioms0);
      jSState0.satisfiesTAm(jSTerm0, jSSubstitution2);
      assertNotSame(jSState1, jSState0);
      assertEquals(0, jSSubstitution2.capacity());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      JSState jSState0 = new JSState();
      JSJshopVars.flagLevel = 16;
      Object object0 = new Object();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSListSubstitution jSListSubstitution0 = jSState0.satisfiesTAm((JSPredicateForm) null, jSSubstitution0);
      assertEquals(0, jSListSubstitution0.size());
  }
}
