/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 10:15:43 GMT 2018
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.IOException;
import java.io.ObjectStreamConstants;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.SequenceInputStream;
import java.lang.reflect.Member;
import java.net.URI;
import java.util.Locale;
import java.util.regex.Pattern;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.Field;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.Signature;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.util.ClassPath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = Utility.format(3468, 67, true, '0');
      assertEquals("3468000000000000000000000000000000000000000000000000000000000000000", string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-1278), 144);
      assertTrue(boolean0);
      
      int int0 = Utility.clearBit(4466, 4466);
      assertEquals(4466, int0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = Utility.clearBit((-4789), (-4789));
      assertEquals((-6837), int0);
      
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = Utility.compactClassName("Kle");
      assertEquals("Kle", string0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "Kle";
      String string1 = Utility.printArray(objectArray0);
      assertNotNull(string1);
      assertEquals("{Kle}", string1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Utility.setBit(1355, 1355);
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      String string0 = Utility.printArray(objectArray0, true, true);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      String string0 = Utility.compactClassName("(8v<w9R", true);
      assertEquals("(8v<w9R", string0);
      
      Object object0 = new Object();
      String string1 = Utility.printArray((Object[]) constantArray0, true);
      assertEquals("{null, null, null, null}", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("?gfG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `?gfG'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Utility.getSignature("long");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "$8[dd<wO]9R";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.compactClassName("$8[dd<wO]9R", true);
      // Undeclared exception!
      try { 
        Utility.decode("$8[dd<wO]9R", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"8[\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      String string0 = Utility.printArray(objectArray0, false);
      assertEquals("null, null", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Object object0 = new Object();
      Utility.convertString("bytes must not be null!");
      MockFile mockFile0 = new MockFile("bytes must not be null!", "bytes must not be null!");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockFile0.getCanonicalPath();
      Object[] objectArray0 = new Object[0];
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      assertEquals(3L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("Mfk^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Mfk^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = Utility.methodSignatureReturnType("Sj8", false);
      assertEquals("short", string0);
      
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$A", string1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.accessToString(4369);
      assertEquals("public final native synthetic", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Utility.convertString("29kA@,O");
      try { 
        Utility.methodSignatureArgumentTypes("29kA@,O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 29kA@,O
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-82);
      Utility.toHexString(byteArray0);
      try { 
        Utility.methodSignatureReturnType("sIDJ&#1cyzmX3o4u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `sIDJ&#1cyzmX3o4u'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = Pattern.MULTILINE;
      byte[] byteArray0 = new byte[1];
      Utility.toHexString(byteArray0);
      Utility.classOrInterface(112);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 269, (-1429));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = Utility.clearBit(29, 29);
      assertEquals(29, int0);
      
      String string0 = Utility.format(29, 29, false, 'v');
      assertEquals("vvvvvvvvvvvvvvvvvvvvvvvvvvv29", string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = Utility.accessToString(196, true);
      assertEquals("protected volatile transient", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('9');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.accessToString((-273), true);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        constantPool0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-63);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 346, 134);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte) (-101);
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-101), (int) (byte)0, false);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-85);
      byteArray0[3] = (byte) (-85);
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte)8;
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)44, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte) (-85);
      byteArray0[0] = (byte) (-85);
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte)119;
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)44, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Utility.getSignature("D?@7Q");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-74);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-74), (int) (byte) (-74));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      Utility.isJavaIdentifierPart('4');
      try { 
        Utility.methodSignatureReturnType("<init>", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `<init>'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = Utility.getSignature("<clin7t>");
      assertEquals("L<clin7t>;", string0);
      
      String string1 = Utility.replace("L<clin7t>;", "<clin7t>", "L<clin7t>;");
      assertEquals("LL<clin7t>;;", string1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = Utility.getSignature("q3Uc|@Yz*yXo$k Qc");
      assertEquals("Lq3Uc|@Yz*yXo$k;", string0);
      
      String string1 = Utility.signatureToString("Lq3Uc|@Yz*yXo$k;");
      assertEquals("q3Uc|@Yz*yXo$k", string1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Utility.signatureToString("CP..-K D:t0kvw");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.classOrInterface((byte) (-57));
      String string0 = "=";
      try { 
        Utility.typeOfMethodSignature("QD;WAtY/y1(IA7*Y{u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: QD;WAtY/y1(IA7*Y{u
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = "4zg$Kep~s62_&YCtcF";
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = new byte[0];
      Utility.equals(byteArray0, byteArray1);
      String string1 = "zB}$%aJc0'`G4X<S%qL";
      try { 
        Utility.methodSignatureArgumentTypes("zB}$%aJc0'`G4X<S%qL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: zB}$%aJc0'`G4X<S%qL
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Utility.compactClassName("nd&{EqI-k");
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)29;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-69), 163);
      try { 
        Utility.methodSignatureReturnType("<clinit>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `<clinit>'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte) (-34);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-34), (int) (byte)67, true);
      assertEquals("0:    fstore_0\n1:    ishl\n2:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Utility.methodSignatureReturnType("S1NT", true);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)120;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 962, (int) (byte) (-34), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("V");
      assertEquals((byte)12, byte0);
      
      String string0 = Utility.methodSignatureReturnType("V");
      assertEquals("void", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)12;
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("0c 0a 0c 0c 0c", string1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      Utility.isJavaIdentifierPart('y');
      try { 
        Utility.methodSignatureReturnType("\"", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\"'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.setBit(181, 62);
      Utility.isJavaIdentifierPart('~');
      Utility.printArray((Object[]) null);
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      boolean boolean0 = Utility.isJavaIdentifierPart('`');
      String string1 = Utility.compactClassName("<clinit>");
      assertEquals("<clinit>", string1);
      
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "):\n";
      String string0 = Utility.compactClassName("):\n", "):\n", true);
      assertEquals("", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart(';');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)17;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$40$R", string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("float");
      mockPrintWriter0.print(535L);
      Object[] objectArray0 = new Object[0];
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      int int0 = Utility.clearBit(726, 1232);
      assertEquals(726, int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = Utility.compactClassName("byte");
      assertEquals("byte", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)51;
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("V3", string1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      try { 
        Utility.typeOfSignature("\"%)Upq<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"%)Upq<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Utility.isJavaIdentifierPart('G');
      String[] stringArray0 = new String[1];
      Utility.convertString(";");
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature(";", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean0 = Utility.isSet(51, (-2260));
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature(")", stringArray0);
      assertEquals("()L);", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "):\n";
      String string0 = Utility.methodTypeToSignature("):\n", stringArray0);
      assertEquals("(L):;)L):;", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = "xB>AH$b;& ivo-";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.decode("xB>AH$b;& ivo-", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"b;\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.decode("4S8f<,RhEH;f$<$#>T", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[11];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.encode(byteArray0, true);
      Utility.decode("$l$8b$I$A$A$A$A$A$A$A", false);
      Utility.compactClassName("NW5N|CjN2.bj`-");
      // Undeclared exception!
      try { 
        Utility.signatureToString("NW5N|CjN2.bj`-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `NW5N|CjN2.bj`-'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)97;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((byte)97);
      Utility.codeToString(byteSequence0, constantPool0);
      byte byte0 = Constants.ATTR_SYNTHETIC;
      Utility.clearBit((-1805), (byte)7);
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.methodSignatureArgumentTypes("+>t7x-ZlDOu7W\")eCx");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: +>t7x-ZlDOu7W\")eCx
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-124);
      byte[] byteArray1 = Utility.decode("int", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = File.separator;
      String string1 = Constants.ILLEGAL_TYPE;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("int");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.close();
      String string2 = Utility.codeToString(byteSequence0, constantPool0);
      assertArrayEquals(new byte[] {(byte)105, (byte)110, (byte)116}, byteArray1);
      assertEquals("lmul", string2);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Utility.methodSignatureReturnType("S1NT", true);
      ConstantDouble constantDouble0 = new ConstantDouble((-1039.6));
      Constant[] constantArray0 = new Constant[8];
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)119;
      Utility.equals(byteArray0, byteArray0);
      Utility.replace("\t\t#", "MYaP@BoS'v|", "@zU<&x{AnT2/D\"!");
      boolean boolean0 = true;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 164, (int) (byte)119, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      String string0 = Constants.ILLEGAL_OPCODE;
      byte[] byteArray1 = Utility.decode("goto_w", false);
      Utility.classOrInterface((byte) (-89));
      ConstantPool constantPool1 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 12, (-622));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)102;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)102;
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte)102;
      String string0 = Constants.ILLEGAL_TYPE;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)102, 197, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Utility.typeOfSignature("B");
      Object object0 = new Object();
      Object object1 = new Object();
      try { 
        Utility.methodSignatureReturnType("QftZD8r$^!Q~s", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `QftZD8r$^!Q~s'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "CfLh~ycA+pmSFrV.}$x");
      ConstantDouble constantDouble0 = new ConstantDouble((-3048.7842));
      Constant constant0 = constantDouble0.copy();
      constantDouble0.toString();
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantDouble0;
      constantArray0[1] = (Constant) constantDouble0;
      constantArray0[2] = (Constant) constantDouble0;
      constantArray0[3] = constant0;
      constantArray0[4] = constant0;
      constantArray0[5] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantDouble0.clone();
      Utility.getSignature("CONSTANT_Double[6](bytes = -3048.7842)");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)123;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 57, (int) (byte)123);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "iS>^3U6s,p2");
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte) (-51);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte) (-51);
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte) (-126);
      byteArray0[6] = (byte) (-113);
      byteArray0[7] = (byte)92;
      byteArray0[8] = (byte)23;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.classOrInterface(179);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-125);
      byteArray1[1] = (byte)123;
      Utility.classOrInterface((byte)123);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 179, (int) (byte) (-126));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      ConstantDouble constantDouble0 = new ConstantDouble((-12.46));
      constantDouble0.clone();
      String string1 = Utility.compactClassName("<clinit>");
      assertEquals("<clinit>", string1);
      
      String string2 = Utility.methodSignatureReturnType("BA}(GM,t1~[^C$y4=");
      assertEquals("byte", string2);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)73;
      Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, 249, true);
      try { 
        Utility.methodSignatureReturnType("Qiqr1*z(U@{4l;::cVb", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Qiqr1*z(U@{4l;::cVb'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte) (-80);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-80), (int) (byte) (-80));
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("0:    nop\n1:    ixor\n2:    areturn\n", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    nop
         // 1:    ixor
         // 2:    areturn
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Utility.typeOfSignature("B");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "B";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)108;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.classOrInterface(571);
      Utility.classOrInterface((-249));
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-125), (int) (byte)123);
      try { 
        Utility.methodSignatureReturnType("0:    istore_3\n1:    idiv\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    istore_3
         // 1:    idiv
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.classOrInterface((byte)0);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)55;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1431), 42);
      assertEquals("0:    lstore\t\t%0\n", string1);
      
      int int0 = Utility.clearBit((byte) (-85), (byte)0);
      assertEquals((-86), int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)22;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      Utility.codeToString(byteSequence0, constantPool0);
      String string0 = Utility.printArray((Object[]) null, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      Utility.equals(byteArray0, byteArray0);
      Utility.replace("cZJ`@", "^{9v#%W (6*Z", "anewarray");
      Constant[] constantArray0 = new Constant[2];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(255, 34);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-1482), (byte)103);
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 46, (-1482), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "nNaq(??Ph");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-71);
      byteArray0[4] = (byte) (-71);
      byteArray0[5] = (byte) (-71);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = File.separator;
      String string1 = Constants.ILLEGAL_TYPE;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 190, 464);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)42;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 5375, (int) (byte)42, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ">UCptM*HX#9C?=TCSq");
      Pattern.quote(">UCptM*HX#9C?=TCSq");
      Utility.convertString("Q>UCptM*HX#9C?=TCSqE");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\\Q>UCptM*HX#9C?=TCSq\\E";
      Utility.methodTypeToSignature("\t\t", stringArray0);
      byte[] byteArray0 = Utility.decode("false", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 357, 9);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-77));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte) (-77);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-77), (int) (byte)84);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-84);
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte) (-87);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "FULL");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1478, (-1658));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("java.lang.");
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[1];
      String string0 = ">\t";
      stringArray0[0] = ">\t";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte byte0 = (byte) (-63);
      Constant[] constantArray0 = new Constant[5];
      Utility.getSignature(" fields:\n");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.methodSignatureReturnType(" fields:\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: ` fields:
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)92;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)34, 249, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)34;
      Utility.classOrInterface((byte)0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)55;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)3;
      byteArray1[3] = (byte)3;
      byteArray1[4] = (byte)55;
      byteArray1[5] = (byte) (-122);
      byteArray1[6] = (byte)55;
      byteArray1[7] = (byte)34;
      byteArray1[8] = (byte)76;
      Utility.codeToString(byteArray1, constantPool0, (-1071), 227);
      int int0 = Pattern.CASE_INSENSITIVE;
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)21;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 5375, (int) (byte)21, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte)125;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.mark((byte)98);
      byteArrayInputStream0.reset();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      Utility.encode(byteArray0, false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      int int0 = (-240);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 10, 512, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte) (-16);
      byteArray0[6] = (byte)82;
      byteArray0[7] = (byte) (-90);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      byteSequence0.markSupported();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, "h7/U?c2D>4DRud&*p");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte byte0 = (byte) (-98);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-98));
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantInteger0;
      constantArray0[2] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-86);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-98), 230, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("anewarray", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 67, 240);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)34;
      String string0 = Utility.classOrInterface((byte)0);
      assertEquals("class", string0);
      
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)55;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)3;
      byteArray1[3] = (byte)3;
      byteArray1[4] = (byte)55;
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      byteArray1[5] = (byte) (-122);
      byteArray1[6] = (byte)55;
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte)71;
      byteArray2[1] = (byte)55;
      byteArray2[2] = (byte)3;
      byteArray2[3] = (byte) (-122);
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte)0;
      byteArray2[6] = (byte)0;
      String string1 = Utility.codeToString(byteArray2, constantPool0, (int) (byte) (-122), (int) (byte)55, true);
      assertEquals("0:    dstore_0\n1:    lstore\t\t%3\n3:    i2f\n4:    nop\n5:    nop\n6:    nop\n", string1);
      
      String string2 = Utility.convertString("&2)z!{u`9)Q7($JxNV");
      assertEquals("&2)z!{u`9)Q7($JxNV", string2);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte) (-122);
      byteArray0[2] = (byte) (-122);
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-122));
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantDouble0;
      constantArray0[2] = (Constant) constantDouble0;
      constantArray0[3] = (Constant) constantDouble0;
      constantArray0[4] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantDouble0.clone();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 180, 1873);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = Utility.compactClassName("Signature: ", ">\t", false);
      assertEquals("Signature: ", string0);
      
      byte byte0 = Utility.typeOfSignature("Signature: ");
      assertEquals((byte)9, byte0);
      
      String string1 = Utility.getSignature("+PS>D ;_M");
      assertEquals("L+PS>D;", string1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Utility.methodSignatureReturnType("Invalid method signature: ");
      try { 
        Utility.typeOfSignature("6q*\\`E\"<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6q*\\`E\"<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-78);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.replace("\\", "Dont call getValueShort() on a non SHORT ElementValue", "(}.5Al{vN]-L4'z33u");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-78), (int) (byte) (-34), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)93;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 109, 15, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = Utility.decode("CX5+dPj4", false);
      short short0 = Constants.IMPDEP2;
      Utility.classOrInterface((short)255);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (short)255, 2852);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)103;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte) (-14);
      String string0 = Constants.ILLEGAL_TYPE;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1883, (int) (byte) (-14));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      Utility.equals(byteArray0, byteArray0);
      Utility.replace("^{9v#%W (6*Z", ")", "}u*4f!XX/MvGb9j");
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)103;
      byteArray1[1] = (byte) (-60);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte) (-97);
      byteArray1[7] = (byte)0;
      byteArray1[8] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 90, (int) (byte)0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)84;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 189, (int) (byte)84, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte) (-90);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.printArray((Object[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)82, (int) (byte)82, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte) (-80);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 172, (int) (byte) (-80));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[3];
      byteArray0[5] = (byte)82;
      byteArray1[1] = (byte)62;
      byteArray1[2] = (byte) (-89);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte)62, (int) (byte)62, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = "nNaq(??Ph";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "nNaq(??Ph");
      String string1 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)32;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)32, (int) (byte)32);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte) (-12);
      byteArray0[4] = (byte) (-19);
      byteArray0[5] = (byte)100;
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-19), (int) (byte) (-12));
      assertEquals("0:    nop\n1:    nop\n2:    <illegal opcode>\n3:    nop\n4:    <illegal opcode>\n5:    isub\n", string0);
      
      String string1 = Utility.printArray((Object[]) constantArray0, true);
      assertEquals("{null, null, null, null, null, null}", string1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "vSO-`F6shdF 3bpyS!W");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$jkgD0p8");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte) (-56);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 445, 445, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(0, constantPool1.getLength());
      
      byte byte0 = (byte) (-116);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)112;
      int int0 = (-1056);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)112, (-1056));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      String string0 = "$8[dd<wO]9R";
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      constantPool0.setConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      byte[] byteArray0 = Utility.decode(" arg", false);
      assertArrayEquals(new byte[] {(byte)32, (byte)97, (byte)114, (byte)103}, byteArray0);
      assertNotNull(byteArray0);
      
      int int0 = 65;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 65, 65);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[3] = (byte) (-103);
      byteArray0[0] = (byte) (-103);
      byteArray0[5] = (byte) (-103);
      byteArray0[2] = (byte) (-23);
      byteArray0[7] = (byte)0;
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string0);
      assertEquals("<clinit>", string0);
      
      ConstantDouble constantDouble0 = new ConstantDouble((-12.46));
      assertNotNull(constantDouble0);
      assertEquals((-12.46), constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      
      ConstantDouble constantDouble1 = (ConstantDouble)constantDouble0.clone();
      assertNotSame(constantDouble0, constantDouble1);
      assertNotSame(constantDouble1, constantDouble0);
      assertTrue(constantDouble1.equals((Object)constantDouble0));
      assertNotNull(constantDouble1);
      assertEquals((-12.46), constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals((byte)6, constantDouble1.getTag());
      assertEquals((-12.46), constantDouble1.getBytes(), 0.01);
      
      String string1 = "KaI";
      try { 
        Utility.methodSignatureReturnType("KaI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `KaI'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("29kA@,O", false);
      assertArrayEquals(new byte[] {(byte)50, (byte)57, (byte)107, (byte)65, (byte)64, (byte)44, (byte)79}, byteArray0);
      assertNotNull(byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)50, (byte)57, (byte)107, (byte)65, (byte)64, (byte)44, (byte)79}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertArrayEquals(new byte[] {(byte)50, (byte)57, (byte)107, (byte)65, (byte)64, (byte)44, (byte)79}, byteArray0);
      assertNotNull(string0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("aaload", string0);
      
      String string1 = Utility.methodSignatureReturnType("CY+{sk0f", false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("char", string1);
      
      try { 
        Utility.typeOfSignature("Qiqr1*z(U@{4l;::cVb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Qiqr1*z(U@{4l;::cVb
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = Utility.classOrInterface(30);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte) (-60);
      String string1 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-48), (int) (byte) (-60), true);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertArrayEquals(new byte[] {(byte)57, (byte) (-48), (byte) (-60)}, byteArray0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals("0:    dstore\t\t%208\n2:    wide\t(wide)\n", string1);
      
      String string2 = Utility.compactClassName("0:    dstore\t\t%208\n2:    wide\t(wide)\n", "0:    dstore\t\t%208\n2:    wide\t(wide)\n", true);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("29kA@,O", false);
      assertArrayEquals(new byte[] {(byte)50, (byte)57, (byte)107, (byte)65, (byte)64, (byte)44, (byte)79}, byteArray0);
      assertNotNull(byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ConstantInteger constantInteger0 = new ConstantInteger((byte)125);
      assertNotNull(constantInteger0);
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals(125, constantInteger0.getBytes());
      
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      assertTrue(constantInteger1.equals((Object)constantInteger0));
      assertNotNull(constantInteger1);
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals(125, constantInteger0.getBytes());
      assertEquals((byte)3, constantInteger1.getTag());
      assertEquals(125, constantInteger1.getBytes());
      
      Constant[] constantArray0 = new Constant[9];
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      assertNotNull(constantDouble0);
      assertEquals(0.0, constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 3043, 2298);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("RRYbz/ZVH8AO$2lzb?.e");
      assertNotNull(constantUtf8_0);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("RRYbz/ZVH8AO$2lzb?.e", constantUtf8_0.getBytes());
      
      String string0 = Utility.getSignature("RRYbz/ZVH8AO$2lzb?.e");
      assertNotNull(string0);
      assertEquals("LRRYbz/ZVH8AO$2lzb?/e;", string0);
      
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)67;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1431), 42);
      assertArrayEquals(new byte[] {(byte)79, (byte)67}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("0:    iastore\n1:    fstore_0\n", string1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      int int0 = Utility.clearBit((byte) (-85), (byte) (-3));
      assertEquals((-536870997), int0);
      
      try { 
        Utility.methodSignatureReturnType("RRYbz/ZVH8AO$2lzb?.e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RRYbz/ZVH8AO$2lzb?.e'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string0);
      assertEquals("<clinit>", string0);
      
      byte[] byteArray0 = new byte[6];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      
      byteArray0[0] = (byte) (-66);
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte) (-119);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-66), (byte)0, (byte)0, (byte) (-66), (byte) (-119), (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      int int0 = byteSequence0.available();
      assertArrayEquals(new byte[] {(byte) (-66), (byte)0, (byte)0, (byte) (-66), (byte) (-119), (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(6, int0);
      
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-66), (byte)0, (byte)0, (byte) (-66), (byte) (-119), (byte)0}, byteArray0);
      assertNotNull(constantInterfaceMethodref0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(190, constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals(48640, constantInterfaceMethodref0.getClassIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      
      Constant[] constantArray0 = new Constant[2];
      byteSequence0.reset();
      assertArrayEquals(new byte[] {(byte) (-66), (byte)0, (byte)0, (byte) (-66), (byte) (-119), (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      assertNotNull(bCELComparator0);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertArrayEquals(new byte[] {(byte) (-66), (byte)0, (byte)0, (byte) (-66), (byte) (-119), (byte)0}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(2, constantPool0.getLength());
      assertEquals("arraylength", string1);
      
      String string2 = Utility.getSignature("Illegally nested brackets:");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("LIllegally;", string2);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(4, constantPool0.getLength());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\t\t#");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)95;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)95, 6, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-21);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)118, (byte)36, (byte)56, (byte)4, (byte) (-21)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertArrayEquals(new byte[] {(byte)118, (byte)36, (byte)56, (byte)4, (byte) (-21)}, byteArray0);
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("fneg", string0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("fneg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `fneg'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte) (-3);
      String string0 = Utility.getSignature("aH M2}cM{wH");
      assertNotNull(string0);
      assertEquals("LaH;", string0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0, false);
      assertNotNull(mockPrintWriter0);
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      String string1 = Utility.getSignature("yp U:m3Gm");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Lyp;", string1);
      
      byte[] byteArray1 = Utility.decode("z", false);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)122}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      short short0 = Utility.searchOpcode("LaH;");
      assertEquals((short) (-1), short0);
      
      String string2 = Utility.codeToString(byteArray1, constantPool0, (int) (byte) (-3), 6);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)122}, byteArray1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(string2);
      assertEquals(0, constantPool0.getLength());
      assertEquals("0:    ishr\n", string2);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("Y=<IWTy7df(Z1", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y=<IWTy7df(Z1'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      MockFile mockFile0 = new MockFile("<illegal opcode>");
      assertNotNull(mockFile0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("<illegal opcode>", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals("<illegal opcode>", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("<illegal opcode>");
      assertNotNull(constantUtf8_0);
      assertEquals("<illegal opcode>", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte) (-64);
      byteArray0[3] = (byte) (-64);
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "O4`vPV,B=@fqH8,2");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ConstantDouble constantDouble0 = new ConstantDouble((-3308.24540664));
      assertNotNull(constantDouble0);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals((-3308.24540664), constantDouble0.getBytes(), 0.01);
      
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantDouble0;
      constantArray0[2] = (Constant) constantDouble0;
      constantArray0[3] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(4, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-64), 5032);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 49152. Constant pool size is: 4
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte) (-70);
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte) (-63);
      byteArray0[6] = (byte) (-70);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-70), (byte) (-70), (byte)0, (byte)43, (byte) (-63), (byte)0, (byte) (-70)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      byteSequence0.close();
      assertArrayEquals(new byte[] {(byte) (-70), (byte) (-70), (byte)0, (byte)43, (byte) (-63), (byte)0, (byte) (-70)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)95;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "goto_w");
      assertFalse(boolean0);
      
      String string0 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)95}, byteArray0);
      assertNotNull(string0);
      assertEquals("$ff_", string0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "$ff_";
      objectArray0[1] = (Object) byteArray0;
      objectArray0[2] = (Object) byteArray0;
      objectArray0[3] = (Object) byteArray0;
      objectArray0[4] = (Object) "$ff_";
      objectArray0[5] = (Object) byteArray0;
      objectArray0[6] = (Object) byteArray0;
      String string1 = Utility.printArray(objectArray0, false, false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)95}, byteArray0);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("$ff_", string2);
      
      try { 
        Utility.methodSignatureReturnType("$ff_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `$ff_'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      String string1 = Utility.classOrInterface(2455);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("class", string1);
      
      short short0 = Constants.LUSHR;
      assertEquals((short)125, short0);
      
      try { 
        Utility.typeOfSignature("<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = Pattern.quote("checkcast");
      assertNotNull(string0);
      assertEquals("\\Qcheckcast\\E", string0);
      
      MockFile mockFile0 = new MockFile("checkcast", "checkcast");
      assertNotNull(mockFile0);
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/checkcast/checkcast", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.exists());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/checkcast", mockFile0.getParent());
      assertEquals("checkcast", mockFile0.getName());
      
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("monitorexit");
      assertNotNull(constantUtf8_0);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("monitorexit", constantUtf8_0.getBytes());
      
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-7);
      String string1 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte) (-7), (byte)0, (byte)0}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("$f9$A$A", string1);
      
      byte[] byteArray1 = Utility.decode("_", false);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)95}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertArrayEquals(new byte[] {(byte)95}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 2260, 3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray0[4] = (byte)119;
      ConstantInteger constantInteger0 = new ConstantInteger((byte)119);
      assertNotNull(constantInteger0);
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals(119, constantInteger0.getBytes());
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("impdep1", stringArray0);
      assertNotNull(string0);
      assertEquals("()Limpdep1;", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      assertNotNull(constantPool0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      assertNotNull(dataInputStream0);
      assertEquals(2, byteSequence0.getIndex());
      
      ConstantPool constantPool1 = new ConstantPool(dataInputStream0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(0, constantPool1.getLength());
      
      ConstantPool constantPool2 = constantPool1.copy();
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertNotNull(constantPool2);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(0, constantPool1.getLength());
      assertEquals(0, constantPool2.getLength());
      
      String string1 = Utility.codeToString(byteSequence0, constantPool1);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(5, byteSequence0.getIndex());
      assertEquals(0, constantPool1.getLength());
      assertEquals("dneg", string1);
      
      int int0 = Utility.clearBit((byte)119, (byte)119);
      assertEquals(119, int0);
      
      try { 
        Utility.typeOfSignature("()Limpdep1;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ()Limpdep1;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = Utility.replace("Unreachable default case reached!", "Unreachable default case reached!", (String) null);
      assertNotNull(string0);
      assertEquals("null", string0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      try { 
        Utility.methodSignatureReturnType("LocalVariable");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LocalVariable
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = "Ot";
      int int0 = Utility.clearBit((-2035), (-2035));
      assertEquals((-10227), int0);
      
      String string1 = Utility.compactClassName("Ot");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Ot", string1);
      
      try { 
        Utility.methodSignatureReturnType("Ot", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Ot'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte) (-57);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-57), (byte) (-57), (byte) (-57)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-57), (byte) (-57), (byte) (-57)}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 181, (int) (byte) (-33));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = "LineNumberTable";
      String string1 = Utility.getSignature("lreturn");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Llreturn;", string1);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)36;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 14, 1018);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      try { 
        Utility.typeOfSignature("2R*8_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2R*8_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Constant[] constantArray0 = null;
      Constant[] constantArray1 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray1);
      assertNotNull(constantPool0);
      assertEquals(5, constantPool0.getLength());
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-72);
      byte byte0 = (byte)99;
      byteArray0[0] = (byte)99;
      byteArray0[2] = (byte) (-70);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)99, (int) (byte) (-70));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("$?p[8rwO]9R");
      assertNotNull(constantUtf8_0);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("$?p[8rwO]9R", constantUtf8_0.getBytes());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte byte0 = Constants.ITEM_Integer;
      assertEquals((byte)1, byte0);
      
      String string0 = Utility.signatureToString("J");
      assertNotNull(string0);
      assertEquals("long", string0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte) (-71);
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-71));
      assertNotNull(constantInteger0);
      assertEquals((-71), constantInteger0.getBytes());
      assertEquals((byte)3, constantInteger0.getTag());
      
      String string0 = constantInteger0.toString();
      assertNotNull(string0);
      assertEquals((-71), constantInteger0.getBytes());
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals("CONSTANT_Integer[3](bytes = -71)", string0);
      
      BCELComparator bCELComparator0 = Method.getComparator();
      assertNotNull(bCELComparator0);
      
      Constant.setComparator(bCELComparator0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string1 = Utility.getSignature("CONSTANT_Integer[3](bytes = -71)");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("[LCONSTANT_Integer;", string1);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      try { 
        Utility.methodSignatureReturnType("CONSTANT_Integer[3](bytes = -71)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[3] = (byte) (-103);
      byteArray0[0] = (byte) (-103);
      byteArray0[5] = (byte) (-103);
      byteArray0[2] = (byte) (-23);
      byteArray0[7] = (byte)0;
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string0);
      assertEquals("<clinit>", string0);
      
      ConstantDouble constantDouble0 = new ConstantDouble((-12.46));
      assertNotNull(constantDouble0);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals((-12.46), constantDouble0.getBytes(), 0.01);
      
      ConstantDouble constantDouble1 = (ConstantDouble)constantDouble0.clone();
      assertNotSame(constantDouble0, constantDouble1);
      assertNotSame(constantDouble1, constantDouble0);
      assertTrue(constantDouble1.equals((Object)constantDouble0));
      assertNotNull(constantDouble1);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals((-12.46), constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble1.getTag());
      assertEquals((-12.46), constantDouble1.getBytes(), 0.01);
      
      String string1 = Utility.compactClassName("<clinit>");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("<clinit>", string1);
      
      // Undeclared exception!
      try { 
        Utility.getSignature("BA}(GM,t1~[^C$y4=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[^C$y4=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      String string1 = Utility.classOrInterface((byte) (-82));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("interface", string1);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "HS|d3+nG{;r YG)Bw");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte) (-82);
      byteArray0[6] = (byte) (-89);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 127, (int) (byte) (-89));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte) (-9);
      byteArray0[3] = (byte)31;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-88), (byte) (-17), (byte) (-9), (byte)31}, byteArray0);
      assertFalse(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-88), (byte) (-17), (byte) (-9), (byte)31}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      int int0 = byteSequence0.available();
      assertArrayEquals(new byte[] {(byte) (-88), (byte) (-17), (byte) (-9), (byte)31}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(4, int0);
      
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-88), (byte) (-17), (byte) (-9), (byte)31}, byteArray0);
      assertNotNull(constantInterfaceMethodref0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(43247, constantInterfaceMethodref0.getClassIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals(63263, constantInterfaceMethodref0.getNameAndTypeIndex());
      
      byteSequence0.reset();
      assertArrayEquals(new byte[] {(byte) (-88), (byte) (-17), (byte) (-9), (byte)31}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      assertNotNull(bCELComparator0);
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-88), (byte) (-17), (byte) (-9), (byte)31}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-88), 4);
      assertArrayEquals(new byte[] {(byte) (-88), (byte) (-17), (byte) (-9), (byte)31}, byteArray0);
      assertNotNull(string0);
      assertEquals(0, constantPool0.getLength());
      assertEquals("0:    jsr\t\t#-4105\n3:    lload_1\n", string0);
      
      String string1 = "";
      byteSequence1.reset();
      assertNotSame(byteSequence1, byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-88), (byte) (-17), (byte) (-9), (byte)31}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(0, byteSequence1.getIndex());
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Utility.encode(byteArray0, true);
      assertNotNull(string0);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      byte[] byteArray1 = Utility.decode("$l$8b$I$A$A$A$A$A$A$A", false);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)31, (byte) (-117), (byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(byteArrayInputStream0);
      assertEquals(11, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(dataInputStream0);
      assertEquals(11, byteArrayInputStream0.available());
      
      ConstantPool constantPool0 = new ConstantPool(dataInputStream0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(constantPool0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 11, (-1845038994), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("CFB");
      assertEquals((byte)5, byte0);
      
      // Undeclared exception!
      try { 
        Utility.decode((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Constant[] constantArray0 = null;
      String string0 = ")\t";
      try { 
        Utility.typeOfSignature(")\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte) (-37);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      constantPool0.accept(emptyVisitor0);
      assertEquals(0, constantPool0.getLength());
      
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte) (-56);
      byteArray0[6] = (byte)94;
      byteArray0[7] = (byte) (-116);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)84, 269, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      int int0 = Pattern.UNIX_LINES;
      assertEquals(1, int0);
      
      int int1 = Pattern.UNICODE_CASE;
      assertFalse(int1 == int0);
      assertEquals(64, int1);
      
      String string0 = ":.f'";
      try { 
        Utility.typeOfSignature(":.f'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :.f'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = "|~2[6b74d;mr";
      byte[] byteArray0 = Utility.decode("|~2[6b74d;mr", false);
      assertNotNull(byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ConstantInteger constantInteger0 = new ConstantInteger((byte)125);
      assertNotNull(constantInteger0);
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals(125, constantInteger0.getBytes());
      
      ConstantInteger constantInteger1 = (ConstantInteger)constantInteger0.clone();
      assertNotSame(constantInteger0, constantInteger1);
      assertNotSame(constantInteger1, constantInteger0);
      assertTrue(constantInteger1.equals((Object)constantInteger0));
      assertNotNull(constantInteger1);
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals(125, constantInteger0.getBytes());
      assertEquals(125, constantInteger1.getBytes());
      assertEquals((byte)3, constantInteger1.getTag());
      
      ConstantInteger constantInteger2 = new ConstantInteger(constantInteger0);
      assertTrue(constantInteger0.equals((Object)constantInteger1));
      assertTrue(constantInteger2.equals((Object)constantInteger1));
      assertTrue(constantInteger2.equals((Object)constantInteger0));
      assertNotNull(constantInteger2);
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals(125, constantInteger0.getBytes());
      assertEquals(125, constantInteger2.getBytes());
      assertEquals((byte)3, constantInteger2.getTag());
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(0, constantPool1.getLength());
      
      int int0 = Pattern.CASE_INSENSITIVE;
      assertEquals(2, int0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string1 = Utility.codeToString(byteSequence0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(0, constantPool1.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("iushr", string1);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2, 186);
      assertNotNull(byteArrayInputStream0);
      assertEquals(10, byteArrayInputStream0.available());
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteSequence0, byteArrayInputStream0);
      assertNotNull(sequenceInputStream0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(10, byteArrayInputStream0.available());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string2 = "c";
      try { 
        Utility.methodSignatureReturnType("c", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `c'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      String string0 = Utility.classOrInterface(181);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte) (-63);
      byteArray0[2] = (byte) (-33);
      byteArray0[5] = (byte) (-33);
      byteArray0[6] = (byte)44;
      byteArray0[7] = (byte)59;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2260, 36);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int int0 = Utility.clearBit(441, 4281);
      assertEquals(441, int0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = "11zb2tm";
      try { 
        Utility.typeOfSignature("11zb2tm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 11zb2tm
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        Utility.typeOfSignature("8L)<{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8L)<{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = "RuntimeInvisibleAnnotations";
      try { 
        Utility.typeOfSignature("RuntimeInvisibleAnnotations");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RuntimeInvisibleAnnotations
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("Hh]v!vt8N~S");
      assertNotNull(constantUtf8_0);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("Hh]v!vt8N~S", constantUtf8_0.getBytes());
      
      byte byte0 = Constants.T_LONG;
      assertEquals((byte)11, byte0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Utility.replace("Y?4JdC.{+5=ZR@dK", "Y?4JdC.{+5=ZR@dK", "Y?4JdC.{+5=ZR@dK");
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)11;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)11, (-1023));
      assertArrayEquals(new byte[] {(byte)92, (byte)11, (byte)92, (byte)11}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals((-1023), byteArrayInputStream0.available());
      
      int int0 = byteArrayInputStream0.read(byteArray0);
      assertArrayEquals(new byte[] {(byte)92, (byte)11, (byte)92, (byte)11}, byteArray0);
      assertEquals((-1023), byteArrayInputStream0.available());
      assertEquals((-1), int0);
      
      int int1 = byteArrayInputStream0.read(byteArray0);
      assertArrayEquals(new byte[] {(byte)92, (byte)11, (byte)92, (byte)11}, byteArray0);
      assertTrue(int1 == int0);
      assertEquals((-1023), byteArrayInputStream0.available());
      assertEquals((-1), int1);
      
      int int2 = Pattern.CASE_INSENSITIVE;
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(2, int2);
      
      int int3 = byteArrayInputStream0.read();
      assertArrayEquals(new byte[] {(byte)92, (byte)11, (byte)92, (byte)11}, byteArray0);
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals((-1023), byteArrayInputStream0.available());
      assertEquals((-1), int3);
      
      try { 
        Utility.typeOfSignature("Ooops, what primitive type is ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ooops, what primitive type is 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = true;
      String string0 = Utility.compactClassName("(anonymous)", "(anonymous)", true);
      assertNotNull(string0);
      assertEquals("", string0);
      
      try { 
        Utility.methodSignatureReturnType("WsfW/s?#BW\",M@{", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `WsfW/s?#BW\",M@{'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      MockFile mockFile0 = new MockFile("<illegal opcode>", "<illegal opcode>");
      assertNotNull(mockFile0);
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("<illegal opcode>", mockFile0.getName());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/<illegal opcode>", mockFile0.getParent());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/<illegal opcode>/<illegal opcode>", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("<illegal opcode>");
      assertNotNull(constantUtf8_0);
      assertEquals("<illegal opcode>", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)38;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)38, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)38, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      
      byte byte0 = (byte)17;
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)38, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertNotNull(byteSequence2);
      assertEquals(0, byteSequence2.getIndex());
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertNotSame(byteSequence0, byteSequence2);
      assertNotSame(byteSequence0, byteSequence1);
      assertArrayEquals(new byte[] {(byte)38, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence0.equals((Object)byteSequence2));
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("dload_0", string1);
      
      try { 
        Utility.methodSignatureReturnType("impdep2", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `impdep2'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte) (-19);
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte) (-108);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)60, (byte) (-12), (byte)60, (byte) (-19), (byte)119, (byte) (-108)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertArrayEquals(new byte[] {(byte)60, (byte) (-12), (byte)60, (byte) (-19), (byte)119, (byte) (-108)}, byteArray0);
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("istore_1", string0);
      
      try { 
        Utility.typeOfSignature("\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-91);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      short short0 = Constants.DSTORE_2;
      assertEquals((short)73, short0);
      
      byte byte0 = Utility.typeOfSignature("Z:");
      assertEquals((byte)4, byte0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte) (-111);
      byteArray0[3] = (byte) (-128);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-1170), (-499));
      assertArrayEquals(new byte[] {(byte) (-111), (byte) (-111), (byte) (-111), (byte) (-128)}, byteArray0);
      assertNotNull(string0);
      assertEquals(0, constantPool0.getLength());
      assertEquals("0:    i2b\n1:    i2b\n2:    i2b\n3:    ior\n", string0);
      
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-71);
      byteArray0[1] = (byte) (-71);
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-71));
      assertNotNull(constantInteger0);
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals((-71), constantInteger0.getBytes());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantInteger0;
      constantArray0[1] = (Constant) constantInteger0;
      constantArray0[3] = (Constant) constantInteger0;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-71), (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-108);
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      byteArray1[1] = (byte) (-71);
      byteArray1[3] = (byte) (-71);
      byteArray1[5] = (byte) (-71);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-108), (byte) (-71), (byte)0, (byte) (-71), (byte)0, (byte) (-71)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      int int0 = byteSequence0.available();
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-108), (byte) (-71), (byte)0, (byte) (-71), (byte)0, (byte) (-71)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(6, int0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(4, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-108), (byte) (-71), (byte)0, (byte) (-71), (byte)0, (byte) (-71)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(4, constantPool0.getLength());
      assertEquals("lcmp", string0);
      
      String[] stringArray0 = new String[1];
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte) (-18);
      byteArray0[6] = (byte)43;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)43, (byte)43, (byte)43, (byte)43, (byte)43, (byte) (-18), (byte)43}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      byteSequence0.close();
      assertArrayEquals(new byte[] {(byte)43, (byte)43, (byte)43, (byte)43, (byte)43, (byte) (-18), (byte)43}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      byteSequence0.reset();
      assertArrayEquals(new byte[] {(byte)43, (byte)43, (byte)43, (byte)43, (byte)43, (byte) (-18), (byte)43}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertArrayEquals(new byte[] {(byte)43, (byte)43, (byte)43, (byte)43, (byte)43, (byte) (-18), (byte)43}, byteArray0);
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("aload_1", string0);
      
      String string1 = Utility.printArray((Object[]) null, false);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "^_IIpWH:O'<i#fHWL?");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "vSO-`F6shdF 3bpyS!W");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ConstantInteger constantInteger0 = new ConstantInteger(3088);
      assertNotNull(constantInteger0);
      assertEquals(3088, constantInteger0.getBytes());
      assertEquals((byte)3, constantInteger0.getTag());
      
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      assertTrue(constantInteger1.equals((Object)constantInteger0));
      assertNotNull(constantInteger1);
      assertEquals(3088, constantInteger0.getBytes());
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals(3088, constantInteger1.getBytes());
      assertEquals((byte)3, constantInteger1.getTag());
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(0, constantPool1.getLength());
      
      constantPool1.accept(emptyVisitor0);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool1.getLength());
      
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)70;
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-701), 301, false);
      assertNotSame(constantPool0, constantPool1);
      assertArrayEquals(new byte[] {(byte) (-83), (byte)70}, byteArray0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertNotNull(string1);
      assertEquals(0, constantPool0.getLength());
      assertEquals("0:    lreturn\n1:    fstore_3\n", string1);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = "putstatic";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, "putstatic", false, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte[] byteArray0 = new byte[23];
      byteArray0[1] = (byte)0;
      byteArray0[5] = (byte)0;
      ConstantLong constantLong0 = new ConstantLong(0L);
      assertNotNull(constantLong0);
      assertEquals(0L, constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantLong0;
      constantArray0[1] = (Constant) constantLong0;
      constantArray0[2] = (Constant) constantLong0;
      constantArray0[3] = (Constant) constantLong0;
      constantArray0[4] = (Constant) constantLong0;
      constantArray0[5] = (Constant) constantLong0;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(6, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(6, constantPool0.getLength());
      assertEquals(6, constantPool1.getLength());
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = constantPool1.constantToString(constantArray0[2]);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(string0);
      assertEquals(6, constantPool0.getLength());
      assertEquals(6, constantPool1.getLength());
      assertEquals("0", string0);
      
      try { 
        Utility.typeOfSignature("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      short short0 = Utility.searchOpcode("return");
      assertEquals((short)177, short0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "athrow";
      stringArray0[1] = "athrow";
      stringArray0[2] = "athrow";
      String string0 = Utility.methodTypeToSignature("athrow", stringArray0);
      assertNotNull(string0);
      assertEquals("(Lathrow;Lathrow;Lathrow;)Lathrow;", string0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)82;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)82, (byte)82, (byte)82, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      boolean boolean0 = byteSequence0.markSupported();
      assertArrayEquals(new byte[] {(byte)82, (byte)82, (byte)82, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertTrue(boolean0);
      
      String string1 = Utility.printArray((Object[]) null);
      assertNull(string1);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)82, (int) (byte)82, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Mko85b`");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      int int0 = Pattern.UNICODE_CHARACTER_CLASS;
      assertEquals(256, int0);
      
      byte[] byteArray0 = Utility.decode("s4f-v", false);
      assertArrayEquals(new byte[] {(byte)115, (byte)52, (byte)102, (byte)45, (byte)118}, byteArray0);
      assertNotNull(byteArray0);
      
      ConstantMethodref constantMethodref0 = new ConstantMethodref(12, 32);
      assertNotNull(constantMethodref0);
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals(12, constantMethodref0.getClassIndex());
      assertEquals(32, constantMethodref0.getNameAndTypeIndex());
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(0, constantPool1.getLength());
      
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertNotNull(constantPool2);
      assertEquals(0, constantPool2.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 32, 256, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte)68;
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)68;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertArrayEquals(new byte[] {(byte)68}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      assertArrayEquals(new byte[] {(byte)68}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      
      String string0 = Utility.codeToString(byteSequence1, constantPool0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteSequence1, byteSequence0);
      assertArrayEquals(new byte[] {(byte)68}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(string0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence1.getIndex());
      assertEquals("fstore_1", string0);
      
      String string1 = Utility.classOrInterface((byte)68);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("class", string1);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("class", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `class'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte) (-81);
      byteArray0[6] = (byte)22;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)89, (byte)22, (byte)22, (byte)22, (byte) (-81), (byte) (-81), (byte)22}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)89, (byte)22, (byte)22, (byte)22, (byte) (-81), (byte) (-81), (byte)22}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      
      byteSequence1.mark((byte) (-81));
      assertNotSame(byteSequence1, byteSequence0);
      assertArrayEquals(new byte[] {(byte)89, (byte)22, (byte)22, (byte)22, (byte) (-81), (byte) (-81), (byte)22}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(0, byteSequence1.getIndex());
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertNotSame(byteSequence0, byteSequence1);
      assertArrayEquals(new byte[] {(byte)89, (byte)22, (byte)22, (byte)22, (byte) (-81), (byte) (-81), (byte)22}, byteArray0);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertNotNull(string0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("dup", string0);
      
      int int0 = Utility.clearBit(9, 11);
      assertEquals(9, int0);
      
      String string1 = Utility.compactClassName("Invalid signature: `", "Invalid signature: `", true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "^}(R}+W|\"qa`imPm>y~");
      assertFalse(boolean0);
      
      byte byte0 = Utility.typeOfSignature("L29kA@,O;V");
      assertEquals((byte)14, byte0);
      
      String string0 = Utility.compactClassName("L29kA@,O;V", "A.3+kB`&.Ts", false);
      assertNotNull(string0);
      assertEquals("L29kA@,O;V", string0);
      
      String string1 = Constants.CONSTRUCTOR_NAME;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("<init>", string1);
      
      short short0 = Utility.searchOpcode("<init>");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = Utility.decode("-Y2,b_DFIn^p\"", false);
      assertNotNull(byteArray0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ifnull");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2319, (int) (short) (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "d`3-n[rhpz");
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      byte byte0 = (byte)113;
      byteArray0[2] = (byte)113;
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)113;
      byteArray1[1] = (byte)0;
      int int0 = (-429);
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)113, (-429), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(4, constantPool0.getLength());
      
      constantPool0.setConstantPool(constantArray0);
      assertEquals(4, constantPool0.getLength());
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Z=xC}FKtv";
      stringArray0[1] = "$8[dd<wO]9R";
      stringArray0[2] = "$8[dd<wO]9R";
      stringArray0[3] = "Z=xC}FKtv";
      stringArray0[4] = "Z=xC}FKtv";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte) (-96);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-1724164647), (int) (byte) (-96));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    istore_2
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BCELComparator bCELComparator0 = Method.getComparator();
      assertNotNull(bCELComparator0);
      
      Constant.setComparator(bCELComparator0);
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "shortS1NT");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      int int0 = Pattern.UNICODE_CHARACTER_CLASS;
      assertEquals(256, int0);
      
      byte[] byteArray0 = Utility.decode("?liJ0BW]", false);
      assertArrayEquals(new byte[] {(byte)63, (byte)108, (byte)105, (byte)74, (byte)48, (byte)66, (byte)87, (byte)93}, byteArray0);
      assertNotNull(byteArray0);
      
      ConstantMethodref constantMethodref0 = new ConstantMethodref(1696, 1696);
      assertNotNull(constantMethodref0);
      assertEquals(1696, constantMethodref0.getNameAndTypeIndex());
      assertEquals(1696, constantMethodref0.getClassIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(0, constantPool1.getLength());
      
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertNotNull(constantPool2);
      assertEquals(0, constantPool2.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 104, 1696, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(0, constantPool1.getLength());
      
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertNotNull(constantPool2);
      assertEquals(0, constantPool2.getLength());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)77;
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-63), (int) (byte) (-86), false);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool2);
      assertArrayEquals(new byte[] {(byte)77, (byte)77}, byteArray0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertNotNull(string0);
      assertEquals(0, constantPool0.getLength());
      assertEquals("0:    astore_2\n1:    astore_2\n", string0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("0:    astore_2\n1:    astore_2\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    astore_2
         // 1:    astore_2
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = "checkcast";
      String string1 = Constants.ILLEGAL_OPCODE;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("<illegal opcode>", string1);
      
      MockFile mockFile0 = new MockFile("checkcast", "checkcast");
      assertNotNull(mockFile0);
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/checkcast/checkcast", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/checkcast", mockFile0.getParent());
      assertEquals("checkcast", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)75;
      String string2 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte)86, (byte)75}, byteArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("VK", string2);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)86, (byte)75}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)86, (byte)75}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      
      String string3 = Utility.codeToString(byteSequence0, constantPool0);
      assertNotSame(byteSequence0, byteSequence1);
      assertArrayEquals(new byte[] {(byte)86, (byte)75}, byteArray0);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("sastore", string3);
      
      try { 
        Utility.typeOfSignature("checkcast");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: checkcast
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = Utility.decode("#BwPtF1R6'}25Ex", false);
      assertNotNull(byteArray0);
      
      String string0 = Utility.classOrInterface(1801);
      assertNotNull(string0);
      assertEquals("interface", string0);
      
      short short0 = Constants.LUSHR;
      assertEquals((short)125, short0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (short)125, 2080, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      boolean boolean0 = Utility.isJavaIdentifierPart(']');
      assertFalse(boolean0);
      
      String string0 = Utility.convertString("[~`Ov{o#[>Kg>ke_~");
      assertNotNull(string0);
      assertEquals("[~`Ov{o#[>Kg>ke_~", string0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = ";";
      stringArray0[1] = "[~`Ov{o#[>K\\g>ke_~";
      stringArray0[2] = "[~`Ov{o#[>K\\g>ke_~";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("[~`Ov{o#[>Kg>ke_~", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [~`Ov{o#[>K\\g>ke_~
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte byte0 = (byte) (-91);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-91);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-91), (byte) (-91)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string0 = Utility.convertString("\"");
      assertNotNull(string0);
      assertEquals("\\\"", string0);
      
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[3] = (byte) (-103);
      byteArray0[0] = (byte) (-103);
      byteArray0[5] = (byte) (-103);
      byteArray0[2] = (byte) (-23);
      byteArray0[7] = (byte)0;
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string0);
      assertEquals("<clinit>", string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)36, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      try { 
        Utility.typeOfSignature("HO$Fc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: HO$Fc
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      try { 
        Utility.typeOfSignature("P!uU{YYKrOz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P!uU{YYKrOz
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      String string0 = Utility.classOrInterface(181);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      String string1 = Utility.classOrInterface((-783));
      assertNotNull(string1);
      assertEquals("class", string1);
      
      String string2 = Utility.compactClassName("class", false);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("class", string2);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte) (-46);
      byteArray0[4] = (byte) (-59);
      byteArray0[5] = (byte) (-42);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 3599, 3599);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("$?p[8rwO]9R");
      assertNotNull(constantUtf8_0);
      assertEquals("$?p[8rwO]9R", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte) (-61);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 6, (int) (byte)63);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      boolean boolean0 = Utility.isSet(1369, 178);
      assertFalse(boolean0);
      
      int int0 = Utility.setBit(178, 1369);
      assertEquals(33554610, int0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("U(8HxSE#L>b2Q'6B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U(8HxSE#L>b2Q'6B'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Z=xC}Ktv";
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)92;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(4, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(4, constantPool0.getLength());
      assertEquals(4, constantPool1.getLength());
      
      String string0 = Utility.codeToString(byteArray0, constantPool1, (-1139), 2969, false);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertArrayEquals(new byte[] {(byte)92}, byteArray0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(string0);
      assertEquals(4, constantPool0.getLength());
      assertEquals(4, constantPool1.getLength());
      assertEquals("0:    dup2\n", string0);
      
      String string1 = Utility.convertString("0:    dup2\n");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("0:    dup2\\n", string1);
      
      String string2 = Utility.convertString("idiv");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("idiv", string2);
      
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertNotNull(constantPool2);
      assertEquals(4, constantPool2.getLength());
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, "Z=xC}Ktv");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("TV|AjP^`vgBu^UI5*bW|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: TV|AjP^`vgBu^UI5*bW|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Constant[] constantArray0 = null;
      byte[] byteArray0 = new byte[5];
      try { 
        Utility.typeOfSignature("3Gl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3Gl
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("$?p[8rwO]9R");
      assertNotNull(constantUtf8_0);
      assertEquals("$?p[8rwO]9R", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      try { 
        Utility.typeOfSignature("$?p[8rwO]9R");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $?p[8rwO]9R
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = Utility.getSignature("checkcast");
      assertNotNull(string0);
      assertEquals("Lcheckcast;", string0);
      
      MockFile mockFile0 = new MockFile("checkcast", "checkcast");
      assertNotNull(mockFile0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/checkcast", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("checkcast", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/checkcast/checkcast", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      
      Constant[] constantArray0 = new Constant[1];
      int int0 = Pattern.CASE_INSENSITIVE;
      assertEquals(2, int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-7);
      byteArray0[0] = (byte)38;
      try { 
        Utility.typeOfSignature("4Ee8^T=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4Ee8^T=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte)107;
      byteArray0[5] = (byte) (-8);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)16, (byte)52, (byte) (-60), (byte)29, (byte)107, (byte) (-8)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)16;
      byteArray1[1] = (byte)29;
      byteArray1[2] = (byte) (-60);
      byteArray1[3] = (byte) (-60);
      byteArray1[4] = (byte) (-8);
      byteArray1[5] = (byte) (-60);
      byteArray1[6] = (byte)107;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      assertArrayEquals(new byte[] {(byte)16, (byte)29, (byte) (-60), (byte) (-60), (byte) (-8), (byte) (-60), (byte)107}, byteArray1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      
      byteSequence1.close();
      assertNotSame(byteSequence1, byteSequence0);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)16, (byte)29, (byte) (-60), (byte) (-60), (byte) (-8), (byte) (-60), (byte)107}, byteArray1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteSequence1.getIndex());
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteSequence0, byteSequence1);
      assertArrayEquals(new byte[] {(byte)16, (byte)52, (byte) (-60), (byte)29, (byte)107, (byte) (-8)}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertNotNull(string0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(2, byteSequence0.getIndex());
      assertEquals("bipush\t\t52", string0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("L}!L!4H;J;V", "java.lang.$8[dd<wO]9R", "P:r#:%734aALXP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: L}!L!4H;J;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      constantPool0.setConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[6];
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean0);
      
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)39;
      byteArray0[3] = (byte)99;
      byteArray0[2] = (byte)36;
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 433, (int) (byte) (-84));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      byte[] byteArray0 = new byte[0];
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-3816), (int) (byte) (-84));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(0, constantPool0.getLength());
      assertEquals("", string1);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("Gq3c/<l57");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Gq3c/<l57'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      short short0 = Constants.F2L;
      assertEquals((short)140, short0);
      
      String string0 = "+>i=c5n7U6.-%{9b3";
      try { 
        Utility.typeOfSignature("+>i=c5n7U6.-%{9b3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >i=c5n7U6.-%{9b3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(4, byteArrayInputStream0.available());
      
      byteArrayInputStream0.close();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      
      long long0 = byteArrayInputStream0.skip(262L);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(4L, long0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(byteArrayInputStream1);
      assertEquals(4, byteArrayInputStream1.available());
      
      boolean boolean0 = byteArrayInputStream1.markSupported();
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals(4, byteArrayInputStream1.available());
      assertTrue(boolean0);
      
      int int0 = byteArrayInputStream1.read();
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals(3, byteArrayInputStream1.available());
      assertEquals(0, int0);
      
      int int1 = byteArrayInputStream1.read();
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertTrue(int1 == int0);
      assertEquals(2, byteArrayInputStream1.available());
      assertEquals(0, int1);
      
      byteArrayInputStream1.reset();
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals(4, byteArrayInputStream1.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(bufferedInputStream0);
      assertEquals(4, byteArrayInputStream1.available());
      
      byte[] byteArray1 = Utility.decode("SHW||706-%EDp", false);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      byte[] byteArray2 = new byte[4];
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray1[1] = (byte)100;
      byteArray2[1] = (byte) (-8);
      byteArray2[1] = (byte) (-8);
      byteArray2[3] = (byte) (-8);
      String string0 = Utility.classOrInterface((byte)100);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(0, constantPool1.getLength());
      
      String string1 = Utility.replace("SHW||706-%EDp", "SHW||706-%EDp", "class");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("class", string1);
      
      String string2 = Utility.format((byte) (-8), (byte) (-8), false, '[');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("-8", string2);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("ejxi[WGV[8q.");
      assertNotNull(mockPrintStream0);
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "ejxi[WGV[8q.", (Object[]) null);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertNotNull(printStream0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      
      PrintStream printStream1 = mockPrintStream0.append('[');
      assertSame(mockPrintStream0, printStream0);
      assertSame(mockPrintStream0, printStream1);
      assertSame(printStream1, printStream0);
      assertSame(printStream1, mockPrintStream0);
      assertNotNull(printStream1);
      
      Utility.printArray((PrintStream) mockPrintStream0, (Object[]) null);
      assertSame(mockPrintStream0, printStream0);
      assertSame(mockPrintStream0, printStream1);
      
      int int2 = Utility.setBit(512, 512);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(513, int2);
      
      try { 
        Utility.typeOfSignature("+X{S4EDR'{k7<-(=\"`}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X{S4EDR'{k7<-(=\"`}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string0 = "F";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte byte0 = Utility.typeOfSignature("F");
      assertEquals((byte)6, byte0);
      
      try { 
        Utility.methodSignatureArgumentTypes("F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: F
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = Utility.getSignature("float");
      assertNotNull(string0);
      assertEquals("F", string0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string1 = Utility.methodSignatureReturnType("F");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("float", string1);
      
      try { 
        Utility.methodSignatureArgumentTypes("float");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: float
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte byte0 = (byte) (-116);
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-80);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 172, (int) (byte) (-80));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-84);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 112, (int) (byte) (-102), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("D/");
      assertNotNull(string0);
      assertEquals("double", string0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String string0 = Utility.classOrInterface(30);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      
      constantPool1.accept(emptyVisitor0);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      
      boolean boolean0 = true;
      String string1 = "36|(lxTmwjl_OZT5J_)";
      String string2 = Utility.convertString("36|(lxTmwjl_OZT5J_)");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("36|(lxTmwjl_OZT5J_)", string2);
      
      MockFile mockFile0 = new MockFile("&XB5M\"9v[cVIC@");
      assertNotNull(mockFile0);
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("&XB5M\"9v[cVIC@", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("&XB5M\"9v[cVIC@", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      
      try { 
        Utility.typeOfSignature("&XB5M\"9v[cVIC@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &XB5M\"9v[cVIC@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string0 = Utility.methodTypeToSignature("iD3]V){<N3V9(BGK", (String[]) null);
      assertNotNull(string0);
      assertEquals("()LiD3]V){<N3V9(BGK;", string0);
      
      try { 
        Utility.typeOfMethodSignature("()LiD3]V){<N3V9(BGK;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {<N3V9(BGK;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      boolean boolean0 = true;
      String string0 = Utility.methodSignatureReturnType("S1NT", true);
      assertNotNull(string0);
      assertEquals("short", string0);
      
      ConstantDouble constantDouble0 = new ConstantDouble((-1039.6));
      assertNotNull(constantDouble0);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals((-1039.6), constantDouble0.getBytes(), 0.01);
      
      Constant[] constantArray0 = new Constant[8];
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-127);
      int int0 = (-1351);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(8, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(8, constantPool0.getLength());
      assertEquals(8, constantPool1.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 18, (int) (byte) (-66), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = "HV) /";
      // Undeclared exception!
      try { 
        Utility.signatureToString("HV) /", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `HV) /'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "short");
      assertFalse(boolean0);
      
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      byte[] byteArray0 = Utility.decode("zcK<Ch3n:na#@YhZy", false);
      assertNotNull(byteArray0);
      
      String string1 = Utility.classOrInterface(2455);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("class", string1);
      
      short short0 = Constants.LUSHR;
      assertEquals((short)125, short0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string2 = Utility.codeToString(byteArray0, constantPool0, (-1100), 97, false);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(0, constantPool0.getLength());
      assertEquals("0:    ishr\n1:    dadd\n2:    astore_0\n3:    istore_1\n4:    fstore_0\n5:    imul\n6:    baload\n7:    fdiv\n8:    astore\t\t%110\n10:   ladd\n11:   fload_1\n12:   lstore_1\n13:   dup\n14:   imul\n15:   dup_x1\n16:   lshl\n", string2);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `<illegal opcode>'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = Utility.convertString("D]lFc+aaX2}uHN");
      assertNotNull(string0);
      assertEquals("D]lFc+aaX2}uHN", string0);
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/Linterface;");
      boolean boolean0 = FileSystemHandling.setPermissions(evoSuiteFile0, false, true, true);
      assertFalse(boolean0);
      
      String string1 = Utility.convertString("]P[M3j]LEJC'x");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("]P[M3j]LEJC\\'x", string1);
      
      MockFile mockFile0 = new MockFile("&2)z!{u`9)Q7($JxNV");
      assertNotNull(mockFile0);
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("&2)z!{u`9)Q7($JxNV", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertEquals("&2)z!{u`9)Q7($JxNV", mockFile0.toString());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      assertNotNull(mockFileOutputStream0);
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals("&2)z!{u`9)Q7($JxNV", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals("&2)z!{u`9)Q7($JxNV", mockFile0.toString());
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("&2)z!{u`9)Q7($JxNV", "9,'?rg", "<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &2)z!{u`9)Q7($JxNV
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-98);
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "8=o0?D");
      assertFalse(boolean0);
      
      ConstantDouble constantDouble0 = new ConstantDouble((byte)119);
      assertNotNull(constantDouble0);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals(119.0, constantDouble0.getBytes(), 0.01);
      
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantDouble0;
      constantArray0[1] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 46, (int) (byte) (-106));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = Utility.classOrInterface(30);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      
      constantPool1.accept(emptyVisitor0);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)55;
      byte byte0 = (byte) (-48);
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte) (-60);
      String string1 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-48), (int) (byte) (-60), true);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertArrayEquals(new byte[] {(byte)55, (byte) (-48), (byte) (-60)}, byteArray0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals("0:    lstore\t\t%208\n2:    wide\t(wide)\n", string1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)55, (byte) (-48), (byte) (-60)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string2 = Utility.codeToString(byteSequence0, constantPool0);
      assertNotSame(constantPool0, constantPool1);
      assertArrayEquals(new byte[] {(byte)55, (byte) (-48), (byte) (-60)}, byteArray0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(0, constantPool0.getLength());
      assertEquals(3, byteSequence0.getIndex());
      assertEquals("lstore\t\t%53444", string2);
      
      String string3 = Utility.compactClassName("0:    lstore\t\t%208\n2:    wide\t(wide)\n", "0:    lstore\t\t%208\n2:    wide\t(wide)\n", true);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-6);
      byte byte0 = Utility.typeOfSignature("Illegal type: ");
      assertEquals((byte)10, byte0);
      
      ConstantInteger constantInteger0 = new ConstantInteger((-865));
      assertNotNull(constantInteger0);
      assertEquals((-865), constantInteger0.getBytes());
      assertEquals((byte)3, constantInteger0.getTag());
      
      String[] stringArray0 = new String[10];
      stringArray0[0] = "double";
      stringArray0[2] = "ConstantValue";
      stringArray0[3] = "double";
      String string0 = Utility.compactClassName("ConstantValue");
      assertNotNull(string0);
      assertEquals("ConstantValue", string0);
      
      String string1 = Utility.fillup(";", 188, true, 'M');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(";MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", string1);
      
      String string2 = Utility.getSignature("ConstantValue");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("LConstantValue;", string2);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      assertNotNull(constantDouble0);
      assertEquals(0.0, constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantDouble0;
      constantArray0[2] = (Constant) constantDouble0;
      constantArray0[3] = (Constant) constantDouble0;
      constantArray0[4] = (Constant) constantDouble0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(24, (-661));
      assertNotNull(constantNameAndType0);
      assertEquals((-661), constantNameAndType0.getSignatureIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(24, constantNameAndType0.getNameIndex());
      
      constantArray0[5] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(6, constantPool0.getLength());
      
      ConstantDouble constantDouble1 = (ConstantDouble)constantDouble0.clone();
      assertNotSame(constantDouble0, constantDouble1);
      assertNotSame(constantDouble1, constantDouble0);
      assertTrue(constantDouble1.equals((Object)constantDouble0));
      assertNotNull(constantDouble1);
      assertEquals(0.0, constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals((byte)6, constantDouble1.getTag());
      assertEquals(0.0, constantDouble1.getBytes(), 0.01);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte) (-112);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-112), 864);
      assertArrayEquals(new byte[] {(byte) (-112), (byte) (-112)}, byteArray0);
      assertNotNull(string0);
      assertEquals(6, constantPool0.getLength());
      assertEquals("0:    d2f\n1:    d2f\n", string0);
      
      String string1 = "`:bbq}Lv>mJ,9";
      String string2 = Utility.getSignature("`:bbq}Lv>mJ,9");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("L`:bbq}Lv>mJ,9;", string2);
      
      try { 
        Utility.methodSignatureArgumentTypes("M$AM$c1$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M$AM$c1$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      try { 
        Utility.typeOfSignature("NFj(tB1K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: NFj(tB1K
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(6, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(6, constantPool0.getLength());
      assertEquals(6, constantPool1.getLength());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)41;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)55, 103);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      String string1 = "zcK<Ch3n:na#@YhZy";
      short short0 = Constants.LUSHR;
      assertEquals((short)125, short0);
      
      String[] stringArray0 = new String[0];
      String string2 = Utility.methodTypeToSignature("zcK<Ch3n:na#@YhZy", stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("()LzcK<Ch3n:na#@YhZy;", string2);
      
      String[] stringArray1 = Utility.methodSignatureArgumentTypes("()LzcK<Ch3n:na#@YhZy;");
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string3 = ",z^~qxTmm=Y:c=";
      try { 
        Utility.typeOfSignature(",z^~qxTmm=Y:c=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,z^~qxTmm=Y:c=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      String string1 = "zcK<Ch3n:na#@YhZy";
      String[] stringArray0 = new String[0];
      String string2 = Utility.methodTypeToSignature("zcK<Ch3n:na#@YhZy", stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("()LzcK<Ch3n:na#@YhZy;", string2);
      
      String[] stringArray1 = Utility.methodSignatureArgumentTypes("()LzcK<Ch3n:na#@YhZy;");
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      try { 
        Utility.typeOfSignature("()LzcK<Ch3n:na#@YhZy;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ()LzcK<Ch3n:na#@YhZy;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String string0 = "3";
      byte[] byteArray0 = Utility.decode("3", false);
      assertArrayEquals(new byte[] {(byte)51}, byteArray0);
      assertNotNull(byteArray0);
      
      short short0 = Constants.INSTANCEOF_QUICK;
      assertEquals((short)225, short0);
      
      int int0 = 3136;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 139, 139);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)58;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1257, 166);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)90;
      byteArray0[0] = (byte)90;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 163, (int) (byte)90);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte) (-79);
      byteArray0[3] = (byte)99;
      byteArray0[2] = (byte) (-70);
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)49, (byte) (-79), (byte) (-70), (byte)99, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertArrayEquals(new byte[] {(byte)49, (byte) (-79), (byte) (-70), (byte)99, (byte)0, (byte)0}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("daload", string1);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)49, (byte) (-79), (byte) (-70), (byte)99, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
      
      String string2 = Utility.format((byte)99, (-2121), true, 'I');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("99", string2);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string0);
      assertEquals("<init>", string0);
      
      MockFile mockFile0 = new MockFile("<init>");
      assertNotNull(mockFile0);
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("<init>", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("<init>", mockFile0.getName());
      
      String string1 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string1);
      assertEquals("<init>", string1);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)7;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)78, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Constant[] constantArray0 = null;
      BCELComparator bCELComparator0 = Method.getComparator();
      assertNotNull(bCELComparator0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "shortS1N\\T";
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = Member.PUBLIC;
      assertEquals(0, int0);
      
      byte[] byteArray0 = Utility.decode("shortS1NT", false);
      assertArrayEquals(new byte[] {(byte)115, (byte)104, (byte)111, (byte)114, (byte)116, (byte)83, (byte)49, (byte)78, (byte)84}, byteArray0);
      assertNotNull(byteArray0);
      
      ConstantMethodref constantMethodref0 = new ConstantMethodref(1696, 1696);
      assertNotNull(constantMethodref0);
      assertEquals(1696, constantMethodref0.getNameAndTypeIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals(1696, constantMethodref0.getClassIndex());
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      int int1 = 1693;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 933, 1693, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      boolean boolean0 = false;
      short short0 = Constants.LSTORE;
      assertEquals((short)55, short0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "zcK<Ch3n:na#@YhZy";
      String string0 = Utility.methodTypeToSignature("zcK<Ch3n:na#@YhZy", stringArray0);
      assertNotNull(string0);
      assertEquals("(LzcK<Ch3n:na#@YhZy;)LzcK<Ch3n:na#@YhZy;", string0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) byteArray0;
      objectArray0[1] = (Object) "zcK<Ch3n:na#@YhZy";
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      objectArray0[2] = (Object) byteArray0;
      objectArray0[3] = (Object) byteArray0;
      objectArray0[4] = (Object) "(LzcK<Ch3n:na#@YhZy;)LzcK<Ch3n:na#@YhZy;";
      String string1 = Utility.printArray(objectArray0, false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      try { 
        Utility.methodSignatureArgumentTypes("(LzcK<Ch3n:na#@YhZy;)LzcK<Ch3n:na#@YhZy;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LzcK<Ch3n:na#@YhZy;)LzcK<Ch3n:na#@YhZy;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String string0 = Utility.getSignature("<clinit>");
      assertNotNull(string0);
      assertEquals("L<clinit>;", string0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      try { 
        Utility.methodSignatureReturnType("L<clinit>;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `clinit>;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean0);
      
      try { 
        Utility.typeOfSignature(".Ta|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .Ta|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte) (-19);
      byteArray0[3] = (byte)119;
      byteArray0[5] = (byte) (-106);
      Constant[] constantArray0 = new Constant[1];
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      assertNotNull(constantDouble0);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals(0.0, constantDouble0.getBytes(), 0.01);
      
      constantArray0[0] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-19), (int) (byte) (-128));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-12), (byte) (-128), (byte)119, (byte)0, (byte) (-106)}, byteArray0);
      assertNotNull(string0);
      assertEquals(1, constantPool0.getLength());
      assertEquals("0:    nop\n1:    <illegal opcode>\n2:    ior\n3:    dneg\n4:    nop\n5:    fcmpg\n", string0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)73;
      String string0 = Utility.encode(byteArray0, true);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)73, (byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      String string1 = "p~\",/";
      boolean boolean0 = false;
      byte[] byteArray1 = Utility.decode("p~\",/", false);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)112, (byte)126, (byte)34, (byte)44, (byte)47}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      int int0 = 202;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 43, (int) (byte)73);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)126;
      byteArray0[0] = (byte)126;
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      byte byte0 = ObjectStreamConstants.TC_REFERENCE;
      assertEquals((byte)113, byte0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)126, (int) (byte)126);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      MockFile mockFile0 = new MockFile("<illegal opcode>");
      assertNotNull(mockFile0);
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("<illegal opcode>", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("<illegal opcode>", mockFile0.getName());
      
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("<illegal opcode>");
      assertNotNull(constantUtf8_0);
      assertEquals("<illegal opcode>", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string1 = "MaSg";
      try { 
        Utility.typeOfSignature("MaSg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: MaSg
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-98);
      String string0 = ".class";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "lOH58Qn");
      assertFalse(boolean0);
      
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-98);
      byteArray1[1] = (byte)103;
      byteArray1[2] = (byte)55;
      byteArray1[3] = (byte) (-98);
      byteArray1[4] = (byte) (-98);
      byteArray1[5] = (byte) (-98);
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byteArray1[6] = (byte)103;
      byteArray1[7] = (byte) (-98);
      boolean boolean2 = Utility.equals(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-98), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-98), (byte)103, (byte)55, (byte) (-98), (byte) (-98), (byte) (-98), (byte)103, (byte) (-98)}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string1 = "}u*4f!XX/MvGb9j";
      String string2 = "monitorexit";
      String string3 = Utility.replace("monitorexit", "athrow", "/Umu+tP88B");
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("monitorexit", string3);
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-98), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 0
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(4, constantPool0.getLength());
      
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      int int0 = Pattern.UNICODE_CHARACTER_CLASS;
      assertEquals(256, int0);
      
      String string1 = Constants.STATIC_INITIALIZER_NAME;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("<clinit>", string1);
      
      String string2 = Utility.replace("U}SCo(Ie@'D", "U}SCo(Ie@'D", "{3!Shm]M:X_4O6G");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("{3!Shm]M:X_4O6G", string2);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte)107;
      byteArray0[4] = (byte)107;
      byteArray0[5] = (byte)107;
      byteArray0[0] = (byte)107;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)107, (byte)107, (byte)107, (byte)107, (byte)107, (byte)107, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)107, (byte)107, (byte)107, (byte)107, (byte)107, (byte)107, (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      
      char char0 = byteSequence1.readChar();
      assertNotSame(byteSequence1, byteSequence0);
      assertArrayEquals(new byte[] {(byte)107, (byte)107, (byte)107, (byte)107, (byte)107, (byte)107, (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(2, byteSequence1.getIndex());
      assertEquals('\u6B6B', char0);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)107, (byte)107, (byte)107, (byte)107, (byte)107, (byte)107, (byte)0}, byteArray0);
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertNotNull(byteSequence2);
      assertEquals(0, byteSequence2.getIndex());
      
      String string3 = Utility.codeToString(byteSequence2, constantPool0);
      assertNotSame(byteSequence2, byteSequence1);
      assertNotSame(byteSequence2, byteSequence0);
      assertArrayEquals(new byte[] {(byte)107, (byte)107, (byte)107, (byte)107, (byte)107, (byte)107, (byte)0}, byteArray0);
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(4, constantPool0.getLength());
      assertEquals(1, byteSequence2.getIndex());
      assertEquals("dmul", string3);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "JCWA<OP}u7", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(4, byteArrayInputStream0.available());
      
      int int0 = byteArrayInputStream0.read(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(4, int0);
      
      int int1 = byteArrayInputStream0.read(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(int1 == int0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1), int1);
      
      int int2 = byteArrayInputStream0.read();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1), int2);
      
      int int3 = byteArrayInputStream0.read();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1), int3);
      
      String string0 = "D4AeTWt|M)Ti|sta";
      byte byte0 = Utility.typeOfSignature("D4AeTWt|M)Ti|sta");
      assertEquals((byte)7, byte0);
      
      try { 
        Utility.methodSignatureReturnType("MggD|B0h9QKcV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `MggD|B0h9QKcV'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte) (-111);
      byteArray0[3] = (byte) (-119);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-1170), (-499));
      assertArrayEquals(new byte[] {(byte) (-111), (byte) (-111), (byte) (-111), (byte) (-119)}, byteArray0);
      assertNotNull(string0);
      assertEquals(0, constantPool0.getLength());
      assertEquals("0:    i2b\n1:    i2b\n2:    i2b\n3:    l2f\n", string0);
      
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      byte byte0 = Utility.typeOfSignature("V");
      assertEquals((byte)12, byte0);
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      BCELComparator bCELComparator0 = Field.getComparator();
      assertNotNull(bCELComparator0);
      
      Constant.setComparator(bCELComparator0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(0, constantPool1.getLength());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-101);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 199, (-2319));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      String string0 = Utility.compactClassName("O~", false);
      assertNotNull(string0);
      assertEquals("O~", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-73), (byte) (-73)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      byteSequence0.close();
      assertArrayEquals(new byte[] {(byte) (-73), (byte) (-73)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 195, 195);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("$?p[8rwO]9R");
      assertNotNull(constantUtf8_0);
      assertEquals("$?p[8rwO]9R", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.bcel.classfile.ConstantUtf8$CACHE_HOLDER");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = constantUtf8_0.toString();
      assertNotNull(string0);
      assertEquals("$?p[8rwO]9R", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("CONSTANT_Utf8[1](\"$?p[8rwO]9R\")", string0);
      
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "$?p[8rwO]9R";
      stringArray0[1] = "$?p[8rwO]9R";
      stringArray0[2] = "$?p[8rwO]9R";
      String string1 = Utility.methodTypeToSignature("$?p[8rwO]9R", stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("([L$?p;[L$?p;[L$?p;)[L$?p;", string1);
      
      String string2 = Constants.CONSTRUCTOR_NAME;
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("<init>", string2);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string3 = Utility.classOrInterface((-15));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("interface", string3);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte) (-94);
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte)73;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-32);
      byteArray0[8] = (byte) (-115);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-94), (byte) (-33), (byte) (-94), (byte) (-94), (byte) (-66), (byte)73, (byte)0, (byte) (-32), (byte) (-115)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(4, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(4, constantPool0.getLength());
      assertEquals(4, constantPool1.getLength());
      
      String string4 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertArrayEquals(new byte[] {(byte) (-94), (byte) (-33), (byte) (-94), (byte) (-94), (byte) (-66), (byte)73, (byte)0, (byte) (-32), (byte) (-115)}, byteArray0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(4, constantPool0.getLength());
      assertEquals(4, constantPool1.getLength());
      assertEquals("if_icmpge\t\t#-8286", string4);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String string0 = "boolean";
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "^_IIpWH:O'<i#fHWL?");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "boolean");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ConstantInteger constantInteger0 = new ConstantInteger(3088);
      assertNotNull(constantInteger0);
      assertEquals(3088, constantInteger0.getBytes());
      assertEquals((byte)3, constantInteger0.getTag());
      
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      assertTrue(constantInteger1.equals((Object)constantInteger0));
      assertNotNull(constantInteger1);
      assertEquals(3088, constantInteger0.getBytes());
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals((byte)3, constantInteger1.getTag());
      assertEquals(3088, constantInteger1.getBytes());
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-97);
      byteArray0[1] = (byte)72;
      byteArray0[3] = (byte)32;
      byteArray0[5] = (byte) (-55);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 180, 196);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = "vSO-`F6shdF 3bpyS!W";
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "vSO-`F6shdF 3bpyS!W");
      assertFalse(boolean0);
      
      String string1 = "$jkgD0p8";
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$jkgD0p8");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte) (-19);
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)67;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-65), (byte) (-68), (byte) (-19), (byte) (-81), (byte) (-86), (byte)16, (byte)67}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-65), (byte) (-68), (byte) (-19), (byte) (-81), (byte) (-86), (byte)16, (byte)67}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-2607), (int) (byte)67);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -19
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = Utility.methodSignatureReturnType("IW");
      assertNotNull(string0);
      assertEquals("int", string0);
      
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(7, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte) (-49);
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte)123;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1057, (-4366));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -82
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(".~YEqOx*HP");
      assertNotNull(constantUtf8_0);
      assertEquals(".~YEqOx*HP", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)55, 691);
      assertNotNull(constantFieldref0);
      assertEquals(55, constantFieldref0.getClassIndex());
      assertEquals(691, constantFieldref0.getNameAndTypeIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(0, constantPool1.getLength());
      
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertNotNull(constantPool2);
      assertEquals(0, constantPool2.getLength());
      
      String string0 = Utility.getSignature("Y{<jUuxb1pqIW87d ");
      assertNotNull(string0);
      assertEquals("LY{<jUuxb1pqIW87d;", string0);
      
      try { 
        Utility.typeOfSignature("Y{<jUuxb1pqIW87d ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y{<jUuxb1pqIW87d 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "nNaq(??Ph");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-71);
      byteArray0[0] = (byte) (-69);
      byteArray0[4] = (byte) (-71);
      byteArray0[5] = (byte) (-71);
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string0 = File.separator;
      assertNotNull(string0);
      assertEquals("/", string0);
      
      String string1 = Constants.ILLEGAL_TYPE;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("<illegal type>", string1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 190, 464);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte byte0 = Utility.typeOfSignature("JY6L");
      assertEquals((byte)11, byte0);
      
      String string0 = Utility.classOrInterface(2055);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(0, constantPool1.getLength());
      
      String string1 = Constants.ILLEGAL_TYPE;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("<illegal type>", string1);
      
      String string2 = Utility.replace("interface", "JY6L", "JY6L");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("interface", string2);
      
      int int0 = Utility.setBit(492, (byte) (-111));
      assertEquals(131564, int0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte) (-128);
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "nd&{EqI-k");
      assertFalse(boolean0);
      
      byteArray0[3] = (byte) (-19);
      byteArray0[3] = (byte)119;
      byteArray0[5] = (byte) (-93);
      Constant[] constantArray0 = new Constant[1];
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      assertNotNull(constantDouble0);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals(0.0, constantDouble0.getBytes(), 0.01);
      
      constantArray0[0] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-19), (int) (byte) (-128));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    <illegal opcode>
         // 2:    ior
         // 3:    dneg
         // 4:    nop
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = "$>*(G,s\"I[ZE4Pa;";
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("$>*(G,s\"I[ZE4Pa;");
      assertNotNull(constantUtf8_0);
      assertEquals("$>*(G,s\"I[ZE4Pa;", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      Constant[] constantArray0 = null;
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(0, constantPool1.getLength());
      
      String string1 = Utility.getSignature("\"A");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("L\"A;", string1);
      
      byte byte0 = (byte)82;
      try { 
        Utility.typeOfSignature(";fb)~Yz!Mx%`{u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;fb)~Yz!Mx%`{u
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = Utility.fillup(">Q8/sE~f*H!9Edx+@Q", (-169), true, 'c');
      assertNotNull(string0);
      assertEquals(">Q8/sE~f*H!9Edx+@Q", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte) (-114);
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte)79;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)53, (byte)49, (byte)115, (byte)112, (byte) (-114), (byte)39, (byte)79}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertArrayEquals(new byte[] {(byte)53, (byte)49, (byte)115, (byte)112, (byte) (-114), (byte)39, (byte)79}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("saload", string1);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("$8[dd<wO]9R");
      assertNotNull(constantUtf8_0);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("$8[dd<wO]9R", constantUtf8_0.getBytes());
      
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(4, constantPool0.getLength());
      
      constantPool0.setConstantPool(constantArray0);
      assertEquals(4, constantPool0.getLength());
      
      constantPool0.setConstantPool(constantArray0);
      assertEquals(4, constantPool0.getLength());
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(4, constantPool1.getLength());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)20;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 103, 103);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 5140. Constant pool size is: 4
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      constantPool0.accept(emptyVisitor0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)69;
      constantPool0.accept(emptyVisitor0);
      assertEquals(0, constantPool0.getLength());
      
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte) (-116);
      String string0 = Utility.compactClassName("/TG", "/TG", false);
      assertNotNull(string0);
      assertEquals(".TG", string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 398, 36, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("$8[dd<wO]9R");
      assertNotNull(constantUtf8_0);
      assertEquals("$8[dd<wO]9R", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(4, constantPool0.getLength());
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(4, constantPool1.getLength());
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-56);
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-119);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-639), (int) (byte) (-119));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string0 = Utility.methodTypeToSignature("}!L!4H;J", (String[]) null);
      assertNotNull(string0);
      assertEquals("()L}!L!4H;J;", string0);
      
      String string1 = Utility.methodSignatureToString("()L}!L!4H;J;", "lcmp", "k1");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("k1 }!L!4H lcmp()", string1);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-124);
      byteArray0[0] = (byte) (-124);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel");
      boolean boolean1 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("putfield");
      assertNotNull(mockPrintWriter0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-124), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertArrayEquals(new byte[] {(byte) (-124), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(3, byteSequence0.getIndex());
      assertEquals("iinc\t\t%0\t0", string0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      try { 
        Utility.typeOfSignature("5OX7/N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5OX7/N
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)73;
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)73;
      byteArray1[1] = (byte)0;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Utility.replace("synchronized", "synchronized", "@zU<&x{AnT2/D\"!");
      assertNotNull(string0);
      assertEquals("@zU<&x{AnT2/D\"!", string0);
      
      byte[] byteArray2 = new byte[8];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte)73;
      byteArray2[5] = (byte)0;
      byteArray2[2] = (byte)73;
      byteArray2[3] = (byte) (-122);
      byte[] byteArray3 = new byte[6];
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      
      byteArray3[0] = (byte) (-122);
      byteArray0[2] = (byte)119;
      byteArray3[2] = (byte)0;
      String string1 = Utility.encode(byteArray3, true);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertArrayEquals(new byte[] {(byte) (-122), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray3);
      assertFalse(string1.equals((Object)string0));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertNotNull(string1);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
      
      String string2 = Utility.getSignature("'");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("L';", string2);
      
      try { 
        Utility.typeOfSignature("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      String string0 = "$8[dd<wO]9R";
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("$8[dd<wO]9R");
      assertNotNull(constantUtf8_0);
      assertEquals("$8[dd<wO]9R", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      constantArray0[0] = (Constant) constantUtf8_0;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)81;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)81}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string1 = Utility.convertString("vE");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("vE", string1);
      
      String string2 = Utility.codeToString(byteSequence0, constantPool0);
      assertArrayEquals(new byte[] {(byte)81}, byteArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("fastore", string2);
      
      try { 
        Utility.methodSignatureArgumentTypes("$8[dd<wO]9R", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $8[dd<wO]9R
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = null;
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "qgSgMt_(&)Sx");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)2;
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)46;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 16384, (int) (byte)2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-6);
      try { 
        Utility.typeOfSignature("==`myjRH8W|,4wl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ==`myjRH8W|,4wl
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Constant[] constantArray0 = null;
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte) (-60);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(0, constantPool1.getLength());
      
      try { 
        Utility.typeOfSignature("@ ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @ 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String string0 = ">\t";
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ">\t");
      assertFalse(boolean0);
      
      String string1 = Utility.compactClassName("Signature: ", ">\t", false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Signature: ", string1);
      
      byte byte0 = Utility.typeOfSignature("Signature: ");
      assertEquals((byte)9, byte0);
      
      String string2 = Utility.getSignature("Signature: ");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("LSignature:;", string2);
      
      Constant[] constantArray0 = new Constant[1];
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)9;
      byteArray0[5] = (byte)9;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)9, (byte)2, (byte)9, (byte)9, (byte)0, (byte)9}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      
      String string3 = Utility.codeToString(byteSequence0, constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertArrayEquals(new byte[] {(byte)9, (byte)2, (byte)9, (byte)9, (byte)0, (byte)9}, byteArray0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertEquals("lconst_0", string3);
      
      try { 
        Utility.methodSignatureReturnType("Pbe;sZE'UWz@dU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Pbe;sZE'UWz@dU'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-91);
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-91), (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string1 = "interface";
      String[] stringArray0 = new String[0];
      String string2 = Utility.methodTypeToSignature("interface", stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("()Linterface;", string2);
      
      int int0 = 180;
      ConstantInteger constantInteger0 = new ConstantInteger(180);
      assertNotNull(constantInteger0);
      assertEquals(180, constantInteger0.getBytes());
      assertEquals((byte)3, constantInteger0.getTag());
      
      Constant[] constantArray0 = new Constant[2];
      constantArray0[1] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      
      String string3 = Constants.STATIC_INITIALIZER_NAME;
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("<clinit>", string3);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ConstantDouble constantDouble0 = new ConstantDouble(180);
      assertNotNull(constantDouble0);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals(180.0, constantDouble0.getBytes(), 0.01);
      
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      assertTrue(constantDouble1.equals((Object)constantDouble0));
      assertNotNull(constantDouble1);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals(180.0, constantDouble0.getBytes(), 0.01);
      assertEquals(180.0, constantDouble1.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble1.getTag());
      
      ConstantDouble constantDouble2 = (ConstantDouble)constantDouble1.clone();
      assertNotSame(constantDouble2, constantDouble0);
      assertNotSame(constantDouble2, constantDouble1);
      assertNotSame(constantDouble0, constantDouble2);
      assertNotSame(constantDouble0, constantDouble1);
      assertNotSame(constantDouble1, constantDouble2);
      assertNotSame(constantDouble1, constantDouble0);
      assertTrue(constantDouble2.equals((Object)constantDouble0));
      assertTrue(constantDouble2.equals((Object)constantDouble1));
      assertTrue(constantDouble0.equals((Object)constantDouble1));
      assertTrue(constantDouble1.equals((Object)constantDouble0));
      assertNotNull(constantDouble2);
      assertEquals(180.0, constantDouble2.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble2.getTag());
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals(180.0, constantDouble0.getBytes(), 0.01);
      assertEquals(180.0, constantDouble1.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble1.getTag());
      
      try { 
        Utility.typeOfSignature("Ao/g]t*s8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ao/g]t*s8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string0 = "-qyM:Lp";
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte) (-111);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-111), 1786);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    i2b
         // 1:    ifgt\t\t#-25198
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-116);
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte) (-116);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-88);
      byteArray0[6] = (byte)60;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-116), (byte)0, (byte) (-73), (byte) (-116), (byte)1, (byte) (-88), (byte)60, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertArrayEquals(new byte[] {(byte) (-116), (byte)0, (byte) (-73), (byte) (-116), (byte)1, (byte) (-88), (byte)60, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("f2l", string0);
      
      String string1 = Utility.printArray((Object[]) null, true, false);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("monitorexit");
      assertNotNull(constantUtf8_0);
      assertEquals("monitorexit", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      constantUtf8_0.accept(emptyVisitor0);
      assertEquals("monitorexit", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      byte byte0 = (byte)18;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)18;
      short short0 = Constants.DSTORE_2;
      assertEquals((short)73, short0);
      
      try { 
        Utility.typeOfSignature("Wy2S[Vz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Wy2S[Vz
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "}!L!4H;J";
      stringArray0[1] = "FULL";
      String string0 = Utility.methodTypeToSignature("FULL", stringArray0);
      assertNotNull(string0);
      assertEquals("(L}!L!4H;J;LFULL;)LFULL;", string0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(L}!L!4H;J;LFULL;)LFULL;", "r_yZ:", "java.lang.0:    nop\n1:    nop\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `;LFULL;)LFULL;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = "[]";
      // Undeclared exception!
      try { 
        Utility.signatureToString("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      String string1 = Utility.classOrInterface(55);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("class", string1);
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      
      constantPool0.accept(emptyVisitor0);
      assertNotSame(constantPool0, constantPool1);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertEquals(0, constantPool0.getLength());
      
      boolean boolean0 = true;
      byte byte0 = (byte) (-48);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte) (-48);
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte)55;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)30, (int) (byte)30, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = Utility.classOrInterface(30);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      byte[] byteArray0 = Utility.decode("class", false);
      assertArrayEquals(new byte[] {(byte)99, (byte)108, (byte)97, (byte)115, (byte)115}, byteArray0);
      assertNotNull(byteArray0);
      
      short short0 = Constants.MAJOR_1_2;
      assertEquals((short)46, short0);
      
      byte[] byteArray1 = Utility.decode("DUqGH8jKr.&x#PYw ", false);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      String string1 = Utility.classOrInterface(30);
      assertNotNull(string1);
      assertEquals("class", string1);
      
      String string2 = Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-60), (int) (short)46);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("0:    fstore_1\n1:    castore\n2:    lrem\n3:    dstore_0\n4:    dstore_1\n5:    fstore\t\t%106\n7:    astore_0\n8:    frem\n9:    iaload\n10:   dload_0\n11:   ishl\n12:   fload_1\n13:   lastore\n14:   dup\n15:   dneg\n16:   lload_2\n", string2);
      
      try { 
        Utility.typeOfSignature("?q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte) (-71);
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-71));
      assertNotNull(constantInteger0);
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals((-71), constantInteger0.getBytes());
      
      String string0 = constantInteger0.toString();
      assertNotNull(string0);
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals((-71), constantInteger0.getBytes());
      assertEquals("CONSTANT_Integer[3](bytes = -71)", string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "long";
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      assertNotNull(bCELComparator0);
      
      Constant.setComparator(bCELComparator0);
      stringArray0[1] = "i=$tan$eof";
      stringArray0[2] = "{vZw+SEa+WmPjp ";
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-71), (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant.setComparator(bCELComparator0);
      byte byte0 = Utility.typeOfSignature("Tl,AJ/7='5,X(^Dv");
      assertEquals((byte)14, byte0);
      
      String string1 = Utility.compactClassName("char", "aH", false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("char", string1);
      
      short short0 = Utility.searchOpcode("java.util.zip.");
      assertEquals((short) (-1), short0);
      
      try { 
        Utility.methodSignatureReturnType("impdep2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `impdep2'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = "KM*N1#lPV'$9!p";
      try { 
        Utility.typeOfSignature("KM*N1#lPV'$9!p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: KM*N1#lPV'$9!p
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-77));
      assertNotNull(constantInteger0);
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals((-77), constantInteger0.getBytes());
      
      short short0 = Utility.searchOpcode("F0(1");
      assertEquals((short) (-1), short0);
      
      String string0 = Utility.signatureToString("F0(1");
      assertNotNull(string0);
      assertEquals("float", string0);
      
      String string1 = Constants.CONSTRUCTOR_NAME;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("<init>", string1);
      
      String string2 = Utility.methodSignatureReturnType("F0(1");
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("float", string2);
      
      boolean boolean0 = false;
      String string3 = Utility.printArray((Object[]) null, false);
      assertNull(string3);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte) (-77);
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      byteArray0[4] = (byte) (-77);
      byteArray0[5] = (byte) (-77);
      byteArray0[7] = (byte) (-77);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-77), (byte) (-77), (byte) (-77), (byte) (-77), (byte) (-77), (byte) (-77), (byte)0, (byte) (-77), (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      byte[] byteArray1 = Utility.decode("F0(1", false);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)70, (byte)48, (byte)40, (byte)49}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 103, (int) (byte) (-77), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-107);
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte) (-107);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-107), (int) (byte) (-107));
      assertArrayEquals(new byte[] {(byte) (-107), (byte)0, (byte) (-107), (byte) (-107)}, byteArray0);
      assertNotNull(string0);
      assertEquals(0, constantPool0.getLength());
      assertEquals("0:    fcmpl\n1:    nop\n2:    fcmpl\n3:    fcmpl\n", string0);
      
      // Undeclared exception!
      try { 
        constantPool0.getConstantString((byte) (-107), (byte)65);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("(8v<w9R");
      assertNotNull(constantUtf8_0);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("(8v<w9R", constantUtf8_0.getBytes());
      
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(4, constantPool0.getLength());
      
      ConstantUtf8.printStats();
      byte[] byteArray0 = new byte[14];
      byteArray0[4] = (byte)18;
      String string0 = File.separator;
      assertNotNull(string0);
      assertEquals("/", string0);
      
      String string1 = Constants.ILLEGAL_TYPE;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("<illegal type>", string1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)18, 165);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String string0 = "g@>03";
      byte[] byteArray0 = Utility.decode("g@>03", false);
      assertArrayEquals(new byte[] {(byte)103, (byte)64, (byte)62, (byte)48, (byte)51}, byteArray0);
      assertNotNull(byteArray0);
      
      String string1 = "-!Xx!y#)f";
      try { 
        Utility.typeOfSignature("-!Xx!y#)f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -!Xx!y#)f
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)17;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Linstanceof;V");
      assertFalse(boolean0);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertNotNull(byteSequence2);
      assertEquals(0, byteSequence2.getIndex());
      
      String string0 = Utility.codeToString(byteSequence2, constantPool0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteSequence2, byteSequence0);
      assertNotSame(byteSequence2, byteSequence1);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertNotNull(string0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(3, byteSequence2.getIndex());
      assertEquals("sipush\t\t0", string0);
      
      int int0 = byteSequence2.readUnsignedByte();
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteSequence2, byteSequence0);
      assertNotSame(byteSequence2, byteSequence1);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertEquals(4, byteSequence2.getIndex());
      assertEquals(0, int0);
      
      try { 
        byteSequence2.readByte();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)21;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-102), (byte)111, (byte)105, (byte)21}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertArrayEquals(new byte[] {(byte) (-102), (byte)111, (byte)105, (byte)21}, byteArray0);
      assertNotNull(string0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals("ifne\t\t#28521", string0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("XwPkDz]!mmD8GQZ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XwPkDz]!mmD8GQZ'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ConstantInteger constantInteger0 = new ConstantInteger(97);
      assertNotNull(constantInteger0);
      assertEquals(97, constantInteger0.getBytes());
      assertEquals((byte)3, constantInteger0.getTag());
      
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      assertTrue(constantInteger1.equals((Object)constantInteger0));
      assertNotNull(constantInteger1);
      assertEquals(97, constantInteger0.getBytes());
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals(97, constantInteger1.getBytes());
      assertEquals((byte)3, constantInteger1.getTag());
      
      ConstantInteger constantInteger2 = new ConstantInteger(constantInteger1);
      assertTrue(constantInteger0.equals((Object)constantInteger1));
      assertTrue(constantInteger1.equals((Object)constantInteger0));
      assertTrue(constantInteger2.equals((Object)constantInteger1));
      assertTrue(constantInteger2.equals((Object)constantInteger0));
      assertNotNull(constantInteger2);
      assertEquals(97, constantInteger0.getBytes());
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals(97, constantInteger1.getBytes());
      assertEquals((byte)3, constantInteger1.getTag());
      assertEquals(97, constantInteger2.getBytes());
      assertEquals((byte)3, constantInteger2.getTag());
      
      ConstantInteger constantInteger3 = (ConstantInteger)constantInteger0.clone();
      assertNotSame(constantInteger0, constantInteger1);
      assertNotSame(constantInteger0, constantInteger2);
      assertNotSame(constantInteger0, constantInteger3);
      assertNotSame(constantInteger3, constantInteger0);
      assertNotSame(constantInteger3, constantInteger1);
      assertNotSame(constantInteger3, constantInteger2);
      assertTrue(constantInteger0.equals((Object)constantInteger1));
      assertTrue(constantInteger0.equals((Object)constantInteger2));
      assertTrue(constantInteger3.equals((Object)constantInteger0));
      assertTrue(constantInteger3.equals((Object)constantInteger2));
      assertTrue(constantInteger3.equals((Object)constantInteger1));
      assertNotNull(constantInteger3);
      assertEquals(97, constantInteger0.getBytes());
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals((byte)3, constantInteger3.getTag());
      assertEquals(97, constantInteger3.getBytes());
      
      constantInteger1.setBytes(1271);
      assertNotSame(constantInteger0, constantInteger1);
      assertNotSame(constantInteger0, constantInteger2);
      assertNotSame(constantInteger0, constantInteger3);
      assertNotSame(constantInteger1, constantInteger3);
      assertNotSame(constantInteger1, constantInteger0);
      assertNotSame(constantInteger1, constantInteger2);
      assertTrue(constantInteger0.equals((Object)constantInteger3));
      assertFalse(constantInteger0.equals((Object)constantInteger1));
      assertTrue(constantInteger0.equals((Object)constantInteger2));
      assertFalse(constantInteger1.equals((Object)constantInteger3));
      assertFalse(constantInteger1.equals((Object)constantInteger0));
      assertFalse(constantInteger1.equals((Object)constantInteger2));
      assertEquals(97, constantInteger0.getBytes());
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals((byte)3, constantInteger1.getTag());
      assertEquals(1271, constantInteger1.getBytes());
      
      ConstantInteger constantInteger4 = (ConstantInteger)constantInteger2.copy();
      assertNotSame(constantInteger0, constantInteger1);
      assertNotSame(constantInteger0, constantInteger4);
      assertNotSame(constantInteger0, constantInteger2);
      assertNotSame(constantInteger0, constantInteger3);
      assertNotSame(constantInteger1, constantInteger4);
      assertNotSame(constantInteger1, constantInteger3);
      assertNotSame(constantInteger1, constantInteger0);
      assertNotSame(constantInteger1, constantInteger2);
      assertNotSame(constantInteger2, constantInteger0);
      assertNotSame(constantInteger2, constantInteger4);
      assertNotSame(constantInteger2, constantInteger1);
      assertNotSame(constantInteger2, constantInteger3);
      assertNotSame(constantInteger4, constantInteger3);
      assertNotSame(constantInteger4, constantInteger2);
      assertNotSame(constantInteger4, constantInteger1);
      assertNotSame(constantInteger4, constantInteger0);
      assertTrue(constantInteger0.equals((Object)constantInteger3));
      assertFalse(constantInteger0.equals((Object)constantInteger1));
      assertTrue(constantInteger0.equals((Object)constantInteger2));
      assertFalse(constantInteger1.equals((Object)constantInteger3));
      assertFalse(constantInteger1.equals((Object)constantInteger0));
      assertFalse(constantInteger1.equals((Object)constantInteger2));
      assertTrue(constantInteger2.equals((Object)constantInteger0));
      assertFalse(constantInteger2.equals((Object)constantInteger1));
      assertTrue(constantInteger2.equals((Object)constantInteger3));
      assertTrue(constantInteger4.equals((Object)constantInteger0));
      assertTrue(constantInteger4.equals((Object)constantInteger2));
      assertTrue(constantInteger4.equals((Object)constantInteger3));
      assertFalse(constantInteger4.equals((Object)constantInteger1));
      assertNotNull(constantInteger4);
      assertEquals(97, constantInteger0.getBytes());
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals((byte)3, constantInteger1.getTag());
      assertEquals(1271, constantInteger1.getBytes());
      assertEquals(97, constantInteger2.getBytes());
      assertEquals((byte)3, constantInteger2.getTag());
      assertEquals((byte)3, constantInteger4.getTag());
      assertEquals(97, constantInteger4.getBytes());
      
      String string0 = constantInteger0.toString();
      assertNotSame(constantInteger0, constantInteger1);
      assertNotSame(constantInteger0, constantInteger4);
      assertNotSame(constantInteger0, constantInteger2);
      assertNotSame(constantInteger0, constantInteger3);
      assertTrue(constantInteger0.equals((Object)constantInteger4));
      assertTrue(constantInteger0.equals((Object)constantInteger3));
      assertFalse(constantInteger0.equals((Object)constantInteger1));
      assertTrue(constantInteger0.equals((Object)constantInteger2));
      assertNotNull(string0);
      assertEquals(97, constantInteger0.getBytes());
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals("CONSTANT_Integer[3](bytes = 97)", string0);
      
      String string1 = constantPool0.constantToString((Constant) constantInteger4);
      assertNotSame(constantInteger0, constantInteger1);
      assertNotSame(constantInteger0, constantInteger4);
      assertNotSame(constantInteger0, constantInteger2);
      assertNotSame(constantInteger0, constantInteger3);
      assertNotSame(constantInteger1, constantInteger4);
      assertNotSame(constantInteger1, constantInteger3);
      assertNotSame(constantInteger1, constantInteger0);
      assertNotSame(constantInteger1, constantInteger2);
      assertNotSame(constantInteger2, constantInteger0);
      assertNotSame(constantInteger2, constantInteger4);
      assertNotSame(constantInteger2, constantInteger1);
      assertNotSame(constantInteger2, constantInteger3);
      assertNotSame(constantInteger4, constantInteger3);
      assertNotSame(constantInteger4, constantInteger2);
      assertNotSame(constantInteger4, constantInteger1);
      assertNotSame(constantInteger4, constantInteger0);
      assertTrue(constantInteger0.equals((Object)constantInteger4));
      assertTrue(constantInteger0.equals((Object)constantInteger3));
      assertFalse(constantInteger0.equals((Object)constantInteger1));
      assertTrue(constantInteger0.equals((Object)constantInteger2));
      assertFalse(constantInteger1.equals((Object)constantInteger4));
      assertFalse(constantInteger1.equals((Object)constantInteger3));
      assertFalse(constantInteger1.equals((Object)constantInteger0));
      assertFalse(constantInteger1.equals((Object)constantInteger2));
      assertTrue(constantInteger2.equals((Object)constantInteger0));
      assertFalse(constantInteger2.equals((Object)constantInteger1));
      assertTrue(constantInteger2.equals((Object)constantInteger3));
      assertTrue(constantInteger2.equals((Object)constantInteger4));
      assertTrue(constantInteger4.equals((Object)constantInteger0));
      assertTrue(constantInteger4.equals((Object)constantInteger2));
      assertTrue(constantInteger4.equals((Object)constantInteger3));
      assertFalse(constantInteger4.equals((Object)constantInteger1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(0, constantPool0.getLength());
      assertEquals(97, constantInteger0.getBytes());
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals((byte)3, constantInteger1.getTag());
      assertEquals(1271, constantInteger1.getBytes());
      assertEquals(97, constantInteger2.getBytes());
      assertEquals((byte)3, constantInteger2.getTag());
      assertEquals((byte)3, constantInteger4.getTag());
      assertEquals(97, constantInteger4.getBytes());
      assertEquals("97", string1);
      
      try { 
        Utility.typeOfSignature("97");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 97
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      MockFile mockFile0 = new MockFile("<illegal type>");
      assertNotNull(mockFile0);
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("<illegal type>", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals("<illegal type>", mockFile0.getName());
      
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("<illegal type>");
      assertNotNull(constantUtf8_0);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("<illegal type>", constantUtf8_0.getBytes());
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)117;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)117, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)117, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)117, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertNotNull(byteSequence2);
      assertEquals(0, byteSequence2.getIndex());
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertNotSame(byteSequence0, byteSequence1);
      assertNotSame(byteSequence0, byteSequence2);
      assertArrayEquals(new byte[] {(byte)117, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertFalse(byteSequence0.equals((Object)byteSequence2));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("lneg", string1);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        pipedOutputStream0.connect(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-111);
      byteArray0[2] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-111), (byte)0, (byte) (-73), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertArrayEquals(new byte[] {(byte) (-111), (byte)0, (byte) (-73), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("i2b", string0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("SB6-3W+", "+PS>D", "impdep2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: SB6-3W+
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte)22;
      String string1 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte) (-74), (byte) (-74), (byte)22, (byte)0, (byte)0}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("$b6$b6$W$A$A", string1);
      
      try { 
        Utility.typeOfSignature("!/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      short short0 = Constants.DSTORE_2;
      assertEquals((short)73, short0);
      
      int int0 = 168;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-104);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(0, constantPool1.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (short)73, (int) (byte) (-104));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String string0 = Utility.classOrInterface(30);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      Constant[] constantArray0 = new Constant[8];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(8, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(8, constantPool0.getLength());
      assertEquals(8, constantPool1.getLength());
      
      constantPool0.accept(emptyVisitor0);
      assertNotSame(constantPool0, constantPool1);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertEquals(8, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-76);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-76), (int) (byte) (-76), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Constant pool at index 0 is null.
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte) (-14);
      byteArray0[1] = (byte) (-14);
      byteArray0[5] = (byte) (-106);
      String[] stringArray0 = new String[5];
      stringArray0[4] = stringArray0[0];
      byte byte0 = Utility.typeOfSignature("V");
      assertEquals((byte)12, byte0);
      
      try { 
        Utility.methodSignatureReturnType("Null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Null'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)52;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 5375, (int) (byte)52, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "aconst_nul");
      assertFalse(boolean0);
      
      try { 
        Utility.typeOfSignature("%, \"qAnG}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %, \"qAnG}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(4, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-67);
      byte byte0 = (byte) (-119);
      byteArray0[1] = (byte) (-67);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-67), (int) (byte) (-119));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "0{Pxt");
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("1CRrJt,f~^1J\"_gM;6");
      assertNotNull(constantUtf8_0);
      assertEquals("1CRrJt,f~^1J\"_gM;6", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      assertTrue(constantUtf8_1.equals((Object)constantUtf8_0));
      assertNotNull(constantUtf8_1);
      assertEquals("1CRrJt,f~^1J\"_gM;6", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals((byte)1, constantUtf8_1.getTag());
      assertEquals("1CRrJt,f~^1J\"_gM;6", constantUtf8_1.getBytes());
      
      ConstantUtf8 constantUtf8_2 = (ConstantUtf8)constantUtf8_0.copy();
      assertNotSame(constantUtf8_0, constantUtf8_1);
      assertNotSame(constantUtf8_0, constantUtf8_2);
      assertNotSame(constantUtf8_2, constantUtf8_0);
      assertNotSame(constantUtf8_2, constantUtf8_1);
      assertTrue(constantUtf8_0.equals((Object)constantUtf8_1));
      assertTrue(constantUtf8_2.equals((Object)constantUtf8_0));
      assertTrue(constantUtf8_2.equals((Object)constantUtf8_1));
      assertNotNull(constantUtf8_2);
      assertEquals("1CRrJt,f~^1J\"_gM;6", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("1CRrJt,f~^1J\"_gM;6", constantUtf8_2.getBytes());
      assertEquals((byte)1, constantUtf8_2.getTag());
      
      BCELComparator bCELComparator0 = Field.getComparator();
      assertNotNull(bCELComparator0);
      
      Constant.setComparator(bCELComparator0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(0, constantPool1.getLength());
      
      ConstantUtf8 constantUtf8_3 = ConstantUtf8.getCachedInstance("){:`h~r");
      assertNotSame(constantUtf8_3, constantUtf8_0);
      assertNotSame(constantUtf8_3, constantUtf8_1);
      assertNotSame(constantUtf8_3, constantUtf8_2);
      assertNotNull(constantUtf8_3);
      assertEquals("){:`h~r", constantUtf8_3.getBytes());
      assertEquals((byte)1, constantUtf8_3.getTag());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[4] = (byte) (-105);
      String string0 = Utility.codeToString(byteArray0, constantPool1, (int) (byte)0, (-1638), false);
      assertNotSame(constantPool1, constantPool0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte) (-105), (byte)0, (byte)0}, byteArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(string0);
      assertEquals(0, constantPool1.getLength());
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    dcmpl\n5:    nop\n6:    nop\n", string0);
      
      String string1 = Utility.compactClassName("1CRrJt,f~^1J\"_gM;6", "iFRW$)|qOC7:e^{<%*x", false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("1CRrJt,f~^1J\"_gM;6", string1);
      
      String string2 = Utility.getSignature(">>");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("L>>;", string2);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean0);
      
      try { 
        Utility.typeOfSignature("Unreachable default case reached!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Unreachable default case reached!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte byte0 = (byte)22;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string0 = "8L)<{";
      try { 
        Utility.typeOfSignature("*4N'}<\"P~I'5g.lG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4N'}<\"P~I'5g.lG
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "void";
      try { 
        Utility.methodTypeToSignature("void", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      byte byte0 = Utility.typeOfSignature("V");
      assertEquals((byte)12, byte0);
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      String string0 = Utility.compactClassName("java.lang.NW5N|CjN2.bj`-");
      assertNotNull(string0);
      assertEquals("java.lang.NW5N|CjN2.bj`-", string0);
      
      String string1 = Utility.classOrInterface(76);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("class", string1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte)12;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-91), 76);
      assertArrayEquals(new byte[] {(byte)12, (byte) (-56), (byte) (-91), (byte) (-72), (byte)12}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(76, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)12, (byte) (-56), (byte) (-91), (byte) (-72), (byte)12}, byteArray0);
      assertNotNull(dataInputStream0);
      assertEquals(76, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        DataInputStream.readUTF((DataInput) dataInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("(8v<w9R");
      assertNotNull(constantUtf8_0);
      assertEquals("(8v<w9R", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(4, constantPool0.getLength());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "(8v<w9R";
      stringArray0[1] = "(8v<w9R";
      String string0 = Utility.methodTypeToSignature("FULL", stringArray0);
      assertNotNull(string0);
      assertEquals("(L(8v<w9R;L(8v<w9R;)LFULL;", string0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(8v<w9R", "}!L!4H;J", "FULL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `8v<w9R'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("$8[dd<wO]9R");
      assertNotNull(constantUtf8_0);
      assertEquals("$8[dd<wO]9R", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(4, constantPool0.getLength());
      
      constantPool0.setConstantPool(constantArray0);
      assertEquals(4, constantPool0.getLength());
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)20;
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)20;
      byteArray1[1] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertArrayEquals(new byte[] {(byte)20, (byte)20}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      assertNotNull(constantDouble0);
      assertEquals(0.0, constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      
      ConstantDouble constantDouble1 = new ConstantDouble(23);
      assertFalse(constantDouble1.equals((Object)constantDouble0));
      assertNotNull(constantDouble1);
      assertEquals(23.0, constantDouble1.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble1.getTag());
      
      String string0 = Utility.replace("EeBhRk{zQpVO", "EeBhRk{zQpVO", "EeBhRk{zQpVO");
      assertNotNull(string0);
      assertEquals("EeBhRk{zQpVO", string0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      
      String string1 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertNotSame(byteSequence1, byteSequence0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(string1);
      assertEquals(3, byteSequence1.getIndex());
      assertEquals(4, constantPool0.getLength());
      assertEquals("ldc2_w\t\t$8[dd<wO]9R (0)", string1);
      
      String string2 = ";E";
      try { 
        Utility.typeOfSignature(";E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;E
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-109));
      assertNotNull(constantInteger0);
      assertEquals((-109), constantInteger0.getBytes());
      assertEquals((byte)3, constantInteger0.getTag());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-124);
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte) (-124);
      String string0 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte) (-124), (byte)0, (byte) (-124), (byte) (-124), (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals("$84$A$84$84$A$A", string0);
      
      boolean boolean1 = true;
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-75);
      byteArray1[1] = (byte)62;
      byteArray1[2] = (byte)62;
      byteArray1[3] = (byte)65;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte)65, 190);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-79);
      byteArray0[0] = (byte)99;
      byte byte0 = (byte) (-109);
      byteArray0[2] = (byte) (-109);
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)99, (int) (byte) (-109));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "FULL";
      stringArray0[1] = "FULL";
      String string0 = Utility.methodTypeToSignature("FULL", stringArray0);
      assertNotNull(string0);
      assertEquals("(LFULL;LFULL;)LFULL;", string0);
      
      String string1 = Utility.methodSignatureToString("(LFULL;LFULL;)LFULL;", "r_yZ:", "FULL");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("FULL FULL r_yZ:(FULL arg1, FULL arg2)", string1);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("$8[dd<wO]9R");
      assertNotNull(constantUtf8_0);
      assertEquals("$8[dd<wO]9R", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(4, constantPool0.getLength());
      
      String string0 = "PbN?;BRk";
      ConstantUtf8 constantUtf8_1 = ConstantUtf8.getInstance("PbN?;BRk");
      assertNotSame(constantUtf8_1, constantUtf8_0);
      assertFalse(constantUtf8_1.equals((Object)constantUtf8_0));
      assertNotNull(constantUtf8_1);
      assertEquals("PbN?;BRk", constantUtf8_1.getBytes());
      assertEquals((byte)1, constantUtf8_1.getTag());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(0, constantPool1.getLength());
      
      Constant[] constantArray1 = new Constant[4];
      assertFalse(constantArray1.equals((Object)constantArray0));
      
      constantArray1[0] = (Constant) constantUtf8_0;
      constantArray1[1] = (Constant) constantUtf8_0;
      constantArray1[2] = (Constant) constantUtf8_0;
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      ConstantPool constantPool2 = new ConstantPool(constantArray1);
      assertFalse(constantArray1.equals((Object)constantArray0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertNotNull(constantPool2);
      assertEquals(4, constantPool2.getLength());
      
      String string1 = constantPool2.toString();
      assertNotSame(constantArray1, constantArray0);
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      assertFalse(constantArray1.equals((Object)constantArray0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(4, constantPool2.getLength());
      assertEquals("1)CONSTANT_Utf8[1](\"$8[dd<wO]9R\")\n2)CONSTANT_Utf8[1](\"$8[dd<wO]9R\")\n3)null\n", string1);
      
      constantPool2.setConstantPool((Constant[]) null);
      assertNotSame(constantArray1, constantArray0);
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      assertFalse(constantArray1.equals((Object)constantArray0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertEquals(0, constantPool2.getLength());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-114);
      int int0 = Utility.clearBit(359, (byte) (-79));
      assertEquals(359, int0);
      
      String string2 = Utility.codeToString(byteArray0, constantPool1, (-3125), (int) (byte) (-114));
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool1, constantPool0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-114), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(string2);
      assertEquals(0, constantPool1.getLength());
      assertEquals("0:    nop\n1:    d2i\n2:    nop\n3:    nop\n4:    nop\n", string2);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(")Y", "1jO!=", "athrow");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )Y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-71);
      byteArray0[2] = (byte) (-71);
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-71));
      assertNotNull(constantInteger0);
      assertEquals((-71), constantInteger0.getBytes());
      assertEquals((byte)3, constantInteger0.getTag());
      
      String string0 = constantInteger0.toString();
      assertNotNull(string0);
      assertEquals((-71), constantInteger0.getBytes());
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals("CONSTANT_Integer[3](bytes = -71)", string0);
      
      BCELComparator bCELComparator0 = Method.getComparator();
      assertNotNull(bCELComparator0);
      
      Constant.setComparator(bCELComparator0);
      String string1 = constantInteger0.toString();
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals((-71), constantInteger0.getBytes());
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals("CONSTANT_Integer[3](bytes = -71)", string1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string2 = constantInteger0.toString();
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals((-71), constantInteger0.getBytes());
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals("CONSTANT_Integer[3](bytes = -71)", string2);
      
      try { 
        Utility.typeOfSignature("7Hi*E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7Hi*E
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      String string0 = "$8[dd<wO]9R";
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("$8[dd<wO]9R");
      assertNotNull(constantUtf8_0);
      assertEquals("$8[dd<wO]9R", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      ConstantUtf8 constantUtf8_1 = (ConstantUtf8)constantUtf8_0.clone();
      assertNotSame(constantUtf8_0, constantUtf8_1);
      assertNotSame(constantUtf8_1, constantUtf8_0);
      assertTrue(constantUtf8_1.equals((Object)constantUtf8_0));
      assertNotNull(constantUtf8_1);
      assertEquals("$8[dd<wO]9R", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals((byte)1, constantUtf8_1.getTag());
      assertEquals("$8[dd<wO]9R", constantUtf8_1.getBytes());
      
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(4, constantPool0.getLength());
      
      boolean boolean0 = false;
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      constantPool0.setConstantPool(constantArray0);
      assertEquals(4, constantPool0.getLength());
      
      EvoSuiteFile evoSuiteFile0 = null;
      constantPool0.setConstantPool(constantArray0);
      assertEquals(4, constantPool0.getLength());
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(0, constantPool1.getLength());
      
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertNotNull(constantPool2);
      assertEquals(0, constantPool2.getLength());
      
      constantPool2.setConstantPool(constantArray0);
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertEquals(4, constantPool2.getLength());
      
      String string1 = "rl#pZeF";
      try { 
        Utility.typeOfSignature("G1CHB+@ot,)aSlq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G1CHB+@ot,)aSlq
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-88);
      byteArray0[2] = (byte) (-73);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 68, (-1724164647));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      byteSequence1.close();
      assertNotSame(byteSequence1, byteSequence0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(0, byteSequence1.getIndex());
      
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null);
      assertNotSame(byteSequence1, byteSequence0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(string0);
      assertEquals(12, byteSequence1.getIndex());
      assertEquals("lookupswitch\tdefault = 0, npairs = 0 ()", string0);
      
      int int0 = byteSequence0.skipBytes((-1661));
      assertNotSame(byteSequence0, byteSequence1);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("d*nSvI@9.", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `d*nSvI@9.'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(0, constantPool1.getLength());
      
      constantPool0.setConstantPool((Constant[]) null);
      assertNotSame(constantPool0, constantPool1);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte) (-115);
      int int0 = 261;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 261, (-875), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("$8[dd<wO]9R");
      assertNotNull(constantUtf8_0);
      assertEquals("$8[dd<wO]9R", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(4, constantPool0.getLength());
      
      constantPool0.setConstantPool(constantArray0);
      assertEquals(4, constantPool0.getLength());
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)20;
      EmptyVisitor emptyVisitor1 = new EmptyVisitor();
      assertFalse(emptyVisitor1.equals((Object)emptyVisitor0));
      assertNotNull(emptyVisitor1);
      
      constantPool0.accept(emptyVisitor1);
      assertNotSame(emptyVisitor1, emptyVisitor0);
      assertFalse(emptyVisitor1.equals((Object)emptyVisitor0));
      assertEquals(4, constantPool0.getLength());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Utility.printArray((Object[]) constantArray0, true, false);
      assertNotNull(string0);
      assertEquals("{CONSTANT_Utf8[1](\"$8[dd<wO]9R\"), null, null, null}", string0);
      
      byte[] byteArray1 = Utility.decode("$8", false);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      String string1 = Utility.methodSignatureReturnType("CZbrvadUx!");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("char", string1);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte)22;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)22, (byte)22, (byte)22, (byte)22, (byte) (-81), (byte)22}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      byteSequence0.mark((byte)22);
      assertArrayEquals(new byte[] {(byte)22, (byte)22, (byte)22, (byte)22, (byte) (-81), (byte)22}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertArrayEquals(new byte[] {(byte)22, (byte)22, (byte)22, (byte)22, (byte) (-81), (byte)22}, byteArray0);
      assertNotNull(string0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(2, byteSequence0.getIndex());
      assertEquals("lload\t\t%22", string0);
      
      int int0 = (-3165);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)22, (-3165));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(4, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      assertNotNull(bCELComparator0);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(4, constantPool1.getLength());
      
      String string0 = "h}:Z#";
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(", ");
      assertNotNull(constantUtf8_0);
      assertEquals(", ", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      String string1 = constantPool0.constantToString((Constant) constantUtf8_0);
      assertNotSame(constantPool0, constantPool1);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(4, constantPool0.getLength());
      assertEquals(", ", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals(", ", string1);
      
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-62);
      byteArray1[1] = (byte) (-62);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool1, 379, (int) (byte) (-62));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)28;
      byteArray0[0] = (byte)28;
      int int0 = Utility.clearBit((byte)28, (byte)0);
      assertEquals(28, int0);
      
      String string0 = "s(oO7";
      String string1 = Utility.compactClassName("s(oO7", false);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("s(oO7", string1);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)28, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)28, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)28, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertNotNull(byteSequence2);
      assertEquals(0, byteSequence2.getIndex());
      
      String string2 = Utility.codeToString(byteSequence1, constantPool0);
      assertNotSame(byteSequence1, byteSequence0);
      assertNotSame(byteSequence1, byteSequence2);
      assertArrayEquals(new byte[] {(byte)28, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(byteSequence1.equals((Object)byteSequence2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence1.getIndex());
      assertEquals("iload_2", string2);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("iload_2", "invokeinterface", "s(oO7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: iload_2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(4, constantPool0.getLength());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\t\t#");
      assertFalse(boolean0);
      
      String string0 = Utility.replace("{3!Shm]M:X_4O6G", "{3!Shm]M:X_4O6G", "tu");
      assertNotNull(string0);
      assertEquals("tu", string0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = Utility.decode("{3!Shm]M:X_4O6G", false);
      assertNotNull(byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 16375, 16375);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      String string0 = "$8[dd<wO]9R";
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("$8[dd<wO]9R");
      assertNotNull(constantUtf8_0);
      assertEquals("$8[dd<wO]9R", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(4, constantPool0.getLength());
      
      constantPool0.setConstantPool(constantArray0);
      assertEquals(4, constantPool0.getLength());
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      ConstantUtf8.clearStats();
      ConstantUtf8 constantUtf8_1 = ConstantUtf8.getInstance("$8[dd<wO]9R");
      assertNotSame(constantUtf8_1, constantUtf8_0);
      assertTrue(constantUtf8_1.equals((Object)constantUtf8_0));
      assertNotNull(constantUtf8_1);
      assertEquals((byte)1, constantUtf8_1.getTag());
      assertEquals("$8[dd<wO]9R", constantUtf8_1.getBytes());
      
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)20;
      EmptyVisitor emptyVisitor1 = new EmptyVisitor();
      assertFalse(emptyVisitor1.equals((Object)emptyVisitor0));
      assertNotNull(emptyVisitor1);
      
      constantUtf8_0.accept(emptyVisitor0);
      assertNotSame(constantUtf8_0, constantUtf8_1);
      assertNotSame(emptyVisitor0, emptyVisitor1);
      assertTrue(constantUtf8_0.equals((Object)constantUtf8_1));
      assertFalse(emptyVisitor0.equals((Object)emptyVisitor1));
      assertEquals("$8[dd<wO]9R", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      constantPool0.accept(emptyVisitor1);
      assertNotSame(emptyVisitor1, emptyVisitor0);
      assertFalse(emptyVisitor1.equals((Object)emptyVisitor0));
      assertEquals(4, constantPool0.getLength());
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)20, 89, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string0 = "java.lang.Lputfield;V";
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("java.lang.Lputfield;V");
      assertNotNull(constantUtf8_0);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("java.lang.Lputfield;V", constantUtf8_0.getBytes());
      
      ConstantUtf8 constantUtf8_1 = (ConstantUtf8)constantUtf8_0.copy();
      assertNotSame(constantUtf8_0, constantUtf8_1);
      assertNotSame(constantUtf8_1, constantUtf8_0);
      assertTrue(constantUtf8_1.equals((Object)constantUtf8_0));
      assertNotNull(constantUtf8_1);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("java.lang.Lputfield;V", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_1.getTag());
      assertEquals("java.lang.Lputfield;V", constantUtf8_1.getBytes());
      
      ConstantUtf8.printStats();
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte) (-100);
      byteArray0[5] = (byte)18;
      byteArray0[6] = (byte)18;
      byteArray0[7] = (byte) (-60);
      byteArray0[8] = (byte) (-122);
      int int0 = 2470;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 196, 2470);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      byte byte0 = (byte)22;
      String string0 = "0:";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "0:");
      assertFalse(boolean0);
      
      String string1 = "\\";
      String string2 = "E7L?TVX3_0JgLpda G";
      try { 
        Utility.typeOfSignature("E7L?TVX3_0JgLpda G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E7L?TVX3_0JgLpda G
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      constantPool0.setConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Z=xC}FKtv";
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = Utility.convertString("30Z,RYomtbt8'_Yx");
      assertNotNull(string0);
      assertEquals("30Z,RYomtbt8\\'_Yx", string0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean0);
      
      String string1 = Utility.methodSignatureReturnType("Z=xC}FKtv");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("boolean", string1);
      
      String string2 = Utility.printArray((Object[]) constantArray0, true);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("{null}", string2);
      
      byte[] byteArray0 = new byte[3];
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "{null}");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte)81;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-8), (byte) (-4), (byte)81}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string3 = Utility.codeToString(byteSequence0, constantPool0);
      assertArrayEquals(new byte[] {(byte) (-8), (byte) (-4), (byte)81}, byteArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(1, constantPool0.getLength());
      assertEquals("<illegal opcode>", string3);
  }
}
