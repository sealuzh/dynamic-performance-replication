/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 04:20:29 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.SymbolTable;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.ExtraProcessor;
import com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider;
import com.alibaba.fastjson.parser.deserializer.FieldDeserializer;
import com.alibaba.fastjson.parser.deserializer.FieldTypeResolver;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.JobAttributes;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.geom.Rectangle2D;
import java.io.CharArrayReader;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.math.BigInteger;
import java.net.HttpCookie;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.ChoiceFormat;
import java.text.Collator;
import java.text.DateFormat;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.RuleBasedCollator;
import java.time.Instant;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.MinguoDate;
import java.time.temporal.TemporalAccessor;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.IdentityHashMap;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.NavigableSet;
import java.util.Properties;
import java.util.Stack;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultJSONParser_ESTest extends DefaultJSONParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.JSONObject");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(gridBagConstraints0, jSONScanner0, parserConfig0);
      defaultJSONParser0.getInput();
      Class<GridBagConstraints> class0 = GridBagConstraints.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0, (Collection) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : com.alibaba.fastjson.JSONObject
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Ssk-Oux_2", parserConfig0, (-246));
      Class<Timestamp> class0 = Timestamp.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 3, json : Ssk-Oux_2
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Ssk<Qux2", parserConfig0, (-246));
      Class<Short> class0 = Short.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but ident, pos 3, json : Ssk<Qux2
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Ssk<Qux2", parserConfig0, (-246));
      List<ExtraProcessor> list0 = defaultJSONParser0.getExtraProcessors();
      assertNotNull(list0);
      
      defaultJSONParser0.getInput();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'Z';
      charArray0[1] = 'k';
      charArray0[2] = 'R';
      charArray0[3] = 'o';
      charArray0[4] = '';
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 0, parserConfig0, 0);
      Class<ChoiceFormat> class0 = ChoiceFormat.class;
      ArrayList<GridBagConstraints> arrayList0 = new ArrayList<GridBagConstraints>();
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      arrayList0.add(gridBagConstraints0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Class<?>) class0, (Collection) arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but EOF, pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF, pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Tne0SL~tq");
      IdentityHashMap<BigInteger, BreakIterator> identityHashMap0 = new IdentityHashMap<BigInteger, BreakIterator>();
      identityHashMap0.remove((Object) defaultJSONParser0);
      Class<Float> class0 = Float.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) identityHashMap0, (Object) identityHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual ident, pos 6, json : Tne0SL~tq
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",vG@>\"l#XWuO6S", parserConfig0);
      defaultJSONParser0.getInput();
      // Undeclared exception!
      try { 
        defaultJSONParser0.popContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("syntax error, expect {, actual ");
      // Undeclared exception!
      try { 
        defaultJSONParser0.popContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Tne0SL~op", parserConfig0);
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) parserConfig0, (Object) parserConfig0);
      assertNotNull(parseContext0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '8';
      charArray0[1] = 'F';
      charArray0[2] = 'C';
      charArray0[3] = 't';
      charArray0[4] = '!';
      charArray0[5] = 'G';
      charArray0[6] = '_';
      int int0 = 102;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 102);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      defaultJSONParser0.getObject("{/f|h>[rCP");
      ParseContext parseContext0 = defaultJSONParser0.context;
      ParseContext parseContext1 = defaultJSONParser0.setContext((ParseContext) null, (Object) classLoader1, (Object) classLoader0);
      parseContext1.toString();
      defaultJSONParser0.setContext(parseContext1, (Object) parseContext1, (Object) parserConfig0);
      Collection<JobAttributes> collection0 = null;
      // Undeclared exception!
      try { 
        Time.valueOf("(CLjava/lang/String;D)V");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.Time", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("]");
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) "]", (Object) null);
      defaultJSONParser0.setContext(parseContext0, (Object) "]", (Object) null);
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) "]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual ], pos 0, fieldName ]
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("w", 78);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      defaultJSONParser0.getObject("fastjson.parser.autoTypeSupport");
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("K");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setClassAssertionStatus("com.alibaba.fastjson.serializer.AwtCodec", true);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      int int0 = (-462);
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(60, (-462));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("PS4PVnHTv;F0j");
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(331, (-984));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("unterminated json string, ");
      defaultJSONParser0.parseKey();
      // Undeclared exception!
      try { 
        defaultJSONParser0.acceptType("unterminated json string, ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - s, info : pos 14, json : unterminated json string, 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0, 0);
      defaultJSONParser0.parseKey();
      DefaultJSONParser defaultJSONParser1 = null;
      try {
        defaultJSONParser1 = new DefaultJSONParser("fastjson.parser.deny", parserConfig0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0, 20);
      Class<Timestamp> class0 = Timestamp.class;
      defaultJSONParser0.parseObject(class0);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("|d,E14Nma%zF^=<", parserConfig0);
      List<ExtraTypeProvider> list0 = defaultJSONParser0.getExtraTypeProviders();
      assertNotNull(list0);
      
      List<ExtraProcessor> list1 = defaultJSONParser0.getExtraProcessors();
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertNotNull(list1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("expect ':' at ");
      defaultJSONParser0.getExtraTypeProviders();
      defaultJSONParser0.getResolveStatus();
      // Undeclared exception!
      try { 
        defaultJSONParser0.getLastResolveTask();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("create instance error", parserConfig0);
      int int0 = 3106;
      JSON.DEFFAULT_DATE_FORMAT = "create instance error";
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(44, 0, 3106, 61, 61, 1235);
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) mockGregorianCalendar0, (Object) parserConfig0);
      parseContext0.toString();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : create instance error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 26);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      // Undeclared exception!
      parserConfig0.getDeserializer((Class<?>) class0, (Type) class0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("isEmpty");
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(25);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect ., actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("K]p:1|J5zwR&n");
      // Undeclared exception!
      try { 
        defaultJSONParser0.close();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("parse number key error", parserConfig0, (-12));
      defaultJSONParser0.close();
      // Undeclared exception!
      try { 
        defaultJSONParser0.acceptType("5iPnE|0[W>:R(d_&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - a, info : pos 1, json : parse number key error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(")");
      defaultJSONParser0.getDateFormat();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : )
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Ssk", parserConfig0, 154);
      IdentityHashMap<MockHijrahDate, MockMinguoDate> identityHashMap0 = new IdentityHashMap<MockHijrahDate, MockMinguoDate>();
      defaultJSONParser0.checkMapResolve(identityHashMap0, parserConfig0);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("isEnabled");
      Map<BreakIterator, MockMinguoDate> map0 = null;
      defaultJSONParser0.setResolveStatus(0);
      defaultJSONParser0.checkMapResolve((Map) null, (Object) null);
      JSONArray jSONArray0 = new JSONArray(15);
      ArrayDeque<Long> arrayDeque0 = new ArrayDeque<Long>();
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(arrayDeque0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray2.getTimestamp(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("listContext", 39);
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      Feature feature0 = Feature.NonStringKeyAsString;
      defaultJSONParser0.config(feature0, false);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      parserConfig0.setDefaultClassLoader(aSMClassLoader0);
      defaultJSONParser0.getFieldTypeResolver();
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", pos ", parserConfig0);
      int int0 = 1235;
      int int1 = 26;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 26, 1, 3106, 938, 938);
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) "Ssk-Oux_2", (Object) "Ssk-Oux_2");
      parseContext0.toString();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : , pos 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{s%rI");
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, ", name ");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = "{48J@x^%UBx#y1gv#";
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{48J@x^%UBx#y1gv#", parserConfig0, 1514);
      Class<Method> class0 = Method.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {48J@x^%UBx#y1gv#
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      Class<Long> class0 = Long.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual EOF, pos 0, fieldName long
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("NaN");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("unzip");
      JSONObject jSONObject0 = new JSONObject(2);
      Dimension dimension0 = new Dimension(989, 78);
      Dimension dimension1 = new Dimension(dimension0);
      JSONObject jSONObject1 = jSONObject0.fluentPut("unzip", dimension1);
      // Undeclared exception!
      try { 
        MapDeserializer.parseMap(defaultJSONParser1, (Map<String, Object>) jSONObject1, (Type) null, (Object) defaultJSONParser1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual ident, pos 0, fieldName com.alibaba.fastjson.parser.DefaultJSONParser@4
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      List<ExtraProcessor> list0 = defaultJSONParser0.getExtraProcessors();
      assertNotNull(list0);
      
      ParserConfig.getGlobalInstance();
      Class<Timestamp> class0 = Timestamp.class;
      defaultJSONParser0.parseObject(class0);
      defaultJSONParser0.getSymbolTable();
      Feature feature0 = Feature.DisableCircularReferenceDetect;
      defaultJSONParser0.isEnabled(feature0);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("]hH", parserConfig0, 26);
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual ], pos 0, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("scanFieldString", parserConfig0, (-246));
      TreeSet<DateFormatSymbols> treeSet0 = new TreeSet<DateFormatSymbols>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) treeSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Tne0SL~op");
      defaultJSONParser0.getContext();
      defaultJSONParser0.getExtraProcessors();
      ParserConfig parserConfig0 = defaultJSONParser0.getConfig();
      assertFalse(parserConfig0.fieldBased);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      char[] charArray0 = new char[5];
      charArray0[0] = 'P';
      charArray0[1] = '+';
      charArray0[2] = '+';
      charArray0[3] = 'l';
      charArray0[4] = '<';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 4);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName java.lang.Object@638ae9a2
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("cOw|7EM.1 +~", parserConfig0, (-32));
      defaultJSONParser0.getExtraProcessors();
      defaultJSONParser0.getObject("cOw|7EM.1 +~");
      DateFormat dateFormat0 = DateFormat.getInstance();
      defaultJSONParser0.setDateFomrat(dateFormat0);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = "NaN";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("NaN");
      defaultJSONParser0.parse((Object) "NaN");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      // Undeclared exception!
      try { 
        defaultJSONParser1.getLastResolveTask();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{48J@x^%UBx#y1gv#", parserConfig0, 1514);
      defaultJSONParser0.getLexer();
      System.setCurrentTimeMillis(1);
      defaultJSONParser0.close();
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      defaultJSONParser0.getFieldTypeResolver();
      defaultJSONParser0.getContext();
      List<DefaultJSONParser.ResolveTask> list0 = defaultJSONParser0.getResolveTaskList();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{vn\"");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual \"
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = ", pos ";
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", pos ", parserConfig0);
      defaultJSONParser0.setConfig(parserConfig0);
      defaultJSONParser0.getDateFormat();
      IdentityHashMap<MockMinguoDate, NumberFormat> identityHashMap0 = new IdentityHashMap<MockMinguoDate, NumberFormat>();
      IdentityHashMap<String, Field> identityHashMap1 = new IdentityHashMap<String, Field>();
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      ParserConfig.parserAllFieldToCache(class0, identityHashMap1);
      MapDeserializer mapDeserializer0 = new MapDeserializer();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) identityHashMap1, (Object) identityHashMap1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual \u001A
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      IdentityHashMap<BigInteger, BreakIterator> identityHashMap0 = new IdentityHashMap<BigInteger, BreakIterator>();
      Class<Float> class0 = Float.TYPE;
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("unzip", parserConfig0);
      ParseContext parseContext0 = defaultJSONParser0.context;
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, "fastjson.parser.autoTypeSupport");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      defaultJSONParser0.resolveReference("fastjson.parser.deny");
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      parserConfig0.setDefaultClassLoader((ClassLoader) null);
      defaultJSONParser0.getFieldTypeResolver();
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        defaultJSONParser0.handleResovleTask((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = "#@";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("#@");
      int int0 = 3828;
      defaultJSONParser0.getContext();
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, "#@");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      // Undeclared exception!
      try { 
        defaultJSONParser0.handleResovleTask(mockThaiBuddhistDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("syntax error, expect [, actual ", parserConfig0);
      defaultJSONParser0.getExtraTypeProviders();
      defaultJSONParser0.getExtraProcessors();
      defaultJSONParser0.setDateFormat("syntax error, expect [, actual ");
      BeanContext beanContext0 = defaultJSONParser0.lastBeanContext;
      defaultJSONParser0.lastBeanContext = null;
      defaultJSONParser0.setContext((ParseContext) null);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      IdentityHashMap<BigInteger, BreakIterator> identityHashMap0 = new IdentityHashMap<BigInteger, BreakIterator>();
      Class<Float> class0 = Float.TYPE;
      ParserConfig parserConfig0 = new ParserConfig(false);
      parserConfig0.checkAutoType("klNiL4$", class0, (-429));
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("unzip", parserConfig0);
      ParseContext parseContext0 = defaultJSONParser0.context;
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, "fastjson.parser.autoTypeSupport");
      defaultJSONParser0.getResolveTaskList();
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      defaultJSONParser0.resolveReference("fastjson.parser.deny");
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      parserConfig0.setDefaultClassLoader((ClassLoader) null);
      defaultJSONParser0.getFieldTypeResolver();
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        defaultJSONParser0.handleResovleTask((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ParserConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig();
      int int0 = 24;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("R0AXQ7|*", parserConfig0, 24);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("]hH", parserConfig0, 26);
      Class<Timestamp> class0 = Timestamp.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ]hH
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("\"-9223372036854775808\"");
      defaultJSONParser0.getExtraProcessors();
      TreeMap<Rectangle, Byte> treeMap0 = new TreeMap<Rectangle, Byte>();
      treeMap0.descendingKeySet();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(2830.54484, 2, 1582.4885, 1582.4885);
      defaultJSONParser0.checkMapResolve(treeMap0, "");
      defaultJSONParser0.getInput();
      defaultJSONParser0.getResolveTaskList();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual string, pos 22, json : \"-9223372036854775808\"
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("\"-9223372036854775808\"");
      defaultJSONParser0.getExtraProcessors();
      TreeMap<Rectangle, Byte> treeMap0 = new TreeMap<Rectangle, Byte>();
      NavigableSet<Rectangle> navigableSet0 = new TreeSet<Rectangle>();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(2830.54484, 2, 2830.54484, 2830.54484);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("\"-9223372036854775808\"");
      Class<Timestamp> class0 = Timestamp.class;
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.sql.Timestamp
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("q");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) fileSystemHandling0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      IdentityHashMap<BigInteger, BreakIterator> identityHashMap0 = new IdentityHashMap<BigInteger, BreakIterator>();
      Class<Float> class0 = Float.TYPE;
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("unzip", parserConfig0);
      ParseContext parseContext0 = defaultJSONParser0.context;
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, "fastjson.parser.autoTypeSupport");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      defaultJSONParser0.getLastResolveTask();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0, 0.0, (-1380.2047517524686), 3804.7052222);
      String string0 = ParserConfig.DENY_PROPERTY;
      List<DefaultJSONParser.ResolveTask> list0 = defaultJSONParser0.getResolveTaskList();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONScanner jSONScanner0 = new JSONScanner("");
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      Boolean boolean0 = new Boolean("setter not found, class ");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$fastjson.parser.autoTypeSupport", 6);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      defaultJSONParser0.getDateFomartPattern();
      Feature feature0 = Feature.DisableCircularReferenceDetect;
      defaultJSONParser0.config(feature0, false);
      assertEquals(6, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{");
      defaultJSONParser0.getExtraTypeProviders();
      // Undeclared exception!
      try { 
        JSON.parseObject(".O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : .O
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(" :LZ^i,gd<7sD");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json :  :LZ^i,gd<7sD
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      char[] charArray0 = new char[7];
      charArray0[0] = 'j';
      charArray0[1] = 'P';
      charArray0[2] = '-';
      charArray0[3] = '+';
      charArray0[4] = 'i';
      charArray0[5] = '}';
      charArray0[6] = '@';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArrayReader0, 832);
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      defaultJSONParser0.getContext();
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, "$ref");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      defaultJSONParser0.resolveReference("$ref");
      parserConfig0.setDefaultClassLoader((ClassLoader) null);
      defaultJSONParser0.getFieldTypeResolver();
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      Properties properties0 = new Properties();
      defaultJSONParser0.handleResovleTask((Object) null);
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      TreeMap<BufferCapabilities, Collator> treeMap0 = new TreeMap<BufferCapabilities, Collator>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) treeMap0, (Object) parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      DefaultJSONParser defaultJSONParser2 = new DefaultJSONParser("{");
      ArrayDeque<Timestamp> arrayDeque0 = new ArrayDeque<Timestamp>();
      defaultJSONParser2.checkListResolve(arrayDeque0);
      // Undeclared exception!
      try { 
        defaultJSONParser2.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      DefaultJSONParser defaultJSONParser2 = new DefaultJSONParser("{");
      // Undeclared exception!
      try { 
        defaultJSONParser1.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 0, json : {
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(")");
      defaultJSONParser0.getDateFormat();
      defaultJSONParser0.getDateFormat();
      ParserConfig parserConfig0 = new ParserConfig(false);
      Class<Byte> class0 = Byte.class;
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType(">?xDs`pgfB\"_", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. >?xDs`pgfB\"_
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[S");
      defaultJSONParser0.getDateFormat();
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) propertyProcessable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : [S
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[J");
      defaultJSONParser0.getDateFormat();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : [J
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      ParserConfig parserConfig1 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("+9o7h4S$B\"THnD2y", parserConfig0);
      Object object0 = defaultJSONParser0.parse();
      assertEquals(9, object0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[");
      JSONObject jSONObject0 = new JSONObject();
      Class<Feature> class0 = Feature.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0, (Collection) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 0, json : [
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      classLoader0.setClassAssertionStatus("", false);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[S", parserConfig0, 8233);
      LinkedList<Time> linkedList0 = new LinkedList<Time>();
      TreeSet<TimeZone> treeSet0 = new TreeSet<TimeZone>();
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Class<?>) class0, (Collection) treeSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual ident, pos 1, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(I)Ljava/lang/Enum;");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : (I)Ljava/lang/Enum;
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      classLoader0.setClassAssertionStatus("", false);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      char[] charArray0 = new char[4];
      charArray0[0] = '4';
      charArray0[1] = '.';
      charArray0[2] = '9';
      charArray0[3] = 'c';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 76, (-1936));
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      defaultJSONParser0.getDateFormat();
      Object object0 = defaultJSONParser0.parse();
      assertEquals(4.9, object0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", pos ", 3);
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[S");
      defaultJSONParser0.getDateFormat();
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) mockDateFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : [S
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{");
      DateFormat dateFormat0 = defaultJSONParser0.getDateFormat();
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) dateFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : \u001Apos 1, json : {
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      char[] charArray0 = new char[7];
      charArray0[0] = 'j';
      charArray0[1] = 'P';
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{vn\"");
      defaultJSONParser0.getDateFormat();
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual \"
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("u");
      Byte byte0 = new Byte((byte)18);
      ParseContext parseContext0 = defaultJSONParser0.setContext((ParseContext) null, (Object) null, (Object) byte0);
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, "u");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      defaultJSONParser0.getExtraTypeProviders();
      defaultJSONParser0.popContext();
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("NaN", parserConfig0);
      Object object0 = new Object();
      ParseContext parseContext0 = defaultJSONParser0.setContext(object0, (Object) parserConfig0);
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, "$ref");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      defaultJSONParser0.resolveReference("$$ref");
      ParserConfig parserConfig1 = ParserConfig.getGlobalInstance();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      aSMClassLoader0.getParent();
      parserConfig1.setDefaultClassLoader((ClassLoader) null);
      defaultJSONParser0.getFieldTypeResolver();
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      defaultJSONParser0.handleResovleTask("$ref");
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$ref", parserConfig0);
      Object object0 = new Object();
      ParseContext parseContext0 = defaultJSONParser0.setContext(object0, (Object) parserConfig0);
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, "$ref");
      defaultJSONParser0.resolveReference("$$ref");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseExtra(object0, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - r, info : pos 1, json : $ref
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("TODO : ");
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      defaultJSONParser0.setResolveStatus(819);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but ident, pos 4, json : TODO : 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-94));
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.parser.DefaultJSONParser", 1710);
      Byte.toUnsignedInt((byte) (-115));
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(byte0, jSONScanner0, parserConfig0);
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : com.alibaba.fastjson.parser.DefaultJSONParser
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{vn\"", parserConfig0, 14);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((PropertyProcessable) null, (Object) "{vn\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual \"
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{vn\"");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) "{vn\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \", info : pos 3, json : {vn\"
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{vn\"");
      LinkedHashSet<RuleBasedCollator> linkedHashSet0 = new LinkedHashSet<RuleBasedCollator>();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) decimalFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \", info : pos 3, json : {vn\"
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("TODO : ");
      Time time0 = new Time(0L);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseExtra(time0, "yntax err");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 0, json : TODO : 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("TODO : ");
      // Undeclared exception!
      try { 
        defaultJSONParser0.acceptType("TODO : ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}(S6gVV1OAEz`^+B1");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("}(S6gVV1OAEz`^+B1");
      Class<TimeZone> class0 = TimeZone.class;
      defaultJSONParser0.parseObject(class0);
      // Undeclared exception!
      try { 
        defaultJSONParser1.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : }(S6gVV1OAEz`^+B1
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(Ljava/lang/String;)");
      JSON.DEFAULT_TYPE_KEY = "Wuqr[>";
      defaultJSONParser0.getExtraTypeProviders();
      List<ExtraTypeProvider> list0 = defaultJSONParser0.getExtraTypeProviders();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      classLoader0.setClassAssertionStatus("", true);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[S", parserConfig0, 8233);
      LinkedList<Time> linkedList0 = new LinkedList<Time>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : [S
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[S");
      defaultJSONParser0.getDateFormat();
      JSON.DEFAULT_TYPE_KEY = "[S";
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : [S
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("TODO : ");
      defaultJSONParser0.getObject("TODO : ");
      defaultJSONParser0.getExtraTypeProviders();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseExtra("TODO : ", "TODO : ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 0, json : TODO : 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("\"N,7J,^\"eh\"i%r:Z");
      Object object0 = defaultJSONParser0.parse();
      assertEquals("N,7J,^", object0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("TODO :6 ");
      defaultJSONParser0.parseExtra("TODO :6 ", "/ KH{| R0~nMHD+nb$,");
      // Undeclared exception!
      try { 
        defaultJSONParser0.acceptType("}(S6gVOAEz`^+B1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 0, json : TODO :6 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[3~w3IPmV~XM0h:%");
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 3, json : [3~w3IPmV~XM0h:%
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{9\"");
      ArrayList<RenderingHints> arrayList0 = new ArrayList<RenderingHints>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parse number key errorpos 2, json : {9\"
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[J");
      JSON.parseObject("");
      boolean boolean0 = new Boolean("@type");
      Type[] typeArray0 = new Type[1];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : [J
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[)@0/!+=gx%O]PS?B");
      Type[] typeArray0 = new Type[3];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : [)@0/!+=gx%O]PS?B
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[");
      JSONObject jSONObject0 = new JSONObject();
      Type[] typeArray0 = new Type[1];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 0, json : [
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[)@0/!+=gx%O]PS?B");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((PropertyProcessable) null, (Object) "{vn\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : [)@0/!+=gx%O]PS?B
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = "{vn\"";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{vn\"");
      ParserConfig parserConfig0 = new ParserConfig(false);
      defaultJSONParser0.setConfig(parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) "{vn\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \", info : pos 3, json : {vn\"
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{");
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) properties0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 1, json : {
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";Ljava/lang/Object;Ljava/lang/String;)Z");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ;Ljava/lang/Object;Ljava/lang/String;)Z
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$ref", parserConfig0);
      Object object0 = new Object();
      ParseContext parseContext0 = defaultJSONParser0.setContext(object0, (Object) parserConfig0);
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, "$ref");
      LinkedHashMap<HttpCookie, JobAttributes> linkedHashMap0 = new LinkedHashMap<HttpCookie, JobAttributes>();
      Long long0 = new Long(0);
      ResolveFieldDeserializer resolveFieldDeserializer0 = new ResolveFieldDeserializer(linkedHashMap0, long0);
      defaultJSONParser_ResolveTask0.fieldDeserializer = (FieldDeserializer) resolveFieldDeserializer0;
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      defaultJSONParser0.resolveReference("$$ref");
      defaultJSONParser0.fieldTypeResolver = null;
      ParserConfig.getGlobalInstance();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      defaultJSONParser0.handleResovleTask("$ref");
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"ref\":\"$\"}");
      defaultJSONParser0.parse();
      defaultJSONParser0.setDateFormat("|");
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[");
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed jsonArray
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$ref", parserConfig0);
      Object object0 = new Object();
      ParseContext parseContext0 = defaultJSONParser0.setContext(object0, (Object) parserConfig0);
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, "$ref");
      LinkedHashMap<HttpCookie, JobAttributes> linkedHashMap0 = new LinkedHashMap<HttpCookie, JobAttributes>();
      Long long0 = new Long(0);
      ResolveFieldDeserializer resolveFieldDeserializer0 = new ResolveFieldDeserializer(linkedHashMap0, long0);
      defaultJSONParser_ResolveTask0.fieldDeserializer = (FieldDeserializer) resolveFieldDeserializer0;
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      defaultJSONParser0.resolveReference("$$ref");
      ParserConfig.getGlobalInstance();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$ANK1");
      defaultJSONParser0.handleResovleTask(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", posy");
      DateFormatSymbols.getInstance();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 6, json : , posy
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{%rI");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : %pos 1, json : {%rI
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }
}
