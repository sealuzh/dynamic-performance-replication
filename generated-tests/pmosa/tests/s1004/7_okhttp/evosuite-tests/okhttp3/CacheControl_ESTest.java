/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 02:24:58 GMT 2018
 */

package okhttp3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import okhttp3.CacheControl;
import okhttp3.Headers;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CacheControl_ESTest extends CacheControl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noStore();
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.onlyIfCached();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.maxAge(346, timeUnit0);
      CacheControl cacheControl0 = new CacheControl(cacheControl_Builder3);
      cacheControl_Builder3.build();
      cacheControl0.toString();
      cacheControl0.toString();
      cacheControl_Builder0.maxStale(0, timeUnit0);
      String string0 = cacheControl0.toString();
      assertNotNull(string0);
      assertEquals("no-store, max-age=20760, only-if-cached", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.removeAll("`5Amn>%Y(uybl!CPg");
      Headers headers0 = new Headers(headers_Builder1);
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      String string0 = cacheControl0.toString();
      assertEquals("", string0);
      
      int int0 = cacheControl0.maxAgeSeconds();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      cacheControl_Builder0.noTransform();
      // Undeclared exception!
      try { 
        cacheControl_Builder0.maxAge((-227), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxAge < 0: -227
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.maxAge(2917, timeUnit0);
      CacheControl cacheControl0 = cacheControl_Builder1.build();
      int int0 = cacheControl0.maxAgeSeconds();
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.isPrivate());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.isPublic());
      assertEquals(252028800, int0);
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.mustRevalidate());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.onlyIfCached();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.maxAge(0, timeUnit0);
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.noStore();
      CacheControl.Builder cacheControl_Builder4 = cacheControl_Builder3.noTransform();
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      CacheControl.Builder cacheControl_Builder5 = cacheControl_Builder4.minFresh(0, timeUnit1);
      assertSame(cacheControl_Builder4, cacheControl_Builder5);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      System.setCurrentTimeMillis(1000000000L);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      // Undeclared exception!
      try { 
        cacheControl_Builder0.minFresh((-1302), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minFresh < 0: -1302
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noStore();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.maxStale(0, timeUnit0);
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.onlyIfCached();
      CacheControl cacheControl0 = cacheControl_Builder3.build();
      cacheControl0.FORCE_NETWORK.headerValue = "";
      String string0 = cacheControl0.toString();
      assertNotNull(string0);
      assertEquals("no-store, max-stale=0, only-if-cached", string0);
      
      int int0 = cacheControl0.maxStaleSeconds();
      assertEquals(0, int0);
      
      cacheControl_Builder2.minFresh(3608, timeUnit0);
      TimeUnit timeUnit1 = TimeUnit.SECONDS;
      cacheControl_Builder0.minFresh(0, timeUnit1);
      cacheControl_Builder2.maxAge(0, timeUnit0);
      CacheControl.Builder cacheControl_Builder4 = cacheControl_Builder1.maxAge(654, timeUnit0);
      CacheControl.Builder cacheControl_Builder5 = cacheControl_Builder4.onlyIfCached();
      int int1 = cacheControl0.sMaxAgeSeconds();
      assertEquals((-1), int1);
      
      TimeUnit timeUnit2 = TimeUnit.NANOSECONDS;
      CacheControl.Builder cacheControl_Builder6 = cacheControl_Builder5.maxStale(31, timeUnit2);
      cacheControl_Builder6.noTransform();
      cacheControl0.onlyIfCached();
      assertEquals(0, cacheControl0.maxStaleSeconds());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noCache();
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.noStore();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.maxStale(0, timeUnit0);
      CacheControl.Builder cacheControl_Builder4 = cacheControl_Builder3.onlyIfCached();
      CacheControl.Builder cacheControl_Builder5 = cacheControl_Builder4.maxAge(249, timeUnit0);
      // Undeclared exception!
      try { 
        cacheControl_Builder5.maxAge((-2568), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxAge < 0: -2568
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.maxStale(1573, timeUnit0);
      TimeUnit timeUnit1 = TimeUnit.HOURS;
      cacheControl_Builder1.minFresh(1210, timeUnit1);
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.noStore();
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.onlyIfCached();
      CacheControl cacheControl0 = cacheControl_Builder3.build();
      cacheControl_Builder3.noCache();
      cacheControl0.FORCE_NETWORK.toString();
      cacheControl0.FORCE_CACHE.toString();
      cacheControl_Builder2.noTransform();
      cacheControl0.FORCE_CACHE.headerValue = "y>_Ry2!m";
      cacheControl0.maxStaleSeconds();
      cacheControl0.FORCE_NETWORK.toString();
      cacheControl_Builder0.noCache();
      cacheControl0.isPublic();
      cacheControl0.maxAgeSeconds();
      CacheControl.Builder cacheControl_Builder4 = cacheControl_Builder3.noCache();
      TimeUnit timeUnit2 = TimeUnit.DAYS;
      // Undeclared exception!
      try { 
        cacheControl_Builder4.minFresh((-1), timeUnit2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minFresh < 0: -1
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      cacheControl0.mustRevalidate();
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.maxAge(20, timeUnit0);
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.maxStale(0, timeUnit0);
      cacheControl_Builder1.onlyIfCached();
      cacheControl_Builder2.noTransform();
      cacheControl_Builder2.noTransform();
      cacheControl0.noStore();
      cacheControl0.noTransform();
      cacheControl0.maxStaleSeconds();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "D8-9E+p,y";
      stringArray0[1] = "name is empty";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "Unexpected char %#04x at %d in %s value: %s";
      stringArray0[5] = "";
      stringArray0[6] = "H2@kk793w";
      stringArray0[7] = "";
      stringArray0[8] = "";
      // Undeclared exception!
      try { 
        Headers.of(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected alternating header names and values
         //
         verifyException("okhttp3.Headers", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>(hashMap0);
      hashMap1.put("no-cache", "no-cache");
      Headers headers0 = Headers.of((Map<String, String>) hashMap1);
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      cacheControl0.FORCE_NETWORK.toString();
      cacheControl0.sMaxAgeSeconds();
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noTransform();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.maxStale(Integer.MAX_VALUE, timeUnit0);
      cacheControl0.FORCE_NETWORK.headerValue = "";
      TimeUnit timeUnit1 = TimeUnit.HOURS;
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.maxAge(0, timeUnit1);
      cacheControl_Builder3.noTransform();
      cacheControl_Builder3.maxStale(493, timeUnit0);
      CacheControl.Builder cacheControl_Builder4 = cacheControl_Builder3.noStore();
      cacheControl_Builder4.onlyIfCached();
      cacheControl1.mustRevalidate();
      cacheControl1.noCache();
      cacheControl0.noStore();
      String string0 = cacheControl0.toString();
      assertEquals("y>_Ry2!m", string0);
      assertNotNull(string0);
      
      int int0 = cacheControl1.maxStaleSeconds();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      headers_Builder0.set("a)DkM>*!}.aG4+g)", "a)DkM>*!}.aG4+g)");
      Headers headers0 = headers_Builder0.build();
      headers0.newBuilder();
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      int int0 = cacheControl0.maxStaleSeconds();
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.onlyIfCached());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.noTransform());
      assertEquals((-1), int0);
      assertFalse(cacheControl0.noCache());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.noStore());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      cacheControl0.toString();
      cacheControl0.headerValue = "name is empty";
      cacheControl0.FORCE_CACHE.toString();
      cacheControl0.FORCE_NETWORK.toString();
      cacheControl0.FORCE_NETWORK.toString();
      cacheControl0.FORCE_CACHE.headerValue = "name is empty";
      cacheControl0.FORCE_CACHE.headerValue = "";
      cacheControl0.sMaxAgeSeconds();
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noStore();
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.noStore();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      headers0.values("name is empty");
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      CacheControl cacheControl2 = CacheControl.parse(headers0);
      CacheControl.parse(headers0);
      cacheControl2.FORCE_NETWORK.toString();
      cacheControl2.toString();
      cacheControl1.sMaxAgeSeconds();
      cacheControl0.noCache();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      // Undeclared exception!
      try { 
        cacheControl_Builder2.maxStale((-1), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxStale < 0: -1
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.set("*V", "*V");
      Headers headers0 = new Headers(headers_Builder1);
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      cacheControl0.isPrivate();
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.maxStale(0, timeUnit0);
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.noStore();
      TimeUnit timeUnit1 = TimeUnit.MINUTES;
      // Undeclared exception!
      try { 
        cacheControl_Builder2.minFresh((-1055), timeUnit1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minFresh < 0: -1055
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.add("cache-control", "[sie=0]");
      headers_Builder1.removeAll("`5Amn>%Q(uybl!CPg");
      Headers headers0 = new Headers(headers_Builder0);
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      boolean boolean0 = cacheControl0.noTransform();
      assertFalse(cacheControl0.noStore());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(boolean0);
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.onlyIfCached());
      assertFalse(cacheControl0.noCache());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.add("cache-control", "`5Amn>%Y(uybl!CPg");
      headers_Builder1.add("_U5;N`b0<%&=KPisw", "cache-control");
      Headers headers0 = headers_Builder1.build();
      headers_Builder1.removeAll("6f");
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      cacheControl0.FORCE_NETWORK.toString();
      boolean boolean0 = cacheControl0.isPrivate();
      assertFalse(boolean0);
      
      int int0 = cacheControl0.maxAgeSeconds();
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.onlyIfCached());
      assertFalse(cacheControl0.isPublic());
      assertEquals((-1), int0);
      assertFalse(cacheControl0.noStore());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.noTransform());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.add("cache-control", "`5Amn>%Y(uybl!CPg");
      headers_Builder1.add("cache-control", "private, ");
      headers_Builder0.removeAll("must-revalidate, ");
      Headers headers0 = new Headers(headers_Builder1);
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      cacheControl0.toString();
      cacheControl0.maxAgeSeconds();
      cacheControl0.minFreshSeconds();
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.maxAge(3503, timeUnit0);
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.noTransform();
      TimeUnit timeUnit1 = TimeUnit.MINUTES;
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.minFresh(3503, timeUnit1);
      // Undeclared exception!
      try { 
        cacheControl_Builder3.maxStale((-1970238438), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxStale < 0: -1970238438
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.add("cache-control", "`5Amn>%Q(uybl!CPg");
      Headers.Builder headers_Builder2 = headers_Builder1.add("cache-control", "[size=0]");
      headers_Builder2.removeAll("`5Amn>%Q(uybl!CPg");
      Headers headers0 = new Headers(headers_Builder2);
      headers_Builder0.build();
      headers_Builder0.removeAll("[size=0]");
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      String string0 = cacheControl0.toString();
      assertEquals("", string0);
      
      boolean boolean0 = cacheControl0.noTransform();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.add("cache-control", "[size=");
      Headers headers0 = headers_Builder0.build();
      headers_Builder1.removeAll("min-fresh");
      headers_Builder1.removeAll("[size=");
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      boolean boolean0 = cacheControl0.noTransform();
      boolean boolean1 = cacheControl0.noCache();
      assertTrue(boolean1 == boolean0);
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.noStore());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.onlyIfCached());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(boolean1);
  }
}
