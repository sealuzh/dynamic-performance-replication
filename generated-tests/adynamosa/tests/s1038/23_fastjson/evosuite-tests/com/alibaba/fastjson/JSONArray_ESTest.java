/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 24 14:00:30 GMT 2019
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.CalendarCodec;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.PascalNameFilter;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializeFilter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import java.io.BufferedInputStream;
import java.io.DataOutputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.math.BigInteger;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.time.format.ResolverStyle;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.NavigableSet;
import java.util.Set;
import java.util.concurrent.ConcurrentSkipListMap;
import java.util.function.Consumer;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONArray_ESTest extends JSONArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.iterator();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray1 = new JSONArray(3089);
      JSONArray jSONArray2 = jSONArray1.fluentAddAll((Collection<?>) linkedList0);
      jSONArray2.listIterator();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMDeserializerFactory0.classLoader);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      classLoader1.getParent();
      ASMDeserializerFactory aSMDeserializerFactory2 = new ASMDeserializerFactory(classLoader1);
      jSONArray2.set(989, aSMDeserializerFactory2);
      jSONArray2.addAll(989, (Collection<?>) linkedList0);
      // Undeclared exception!
      try { 
        jSONArray0.getInteger(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Integer integer0 = new Integer(3089);
      jSONArray0.fluentAdd((Object) integer0);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializeConfig.getGlobalInstance();
      JSONArray jSONArray1 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.add(989, (Object) serializeConfig0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[20];
      SerializerFeature serializerFeature0 = SerializerFeature.BrowserCompatible;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteNonStringValueAsString;
      serializerFeatureArray0[3] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[4] = serializerFeature3;
      ParserConfig parserConfig1 = ParserConfig.global;
      JSONArray jSONArray0 = new JSONArray();
      JSONScanner jSONScanner0 = new JSONScanner("4xP:`s6,=0qq<Z&Q}t");
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) jSONScanner0);
      ResolverStyle resolverStyle0 = ResolverStyle.LENIENT;
      boolean boolean0 = jSONArray1.remove((Object) resolverStyle0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.iterator();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentAddAll((Collection<?>) linkedList0);
      jSONArray2.listIterator();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMDeserializerFactory0.classLoader);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory1.classLoader;
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory2 = new ASMDeserializerFactory(classLoader1);
      jSONArray2.set(989, aSMDeserializerFactory2);
      assertEquals(990, jSONArray2.size());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ParserConfig parserConfig0 = new ParserConfig();
      JSON.parse("", parserConfig0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) null);
      jSONArray1.add((Object) null);
      // Undeclared exception!
      try { 
        jSONArray1.subList(989, 989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 989
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<ASMClassLoader> class0 = ASMClassLoader.class;
      JSON.parseArray((String) null, class0);
      // Undeclared exception!
      try { 
        jSONArray0.addAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      jSONArray0.fluentAdd((Object) jSONObject0);
      Class<Integer> class0 = Integer.class;
      jSONArray0.toJavaList(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      jSONArray0.isEmpty();
      int int0 = (-1721);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray((-1721));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Integer integer0 = new Integer(3089);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@type");
      LinkedHashSet<JSONArray> linkedHashSet0 = new LinkedHashSet<JSONArray>();
      jSONArray0.removeAll(linkedHashSet0);
      JSONScanner jSONScanner0 = new JSONScanner("", 3089);
      jSONArray0.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1326);
      JSON.parse("", 3089);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentClear();
      JSONArray jSONArray3 = new JSONArray(jSONArray2);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      JSONArray jSONArray4 = jSONArray3.fluentAdd((Object) aSMClassLoader0);
      // Undeclared exception!
      try { 
        jSONArray4.remove(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.iterator();
      JSONArray jSONArray1 = new JSONArray(989);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(linkedList0);
      JSONArray jSONArray3 = jSONArray0.fluentClear();
      JSON.toJSONString((Object) jSONArray3, true);
      jSONArray0.toJavaList((Class<Annotation>) null);
      Class<Integer> class0 = Integer.class;
      List<Integer> list0 = jSONArray3.toJavaList(class0);
      jSONArray2.fluentRetainAll(list0);
      jSONArray0.containsAll(jSONArray3);
      // Undeclared exception!
      try { 
        jSONArray1.getLong(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) 989);
      SerializeConfig.getGlobalInstance();
      SerializeConfig.getGlobalInstance();
      ClassLoader.getSystemClassLoader();
      SerializeConfig serializeConfig0 = new SerializeConfig(3089);
      // Undeclared exception!
      try { 
        jSONArray1.fluentRemove(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(2979);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3009, integer0);
      ParserConfig parserConfig0 = new ParserConfig();
      jSONArray0.getBooleanValue(3009);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "9ky");
      JSONObject jSONObject0 = new JSONObject(false);
      JSONArray jSONArray2 = jSONArray1.fluentRemove((Object) jSONObject0);
      jSONArray1.toArray();
      jSONArray2.getTimestamp(1640);
      Integer integer1 = new Integer(117);
      MockDate mockDate0 = new MockDate(3089, 989, 989);
      jSONArray0.remove(117);
      jSONArray2.getBigInteger(2747);
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue(3009);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3009, Size: 3009
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 3124;
      Integer integer0 = new Integer(3124);
      JSON.defaultTimeZone = jSONArray0.defaultTimeZone;
      int int1 = 3059;
      JSONArray jSONArray1 = jSONArray0.fluentSet(3059, integer0);
      Class<Object> class0 = Object.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      javaBeanSerializer0.getLabelFilters();
      javaBeanSerializer0.getType();
      CalendarCodec calendarCodec0 = new CalendarCodec();
      jSONArray1.getByteValue(989);
      jSONArray1.getBooleanValue(3033);
      char[] charArray0 = new char[5];
      charArray0[0] = '[';
      charArray0[1] = 'K';
      charArray0[2] = 'B';
      charArray0[3] = 'O';
      charArray0[4] = '@';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 989);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Integer> class0 = Integer.class;
      jSONArray0.toJavaList(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      JSONArray jSONArray1 = new JSONArray(989);
      jSONArray0.fluentRetainAll(jSONArray1);
      List<Integer> list0 = jSONArray1.toJavaList(class0);
      jSONArray1.fluentRetainAll(list0);
      // Undeclared exception!
      try { 
        jSONArray1.subList(989, 3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 3089
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) 989);
      SerializeConfig.getGlobalInstance();
      ClassLoader.getSystemClassLoader();
      Class<Integer> class0 = Integer.class;
      List<Integer> list0 = jSONArray1.toJavaList(class0);
      JSONArray jSONArray2 = jSONArray0.fluentRemove((Object) list0);
      jSONArray2.setRelatedArray(jSONArray0);
      JSONArray jSONArray3 = new JSONArray(3089);
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) jSONArray0);
      SerializeConfig.getGlobalInstance();
      SerializeConfig.getGlobalInstance();
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONArray1.getDoubleValue(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentAdd((Object) 989);
      SerializeConfig.getGlobalInstance();
      SerializeConfig.getGlobalInstance();
      Class<Integer> class0 = Integer.class;
      List<Integer> list0 = jSONArray0.toJavaList(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      JSONArray jSONArray1 = new JSONArray(1352);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(list0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-15);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        jSONArray2.getDouble(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      JSONArray jSONArray1 = jSONArray0.fluentSet(2991, 989);
      Integer integer0 = new Integer(3089);
      jSONArray0.contains(jSONArray1);
      JSONArray jSONArray2 = jSONArray1.fluentSet(2644, (Object) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      jSONArray1.contains(jSONArray2);
      JSONScanner jSONScanner0 = new JSONScanner("a:2?JMwve");
      System.setCurrentTimeMillis(989);
      jSONArray2.getInteger(0);
      JSONArray jSONArray3 = jSONArray1.fluentAdd((Object) null);
      jSONArray3.addAll(2991, (Collection<?>) jSONArray0);
      jSONArray2.getShortValue(2661);
      jSONArray0.set(0, jSONScanner0);
      assertEquals(5986, jSONArray0.size());
      
      jSONArray1.removeAll(jSONArray2);
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      boolean boolean0 = jSONArray3.contains(serializeConfig0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Integer integer0 = new Integer(2641);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3012, integer0);
      Integer integer1 = new Integer(3089);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      jSONArray1.getObject(989, (Type) parameterizedTypeImpl0);
      jSONArray0.hashCode();
      JSONArray jSONArray2 = jSONArray0.fluentRemoveAll(jSONArray1);
      jSONArray1.fluentRetainAll(jSONArray0);
      jSONArray2.containsAll(jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray1 = jSONArray0.fluentSet(989, integer0);
      ParserConfig parserConfig0 = new ParserConfig();
      jSONArray0.getJSONObject(368);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.BrowserCompatible;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteNonStringValueAsString;
      serializerFeatureArray0[3] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[4] = serializerFeature3;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray1.getSqlDate(989);
      jSONArray0.setRelatedArray(serializerFeature3);
      Integer integer1 = new Integer(3089);
      JSONArray jSONArray2 = jSONArray1.fluentRemoveAll(jSONArray0);
      jSONArray2.indexOf(serializerFeature3);
      jSONArray2.getComponentType();
      assertTrue(jSONArray1.isEmpty());
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Iterator<Object> iterator0 = jSONArray0.iterator();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) iterator0);
      jSONArray1.isEmpty();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray2 = new JSONArray(3089);
      int int0 = 0;
      Feature feature0 = Feature.DisableASM;
      Class<String> class0 = String.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      Feature[] featureArray0 = new Feature[1];
      featureArray0[0] = feature0;
      JSON.parseObject("", (Type) class1, (-1745), featureArray0);
      jSONArray1.retainAll(jSONArray2);
      JSONArray jSONArray3 = new JSONArray(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray3.getFloat(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Iterator<Object> iterator0 = jSONArray0.iterator();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) iterator0);
      jSONArray1.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray1.listIterator((-1657));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1657
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      JSONArray jSONArray1 = jSONArray0.fluentSet(2991, 989);
      Integer integer0 = new Integer(3089);
      jSONArray0.contains(jSONArray1);
      JSONArray jSONArray2 = jSONArray1.fluentSet(2644, (Object) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      jSONArray1.contains(jSONArray2);
      JSONScanner jSONScanner0 = new JSONScanner("@type", 3089);
      System.setCurrentTimeMillis(989);
      jSONArray2.getInteger(0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray3 = jSONArray0.fluentAddAll((Collection<?>) jSONArray1);
      jSONArray3.getFloatValue(989);
      jSONArray0.fluentRetainAll(jSONArray1);
      jSONArray1.remove((Object) null);
      assertEquals(5983, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(2641);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3012, integer0);
      Integer integer1 = new Integer(3089);
      jSONArray0.contains(jSONArray1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray0.getByteValue(3012);
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue(4027);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4027, Size: 3013
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JSONArray jSONArray1 = jSONArray0.fluentSet(989, integer0);
      Integer integer1 = new Integer(3089);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray2 = jSONArray1.fluentAddAll((Collection<?>) linkedList0);
      jSONArray2.getIntValue(989);
      JSONArray jSONArray3 = jSONArray2.fluentRetainAll(jSONArray2);
      jSONArray2.fluentAddAll(989, (Collection<?>) jSONArray3);
      // Undeclared exception!
      try { 
        JSON.parse("1.2.46", 3089);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : .
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      int int0 = 3009;
      JSONArray jSONArray1 = jSONArray0.fluentSet(3009, integer0);
      ParserConfig parserConfig0 = new ParserConfig();
      jSONArray0.getJSONObject(368);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteSlashAsSpecial;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[1] = serializerFeature1;
      serializerFeatureArray0[2] = serializerFeature1;
      jSONArray1.getDouble(3009);
      System.setCurrentTimeMillis(3089);
      Integer integer1 = new Integer((-861));
      // Undeclared exception!
      try { 
        jSONArray1.getInteger((-861));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3009, integer0);
      ParserConfig parserConfig0 = new ParserConfig();
      jSONArray0.getJSONObject(368);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.BrowserCompatible;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[1] = serializerFeature1;
      serializerFeatureArray0[2] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteNonStringValueAsString;
      serializerFeatureArray0[3] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[4] = serializerFeature3;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray1.getSqlDate(989);
      jSONArray1.setRelatedArray(serializerFeature3);
      Integer integer1 = new Integer(3089);
      jSONArray1.indexOf(integer1);
      jSONArray1.getComponentType();
      assertEquals(3010, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      JSONArray jSONArray1 = jSONArray0.fluentSet(2991, 989);
      Integer integer0 = new Integer(3089);
      jSONArray0.contains(jSONArray1);
      JSONArray jSONArray2 = jSONArray1.fluentSet(2644, (Object) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      jSONArray1.contains(jSONArray2);
      JSONScanner jSONScanner0 = new JSONScanner("@type", 3089);
      System.setCurrentTimeMillis(989);
      jSONArray2.getInteger(0);
      jSONArray1.fluentAdd((Object) null);
      jSONArray2.getShortValue(2687);
      jSONArray0.set(0, jSONScanner0);
      assertEquals(2993, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3009, integer0);
      ParserConfig parserConfig0 = new ParserConfig();
      jSONArray1.isEmpty();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java/lang/Double");
      JSONArray jSONArray2 = jSONArray1.fluentRemove((Object) integer0);
      jSONArray2.toArray();
      jSONArray0.getTimestamp(2983);
      Integer integer1 = new Integer(3004);
      jSONArray2.setRelatedArray(integer1);
      Object object0 = new Object();
      Class<Integer> class0 = Integer.class;
      jSONArray0.toJavaList(class0);
      float float0 = jSONArray2.getFloatValue(2894);
      assertEquals(3009, jSONArray1.size());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(2655);
      JSONArray jSONArray1 = jSONArray0.fluentSet(2666, integer0);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONArray jSONArray2 = jSONArray0.fluentAddAll(2655, (Collection<?>) jSONArray1);
      jSONArray1.indexOf(jSONArray2);
      JSONArray jSONArray3 = jSONArray0.fluentAddAll((Collection<?>) jSONArray1);
      jSONArray2.getIntValue(989);
      JSONArray jSONArray4 = new JSONArray(0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray4.forEach(consumer0);
      JSONArray jSONArray5 = jSONArray1.fluentSet(3089, jSONArray3);
      Integer integer1 = new Integer(1024);
      Type type0 = jSONArray3.componentType;
      jSONArray5.getObject(134, (Type) null);
      Integer integer2 = new Integer(2666);
      jSONArray3.getBigDecimal(2730);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      jSONArray5.set(1024, (Object) null);
      // Undeclared exception!
      try { 
        jSONArray4.getLong(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3121);
      JSON.defaultTimeZone = jSONArray0.defaultTimeZone;
      JSONArray jSONArray1 = jSONArray0.fluentSet(3059, integer0);
      ParserConfig parserConfig0 = new ParserConfig();
      Class<Object> class0 = Object.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      javaBeanSerializer0.getLabelFilters();
      Class<?> class1 = javaBeanSerializer0.getType();
      CalendarCodec calendarCodec0 = new CalendarCodec();
      parserConfig0.putDeserializer(class1, calendarCodec0);
      parserConfig0.compatibleWithJavaBean = false;
      JSON.parse("", parserConfig0, 3089);
      jSONArray1.getByteValue(989);
      jSONArray1.getBooleanValue(3033);
      jSONArray0.getJSONArray(711);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray1.getSqlDate(989);
      jSONArray0.setRelatedArray(javaBeanSerializer0);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("1.2.46");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JSONArray jSONArray1 = jSONArray0.fluentSet(3012, integer0);
      Integer integer1 = new Integer(3089);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray2 = jSONArray1.fluentAddAll((Collection<?>) linkedList0);
      jSONArray2.getIntValue(989);
      JSONArray jSONArray3 = jSONArray2.fluentRetainAll(jSONArray2);
      JSONArray jSONArray4 = jSONArray2.fluentAddAll(989, (Collection<?>) jSONArray3);
      Object object0 = JSON.parse("1.2.46", 0);
      jSONArray2.toJSONString();
      jSONArray2.getDouble(3089);
      System.setCurrentTimeMillis(989);
      Integer integer2 = new Integer(2974);
      jSONArray1.getInteger(3089);
      jSONArray1.fluentAddAll(3049, (Collection<?>) jSONArray2);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      jSONArray1.getBigDecimal(989);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      jSONArray4.size();
      JSONArray jSONArray5 = jSONArray4.fluentRemove(object0);
      jSONArray5.addAll(0, (Collection<?>) jSONArray2);
      assertEquals(24104, jSONArray4.size());
      assertEquals(24104, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = 0;
      JSONArray jSONArray0 = new JSONArray(0);
      Class<Annotation> class0 = Annotation.class;
      jSONArray0.toJavaList(class0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      Charset charset0 = Charset.defaultCharset();
      Object object0 = null;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[9];
      SerializerFeature serializerFeature0 = SerializerFeature.DisableCircularReferenceDetect;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteDateUseDateFormat;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteSlashAsSpecial;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteBigDecimalAsPlain;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.NotWriteDefaultValue;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.WriteNonStringValueAsString;
      serializerFeatureArray0[5] = serializerFeature5;
      ByteBuffer byteBuffer0 = charset0.encode("a:2?JMwve");
      SerializerFeature serializerFeature6 = SerializerFeature.MapSortField;
      serializerFeatureArray0[6] = serializerFeature6;
      SerializerFeature serializerFeature7 = SerializerFeature.WriteMapNullValue;
      serializerFeatureArray0[7] = serializerFeature7;
      SerializerFeature serializerFeature8 = SerializerFeature.WriteNonStringKeyAsString;
      serializerFeatureArray0[8] = serializerFeature8;
      // Undeclared exception!
      try { 
        jSONArray0.add(3169, (Object) byteBuffer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3169, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Integer integer0 = new Integer(2641);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3012, integer0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      jSONArray0.contains(jSONArray1);
      JSONScanner jSONScanner0 = new JSONScanner("@type", 3012);
      Charset.defaultCharset();
      Class<Integer> class0 = Integer.class;
      jSONArray1.toJavaList(class0);
      float float0 = jSONArray1.getFloatValue(43);
      assertEquals(3013, jSONArray0.size());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Integer integer0 = new Integer(2641);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3012, integer0);
      Integer integer1 = new Integer(3089);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      jSONArray0.contains(jSONArray1);
      JSONScanner jSONScanner0 = new JSONScanner("@type", 3012);
      Charset.defaultCharset();
      Class<Integer> class0 = Integer.class;
      jSONScanner0.scanType("a:2?JMwve");
      List<Integer> list0 = jSONArray0.toJavaList(class0);
      jSONArray1.getDate(0);
      jSONArray0.listIterator();
      jSONArray1.getInteger(3012);
      assertEquals(3013, jSONArray0.size());
      
      JSONArray jSONArray2 = jSONArray0.fluentClear();
      jSONArray2.containsAll(list0);
      jSONArray2.lastIndexOf(list0);
      assertEquals(3013, list0.size());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3012, integer0);
      Integer integer1 = new Integer(3089);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray2 = jSONArray1.fluentAddAll((Collection<?>) linkedList0);
      jSONArray2.getIntValue(989);
      JSONArray jSONArray3 = jSONArray2.fluentRetainAll(jSONArray2);
      JSONArray jSONArray4 = jSONArray2.fluentAddAll(989, (Collection<?>) jSONArray3);
      Object object0 = JSON.parse("1.2.46", 0);
      jSONArray2.toJSONString();
      jSONArray2.getDouble(3089);
      JSON.toJSONString(object0, false);
      jSONArray3.fluentRemove(989);
      JSON.toJSONString((Object) jSONArray3);
      jSONArray0.iterator();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      jSONArray3.getBigDecimal(989);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      jSONArray2.size();
      jSONArray4.addAll(6025, (Collection<?>) jSONArray0);
      assertEquals(12050, jSONArray4.size());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3121);
      JSON.defaultTimeZone = jSONArray0.defaultTimeZone;
      JSONArray jSONArray1 = jSONArray0.fluentSet(3059, integer0);
      ParserConfig parserConfig0 = new ParserConfig();
      parserConfig0.compatibleWithJavaBean = false;
      JSON.parse("", parserConfig0, 3089);
      jSONArray1.getByteValue(989);
      jSONArray1.getBooleanValue(3033);
      jSONArray0.getJSONArray(711);
      jSONArray0.listIterator();
      jSONArray1.hashCode();
      Class<Object> class0 = Object.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, (Map<String, String>) null);
      Class<?> class1 = javaBeanSerializer0.getType();
      jSONArray0.getObject(3059, (Type) class1);
      Integer integer1 = new Integer(545);
      JSONArray jSONArray2 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray2.getBigDecimal(3059);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3059, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3121);
      JSON.defaultTimeZone = jSONArray0.defaultTimeZone;
      int int0 = 3059;
      JSONArray jSONArray1 = jSONArray0.fluentSet(3059, integer0);
      ParserConfig parserConfig0 = new ParserConfig();
      parserConfig0.compatibleWithJavaBean = false;
      JSON.parse("", parserConfig0, 3089);
      jSONArray1.getByteValue(989);
      JSONScanner jSONScanner0 = new JSONScanner("@type", 2967);
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        jSONArray1.getSqlDate((-4382));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3012, integer0);
      Integer integer1 = new Integer(3089);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray2 = jSONArray1.fluentAddAll((Collection<?>) linkedList0);
      jSONArray2.getIntValue(989);
      JSONArray jSONArray3 = jSONArray2.fluentRetainAll(jSONArray2);
      jSONArray2.fluentAddAll(989, (Collection<?>) jSONArray3);
      Object object0 = JSON.parse("1.2.46", 0);
      jSONArray2.toJSONString();
      jSONArray2.getDouble(3089);
      JSON.toJSONString(object0, true);
      JSONArray jSONArray4 = jSONArray3.fluentRemove(989);
      jSONArray0.iterator();
      jSONArray4.clone();
      jSONArray1.fluentClear();
      jSONArray1.containsAll(jSONArray3);
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3012, integer0);
      ParserConfig parserConfig0 = new ParserConfig();
      jSONArray0.getJSONObject(368);
      Object object0 = new Object();
      JSONArray jSONArray2 = jSONArray1.fluentSet(989, object0);
      Integer integer1 = new Integer(989);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Type type0 = jSONArray1.componentType;
      jSONArray2.getObject(989, (Type) null);
      jSONArray1.toArray();
      Integer integer2 = new Integer((-491));
      JSONArray jSONArray3 = jSONArray0.fluentSet(3058, object0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      jSONArray0.getBigDecimal(32);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      jSONArray3.size();
      jSONArray1.setComponentType((Type) null);
      assertEquals(3059, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "@type");
      jSONArray0.fluentSet(417, jSONArray1);
      jSONArray1.add((Object) "com.alibaba.fastjson.JSONArray");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      short short0 = jSONArray1.getShortValue(0);
      assertEquals(419, jSONArray1.size());
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      jSONArray0.fluentClear();
      Integer integer0 = new Integer((-1440));
      JSONArray jSONArray1 = jSONArray0.fluentSet(3060, (Object) null);
      Integer integer1 = new Integer(3060);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Type type0 = jSONArray0.componentType;
      jSONArray1.getObject(2986, (Type) null);
      jSONArray0.toArray();
      Integer integer2 = new Integer(3001);
      // Undeclared exception!
      try { 
        jSONArray0.fluentSet((-163), (Object) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Integer integer0 = new Integer(2641);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3012, integer0);
      Integer integer1 = new Integer(3089);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray2 = jSONArray1.fluentAddAll((Collection<?>) linkedList0);
      jSONArray2.getIntValue(2641);
      JSONArray jSONArray3 = jSONArray2.fluentClear();
      jSONArray3.spliterator();
      // Undeclared exception!
      try { 
        jSONArray1.getInteger((-100));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(2655);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3012, integer0);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONArray jSONArray2 = jSONArray0.fluentAddAll(2655, (Collection<?>) jSONArray1);
      jSONArray1.indexOf(jSONArray2);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray3 = jSONArray2.fluentRemove(3018);
      ParserConfig.getGlobalInstance();
      jSONArray2.getSqlDate(2655);
      jSONArray1.getBigDecimal(3018);
      jSONArray2.hashCode();
      JSONArray jSONArray4 = jSONArray1.fluentRemoveAll(jSONArray2);
      assertEquals(0, jSONArray2.size());
      
      jSONArray4.fluentRetainAll(jSONArray3);
      Feature[] featureArray0 = new Feature[9];
      Feature feature0 = Feature.AllowISO8601DateFormat;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.AutoCloseSource;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.UseBigDecimal;
      featureArray0[0] = feature2;
      jSONArray1.containsAll(jSONArray4);
      boolean boolean0 = jSONArray2.contains((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3121);
      JSON.defaultTimeZone = jSONArray0.defaultTimeZone;
      jSONArray0.fluentSet(3059, integer0);
      ParserConfig parserConfig0 = new ParserConfig();
      parserConfig0.compatibleWithJavaBean = false;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONArray0.getLong(2200);
      jSONArray0.getByte(2200);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(0);
      LinkedHashSet<Annotation> linkedHashSet0 = new LinkedHashSet<Annotation>(1);
      JSONArray jSONArray1 = jSONArray0.fluentAddAll(0, (Collection<?>) linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray1.fluentSet((-2553), jSONArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3121);
      JSON.defaultTimeZone = jSONArray0.defaultTimeZone;
      JSONArray jSONArray1 = jSONArray0.fluentSet(3059, integer0);
      ParserConfig parserConfig0 = new ParserConfig();
      parserConfig0.compatibleWithJavaBean = false;
      JSON.parse("", parserConfig0, 3089);
      jSONArray1.getByteValue(989);
      jSONArray1.getLong(3059);
      jSONArray0.getByte(3059);
      assertEquals(3060, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3121);
      JSON.defaultTimeZone = jSONArray0.defaultTimeZone;
      JSONArray jSONArray1 = jSONArray0.fluentSet(3059, integer0);
      JSONArray jSONArray2 = jSONArray0.fluentSet(3089, jSONArray1);
      int int0 = (-852);
      Integer integer1 = new Integer((-852));
      FileSystemHandling.shouldAllThrowIOExceptions();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      jSONArray2.contains(pipedInputStream0);
      JSONScanner jSONScanner0 = new JSONScanner("1.2.46", 3089);
      jSONArray1.lastIndexOf(integer0);
      Charset.defaultCharset();
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONArray1.toJavaList(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,3121,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,{\"$ref\":\"@\"}]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3121);
      JSON.defaultTimeZone = jSONArray0.defaultTimeZone;
      JSONArray jSONArray1 = jSONArray0.fluentSet(3059, integer0);
      ParserConfig parserConfig0 = new ParserConfig();
      JSON.parse("+", parserConfig0, 3089);
      jSONArray1.getByteValue(989);
      jSONArray0.getBooleanValue(3059);
      jSONArray0.getInteger(989);
      jSONArray1.remove(3046);
      assertEquals(3059, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3121);
      JSON.defaultTimeZone = jSONArray0.defaultTimeZone;
      JSONArray jSONArray1 = jSONArray0.fluentSet(3059, integer0);
      ParserConfig parserConfig0 = new ParserConfig();
      parserConfig0.compatibleWithJavaBean = false;
      JSON.parse("", parserConfig0, 3089);
      jSONArray1.getByteValue(989);
      jSONArray1.getBooleanValue(3033);
      jSONArray0.getJSONArray(711);
      jSONArray0.listIterator();
      jSONArray1.hashCode();
      jSONArray1.getBoolean(989);
      jSONArray1.getDoubleValue(633);
      boolean boolean0 = jSONArray1.isEmpty();
      assertEquals(3060, jSONArray0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3121);
      JSON.defaultTimeZone = jSONArray0.defaultTimeZone;
      JSONArray jSONArray1 = jSONArray0.fluentSet(3059, integer0);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray2 = jSONArray0.fluentAddAll((Collection<?>) jSONArray1);
      jSONArray1.getLongValue(779);
      jSONArray0.getString(989);
      jSONArray1.clone();
      jSONArray2.relatedArray = (Object) jSONArray1;
      jSONArray2.get(1510);
      assertEquals(6120, jSONArray1.size());
      assertEquals(6120, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3121);
      JSON.defaultTimeZone = jSONArray0.defaultTimeZone;
      JSONArray jSONArray1 = jSONArray0.fluentSet(3059, integer0);
      ParserConfig parserConfig0 = new ParserConfig();
      parserConfig0.compatibleWithJavaBean = false;
      JSON.parse("", parserConfig0, 3089);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      int int0 = 3048;
      JSONArray jSONArray3 = jSONArray2.fluentAdd(3048, (Object) jSONArray0);
      int int1 = 3392903;
      // Undeclared exception!
      try { 
        jSONArray3.getByteValue(3392903);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3392903, Size: 3061
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.containsAll(set0);
      JSONArray jSONArray1 = jSONArray0.fluentAddAll(0, (Collection<?>) set0);
      assertEquals(3, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3121);
      JSON.defaultTimeZone = jSONArray0.defaultTimeZone;
      JSONArray jSONArray1 = jSONArray0.fluentSet(3059, integer0);
      ParserConfig parserConfig0 = new ParserConfig();
      parserConfig0.compatibleWithJavaBean = false;
      Feature feature0 = Feature.NonStringKeyAsString;
      jSONArray0.getString(3059);
      jSONArray1.clone();
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) feature0);
      jSONArray2.isEmpty();
      jSONArray2.containsAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(2645);
      JSONArray jSONArray1 = jSONArray0.fluentSet(989, integer0);
      ParserConfig.getGlobalInstance();
      JSONObject jSONObject0 = jSONArray0.getJSONObject(381);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSON.defaultTimeZone = jSONObject0.defaultTimeZone;
      Class<Integer> class0 = Integer.class;
      jSONArray1.toJavaList(class0);
      // Undeclared exception!
      try { 
        jSONArray2.getDate(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 990
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Calendar.getAvailableCalendarTypes();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(linkedHashSet0);
      LinkedList<PipedInputStream> linkedList0 = new LinkedList<PipedInputStream>();
      LinkedList<PipedInputStream> linkedList1 = new LinkedList<PipedInputStream>(linkedList0);
      jSONArray0.containsAll(linkedList0);
      Integer integer0 = new Integer(3089);
      jSONArray0.fluentRemove((Object) integer0);
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ParserConfig.getFieldFromCache("a:2?JMwve", concurrentSkipListMap0);
      Class<String> class0 = String.class;
      FieldInfo fieldInfo0 = new FieldInfo("/kiU@{", class0, class0, class0, (Field) null, 2973, 54, (-433));
      BeanContext beanContext0 = new BeanContext(fieldInfo0.declaringClass, fieldInfo0);
      Class<Annotation> class1 = Annotation.class;
      beanContext0.getAnnation(class1);
      jSONArray1.fluentAdd((Object) concurrentSkipListMap0);
      ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        jSONArray0.getDate(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Iterator<Object> iterator0 = jSONArray0.iterator();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) iterator0);
      jSONArray1.isEmpty();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray2 = jSONArray0.fluentAddAll((Collection<?>) jSONArray1);
      Feature feature0 = Feature.DisableASM;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      Feature[] featureArray0 = new Feature[1];
      featureArray0[0] = feature0;
      JSON.parseObject("", (Type) null, (-1745), featureArray0);
      jSONArray1.retainAll(jSONArray2);
      JSONArray jSONArray3 = new JSONArray(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray3.getFloat(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : java.util.ArrayList$Itr@690a7d64
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "@type");
      jSONArray1.add((Object) "");
      jSONArray0.getShort(0);
      JSONArray jSONArray2 = jSONArray1.fluentRemoveAll(jSONArray0);
      LinkedList<PipedInputStream> linkedList0 = new LinkedList<PipedInputStream>();
      LinkedList<PipedInputStream> linkedList1 = new LinkedList<PipedInputStream>(linkedList0);
      JSONArray jSONArray3 = new JSONArray(jSONArray2);
      jSONArray0.fluentSet(3054, jSONArray2);
      Integer integer0 = new Integer(3035);
      jSONArray2.fluentClear();
      // Undeclared exception!
      try { 
        JSON.parseObject("@type", (Type) null, (Feature[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : @type
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = 37;
      JSONArray jSONArray0 = new JSONArray(37);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "@type");
      jSONArray1.add((Object) "");
      jSONArray0.contains("");
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      jSONArray0.fluentRetainAll(set0);
      LinkedList<PipedInputStream> linkedList0 = new LinkedList<PipedInputStream>();
      LinkedList<PipedInputStream> linkedList1 = new LinkedList<PipedInputStream>(linkedList0);
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      jSONArray0.fluentSet(91, linkedList1);
      JSONArray jSONArray2 = jSONArray0.fluentAddAll((Collection<?>) jSONArray1);
      JSON.parse("");
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      // Undeclared exception!
      try { 
        jSONArray2.getShort(91);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ClassLoader.getSystemClassLoader();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      Class<PipedInputStream> class0 = PipedInputStream.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      jSONArray1.setComponentType(class1);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(set0);
      LinkedList<PipedInputStream> linkedList0 = new LinkedList<PipedInputStream>();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "a:2?JMwve");
      LinkedList<PipedInputStream> linkedList1 = new LinkedList<PipedInputStream>(linkedList0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      jSONArray2.fluentSet(1578, linkedList0);
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 1579
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      int int0 = 2641;
      Integer integer0 = new Integer(2641);
      // Undeclared exception!
      try { 
        jSONArray0.removeAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(2641);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3012, integer0);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONArray jSONArray2 = jSONArray0.fluentAddAll(2641, (Collection<?>) jSONArray1);
      jSONArray1.indexOf(jSONArray2);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray3 = jSONArray2.fluentRemove(3018);
      ParserConfig.getGlobalInstance();
      jSONArray2.getSqlDate(2641);
      jSONArray1.getBigDecimal(3018);
      jSONArray2.hashCode();
      JSONArray jSONArray4 = jSONArray1.fluentRemoveAll(jSONArray2);
      JSONArray jSONArray5 = jSONArray4.fluentRetainAll(jSONArray3);
      Feature[] featureArray0 = new Feature[9];
      Feature feature0 = Feature.AllowISO8601DateFormat;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.CustomMapDeserializer;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.UseBigDecimal;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.AllowSingleQuotes;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.SupportAutoType;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.NonStringKeyAsString;
      featureArray0[5] = feature5;
      Feature feature6 = Feature.InternFieldNames;
      featureArray0[6] = feature6;
      Feature feature7 = Feature.CustomMapDeserializer;
      featureArray0[7] = feature7;
      Feature feature8 = Feature.DisableASM;
      featureArray0[8] = feature8;
      JSON.parseObject("", (Type) null, 3017, featureArray0);
      jSONArray5.retainAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray2.getFloat((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(set0);
      LinkedList<PipedInputStream> linkedList0 = new LinkedList<PipedInputStream>();
      LinkedList<PipedInputStream> linkedList1 = new LinkedList<PipedInputStream>(linkedList0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      jSONArray2.fluentSet(989, linkedList0);
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 990
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3121);
      JSON.defaultTimeZone = jSONArray0.defaultTimeZone;
      jSONArray0.fluentSet(3059, integer0);
      jSONArray0.getFloat(3059);
      // Undeclared exception!
      try { 
        JSON.parseArray("1.2.46");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual float, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) 3089);
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        jSONArray1.subList((-931), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -931
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3121);
      JSON.defaultTimeZone = jSONArray0.defaultTimeZone;
      JSONArray jSONArray1 = jSONArray0.fluentSet(3059, integer0);
      // Undeclared exception!
      try { 
        jSONArray1.getBigInteger(3059);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"j\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Integer integer0 = new Integer(2641);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3012, integer0);
      Integer integer1 = new Integer(3089);
      jSONArray0.contains(jSONArray1);
      jSONArray1.getBooleanValue(1023);
      JSONScanner jSONScanner0 = new JSONScanner("@type", 3012);
      Charset.defaultCharset();
      Class<Integer> class0 = Integer.class;
      jSONArray1.toJavaList(class0);
      jSONArray1.getDate(184);
      jSONArray0.listIterator();
      assertEquals(3013, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3121);
      JSON.defaultTimeZone = jSONArray0.defaultTimeZone;
      JSONArray jSONArray1 = jSONArray0.fluentSet(3059, integer0);
      ParserConfig parserConfig0 = new ParserConfig();
      JSON.parse("", parserConfig0, 3089);
      jSONArray1.getByteValue(989);
      jSONArray0.getBooleanValue(3059);
      jSONArray0.getInteger(989);
      assertEquals(3060, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(734);
      jSONArray0.set(709, integer0);
      int int0 = 656;
      jSONArray0.fluentRemove(656);
      jSONArray0.getBooleanValue(656);
      jSONArray0.size();
      JSONArray jSONArray1 = new JSONArray(989);
      // Undeclared exception!
      try { 
        jSONArray1.getJSONArray((-115));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(2641);
      int int0 = 3012;
      JSONArray jSONArray1 = jSONArray0.fluentSet(3012, integer0);
      ParserConfig parserConfig0 = new ParserConfig();
      JSON.parse("", parserConfig0, 2641);
      jSONArray0.getJSONObject(381);
      JSONObject[] jSONObjectArray0 = new JSONObject[2];
      jSONObjectArray0[0] = null;
      jSONObjectArray0[1] = null;
      // Undeclared exception!
      try { 
        jSONArray1.toArray(jSONObjectArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3121);
      jSONArray0.fluentSet(3059, integer0);
      String string0 = "";
      ParserConfig parserConfig0 = new ParserConfig();
      JSON.parse("", parserConfig0, 3089);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(3059);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to com.alibaba.fastjson.JSONObject
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3121);
      JSON.defaultTimeZone = jSONArray0.defaultTimeZone;
      JSONArray jSONArray1 = jSONArray0.fluentSet(3059, integer0);
      ParserConfig parserConfig0 = new ParserConfig();
      JSON.parse("", parserConfig0, 3089);
      jSONArray1.getByteValue(989);
      jSONArray0.getBooleanValue(3059);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(3059);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to com.alibaba.fastjson.JSONArray
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(set0);
      LinkedList<PipedInputStream> linkedList0 = new LinkedList<PipedInputStream>();
      LinkedList<PipedInputStream> linkedList1 = new LinkedList<PipedInputStream>(linkedList0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      jSONArray2.fluentSet(1578, linkedList0);
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 1579
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) 989);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      Charset.defaultCharset();
      jSONArray0.set(3089, serializeConfig0);
      jSONArray1.get(989);
      assertEquals(3090, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) 989);
      SerializeConfig.getGlobalInstance();
      Charset.defaultCharset();
      Class<Integer> class0 = Integer.class;
      List<Integer> list0 = jSONArray0.toJavaList(class0);
      jSONArray1.fluentRetainAll(list0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(28);
      jSONArray0.add((Object) integer0);
      jSONArray0.getShortValue(0);
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        JSON.parse("ef;a~]6,2O[phgzu", parserConfig0, 1825);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ef;a~]6,2O[phgzu
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Iterator<Object> iterator0 = jSONArray0.iterator();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) iterator0);
      jSONArray1.isEmpty();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      jSONArray0.fluentAddAll((Collection<?>) jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : java.util.ArrayList$Itr@2541f42
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3121);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3059, integer0);
      jSONArray1.addAll((Collection<?>) jSONArray0);
      JSONArray jSONArray2 = jSONArray0.fluentAddAll(255, (Collection<?>) jSONArray1);
      JSONArray jSONArray3 = jSONArray2.fluentRemove(3013);
      jSONArray3.getBoolean(3015);
      assertEquals(12239, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3121);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3059, integer0);
      ParserConfig parserConfig0 = new ParserConfig();
      JSON.parse("", parserConfig0, 3089);
      jSONArray1.getByteValue(989);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(3059);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to com.alibaba.fastjson.JSONArray
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      JavaBeanInfo.getBuilderClass((JSONType) null);
      jSONArray0.setComponentType((Type) null);
      jSONArray1.set(3051, jSONArray0);
      jSONArray1.get(931);
      assertEquals(3052, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3121);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3059, integer0);
      ParserConfig parserConfig0 = new ParserConfig();
      JSON.parse("", parserConfig0, 3089);
      jSONArray1.getByteValue(989);
      // Undeclared exception!
      try { 
        jSONArray1.getByteValue(3662);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3662, Size: 3060
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getByte(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      jSONArray1.fluentRetainAll(jSONArray0);
      jSONArray1.set(534, (Object) null);
      assertEquals(535, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1.2.46");
      jSONArray0.toArray();
      jSONArray0.setRelatedArray((Object) null);
      Object object0 = new Object();
      Integer integer0 = new Integer(3089);
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.getComponentType();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      // Undeclared exception!
      try { 
        jSONArray0.getDouble((-136));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer((-1341));
      LinkedHashSet<JSONArray> linkedHashSet0 = new LinkedHashSet<JSONArray>();
      jSONArray0.removeAll(linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue((-1231));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, "a:2?JMwve");
      // Undeclared exception!
      try { 
        jSONArray1.getBooleanValue((-2282));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONScanner jSONScanner0 = new JSONScanner("", 812);
      char[] charArray0 = new char[9];
      charArray0[0] = '2';
      charArray0[1] = 'v';
      charArray0[2] = '%';
      charArray0[3] = '<';
      charArray0[4] = 'u';
      charArray0[5] = 'S';
      charArray0[6] = '>';
      charArray0[7] = 'o';
      charArray0[8] = 'H';
      Class<Field> class0 = Field.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll(3066, (Collection<?>) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3066, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.set((-136), "CGLZu2_");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte)121;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONArray jSONArray0 = new JSONArray(3056);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray1.getFloat(5378);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5378, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray0.forEach(consumer0);
      Integer integer0 = new Integer((-29));
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) integer0);
      jSONArray1.stream();
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd(989, object0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Type[] typeArray0 = new Type[8];
      jSONArray0.getComponentType();
      typeArray0[0] = null;
      com.alibaba.fastjson.util.ParameterizedTypeImpl parameterizedTypeImpl0 = new com.alibaba.fastjson.util.ParameterizedTypeImpl(typeArray0, (Type) null, (Type) null);
      typeArray0[1] = (Type) parameterizedTypeImpl0;
      TypeReference<Class<JSONObject>> typeReference0 = null;
      try {
        typeReference0 = new TypeReference<Class<JSONObject>>();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.reflect.ParameterizedType
         //
         verifyException("com.alibaba.fastjson.TypeReference", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      jSONArray0.add((Object) pipedInputStream0);
      Object object0 = new Object();
      Integer integer0 = new Integer(989);
      // Undeclared exception!
      try { 
        jSONArray0.add(3041, (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3041, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.alibaba.fastjson.JSONArray");
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JavaBeanInfo.getBuilderClass((JSONType) null);
      jSONArray1.setComponentType((Type) null);
      jSONArray0.set(3089, jSONArray1);
      assertEquals(3090, jSONArray1.size());
      assertEquals(3090, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) 989);
      jSONArray0.containsAll(linkedList0);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(1107297560);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1107297560, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemoveAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.parallelStream();
      // Undeclared exception!
      try { 
        jSONArray0.getObject(0, (Type) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getLong((-1766));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ClassLoader.getSystemClassLoader();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      jSONArray1.setComponentType((Type) null);
      assertTrue(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      jSONArray0.fluentSet((-1), classLoader0);
      // Undeclared exception!
      try { 
        jSONArray0.listIterator(161);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 161
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONArray0.containsAll(linkedList0);
      Iterator<Object> iterator0 = jSONArray0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      Object object0 = JSON.toJSON((Object) jSONArray0, serializeConfig0);
      boolean boolean0 = jSONArray0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(57344);
      jSONObject0.getJSONArray("QuoteFieldNames");
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.containsAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      PipedInputStream pipedInputStream0 = new PipedInputStream(2553);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 2540);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1957, bufferedInputStream0);
      // Undeclared exception!
      try { 
        jSONArray1.getIntValue(2553);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2553, Size: 1958
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue(2453);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2453, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue((-5638));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      JSONArray jSONArray2 = jSONArray0.fluentRemove((Object) jSONArray1);
      jSONArray2.clone();
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue((-1604));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDouble(1850);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1850, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentClear();
      JSON.parseObject("");
      BigInteger bigInteger0 = BigInteger.ONE;
      jSONArray0.fluentRemove((Object) null);
      jSONArray0.remove((Object) bigInteger0);
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal(1891);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1891, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue((-3571));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getInteger((-799));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getByte((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getShort((-889275724));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(3929);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3929, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getShort(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigInteger bigInteger0 = BigInteger.ONE;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) jSONArray0;
      objectArray0[1] = (Object) bigInteger0;
      objectArray0[2] = (Object) jSONArray0;
      jSONArray0.toArray(objectArray0);
      Class<Field> class0 = Field.class;
      // Undeclared exception!
      try { 
        JSON.parseArray("@type", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : @type
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = (JSONArray)jSONArray0.clone();
      int int0 = 4345;
      // Undeclared exception!
      try { 
        jSONArray1.fluentAddAll((-3051), (Collection<?>) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3051, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.lastIndexOf("z+^P1L`]tZha*pMs");
      // Undeclared exception!
      try { 
        jSONArray0.getByte(3929);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3929, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 2604;
      Object object0 = new Object();
      jSONArray0.add(object0);
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean((-1077));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<JSONArray> class0 = JSONArray.class;
      Type type0 = FieldInfo.getFieldType(class0, class0, class0);
      // Undeclared exception!
      try { 
        jSONArray0.getObject((-67), type0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clone();
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(1369);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1369, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.fluentSet((-4101), set0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      Class<Object> class0 = Object.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      List<Object> list0 = javaBeanSerializer0.getObjectFieldValues(class0);
      JSONArray jSONArray0 = new JSONArray(list0);
      Class<Field> class1 = Field.class;
      List<Field> list1 = jSONArray0.toJavaList(class1);
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>(list1);
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(linkedHashSet0);
      boolean boolean0 = jSONArray1.addAll((Collection<?>) set0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1, set0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSONArray jSONArray3 = jSONArray2.fluentRemoveAll(set0);
      // Undeclared exception!
      try { 
        jSONArray3.getJSONArray(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Calendar.getAvailableCalendarTypes();
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.subList((-362), (-362));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -362
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Calendar.getAvailableCalendarTypes();
      JSONArray jSONArray0 = new JSONArray(0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) linkedList0);
      jSONArray1.isEmpty();
      jSONArray0.size();
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Iterator<Object> iterator0 = jSONArray0.iterator();
      String string0 = JSON.DEFFAULT_DATE_FORMAT;
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) iterator0);
      jSONArray1.isEmpty();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      jSONArray0.fluentAddAll((Collection<?>) jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : java.util.ArrayList$Itr@26c192e3
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONArray jSONArray0 = new JSONArray();
      JSON.DEFFAULT_DATE_FORMAT = "a:2?JMwve";
      String string0 = JSON.DEFAULT_TYPE_KEY;
      ClassLoader.getSystemClassLoader();
      int int0 = (-2927);
      // Undeclared exception!
      try { 
        jSONArray0.getDate((-2927));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.setRelatedArray("yyyy-MM-dd HH:mm:ss");
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray1.getShortValue(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.fluentSet((-2927), (Object) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray1.remove((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONArray0.getLong(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.iterator();
      String string0 = JSON.DEFFAULT_DATE_FORMAT;
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue(2147483645);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483645, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Integer> class0 = Integer.class;
      jSONArray0.toJavaList(class0);
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONArray jSONArray0 = new JSONArray();
      ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        jSONArray0.add(1, (Object) serializeConfig0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.remove((Object) null);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(3929);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3929, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.parallelStream();
      // Undeclared exception!
      try { 
        jSONArray0.getObject(1028, (Type) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1028, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteMapNullValue;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteDateUseDateFormat;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteNonStringKeyAsString;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteEnumUsingToString;
      serializerFeatureArray0[3] = serializerFeature3;
      JSON.toJSONStringWithDateFormat(integer0, "yyyy-MM-dd HH:mm:ss", serializerFeatureArray0);
      Stream<Object> stream0 = jSONArray0.parallelStream();
      jSONArray0.contains(stream0);
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue(1002);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1002, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.parallelStream();
      Class<Integer> class0 = Integer.class;
      jSONArray0.toJavaList(class0);
      Integer integer0 = new Integer(3089);
      boolean boolean0 = jSONArray0.remove((Object) integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1835);
      // Undeclared exception!
      try { 
        jSONArray0.subList(1835, (-190));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(1835) > toIndex(-190)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@type");
      LinkedHashSet<JSONArray> linkedHashSet0 = new LinkedHashSet<JSONArray>();
      // Undeclared exception!
      try { 
        jSONArray0.addAll((-1), (Collection<?>) linkedHashSet0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONArray jSONArray0 = new JSONArray(0);
      JSONObject jSONObject0 = new JSONObject(0, true);
      Set<String> set0 = jSONObject0.keySet();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) set0);
      JSONArray jSONArray2 = jSONArray1.fluentRemoveAll(set0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Q NG-1?<cNZZj");
      jSONArray2.addAll((Collection<?>) jSONArray1);
      JSONArray jSONArray3 = jSONArray1.fluentRemove((Object) fileSystemHandling0);
      JSONArray jSONArray4 = jSONArray0.fluentClear();
      jSONArray3.indexOf(set0);
      boolean boolean0 = jSONArray4.retainAll(jSONArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      SerializeConfig.getGlobalInstance();
      Class<JSONArray> class0 = JSONArray.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(0, class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Integer> class0 = Integer.class;
      jSONArray0.toJavaList(class0);
      // Undeclared exception!
      try { 
        jSONArray0.listIterator(1303);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1303
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) 989);
      SerializeConfig.getGlobalInstance();
      Charset.defaultCharset();
      Class<Integer> class0 = Integer.class;
      jSONArray0.toJavaList(class0);
      // Undeclared exception!
      try { 
        jSONArray1.getDate(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Stream<Object> stream0 = jSONArray0.parallelStream();
      jSONArray0.indexOf(stream0);
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      Charset charset0 = Charset.defaultCharset();
      JSONObject jSONObject0 = new JSONObject();
      jSONArray0.indexOf(jSONObject0);
      float float0 = new Integer(989);
      jSONArray0.equals(charset0);
      // Undeclared exception!
      try { 
        jSONArray1.getBooleanValue(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSON.setDefaultTypeKey("@type");
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject((-956));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer integer0 = new Integer(1);
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue((-151));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toArray();
      // Undeclared exception!
      try { 
        jSONArray0.getByte(55232);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 55232, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer((-12));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        jSONArray0.getFloat((-1710));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) "a:2?JMwve");
      SerializeConfig.getGlobalInstance();
      ClassLoader.getSystemClassLoader();
      jSONArray1.toArray();
      JSONArray jSONArray2 = new JSONArray(jSONArray0);
      JSONArray jSONArray3 = jSONArray2.fluentRemoveAll(jSONArray0);
      jSONArray2.fluentAddAll((Collection<?>) jSONArray3);
      assertEquals(0, jSONArray2.size());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentAdd((Object) 989);
      SerializeConfig.getGlobalInstance();
      ClassLoader.getSystemClassLoader();
      SerializeConfig serializeConfig0 = new SerializeConfig(989);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd((-1), (Object) serializeConfig0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      Class<Object> class0 = Object.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      List<Object> list0 = javaBeanSerializer0.getFieldValues(integer0);
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) list0);
      jSONArray0.fluentAdd((Object) jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger((-3160));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray1 = new JSONArray(3089);
      ParserConfig parserConfig0 = ParserConfig.global;
      Object object0 = JSON.toJSON((Object) jSONArray1, parserConfig0);
      jSONArray0.fluentAdd(object0);
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-1070);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONArray0.subList(603, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<JSONArray> class0 = JSONArray.class;
      jSONArray0.indexOf(class0);
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<JSONArray> class0 = JSONArray.class;
      int int0 = (-1);
      // Undeclared exception!
      try { 
        jSONArray0.getString((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentAdd((Object) 989);
      // Undeclared exception!
      try { 
        jSONArray0.getByte(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@type");
      jSONArray0.toArray();
      assertTrue(jSONArray0.isEmpty());
      
      LinkedHashSet<JSONObject> linkedHashSet0 = new LinkedHashSet<JSONObject>();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) "1.2.46");
      boolean boolean0 = jSONArray1.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) 989);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ClassLoader.getSystemClassLoader();
      Class<JSONArray> class0 = JSONArray.class;
      // Undeclared exception!
      try { 
        jSONArray1.getObject(0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.JSONArray
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray1.getString(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      JSON.toJSON((Object) jSONArray1, (ParserConfig) null);
      jSONArray0.indexOf(jSONArray1);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[8];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNonStringValueAsString;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteDateUseDateFormat;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.SortField;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[5] = serializerFeature5;
      SerializerFeature serializerFeature6 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[6] = serializerFeature6;
      SerializerFeature serializerFeature7 = SerializerFeature.NotWriteRootClassName;
      serializerFeatureArray0[7] = serializerFeature7;
      JSON.toJSONBytes((Object) null, 3089, serializerFeatureArray0);
      // Undeclared exception!
      try { 
        jSONArray0.get((-821));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        jSONArray0.addAll(3598, (Collection<?>) linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3598, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) integer0);
      JSON.toJSONString((Object) jSONArray1, true);
      Integer integer1 = new Integer(3089);
      Object object0 = JSON.toJSON((Object) integer1);
      // Undeclared exception!
      try { 
        jSONArray1.add((-1), object0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(989);
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      jSONArray1.fluentRemoveAll(set0);
      int int0 = jSONArray0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      jSONArray0.fluentAdd((Object) integer0);
      JSONArray jSONArray1 = jSONArray0.fluentSet((-1), (Object) null);
      jSONArray1.parallelStream();
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        jSONArray1.getBooleanValue(191);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 191, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      jSONArray0.fluentAdd((Object) integer0);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializeConfig.getGlobalInstance();
      ClassLoader.getSystemClassLoader();
      jSONArray0.toArray();
      ConcurrentSkipListMap<JSONObject, String> concurrentSkipListMap0 = new ConcurrentSkipListMap<JSONObject, String>();
      NavigableSet<JSONObject> navigableSet0 = concurrentSkipListMap0.descendingKeySet();
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(navigableSet0);
      assertSame(jSONArray0, jSONArray1);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      jSONArray0.listIterator();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) integer0);
      // Undeclared exception!
      try { 
        jSONArray1.getBigInteger(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) 989);
      SerializeConfig.getGlobalInstance();
      Charset.defaultCharset();
      jSONArray0.indexOf(jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray1.getFloatValue(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      char[] charArray0 = new char[3];
      charArray0[0] = '\\';
      charArray0[1] = 'i';
      charArray0[2] = 'o';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 963);
      Class<JSONArray> class0 = JSONArray.class;
      Collection<String> collection0 = jSONReaderScanner0.newCollectionByType(class0);
      jSONArray0.addAll(collection0);
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray1 = new JSONArray(989);
      // Undeclared exception!
      try { 
        jSONArray1.getObject(3089, (Type) class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      JSONArray jSONArray0 = new JSONArray();
      Class<String> class0 = String.class;
      List<String> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) list0);
      // Undeclared exception!
      try { 
        jSONArray1.getJSONArray((-245));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) integer0);
      SerializeConfig.getGlobalInstance();
      ClassLoader.getSystemClassLoader();
      jSONArray0.toArray();
      jSONArray0.fluentRemoveAll(jSONArray1);
      assertTrue(jSONArray1.isEmpty());
      assertEquals(0, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) 3089);
      SerializeConfig.getGlobalInstance();
      Charset charset0 = Charset.defaultCharset();
      int int0 = jSONArray1.indexOf(charset0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNonStringKeyAsString;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[1] = serializerFeature1;
      JSON.toJSONBytes((Object) jSONArray0, serializerFeatureArray0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      Class<JSONArray> class0 = JSONArray.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(0, class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) integer0);
      // Undeclared exception!
      try { 
        jSONArray1.getBigInteger(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) integer0);
      SerializeConfig.getGlobalInstance();
      Charset.defaultCharset();
      jSONArray1.indexOf((Object) null);
      // Undeclared exception!
      try { 
        jSONArray0.get(858);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 858, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp(3929);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3929, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<JSONObject> class0 = JSONObject.class;
      jSONArray0.toJavaList(class0);
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue((-3580));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "@type");
      jSONArray1.add((Object) "");
      jSONArray1.fluentAddAll((Collection<?>) jSONArray0);
      jSONArray0.fluentRemove((Object) "");
      Class<JSONObject> class0 = JSONObject.class;
      char[] charArray0 = new char[8];
      charArray0[0] = 'r';
      charArray0[1] = '_';
      charArray0[2] = '*';
      charArray0[3] = '\\';
      charArray0[4] = '!';
      charArray0[5] = '}';
      charArray0[6] = 'S';
      charArray0[7] = 'w';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 989, (-1583));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      jSONArray0.fluentRemove((Object) jSONArray1);
      int int0 = 3;
      // Undeclared exception!
      try { 
        jSONArray0.remove(100);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 100, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) integer0);
      SerializeConfig.getGlobalInstance();
      Charset.defaultCharset();
      int int0 = jSONArray0.indexOf(jSONArray1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      jSONArray0.fluentAdd((Object) integer0);
      SerializeConfig.getGlobalInstance();
      Charset.defaultCharset();
      JSONObject jSONObject0 = new JSONObject(false);
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONObject jSONObject1 = jSONObject0.fluentPutAll(hashMap0);
      int int0 = jSONArray0.indexOf(jSONObject1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JSONArray jSONArray0 = new JSONArray();
      Class<JSONArray> class0 = JSONArray.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(2916, class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2916, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 2916;
      Class<JSONArray> class0 = JSONArray.class;
      // Undeclared exception!
      try { 
        jSONArray0.getString(2916);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2916, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp((-1070));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) integer0);
      SerializeConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        jSONArray0.addAll(3089, (Collection<?>) jSONArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.contains("ImxtH\"9FmJXrY>;t`Rn");
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue(1002);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1002, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) integer0);
      SerializeConfig.getGlobalInstance();
      ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        jSONArray1.getBooleanValue((-2418));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      int int0 = 0;
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "@type");
      jSONArray1.add((Object) "");
      // Undeclared exception!
      try { 
        jSONArray1.getShortValue(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      jSONArray0.fluentAdd((Object) integer0);
      SerializeConfig.getGlobalInstance();
      ClassLoader.getSystemClassLoader();
      int int0 = (-1084);
      Class<JSONObject> class0 = JSONObject.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject((-1084), class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "1.2.46";
      stringArray0[1] = "1.2.46";
      int int0 = 1538;
      // Undeclared exception!
      try { 
        jSONArray1.getBooleanValue(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) integer0);
      ClassLoader.getSystemClassLoader();
      jSONArray1.indexOf((Object) null);
      jSONArray1.getRelatedArray();
      // Undeclared exception!
      try { 
        jSONArray1.getShortValue(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte)68;
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal((-971));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      int int0 = 0;
      JSONArray jSONArray0 = new JSONArray(0);
      jSONArray0.fluentRemove((Object) "@type");
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate(3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("JPaGJ A4", true);
      Charset charset0 = Charset.defaultCharset();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullNumberAsZero;
      serializerFeatureArray0[0] = serializerFeature0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "%-");
      SerializerFeature serializerFeature1 = SerializerFeature.WriteSlashAsSpecial;
      serializerFeatureArray0[1] = serializerFeature1;
      JSON.writeJSONString((OutputStream) mockFileOutputStream0, charset0, (Object) jSONArray0, serializerFeatureArray0);
      JSON.toJSONString((Object) serializerFeature0, true);
      // Undeclared exception!
      try { 
        jSONArray0.remove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      jSONArray1.fluentAddAll((Collection<?>) jSONArray0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      Class<JSONArray> class0 = JSONArray.class;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "1.2.46";
      stringArray0[1] = "1.2.46";
      stringArray0[2] = "1.2.46";
      stringArray0[3] = ".";
      stringArray0[4] = "1.2.46";
      stringArray0[5] = "";
      stringArray0[6] = "@type";
      stringArray0[7] = "@type";
      stringArray0[8] = "a:2?JMwve";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        jSONArray1.getSqlDate(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      jSONArray0.fluentAdd((Object) integer0);
      SerializeConfig.getGlobalInstance();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[2];
      String string0 = "k>M1TSD-";
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      try { 
        classLoader0.loadClass("([C)[F");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentAddAll((Collection<?>) jSONArray0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[7];
      Class<JSONArray> class0 = JSONArray.class;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "1.2.46";
      stringArray0[1] = "1.2.46";
      stringArray0[2] = "1.2.46";
      stringArray0[3] = ".";
      stringArray0[4] = "1.2.46";
      stringArray0[5] = "";
      stringArray0[6] = "@type";
      stringArray0[7] = "@type";
      stringArray0[8] = "a:2?JMwve";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      serializeFilterArray0[0] = (SerializeFilter) simplePropertyPreFilter0;
      SimplePropertyPreFilter simplePropertyPreFilter1 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[1] = (SerializeFilter) simplePropertyPreFilter1;
      SimplePropertyPreFilter simplePropertyPreFilter2 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[2] = (SerializeFilter) simplePropertyPreFilter2;
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      serializeFilterArray0[3] = (SerializeFilter) pascalNameFilter0;
      PascalNameFilter pascalNameFilter1 = new PascalNameFilter();
      serializeFilterArray0[4] = (SerializeFilter) pascalNameFilter1;
      SimplePropertyPreFilter simplePropertyPreFilter3 = new SimplePropertyPreFilter(class0, stringArray0);
      serializeFilterArray0[5] = (SerializeFilter) simplePropertyPreFilter3;
      SimplePropertyPreFilter simplePropertyPreFilter4 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[6] = (SerializeFilter) simplePropertyPreFilter4;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.SkipTransientField;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteMapNullValue;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.BrowserSecure;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteNullListAsEmpty;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[4] = serializerFeature4;
      JSON.toJSONBytes((Object) jSONArray2, serializeConfig0, serializeFilterArray0, 989, serializerFeatureArray0);
      JSONArray jSONArray3 = jSONArray2.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray3.fluentRemove(263);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 263, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      int int0 = 0;
      JSONArray jSONArray0 = new JSONArray(0);
      jSONArray0.fluentRemove((Object) "w`(<i^zLMpQ)v|']`?");
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = jSONArray1.fluentRemoveAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray2.fluentAddAll(989, (Collection<?>) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      JSON.toJavaObject((JSON) jSONArray0, class0);
      Object object0 = null;
      jSONArray0.fluentAdd((Object) null);
      Class<JSONArray> class1 = JSONArray.class;
      SimplePropertyPreFilter simplePropertyPreFilter0 = null;
      try {
        simplePropertyPreFilter0 = new SimplePropertyPreFilter(class1, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SimplePropertyPreFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.fluentRetainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      int int0 = 0;
      JSONArray jSONArray0 = new JSONArray(0);
      String string0 = "";
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      List<Object> list0 = null;
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      jSONArray0.fluentRetainAll(linkedHashSet0);
      char[] charArray0 = new char[3];
      charArray0[0] = 'k';
      charArray0[1] = 'U';
      charArray0[2] = '5';
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser(charArray0, 989, parserConfig0, 3089);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("writeString", hashMap0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd(1, (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray1 = jSONArray0.fluentAdd(0, (Object) integer0);
      String string0 = "float overflow : ";
      jSONArray1.iterator();
      // Undeclared exception!
      try { 
        JSON.parseArray("float overflow : ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JSON.parseArray((String) null, class0);
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      Class<JSONArray> class1 = JSONArray.class;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "a:2?JMwve";
      stringArray0[1] = "1.2.46";
      stringArray0[2] = "@type";
      stringArray0[3] = null;
      stringArray0[4] = "a:2?JMwve";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class1, stringArray0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.SkipTransientField;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteMapNullValue;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteSlashAsSpecial;
      serializerFeatureArray0[2] = serializerFeature2;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) class0, (SerializeFilter) simplePropertyPreFilter0, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray1.fluentAddAll(1953, (Collection<?>) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1953, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(2389);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2389, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.toArray((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(1050);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1050, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      int int0 = 0;
      JSONArray jSONArray0 = new JSONArray(0);
      Class<Annotation> class0 = Annotation.class;
      jSONArray0.toJavaList(class0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      Charset charset0 = Charset.defaultCharset();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[9];
      SerializerFeature serializerFeature0 = SerializerFeature.DisableCircularReferenceDetect;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteDateUseDateFormat;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteSlashAsSpecial;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteBigDecimalAsPlain;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.NotWriteDefaultValue;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.WriteNonStringValueAsString;
      serializerFeatureArray0[5] = serializerFeature5;
      SerializerFeature serializerFeature6 = SerializerFeature.MapSortField;
      serializerFeatureArray0[6] = serializerFeature6;
      SerializerFeature serializerFeature7 = SerializerFeature.WriteMapNullValue;
      serializerFeatureArray0[7] = serializerFeature7;
      SerializerFeature serializerFeature8 = SerializerFeature.WriteNonStringKeyAsString;
      serializerFeatureArray0[8] = serializerFeature8;
      try { 
        JSON.writeJSONString((OutputStream) dataOutputStream0, charset0, (Object) null, serializerFeatureArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clone();
      // Undeclared exception!
      try { 
        jSONArray0.getInteger(3386);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3386, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("JPaGJ A4", true);
      Charset charset0 = Charset.defaultCharset();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullNumberAsZero;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteSlashAsSpecial;
      serializerFeatureArray0[1] = serializerFeature1;
      int int0 = JSON.writeJSONString((OutputStream) mockFileOutputStream0, charset0, (Object) jSONArray0, serializerFeatureArray0);
      int int1 = jSONArray0.indexOf((Object) null);
      assertFalse(int1 == int0);
  }
}
