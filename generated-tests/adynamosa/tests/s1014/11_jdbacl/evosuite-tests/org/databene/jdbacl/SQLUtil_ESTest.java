/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 22 19:52:14 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FilterOutputStream;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.List;
import java.util.Vector;
import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringReader stringReader0 = new StringReader("FUNCNAME");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = (double) (-4);
      SQLUtil.renderNumber(streamTokenizer0);
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.renderValue(defaultDBTable0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("+vBG5u}H(lE#F");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("+vBG5u}H(lE#F", dBSchema0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("+vBG5u}H(lE#F", defaultDBTable0, (-1), "");
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("updatetable null");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("drop index");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, " NOT", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null, nameSpec0);
      assertNull(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "select", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT select UNIQUE ()", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("%.@l0r*>");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("E", dBSchema0);
      String[] stringArray0 = new String[1];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Object object0 = new Object();
      String string0 = SQLUtil.substituteMarkers("create table ", "", object0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers(" = ", (String) null, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("", "", "");
      assertEquals("''", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("]twER'I", "alter index", (Object) null);
      assertEquals("]twER'I", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = SQLUtil.renderValue((Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Object object0 = new Object();
      String string0 = SQLUtil.renderValue(object0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("c/-?+o6");
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, (String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("hgb%-hc|#uq");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.renderCreateTable(defaultDBTable0, false, (NameSpec) null, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(":;]@n9wj%#}0+r=\"");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, false, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("alter index@f=!7jmyg)#sy?_^+");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("U,/", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance(5010, "wOUh=g9{JL(e7#qC\"");
      Integer integer0 = new Integer((-48779728));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("x}(tg>~S", defaultDBTable0, dBDataType0, integer0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("K89.)RDmlq", defaultDBTable0, 39, "alter table");
      defaultDBColumn0.setVersionColumn(true);
      StringBuilder stringBuilder0 = new StringBuilder("k89.)rdmlq");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("k89.)rdmlqALTER TABLE", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("DATE");
      DBDataType dBDataType0 = DBDataType.getInstance("DATE");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("DATE", defaultDBTable0, dBDataType0, integer0);
      StringBuilder stringBuilder0 = new StringBuilder();
      defaultDBColumn0.setNullable(false);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("DATE", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("K89.)RDmlq", defaultDBTable0, 39, "alter table");
      defaultDBColumn0.setVersionColumn(true);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("ALTER TABLE", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("ex:?ccannot bdd", defaultDBTable0, (-2372), "ex:?ccannot bdd");
      DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, (String) null, true, "ex:?ccannot bdd");
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("EX:?CCANNOT BDD", string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((DBColumn[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(, , , , , , )", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("()", string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnListWithTableName("MZiys\"&CIYp!clRTth", stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = SQLUtil.renderColumnListWithTableName((String) null, stringArray0);
      assertEquals("null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null", string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = SQLUtil.renderColumnListWithTableName("", stringArray0);
      assertEquals(".null, .null", string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("K89.)RDmlq", defaultDBTable0, 39, "alter table");
      defaultDBColumn0.setVersionColumn(true);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("K89.)RDmlq ALTER TABLE NULL", string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      byte[] byteArray0 = new byte[7];
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream(byteArray0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(dynamicByteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("DATE");
      String[] stringArray0 = new String[6];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("drop indexalteq materialized view", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = SQLUtil.removeComments("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, (NameSpec) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String[] stringArray0 = new String[5];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "autoServer && serverList != null", true, stringArray0);
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"autoServer && serverList != null\" PRIMARY KEY (, , , , )", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("");
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CompositeDBObject<DBNotNullConstraint> compositeDBObject0 = (CompositeDBObject<DBNotNullConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(compositeDBObject0).getName();
      doReturn((CompositeDBObject) null).when(compositeDBObject0).getOwner();
      String string0 = SQLUtil.ownerDotComponent(compositeDBObject0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = SQLUtil.normalize("", false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = SQLUtil.leftJoin((String) null, stringArray0, stringArray0[5], stringArray0[4], stringArray0);
      assertEquals("left join null as null on null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null", string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = SQLUtil.leftJoin("M!,l9L~\"l3 hsnx", stringArray0, (String) null, "Z:dbc(", stringArray0);
      assertEquals("left join null as Z:dbc( on M!,l9L~\"l3 hsnx.null = Z:dbc(.null and M!,l9L~\"l3 hsnx.null = Z:dbc(.null and M!,l9L~\"l3 hsnx.null = Z:dbc(.null", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.leftJoin("MZiys\"&CIYp!clRTth", stringArray0, "", "6<6Pa/F~9g'AfM@A", stringArray0);
      assertEquals("left join  as 6<6Pa/F~9g'AfM@A on ", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = SQLUtil.leftJoin((String) null, stringArray0, "wOUh=g9{JL(e7#qC\"", "VT)ZHRE4?*", stringArray0);
      assertEquals("left join wOUh=g9{JL(e7#qC\" as VT)ZHRE4?* on null.null = VT)ZHRE4?*.null and null.null = VT)ZHRE4?*.null", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = SQLUtil.leftJoin("", stringArray0, "", "", stringArray0);
      assertEquals("left join  as  on .null = .null and .null = .null and .null = .null and .null = .null and .null = .null and .null = .null and .null = .null", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = SQLUtil.join("drop m", "drop m", stringArray0, "drop m", (String) null, stringArray0);
      assertEquals("drop m join drop m as null on drop m.null = null.null and drop m.null = null.null and drop m.null = null.null and drop m.null = null.null and drop m.null = null.null and drop m.null = null.null", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = SQLUtil.join("2%^sM'de%A=L7", "d);", stringArray0, "anL", "", stringArray0);
      assertEquals("2%^sM'de%A=L7 join anL as  on d);.null = .null and d);.null = .null", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = SQLUtil.join("m?#J%~Z,z", "delete", stringArray0, (String) null, "h2.defaultMaxLengthInplaceLob2", stringArray0);
      assertEquals("m?#J%~Z,z join null as h2.defaultMaxLengthInplaceLob2 on delete.null = h2.defaultMaxLengthInplaceLob2.null and delete.null = h2.defaultMaxLengthInplaceLob2.null", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.join((String) null, (String) null, stringArray0, "", "updateClob", stringArray0);
      assertEquals(" as updateClob on ", string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("", (String[]) null, "", "", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.innerJoin("renamejj\"/:^w", stringArray0, "scale", "i 6dg", stringArray0);
      assertEquals("scale as i 6dg on ", string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = SQLUtil.innerJoin("", stringArray0, ")g|XT", "", stringArray0);
      assertEquals(")g|XT as  on .null = .null and .null = .null", string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("DATE", (DBSchema) null);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("drop materialized viewcallleft join null as create unique indexwhere on null.null = create unique indexwhere.null and null.null = create unique indexwhere.null", true, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY () REFERENCES DATE()", string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("ex:?ccannot bdd", defaultDBTable0, (-2372), "ex:?ccannot bdd");
      DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, (String) null, true, "ex:?ccannot bdd");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBNotNullConstraint0, nameSpec0);
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition((String) null, stringBuilder0);
      assertEquals("null", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("", stringBuilder0);
      assertEquals("", stringBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("", stringBuilder0);
      assertEquals("", stringBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("DATE", (DBSchema) null);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("org.databene.jdbacl.SQLUtil A1I3(0) NULL", false, defaultDBTable0, "rename");
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, "create unique indexg&27b:", dBCheckConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String[] stringArray0 = new String[2];
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null, stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("y{D5%hGLj!^?Z)4", false, "y{D5%hGLj!^?Z)4", "asci");
      genericDescriptorList0.add((Object) dBCheckConstraint0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) genericDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.databene.jdbacl.model.DBCheckConstraint cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("alter tablecallleft join null as create unique indexwhere on null.null = create unique indexwhere.null and null.null = create unique indexwhere.null", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(ynWxY`G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (ynWxY`G
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("y{D5%hGLj!^?Z)4", (String[]) null, "HD{?qU", "KLa00;_nzJ (.v", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String[] stringArray1 = new String[3];
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("a,u", stringArray0, "org.apache.derby.impl.sql.execute.rts.RealVTIStatistics", "alter materialized view", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join("", "g&27B:", (String[]) null, "-rc7!>`NV&c", "PN&0[7E~", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String[] stringArray1 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.join("deleteg&27b:", "f*ai/}", stringArray0, "update", "org.apache.derby.iapi.types.SQLBlob", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin((String) null, (String[]) null, (String) null, (String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String[] stringArray1 = new String[2];
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("org.firebirdsql.jdbc.field.TypeConvertionException", stringArray0, "nH:VNnwPf", "org.firebirdsql.jdbc.field.TypeConvertionException", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create table");
      String[] stringArray0 = new String[6];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "EYAv4~{NHyfM(", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String[] stringArray0 = new String[2];
      DBSchema dBSchema0 = new DBSchema("drop tablet\ng9s.q=b1.");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("3k_mPJr", dBSchema0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "wOUh=g9{JL(e7#qC\"", true, stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("X3<:5PWH7t([T~I$WX", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition((String) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = SQLUtil.normalize("/*", false);
      assertEquals("/*", string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = "!,.<~lYzS@";
      String[] stringArray0 = new String[11];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("!,.<~lYzS@");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "!,.<~lYzS@", false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      String string1 = ";9&$PMX)6|H]KW&A]yw";
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("CONSTRAINT ");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[6];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      // Undeclared exception!
      try { 
        stringBuilder0.append((CharSequence) null, (-2205), 520);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start -2205, end 520, s.length() 4
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML(">");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[4];
      String string0 = SQLUtil.leftJoin(">", stringArray0, "dnfgJ@:", "dnfgJ@:", stringArray0);
      assertEquals("left join dnfgJ@: as dnfgJ@: on >.null = dnfgJ@:.null and >.null = dnfgJ@:.null and >.null = dnfgJ@:.null and >.null = dnfgJ@:.null", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("into");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("Aks=G) <6_8}?`(}", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      StringBuilder stringBuilder1 = stringBuilder0.reverse();
      assertEquals("", stringBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[3];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "exec", false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      String string0 = "OhL,@ XE[+";
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      String[] stringArray0 = new String[5];
      stringArray0[4] = "jHH>";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "4Y9FXXVd&f3O'", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT 4Y9FXXVd&f3O' UNIQUE (, , , , jHH>)", string0);
      
      String string1 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("CONSTRAINT 4Y9FXXVd&f3O' ", string1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      SQLUtil.isProcedureCall("execute");
      DBDataType dBDataType0 = DBDataType.getInstance((-540), "truncate");
      assertEquals("TRUNCATE", dBDataType0.toString());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("drop table");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      SQLUtil.renderColumnNames((String[]) null);
      SQLUtil.renderValue("()");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      Integer integer0 = new Integer((-79749284));
      DBDataType dBDataType0 = DBDataType.getInstance((-79749284), "q`NPK>EX6X4o");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0, integer0);
      StringBuilder stringBuilder0 = new StringBuilder("");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("Q`NPK>EX6X4O(-79749284)", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("DATE");
      DBDataType dBDataType0 = DBDataType.getInstance("DATE");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("DATE", defaultDBTable0, dBDataType0, integer0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("DATE", stringBuilder0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("DATEDATE", stringBuilder0.toString());
      
      String string0 = SQLUtil.normalize("xi", true);
      assertEquals("xi", string0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-204), "CONSTRAINT tc ");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = new Integer((-204));
      StringBuilder stringBuilder0 = new StringBuilder(" on ");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("tc", defaultDBTable0, dBDataType0, integer1, integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("DATE", (DBSchema) null);
      DBDataType dBDataType0 = DBDataType.getInstance("DATE");
      Integer integer0 = new Integer((-2));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("DATE", defaultDBTable0, dBDataType0, integer0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("9qdqwMZsRC}_^b96 }", defaultDBTable0, 1598, "&gU?D*I;+fJBF0}ESt");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("DATE DATE NULL", string0);
      
      TableContainer tableContainer0 = new TableContainer(string0);
      assertEquals("DATE DATE NULL", tableContainer0.getName());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(".", defaultDBTable0, 320, "getSaepointName");
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn((String) null, defaultDBTable0, 110, "[*");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[*");
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getName());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("", "updateillegal column type format:", "left join wOUh=g9{JL(e7#qC\" as VT)ZHRE4?* on null. = VT)ZHRE4?*. and null.null = VT)ZHRE4?*.null");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String[] stringArray0 = null;
      SQLUtil.renderColumnNames((String[]) null);
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("BJ1F");
      DBSchema dBSchema0 = new DBSchema("BJ1F", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("BJ1F", dBSchema0);
      String[] stringArray0 = new String[8];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("BJ1F", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" r! Y");
      String[] stringArray0 = new String[5];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(" r! Y", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \" r! Y\" FOREIGN KEY (, , , , ) REFERENCES  r! Y(, , , , )", string0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringReader stringReader0 = new StringReader("FUNCNAME");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = 1902.272548214;
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("1902.272548214", string0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StringReader stringReader0 = new StringReader("`>ndm");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      streamTokenizer0.nval = streamTokenizer0.nval;
      streamTokenizer0.nval = (double) 39;
      SQLUtil.renderNumber(streamTokenizer0);
      String string0 = SQLUtil.removeComments("k6>R+_pZ");
      assertEquals("k6>R+_pZ", string0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StringReader stringReader0 = new StringReader("tc");
      String string0 = SQLUtil.normalize("tc", false);
      assertEquals("tc", string0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      String string1 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string1);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StringReader stringReader0 = new StringReader("_`>ndm");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = (-3111.78358);
      SQLUtil.renderNumber(streamTokenizer0);
      DBColumn[] dBColumnArray0 = null;
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = "M!,l9L~\"l3 hsnx";
      SQLUtil.normalize("M!,l9L~\"l3 hsnx", false);
      String string1 = "renameadd";
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = SQLUtil.normalize("*/", false);
      assertEquals("*/", string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("alteqp");
      String string0 = SQLUtil.normalize("e$ecuteselect * from", false);
      assertEquals("e $ ecuteselect * from", string0);
      
      boolean boolean1 = SQLUtil.isDML("drop table");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      SQLUtil.normalize("select into-%tejl(ogmza", true);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("UNIQUE ");
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = SQLUtil.normalize("!,.<~lYzS@", true);
      assertEquals("!,.< ~ lYzS @", string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLUtil.normalize("VT)ZHRE4?*", true);
      CompositeDBObject<DBNotNullConstraint> compositeDBObject0 = (CompositeDBObject<DBNotNullConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      SQLUtil.isDML("/fWlOL0\\'T5");
      SQLUtil.normalize("l0l--6T^x'", false);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "z.x1 } R ]./ V");
      CompositeDBObject<DBNotNullConstraint> compositeDBObject0 = (CompositeDBObject<DBNotNullConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(compositeDBObject0).getName();
      doReturn((String) null).when(compositeDBObject0).getObjectType();
      String string0 = SQLUtil.typeAndName(compositeDBObject0);
      assertEquals("null null", string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      defaultDBTable0.getIndexes();
      SQLUtil.typeAndName(dBForeignKeyConstraint0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("ex:?ccannot bdd", defaultDBTable0, (-2372), "ex:?ccannot bdd");
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("ex:?ccannot bdd", string0);
      
      String string1 = SQLUtil.typeAndName(dBColumnArray0[0]);
      assertEquals("column ex:?ccannot bdd", string1);
      assertNotNull(string1);
      
      String string2 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("EX:?CCANNOT BDD", string2);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("tc", false, "tc", "tc");
      SQLUtil.constraintName(dBCheckConstraint0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Boolean boolean0 = new Boolean("");
      String[] stringArray0 = new String[2];
      boolean boolean1 = SQLUtil.isQuery("null = null AND null = null");
      assertFalse(boolean1);
      
      DBSchema dBSchema0 = new DBSchema("drop tablet\ng9s.q=b1.");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("3k_mPJr", dBSchema0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      dBPrimaryKeyConstraint0.setDoc((String) null);
      String string0 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("", string0);
      
      String string1 = SQLUtil.join("null = null AND null = null", "VT)ZHRE4?*", stringArray0, "CURRENT ISOLATION", "VT)ZHRE4?*", stringArray0);
      assertEquals("null = null AND null = null join CURRENT ISOLATION as VT)ZHRE4?* on VT)ZHRE4?*.null = VT)ZHRE4?*.null and VT)ZHRE4?*.null = VT)ZHRE4?*.null", string1);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "alter index", false, (String[]) null);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.parseColumnTypeAndSize("create tablealteq materialized view");
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("alte");
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("DATE", (DBSchema) null);
      String string0 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("DATE", string0);
      
      String[] stringArray0 = new String[8];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "execute", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (, , , , , , , )", string1);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("a~teq terialized kxew", stringBuilder0);
      SQLUtil.isQuery("SELECT * FROM ");
      SQLUtil.addOptionalCondition("a~teq terialized kxew", stringBuilder1);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("yajQ+Fv'-3S>", stringBuilder0);
      SQLUtil.addRequiredCondition("drop table", stringBuilder0);
      assertEquals("yajQ+Fv'-3S> and drop table", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("yajQ+Fv'-3S>", stringBuilder0);
      assertEquals("yajQ+Fv'-3S>", stringBuilder0.toString());
      
      Boolean boolean0 = SQLUtil.mutatesStructure("callleft join null as create unique indexwhere on null.null = create unique indexwhere.null and null.null = create unique indexwhere.null");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = SQLUtil.join((String) null, "", stringArray0, "", "~", stringArray0);
      assertEquals(" as ~ on .null = ~.null and .null = ~.null and .null = ~.null and .null = ~.null and .null = ~.null and .null = ~.null and .null = ~.null and .null = ~.null", string0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, (NameSpec) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("p2?'0K\"/P!?9S;YYi|[");
      String[] stringArray0 = new String[8];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("p2?'0K\"/P!?9S;YYi|[", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT p2?'0K\"/P!?9S;YYi|[ FOREIGN KEY (, , , , , , , ) REFERENCES p2?'0K\"/P!?9S;YYi|[(, , , , , , , )", string0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("x`?VS=G");
      String[] stringArray0 = new String[1];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "{+glhN(jp/", true, stringArray0);
      SQLUtil.removeComments("select into");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT {+glhN(jp/ PRIMARY KEY ()", string0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = "/*";
      // Undeclared exception!
      SQLUtil.mutatesStructure("/*");
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("drop indexdefault");
      SQLUtil.isQuery("select into - % tejl (ogmza ");
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("UNIQUE ");
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("deleteg&27b:");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("deleteg&27b:");
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = SQLUtil.mutatesStructure("deleteg&27b:");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      SQLUtil.isDDL("/fWlOL0\\'T5");
      SQLUtil.mutatesDataOrStructure("select join  =  as create materialized view on select./fWlOL0\\'T5 = create materialized view./fWlOL0\\'T5");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      SQLUtil.isDDL(",AJ#.8},");
      SQLUtil.mutatesDataOrStructure("drop table");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("alter sessionillegl colu");
      String string0 = "%]";
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Character character0 = Character.valueOf('m');
      String string0 = SQLUtil.renderValue(character0);
      // Undeclared exception!
      try { 
        DBDataType.getInstance(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      SQLUtil.normalize("z.x1}R]./V", true);
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Boolean boolean0 = new Boolean("");
      String[] stringArray0 = new String[2];
      String string0 = SQLUtil.normalize("z.x1}R]./V", true);
      assertEquals("z.x1 } R ]./ V", string0);
      
      String string1 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null", string1);
      
      String string2 = SQLUtil.join("null = null AND null = null", "VT)ZHRE4?*", stringArray0, "CURRENT ISOLATION", "VT)ZHRE4?*", stringArray0);
      assertEquals("null = null AND null = null join CURRENT ISOLATION as VT)ZHRE4?* on VT)ZHRE4?*.null = VT)ZHRE4?*.null and VT)ZHRE4?*.null = VT)ZHRE4?*.null", string2);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("DATE", (DBSchema) null);
      DBDataType dBDataType0 = DBDataType.getInstance("DATE");
      dBDataType0.isAlpha();
      Integer integer0 = new Integer((-2));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("DATE", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.setDefaultValue("DATE");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("DATE DATE DEFAULT DATE NULL", string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("_`>ndm", defaultDBTable0, 39, "alter table");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("alter table", defaultDBTable0, 39, "update");
      List<DBColumn> list0 = defaultDBTable0.getColumns();
      SQLUtil.renderColumnNames(list0);
      boolean boolean0 = false;
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(".", defaultDBTable0, 320, "getSavepointName");
      DBColumn[] dBColumnArray0 = new DBColumn[3];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = "sel_ct into-%tejl(ogmza";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("sel_ct into-%tejl(ogmza");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("renameplk9aj1b\u0001=oges");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.mutatesDataOrStructure("Ah|;LuY&A!t");
      String[] stringArray0 = new String[5];
      stringArray0[4] = "Ah|;LuY&A!t";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("=|yufv", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      defaultDBTable0.addForeignKey(dBForeignKeyConstraint0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("DATE");
      DBDataType.getInstance("DATE");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("(##j/Rq-!G_Mo|`(3w");
      Integer.compareUnsigned(0, (-358856173));
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Fo1H9'(>'bvG\"RB8n", true, stringArray0);
      SQLUtil.renderValue(dBPrimaryKeyConstraint0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      String string0 = "\nFROM ";
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[9];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      int int0 = (-910);
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn(":p( u!", defaultDBTable0, (-910), ":p( u!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: :p( u!
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("()");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      StringReader stringReader0 = new StringReader("tc");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("tc", false, "tc", "tc");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      DBDataType.getInstance(2, "alter index");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("execa~teq terialized kxew");
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM execa~teq terialized kxew WHERE ", string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      // Undeclared exception!
      try { 
        DBDataType.getInstance("~>vtbJL");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }
}
