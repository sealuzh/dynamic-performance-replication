/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 03 15:06:26 GMT 2019
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileDescriptor;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.Future;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.ResultItems;
import us.codecraft.webmagic.Site;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.downloader.Downloader;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.monitor.SpiderMonitor;
import us.codecraft.webmagic.pipeline.CollectorPipeline;
import us.codecraft.webmagic.pipeline.ConsolePipeline;
import us.codecraft.webmagic.pipeline.FilePipeline;
import us.codecraft.webmagic.pipeline.JsonFilePipeline;
import us.codecraft.webmagic.pipeline.MultiPagePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.pipeline.ResultItemsCollectorPipeline;
import us.codecraft.webmagic.processor.PageProcessor;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.PriorityScheduler;
import us.codecraft.webmagic.scheduler.QueueScheduler;
import us.codecraft.webmagic.scheduler.Scheduler;
import us.codecraft.webmagic.scheduler.component.HashSetDuplicateRemover;
import us.codecraft.webmagic.selector.Json;
import us.codecraft.webmagic.selector.ReplaceSelector;
import us.codecraft.webmagic.selector.SmartContentSelector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=d-twW/}03S~r1");
      Spider spider0 = new Spider(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider1 = spider0.thread((ExecutorService) forkJoinPool0, 5);
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=-twW/}03S~r1");
      Spider spider0 = new Spider(simplePageProcessor0);
      assertTrue(spider0.isExitWhenComplete());
      
      Request request0 = new Request("=-twW/}03S~r1");
      // Undeclared exception!
      try { 
        spider0.onError(request0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("4~<d^;F83v8TFUh@");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      Page page0 = new Page();
      List<Request> list0 = page0.getTargetRequests();
      spider1.startRequest(list0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "4~<d^;F83v8TFUh@";
      stringArray0[1] = "4~<d^;F83v8TFUh@";
      stringArray0[2] = "4~<d^;F83v8TFUh@";
      stringArray0[3] = "4~<d^;F83v8TFUh@";
      stringArray0[4] = "";
      spider0.setExitWhenComplete(false);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider2 = spider1.setScheduler(priorityScheduler0);
      PriorityBlockingQueue<String> priorityBlockingQueue0 = new PriorityBlockingQueue<String>();
      // Undeclared exception!
      try { 
        spider2.getAll((Collection<String>) priorityBlockingQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("4~<d^;F83v8TFUh@");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      Page page0 = new Page();
      List<Request> list0 = page0.getTargetRequests();
      Spider spider2 = spider1.startRequest(list0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "4~<d^;F83v8TFUh@";
      stringArray0[1] = "4~<d^;F83v8TFUh@";
      stringArray0[2] = "4~<d^;F83v8TFUh@";
      stringArray0[3] = "4~<d^;F83v8TFUh@";
      stringArray0[4] = "";
      stringArray0[5] = "4~<d^;F83v8TFUh@";
      stringArray0[6] = "4~<d^;F83v8TFUh@";
      stringArray0[7] = "4~<d^;F83v8TFUh@";
      stringArray0[8] = "4~<d^;F83v8TFUh@";
      // Undeclared exception!
      try { 
        spider2.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("%20");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request[] requestArray0 = new Request[1];
      Request request0 = new Request("%20");
      Request request1 = request0.setCharset("_");
      requestArray0[0] = request1;
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("xe!0N`#ap");
      Spider spider0 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.thread(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider1 = spider0.setSpiderListeners(linkedList0);
      Scheduler scheduler0 = null;
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      Spider[] spiderArray0 = new Spider[6];
      spiderArray0[0] = spider0;
      spiderArray0[1] = spider1;
      spiderArray0[2] = spider1;
      spiderArray0[3] = spider0;
      spiderArray0[4] = spider0;
      spiderArray0[5] = spider0;
      // Undeclared exception!
      try { 
        spiderMonitor0.register(spiderArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=d-twW/}03S~r1");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.sleep(4215);
      // Undeclared exception!
      try { 
        spider0.extractAndAddRequests((Page) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=-twW/}03S~r1");
          Spider spider0 = new Spider(simplePageProcessor0);
          MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
          spider0.addPipeline(multiPagePipeline0);
          Spider spider1 = spider0.setExitWhenComplete(false);
          PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("=-twW/}03S~r1", "=-twW/}03S~r1");
          spider1.downloader(phantomJSDownloader0);
          Spider.Status spider_Status0 = Spider.Status.Stopped;
          spider_Status0.getValue();
          Spider.Status.values();
          Request[] requestArray0 = new Request[5];
          Request request0 = new Request();
          Request request1 = request0.setMethod("");
          Request request2 = request1.setUrl("");
          Request request3 = request2.setBinaryContent(true);
          Request request4 = request3.addCookie(":y~-` OEhoVA/9UV", "");
          requestArray0[0] = request4;
          Request request5 = request1.setBinaryContent(true);
          requestArray0[1] = request5;
          Request request6 = request0.setBinaryContent(false);
          requestArray0[2] = request6;
          Request request7 = request2.setCharset("");
          requestArray0[3] = request7;
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileWriter mockFileWriter0 = null;
          try {
            mockFileWriter0 = new MockFileWriter(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // java.io.FileWriter.<init>(FileWriter.java:116)
             // org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:233)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=-twW/}03S~r1");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "=-twW/}03S~r1");
      Request[] requestArray0 = new Request[0];
      spider0.addRequest(requestArray0);
      spider0.setExitWhenComplete(true);
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider1 = spider0.pipeline(filePipeline0);
      spider1.isSpawnUrl();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "/";
      stringArray0[1] = "/";
      stringArray0[2] = "/";
      stringArray0[3] = "=-twW/}03S~r1";
      stringArray0[4] = "download page {} error";
      stringArray0[5] = "/";
      stringArray0[6] = "=-twW/}03S~r1";
      // Undeclared exception!
      try { 
        spider0.test(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=-twW/}03S~r1");
      Spider spider0 = new Spider(simplePageProcessor0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider1 = spider0.addPipeline(multiPagePipeline0);
      spider1.setExitWhenComplete(false);
      Request[] requestArray0 = new Request[0];
      spider0.addRequest(requestArray0);
      spider0.setExitWhenComplete(true);
      FilePipeline filePipeline0 = new FilePipeline();
      spider0.pipeline(filePipeline0);
      // Undeclared exception!
      try { 
        spider1.get("=-twW/}03S~r1");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=-twW/}03S~r1");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request[] requestArray0 = new Request[0];
      Spider spider1 = spider0.addRequest(requestArray0);
      assertSame(spider1, spider0);
      
      spider0.setExitWhenComplete(true);
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider2 = spider0.pipeline(filePipeline0);
      spider2.isSpawnUrl();
      assertTrue(spider2.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("r");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.start();
      Request[] requestArray0 = new Request[0];
      Spider spider1 = spider0.addRequest(requestArray0);
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("url:\t");
      Spider spider0 = new Spider(simplePageProcessor0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider1 = spider0.addPipeline(multiPagePipeline0);
      Spider spider2 = spider1.setExitWhenComplete(true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Spider spider3 = spider2.addPipeline(multiPagePipeline0);
      Spider spider4 = spider0.clearPipeline();
      Site site0 = simplePageProcessor0.getSite();
      spider4.site = site0;
      spider2.getThreadAlive();
      // Undeclared exception!
      try { 
        spider3.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Request request0 = new Request(" stop fail!");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      Request request1 = request0.putExtra("_cycle_tried_times", "_cycle_tried_times");
      request1.setBinaryContent(true);
      request1.setCharset(" stop fail!");
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Spider");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID((String) null);
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("url:\t");
      Spider spider0 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.test((String[]) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=d-twW/}03S~r1");
      Spider spider0 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.thread((-1182));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("0vfSFb4]@Tg");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("0vfSFb4]@Tg", "0vfSFb4]@Tg");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Page page0 = new Page();
      phantomJSDownloader0.setThread(0);
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      assertEquals(Spider.Status.Init, spider2.getStatus());
      
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      spider0.getAll((Collection<String>) linkedTransferQueue0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      spider0.getAll((Collection<String>) linkedTransferQueue0);
      LinkedList<Pipeline> linkedList1 = new LinkedList<Pipeline>();
      spider1.pageProcessor = (PageProcessor) simplePageProcessor0;
      spider2.close();
      spider2.getStatus();
      assertEquals(Spider.Status.Stopped, spider2.getStatus());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=-tw/}03S~r1");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request[] requestArray0 = new Request[4];
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=-twW/}03S~r1");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("=-twW/}03S~r1");
      Spider spider1 = spider0.scheduler(fileCacheQueueScheduler0);
      // Undeclared exception!
      try { 
        spider1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.FileCacheQueueScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("0vfSFb4]@Tg");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("0vfSFb4]@Tg", "0vfSFb4]@Tg");
      Page.fail();
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      spider0.getAll((Collection<String>) linkedTransferQueue0);
      spider1.run();
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=-twW/}03S~r1");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request request0 = new Request();
      Request request1 = request0.setPriority(1559L);
      Request request2 = request1.setMethod("_cycle_tried_times");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Request request3 = request2.setExtras(hashMap0);
      // Undeclared exception!
      try { 
        spider0.onSuccess(request3);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=-twW/}03S~r1");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request request0 = new Request();
      // Undeclared exception!
      try { 
        spider0.onSuccess(request0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("atkNi5");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = Spider.create(simplePageProcessor0);
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("url:\t");
      Spider spider0 = new Spider(simplePageProcessor0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider1 = spider0.addPipeline(multiPagePipeline0);
      Spider spider2 = spider1.setExitWhenComplete(true);
      spider2.destroyWhenExit = false;
      Spider spider3 = spider2.setPipelines((List<Pipeline>) null);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider4 = spider3.setPipelines(linkedList0);
      assertTrue(spider4.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Init");
      Spider spider0 = new Spider(simplePageProcessor0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider1 = spider0.setUUID("Init");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Init");
      Spider spider2 = spider1.addPipeline(multiPagePipeline0);
      Spider spider3 = spider1.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(":", "~RC7<-UTM)CJFlq");
      Spider spider4 = spider3.setDownloader(phantomJSDownloader0);
      spider4.stop();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      forkJoinPool0.getFactory();
      spider0.thread((ExecutorService) forkJoinPool0, 1921);
      spider2.thread(1921);
      spider3.setSpawnUrl(false);
      assertFalse(spider3.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=d-twW/}03S~r1");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("=d-twW/}03S~r1");
      Spider spider1 = spider0.scheduler(fileCacheQueueScheduler0);
      String string0 = spider1.getUUID();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("r&GALvc");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("_");
      Spider spider0 = Spider.create(simplePageProcessor1);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      List<String> list0 = spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      Json json0 = new Json(list0);
      Class<SpiderListener> class0 = SpiderListener.class;
      json0.toList(class0);
      spider0.setSpiderListeners((List<SpiderListener>) null);
      Class<Request> class1 = Request.class;
      json0.toList(class1);
      Spider spider1 = spider0.startRequest((List<Request>) null);
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) list0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("E5a@T,GCe?pp");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.stop();
      ForkJoinTask.getPool();
      Spider spider1 = spider0.setExecutorService((ExecutorService) null);
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=-twW/}03S~r1");
      Spider spider0 = new Spider(simplePageProcessor0);
      Page page0 = new Page();
      // Undeclared exception!
      try { 
        spider0.extractAndAddRequests(page0, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=-twW/}03S~r1");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request[] requestArray0 = new Request[0];
      spider0.addRequest(requestArray0);
      Spider spider1 = spider0.setExitWhenComplete(true);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1727, threadFactory0);
      scheduledThreadPoolExecutor0.setExecuteExistingDelayedTasksAfterShutdownPolicy(true);
      // Undeclared exception!
      try { 
        spider1.thread((ExecutorService) scheduledThreadPoolExecutor0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("r&GALvc");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("r&GALvc");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.getUUID();
      Spider.Status spider_Status0 = spider0.getStatus();
      assertEquals(Spider.Status.Init, spider_Status0);
      
      spider0.isSpawnUrl();
      assertEquals(Spider.Status.Init, spider0.getStatus());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("kCl0MV3z.Qw_?b[Kca");
      Spider spider0 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=d-twW/}03S~r1");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.thread(657);
      assertSame(spider1, spider0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      int int0 = (-2606);
      // Undeclared exception!
      try { 
        spider0.thread((-2606));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("xe!0N`#ap");
      Spider spider0 = new Spider(simplePageProcessor0);
      CollectorPipeline collectorPipeline0 = spider0.getCollectorPipeline();
      spider0.addPipeline(collectorPipeline0);
      spider0.setExitWhenComplete(true);
      // Undeclared exception!
      try { 
        spider0.get(":YDm^zN1b|~C5nhz;S ");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=d-twW/}03S~r1");
      Spider spider0 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.extractAndAddRequests((Page) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=-twW/}03S~r1");
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("=-twW/}03S~r1");
      Spider spider0 = new Spider(simplePageProcessor0);
      ForkJoinTask.getPool();
      Spider spider1 = spider0.thread((ExecutorService) null, 2100);
      Spider spider2 = spider1.setSpawnUrl(false);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider3 = spider2.setScheduler(priorityScheduler0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      Spider spider4 = spider3.pipeline(jsonFilePipeline0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider5 = spider4.setPipelines(linkedList0);
      spider5.scheduler(fileCacheQueueScheduler0);
      // Undeclared exception!
      try { 
        spider0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.FileCacheQueueScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)12;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Spider {} closed! {} pages downloaded.");
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Locale locale0 = Locale.TAIWAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.downloader((Downloader) null);
      Spider spider2 = spider1.thread(3);
      spider2.setDownloader((Downloader) null);
      // Undeclared exception!
      try { 
        spider2.getAll((Collection<String>) set0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("]fxF1%<,");
      Spider spider0 = Spider.create(simplePageProcessor0);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      spider0.setExitWhenComplete(false);
      // Undeclared exception!
      try { 
        spider0.get("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("]fxF1%<,");
      Spider spider0 = Spider.create(simplePageProcessor0);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      List<String> list0 = spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      Json json0 = new Json(list0);
      Class<SpiderListener> class0 = SpiderListener.class;
      json0.toList(class0);
      spider0.setSpiderListeners((List<SpiderListener>) null);
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) list0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("]fxF1%<,");
      Spider spider0 = Spider.create(simplePageProcessor0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider1 = spider0.addPipeline(multiPagePipeline0);
      Spider spider2 = spider1.setExitWhenComplete(false);
      // Undeclared exception!
      try { 
        spider2.get((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=-twW/}03S~r1");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request[] requestArray0 = new Request[0];
      spider0.addRequest(requestArray0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("=-twW/}03S~r1");
      Page page0 = new Page();
      // Undeclared exception!
      try { 
        spider0.extractAndAddRequests(page0, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=-twW/}03S~r1");
      Spider spider0 = new Spider(simplePageProcessor0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      // Undeclared exception!
      try { 
        spider0.extractAndAddRequests((Page) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=-twW/}03S~r1");
      Spider spider0 = null;
      try {
        spider0 = new Spider((PageProcessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=d-twW/}03S~r1");
      Spider spider0 = new Spider(simplePageProcessor0);
      Locale locale0 = Locale.TAIWAN;
      CollectorPipeline collectorPipeline0 = spider0.getCollectorPipeline();
      Spider spider1 = spider0.addPipeline(collectorPipeline0);
      // Undeclared exception!
      try { 
        spider1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("url:\t");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.setEmptySleepTime(17);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      
      Spider spider1 = spider0.setExitWhenComplete(true);
      int int0 = spider1.getThreadAlive();
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=-twW/}03S~r1");
      Spider spider0 = new Spider(simplePageProcessor0);
      Page page0 = new Page();
      spider0.extractAndAddRequests(page0, false);
      assertEquals(Spider.Status.Init, spider0.getStatus());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Init");
      Spider spider0 = new Spider(simplePageProcessor0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider1 = spider0.addPipeline(multiPagePipeline0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Init");
      Spider spider2 = spider1.addPipeline(multiPagePipeline0);
      spider2.addPipeline(multiPagePipeline0);
      Spider spider3 = spider2.clearPipeline();
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("Init");
      simplePageProcessor1.getSite();
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider4 = spider3.setSpiderListeners(linkedList0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("{fq3Hy");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      Spider spider5 = spider4.scheduler(duplicateRemovedScheduler0);
      spider5.clearPipeline();
      SimplePageProcessor simplePageProcessor2 = new SimplePageProcessor(" ,DW@j\"O(d>");
      spider0.getThreadAlive();
      // Undeclared exception!
      try { 
        spider1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.FileCacheQueueScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=dktwW/}03S~r1");
      Spider spider0 = new Spider(simplePageProcessor0);
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      Request request0 = new Request();
      Request request1 = request0.setUrl("=dktwW/}03S~r1");
      Request request2 = request1.addCookie("=dktwW/}03S~r1", "_cycle_tried_times");
      Request request3 = request2.setBinaryContent(true);
      // Undeclared exception!
      try { 
        spider0.onError(request3);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = "=-twW/}03S~r1";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=-twW/}03S~r1");
      Spider spider0 = new Spider(simplePageProcessor0);
      boolean boolean0 = true;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "=-twW/}03S~r1");
      Request[] requestArray0 = new Request[0];
      Spider spider1 = spider0.addRequest(requestArray0);
      Page page0 = Page.fail();
      // Undeclared exception!
      try { 
        spider1.extractAndAddRequests(page0, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=-twW/}03S~r1");
      Spider spider0 = new Spider(simplePageProcessor0);
      Page page0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        spider0.sleep((-1735));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("url:\t");
      Spider spider0 = new Spider(simplePageProcessor0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider1 = spider0.addPipeline(multiPagePipeline0);
      Spider spider2 = spider1.setExitWhenComplete(true);
      spider2.destroyWhenExit = false;
      Spider spider3 = spider2.clearPipeline();
      int int0 = spider3.getThreadAlive();
      assertEquals(0, int0);
      assertTrue(spider3.isExitWhenComplete());
      
      spider2.getScheduler();
      Spider.Status[] spider_StatusArray0 = Spider.Status.values();
      assertEquals(3, spider_StatusArray0.length);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("0vfSFb4]@Tg");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("0vfSFb4]@Tg", "0vfSFb4]@Tg");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Page.fail();
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      spider1.startRequests = (List<Request>) linkedList0;
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      spider0.getAll((Collection<String>) linkedTransferQueue0);
      LinkedList<Pipeline> linkedList1 = new LinkedList<Pipeline>();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "0vfSFb4]@Tg";
      // Undeclared exception!
      try { 
        spider2.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=d-twW/}03S~r1");
      Spider spider0 = new Spider(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      // Undeclared exception!
      try { 
        spider0.thread((ExecutorService) forkJoinPool0, (-3301));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = "Running";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Running");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider2 = spider1.scheduler(queueScheduler0);
      Spider spider3 = spider2.setExitWhenComplete(false);
      Spider spider4 = spider3.setScheduler(queueScheduler0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Running";
      stringArray0[1] = "Running";
      // Undeclared exception!
      try { 
        spider4.initComponent();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("url:\t");
      Spider spider0 = new Spider(simplePageProcessor0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider1 = spider0.addPipeline(multiPagePipeline0);
      spider0.getUUID();
      Spider spider2 = spider1.setExitWhenComplete(true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      spider1.clearPipeline();
      int int0 = spider2.getThreadAlive();
      assertEquals(0, int0);
      
      boolean boolean0 = spider2.isExitWhenComplete();
      assertTrue(boolean0);
      
      spider1.setEmptySleepTime((-2123));
      assertTrue(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("0vfSFb4]@Tg");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("0vfSFb4]@Tg", "0vfSFb4]@Tg");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Page.fail();
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      spider1.startRequests = (List<Request>) linkedList0;
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      spider0.getAll((Collection<String>) linkedTransferQueue0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.poll(spider1);
      linkedList0.add((Request) null);
      LinkedList<Pipeline> linkedList1 = new LinkedList<Pipeline>();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        spider2.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Spider.Status spider_Status0 = Spider.Status.fromValue((-1));
      assertEquals(Spider.Status.Init, spider_Status0);
      
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Spider ");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setPipelines((List<Pipeline>) null);
      assertEquals(Spider.Status.Init, spider1.getStatus());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=-twW/}03S~r1");
      Spider spider0 = new Spider(simplePageProcessor0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider1 = spider0.setExitWhenComplete(false);
      FilePipeline filePipeline0 = new FilePipeline();
      spider1.pipeline(multiPagePipeline0);
      spider0.isSpawnUrl();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "/";
      stringArray0[1] = "=-twW/}03S~r1";
      stringArray0[2] = "/";
      stringArray0[3] = "=-twW/}03S~r1";
      stringArray0[4] = "/";
      stringArray0[5] = "`S_h*9";
      stringArray0[6] = "download page {} error";
      stringArray0[7] = "=-twW/}03S~r1";
      stringArray0[8] = "8&95a*]*";
      // Undeclared exception!
      try { 
        spider1.test(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=-twW/}03S~r1");
      Spider spider0 = new Spider(simplePageProcessor0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider1 = spider0.pipeline((Pipeline) null);
      Spider spider2 = spider1.setExitWhenComplete(false);
      spider1.setSpawnUrl(false);
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadPoolExecutor_AbortPolicy0);
      Spider spider3 = spider2.thread((ExecutorService) scheduledThreadPoolExecutor0, 657);
      Spider spider4 = spider3.setSpawnUrl(false);
      spider4.isExitWhenComplete();
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider5 = spider4.addPipeline((Pipeline) null);
      spider5.thread((ExecutorService) forkJoinPool0, 1179);
      assertFalse(spider2.isSpawnUrl());
      assertFalse(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("r&GALvc");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("Bt'a");
      Spider spider0 = Spider.create(simplePageProcessor1);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.setScheduler(queueScheduler0);
      spider1.addPipeline((Pipeline) null);
      // Undeclared exception!
      try { 
        spider1.addUrl((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      QueueScheduler queueScheduler0 = new QueueScheduler();
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1841);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("z0h=:u`ku'1rz`cSh");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Spider spider1 = spider0.startUrls(linkedList0);
      // Undeclared exception!
      try { 
        spider1.get("z0h=:u`ku'1rz`cSh");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("qYP7u6$]");
      Spider spider0 = new Spider(simplePageProcessor0);
      boolean boolean0 = true;
      Spider spider1 = spider0.setSpawnUrl(true);
      Page page0 = Page.fail();
      List<Request> list0 = page0.getTargetRequests();
      spider1.startRequest(list0);
      String string0 = null;
      // Undeclared exception!
      try { 
        simplePageProcessor0.process(page0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("[^\"'#]*");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.setUUID("[^\"'#]*");
      spider0.checkIfRunning();
      assertEquals(Spider.Status.Init, spider0.getStatus());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=-twW/}03S~r1");
      Spider spider0 = new Spider(simplePageProcessor0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider1 = spider0.addPipeline(multiPagePipeline0);
      spider1.setExitWhenComplete(false);
      boolean boolean0 = true;
      Request[] requestArray0 = new Request[1];
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("0vfSFb4]@Tg");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("0vfSFb4]@Tg", "0vfSFb4]@Tg");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Page page0 = new Page();
      phantomJSDownloader0.setThread(0);
      spider1.setDownloader(phantomJSDownloader0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      spider0.getAll((Collection<String>) linkedTransferQueue0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      // Undeclared exception!
      try { 
        spider1.test((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=-twW/}03S~r1");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, "0vfSFb4]@Tg");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      spider0.getAll((Collection<String>) linkedTransferQueue0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      LinkedList<Pipeline> linkedList1 = new LinkedList<Pipeline>();
      spider1.getThreadAlive();
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=-twW/}03S~r1");
      String string0 = "D!8";
      String string1 = "us.codecraft.webmagic.Spider";
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("us.codecraft.webmagic.Spider");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      Spider spider2 = spider1.setSpawnUrl(false);
      int int0 = 8;
      Spider spider3 = spider2.thread(8);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      spider3.setPipelines(linkedList0);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=[twW/S03S~r1");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Request[] requestArray0 = new Request[0];
      Spider spider1 = spider0.addRequest(requestArray0);
      Page page0 = Page.fail();
      spider1.extractAndAddRequests(page0, false);
      spider0.setExitWhenComplete(false);
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider2 = spider0.pipeline(filePipeline0);
      spider2.isSpawnUrl();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "/";
      stringArray0[1] = "/";
      stringArray0[2] = "/";
      stringArray0[3] = "=[twW/S03S~r1";
      stringArray0[4] = "download page {} error";
      stringArray0[5] = "/";
      stringArray0[6] = "=[twW/S03S~r1";
      // Undeclared exception!
      try { 
        spider0.test(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("!x\"8qS&YN9", "OfV?knJU*pd~");
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Page.fail();
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum((-193));
      spider0.setDownloader(phantomJSDownloader1);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      spider0.getAll((Collection<String>) linkedTransferQueue0);
      LinkedList<Pipeline> linkedList1 = new LinkedList<Pipeline>();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "OfV?knJU*pd~";
      stringArray0[1] = "!x\"8qS&YN9";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "}fAKJN8|FQzQ=*GqD4";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      // Undeclared exception!
      try { 
        spider1.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=-twW/}03S~r1");
      Spider spider0 = new Spider(simplePageProcessor0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider1 = spider0.clearPipeline();
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("Z3?");
      simplePageProcessor1.getSite();
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider2 = spider0.scheduler(queueScheduler0);
      spider2.setSpiderListeners(linkedList0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("Dp51KxW!';8:d!wOvp");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      FileCacheQueueScheduler fileCacheQueueScheduler1 = new FileCacheQueueScheduler("");
      Spider spider3 = spider0.scheduler(fileCacheQueueScheduler1);
      spider2.clearPipeline();
      SimplePageProcessor simplePageProcessor2 = new SimplePageProcessor("WukDW,}iGK6|Ce+");
      spider3.getThreadAlive();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler1.setDuplicateRemover(hashSetDuplicateRemover0);
      Spider spider4 = spider1.scheduler(duplicateRemovedScheduler0);
      // Undeclared exception!
      try { 
        spider4.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("0vfSFb4]@Tg");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("0vfSFb4]@Tg", "0vfSFb4]@Tg");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Page page0 = new Page();
      List<Request> list0 = page0.getTargetRequests();
      spider1.startRequests = list0;
      phantomJSDownloader0.setThread(0);
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      Request request0 = new Request("");
      // Undeclared exception!
      try { 
        spider2.onSuccess(request0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("url:\t");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Spider {} closed! {} pages downloaded.", "");
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum((-374));
      Spider spider1 = spider0.downloader(phantomJSDownloader1);
      Spider spider2 = spider1.setExitWhenComplete(true);
      Page page0 = new Page();
      List<Request> list0 = page0.getTargetRequests();
      Spider spider3 = spider2.startRequest(list0);
      // Undeclared exception!
      try { 
        spider3.get("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = ";";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(";");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider2 = spider1.addPipeline(resultItemsCollectorPipeline0);
      boolean boolean0 = true;
      spider2.setSpawnUrl(true);
      Page page0 = Page.fail();
      // Undeclared exception!
      try { 
        simplePageProcessor0.process(page0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider1 = spider0.startRequest(linkedList0);
      assertSame(spider0, spider1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("0vfSFb4]@Tg");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("0vfSFb4]@Tg", "0vfSFb4]@Tg");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Page.fail();
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      spider0.getAll((Collection<String>) linkedTransferQueue0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      String[] stringArray0 = new String[0];
      spider2.test(stringArray0);
      spider0.sleep(5);
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.pipeline.JsonFilePipeline");
      Spider spider0 = new Spider(simplePageProcessor0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider1 = spider0.addPipeline(multiPagePipeline0);
      Spider spider2 = spider1.setExitWhenComplete(true);
      spider2.destroyWhenExit = false;
      spider0.thread(1935);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      ResultItems resultItems0 = new ResultItems();
      ResultItems resultItems1 = resultItems0.setSkip(true);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("dW[k0Q-^MJadI");
      fileCacheQueueScheduler0.poll(spider0);
      resultItems1.setRequest((Request) null);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=-twW/}03S~r1");
      Spider spider0 = new Spider(simplePageProcessor0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "=-twW/}03S~r1";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("My_lj");
      // Undeclared exception!
      try { 
        Spider.create((PageProcessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("ZDJ_j?btZj");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.getUUID();
      Spider.Status spider_Status0 = spider0.getStatus();
      assertEquals(Spider.Status.Init, spider_Status0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("r&GALvc");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.setScheduler(queueScheduler0);
      Spider spider2 = spider1.addPipeline((Pipeline) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "r&GALvc";
      stringArray0[1] = "r&GALvc";
      stringArray0[2] = "r&GALvc";
      stringArray0[3] = "r&GALvc";
      stringArray0[4] = "r&GALvc";
      stringArray0[5] = "Spider is already running!";
      // Undeclared exception!
      try { 
        spider2.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Running");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider2 = spider1.scheduler(queueScheduler0);
      Spider spider3 = spider2.setExitWhenComplete(false);
      Spider spider4 = spider3.setScheduler(queueScheduler0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Running";
      stringArray0[1] = "Running";
      stringArray0[2] = "Running";
      stringArray0[3] = "";
      stringArray0[4] = "Running";
      stringArray0[5] = "Running";
      stringArray0[6] = "Running";
      stringArray0[7] = "Running";
      // Undeclared exception!
      try { 
        spider4.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(93);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("init cache scheduler error");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "Ucwc1|YYr6X");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      String[] stringArray0 = new String[0];
      Spider spider2 = spider1.addUrl(stringArray0);
      Spider spider3 = spider2.setExecutorService(forkJoinPool0);
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      List<Request> list0 = spider1.getAll((Collection<String>) linkedTransferQueue0);
      Spider spider4 = spider3.startRequest(list0);
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider5 = spider4.addPipeline(filePipeline0);
      spider5.getThreadAlive();
      assertEquals(Spider.Status.Stopped, spider3.getStatus());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=-t(wW/}03S~r1");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("My2_lj");
      Spider spider0 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.get("My2_lj");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Spider.Status spider_Status0 = Spider.Status.fromValue(337);
      assertEquals(Spider.Status.Init, spider_Status0);
      
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=-twW/}03S~r1");
      Spider spider0 = new Spider(simplePageProcessor0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      
      spider0.getScheduler();
      assertEquals(Spider.Status.Init, spider0.getStatus());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = "\\)=RJDVH";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(")=RJDVH");
      Spider spider0 = new Spider(simplePageProcessor0);
      String string1 = "";
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      Spider spider1 = spider0.setScheduler(fileCacheQueueScheduler0);
      spider1.setSpawnUrl(false);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      PriorityBlockingQueue<Runnable> priorityBlockingQueue0 = new PriorityBlockingQueue<Runnable>();
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ThreadPoolExecutor threadPoolExecutor0 = null;
      try {
        threadPoolExecutor0 = new ThreadPoolExecutor(0, 0, 0, timeUnit0, priorityBlockingQueue0, threadPoolExecutor_DiscardPolicy0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=-twW/}03S~r1");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.stop();
      assertEquals(0L, spider0.getPageCount());
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      Spider spider1 = spider0.setSpawnUrl(true);
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("]fxF1%<,");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider1 = spider0.addPipeline(multiPagePipeline0);
      Spider spider2 = spider1.setExitWhenComplete(false);
      // Undeclared exception!
      try { 
        spider2.get((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider1 = spider0.addPipeline(resultItemsCollectorPipeline0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      linkedList0.add((SpiderListener) spiderMonitor_MonitorSpiderListener0);
      spider1.setSpiderListeners(linkedList0);
      Spider spider2 = spider1.setUUID("");
      Spider spider3 = spider2.setSpawnUrl(true);
      Spider spider4 = spider3.setSpawnUrl(true);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      Spider spider5 = spider4.setDownloader(phantomJSDownloader0);
      assertTrue(spider5.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=-twW/}03S~r1");
      Spider spider0 = new Spider(simplePageProcessor0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Locale locale0 = Locale.TAIWAN;
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      spider0.clearPipeline();
      spider0.getStartTime();
      int int0 = spider0.getThreadAlive();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=-twW/}03S~r1");
      Spider spider0 = new Spider(simplePageProcessor0);
      int int0 = spider0.getThreadAlive();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("]fxF1%<,");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.addPipeline((Pipeline) null);
      spider1.stop();
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider2 = spider1.pipeline((Pipeline) null);
      assertSame(spider2, spider0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Init");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Spider spider0 = new Spider(simplePageProcessor0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider1 = spider0.addPipeline(multiPagePipeline0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Init");
      Spider spider2 = spider1.addPipeline(multiPagePipeline0);
      spider2.addPipeline(multiPagePipeline0);
      Spider spider3 = spider2.clearPipeline();
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("Init");
      simplePageProcessor1.getSite();
      String[] stringArray0 = new String[0];
      spider1.setSpawnUrl(false);
      spider3.getUUID();
      boolean boolean0 = spider0.isSpawnUrl();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.setScheduler(queueScheduler0);
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider2 = spider1.pipeline(filePipeline0);
      Spider spider3 = spider2.setExitWhenComplete(false);
      Page page0 = new Page();
      Page page1 = page0.setSkip(false);
      List<Request> list0 = page1.getTargetRequests();
      spider3.startRequest(list0);
      Request[] requestArray0 = new Request[3];
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("init cache scheduler error");
      fileCacheQueueScheduler0.poll(spider2);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      SmartContentSelector smartContentSelector0 = new SmartContentSelector();
      // Undeclared exception!
      try { 
        smartContentSelector0.selectList("/");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.selector.SmartContentSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=-twW/}03S~r1");
      Spider spider0 = new Spider(simplePageProcessor0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      spider0.exitWhenComplete = false;
      spider0.clearPipeline();
      spider0.stop();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider1 = spider0.thread((ExecutorService) forkJoinPool0, 3);
      assertEquals(Spider.Status.Init, spider1.getStatus());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=-twW/}03S~r1");
      Spider spider0 = new Spider(simplePageProcessor0);
      String[] stringArray0 = new String[0];
      Spider spider1 = spider0.addUrl(stringArray0);
      assertEquals(Spider.Status.Init, spider1.getStatus());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Spider.Status.fromValue(337);
      Request request0 = new Request("us.codecraft.webmagic.downloader.HttpClientDownloader");
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Pt");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      Page page0 = Page.fail();
      List<Request> list0 = page0.getTargetRequests();
      Spider spider2 = spider1.startRequest(list0);
      spider2.getSpiderListeners();
      Spider spider3 = spider2.startRequest(list0);
      spider3.thread((ExecutorService) forkJoinPool0, 337);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("us.codecraft.webmagic.downloader.HttpClientDownloader");
      Spider spider4 = spider2.setUUID("us.codecraft.webmagic.downloader.HttpClientDownloader");
      // Undeclared exception!
      try { 
        spider4.onError(request0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("0vfSFb4]@Tg");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider3 = spider2.scheduler(priorityScheduler0);
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      List<Pipeline> list0 = spider3.getAll((Collection<String>) linkedTransferQueue0);
      Spider spider4 = spider3.setPipelines(list0);
      Spider spider5 = spider4.setExitWhenComplete(false);
      spider5.setSpiderListeners((List<SpiderListener>) null);
      assertEquals(Spider.Status.Stopped, spider3.getStatus());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      QueueScheduler queueScheduler0 = new QueueScheduler();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("JTL1#ETQ/,dU(pqXI", "JTL1#ETQ/,dU(pqXI");
      Spider.Status.values();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=-twW/}03S~r1");
      Spider spider0 = new Spider(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider1 = spider0.pipeline(filePipeline0);
      Spider spider2 = spider1.setSpawnUrl(true);
      // Undeclared exception!
      try { 
        spider2.startUrls((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = "u= :*AX\"'TX*9N4";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("u= :*AX\"'TX*9N4");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      Spider spider2 = spider1.setUUID("u= :*AX\"'TX*9N4");
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("u= :*AX\"'TX*9N4", "u= :*AX\"'TX*9N4");
      spider2.setDownloader(phantomJSDownloader0);
      ReplaceSelector replaceSelector0 = new ReplaceSelector("u= :*AX\"'TX*9N4", "Cgp*Wz}[rj");
      // Undeclared exception!
      try { 
        replaceSelector0.selectList("Cgp*Wz}[rj");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.selector.ReplaceSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      FilePipeline filePipeline0 = new FilePipeline();
      Spider.Status.fromValue((-18));
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("/");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider1 = spider0.setPipelines(linkedList0);
      spider1.setExitWhenComplete(false);
      LinkedList<Pipeline> linkedList1 = new LinkedList<Pipeline>();
      spider0.setPipelines(linkedList0);
      Spider spider2 = spider1.setExitWhenComplete(false);
      spider2.pipeline(filePipeline0);
      // Undeclared exception!
      try { 
        spider2.get(":G%7r");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Init");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(true);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(657, threadFactory0);
      Spider spider2 = spider1.setExecutorService(scheduledThreadPoolExecutor0);
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      
      Request request0 = new Request("Init");
      Request request1 = request0.setBinaryContent(true);
      Request request2 = request1.setCharset("");
      Request request3 = request2.addHeader("XXD# hQ6T", "_cycle_tried_times");
      request0.setUrl((String) null);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Request request4 = request3.putExtra("XXD# hQ6T", resultItemsCollectorPipeline0);
      // Undeclared exception!
      try { 
        spider2.onSuccess(request4);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("D!8");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      Request request0 = new Request("{`YLRL8@s");
      Request request1 = request0.setUrl("{`YLRL8@s");
      Request request2 = request1.setMethod("_cycle_tried_times");
      request1.getExtras();
      Request request3 = request2.setExtras((Map<String, Object>) null);
      request3.setPriority(0L);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("jzy7Ze");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      Spider spider2 = spider1.setScheduler(fileCacheQueueScheduler0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("g@+jvr@5C|Uado=<", "g@+jvr@5C|Uado=<");
      spider2.setDownloader(phantomJSDownloader0);
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      // Undeclared exception!
      try { 
        spider2.getAll((Collection<String>) set0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Spider.Status.fromValue(337);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.downloader.HttpClientDownloader");
      Spider spider0 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.onError((Request) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=d-twW/}03S~r1");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      spider1.isSpawnUrl();
      Date date0 = spider1.getStartTime();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = "page status code error, page {} , code: {}";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("page status code error, page {} , code: {}");
      Spider spider0 = new Spider(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline("page status code error, page {} , code: {}");
      spider0.pipeline(filePipeline0);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader("page status code error, page {} , code: {}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=-wW/}0Sr1");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("=-wW/}0Sr1", "=-wW/}0Sr1");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      // Undeclared exception!
      try { 
        spider1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("url:\t");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider1 = spider0.setSpiderListeners(linkedList0);
      int int0 = spider1.getThreadAlive();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=-twW/}03S~r1");
      Spider spider0 = new Spider(simplePageProcessor0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider1 = spider0.addPipeline((Pipeline) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "=-twW/}03S~r1");
      Spider spider2 = spider0.addPipeline(multiPagePipeline0);
      spider2.clearPipeline();
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("/");
      simplePageProcessor1.getSite();
      spider1.getThreadAlive();
      String[] stringArray0 = new String[0];
      Spider spider3 = spider1.addUrl(stringArray0);
      Spider spider4 = spider3.setExitWhenComplete(false);
      // Undeclared exception!
      try { 
        spider4.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=-twW/}03S~r1");
      Spider spider0 = new Spider(simplePageProcessor0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Locale locale0 = Locale.TAIWAN;
      locale0.getUnicodeLocaleAttributes();
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("]fxF1%<,");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.setScheduler(queueScheduler0);
      spider0.addPipeline((Pipeline) null);
      spider1.stop();
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(6, threadPoolExecutor_CallerRunsPolicy0);
      Spider spider2 = spider0.setExecutorService(scheduledThreadPoolExecutor0);
      String[] stringArray0 = new String[2];
      stringArray0[1] = "Spider is already running!";
      spider2.getSite();
      // Undeclared exception!
      try { 
        spider2.addUrl(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=-twW/}03S~r1");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.setScheduler((Scheduler) null);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("=-twW/}03S~r1");
      Spider spider1 = spider0.scheduler(fileCacheQueueScheduler0);
      Page page0 = new Page();
      List<Request> list0 = page0.getTargetRequests();
      spider1.startRequests = list0;
      // Undeclared exception!
      try { 
        spider1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.FileCacheQueueScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("url:\t");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(true);
      assertTrue(spider1.isExitWhenComplete());
      
      boolean boolean0 = spider1.isExitWhenComplete();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("sNqP/C>HG");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.getThreadAlive();
      CollectorPipeline collectorPipeline0 = spider0.getCollectorPipeline();
      assertNotNull(collectorPipeline0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=-twW/}03S~r1");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "=-twW/}03S~r1");
      Request[] requestArray0 = new Request[0];
      Spider spider1 = spider0.addRequest(requestArray0);
      spider1.uuid = "=-twW/}03S~r1";
      spider0.setExitWhenComplete(true);
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider2 = spider0.pipeline(filePipeline0);
      spider2.isSpawnUrl();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "/";
      stringArray0[1] = "/";
      stringArray0[2] = "/";
      stringArray0[3] = "=-twW/}03S~r1";
      stringArray0[4] = "#(P+VS#S(";
      stringArray0[5] = "/";
      stringArray0[6] = "=-twW/}03S~r1";
      // Undeclared exception!
      try { 
        spider2.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=-twW/}03S~r1");
      Spider spider0 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.addUrl((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=-twW/}03S~r1");
      Spider spider0 = new Spider(simplePageProcessor0);
      Page page0 = new Page();
      page0.setStatusCode((-387));
      spider0.extractAndAddRequests(page0, false);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.scheduler(priorityScheduler0);
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.pipeline.MultiPagePipeline");
      Spider spider0 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.sleep((-282));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Init");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(true);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      spider1.runAsync();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(657, threadFactory0);
      spider1.setExecutorService(scheduledThreadPoolExecutor0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Init");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(true);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(657, threadFactory0);
      Spider spider2 = spider1.setExecutorService(scheduledThreadPoolExecutor0);
      Request request0 = new Request("Init");
      Request request1 = request0.setCharset("");
      Request request2 = request1.addHeader("XXD# hQ6T", "_cycle_tried_times");
      request0.setUrl((String) null);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Request request3 = request2.putExtra("XXD# hQ6T", resultItemsCollectorPipeline0);
      // Undeclared exception!
      try { 
        spider2.onSuccess(request3);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("_T");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.stop();
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider1 = spider0.pipeline(filePipeline0);
      assertTrue(spider1.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(true);
      Spider spider2 = spider1.setUUID("");
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      spider2.pipeline(consolePipeline0);
      Json json0 = new Json("");
      json0.replace("P&b,-w`X3S-5s|dW", "");
      // Undeclared exception!
      try { 
        json0.css("", "");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // $ can not apply to plain text. Please check whether you use a previous xpath with attribute select (/@href etc).
         //
         verifyException("us.codecraft.webmagic.selector.PlainText", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      FilePipeline filePipeline0 = new FilePipeline();
      Spider.Status.fromValue((-18));
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("/");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider1 = spider0.setPipelines(linkedList0);
      spider1.setExitWhenComplete(false);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(":G%7r", "yWfQ;fna");
      Spider spider2 = new Spider(simplePageProcessor0);
      spider2.clearPipeline();
      spider1.getThreadAlive();
      Spider spider3 = Spider.create(simplePageProcessor0);
      Request request0 = new Request(" stop fail!");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      Request request1 = request0.putExtra("", mockFileReader0);
      Request request2 = request1.setCharset((String) null);
      // Undeclared exception!
      try { 
        spider3.onError(request2);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("0vfSFb4]@Tg");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      spider1.setDownloader(phantomJSDownloader0);
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      spider0.getAll((Collection<String>) linkedTransferQueue0);
      spider0.stop();
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("E5a@T,GCe?pp");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.getThreadAlive();
      Locale locale0 = Locale.CANADA_FRENCH;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) set0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Init");
      Spider spider0 = new Spider(simplePageProcessor0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider.Status.fromValue(2);
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("Init");
      Spider spider1 = Spider.create(simplePageProcessor0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider2 = spider1.setPipelines(linkedList0);
      spider2.setExitWhenComplete(false);
      // Undeclared exception!
      try { 
        spider2.get("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("5VlLv(!z@Q$df R*O");
      Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("xpp:SScQJ%n7L/a \"-");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      spider0.setExitWhenComplete(false);
      FilePipeline filePipeline0 = new FilePipeline();
      spider0.isSpawnUrl();
      // Undeclared exception!
      try { 
        spider0.test((String[]) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = "<L>TTW&0<]@tuiBB";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("<L>TTW&0<]@tuiBB");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      spider0.setPipelines(linkedList0);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=-twW/}03S~r1");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.runAsync();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(686);
      // Undeclared exception!
      try { 
        spider0.thread((ExecutorService) forkJoinPool0, 686);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Spider is already running!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=-twW/}03S~r1");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.getUUID();
      Spider spider1 = spider0.clearPipeline();
      assertEquals(Spider.Status.Init, spider1.getStatus());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("0vfSFb4]@Tg");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("0vfSFb4]@Tg", "0vfSFb4]@Tg");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Page.fail();
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      spider1.startRequests = (List<Request>) linkedList0;
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      assertEquals(Spider.Status.Init, spider2.getStatus());
      
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      spider0.getAll((Collection<String>) linkedTransferQueue0);
      LinkedList<Pipeline> linkedList1 = new LinkedList<Pipeline>();
      String[] stringArray0 = new String[0];
      spider2.test(stringArray0);
      spider0.close();
      spider2.getStatus();
      assertEquals(Spider.Status.Stopped, spider2.getStatus());
      
      spider1.getAll((Collection<String>) linkedTransferQueue0);
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.pipeline.JsonFilePipeline");
      Spider spider0 = new Spider(simplePageProcessor0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider1 = spider0.addPipeline(multiPagePipeline0);
      Spider spider2 = spider1.setExitWhenComplete(true);
      // Undeclared exception!
      try { 
        spider2.get("us.codecraft.webmagic.pipeline.JsonFilePipeline");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.selector.OrSelector");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("");
      Spider spider2 = spider1.setExitWhenComplete(false);
      Spider spider3 = spider2.clearPipeline();
      Spider spider4 = spider3.setExecutorService((ExecutorService) null);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "us.codecraft.webmagic.selector.OrSelector";
      stringArray0[3] = "us.codecraft.webmagic.selector.OrSelector";
      stringArray0[4] = "us.codecraft.webmagic.selector.OrSelector";
      stringArray0[5] = "us.codecraft.webmagic.selector.OrSelector";
      stringArray0[6] = "us.codecraft.webmagic.selector.OrSelector";
      stringArray0[7] = "us.codecraft.webmagic.selector.OrSelector";
      stringArray0[8] = "us.codecraft.webmagic.selector.OrSelector";
      // Undeclared exception!
      try { 
        spider4.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=-twW/}03S~r1");
      Spider spider0 = new Spider(simplePageProcessor0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      spider0.setExitWhenComplete(false);
      spider0.thread(657);
      // Undeclared exception!
      try { 
        spider0.thread((-3138));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=dktwW/}03S~r1");
      Spider spider0 = new Spider(simplePageProcessor0);
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      // Undeclared exception!
      try { 
        spider0.run();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=-twW/}03S~r1");
      Request request0 = new Request("=-twW/}03S~r1");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      Spider spider2 = spider1.setUUID("tb^zp<=");
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      // Undeclared exception!
      try { 
        spider2.getAll((Collection<String>) linkedTransferQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=d-twW/}03S~r1");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.thread(4215);
      Site site0 = spider0.getSite();
      assertFalse(site0.isDisableCookieManagement());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=-twW/}03S~r1");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.sleep(5);
      long long0 = spider0.getPageCount();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("tq2b4kV");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      spider1.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader("p");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=-twW/}03S~r1");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("=-twW/}03S~r1");
      boolean boolean0 = spider0.isSpawnUrl();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" stop fail!");
      Spider spider0 = Spider.create(simplePageProcessor0);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      LinkedBlockingQueue<Runnable> linkedBlockingQueue0 = new LinkedBlockingQueue<Runnable>();
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(0, 367, 10L, timeUnit0, linkedBlockingQueue0);
      Spider spider1 = spider0.setExecutorService(threadPoolExecutor0);
      Spider spider2 = spider1.thread(367);
      Spider spider3 = spider2.setUUID(" stop fail!");
      Spider spider4 = spider3.scheduler((Scheduler) null);
      Spider spider5 = spider4.setScheduler((Scheduler) null);
      long long0 = spider5.getPageCount();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("0vfSFb4]@Tg");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("0vfSFb4]@Tg", "0vfSFb4]@Tg");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Page.fail();
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      spider1.startRequests = (List<Request>) linkedList0;
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      spider0.getAll((Collection<String>) linkedTransferQueue0);
      LinkedList<Pipeline> linkedList1 = new LinkedList<Pipeline>();
      assertEquals(0, linkedList1.size());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("0vfSFb4]@Tg");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      spider0.getAll((Collection<String>) linkedTransferQueue0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      spider0.close();
      spider2.getStatus();
      assertEquals(Spider.Status.Stopped, spider2.getStatus());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "srgC|(CW.('");
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("$ can not apply to plain text. Please check whether you use a previous xpath with attribute select (/@href etc).");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(true);
      Spider spider2 = spider1.setUUID("$ can not apply to plain text. Please check whether you use a previous xpath with attribute select (/@href etc).");
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider3 = spider2.setScheduler(priorityScheduler0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)3;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Spider spider4 = spider3.setExitWhenComplete(false);
      spider4.getUUID();
      assertFalse(spider3.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Init");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Spider spider2 = spider1.setExitWhenComplete(false);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider0.scheduler(queueScheduler0);
      spider0.getUUID();
      spider2.getStatus();
      boolean boolean0 = spider0.isSpawnUrl();
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("url:\t");
      Spider spider0 = new Spider(simplePageProcessor0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider1 = spider0.addPipeline(multiPagePipeline0);
      Spider spider2 = spider1.setExitWhenComplete(true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      spider1.clearPipeline();
      int int0 = spider2.getThreadAlive();
      assertEquals(0, int0);
      
      boolean boolean0 = spider2.isExitWhenComplete();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Init");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      Spider spider2 = spider1.addPipeline(consolePipeline0);
      spider0.stop();
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider3 = spider2.pipeline(consolePipeline0);
      spider0.start();
      spider3.checkIfRunning();
      assertFalse(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("0vfSFb4]@Tg");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("0vfSFb4]@Tg", "0vfSFb4]@Tg");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Page page0 = new Page();
      List<Request> list0 = page0.getTargetRequests();
      spider1.startRequests = list0;
      spider1.setDownloader(phantomJSDownloader0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      // Undeclared exception!
      try { 
        spider1.test((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("0vfSFb4]@Tg");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("0vfSFb4]@Tg", "0vfSFb4]@Tg");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Page.fail();
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      spider1.startRequests = (List<Request>) linkedList0;
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      spider0.getAll((Collection<String>) linkedTransferQueue0);
      LinkedList<Pipeline> linkedList1 = new LinkedList<Pipeline>();
      String[] stringArray0 = new String[0];
      spider2.test(stringArray0);
      spider2.close();
      spider0.getStatus();
      spider2.getStartTime();
      assertEquals(Spider.Status.Stopped, spider2.getStatus());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=-twW/}03S~r1");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Spider spider2 = spider0.setExitWhenComplete(false);
      spider0.setSpawnUrl(true);
      spider1.isExitWhenComplete();
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      spider2.thread((ExecutorService) forkJoinPool0, 3);
      assertFalse(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider1 = spider0.setSpiderListeners(linkedList0);
      spider1.scheduler((Scheduler) null);
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("]fxF1%<,");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider0.setScheduler(queueScheduler0);
      spider0.addPipeline((Pipeline) null);
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(6, threadPoolExecutor_CallerRunsPolicy0);
      Spider spider1 = spider0.setExecutorService(scheduledThreadPoolExecutor0);
      String[] stringArray0 = new String[2];
      stringArray0[1] = "Spider is already running!";
      // Undeclared exception!
      try { 
        spider1.addUrl(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      // Undeclared exception!
      try { 
        Spider.create((PageProcessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("0vfSFb4]@Tg");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider1.setUUID("");
      spider1.getUUID();
      // Undeclared exception!
      try { 
        spider2.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=d-twW/}03S~r1");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(5, threadFactory0);
      Spider spider1 = spider0.setExecutorService(scheduledThreadPoolExecutor0);
      Spider spider2 = spider1.setSpawnUrl(false);
      spider2.downloader((Downloader) null);
      String string0 = null;
      FileCacheQueueScheduler fileCacheQueueScheduler0 = null;
      try {
        fileCacheQueueScheduler0 = new FileCacheQueueScheduler((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.FileCacheQueueScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=-twW/}03S~r1");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = new Spider(simplePageProcessor0);
      List<SpiderListener> list0 = spider1.getSpiderListeners();
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("o<zyts");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      String[] stringArray0 = new String[0];
      spider1.addUrl(stringArray0);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader("5^{dVx}`9au");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Spider.Status.fromValue((-1102));
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("SuT");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider0.scheduler(queueScheduler0);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Spider.Status.fromValue((-1102));
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("SuT");
      Spider.create(simplePageProcessor0);
      Spider spider0 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.addRequest((Request[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      int int0 = (-1425);
      Spider.Status.fromValue((-1425));
      Spider.Status.fromValue(5889);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider1 = spider0.pipeline(resultItemsCollectorPipeline0);
      spider1.setUUID("");
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.initComponent();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Init");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Spider spider2 = spider1.setExitWhenComplete(false);
      spider2.setSpawnUrl(false);
      spider2.isExitWhenComplete();
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      spider1.thread((ExecutorService) forkJoinPool0, 3);
      assertFalse(spider1.isSpawnUrl());
      assertFalse(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = "Init";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Init");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      spider0.destroyWhenExit = false;
      Spider spider2 = spider1.setExitWhenComplete(false);
      spider2.setSpawnUrl(false);
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      FilePipeline filePipeline0 = new FilePipeline();
      spider0.pipeline(filePipeline0);
      // Undeclared exception!
      try { 
        spider1.startUrls((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("url:\t");
      Spider spider0 = new Spider(simplePageProcessor0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider1 = spider0.addPipeline(multiPagePipeline0);
      spider0.setUUID("url:\t");
      Spider spider2 = spider1.addPipeline(multiPagePipeline0);
      Spider spider3 = spider2.setUUID("url:\t");
      Spider spider4 = spider3.clearPipeline();
      spider1.getThreadAlive();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      priorityScheduler0.poll(spider4);
      // Undeclared exception!
      try { 
        spider1.onSuccess((Request) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("r&GALvc");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.setExitWhenComplete(false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      spider0.setExitWhenComplete(false);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      LinkedBlockingDeque<Runnable> linkedBlockingDeque0 = new LinkedBlockingDeque<Runnable>();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(34, 34, 34, timeUnit0, linkedBlockingDeque0, threadFactory0);
      Spider spider1 = spider0.setExecutorService(threadPoolExecutor0);
      Spider spider2 = spider1.setSpawnUrl(false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "r&GALvc");
      ForkJoinPool.commonPool();
      spider2.thread((ExecutorService) null, 200);
      assertFalse(spider0.isExitWhenComplete());
      assertFalse(spider1.isSpawnUrl());
      assertFalse(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("0vfSFb4]@Tg");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      assertEquals(Spider.Status.Init, spider1.getStatus());
      
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      spider1.getAll((Collection<String>) linkedTransferQueue0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      spider0.getAll((Collection<String>) linkedTransferQueue0);
      LinkedList<Pipeline> linkedList1 = new LinkedList<Pipeline>();
      spider0.close();
      spider0.getStatus();
      spider0.run();
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=-twW/}03S~r1");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request[] requestArray0 = new Request[0];
      spider0.addRequest(requestArray0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1727, threadFactory0);
      scheduledThreadPoolExecutor0.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);
      // Undeclared exception!
      try { 
        spider1.thread((ExecutorService) scheduledThreadPoolExecutor0, (-30));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Fhc=4yXf[Y=XwG9{k`");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "Fhc=4yXf[Y=XwG9{k`");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Page.fail();
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      spider0.setUUID("E5a@T,GCe?pp");
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      spider1.getAll((Collection<String>) linkedTransferQueue0);
      LinkedList<Pipeline> linkedList1 = new LinkedList<Pipeline>();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "E5a@T,GCe?pp";
      stringArray0[1] = "Fhc=4yXf[Y=XwG9{k`";
      stringArray0[2] = "Fhc=4yXf[Y=XwG9{k`";
      // Undeclared exception!
      try { 
        spider1.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=-twW/}03S~r1");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request request0 = new Request("=-twW/}03S~r1");
      // Undeclared exception!
      try { 
        spider0.run();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=-twW/}03S~r1");
      Spider spider0 = new Spider(simplePageProcessor0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider1 = spider0.setUUID("=-twW/}03S~r1");
      spider0.clearPipeline();
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("1K2WnJdvt2");
      spider1.stop();
      spider0.getThreadAlive();
      // Undeclared exception!
      try { 
        spider1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("0vfSFb4]@Tg");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("0vfSFb4]@Tg", "0vfSFb4]@Tg");
      Page.fail();
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      List<Pipeline> list0 = spider1.getAll((Collection<String>) linkedTransferQueue0);
      Spider spider2 = spider0.setPipelines(list0);
      ForkJoinTask.getPool();
      Spider spider3 = spider2.thread((ExecutorService) null, 1012);
      Request request0 = new Request("");
      Request request1 = request0.setPriority(5);
      Request request2 = request1.setUrl("");
      Request request3 = request2.putExtra((String) null, "0vfSFb4]@Tg");
      Request request4 = request3.setMethod("/8x-qVeKc_G q");
      // Undeclared exception!
      try { 
        spider3.onError(request4);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=-twW/}03S~r1");
      Spider spider0 = new Spider(simplePageProcessor0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider1 = spider0.addPipeline(multiPagePipeline0);
      spider1.setExitWhenComplete(false);
      Request[] requestArray0 = new Request[0];
      spider0.addRequest(requestArray0);
      spider0.setExitWhenComplete(false);
      FilePipeline filePipeline0 = new FilePipeline();
      spider0.pipeline(filePipeline0);
      // Undeclared exception!
      try { 
        spider1.get("=-twW/}03S~r1");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Running");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.addPipeline((Pipeline) null);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      Spider spider2 = spider1.setExecutorService(forkJoinPool0);
      Spider spider3 = spider2.setScheduler((Scheduler) null);
      Spider spider4 = spider3.setUUID("Running");
      Spider spider5 = spider4.setSpawnUrl(true);
      AtomicInteger atomicInteger0 = new AtomicInteger((-946));
      spider5.stat = atomicInteger0;
      spider0.getSpiderListeners();
      spider5.setSpiderListeners((List<SpiderListener>) null);
      String string0 = null;
      FileCacheQueueScheduler fileCacheQueueScheduler0 = null;
      try {
        fileCacheQueueScheduler0 = new FileCacheQueueScheduler((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.FileCacheQueueScheduler", e);
      }
  }
}
