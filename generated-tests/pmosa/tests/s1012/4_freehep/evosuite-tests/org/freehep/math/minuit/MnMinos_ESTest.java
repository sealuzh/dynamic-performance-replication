/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 23:12:54 GMT 2018
 */

package org.freehep.math.minuit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.freehep.math.minuit.FCNBase;
import org.freehep.math.minuit.FunctionGradient;
import org.freehep.math.minuit.FunctionMinimum;
import org.freehep.math.minuit.MinimumError;
import org.freehep.math.minuit.MinimumParameters;
import org.freehep.math.minuit.MinimumSeed;
import org.freehep.math.minuit.MinimumState;
import org.freehep.math.minuit.MinosError;
import org.freehep.math.minuit.MnAlgebraicVector;
import org.freehep.math.minuit.MnMinos;
import org.freehep.math.minuit.MnUserTransformation;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MnMinos_ESTest extends MnMinos_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MinimumState minimumState0 = new MinimumState(1);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, 1);
      MnMinos mnMinos0 = new MnMinos((FCNBase) null, functionMinimum0, 1);
      // Undeclared exception!
      try { 
        mnMinos0.range(4);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MinimumState minimumState0 = new MinimumState(221);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, 4.0E-7);
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, 1709);
      // Undeclared exception!
      try { 
        mnMinos0.loval(1709);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      LinkedList<MinimumState> linkedList0 = new LinkedList<MinimumState>();
      FunctionMinimum functionMinimum0 = new FunctionMinimum((MinimumSeed) null, linkedList0, 0);
      MinimumState minimumState0 = new MinimumState(0);
      linkedList0.add(minimumState0);
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0);
      // Undeclared exception!
      try { 
        mnMinos0.upval(0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(616);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, 616);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 616, 616);
      LinkedList<MinimumState> linkedList0 = new LinkedList<MinimumState>();
      linkedList0.add(minimumState0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2583.234968;
      doubleArray0[1] = 1308.0;
      doubleArray0[2] = 1308.0;
      doubleArray0[3] = 1308.0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 616;
      doubleArray0[6] = (double) 0;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      MnUserTransformation mnUserTransformation1 = mnUserTransformation0.clone();
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation1);
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, 1308.0);
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0);
      // Undeclared exception!
      mnMinos0.upval(0, 0.0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(616);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, 616);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 616, 616);
      LinkedList<MinimumState> linkedList0 = new LinkedList<MinimumState>();
      linkedList0.push(minimumState0);
      linkedList0.add(minimumState0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2583.234968;
      doubleArray0[2] = 1308.0;
      doubleArray0[3] = 1308.0;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      MnUserTransformation mnUserTransformation1 = mnUserTransformation0.clone();
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation1);
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, 1308.0);
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0);
      int int0 = 0;
      // Undeclared exception!
      mnMinos0.minos(0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(616);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, 616);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 616, 616);
      LinkedList<MinimumState> linkedList0 = new LinkedList<MinimumState>();
      linkedList0.push(minimumState0);
      linkedList0.add(minimumState0);
      double[] doubleArray0 = new double[7];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      MnUserTransformation mnUserTransformation1 = mnUserTransformation0.clone();
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation1);
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, 616);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnMinos mnMinos0 = new MnMinos(fCNBase1, functionMinimum0);
      functionMinimum0.userParameters();
      // Undeclared exception!
      mnMinos0.upval(1, (-1431.38521934), 5);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(616);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, 616);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 616, 616);
      LinkedList<MinimumState> linkedList0 = new LinkedList<MinimumState>();
      linkedList0.push(minimumState0);
      linkedList0.add(minimumState0);
      double[] doubleArray0 = new double[7];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, (-2586.4));
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0);
      int int0 = 1;
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnMinos mnMinos1 = new MnMinos(fCNBase1, functionMinimum0);
      // Undeclared exception!
      mnMinos1.lower(0, 1.0E-35, 5);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MinimumState minimumState0 = new MinimumState(100);
      MnAlgebraicVector mnAlgebraicVector0 = minimumState0.vec();
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, 689.882672438241);
      MinimumState minimumState1 = new MinimumState(minimumParameters0, (-2059.82245624073), 100);
      LinkedList<MinimumState> linkedList0 = new LinkedList<MinimumState>();
      linkedList0.push(minimumState1);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2059.82245624073);
      doubleArray0[1] = (double) 100;
      doubleArray0[2] = (double) 100;
      doubleArray0[3] = (double) 100;
      doubleArray0[4] = (-2059.82245624073);
      doubleArray0[5] = (double) 100;
      doubleArray0[6] = (double) 100;
      doubleArray0[7] = (-2059.82245624073);
      doubleArray0[8] = 689.882672438241;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      MnUserTransformation mnUserTransformation1 = mnUserTransformation0.clone();
      MnUserTransformation mnUserTransformation2 = mnUserTransformation1.clone();
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState1, mnUserTransformation2);
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, 795.8763923594877);
      FunctionMinimum functionMinimum1 = new FunctionMinimum(minimumSeed0, linkedList0, 472.7159462657863);
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum1, 100);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnMinos mnMinos1 = new MnMinos(fCNBase1, functionMinimum1);
      // Undeclared exception!
      try { 
        mnMinos1.upper(6);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9, Size: 9
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(6);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, (-1792.441));
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 1.0E-35, 1018);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0E-35;
      doubleArray0[1] = (double) 6;
      doubleArray0[2] = (double) 1018;
      doubleArray0[3] = (double) 1018;
      doubleArray0[4] = (double) 6;
      doubleArray0[5] = (-1792.441);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      MnUserTransformation mnUserTransformation1 = mnUserTransformation0.clone();
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation1);
      MinimumSeed minimumSeed1 = new MinimumSeed(minimumState0, mnUserTransformation0);
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed1, 0.0);
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0);
      MnMinos mnMinos1 = new MnMinos((FCNBase) null, functionMinimum0, 0);
      // Undeclared exception!
      try { 
        mnMinos1.loval(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnFcn", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(574);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, 574);
      double[] doubleArray0 = new double[16];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)7, (double)7, (double)7, (double)7, (double)7).when(fCNBase0).valueOf(any(double[].class));
      MinimumError minimumError0 = new MinimumError(7);
      FunctionGradient functionGradient0 = new FunctionGradient(mnAlgebraicVector0, mnAlgebraicVector0, mnAlgebraicVector0);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, minimumError0, functionGradient0, 7, 7);
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, 574);
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, 7);
      MinosError minosError0 = mnMinos0.minos(5);
      assertFalse(minosError0.atLowerMaxFcn());
      assertEquals(5, minosError0.parameter());
      assertFalse(minosError0.atUpperMaxFcn());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(574);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, 574);
      double[] doubleArray0 = new double[16];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      MinimumError minimumError0 = new MinimumError(7);
      FunctionGradient functionGradient0 = new FunctionGradient(mnAlgebraicVector0, mnAlgebraicVector0, mnAlgebraicVector0);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, minimumError0, functionGradient0, 7, 7);
      mnUserTransformation0.errors();
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, (-2109.0046));
      MnMinos mnMinos0 = new MnMinos(fCNBase1, functionMinimum0, 463);
      // Undeclared exception!
      try { 
        mnMinos0.range(2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(574);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, 574);
      double[] doubleArray0 = new double[16];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MinimumError minimumError0 = new MinimumError(7);
      FunctionGradient functionGradient0 = new FunctionGradient(mnAlgebraicVector0, mnAlgebraicVector0, mnAlgebraicVector0);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, minimumError0, functionGradient0, 7, 7);
      MnUserTransformation mnUserTransformation1 = mnUserTransformation0.clone();
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation1);
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, 0.0);
      FunctionMinimum functionMinimum1 = new FunctionMinimum(minimumSeed0, (-1165.5087826992));
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum1, (-345));
      double double0 = mnMinos0.upper(2);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(574);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, 574);
      double[] doubleArray0 = new double[16];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MinimumError minimumError0 = new MinimumError(7);
      FunctionGradient functionGradient0 = new FunctionGradient(mnAlgebraicVector0, mnAlgebraicVector0, mnAlgebraicVector0);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, minimumError0, functionGradient0, 7, 7);
      mnUserTransformation0.errors();
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, (-1205.237));
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, 3);
      double double0 = mnMinos0.lower(3);
      assertEquals(0.0, double0, 0.01);
  }
}
