/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 01:15:23 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Parser;
import com.google.re2j.Regexp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      try { 
        Parser.parse("*3", 128);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `*`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[6];
      int int0 = 346;
      Regexp regexp0 = Parser.parse("x", 346);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexpArray0[1] = regexp2;
      Regexp.Op regexp_Op1 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp3 = new Regexp(regexp_Op1);
      regexpArray0[2] = regexp3;
      try { 
        Parser.parse("RdU%Hh>(M", 3608);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `RdU%Hh>(M`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = "(?P<";
      try { 
        Parser.parse("(?P<", (-28));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid named capture: `(?P<`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      try { 
        Parser.parse("}?(", 117);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `}?(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      try { 
        Parser.parse("|?E\"$QV(c3e*dK-e.@", 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\t", 13);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      try { 
        Parser.parse("(", (-2435));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      try { 
        Parser.parse("B(?P<(?(?", 4677);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid named capture: `(?P<(?(?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Parser parser0 = new Parser("com.google.re2j.Parser$1", 65535);
      Regexp[] regexpArray0 = new Regexp[8];
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexpArray0[2] = regexp2;
      Regexp regexp3 = new Regexp(regexp_Op0);
      regexpArray0[3] = regexp3;
      String string0 = "i/v)H6*H";
      try { 
        Parser.parse("i/v)H6*H", 605);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      try { 
        Parser.parse(")])Bw_e7!CzP", 12);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[3];
      Regexp regexp0 = Parser.parse("Q^p*k<,H$+}6'C", (-235));
      regexpArray0[0] = regexp0;
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = Parser.parse("Q^p*k<,H$+}6'C", (-235));
      regexpArray0[2] = regexp2;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-235), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = "*Pw%TTRMJBwQk}sR}";
      try { 
        Parser.parse("*Pw%TTRMJBwQk}sR}", 43072);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `*`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Parser parser0 = new Parser("T", 7041);
      Regexp[] regexpArray0 = new Regexp[8];
      Regexp regexp0 = Parser.parse("", 7041);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = Parser.parse("T", (-2868));
      regexpArray0[1] = regexp1;
      Regexp regexp2 = new Regexp(regexp1);
      regexpArray0[2] = regexp2;
      Regexp regexp3 = Parser.parse("", (-2868));
      regexpArray0[3] = regexp3;
      Regexp regexp4 = Parser.parse("d", 7041);
      regexpArray0[4] = regexp4;
      Regexp regexp5 = Parser.parse("1i4I}88K_\"*oGm?p$5Z", (-2868));
      regexpArray0[5] = regexp5;
      try { 
        Parser.parse("iQQ)l", 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Regexp regexp0 = Parser.parse("|", 43697);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Regexp regexp0 = Parser.parse("X|", (-1835));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Regexp regexp0 = Parser.parse("_9|0", 25);
      regexp0.min = 41;
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Regexp regexp0 = Parser.parse("X|", (-2140));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[5];
      Regexp regexp0 = Parser.parse("", 0);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = new Regexp(regexp1);
      regexpArray0[2] = regexp2;
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp3 = new Regexp(regexp_Op0);
      regexp0.name = "";
      regexpArray0[3] = regexp3;
      regexp1.toString();
      String string0 = "[:^lower:]";
      int int0 = 392;
      Regexp regexp4 = Parser.parse("[:^lower:]", 392);
      regexpArray0[4] = regexp4;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 1629, 128);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      try { 
        Parser.parse("[", 48);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      try { 
        Parser.parse("[", 6616);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[^\u0004x0_-x{10FFFF}]", 0);
      String string0 = "com.google.re2j.Utils";
      int int0 = (-4771);
      Regexp regexp1 = Parser.parse(string0, int0);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = 60;
      try { 
        Parser.parse("[:-[", 60);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:-[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = 1838;
      String string0 = "\\p6!i[Y\\^";
      try { 
        Parser.parse("p6!i[Y^", 1513);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[Y^`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Regexp regexp0 = Parser.parse("=|A`*g", (-971));
      String string0 = "94Mqh+DEU^=;cXM6";
      int int0 = 0;
      Parser parser0 = new Parser(string0, int0);
      String string1 = "[:lower:]";
      int int1 = 930;
      Parser.parse(string1, int1);
      String string2 = "";
      int int2 = (-865);
      Parser.parse(string2, int2);
      String string3 = "";
      int int3 = 0;
      Parser.parse(string3, int3);
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      int int4 = 1048;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, int4, int4);
      int int5 = (-3272);
      int int6 = (-2351);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray1, int5, int6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = 108;
      Regexp regexp0 = Parser.parse("C", 108);
      String string0 = "[:^upper:]";
      int int1 = 63;
      Parser parser0 = new Parser(string0, int1);
      Regexp regexp1 = Parser.parse(string0, int0);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Parser parser0 = new Parser("-]", 0);
      Parser.parse("", 0);
      int int0 = 2527;
      Parser.parse("-]", 2527);
      String string0 = "ASCII_Hex_Digit";
      Parser.parse("ASCII_Hex_Digit", 0);
      try { 
        Parser.parse("(?-m:$)", 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = 1000;
      Regexp regexp0 = Parser.parse("P^lower:]", 1000);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp2 = new Regexp(regexp_Op0);
      Regexp.Op regexp_Op1 = Regexp.Op.EMPTY_MATCH;
      Regexp.Op regexp_Op2 = Regexp.Op.CHAR_CLASS;
      Regexp regexp3 = new Regexp(regexp_Op2);
      String string0 = "RdU%Hh>(M";
      String string1 = ":]";
      Parser.parse(string1, int0);
      Regexp regexp4 = new Regexp(regexp_Op1);
      Regexp regexp5 = new Regexp(regexp2);
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[0] = regexp2;
      Regexp regexp6 = null;
      Regexp regexp7 = null;
      try {
        regexp7 = new Regexp(regexp6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Parser parser0 = new Parser("", (-3999));
      Parser.parse("[:^graph:]", (-3999));
      try { 
        Parser.parse("[:", (-3999));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[4];
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Parser parser0 = new Parser("", 0);
      Parser.parse("Praph:]", 36);
      Regexp regexp2 = new Regexp(regexpArray0[0]);
      assertTrue(regexp2.equals((Object)regexp1));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[4];
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      String string0 = "Quotation_Mark";
      Parser.parse("Quotation_Mark", 2840);
      Parser.parse("stack underflow", 2479);
      try { 
        Parser.parse("S& v(s", 85);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `S& v(s`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = (-3999);
      Parser parser0 = new Parser("", (-3999));
      Regexp regexp0 = Parser.parse("E", (-3999));
      String string0 = "Z}9=9e}=9^'e`VEE";
      int int1 = 36;
      Regexp regexp1 = Parser.parse(string0, int1);
      Regexp regexp2 = new Regexp(regexp1);
      Regexp regexp3 = new Regexp(regexp0);
      regexp3.toString();
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp3;
      int int2 = 92;
      int int3 = 93;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int2, int3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Parser parser0 = new Parser("=|A`*g", 0);
      Parser.parse("[:lower:]", 930);
      Parser.parse("-", (-865));
      Parser.parse("", 0);
      Regexp[] regexpArray0 = new Regexp[3];
      Parser.parse("=|A`*g", (-126));
      Regexp regexp0 = Parser.parse("}|O\"", 0);
      Regexp regexp1 = Parser.parse("pph:]", (-865));
      assertNotSame(regexp1, regexp0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[4];
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[1] = regexp1;
      int int0 = (-52);
      Regexp regexp2 = Parser.parse("VvH*8GX^Z952EBo1 ", (-52));
      regexpArray0[2] = regexp2;
      // Undeclared exception!
      try { 
        Parser.parse((String) null, (-692));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = 1000;
      Regexp regexp0 = Parser.parse("Plowr:]", 1000);
      Regexp regexp1 = new Regexp(regexp0);
      String string0 = "[:rint:]";
      Regexp regexp2 = Parser.parse(string0, int0);
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[0] = regexp2;
      regexp2.flags = int0;
      regexpArray0[1] = regexp1;
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp3 = new Regexp(regexp_Op0);
      regexpArray0[2] = regexp3;
      regexpArray0[3] = regexp1;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp1;
      int int1 = (-1094);
      int int2 = 1134;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int1, int2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = "(?(";
      int int0 = 8512;
      try { 
        Parser.parse("(?(", 8512);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = 117;
      String string0 = "(?";
      try { 
        Parser.parse("(?", 117);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int int0 = 0;
      Parser parser0 = new Parser("P", 0);
      Parser.parse("P", 97);
      Regexp[] regexpArray0 = new Regexp[6];
      String string0 = "\\p:print:]";
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\p`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Regexp regexp0 = Parser.parse("`&eZh3Lvi>vvk3rB`z", (-2075));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      try { 
        Parser.parse("{?i:", 248);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid nested repetition operator: `{?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Parser parser0 = new Parser("", (-3999));
      Parser.parse("[:", 54);
      Parser.parse("", (-3999));
      Parser.parse("", 66);
      Parser.parse("invalid named capture", (-3999));
      Regexp regexp0 = Parser.parse("}|O\"", (-3999));
      Regexp regexp1 = Parser.parse("'DEx$n854{I,2dzDj", 65);
      assertNotSame(regexp1, regexp0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Parser parser0 = new Parser("'1*I+", (-363));
      Parser.parse("'1*I+", (-1254));
      Parser.parse("'1*I+", (-4278));
      Parser.parse("'1*I+", (-3999));
      int int0 = (-275);
      Parser.parse("'1*I+", (-275));
      int int1 = (-2014);
      // Undeclared exception!
      try { 
        Parser.parse((String) null, (-2014));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[2];
      regexpArray0[0] = regexp0;
      regexp1.reinit();
      regexpArray0[1] = regexp1;
      Parser.subarray(regexpArray0, (-3999), (-3999));
      Regexp regexp2 = Parser.parse("s", (-3999));
      assertNotSame(regexp2, regexp1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Parser.parse("^", (-3999));
      try { 
        Parser.parse("p6!i[Y^", (-3999));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[Y^`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[3];
      Regexp regexp0 = Parser.parse("{", 8277);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = new Regexp(regexp1);
      int int0 = 1596;
      regexp2.max = 1596;
      regexp2.reinit();
      regexpArray0[2] = regexp2;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 1988, 4138);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = "\\p^";
      int int0 = 5108;
      Regexp regexp0 = Parser.parse("p^", 5108);
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[0] = regexp0;
      int[] intArray0 = new int[9];
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = int0;
      intArray0[3] = int0;
      int int1 = (-448);
      intArray0[4] = int1;
      intArray0[5] = int0;
      intArray0[6] = int0;
      intArray0[7] = int0;
      intArray0[8] = int0;
      regexp0.runes = intArray0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      int int2 = 3642;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int0, int2);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Regexp regexp0 = Parser.parse("(?:)", 4049);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Regexp regexp0 = Parser.parse("OM.Po]aag$(p;J) {d", 120432);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp[] regexpArray0 = new Regexp[2];
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp0;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 120432, 120432);
      assertNotSame(regexpArray0, regexpArray1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0007", 45);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = 1640;
      try { 
        Parser.parse("9c$k\u0003#/<(", (-3999));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `9c$k\u0003#/<(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = (-363);
      Parser parser0 = new Parser("kk[%FlL|v&{", 93);
      try { 
        Parser.parse(":^xY4dUAJ!zAJMA(\bm", 93);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `:^xY4dUAJ!zAJMA(\bm`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[2];
      regexpArray0[0] = regexp0;
      Parser.parse("-]", (-3999));
      Parser.parse("-]", (-3999));
      Regexp regexp1 = Parser.parse("-]", (-3999));
      Regexp regexp2 = Parser.parse("/X!>u2VF\u0002:KF'N`", 93);
      assertFalse(regexp2.equals((Object)regexp1));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Parser parser0 = new Parser("9c$kl3#/{<(", (-1));
      Regexp regexp0 = Parser.parse("9c$kl3#/{<(", 42);
      Regexp regexp1 = Parser.parse("", (-6105));
      Regexp regexp2 = new Regexp(regexp1);
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp2;
      regexpArray0[3] = regexp1;
      regexpArray0[4] = regexp2;
      regexpArray0[5] = regexp0;
      Regexp regexp3 = Parser.parse("\t", (-420));
      regexpArray0[6] = regexp3;
      regexpArray0[7] = regexp1;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 42, (-992));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = "";
      int int0 = (-3999);
      Parser parser0 = new Parser("", (-3999));
      Regexp regexp0 = Parser.parse("\u0003", (-3999));
      int int1 = 0;
      Parser.parse(string0, int1);
      String string1 = "[:";
      int int2 = 54;
      Parser.parse(string1, int2);
      String string2 = "";
      Regexp regexp1 = Parser.parse(string2, int0);
      int int3 = 76;
      Regexp regexp2 = Parser.parse(string0, int3);
      assertFalse(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[2];
      try { 
        Parser.parse("|yh*)$Tl?Fp'^hM20w_", 48);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Parser.parse("eP|`vLUE$-:", 2073);
      Parser.parse("eP|`vLUE$-:", 2073);
      // Undeclared exception!
      try { 
        Parser.parse((String) null, (-1470));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = (-3999);
      Regexp regexp0 = Parser.parse("\u0007", (-3999));
      String string0 = "xnUeR\\[Z";
      int int1 = (-1400);
      Parser.parse(string0, int1);
      String string1 = "invalid character class range";
      Parser.parse(string1, int0);
      Regexp[] regexpArray0 = new Regexp[2];
      regexpArray0[0] = regexp0;
      int int2 = 48;
      Regexp regexp1 = Parser.parse(string1, int2);
      regexpArray0[1] = regexp1;
      int int3 = 46;
      int int4 = 36;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int3, int4);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      try { 
        Parser.parse("JaS2v9um_v.{\"6JUy[O", 1272);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[O`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Parser parser0 = new Parser("missing closing )", 2164);
      try { 
        Parser.parse("(?", 2005);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Regexp regexp0 = Parser.parse("~s|^Vkn&x_96OQl:", 3865);
      Regexp regexp1 = new Regexp(regexp0);
      Parser parser0 = new Parser((String) null, 3865);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Regexp regexp0 = Parser.parse("|W", 121);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Parser.parse("\u0007", 122);
      String string0 = "\\p3#/<(";
      Parser.parse("BHRine|e", 5860);
      try { 
        Parser.parse("p3#/<(", (-1483));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `p3#/<(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = 7324;
      Parser parser0 = new Parser((String) null, 7324);
      try { 
        Parser.parse("a3mr*[w2\n`JeU", 7324);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[w2
         // `JeU`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      Regexp regexp1 = Parser.parse("", 1513);
      assertNotSame(regexp1, regexp0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Parser parser0 = new Parser("l3/wv+]9K;M", 92);
      Regexp regexp0 = Parser.parse("l3/wv+]9K;M", 92);
      Regexp regexp1 = Parser.parse("|5<J$QB31j$^\"<K._7f", 124);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = "|{'}ai{2FVzM+";
      Parser.parse("|{'}ai{2FVzM+", 1769);
      String string1 = "M/zVx6V~";
      Parser parser0 = new Parser("M/zVx6V~", 1769);
      Parser.parse("-", 1769);
      // Undeclared exception!
      try { 
        Parser.parse((String) null, 1769);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      try { 
        Parser.parse("{6)o<Wxksku[?QS", 105);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Parser.parse("\t", (-700));
      Parser parser0 = new Parser("\t", (-700));
      try { 
        Parser.parse("B%Fn[", (-700));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\rap$h]", (-1224));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = 700;
      try { 
        Parser.parse("[);M0%~lH-ff#e@E\"a", 700);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[);M0%~lH-ff#e@E\"a`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0000", (-695));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      try { 
        Parser.parse("WJ~[3\u0000DjSlEQ_Hf", 19968);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[3\u0000DjSlEQ_Hf`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Regexp regexp0 = Parser.parse("v%4", 1);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = (-3999);
      Parser.parse("", (-3999));
      int int1 = (-10743);
      Parser.parse("", (-10743));
      Parser.parse("|4.YYZ|9n~5q<fu", (-3999));
      Parser.parse("/X!>u2VF\u0002:KF'NK7:`", (-3999));
      String string0 = "qf;Ie^*?KcFosjQ!\"V";
      Parser parser0 = new Parser(string0, int0);
      String string1 = null;
      // Undeclared exception!
      try { 
        Parser.parse(string1, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Parser.parse("p|0", 40);
      Parser parser0 = new Parser("s", 40);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Regexp regexp0 = Parser.parse("p|0", (-72));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Regexp regexp0 = Parser.parse("D", 461);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Regexp regexp0 = Parser.parse("s", 8048);
      Parser parser0 = new Parser("s", 2480);
      Parser.parse("lnxev3t", 118);
      Regexp regexp1 = Parser.parse("s", (-79));
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = 3266;
      Parser parser0 = new Parser("D:0<cB", 3266);
      Parser.parse("invalid or unsupported Perl syntax", 3266);
      Parser.parse("D:0<cB", 3266);
      int int1 = 66;
      Parser.parse("'5mbcCn]R+LM*})r", 66);
      int int2 = (-3008);
      Parser.parse("D:0<cB", (-3008));
      int int3 = 1777;
      // Undeclared exception!
      try { 
        Parser.subarray((Regexp[]) null, 1777, (-1489));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Parser.parse("P`BFA", (-2125));
      Regexp regexp0 = Parser.parse("invalid character class range", (-17));
      Regexp regexp1 = Parser.parse("#}$]<M?vENtfVa;", 52);
      assertNotSame(regexp1, regexp0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Regexp regexp0 = Parser.parse("x", 9140);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = "[^\\x00-\\x{10FFFhsF}]";
      int int0 = 41;
      Parser.parse("[^x00-x{10FFFhsF}]", 41);
      String string1 = "{";
      Parser.parse(string1, int0);
      int int1 = (-875);
      Parser.parse(string1, int1);
      Parser parser0 = new Parser(string0, int1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Parser parser0 = new Parser("(0I2b{M}5", (-752));
      Regexp[] regexpArray0 = new Regexp[9];
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = Parser.parse("(0I2b{M}5", (-17));
      regexpArray0[2] = regexp2;
      Regexp regexp3 = Parser.parse("", (-1935));
      regexpArray0[3] = regexp3;
      Regexp.Op regexp_Op1 = Regexp.Op.LITERAL;
      Regexp regexp4 = new Regexp(regexp_Op1);
      regexpArray0[4] = regexp4;
      Regexp regexp5 = new Regexp(regexp1);
      regexpArray0[5] = regexp5;
      Regexp regexp6 = new Regexp(regexp2);
      regexpArray0[6] = regexp6;
      Regexp regexp7 = new Regexp(regexp_Op0);
      regexpArray0[7] = regexp7;
      Regexp regexp8 = Parser.parse("^x00-x{10FFFF}", 200);
      regexpArray0[8] = regexp8;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-17), (-3393));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = (-2415);
      Regexp regexp0 = Parser.parse("x{", (-2415));
      Regexp[] regexpArray0 = new Regexp[2];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      int int1 = (-1659);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int0, int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[^x;0-x{10FFFF}]", 112);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      try { 
        Parser.parse("xA]FGJ2(wNT", 1264);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `xA]FGJ2(wNT`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[^x00-x{10FFFF}]", 41);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = (-512);
      Parser parser0 = new Parser("[::]", (-512));
      Parser.parse("[::]", (-512));
      Parser.parse("[::]", 1589);
      Parser.parse("[::]", (-512));
      // Undeclared exception!
      try { 
        Parser.parse((String) null, (-1346));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Regexp regexp0 = Parser.parse("d", 236);
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 236, 236);
      assertNotSame(regexpArray1, regexpArray0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Parser parser0 = new Parser("(?(", (-1334));
      try { 
        Parser.parse("(?(", 76);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\t", (-700));
      Regexp regexp1 = Parser.parse("[^x00-x{10FFFF}]", (-700));
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[6];
      String string0 = ">|X?10t2k'ZYFB)O";
      int int0 = (-2048);
      try { 
        Parser.parse(">|X?10t2k'ZYFB)O", (-2048));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Regexp regexp0 = Parser.parse("obX<P`7\u0004W2,VwK\"&;", 1866);
      Regexp regexp1 = Parser.parse("obX<P`7\u0004W2,VwK\"&;", 48);
      assertTrue(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Regexp regexp0 = Parser.parse("TYcsZU:\u00019k54U", 8468);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Regexp regexp0 = Parser.parse("(?-m:$)", (-2583));
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = Parser.parse("^MPO@", 45);
      assertNotSame(regexp2, regexp1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      try { 
        Parser.parse("(?-?TPt", 65);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?-?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = "(?-:$";
      int int0 = 1109;
      try { 
        Parser.parse("(?-:$", 1109);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?-:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Regexp regexp0 = Parser.parse("v%4D", 7003);
      Regexp regexp1 = Parser.parse("v%4D", (-1660));
      assertTrue(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Parser parser0 = new Parser("", 98);
      Regexp[] regexpArray0 = new Regexp[6];
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[1] = regexp1;
      int int0 = (-3474);
      Regexp regexp2 = Parser.parse("", (-3474));
      regexpArray0[2] = regexp2;
      Regexp regexp3 = Parser.parse("\f", 1804);
      regexpArray0[3] = regexp3;
      regexp0.flags = 11785;
      Regexp regexp4 = Parser.parse("", 98);
      regexpArray0[4] = regexp4;
      Regexp regexp5 = new Regexp(regexp2);
      regexpArray0[5] = regexp5;
      int int1 = 66639;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 66639, 9664);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      try { 
        Parser.parse("T<~m}dZI|TyP#ynej)Q", (-2756));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Parser.parse("&i|&", (-1104));
      Regexp[] regexpArray0 = new Regexp[0];
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, (-1104), (-1104));
      assertNotSame(regexpArray1, regexpArray0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Regexp regexp0 = Parser.parse("PC", 2256);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Regexp regexp0 = Parser.parse("PP", (-1811));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      try { 
        Parser.parse("(?i:", 232);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(?i:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      try { 
        Parser.parse("!Hr[-[", 876);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = 11505;
      Parser parser0 = new Parser("h!qr[-[", 11505);
      try { 
        Parser.parse("h!qr[-[", 5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      try { 
        Parser.parse("h!qr[-[", 24);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Parser.parse("PPly`", 2423);
      Parser.parse("PPly`", (-2843));
      try { 
        Parser.parse("a>[)9v}{-", 93);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[)9v}{-`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Parser.parse("<,/fL7[u]ZY~fkHYw", (-3787));
      Parser parser0 = new Parser("\"6=G=Z(2vwFVc", 6771);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      try { 
        Parser.parse("],/L[u]Yi):ifkHw", 461);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Regexp regexp0 = Parser.parse("PP`", 1268);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      try { 
        Parser.parse("\"6=G=Z(2vwFVc", (-884));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `\"6=G=Z(2vwFVc`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Parser.parse("(?s:.)", 244);
      Parser parser0 = new Parser("(?s:.)", (-240));
      try { 
        Parser.parse("(?s:.)", 25);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Regexp regexp0 = Parser.parse("t|W", 41);
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp0;
      Regexp regexp1 = Parser.parse("t|W", 10);
      regexpArray0[1] = regexp1;
      String string0 = "YnOX`}oh|.";
      int int0 = 0;
      Regexp regexp2 = Parser.parse("YnOX`}oh|.", 0);
      regexpArray0[2] = regexp2;
      regexpArray0[3] = regexp0;
      regexp2.name = null;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 10, 54);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Regexp regexp0 = Parser.parse("A", 8309);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Regexp regexp0 = Parser.parse("vG47", 1508);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      try { 
        Parser.parse("<,/f7[uWZY[:fkHYw", 65532);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[uWZY[:fkHYw`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      try { 
        Parser.parse("[:[:fkHY", 92);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:[:fkHY`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Regexp regexp0 = Parser.parse("b*&IKiWrZEd]F8y5\u0000&", (-272));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Regexp regexp0 = Parser.parse("JE\u0005eN3Ez`k$6DOc", (-272));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Regexp regexp0 = Parser.parse("o?Ne})mALK:q_bXTp^w", 118);
      Regexp regexp1 = Parser.parse("o?Ne})mALK:q_bXTp^w", 118);
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      Regexp regexp2 = Parser.parse("%d{70L&>cH9:kSz<WAC", 2137);
      regexpArray0[2] = regexp2;
      regexpArray0[3] = regexp1;
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR;
      Regexp regexp3 = new Regexp(regexp_Op0);
      regexpArray0[4] = regexp3;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp0;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, (-285), (-285));
      assertNotSame(regexpArray0, regexpArray1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Regexp regexp0 = Parser.parse("{03>MWuCfjWaA%1", 9);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = 109;
      Parser.parse("t|W", 109);
      String string0 = "nB`\\B71b/fp[73lv=Qb";
      try { 
        Parser.parse("nB`B71b/fp[73lv=Qb", 109);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[73lv=Qb`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Parser.parse("OVT$vy{1}", 245);
      Parser parser0 = new Parser((String) null, 245);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Regexp regexp0 = Parser.parse("OVT$vy{1}", 1408);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Regexp regexp0 = Parser.parse("Qa_{4,~$zU", 57);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Regexp regexp0 = Parser.parse("Qa_{4,~#$N''U", 461);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[8];
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      Regexp.Op regexp_Op1 = Regexp.Op.REPEAT;
      Regexp regexp1 = new Regexp(regexp_Op1);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = Parser.parse(";1~}+/u$udw5s8uXn", (-1437733547));
      regexpArray0[2] = regexp2;
      Regexp regexp3 = new Regexp(regexp_Op1);
      regexpArray0[3] = regexp3;
      Regexp regexp4 = Parser.parse("Whk~dT}PD1w%.MC:", (-1437733547));
      regexpArray0[4] = regexp4;
      Regexp regexp5 = new Regexp(regexp2);
      regexpArray0[5] = regexp5;
      // Undeclared exception!
      try { 
        Parser.parse((String) null, (-1437733547));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[5];
      Regexp regexp0 = Parser.parse("PM", (-543));
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = new Regexp(regexp0);
      regexpArray0[2] = regexp2;
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp3 = new Regexp(regexp_Op0);
      regexpArray0[3] = regexp3;
      Regexp regexp4 = new Regexp(regexp_Op0);
      regexpArray0[4] = regexp4;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 164, 164);
      assertNotSame(regexpArray1, regexpArray0);
  }
}
