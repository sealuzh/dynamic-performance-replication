/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 21:23:09 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DoubleKeyMap<String, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Integer>();
      Integer integer0 = new Integer((-1346));
      Integer integer1 = doubleKeyMap0.get("", integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DoubleKeyMap<Map<String, Object>, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<String, Object>, Object, Integer>();
      Map<HashMap<String, Integer>, Map<Integer, Map<String, Object>>> map0 = doubleKeyMap0.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<String, Integer>, Integer, Map<String, Object>> doubleKeyMap1 = new DoubleKeyMap<HashMap<String, Integer>, Integer, Map<String, Object>>(map0, class0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(3467);
      // Undeclared exception!
      try { 
        doubleKeyMap1.put(hashMap0, integer0, (Map<String, Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<Object, Map<String, Object>>, Map<String, Object>, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Map<Object, Map<String, Object>>, Map<String, Object>, Object>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Integer integer0 = new Integer((-1346));
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Object>(class0);
      Map<Object, Map<Object, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>(map0, class0);
      Object object0 = doubleKeyMap1.remove((Object) integer0, (Object) "us.codecraft.webmagic.utils.DoubleKeyMap");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HashMap<Integer, Map<Object, Integer>> hashMap0 = new HashMap<Integer, Map<Object, Integer>>();
      DoubleKeyMap<Integer, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Integer>(hashMap0);
      Integer integer0 = new Integer(2512);
      Integer integer1 = doubleKeyMap0.get(integer0, (Object) integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DoubleKeyMap<String, Object, Map<Integer, Map<String, Object>>> doubleKeyMap0 = new DoubleKeyMap<String, Object, Map<Integer, Map<String, Object>>>();
      HashMap<String, Map<Integer, HashMap<Object, Integer>>> hashMap0 = new HashMap<String, Map<Integer, HashMap<Object, Integer>>>();
      DoubleKeyMap<String, Integer, HashMap<Object, Integer>> doubleKeyMap1 = new DoubleKeyMap<String, Integer, HashMap<Object, Integer>>(hashMap0);
      Map<Integer, Map<String, Object>> map0 = doubleKeyMap1.newMap();
      Map<Integer, Map<String, Object>> map1 = doubleKeyMap0.put("OV1Soy", (Object) "", map0);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, String>();
      Map<Integer, String> map0 = doubleKeyMap0.remove((Integer) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<HashMap<Integer, String>, Object, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, String>, Object, Object>(class0);
      Map<Object, Map<Integer, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Object>(map0, class0);
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap2 = new DoubleKeyMap<Object, Object, Integer>();
      Integer integer0 = doubleKeyMap2.remove((Object) null, (Object) doubleKeyMap1);
      assertNull(integer0);
  }
}
