/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 07:51:57 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.NumberDeserializer;
import com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JSONSerializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.PageAttributes;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.net.HttpCookie;
import java.sql.BatchUpdateException;
import java.sql.DataTruncation;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLWarning;
import java.sql.Time;
import java.text.BreakIterator;
import java.text.ChoiceFormat;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.text.RuleBasedCollator;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.UUID;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockIllegalAccessException;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      Type type0 = TypeUtils.getCollectionItemType(class0);
      TypeUtils.getGenericParamType(type0);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, map0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      NumberFormatException numberFormatException0 = new NumberFormatException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("([CLjava/lang/Class;)", "([CLjava/lang/Class;)");
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      Class<ChoiceFormat> class0 = ChoiceFormat.class;
      ChoiceFormat choiceFormat0 = new ChoiceFormat("([CLjava/lang/Class;)");
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lan\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      Class<Object> class0 = Object.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) treeMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<Double> class0 = Double.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0, false);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<Dimension> class0 = Dimension.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, (Map<String, String>) null);
      Locale locale0 = Locale.FRANCE;
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance(locale0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(numberFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.text.DecimalFormat@674dc
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TypeUtils.unwrapOptional((Type) null);
      TypeUtils.castToTimestamp((Object) null);
      Class<RuntimeException> class0 = RuntimeException.class;
      boolean boolean0 = TypeUtils.isKotlin(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<Throwable> class0 = Throwable.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0);
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      // Undeclared exception!
      try { 
        TypeUtils.getClass((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, map0);
      Map<String, Object> map1 = javaBeanSerializer0.getFieldValuesMap(map0);
      Class<MapDeserializer> class1 = MapDeserializer.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      MapDeserializer mapDeserializer0 = TypeUtils.castToJavaBean(map1, class1, parserConfig0);
      assertEquals(12, mapDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      Class<StackTraceElementDeserializer> class0 = StackTraceElementDeserializer.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0, true);
      assertEquals(0, treeMap0.size());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      Type type0 = TypeUtils.getCollectionItemType(class0);
      Object object0 = new Object();
      TypeUtils.castToString(object0);
      TypeUtils.getRawClass(type0);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertEquals(0, hashtable0.size());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("javax.xml.datatype.XMLGregorianCalendar", "getMetaClass", (-1705));
      boolean boolean0 = TypeUtils.isHibernateInitialized(sQLTransientConnectionException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TypeUtils.isNumber(",");
      TypeUtils.decapitalize((String) null);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      ChoiceFormat choiceFormat0 = new ChoiceFormat(",");
      assertEquals(0, choiceFormat0.getMinimumFractionDigits());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMDeserializerFactory0.classLoader);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory1);
      MockThread mockThread0 = new MockThread();
      ThreadGroup threadGroup0 = new ThreadGroup("fastjson.parser.autoTypeSupport");
      TypeUtils.getCollectionItemClass(class0);
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("fastjson.parser.deny");
      Class<MockMinguoDate> class1 = MockMinguoDate.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) illegalMonitorStateException0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TypeUtils.castToSqlTime((Object) null);
      TypeUtils.castToBoolean((Object) null);
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, false, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, true, propertyNamingStrategy0);
      assertEquals(2, list0.size());
      
      TypeUtils.getGenericParamType(class0);
      Class<DateFormatSymbols> class1 = DateFormatSymbols.class;
      boolean boolean0 = TypeUtils.isKotlin(class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Locale.getISOCountries();
      TypeUtils.fnv1a_64_lower("#6f.{ayZ~)");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      Class<?> class0 = TypeUtils.loadClass("", classLoader0);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TypeUtils.isNumber("");
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      TypeUtils.castToTimestamp("");
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithJavaBean);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<SQLWarning> class0 = SQLWarning.class;
      TypeUtils.isPath(class0);
      Jdk8DateCodec jdk8DateCodec0 = Jdk8DateCodec.instance;
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(jdk8DateCodec0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Long long0 = new Long(0L);
      TypeUtils.castToFloat(long0);
      Class<SQLException> class0 = SQLException.class;
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException("T");
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(mockNullPointerException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : org.evosuite.runtime.mock.java.lang.MockThrowable: T
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("/i}.4]wc[`8G}[}w");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = "Ljava.awt.Font";
      TypeUtils.getClassFromMapping("Ljava.awt.Font");
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("Ljava.awt.Font");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Ljava.awt.Font\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = TypeUtils.decapitalize("L");
      assertEquals("l", string0);
      
      Class<Character> class0 = Character.TYPE;
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      boolean boolean1 = TypeUtils.isGenericParamType(class0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig();
      aSMDeserializerFactory0.classLoader.getParent();
      TypeUtils.loadClass("fastjson.parser.deny", classLoader0, true);
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("x)]/");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TypeUtils.castToSqlTime((Object) null);
      TypeUtils.castToBoolean((Object) null);
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal((Object) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TypeUtils.fnv1a_64("e4h");
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("e4h");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"e4h\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      Type type0 = TypeUtils.getCollectionItemType(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : class java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TypeUtils.toLocale("(I)C");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      TypeUtils.loadClass("(I)C", classLoader1);
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) null, (Map<String, Field>) identityHashMap0, false, propertyNamingStrategy0);
      Date date0 = TypeUtils.castToDate((Object) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TypeUtils.getClassFromMapping("Ljava.awt.Font");
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      Class<ChoiceFormat> class0 = ChoiceFormat.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) mockHijrahDate0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.ChoiceFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<Rectangle> class0 = Rectangle.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) treeMap0, propertyNamingStrategy0);
      // Undeclared exception!
      try { 
        TypeUtils.getKoltinConstructor((Constructor[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean("Ljava.awt.Color");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : Ljava.awt.Color
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<TimeZone> class0 = TimeZone.class;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Ljava.awt.Color";
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      Class<Short> class1 = Short.TYPE;
      boolean boolean0 = TypeUtils.isGenericParamType(class1);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TypeUtils.getClassFromMapping("Ljava.awt.Font");
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("Ljava.awt.Font");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : Ljava.awt.Font
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      classLoader0.getParent();
      TypeUtils.loadClass((String) null, classLoader1, true);
      Type type0 = TypeUtils.unwrapOptional((Type) null);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TypeUtils.isNumber("x DX~O(vQ~@D.");
      MockThread mockThread0 = new MockThread("p%Edcq8BPw~`'P");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      classLoader0.getParent();
      TypeUtils.loadClass("getgetClass", classLoader0, false);
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MockThread mockThread0 = new MockThread("");
      MockThread mockThread1 = new MockThread(mockThread0, "");
      mockThread1.getContextClassLoader();
      Class<ChoiceFormat> class0 = ChoiceFormat.class;
      ChoiceFormat choiceFormat0 = TypeUtils.castToJavaBean((Object) "", class0);
      assertNull(choiceFormat0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("(I)C");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      Class<Long> class0 = Long.TYPE;
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) locale0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : (i)c
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = "jh6:e";
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("jh6:e");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"jh6:e\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<Dimension> class0 = Dimension.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, (Map<String, String>) null);
      javaBeanSerializer0.getType();
      JSONObject jSONObject0 = new JSONObject();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      Class<ChoiceFormat> class1 = ChoiceFormat.class;
      java.util.IdentityHashMap<DataTruncation, DecimalFormatSymbols> identityHashMap0 = new java.util.IdentityHashMap<DataTruncation, DecimalFormatSymbols>();
      LinkedHashMap<DataTruncation, DecimalFormatSymbols> linkedHashMap0 = new LinkedHashMap<DataTruncation, DecimalFormatSymbols>();
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) linkedHashMap0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.text.ChoiceFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<Dimension> class0 = Dimension.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, (Map<String, String>) null);
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(numberFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.text.DecimalFormat@674dc
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TypeUtils.clearClassMapping();
      TypeUtils.isNumber("1zz9d*R");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      MockThread mockThread0 = new MockThread("1zz9d*R");
      mockThread0.getContextClassLoader();
      ParserConfig parserConfig0 = ParserConfig.global;
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      ChoiceFormat choiceFormat0 = new ChoiceFormat("fastjson.parser.autoTypeAccept");
      Class<ChoiceFormat> class0 = ChoiceFormat.class;
      ChoiceFormat choiceFormat1 = TypeUtils.castToJavaBean((Object) choiceFormat0, class0);
      assertSame(choiceFormat0, choiceFormat1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TypeUtils.clearClassMapping();
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException((String) null);
      TypeUtils.castToSqlDate((Object) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TypeUtils.loadClass("<cdQ,5+DGWE,");
      TypeUtils.getCollectionItemClass((Type) null);
      TypeUtils typeUtils0 = new TypeUtils();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "<cdQ,5+DGWE,", (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TypeUtils.clearClassMapping();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      Class<HttpCookie> class0 = HttpCookie.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class0, jSONType0);
      Class<?> class1 = TypeUtils.getCollectionItemClass((Type) null);
      TypeUtils typeUtils0 = new TypeUtils();
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class1, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TypeUtils.getClassFromMapping("isclone");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      TypeUtils typeUtils0 = new TypeUtils();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Long long0 = TypeUtils.cast((Object) null, (Type) genericArrayType0, parserConfig0);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("can not cast to short, value : ", "A@)");
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(sQLTransactionRollbackException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : java.sql.SQLTransactionRollbackException: can not cast to short, value : 
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Throwable> class0 = Throwable.class;
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.lang.Throwable
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<Throwable> class0 = Throwable.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeUtils.isAnnotationPresentOneToMany((Method) null);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TypeUtils.loadClass("vlu5ErB)Z1C-#'V");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TypeUtils.toLocale("vlu5ErB)Z1C-#'V");
      Locale locale0 = TypeUtils.toLocale("vlu5ErB)Z1C-#'V");
      assertEquals("", locale0.getVariant());
      
      Locale.getISOCountries();
      long long0 = TypeUtils.fnv1a_64_lower("vlu5ErB)Z1C-#'V");
      assertEquals(6332796298105978501L, long0);
      
      TypeUtils.decapitalize("vlu5ErB)Z1C-#'V");
      Object object0 = new Object();
      Class<InternalError> class0 = InternalError.class;
      TypeUtils.getSerializeFeatures(class0);
      TypeUtils.castToString(object0);
      Class<Short> class1 = Short.TYPE;
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONSerializer jSONSerializer0 = new JSONSerializer();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("^w#4QqsnS\"&9", classLoader0);
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      Class<InternalError> class0 = InternalError.class;
      Class<InterruptedException> class1 = InterruptedException.class;
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("^w#4QqsnS\"&9", treeMap0);
      FieldInfo fieldInfo0 = new FieldInfo("BiF", class0, class1, (Type) null, (Field) null, 2310, 499, 2310);
      BeanContext beanContext0 = new BeanContext((Class<?>) null, fieldInfo0);
      Class<Annotation> class2 = Annotation.class;
      beanContext0.getAnnation(class2);
      beanContext0.getMethod();
      boolean boolean0 = TypeUtils.isAnnotationPresentManyToMany((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TypeUtils.loadClass("x)]/");
      Class<Integer> class0 = Integer.TYPE;
      TypeUtils.getCollectionItemClass(class0);
      TypeUtils typeUtils0 = new TypeUtils();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) classLoader0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : sun.misc.Launcher$AppClassLoader@6bc7c054
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<NumberDeserializer> class0 = NumberDeserializer.class;
      TypeUtils.isProxy(class0);
      Class<TimeUnit> class1 = TimeUnit.class;
      TypeUtils.getCollectionItemType(class1);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TypeUtils.computeGetters(class1, map0, true);
      ConcurrentHashMap<PageAttributes, InternalError> concurrentHashMap1 = new ConcurrentHashMap<PageAttributes, InternalError>();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(class1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      Class<BreakIterator> class0 = BreakIterator.class;
      JavaBeanInfo.build((Class<?>) class0, (Type) class0, (PropertyNamingStrategy) null);
      TypeUtils.getClassFromMapping("isclone");
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      assertEquals(1.0F, uTF8Decoder0.maxCharsPerByte(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      Class<NullPointerException> class0 = NullPointerException.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(throwableDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer@99
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<Dimension> class0 = Dimension.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, (Map<String, String>) null);
      Class<?> class1 = javaBeanSerializer0.getType();
      Type type0 = TypeUtils.getCollectionItemType(class1);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.fluentRemove(class0);
      jSONObject0.put("Ljava.lang.AutoCloseable", (Object) type0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      JavaBeanInfo.build(class1, (Type) class1, propertyNamingStrategy0);
      TypeUtils.getClassFromMapping("baS72mu}NdRTUK:");
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      TypeUtils.unwrapOptional(class0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(jSONObject0.defaultTimeZone);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(mockGregorianCalendar0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TypeUtils.getClassFromMapping("Ljava.awt.Font");
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      Class<ChoiceFormat> class0 = ChoiceFormat.class;
      ChoiceFormat choiceFormat0 = TypeUtils.castToJavaBean((Object) null, class0);
      assertNull(choiceFormat0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TypeUtils.getClassFromMapping("Ljava.awt.Font");
      TypeUtils.castToChar((Object) null);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(49, 54, 49);
      TypeUtils.castToLong((Object) null);
      Random.setNextRandom(4011);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      boolean boolean0 = false;
      classLoader0.setDefaultAssertionStatus(false);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      TypeUtils.getSerializeFeatures(class0);
      TypeUtils.loadClass("<cdQ,5+DGWE,");
      TypeUtils.getSerializeFeatures(class0);
      String string0 = "[z";
      // Undeclared exception!
      try { 
        TypeUtils.loadClass("[z");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      Class<TimeUnit> class0 = TimeUnit.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0, false);
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(serializeBeanInfo0);
      Class<?> class1 = javaBeanSerializer0.getType();
      TypeUtils.getCollectionItemType(class0);
      ConcurrentHashMap<String, String> concurrentHashMap1 = new ConcurrentHashMap<String, String>();
      TypeUtils.computeGetters(class1, (Map<String, String>) concurrentHashMap0, false);
      ParserConfig parserConfig0 = new ParserConfig(false);
      SecurityException securityException0 = new SecurityException();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) securityException0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.concurrent.TimeUnit
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<Dimension> class0 = Dimension.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, (Map<String, String>) null);
      javaBeanSerializer0.getType();
      TypeUtils.castToDouble((Object) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      Integer integer0 = TypeUtils.castToInt((Object) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<TimeZone> class0 = TimeZone.class;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Ljava.awt.Color";
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      javaBeanSerializer0.getType();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Class<InternalError> class1 = InternalError.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0, true);
      JavaBeanSerializer javaBeanSerializer1 = new JavaBeanSerializer(serializeBeanInfo0);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(propertyNamingStrategy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : CamelCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TypeUtils.getClassFromMapping("Ljava.awt.Font");
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      classLoader1.clearAssertionStatus();
      TypeUtils.toLocale("Ljava.awt.Font");
      Class<?> class0 = TypeUtils.loadClass("Ljava.awt.Font");
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("x)]/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : x)]/
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      Class<SQLFeatureNotSupportedException> class1 = SQLFeatureNotSupportedException.class;
      int int0 = TypeUtils.getSerializeFeatures(class1);
      assertEquals(0, int0);
      
      TypeUtils.isPath(class0);
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      Class<DecimalFormatSymbols> class2 = DecimalFormatSymbols.class;
      boolean boolean1 = TypeUtils.isProxy(class2);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig();
      Class<BreakIterator> class0 = BreakIterator.class;
      JSONObject jSONObject0 = new JSONObject(18, false);
      jSONObject0.fluentClear();
      jSONObject0.getByte("tq7oEV;G:l;U");
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, class1, class0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "tq7oEV;G:l;U", (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<Dimension> class0 = Dimension.class;
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.fluentRemove(class0);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      TypeUtils.getGenericParamType(class0);
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = null;
      typeArray0[1] = null;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = null;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, (Type) null);
      ParserConfig parserConfig0 = ParserConfig.global;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("3GY?NMrrR62", "1.2.46", 989);
      MockThrowable mockThrowable0 = new MockThrowable("isclone", sQLNonTransientException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("3GY?NMrrR62", mockThrowable0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLTimeoutException0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@196dee19
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<Throwable> class0 = Throwable.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0);
      JavaBeanInfo.build(javaBeanInfo0.clazz, (Type) class0, propertyNamingStrategy0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = TypeUtils.isAnnotationPresentOneToMany((Method) null);
      assertFalse(boolean0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(javaBeanInfo0.clazz).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertEquals(0, javaBeanInfo0.parserFeatures);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MockThread.currentThread();
      TypeUtils.getClassFromMapping("%.W@h3p~4x\n#V{");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException();
      TypeUtils.castToTimestamp((Object) null);
      Constructor<Jdk8DateCodec>[] constructorArray0 = (Constructor<Jdk8DateCodec>[]) Array.newInstance(Constructor.class, 0);
      Constructor constructor0 = TypeUtils.getKoltinConstructor(constructorArray0);
      assertNull(constructor0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      TypeUtils.getCollectionItemType(class0);
      TypeUtils.decapitalize("(Ck}RI]4F8|\nh/dvD");
      Time time0 = new Time(215L);
      Class<SQLFeatureNotSupportedException> class1 = SQLFeatureNotSupportedException.class;
      TypeUtils.getSerializeFeatures(class1);
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException(".000000000");
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TypeUtils.computeGetters(class0, map0, true);
      ConcurrentHashMap<PageAttributes, InternalError> concurrentHashMap1 = new ConcurrentHashMap<PageAttributes, InternalError>();
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal(concurrentHashMap1);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TypeUtils.clearClassMapping();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Class<Character> class0 = Character.TYPE;
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) decimalFormat0, (Type) class0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : java.text.DecimalFormat@674dc
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Class<java.sql.Date> class0 = java.sql.Date.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "/BS?ZbvC%L");
      Boolean.getBoolean((String) null);
      Boolean.logicalXor(false, false);
      ParserConfig parserConfig0 = ParserConfig.global;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      parserConfig0.propertyNamingStrategy = propertyNamingStrategy0;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) boolean0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : true
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig();
      JSONObject jSONObject0 = new JSONObject(18, false);
      jSONObject0.fluentClear();
      jSONObject0.getByte("tq7oEV;G:l;U");
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) null, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      Long long0 = new Long((-32L));
      TypeUtils.castToLong(long0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      assertEquals("\uFFFD", uTF8Decoder0.replacement());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setDefaultAssertionStatus(false);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      TypeUtils.getSerializeFeatures(class0);
      TypeUtils.loadClass("<cdQ,5+DGWE,");
      TypeUtils.getCollectionItemClass(class0);
      TypeUtils typeUtils0 = new TypeUtils();
      Class<ChoiceFormat> class1 = ChoiceFormat.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "<cdQ,5+DGWE,", class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.ChoiceFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<Dimension> class0 = Dimension.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, (Map<String, String>) null);
      Class<?> class1 = javaBeanSerializer0.getType();
      TypeUtils.getCollectionItemType(class1);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.fluentRemove(class0);
      Class<Short> class2 = Short.TYPE;
      Class<Float> class3 = Float.TYPE;
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class3;
      typeArray0[2] = (Type) class2;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[1], class1);
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) typeArray0[2], (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      TypeUtils.fnv1a_64_lower("isclone");
      TypeUtils.decapitalize("isclone");
      Object object0 = new Object();
      TypeUtils.loadClass("isclone");
      HashSet<Double> hashSet0 = new HashSet<Double>();
      AtomicLong atomicLong0 = new AtomicLong(6515643788907674226L);
      TypeUtils.castToByte(atomicLong0);
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      treeMap0.replaceAll(biFunction0);
      Class<ClassLoader> class0 = ClassLoader.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) treeMap0, propertyNamingStrategy0);
      // Undeclared exception!
      try { 
        TypeUtils.getKoltinConstructor((Constructor[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Class<Dimension> class0 = Dimension.class;
          JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, (Map<String, String>) null);
          Class<?> class1 = javaBeanSerializer0.getType();
          Class class2 = (Class)TypeUtils.getCollectionItemType(class1);
          JSONObject jSONObject0 = new JSONObject();
          JSONObject jSONObject1 = jSONObject0.fluentRemove(class0);
          jSONObject0.put("Ljava.lang.AutoCloseable", (Object) class2);
          Point point0 = new Point();
          TypeUtils.getKoltinConstructorParameters(class2);
          // Undeclared exception!
          try { 
            TypeUtils.castToDouble(jSONObject1);
            fail("Expecting exception: RuntimeException");
          
          } catch(RuntimeException e) {
             //
             // create asm serializer error, class class java.lang.Class
             //
             verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<Dimension> class0 = Dimension.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, (Map<String, String>) null);
      Class<?> class1 = javaBeanSerializer0.getType();
      TypeUtils.getCollectionItemType(class1);
      JSONObject jSONObject0 = new JSONObject();
      Class<Calendar> class2 = Calendar.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo(class2, (Map<String, String>) null, propertyNamingStrategy0);
      // Undeclared exception!
      try { 
        TypeUtils.getKoltinConstructor((Constructor[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, (Map<String, String>) null);
      javaBeanSerializer0.getType();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      classLoader1.getParent();
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      Class<SQLInvalidAuthorizationSpecException> class1 = SQLInvalidAuthorizationSpecException.class;
      Class<SQLException> class2 = SQLException.class;
      TypeUtils.getKoltinConstructorParameters(class2);
      Class<Throwable> class3 = Throwable.class;
      TypeUtils.isKotlin(class3);
      TypeUtils.fnv1a_64("setSize");
      TypeUtils.getKoltinConstructorParameters(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.sql.SQLInvalidAuthorizationSpecException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException(sQLInvalidAuthorizationSpecException0);
      Class<String> class0 = String.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      TypeUtils.cast((Object) mockIllegalStateException0, class0, parserConfig0);
      System.setCurrentTimeMillis((-1008L));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TypeUtils.isNumber(",");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      java.util.IdentityHashMap<InstantiationException, SQLSyntaxErrorException> identityHashMap0 = new java.util.IdentityHashMap<InstantiationException, SQLSyntaxErrorException>();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(identityHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      MockThread mockThread0 = new MockThread();
      TypeUtils.loadClass("fastjson.parser.deny", (ClassLoader) aSMDeserializerFactory1.classLoader, false);
      TypeUtils.getCollectionItemClass((Type) null);
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("fastjson.parser.autoTypeAccept");
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) "Ljava.awt.Font", class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException();
      TypeUtils.loadClass("<cdQ,5+DGWE,");
      Class<?> class0 = TypeUtils.getCollectionItemClass((Type) null);
      TypeUtils typeUtils0 = new TypeUtils();
      ClassLoader.getSystemClassLoader();
      TypeUtils.isGenericParamType((Type) null);
      Class<?> class1 = TypeUtils.getRawClass(class0);
      Class<DecimalFormat> class2 = DecimalFormat.class;
      Class<BatchUpdateException> class3 = BatchUpdateException.class;
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class3, "<cdQ,5+DGWE,", fieldArray0);
      FieldInfo fieldInfo0 = new FieldInfo("~e5@OE5'UgY3aa", (Class<?>) null, class2, class1, (Field) null, 1599, 1599, 1599);
      BeanContext beanContext0 = new BeanContext((Class<?>) null, fieldInfo0);
      Class<?> class4 = beanContext0.getFieldClass();
      TypeUtils.isGenericParamType(class4);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TypeUtils.clearClassMapping();
      InterruptedException interruptedException0 = new InterruptedException("getLastResolveTask");
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(interruptedException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : java.lang.InterruptedException: getLastResolveTask
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("x)]/", "x)]/");
      TypeUtils.loadClass((String) null);
      TypeUtils.isNumber("x)]/");
      Object object0 = new Object();
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      Class<SQLTransactionRollbackException> class1 = SQLTransactionRollbackException.class;
      TypeUtils.getCollectionItemType(class1);
      LinkedHashMap<SQLTransientConnectionException, JavaObjectDeserializer> linkedHashMap0 = new LinkedHashMap<SQLTransientConnectionException, JavaObjectDeserializer>();
      Short short0 = new Short((short) (-2591));
      TypeUtils.castToShort(short0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException();
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(stringIndexOutOfBoundsException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : java.lang.StringIndexOutOfBoundsException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<SQLWarning> class0 = SQLWarning.class;
      TypeUtils.isPath(class0);
      ParserConfig.getGlobalInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass(";`a;Fyo*>IR+$1Zb2,V", classLoader0, false);
      Class<Integer> class1 = Integer.TYPE;
      TypeUtils.fnv1a_64("fastjson.parser.autoTypeSupport");
      // Undeclared exception!
      try { 
        TypeUtils.isPath((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Class", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<Dimension> class0 = Dimension.class;
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.fluentRemove(class0);
      Point point0 = new Point();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      RenderingHints.Key renderingHints_Key0 = mock(RenderingHints.Key.class, new ViolatedAssumptionAnswer());
      doReturn("@type").when(renderingHints_Key0).toString();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      RenderingHints renderingHints0 = new RenderingHints(renderingHints_Key0, sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(renderingHints0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {@type=java.sql.SQLIntegrityConstraintViolationException}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TypeUtils.castToString((Object) null);
      Class<Short> class0 = Short.class;
      TypeUtils.getParserFeatures(class0);
      TypeUtils.computeGetters(class0, (Map<String, String>) null);
      Class<ChoiceFormat> class1 = ChoiceFormat.class;
      TypeUtils.getKoltinConstructorParameters(class1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      TypeUtils.isKotlin(class0);
      Class<BufferCapabilities> class1 = BufferCapabilities.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.replace("lBJZ'9s>DfD8IFQJ~nn", "!kcGXhLe)!D", "to");
      weakHashMap0.put("#_JTOKRsT%", "#_JTOKRsT%");
      TypeUtils.unwrapOptional(class1);
      TypeUtils.fnv1a_64_lower("#_JTOKRsT%");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("x)]/", "x)]/");
      TypeUtils.fnv1a_64("getgetSize");
      TypeUtils.decapitalize("x)]/");
      Time time0 = new Time((-7452423323467335920L));
      Class<Long> class0 = Long.class;
      TypeUtils.getSerializeFeatures(class0);
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("p4PB$7{i");
      TypeUtils.castToBytes("x)]/");
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      TypeUtils.isGenericParamType(class1);
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("p4PB$7{i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : p4PB$7{i
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      Class<TimeUnit> class0 = TimeUnit.class;
      TypeUtils.getCollectionItemType(class0);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException("getTimeZone");
      TypeUtils.castToFloat((Object) null);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((-351), "i//N4vB", (-351), (-351), (-351), (-351), (-1), (-351), (-1), (-351), (-351));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month -351
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TypeUtils.clearClassMapping();
      InterruptedException interruptedException0 = new InterruptedException("getLastResolveTask");
      Point point0 = new Point();
      Point point1 = new Point(point0);
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(mockThread0, "getLastResolveTask");
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      classLoader1.setDefaultAssertionStatus(true);
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException();
      Class<Float> class0 = Float.TYPE;
      Type type0 = TypeUtils.unwrapOptional(class0);
      Class<?> class1 = TypeUtils.getClass(type0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "getLastResolveTask", (Type) class1, parserConfig0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<Dimension> class0 = Dimension.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, (Map<String, String>) null);
      Class<?> class1 = javaBeanSerializer0.getType();
      Type type0 = TypeUtils.getCollectionItemType(class1);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.fluentRemove(class0);
      jSONObject0.put("Ljava.lang.AutoCloseable", (Object) type0);
      Point point0 = new Point();
      Class<Float> class2 = Float.TYPE;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, type0, type0);
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) javaBeanSerializer0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("x)]/", "x)]/");
      TypeUtils.loadClass((String) null);
      TypeUtils.isNumber("x)]/");
      TypeUtils.isGenericParamType((Type) null);
      Object object0 = new Object();
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      Integer integer0 = new Integer((-1722350584));
      TypeUtils.castToInt(integer0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Class<Short> class1 = Short.TYPE;
      TypeUtils.isGenericParamType(class0);
      TypeUtils.getRawClass(class0);
      TypeUtils.isGenericParamType(class1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TypeUtils.loadClass("long", (ClassLoader) null);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Locale.getISOCountries();
      TypeUtils.fnv1a_64_lower("#6f.{ayZ~)");
      Object object0 = new Object();
      TypeUtils.loadClass("x)]/");
      Class<BreakIterator> class0 = BreakIterator.class;
      Class<SQLException> class1 = SQLException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      JavaBeanInfo.build((Class<?>) class1, (Type) class0, propertyNamingStrategy0);
      TypeUtils.getClassFromMapping("#6f.{ayZ~)");
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TypeUtils.getClassFromMapping("toS");
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      Class<ChoiceFormat> class0 = ChoiceFormat.class;
      TypeUtils.getCollectionItemType(class0);
      LinkedHashMap<SQLTransientConnectionException, JavaObjectDeserializer> linkedHashMap0 = new LinkedHashMap<SQLTransientConnectionException, JavaObjectDeserializer>();
      TypeUtils.castToShort((Object) null);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      TypeUtils.loadClass("java.lang.");
      TypeUtils typeUtils0 = new TypeUtils();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.getByte("java/lang/Double");
      Class<Short> class0 = Short.TYPE;
      Class<Float> class1 = Float.TYPE;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], class0);
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      parameterizedTypeImpl0.getTypeName();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("toString", "notify", (-2718), sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLIntegrityConstraintViolationException0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. java.sql.SQLIntegrityConstraintViolationException
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TypeUtils.getClassFromMapping("isclone");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("RoundingMode", (-762));
      Integer integer0 = new Integer((-762));
      Integer.max((-762), 0);
      TypeUtils.castToBoolean(integer0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      Class<RuleBasedCollator> class0 = RuleBasedCollator.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0, true);
      TypeUtils.getGenericParamType(class0);
      TypeUtils.castToBigInteger((Object) null);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MockThread.currentThread();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("year", (ClassLoader) aSMDeserializerFactory0.classLoader, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<StackOverflowError> class0 = StackOverflowError.class;
      TypeUtils.getSerializeFeatures(class0);
      TypeUtils.isHibernateInitialized((Object) null);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TypeUtils.getClassFromMapping("Ljava.awt.Font");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException();
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("Ljava.awt.Font");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : Ljava.awt.Font
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }
}
