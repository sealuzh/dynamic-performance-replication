/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 01:27:33 GMT 2018
 */

package okhttp3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.net.UnknownHostException;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import okhttp3.HttpUrl;
import okio.Buffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpUrl_ESTest extends HttpUrl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment((-1803), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.scheme("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addEncodedPathSegment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.username((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // username == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HttpUrl.Builder.ParseResult.values();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "QRU";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("QRU");
      httpUrl_Builder1.encodedFragment("UNSUPPORTED_SCHEME");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedFragment("QRU");
      String string1 = "";
      httpUrl_Builder1.addQueryParameter("", "QRU");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.setEncodedQueryParameter("", "");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.encodedPassword("QRU");
      String string2 = "";
      httpUrl_Builder4.addEncodedQueryParameter("", "cSG6>(}PnEH");
      // Undeclared exception!
      try { 
        httpUrl_Builder4.scheme("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "\n";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment(1680, "\n");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1680, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HttpUrl.percentDecode("R", true);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedQuery("R");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllQueryParameters("::");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.encodedPath("::");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: ::
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HttpUrl.percentDecode("[", true);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedQuery("[");
      String string0 = "::";
      httpUrl_Builder0.removeAllQueryParameters("[");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("::");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = 0;
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addQueryParameter((String) null, "projecys");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      List<String> list0 = httpUrl_Builder0.encodedPathSegments;
      httpUrl_Builder0.encodedQueryNamesAndValues = list0;
      httpUrl_Builder0.username(":");
      // Undeclared exception!
      try { 
        HttpUrl.get((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPassword((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPassword == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "\r";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment(85, "\r");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 85, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addEncodedQueryParameter("1'+?", (String) null);
      HttpUrl.percentDecode("5SW5M", false);
      // Undeclared exception!
      try { 
        httpUrl_Builder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HttpUrl.percentEncoded(";D>w1V`l`", 0, 0);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllQueryParameters(".%2e");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addQueryParameter(".%2e", (String) null);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "/\n";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addEncodedQueryParameter((String) null, "/\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedName == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addPathSegments("#G");
      int int0 = HttpUrl.defaultPort("#G");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = ":";
      httpUrl_Builder0.encodedFragment(":");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = "$VALUES";
      HttpUrl.defaultPort("$VALUES");
      try { 
        HttpUrl.getChecked("$VALUES");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for $VALUES
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "okio.Segment";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment("okio.Segment");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedQuery("");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.reencodeForUri();
      String string1 = "https";
      httpUrl_Builder3.addPathSegments("okio.Segment");
      httpUrl_Builder3.addEncodedPathSegments("https");
      int int0 = 0;
      // Undeclared exception!
      try { 
        httpUrl_Builder0.port(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: 0
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "Jefg/-fjE";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.port((-1489));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: -1489
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllQueryParameters("");
      httpUrl_Builder1.addQueryParameter("", (String) null);
      httpUrl_Builder1.reencodeForUri();
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "..";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addEncodedPathSegments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegments == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("Fq%3CzYgekDfS2");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      try { 
        HttpUrl.getChecked("hM:Hao:c b");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: UNSUPPORTED_SCHEME for hM:Hao:c b
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "Jeg/-fjE";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegments("Jeg/-fjE");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.setPathSegment(8192, "Jeg/-fjE");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 8192, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment(67, "");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 67, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment((String) null);
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.query((String) null);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "DiXHU9DY49m,sh";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllEncodedQueryParameters("DiXHU9DY49m,sh");
      httpUrl_Builder1.removePathSegment(0);
      // Undeclared exception!
      try { 
        httpUrl_Builder1.encodedPath("DiXHU9DY49m,sh");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: DiXHU9DY49m,sh
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = null;
      httpUrl_Builder0.addEncodedQueryParameter("1'+?", (String) null);
      httpUrl_Builder0.query((String) null);
      httpUrl_Builder0.encodedUsername("content == null");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPassword((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPassword == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "X[";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedUsername((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedUsername == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "|(K";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment("|(K");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedQuery("|(K");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedPathSegments("|(K");
      // Undeclared exception!
      try { 
        httpUrl_Builder3.encodedPath("|(K");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: |(K
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegments(".inputStream()");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.setEncodedQueryParameter("?#", "?#");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HttpUrl.percentEncoded(";D>w1V`l`", 0, 0);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.effectivePort();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = HttpUrl.percentEncoded(";D>w1V`l`", 0, 979);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        HttpUrl.getChecked("EE(;G[!Coqv!}");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for EE(;G[!Coqv!}
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = "Ve9GyV:r.sP|bz +f'";
      try { 
        HttpUrl.getChecked("Ve9GyV:r.sP|bz +f'");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: UNSUPPORTED_SCHEME for Ve9GyV:r.sP|bz +f'
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = ";D>w1V`l`";
      HttpUrl.defaultPort("]%3Ca-k]W%60L$']ugm0MA");
      try { 
        HttpUrl.getChecked("^>QU;$Edi&:");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for ^>QU;$Edi&:
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "source == this";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment("source == this");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllQueryParameters("source == this");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.encodedPath("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HttpUrl.parse("http:F:r|bz+ff");
      try { 
        MockURL.URL("http:F:r|bz+ff", "efbbbf", "fMmGUr3>5 U");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: http:f:r|bz+ff
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "scheme == null";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.username("scheme == null");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegments("scheme == null");
      String string1 = "w";
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedUsername("w");
      httpUrl_Builder3.addEncodedQueryParameter("scheme == null", "..");
      String string2 = "e+1Ju x~w^4h$)&Ao";
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.encodedQuery("e+1Ju x~w^4h$)&Ao");
      httpUrl_Builder4.removeAllQueryParameters("e+1Ju x~w^4h$)&Ao");
      httpUrl_Builder2.fragment("{ZbP':w9/");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.addPathSegments("");
      httpUrl_Builder3.encodedUsername("");
      httpUrl_Builder5.addPathSegment("scheme == null");
      // Undeclared exception!
      try { 
        httpUrl_Builder5.setEncodedPathSegment((-4690), "kx");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "::";
      String string1 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addPathSegment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment(0, ".");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected path segment: .
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedPathSegment(0, "kte^a{P9cA24Unh");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegments("kte^a{P9cA24Unh");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addPathSegment("D[T~w");
      String string0 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder3.encodedPassword((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPassword == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = ".%2e";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword(".%2e");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.setEncodedPathSegment(0, ".%2e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected path segment: .%2e
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("<9", "");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedPassword("<9");
      String string0 = "o<0piNb+";
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedPathSegment("o<0piNb+");
      httpUrl_Builder3.encodedQuery("[");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.addQueryParameter((String) null, "o<0piNb+");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.setEncodedQueryParameter("UwM%04+IYKPWy*d\"g)7", "");
      String string0 = " dt'zT3dd";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(" dt'zT3dd");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host:  dt'zT3dd
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = "Ve9GyV:r.sP|bz +f'";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // host == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = HttpUrl.decodeHexDigit('H');
      assertEquals((-1), int0);
      
      boolean boolean0 = HttpUrl.percentEncoded("projects", 979, 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "okhttp3.HttpUrl$1";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("okhttp3.HttpUrl$1");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedFragment("okhttp3.HttpUrl$1");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.host("okhttp3.HttpUrl$1");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addEncodedPathSegment("okhttp3.HttpUrl$1");
      httpUrl_Builder4.addEncodedPathSegments("");
      // Undeclared exception!
      try { 
        httpUrl_Builder4.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = null;
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery((String) null);
      int int0 = 102;
      // Undeclared exception!
      try { 
        httpUrl_Builder1.setPathSegment(102, "");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 102, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("", "");
      httpUrl_Builder0.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.query("");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.password("");
      String string1 = "";
      httpUrl_Builder0.addPathSegment("");
      httpUrl_Builder3.setEncodedQueryParameter(" hex=", "h^nd_rZ7ZjP[fx|3Le");
      // Undeclared exception!
      try { 
        httpUrl_Builder3.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HttpUrl.parse("%40");
      HttpUrl.percentDecode("%40", true);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("%40");
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "m}32v4");
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)33;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "\n";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addQueryParameter(".inputStream()", "\n");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.setQueryParameter("@", "%40");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.fragment("\n");
      // Undeclared exception!
      try { 
        httpUrl_Builder4.setEncodedPathSegment(57, ".inputStream()");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 57, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedPassword("1oZI$80P<%");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.password("XH,l|t._t!'DjS");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegments("XH,l|t._t!'DjS");
      String string0 = "scheme%20==%20null";
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedUsername("scheme%20==%20null");
      httpUrl_Builder2.addEncodedQueryParameter("XH,l|t._t!'DjS", "");
      // Undeclared exception!
      try { 
        httpUrl_Builder3.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = "9E::";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedPassword("\r");
      String string1 = "/x-8";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPath("/x-8");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.scheme("9E::");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: 9E::
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:f");
      List<String> list0 = httpUrl0.encodedPathSegments();
      assertEquals("http://f/", httpUrl0.toString());
      assertEquals(1, list0.size());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = "http:";
      try { 
        HttpUrl.getChecked("http:");
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Invalid host: http:
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addPathSegment("tR_");
      httpUrl_Builder0.encodedPath("/");
      String string0 = ":";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = "http:/";
      MockURL.URL("http:/");
      try { 
        HttpUrl.getChecked("http:/");
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Invalid host: http:/
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = "httsMN";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.host("httsMN");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HttpUrl.defaultPort("8.T ]>[:Z");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      HttpUrl.pathSegmentsToString((StringBuilder) null, linkedList0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = "Ve9GyV:r.sP|bz +f'";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedPassword = "okhttp3.HttpUrl$Builder$ParseResult";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.port(1337);
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegments("");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedQuery((String) null);
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedFragment("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/</;?yd8n{e=8f");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addEncodedQueryParameter("", "d[t~w");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.reencodeForUri();
      HttpUrl httpUrl0 = HttpUrl.parse("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/</;?yd8n{e=8f");
      List<String> list0 = httpUrl0.encodedPathSegments();
      httpUrl_Builder5.encodedQueryNamesAndValues = list0;
      httpUrl_Builder5.username("m^e");
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder1.encodedFragment("xjx:8 J8m3x|E");
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      httpUrl0.encodedPath();
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("D,_#-j");
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNotNull(httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/www.somefakebutwellformedurl.org/fooexample");
      httpUrl0.query();
      assertEquals("https://www.somefakebutwellformedurl.org/fooexample", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(443, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      boolean boolean0 = httpUrl0.equals(httpUrl0);
      assertTrue(boolean0);
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder(":::");
      assertEquals(80, httpUrl0.port());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNotNull(httpUrl_Builder0);
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      httpUrl0.url();
      String string0 = HttpUrl.percentDecode("..", false);
      assertEquals("..", string0);
      
      httpUrl0.query();
      httpUrl0.isHttps();
      httpUrl0.redact();
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HttpUrl.parse("cNx,xH(L>(oDi]S8G@l");
      String string0 = "Sd{Tx0VN\"hCW";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.port(45);
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedQuery("cNx,xH(L>(oDi]S8G@l");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedPassword("Sd{Tx0VN\"hCW");
      String string1 = "tu";
      // Undeclared exception!
      try { 
        httpUrl_Builder3.encodedPath("tu");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: tu
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.port(1114111);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: 1114111
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addEncodedPathSegments("..");
      int int0 = HttpUrl.decodeHexDigit(' ');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedQuery("nDy");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedPathSegments("..");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HttpUrl.parse("http:/");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      HttpUrl.queryStringToNamesAndValues("UTF-32LE");
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode("http:/", (-1385), (-2958), false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HttpUrl.percentDecode("jeg%2f-fje", true);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("password == null");
      String string0 = "http:v:r.sp|bz +f'";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setQueryParameter("http:v:r.sp|bz +f'", "\\");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.removePathSegment(3212);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3212, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegments("}");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.reencodeForUri();
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder2);
      
      String string0 = ":";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("^H;i_c");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegment("]<a-k]W`L$']ugm0MA");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedFragment("]<a-k]W`L$']ugm0MA");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder3);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.reencodeForUri();
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder4);
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.setEncodedQueryParameter(";D>w1V`l`", ".%2e");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder5);
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder0.host(";D>w1V`l`");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder6);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder3.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      httpUrl_Builder0.encodedFragment = "0zu%kuedk";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.reencodeForUri();
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      try { 
        HttpUrl.getChecked("8.hT ,][:ZE");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for 8.hT ,][:ZE
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("%4Q");
      assertNull(httpUrl0);
      
      String string0 = HttpUrl.percentDecode("%4Q", true);
      assertEquals("%4Q", string0);
      assertNotNull(string0);
      
      boolean boolean0 = HttpUrl.percentEncoded("%4Q", 102, 102);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = HttpUrl.percentDecode("Ve9GyV:r.sP|bz +f'", false);
      assertEquals("Ve9GyV:r.sP|bz +f'", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      HttpUrl httpUrl0 = HttpUrl.parse("unexpected port: ");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("d#+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: d#+
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("%4");
      assertNull(httpUrl0);
      
      String string0 = HttpUrl.percentDecode("%4", false);
      assertEquals("%4", string0);
      assertNotNull(string0);
      
      HttpUrl httpUrl1 = HttpUrl.parse("o\"U");
      assertNull(httpUrl1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:F;rh|z+ffd");
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("f;rh|z+ffd", httpUrl0.host());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://f;rh|z+ffd/", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertNotNull(httpUrl0);
      
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterValue((-46661427));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = HttpUrl.percentDecode("[", true);
      assertEquals("[", string0);
      assertNotNull(string0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      
      URL uRL1 = MockURL.URL(uRL0, "8-hT w:,][:ZB]Ea");
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/8-hT w:,][:ZB]Ea", uRL1.toString());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/8-hT w:,][:ZB]Ea", uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNotNull(uRL1);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/8-hT w:,][:ZB]Ea", uRL1.toString());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/8-hT w:,][:ZB]Ea", uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals("http://www.somefakebutwellformedurl.org/8-hT%20w:,][:ZB]Ea", httpUrl0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertNotNull(httpUrl0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("\r");
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/8-hT w:,][:ZB]Ea", uRL1.toString());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/8-hT w:,][:ZB]Ea", uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals("http://www.somefakebutwellformedurl.org/8-hT%20w:,][:ZB]Ea", httpUrl0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(0, httpUrl1.querySize());
      assertFalse(httpUrl1.isHttps());
      assertEquals(80, httpUrl1.port());
      assertEquals("", httpUrl1.password());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("http://www.somefakebutwellformedurl.org/8-hT%20w:,][:ZB]Ea", httpUrl1.toString());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl1.username());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("http", httpUrl1.scheme());
      assertEquals(1, httpUrl1.pathSize());
      assertNotNull(httpUrl1);
      
      boolean boolean0 = httpUrl1.isHttps();
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/8-hT w:,][:ZB]Ea", uRL1.toString());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/8-hT w:,][:ZB]Ea", uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals("http://www.somefakebutwellformedurl.org/8-hT%20w:,][:ZB]Ea", httpUrl0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(0, httpUrl1.querySize());
      assertFalse(httpUrl1.isHttps());
      assertEquals(80, httpUrl1.port());
      assertEquals("", httpUrl1.password());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("http://www.somefakebutwellformedurl.org/8-hT%20w:,][:ZB]Ea", httpUrl1.toString());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl1.username());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("http", httpUrl1.scheme());
      assertEquals(1, httpUrl1.pathSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("vQ-psoYwQR&y^Cz");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedQuery("nDy");
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder2.equals((Object)httpUrl_Builder0));
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedPathSegments(".");
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder2.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder3.equals((Object)httpUrl_Builder0));
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder3, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder3);
      
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = "http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.";
      String string1 = "DiXHU9DY49m,sh";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "::";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllQueryParameters("[");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("::");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNotNull(httpUrl0);
      
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterValue(102);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.");
      assertEquals(10, httpUrl0.pathSize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("6l7/>=[i.", httpUrl0.fragment());
      assertEquals("6l7/>=[i.", httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("mnt", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.querySize());
      assertNotNull(httpUrl0);
      
      URL uRL0 = httpUrl0.url();
      assertEquals(10, httpUrl0.pathSize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("6l7/>=[i.", httpUrl0.fragment());
      assertEquals("6l7/>=[i.", httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("mnt", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.querySize());
      assertEquals("mnt", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("mnt", uRL0.getHost());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.", uRL0.toString());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.", uRL0.toExternalForm());
      assertEquals("6l7/>=[i.", uRL0.getRef());
      assertEquals("7v6", uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      boolean boolean0 = httpUrl0.isHttps();
      assertEquals(10, httpUrl0.pathSize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("6l7/>=[i.", httpUrl0.fragment());
      assertEquals("6l7/>=[i.", httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("mnt", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.querySize());
      assertFalse(boolean0);
      
      String string0 = httpUrl0.encodedPath();
      assertEquals(10, httpUrl0.pathSize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("6l7/>=[i.", httpUrl0.fragment());
      assertEquals("6l7/>=[i.", httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("mnt", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.querySize());
      assertEquals("/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = HttpUrl.percentDecode("[", true);
      assertEquals("[", string0);
      assertNotNull(string0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      
      URL uRL1 = MockURL.URL(uRL0, "8-hT w:,][:ZB]Ea");
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/8-hT w:,][:ZB]Ea", uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/8-hT w:,][:ZB]Ea", uRL1.toExternalForm());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNotNull(uRL1);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/8-hT w:,][:ZB]Ea", uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/8-hT w:,][:ZB]Ea", uRL1.toExternalForm());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertNull(httpUrl0.fragment());
      assertEquals("http://www.somefakebutwellformedurl.org/8-hT%20w:,][:ZB]Ea", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(1, httpUrl0.pathSize());
      assertNotNull(httpUrl0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("[");
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/8-hT w:,][:ZB]Ea", uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/8-hT w:,][:ZB]Ea", uRL1.toExternalForm());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertNull(httpUrl0.fragment());
      assertEquals("http://www.somefakebutwellformedurl.org/8-hT%20w:,][:ZB]Ea", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl1.isHttps());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("", httpUrl1.encodedPassword());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("http", httpUrl1.scheme());
      assertEquals(80, httpUrl1.port());
      assertEquals(0, httpUrl1.querySize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("", httpUrl1.username());
      assertEquals("http://www.somefakebutwellformedurl.org/[", httpUrl1.toString());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl1.password());
      assertNotNull(httpUrl1);
      
      boolean boolean0 = httpUrl1.isHttps();
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/8-hT w:,][:ZB]Ea", uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/8-hT w:,][:ZB]Ea", uRL1.toExternalForm());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertNull(httpUrl0.fragment());
      assertEquals("http://www.somefakebutwellformedurl.org/8-hT%20w:,][:ZB]Ea", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl1.isHttps());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("", httpUrl1.encodedPassword());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("http", httpUrl1.scheme());
      assertEquals(80, httpUrl1.port());
      assertEquals(0, httpUrl1.querySize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("", httpUrl1.username());
      assertEquals("http://www.somefakebutwellformedurl.org/[", httpUrl1.toString());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl1.password());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("q%40");
      assertNull(httpUrl0);
      
      HttpUrl httpUrl1 = HttpUrl.parse("://");
      assertNull(httpUrl1);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment("yj:");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.setEncodedQueryParameter("T|5irBy<Z%_L959Id48", "kte%5Ea%7F%7BP9cA24Unh");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder1.addQueryParameter("T|5irBy<Z%_L959Id48", "NAMo%fA8;\"+t");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder3);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder1.reencodeForUri();
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder4);
      
      HttpUrl httpUrl2 = HttpUrl.parse(",rph;f%7c%5c%7b*");
      assertNull(httpUrl2);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      HttpUrl httpUrl0 = HttpUrl.parse(";D>w1VV}`");
      assertNull(httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = null;
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment((String) null);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      String string1 = "@PO%?Sm@oFo&.iXFm 4";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedQueryParameter((String) null, "@PO%?Sm@oFo&.iXFm 4");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedName == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertNotNull(httpUrl0);
      
      URL uRL1 = httpUrl0.url();
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", uRL1.toString());
      assertNull(uRL1.getQuery());
      assertEquals("www.somefakebutwellformedurl.org", uRL1.getHost());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.somefakebutwellformedurl.org", uRL1.getAuthority());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", uRL1.toExternalForm());
      assertNotNull(uRL1);
      
      String string0 = HttpUrl.percentDecode("..", false);
      assertEquals("..", string0);
      assertNotNull(string0);
      
      String string1 = httpUrl0.query();
      assertFalse(uRL0.equals((Object)uRL1));
      assertNotSame(uRL0, uRL1);
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertNull(string1);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("HK%7@PwObr@D4W");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      URI uRI0 = httpUrl0.uri();
      assertFalse(uRL0.equals((Object)uRL1));
      assertNotSame(uRL0, uRL1);
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertFalse(uRI0.isOpaque());
      assertEquals("www.somefakebutwellformedurl.org", uRI0.getRawAuthority());
      assertNull(uRI0.getRawUserInfo());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.somefakebutwellformedurl.org", uRI0.getHost());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawFragment());
      assertEquals("http", uRI0.getScheme());
      assertNotNull(uRI0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder1.setPathSegment(1871, "..");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected path segment: ..
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:/www.omefakebutwellformedurl.org/fooexample");
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("https://www.omefakebutwellformedurl.org/fooexample", httpUrl0.toString());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("https", httpUrl0.scheme());
      assertTrue(httpUrl0.isHttps());
      assertEquals(443, httpUrl0.port());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertNotNull(httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder();
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("https://www.omefakebutwellformedurl.org/fooexample", httpUrl0.toString());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("https", httpUrl0.scheme());
      assertTrue(httpUrl0.isHttps());
      assertEquals(443, httpUrl0.port());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertNotNull(httpUrl_Builder0);
      
      URL uRL0 = httpUrl0.url();
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("https://www.omefakebutwellformedurl.org/fooexample", httpUrl0.toString());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("https", httpUrl0.scheme());
      assertTrue(httpUrl0.isHttps());
      assertEquals(443, httpUrl0.port());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("https://www.omefakebutwellformedurl.org/fooexample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("https", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertEquals("https://www.omefakebutwellformedurl.org/fooexample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("www.omefakebutwellformedurl.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.omefakebutwellformedurl.org", uRL0.getHost());
      assertNotNull(uRL0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertNotNull(httpUrl0);
      
      boolean boolean0 = httpUrl0.equals(httpUrl0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertTrue(boolean0);
      
      String string0 = httpUrl0.encodedQuery();
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment((String) null);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder1.encodedPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPath == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = "http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/ordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.";
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/ordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.");
      assertEquals("6l7/>=[i.", httpUrl0.encodedFragment());
      assertEquals(10, httpUrl0.pathSize());
      assertEquals("6l7/>=[i.", httpUrl0.fragment());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/ordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(1, httpUrl0.querySize());
      assertEquals("mnt", httpUrl0.host());
      assertNotNull(httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword("encodedName == null");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedQuery("~{nI5y*V7`ATEDX");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.setQueryParameter("KmI", "~{nI5y*V7`ATEDX");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder3);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder3.setPathSegment((-3338), "HM,oSgu%!}_-i+bg");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@/?#");
      assertFalse(boolean0);
      
      String string0 = HttpUrl.percentDecode("%5+_-o[q$", true);
      assertEquals("%5 _-o[q$", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = "cNx,xH(L>(oDi]S8G@l";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllEncodedQueryParameters("cNx,xH(L>(oDi]S8G@l");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedQuery(" \"':;<=>@[]^`{}|/?#&!$(),~");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedPassword("cNx,xH(L>(oDi]S8G@l");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder3);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.encodedUsername(")/P /IjMC 4~byE6il");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertNotNull(httpUrl_Builder4);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder4.host(" \"':;<=>@[]^`{}|/?#&!$(),~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host:  \"':;<=>@[]^`{}|/?#&!$(),~
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.");
      assertEquals("6l7/>=[i.", httpUrl0.encodedFragment());
      assertEquals("6l7/>=[i.", httpUrl0.fragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertEquals(10, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.", httpUrl0.toString());
      assertEquals("mnt", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertNotNull(httpUrl0);
      
      URL uRL0 = httpUrl0.url();
      assertEquals("6l7/>=[i.", httpUrl0.encodedFragment());
      assertEquals("6l7/>=[i.", httpUrl0.fragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertEquals(10, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.", httpUrl0.toString());
      assertEquals("mnt", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals("6l7/>=[i.", uRL0.getRef());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.", uRL0.toString());
      assertEquals("mnt", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("7v6", uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.", uRL0.toExternalForm());
      assertEquals("mnt", uRL0.getHost());
      assertNotNull(uRL0);
      
      String string0 = httpUrl0.query();
      assertEquals("6l7/>=[i.", httpUrl0.encodedFragment());
      assertEquals("6l7/>=[i.", httpUrl0.fragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertEquals(10, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.", httpUrl0.toString());
      assertEquals("mnt", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals("7v6", string0);
      assertNotNull(string0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("HK%7@PwObr@D4W");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegments("HK%7@PwObr@D4W");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder2);
      
      URI uRI0 = httpUrl0.uri();
      assertEquals("6l7/>=[i.", httpUrl0.encodedFragment());
      assertEquals("6l7/>=[i.", httpUrl0.fragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertEquals(10, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.", httpUrl0.toString());
      assertEquals("mnt", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals("6l7/%3E=[i.", uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("mnt", uRI0.getHost());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertEquals("/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r", uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertEquals("mnt", uRI0.getRawAuthority());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/%3E=[i.", uRI0.toString());
      assertEquals("7v6", uRI0.getRawQuery());
      assertFalse(uRI0.isOpaque());
      assertNotNull(uRI0);
      
      String string1 = "kQ$f}g.ic?t";
      // Undeclared exception!
      try { 
        httpUrl_Builder2.setPathSegment(1871, "kQ$f}g.ic?t");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1871, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("6:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 6:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = "[";
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string1 = HttpUrl.percentDecode("[", true);
      assertTrue(string1.equals((Object)string0));
      assertEquals("[", string1);
      assertNotNull(string1);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      String string2 = "8-hT w:,][:ZB]Ea";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("8-hT w:,][:ZB]Ea");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 8-hT w:,][:ZB]Ea
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = "E@:";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("E@:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: E@:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertNotNull(httpUrl0);
      
      Set<String> set0 = httpUrl0.queryParameterNames();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("|}/oT*z#");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setPathSegment(0, "]U683^'Rz");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedPathSegments("|}/oT*z#");
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertNotNull(httpUrl_Builder3);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.host("9J{_V^FU");
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder4);
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.password("8hr5j=@__l");
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertNotNull(httpUrl_Builder5);
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder5.removePathSegment(0);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder6);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertNotNull(httpUrl_Builder6);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.");
      assertEquals("", httpUrl0.username());
      assertEquals(10, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals("6l7/>=[i.", httpUrl0.fragment());
      assertEquals("6l7/>=[i.", httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.querySize());
      assertEquals("mnt", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertNotNull(httpUrl0);
      
      URL uRL0 = httpUrl0.url();
      assertEquals("", httpUrl0.username());
      assertEquals(10, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals("6l7/>=[i.", httpUrl0.fragment());
      assertEquals("6l7/>=[i.", httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.querySize());
      assertEquals("mnt", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("mnt", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("7v6", uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.", uRL0.toExternalForm());
      assertEquals("mnt", uRL0.getHost());
      assertEquals("6l7/>=[i.", uRL0.getRef());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.", uRL0.toString());
      assertNotNull(uRL0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedUsername("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("BE(=g}n92zV1PA+");
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertEquals("", httpUrl0.username());
      assertEquals(10, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals("6l7/>=[i.", httpUrl0.fragment());
      assertEquals("6l7/>=[i.", httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.querySize());
      assertEquals("mnt", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/BE(=g%7Dn92zV1PA+", httpUrl1.toString());
      assertEquals("mnt", httpUrl1.host());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("", httpUrl1.password());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl1.username());
      assertEquals("http", httpUrl1.scheme());
      assertEquals(80, httpUrl1.port());
      assertEquals(0, httpUrl1.querySize());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals(10, httpUrl1.pathSize());
      assertFalse(httpUrl1.isHttps());
      assertNotNull(httpUrl1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("?C(-o>%4pec8mS!Ics}", "data == null");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.reencodeForUri();
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.removeAllEncodedQueryParameters("UTF-32LE");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder3);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addPathSegment("data == null");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder4);
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.removePathSegment(0);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder5);
      
      HttpUrl httpUrl0 = HttpUrl.parse("?C(-o>%4pec8mS!Ics}");
      assertNull(httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder0.addEncodedPathSegments("source is closed");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertNotNull(httpUrl_Builder6);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = HttpUrl.percentDecode("[", false);
      assertEquals("[", string0);
      assertNotNull(string0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      try { 
        HttpUrl.getChecked("l+|C]CS");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for l+|C]CS
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.");
      assertEquals("", httpUrl0.username());
      assertEquals(10, httpUrl0.pathSize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("6l7/>=[i.", httpUrl0.encodedFragment());
      assertEquals("6l7/>=[i.", httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.", httpUrl0.toString());
      assertEquals(1, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals(80, httpUrl0.port());
      assertEquals("mnt", httpUrl0.host());
      assertNotNull(httpUrl0);
      
      URL uRL0 = httpUrl0.url();
      assertEquals("", httpUrl0.username());
      assertEquals(10, httpUrl0.pathSize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("6l7/>=[i.", httpUrl0.encodedFragment());
      assertEquals("6l7/>=[i.", httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.", httpUrl0.toString());
      assertEquals(1, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals(80, httpUrl0.port());
      assertEquals("mnt", httpUrl0.host());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.", uRL0.toString());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.", uRL0.toExternalForm());
      assertEquals("mnt", uRL0.getHost());
      assertEquals("7v6", uRL0.getQuery());
      assertEquals("6l7/>=[i.", uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("mnt", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedUsername("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.port(57);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder2);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("Ii=%Xc%2tj^<<");
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertEquals("", httpUrl0.username());
      assertEquals(10, httpUrl0.pathSize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("6l7/>=[i.", httpUrl0.encodedFragment());
      assertEquals("6l7/>=[i.", httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.", httpUrl0.toString());
      assertEquals(1, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals(80, httpUrl0.port());
      assertEquals("mnt", httpUrl0.host());
      assertEquals(80, httpUrl1.port());
      assertEquals(0, httpUrl1.querySize());
      assertFalse(httpUrl1.isHttps());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/Ii=%Xc%2tj%5E%3C%3C", httpUrl1.toString());
      assertEquals("mnt", httpUrl1.host());
      assertNull(httpUrl1.encodedFragment());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl1.password());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertEquals(10, httpUrl1.pathSize());
      assertNotNull(httpUrl1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.");
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("6l7/>=[i.", httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(10, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.querySize());
      assertEquals("6l7/>=[i.", httpUrl0.fragment());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.", httpUrl0.toString());
      assertEquals("mnt", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertNotNull(httpUrl0);
      
      Set<String> set0 = httpUrl0.queryParameterNames();
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("6l7/>=[i.", httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(10, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.querySize());
      assertEquals("6l7/>=[i.", httpUrl0.fragment());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.", httpUrl0.toString());
      assertEquals("mnt", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      assertNotNull(set0);
      
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterValue(46);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 93, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:/mnt/gaiagpfs/users/homedirs/apa|cella/evjsuiteperformance/8ataset/gordon_cripts_adaptce/projecYs/7_ok]tp/vijK6pf.r?7v6#6l7/>=[i.");
      assertEquals("", httpUrl0.username());
      assertEquals("6l7/>=[i.", httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("mnt", httpUrl0.host());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apa%7Ccella/evjsuiteperformance/8ataset/gordon_cripts_adaptce/projecYs/7_ok]tp/vijK6pf.r?7v6#6l7/>=[i.", httpUrl0.toString());
      assertEquals("6l7/>=[i.", httpUrl0.encodedFragment());
      assertEquals(10, httpUrl0.pathSize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertNotNull(httpUrl0);
      
      Set<String> set0 = httpUrl0.queryParameterNames();
      assertEquals("", httpUrl0.username());
      assertEquals("6l7/>=[i.", httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("mnt", httpUrl0.host());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apa%7Ccella/evjsuiteperformance/8ataset/gordon_cripts_adaptce/projecYs/7_ok]tp/vijK6pf.r?7v6#6l7/>=[i.", httpUrl0.toString());
      assertEquals("6l7/>=[i.", httpUrl0.encodedFragment());
      assertEquals(10, httpUrl0.pathSize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      
      boolean boolean0 = httpUrl0.equals("http:/mnt/gaiagpfs/users/homedirs/apa|cella/evjsuiteperformance/8ataset/gordon_cripts_adaptce/projecYs/7_ok]tp/vijK6pf.r?7v6#6l7/>=[i.");
      assertEquals("", httpUrl0.username());
      assertEquals("6l7/>=[i.", httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("mnt", httpUrl0.host());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apa%7Ccella/evjsuiteperformance/8ataset/gordon_cripts_adaptce/projecYs/7_ok]tp/vijK6pf.r?7v6#6l7/>=[i.", httpUrl0.toString());
      assertEquals("6l7/>=[i.", httpUrl0.encodedFragment());
      assertEquals(10, httpUrl0.pathSize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = HttpUrl.percentDecode("0#", true);
      assertEquals("0#", string0);
      assertNotNull(string0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNotNull(uRL0);
      
      URL uRL1 = MockURL.URL(uRL0, "0#");
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/0#", uRL1.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/0#", uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertEquals("", uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http", uRL1.getProtocol());
      assertNotNull(uRL1);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/0#", uRL1.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/0#", uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertEquals("", uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("", httpUrl0.fragment());
      assertEquals("", httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://www.somefakebutwellformedurl.org/0#", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertNotNull(httpUrl0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("0#");
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/0#", uRL1.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/0#", uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertEquals("", uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("", httpUrl0.fragment());
      assertEquals("", httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://www.somefakebutwellformedurl.org/0#", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertEquals("", httpUrl1.encodedFragment());
      assertEquals(0, httpUrl1.querySize());
      assertFalse(httpUrl1.isHttps());
      assertEquals(80, httpUrl1.port());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("", httpUrl1.fragment());
      assertEquals("http://www.somefakebutwellformedurl.org/0#", httpUrl1.toString());
      assertEquals("", httpUrl1.password());
      assertNotNull(httpUrl1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("[", "[");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedPath("/ISIZE");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedQueryParameter("[", "[");
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder3);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addPathSegments("");
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertNotNull(httpUrl_Builder4);
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.addEncodedPathSegments("[");
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertNotNull(httpUrl_Builder5);
      
      String string0 = " \"':;<=>@[]^`{}|/\\?#";
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder5.encodedQuery(" \"':;<=>@[]^`{}|/?#");
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder6);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertNotNull(httpUrl_Builder6);
      
      HttpUrl.Builder httpUrl_Builder7 = httpUrl_Builder0.addQueryParameter("/ISIZE", " \"':;<=>@[]^`{}|/?#");
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder7, httpUrl_Builder2);
      assertSame(httpUrl_Builder7, httpUrl_Builder5);
      assertSame(httpUrl_Builder7, httpUrl_Builder6);
      assertSame(httpUrl_Builder7, httpUrl_Builder1);
      assertSame(httpUrl_Builder7, httpUrl_Builder3);
      assertSame(httpUrl_Builder7, httpUrl_Builder0);
      assertSame(httpUrl_Builder7, httpUrl_Builder4);
      assertNotNull(httpUrl_Builder7);
      
      String string1 = "..";
      HttpUrl.Builder httpUrl_Builder8 = httpUrl_Builder1.addEncodedPathSegments("");
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder8);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder8);
      assertSame(httpUrl_Builder8, httpUrl_Builder5);
      assertSame(httpUrl_Builder8, httpUrl_Builder1);
      assertSame(httpUrl_Builder8, httpUrl_Builder6);
      assertSame(httpUrl_Builder8, httpUrl_Builder7);
      assertSame(httpUrl_Builder8, httpUrl_Builder0);
      assertSame(httpUrl_Builder8, httpUrl_Builder3);
      assertSame(httpUrl_Builder8, httpUrl_Builder4);
      assertSame(httpUrl_Builder8, httpUrl_Builder2);
      assertNotNull(httpUrl_Builder8);
      
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("q%40");
      assertNull(httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment("q%40");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.password(") disagree");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder2);
      
      String string0 = null;
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder1.addQueryParameter("#G", (String) null);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder3);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder1.reencodeForUri();
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder4);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder2.host("::");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("q%40");
      assertNull(httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment("q%40");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      String string0 = HttpUrl.percentDecode("", false);
      assertEquals("", string0);
      assertNotNull(string0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
      URL uRL1 = MockURL.URL(uRL0, "");
      assertTrue(uRL1.equals((Object)uRL0));
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getRef());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNotNull(uRL1);
      
      HttpUrl httpUrl1 = HttpUrl.get(uRL0);
      assertTrue(uRL0.equals((Object)uRL1));
      assertNotSame(uRL0, uRL1);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl1.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("", httpUrl1.username());
      assertEquals("http", httpUrl1.scheme());
      assertEquals(80, httpUrl1.port());
      assertNull(httpUrl1.encodedFragment());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("", httpUrl1.encodedPassword());
      assertNull(httpUrl1.fragment());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.password());
      assertNotNull(httpUrl1);
      
      HttpUrl httpUrl2 = httpUrl1.resolve("");
      assertTrue(uRL0.equals((Object)uRL1));
      assertTrue(httpUrl2.equals((Object)httpUrl1));
      assertNotSame(uRL0, uRL1);
      assertNotSame(httpUrl1, httpUrl2);
      assertNotSame(httpUrl2, httpUrl1);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl1.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("", httpUrl1.username());
      assertEquals("http", httpUrl1.scheme());
      assertEquals(80, httpUrl1.port());
      assertNull(httpUrl1.encodedFragment());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("", httpUrl1.encodedPassword());
      assertNull(httpUrl1.fragment());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.password());
      assertFalse(httpUrl2.isHttps());
      assertEquals(1, httpUrl2.pathSize());
      assertEquals("", httpUrl2.encodedPassword());
      assertNull(httpUrl2.encodedFragment());
      assertEquals("http", httpUrl2.scheme());
      assertEquals(80, httpUrl2.port());
      assertEquals(0, httpUrl2.querySize());
      assertEquals("", httpUrl2.username());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl2.toString());
      assertNull(httpUrl2.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl2.host());
      assertEquals("", httpUrl2.password());
      assertNotNull(httpUrl2);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNotNull(uRL0);
      
      URL uRL1 = MockURL.URL(uRL0, "g7L?9*Lt~3");
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("9*Lt~3", uRL1.getQuery());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/g7L?9*Lt~3", uRL1.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/g7L?9*Lt~3", uRL1.toExternalForm());
      assertNull(uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertNotNull(uRL1);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertNotSame(uRL0, uRL1);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertNotNull(httpUrl0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("g7L?9*Lt~3");
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertNotSame(uRL0, uRL1);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("", httpUrl1.username());
      assertEquals("http", httpUrl1.scheme());
      assertEquals(1, httpUrl1.querySize());
      assertNull(httpUrl1.encodedFragment());
      assertEquals(80, httpUrl1.port());
      assertEquals("", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("http://www.somefakebutwellformedurl.org/g7L?9*Lt~3", httpUrl1.toString());
      assertNull(httpUrl1.fragment());
      assertFalse(httpUrl1.isHttps());
      assertNotNull(httpUrl1);
      
      List<String> list0 = httpUrl1.pathSegments();
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertNotSame(uRL0, uRL1);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("", httpUrl1.username());
      assertEquals("http", httpUrl1.scheme());
      assertEquals(1, httpUrl1.querySize());
      assertNull(httpUrl1.encodedFragment());
      assertEquals(80, httpUrl1.port());
      assertEquals("", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("http://www.somefakebutwellformedurl.org/g7L?9*Lt~3", httpUrl1.toString());
      assertNull(httpUrl1.fragment());
      assertFalse(httpUrl1.isHttps());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setQueryParameter("Ve9GyV:r.sP|bz +f'", "q%40");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegment("..");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedPathSegments("8zK/Z\"Mp>% P>nqd/");
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder3);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addEncodedQueryParameter("nDy", "");
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder4);
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.addEncodedPathSegments("..");
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertNotNull(httpUrl_Builder5);
      
      HttpUrl httpUrl0 = HttpUrl.parse("password == null");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.");
      assertEquals("mnt", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals("https://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("6l7/>=[i.", httpUrl0.fragment());
      assertEquals(443, httpUrl0.port());
      assertEquals("6l7/>=[i.", httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals(10, httpUrl0.pathSize());
      assertEquals("https", httpUrl0.scheme());
      assertEquals(1, httpUrl0.querySize());
      assertTrue(httpUrl0.isHttps());
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.host();
      assertEquals("mnt", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals("https://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("6l7/>=[i.", httpUrl0.fragment());
      assertEquals(443, httpUrl0.port());
      assertEquals("6l7/>=[i.", httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals(10, httpUrl0.pathSize());
      assertEquals("https", httpUrl0.scheme());
      assertEquals(1, httpUrl0.querySize());
      assertTrue(httpUrl0.isHttps());
      assertEquals("mnt", string0);
      assertNotNull(string0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment("https:mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder1.removeAllQueryParameters((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = "[:";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("[:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: [:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = "htts:";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.password("Unexpected code point: ");
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder2.equals((Object)httpUrl_Builder0));
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedQuery("htts:");
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder2.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder3.equals((Object)httpUrl_Builder0));
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder3, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder3);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder2.addQueryParameter("htts:", "LHi3T");
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder2.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder0));
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertNotNull(httpUrl_Builder4);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder2.host("[rQj:[>GI");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: [rQj:[>GI
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.host("httsMN");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.port(968);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder2);
      
      HttpUrl httpUrl0 = HttpUrl.parse("http:v:r.sp|bz:+ff'");
      assertNull(httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder0.encodedPassword("http:v:r.sp|bz:+ff'");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder3);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder1.encodedQuery("size < ");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertNotNull(httpUrl_Builder4);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = "https:";
      HttpUrl httpUrl0 = HttpUrl.parse("https:");
      assertNull(httpUrl0);
      
      URI uRI0 = MockURI.URI("https:", "https:", "https:");
      assertTrue(uRI0.isOpaque());
      assertEquals("https", uRI0.getScheme());
      assertEquals("https::https:#https:", uRI0.toString());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawPath());
      assertEquals("https:", uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertNotNull(uRI0);
      
      URI uRI1 = MockURI.parseServerAuthority(uRI0);
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      assertTrue(uRI0.isOpaque());
      assertEquals("https", uRI0.getScheme());
      assertEquals("https::https:#https:", uRI0.toString());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawPath());
      assertEquals("https:", uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI1.getRawQuery());
      assertEquals("https", uRI1.getScheme());
      assertEquals((-1), uRI1.getPort());
      assertTrue(uRI1.isOpaque());
      assertEquals("https::https:#https:", uRI1.toString());
      assertTrue(uRI1.isAbsolute());
      assertNull(uRI1.getRawAuthority());
      assertEquals("https:", uRI1.getRawFragment());
      assertNull(uRI1.getRawPath());
      assertNull(uRI1.getHost());
      assertNull(uRI1.getRawUserInfo());
      assertNotNull(uRI1);
      
      URI uRI2 = MockURI.relativize(uRI1, uRI0);
      assertSame(uRI0, uRI1);
      assertSame(uRI0, uRI2);
      assertSame(uRI1, uRI0);
      assertSame(uRI1, uRI2);
      assertSame(uRI2, uRI1);
      assertSame(uRI2, uRI0);
      assertTrue(uRI0.isOpaque());
      assertEquals("https", uRI0.getScheme());
      assertEquals("https::https:#https:", uRI0.toString());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawPath());
      assertEquals("https:", uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI1.getRawQuery());
      assertEquals("https", uRI1.getScheme());
      assertEquals((-1), uRI1.getPort());
      assertTrue(uRI1.isOpaque());
      assertEquals("https::https:#https:", uRI1.toString());
      assertTrue(uRI1.isAbsolute());
      assertNull(uRI1.getRawAuthority());
      assertEquals("https:", uRI1.getRawFragment());
      assertNull(uRI1.getRawPath());
      assertNull(uRI1.getHost());
      assertNull(uRI1.getRawUserInfo());
      assertNull(uRI2.getRawAuthority());
      assertNull(uRI2.getRawUserInfo());
      assertTrue(uRI2.isAbsolute());
      assertEquals("https:", uRI2.getRawFragment());
      assertNull(uRI2.getRawPath());
      assertEquals("https::https:#https:", uRI2.toString());
      assertTrue(uRI2.isOpaque());
      assertEquals((-1), uRI2.getPort());
      assertNull(uRI2.getHost());
      assertEquals("https", uRI2.getScheme());
      assertNull(uRI2.getRawQuery());
      assertNotNull(uRI2);
      
      HttpUrl httpUrl1 = HttpUrl.get(uRI2);
      assertSame(uRI0, uRI1);
      assertSame(uRI0, uRI2);
      assertSame(uRI1, uRI0);
      assertSame(uRI1, uRI2);
      assertSame(uRI2, uRI1);
      assertSame(uRI2, uRI0);
      assertTrue(uRI0.isOpaque());
      assertEquals("https", uRI0.getScheme());
      assertEquals("https::https:#https:", uRI0.toString());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawPath());
      assertEquals("https:", uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI1.getRawQuery());
      assertEquals("https", uRI1.getScheme());
      assertEquals((-1), uRI1.getPort());
      assertTrue(uRI1.isOpaque());
      assertEquals("https::https:#https:", uRI1.toString());
      assertTrue(uRI1.isAbsolute());
      assertNull(uRI1.getRawAuthority());
      assertEquals("https:", uRI1.getRawFragment());
      assertNull(uRI1.getRawPath());
      assertNull(uRI1.getHost());
      assertNull(uRI1.getRawUserInfo());
      assertNull(uRI2.getRawAuthority());
      assertNull(uRI2.getRawUserInfo());
      assertTrue(uRI2.isAbsolute());
      assertEquals("https:", uRI2.getRawFragment());
      assertNull(uRI2.getRawPath());
      assertEquals("https::https:#https:", uRI2.toString());
      assertTrue(uRI2.isOpaque());
      assertEquals((-1), uRI2.getPort());
      assertNull(uRI2.getHost());
      assertEquals("https", uRI2.getScheme());
      assertNull(uRI2.getRawQuery());
      assertNull(httpUrl1);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment("https:");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder2);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("::");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertNotNull(httpUrl0);
      
      List<String> list0 = httpUrl0.queryParameterValues("source == null");
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      HttpUrl.Builder.ParseResult[] httpUrl_Builder_ParseResultArray0 = HttpUrl.Builder.ParseResult.values();
      assertNotNull(httpUrl_Builder_ParseResultArray0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.");
      assertEquals("mnt", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("6l7/>=[i.", httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals(1, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(10, httpUrl0.pathSize());
      assertEquals("6l7/>=[i.", httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertNotNull(httpUrl0);
      
      URL uRL0 = MockURL.URL("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.");
      assertEquals("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.", uRL0.toString());
      assertEquals("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("6l7/>=[i.", uRL0.getRef());
      assertEquals("7v6", uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl1 = HttpUrl.get(uRL0);
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      assertNotSame(httpUrl1, httpUrl0);
      assertEquals("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.", uRL0.toString());
      assertEquals("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("6l7/>=[i.", uRL0.getRef());
      assertEquals("7v6", uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals(80, httpUrl1.port());
      assertEquals(1, httpUrl1.querySize());
      assertFalse(httpUrl1.isHttps());
      assertEquals("6l7/>=[i.", httpUrl1.fragment());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("6l7/>=[i.", httpUrl1.encodedFragment());
      assertEquals("mnt", httpUrl1.host());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertEquals(10, httpUrl1.pathSize());
      assertEquals("", httpUrl1.password());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.", httpUrl1.toString());
      assertNotNull(httpUrl1);
      
      List<String> list0 = httpUrl0.queryParameterValues("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.");
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      assertNotSame(httpUrl0, httpUrl1);
      assertEquals("mnt", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("6l7/>=[i.", httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals(1, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(10, httpUrl0.pathSize());
      assertEquals("6l7/>=[i.", httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:/mnt/gaiagpfs/uses/homedirs/apa|cella/evjsuiteperf!rmance/8ataset/gordon_cripts_adaptce/projecYs/7_ok]tp/vijK6pf.r?7v6#6l7/>=[i.");
      assertEquals("", httpUrl0.username());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.querySize());
      assertEquals("6l7/>=[i.", httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(10, httpUrl0.pathSize());
      assertEquals("mnt", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals("http://mnt/gaiagpfs/uses/homedirs/apa%7Ccella/evjsuiteperf!rmance/8ataset/gordon_cripts_adaptce/projecYs/7_ok]tp/vijK6pf.r?7v6#6l7/>=[i.", httpUrl0.toString());
      assertEquals("6l7/>=[i.", httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertNotNull(httpUrl0);
      
      List<String> list0 = httpUrl0.queryParameterValues("projecYs");
      assertEquals("", httpUrl0.username());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.querySize());
      assertEquals("6l7/>=[i.", httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(10, httpUrl0.pathSize());
      assertEquals("mnt", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals("http://mnt/gaiagpfs/uses/homedirs/apa%7Ccella/evjsuiteperf!rmance/8ataset/gordon_cripts_adaptce/projecYs/7_ok]tp/vijK6pf.r?7v6#6l7/>=[i.", httpUrl0.toString());
      assertEquals("6l7/>=[i.", httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      int int0 = httpUrl0.port();
      assertEquals("", httpUrl0.username());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.querySize());
      assertEquals("6l7/>=[i.", httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(10, httpUrl0.pathSize());
      assertEquals("mnt", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals("http://mnt/gaiagpfs/uses/homedirs/apa%7Ccella/evjsuiteperf!rmance/8ataset/gordon_cripts_adaptce/projecYs/7_ok]tp/vijK6pf.r?7v6#6l7/>=[i.", httpUrl0.toString());
      assertEquals("6l7/>=[i.", httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, int0);
      
      String string0 = httpUrl0.fragment();
      assertEquals("", httpUrl0.username());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.querySize());
      assertEquals("6l7/>=[i.", httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(10, httpUrl0.pathSize());
      assertEquals("mnt", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals("http://mnt/gaiagpfs/uses/homedirs/apa%7Ccella/evjsuiteperf!rmance/8ataset/gordon_cripts_adaptce/projecYs/7_ok]tp/vijK6pf.r?7v6#6l7/>=[i.", httpUrl0.toString());
      assertEquals("6l7/>=[i.", httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals("6l7/>=[i.", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.encodedFragment());
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.scheme();
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("AO/8=`vMPA,");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      httpUrl_Builder0.encodedPassword = null;
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.addEncodedPathSegments("..");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder2);
      
      try { 
        HttpUrl.getChecked("..");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for ..
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("\u2026");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder1.scheme((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.username());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.queryParameter("RlPT8MB%,v(]y");
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.username());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterName(122);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.password();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals("", string0);
      assertNotNull(string0);
      
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("");
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.reencodeForUri();
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      String string1 = "sink == null";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedFragment("sink == null");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.setEncodedQueryParameter(" > ", "\"[(tMXm={Q<");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder3);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder3.host("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("/\n");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      String string0 = "kOqfkkmVO7n?pV@W\"";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegments("kOqfkkmVO7n?pV@W\"");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.port(726);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder3);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.query("Ve");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder4);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder4.host("kOqfkkmVO7n?pV@W\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: kOqfkkmVO7n?pV@W\"
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = "httsMN";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedUsername("httsMN");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "%25252e", uRLStreamHandler0);
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL1.toString());
      assertNull(uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getRef());
      assertEquals("http", uRL1.getProtocol());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNotNull(uRL1);
      
      URL uRL2 = MockURL.URL(uRL1, "K[");
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(uRL2.equals((Object)uRL1));
      assertFalse(uRL2.equals((Object)uRL0));
      assertNotSame(uRL0, uRL2);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(uRL1, uRL2);
      assertNotSame(uRL2, uRL1);
      assertNotSame(uRL2, uRL0);
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL1.toString());
      assertNull(uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getRef());
      assertEquals("http", uRL1.getProtocol());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/K[", uRL2.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/K[", uRL2.toExternalForm());
      assertNull(uRL2.getUserInfo());
      assertEquals((-1), uRL2.getPort());
      assertNull(uRL2.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL2.getAuthority());
      assertNull(uRL2.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL2.getHost());
      assertEquals((-1), uRL2.getDefaultPort());
      assertEquals("http", uRL2.getProtocol());
      assertNotNull(uRL2);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL2);
      assertFalse(uRL0.equals((Object)uRL2));
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(uRL1.equals((Object)uRL2));
      assertFalse(uRL2.equals((Object)uRL1));
      assertFalse(uRL2.equals((Object)uRL0));
      assertNotSame(uRL0, uRL2);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(uRL1, uRL2);
      assertNotSame(uRL2, uRL1);
      assertNotSame(uRL2, uRL0);
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL1.toString());
      assertNull(uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getRef());
      assertEquals("http", uRL1.getProtocol());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/K[", uRL2.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/K[", uRL2.toExternalForm());
      assertNull(uRL2.getUserInfo());
      assertEquals((-1), uRL2.getPort());
      assertNull(uRL2.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL2.getAuthority());
      assertNull(uRL2.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL2.getHost());
      assertEquals((-1), uRL2.getDefaultPort());
      assertEquals("http", uRL2.getProtocol());
      assertEquals("http://www.somefakebutwellformedurl.org/K[", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertNotNull(httpUrl0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("");
      assertFalse(uRL0.equals((Object)uRL2));
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(uRL1.equals((Object)uRL2));
      assertFalse(uRL2.equals((Object)uRL1));
      assertFalse(uRL2.equals((Object)uRL0));
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      assertNotSame(uRL0, uRL2);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(uRL1, uRL2);
      assertNotSame(uRL2, uRL1);
      assertNotSame(uRL2, uRL0);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL1.toString());
      assertNull(uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getRef());
      assertEquals("http", uRL1.getProtocol());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/K[", uRL2.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/K[", uRL2.toExternalForm());
      assertNull(uRL2.getUserInfo());
      assertEquals((-1), uRL2.getPort());
      assertNull(uRL2.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL2.getAuthority());
      assertNull(uRL2.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL2.getHost());
      assertEquals((-1), uRL2.getDefaultPort());
      assertEquals("http", uRL2.getProtocol());
      assertEquals("http://www.somefakebutwellformedurl.org/K[", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(80, httpUrl1.port());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.password());
      assertEquals("", httpUrl1.username());
      assertEquals("http", httpUrl1.scheme());
      assertNull(httpUrl1.fragment());
      assertEquals("http://www.somefakebutwellformedurl.org/K[", httpUrl1.toString());
      assertNull(httpUrl1.encodedFragment());
      assertNotNull(httpUrl1);
      
      String string0 = httpUrl1.encodedPath();
      assertFalse(uRL0.equals((Object)uRL2));
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(uRL1.equals((Object)uRL2));
      assertFalse(uRL2.equals((Object)uRL1));
      assertFalse(uRL2.equals((Object)uRL0));
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      assertNotSame(uRL0, uRL2);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(uRL1, uRL2);
      assertNotSame(uRL2, uRL1);
      assertNotSame(uRL2, uRL0);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL1.toString());
      assertNull(uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getRef());
      assertEquals("http", uRL1.getProtocol());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/K[", uRL2.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/K[", uRL2.toExternalForm());
      assertNull(uRL2.getUserInfo());
      assertEquals((-1), uRL2.getPort());
      assertNull(uRL2.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL2.getAuthority());
      assertNull(uRL2.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL2.getHost());
      assertEquals((-1), uRL2.getDefaultPort());
      assertEquals("http", uRL2.getProtocol());
      assertEquals("http://www.somefakebutwellformedurl.org/K[", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(80, httpUrl1.port());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.password());
      assertEquals("", httpUrl1.username());
      assertEquals("http", httpUrl1.scheme());
      assertNull(httpUrl1.fragment());
      assertEquals("http://www.somefakebutwellformedurl.org/K[", httpUrl1.toString());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("/K[", string0);
      assertNotNull(string0);
      
      String string1 = httpUrl0.username();
      assertFalse(uRL0.equals((Object)uRL2));
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(uRL1.equals((Object)uRL2));
      assertFalse(uRL2.equals((Object)uRL1));
      assertFalse(uRL2.equals((Object)uRL0));
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(uRL0, uRL2);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(uRL1, uRL2);
      assertNotSame(uRL2, uRL1);
      assertNotSame(uRL2, uRL0);
      assertNotSame(httpUrl0, httpUrl1);
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL1.toString());
      assertNull(uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getRef());
      assertEquals("http", uRL1.getProtocol());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/K[", uRL2.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/K[", uRL2.toExternalForm());
      assertNull(uRL2.getUserInfo());
      assertEquals((-1), uRL2.getPort());
      assertNull(uRL2.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL2.getAuthority());
      assertNull(uRL2.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL2.getHost());
      assertEquals((-1), uRL2.getDefaultPort());
      assertEquals("http", uRL2.getProtocol());
      assertEquals("http://www.somefakebutwellformedurl.org/K[", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertNotNull(httpUrl0);
      
      httpUrl0.hashCode();
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      
      try { 
        HttpUrl.getChecked("");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for 
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:v:r.sp|bz:+ff'");
      assertNull(httpUrl0);
      
      try { 
        HttpUrl.getChecked("http:v:r.sp|bz:+ff'");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: INVALID_PORT for http:v:r.sp|bz:+ff'
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertNotNull(httpUrl0);
      
      URL uRL1 = httpUrl0.url();
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("www.somefakebutwellformedurl.org", uRL1.getHost());
      assertEquals("www.somefakebutwellformedurl.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", uRL1.toExternalForm());
      assertNull(uRL1.getRef());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", uRL1.toString());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http", uRL1.getProtocol());
      assertNotNull(uRL1);
      
      String string0 = HttpUrl.percentDecode("..", true);
      assertEquals("..", string0);
      assertNotNull(string0);
      
      URI uRI0 = httpUrl0.uri();
      assertFalse(uRL0.equals((Object)uRL1));
      assertNotSame(uRL0, uRL1);
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("www.somefakebutwellformedurl.org", uRI0.getRawAuthority());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawFragment());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", uRI0.toString());
      assertNull(uRI0.getRawQuery());
      assertEquals("www.somefakebutwellformedurl.org", uRI0.getHost());
      assertNotNull(uRI0);
      
      URI uRI1 = MockURI.URI("!R/A");
      assertFalse(uRI1.equals((Object)uRI0));
      assertNotSame(uRI1, uRI0);
      assertNull(uRI1.getHost());
      assertFalse(uRI1.isAbsolute());
      assertNull(uRI1.getRawQuery());
      assertEquals((-1), uRI1.getPort());
      assertNull(uRI1.getRawAuthority());
      assertEquals("!R/A", uRI1.toString());
      assertFalse(uRI1.isOpaque());
      assertNull(uRI1.getRawUserInfo());
      assertNull(uRI1.getRawFragment());
      assertNull(uRI1.getScheme());
      assertEquals("!R/A", uRI1.getRawPath());
      assertNotNull(uRI1);
      
      HttpUrl httpUrl1 = HttpUrl.get(uRI1);
      assertFalse(uRI1.equals((Object)uRI0));
      assertNotSame(uRI1, uRI0);
      assertNull(uRI1.getHost());
      assertFalse(uRI1.isAbsolute());
      assertNull(uRI1.getRawQuery());
      assertEquals((-1), uRI1.getPort());
      assertNull(uRI1.getRawAuthority());
      assertEquals("!R/A", uRI1.toString());
      assertFalse(uRI1.isOpaque());
      assertNull(uRI1.getRawUserInfo());
      assertNull(uRI1.getRawFragment());
      assertNull(uRI1.getScheme());
      assertEquals("!R/A", uRI1.getRawPath());
      assertNull(httpUrl1);
      
      boolean boolean0 = httpUrl0.equals((Object) null);
      assertFalse(uRL0.equals((Object)uRL1));
      assertNotSame(uRL0, uRL1);
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(boolean0);
      
      boolean boolean1 = httpUrl0.isHttps();
      assertFalse(uRL0.equals((Object)uRL1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(uRL0, uRL1);
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertNotNull(httpUrl0);
      
      int int0 = httpUrl0.port();
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, int0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("Mw\"$1B8)yV");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegments("Mw\"$1B8)yV");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addPathSegment("/Nl:4=Qy8^}O");
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertNotNull(httpUrl_Builder3);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addEncodedPathSegment("/Nl:4=Qy8^}O");
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertNotNull(httpUrl_Builder4);
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.addEncodedQueryParameter("Mw\"$1B8)yV", "l90");
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder5);
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder5.removeAllQueryParameters("encodedPassword == null");
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder6);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertNotNull(httpUrl_Builder6);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.queryParameter("%2e");
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertNull(string0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      URL uRL1 = httpUrl0.url();
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("www.somefakebutwellformedurl.org", uRL1.getHost());
      assertEquals("www.somefakebutwellformedurl.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", uRL1.toExternalForm());
      assertNull(uRL1.getRef());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", uRL1.toString());
      assertNull(uRL1.getQuery());
      assertNotNull(uRL1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      int int0 = httpUrl0.pathSize();
      assertFalse(uRL0.equals((Object)uRL1));
      assertNotSame(uRL0, uRL1);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(1, int0);
      
      String string1 = httpUrl0.redact();
      assertFalse(uRL0.equals((Object)uRL1));
      assertNotSame(uRL0, uRL1);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http://www.somefakebutwellformedurl.org/...", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      URL uRL0 = MockURL.URL("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.");
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getAuthority());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.", uRL0.toExternalForm());
      assertEquals("7v6", uRL0.getQuery());
      assertEquals("6l7/>=[i.", uRL0.getRef());
      assertEquals("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.", uRL0.toString());
      assertNotNull(uRL0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.password("eA:<U1");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getAuthority());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.", uRL0.toExternalForm());
      assertEquals("7v6", uRL0.getQuery());
      assertEquals("6l7/>=[i.", uRL0.getRef());
      assertEquals("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.", uRL0.toString());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals("mnt", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.querySize());
      assertEquals("6l7/>=[i.", httpUrl0.fragment());
      assertEquals("6l7/>=[i.", httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(10, httpUrl0.pathSize());
      assertNotNull(httpUrl0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("eA:<U1");
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getAuthority());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.", uRL0.toExternalForm());
      assertEquals("7v6", uRL0.getQuery());
      assertEquals("6l7/>=[i.", uRL0.getRef());
      assertEquals("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.", uRL0.toString());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals("mnt", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.querySize());
      assertEquals("6l7/>=[i.", httpUrl0.fragment());
      assertEquals("6l7/>=[i.", httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(10, httpUrl0.pathSize());
      assertNull(httpUrl1);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = "http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.";
      HttpUrl httpUrl0 = HttpUrl.parse("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.");
      assertEquals("mnt", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.querySize());
      assertEquals(10, httpUrl0.pathSize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("6l7/>=[i.", httpUrl0.fragment());
      assertEquals("6l7/>=[i.", httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertNotNull(httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("fC$%3C=cx[6za%7B63%22Qxe");
      assertEquals("mnt", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.querySize());
      assertEquals(10, httpUrl0.pathSize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("6l7/>=[i.", httpUrl0.fragment());
      assertEquals("6l7/>=[i.", httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertNotNull(httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterName(127);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 254, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      URL uRL0 = MockURL.URL("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.");
      assertEquals("", uRL0.getHost());
      assertEquals("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.", uRL0.toString());
      assertEquals("7v6", uRL0.getQuery());
      assertEquals("6l7/>=[i.", uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.", uRL0.toExternalForm());
      assertNull(uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.password("eA:<U1");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host("eA::U1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: eA::U1
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.");
      assertEquals("http", httpUrl0.scheme());
      assertEquals("mnt", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals("6l7/>=[i.", httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.", httpUrl0.toString());
      assertEquals(1, httpUrl0.querySize());
      assertEquals(10, httpUrl0.pathSize());
      assertEquals("6l7/>=[i.", httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.query();
      assertEquals("http", httpUrl0.scheme());
      assertEquals("mnt", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals("6l7/>=[i.", httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.", httpUrl0.toString());
      assertEquals(1, httpUrl0.querySize());
      assertEquals(10, httpUrl0.pathSize());
      assertEquals("6l7/>=[i.", httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("7v6", string0);
      assertNotNull(string0);
      
      String string1 = httpUrl0.queryParameter("PkayXA74G\"4IYvGn?");
      assertEquals("http", httpUrl0.scheme());
      assertEquals("mnt", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals("6l7/>=[i.", httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.", httpUrl0.toString());
      assertEquals(1, httpUrl0.querySize());
      assertEquals(10, httpUrl0.pathSize());
      assertEquals("6l7/>=[i.", httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(string1);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      MockFile mockFile0 = new MockFile("@?");
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals("@?", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("@?", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "::::U1");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals("@?", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("@?", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile1.canRead());
      assertFalse(mockFile1.canWrite());
      assertFalse(mockFile1.canExecute());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.exists());
      assertEquals("::::U1", mockFile1.getName());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/7_okhttp/@?/::::U1", mockFile1.toString());
      assertEquals(0L, mockFile1.length());
      assertTrue(mockFile1.isAbsolute());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/7_okhttp/@?", mockFile1.getParent());
      assertNotNull(mockFile1);
      
      boolean boolean0 = mockFile0.createNewFile();
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertNotSame(mockFile0, mockFile1);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals("@?", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("@?", mockFile0.toString());
      assertTrue(boolean0);
      
      boolean boolean1 = mockFile1.setWritable(true, true);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals("@?", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("@?", mockFile0.toString());
      assertFalse(mockFile1.canRead());
      assertFalse(mockFile1.canWrite());
      assertFalse(mockFile1.canExecute());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.exists());
      assertEquals("::::U1", mockFile1.getName());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/7_okhttp/@?/::::U1", mockFile1.toString());
      assertEquals(0L, mockFile1.length());
      assertTrue(mockFile1.isAbsolute());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/7_okhttp/@?", mockFile1.getParent());
      assertFalse(boolean1);
      
      URL uRL0 = mockFile1.toURL();
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals("@?", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("@?", mockFile0.toString());
      assertFalse(mockFile1.canRead());
      assertFalse(mockFile1.canWrite());
      assertFalse(mockFile1.canExecute());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.exists());
      assertEquals("::::U1", mockFile1.getName());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/7_okhttp/@?/::::U1", mockFile1.toString());
      assertEquals(0L, mockFile1.length());
      assertTrue(mockFile1.isAbsolute());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/7_okhttp/@?", mockFile1.getParent());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl1 = HttpUrl.get(uRL0);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals("@?", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("@?", mockFile0.toString());
      assertFalse(mockFile1.canRead());
      assertFalse(mockFile1.canWrite());
      assertFalse(mockFile1.canExecute());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.exists());
      assertEquals("::::U1", mockFile1.getName());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/7_okhttp/@?/::::U1", mockFile1.toString());
      assertEquals(0L, mockFile1.length());
      assertTrue(mockFile1.isAbsolute());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/7_okhttp/@?", mockFile1.getParent());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(httpUrl1);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:/mnt/gaiagpfs/uses/homedirs/apa|cella/evjsuiteperf!rmance/8ataset/gordon_cripts_adaptce/projecYs/7_ok]tp/vijK6pf.r?7v6#6l7/>=[i.");
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertFalse(httpUrl0.isHttps());
      assertEquals("6l7/>=[i.", httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals(80, httpUrl0.port());
      assertEquals("6l7/>=[i.", httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("mnt", httpUrl0.host());
      assertEquals(10, httpUrl0.pathSize());
      assertEquals("http://mnt/gaiagpfs/uses/homedirs/apa%7Ccella/evjsuiteperf!rmance/8ataset/gordon_cripts_adaptce/projecYs/7_ok]tp/vijK6pf.r?7v6#6l7/>=[i.", httpUrl0.toString());
      assertEquals(1, httpUrl0.querySize());
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.queryParameter("http:/mnt/gaiagpfs/uses/homedirs/apa|cella/evjsuiteperf!rmance/8ataset/gordon_cripts_adaptce/projecYs/7_ok]tp/vijK6pf.r?7v6#6l7/>=[i.");
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertFalse(httpUrl0.isHttps());
      assertEquals("6l7/>=[i.", httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals(80, httpUrl0.port());
      assertEquals("6l7/>=[i.", httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("mnt", httpUrl0.host());
      assertEquals(10, httpUrl0.pathSize());
      assertEquals("http://mnt/gaiagpfs/uses/homedirs/apa%7Ccella/evjsuiteperf!rmance/8ataset/gordon_cripts_adaptce/projecYs/7_ok]tp/vijK6pf.r?7v6#6l7/>=[i.", httpUrl0.toString());
      assertEquals(1, httpUrl0.querySize());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = "http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.";
      HttpUrl httpUrl0 = HttpUrl.parse("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.");
      assertEquals(10, httpUrl0.pathSize());
      assertEquals("6l7/>=[i.", httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("6l7/>=[i.", httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.", httpUrl0.toString());
      assertEquals(1, httpUrl0.querySize());
      assertEquals("", httpUrl0.password());
      assertEquals("mnt", httpUrl0.host());
      assertNotNull(httpUrl0);
      
      URI uRI0 = httpUrl0.uri();
      assertEquals(10, httpUrl0.pathSize());
      assertEquals("6l7/>=[i.", httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("6l7/>=[i.", httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.", httpUrl0.toString());
      assertEquals(1, httpUrl0.querySize());
      assertEquals("", httpUrl0.password());
      assertEquals("mnt", httpUrl0.host());
      assertEquals("7v6", uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/%3E=[i.", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r", uRI0.getRawPath());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("mnt", uRI0.getRawAuthority());
      assertEquals("6l7/%3E=[i.", uRI0.getRawFragment());
      assertEquals("mnt", uRI0.getHost());
      assertEquals("http", uRI0.getScheme());
      assertNotNull(uRI0);
      
      HttpUrl httpUrl1 = HttpUrl.get(uRI0);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertEquals(10, httpUrl0.pathSize());
      assertEquals("6l7/>=[i.", httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("6l7/>=[i.", httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.", httpUrl0.toString());
      assertEquals(1, httpUrl0.querySize());
      assertEquals("", httpUrl0.password());
      assertEquals("mnt", httpUrl0.host());
      assertEquals("7v6", uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/%3E=[i.", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r", uRI0.getRawPath());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("mnt", uRI0.getRawAuthority());
      assertEquals("6l7/%3E=[i.", uRI0.getRawFragment());
      assertEquals("mnt", uRI0.getHost());
      assertEquals("http", uRI0.getScheme());
      assertEquals(80, httpUrl1.port());
      assertEquals(1, httpUrl1.querySize());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/%3E=[i.", httpUrl1.toString());
      assertEquals("mnt", httpUrl1.host());
      assertEquals("6l7/%3E=[i.", httpUrl1.encodedFragment());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertEquals(10, httpUrl1.pathSize());
      assertEquals("", httpUrl1.password());
      assertEquals("6l7/>=[i.", httpUrl1.fragment());
      assertNotNull(httpUrl1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = httpUrl1.equals(object0);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertEquals(10, httpUrl0.pathSize());
      assertEquals("6l7/>=[i.", httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("6l7/>=[i.", httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.", httpUrl0.toString());
      assertEquals(1, httpUrl0.querySize());
      assertEquals("", httpUrl0.password());
      assertEquals("mnt", httpUrl0.host());
      assertEquals("7v6", uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/%3E=[i.", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r", uRI0.getRawPath());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("mnt", uRI0.getRawAuthority());
      assertEquals("6l7/%3E=[i.", uRI0.getRawFragment());
      assertEquals("mnt", uRI0.getHost());
      assertEquals("http", uRI0.getScheme());
      assertEquals(80, httpUrl1.port());
      assertEquals(1, httpUrl1.querySize());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/%3E=[i.", httpUrl1.toString());
      assertEquals("mnt", httpUrl1.host());
      assertEquals("6l7/%3E=[i.", httpUrl1.encodedFragment());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertEquals(10, httpUrl1.pathSize());
      assertEquals("", httpUrl1.password());
      assertEquals("6l7/>=[i.", httpUrl1.fragment());
      assertFalse(boolean0);
      
      boolean boolean1 = httpUrl1.isHttps();
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertEquals(10, httpUrl0.pathSize());
      assertEquals("6l7/>=[i.", httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("6l7/>=[i.", httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.", httpUrl0.toString());
      assertEquals(1, httpUrl0.querySize());
      assertEquals("", httpUrl0.password());
      assertEquals("mnt", httpUrl0.host());
      assertEquals("7v6", uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/%3E=[i.", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r", uRI0.getRawPath());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("mnt", uRI0.getRawAuthority());
      assertEquals("6l7/%3E=[i.", uRI0.getRawFragment());
      assertEquals("mnt", uRI0.getHost());
      assertEquals("http", uRI0.getScheme());
      assertEquals(80, httpUrl1.port());
      assertEquals(1, httpUrl1.querySize());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/%3E=[i.", httpUrl1.toString());
      assertEquals("mnt", httpUrl1.host());
      assertEquals("6l7/%3E=[i.", httpUrl1.encodedFragment());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertEquals(10, httpUrl1.pathSize());
      assertEquals("", httpUrl1.password());
      assertEquals("6l7/>=[i.", httpUrl1.fragment());
      assertFalse(boolean1);
      
      String string1 = httpUrl0.fragment();
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(httpUrl0, httpUrl1);
      assertEquals(10, httpUrl0.pathSize());
      assertEquals("6l7/>=[i.", httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("6l7/>=[i.", httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.", httpUrl0.toString());
      assertEquals(1, httpUrl0.querySize());
      assertEquals("", httpUrl0.password());
      assertEquals("mnt", httpUrl0.host());
      assertEquals("6l7/>=[i.", string1);
      assertNotNull(string1);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedPassword("6l7/>=[i.");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedUsername("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/vijd6pf.r?7v6#6l7/>=[i.");
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder3);
      
      int int0 = 101;
      // Undeclared exception!
      try { 
        httpUrl_Builder3.setPathSegment(101, "%f/=}%8QNfY]OQW");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 101, Size: 13
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.reencodeForUri();
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      String string0 = ":";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllEncodedQueryParameters(":");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder2);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder2.host(":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("%2e.", "%2e.");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegment("%2e.");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder2);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder2.host("/wVoA?>dIi`/Q^lB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: /wVoA?>dIi`/Q^lB
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertNotNull(httpUrl0);
      
      int int0 = httpUrl0.querySize();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "::";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedUsername("::");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedPathSegments(".%2e");
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder3);
      
      int int0 = 3839;
      // Undeclared exception!
      try { 
        httpUrl_Builder3.setEncodedPathSegment(3839, ".%2e");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3839, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("E.a:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: E.a:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.password());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertNotNull(httpUrl0);
      
      boolean boolean0 = httpUrl0.equals(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.password());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertFalse(boolean0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "SUCCESS";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("SUCCESS", "SUCCESS");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.fragment("SUCCESS");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder2);
      
      String string1 = "8.hT w:,]>[:ZB]Ea";
      // Undeclared exception!
      try { 
        httpUrl_Builder2.host("8.hT w:,]>[:ZB]Ea");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 8.hT w:,]>[:ZB]Ea
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("8.T ^:Z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 8.T ^:Z
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = "http:F;rh|\\z+ffd";
      HttpUrl httpUrl0 = HttpUrl.parse("http:F;rh|z+ffd");
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http://f;rh|z+ffd/", httpUrl0.toString());
      assertEquals(0, httpUrl0.querySize());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals("f;rh|z+ffd", httpUrl0.host());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertNotNull(httpUrl0);
      
      int int0 = httpUrl0.port();
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http://f;rh|z+ffd/", httpUrl0.toString());
      assertEquals(0, httpUrl0.querySize());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals("f;rh|z+ffd", httpUrl0.host());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals(80, int0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.removePathSegment(17);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 17, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "B:";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("B:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: B:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertNotNull(httpUrl0);
      
      List<String> list0 = httpUrl0.encodedPathSegments();
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "okhttp3.HttpUrl$Builder$ParseResult";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllEncodedQueryParameters("okhttp3.HttpUrl$Builder$ParseResult");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      String string1 = ".";
      // Undeclared exception!
      try { 
        httpUrl_Builder1.setPathSegment(8075, ".");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected path segment: .
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }
}
