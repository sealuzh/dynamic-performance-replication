/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 07:15:35 GMT 2018
 */

package org.la4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.Spliterator;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.iterator.ColumnMajorMatrixIterator;
import org.la4j.iterator.MatrixIterator;
import org.la4j.iterator.VectorIterator;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic1DMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.AdvancedMatrixPredicate;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixMatrixOperation;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.MatrixVectorOperation;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.operation.ooplace.OoPlaceVectorsSubtraction;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.dense.BasicVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Matrix_ESTest extends Matrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 0;
      ColumnMajorSparseMatrix.zero(0, 0);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.removeFirstColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MatrixMatrixOperation<SparseMatrix> matrixMatrixOperation0 = (MatrixMatrixOperation<SparseMatrix>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.removeFirstRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(10);
      assertEquals(10, denseMatrix0.columns());
      
      Matrix matrix0 = denseMatrix0.removeFirstRow();
      assertEquals(9, matrix0.rows());
      
      double double0 = new Integer(10);
      denseMatrix0.toRowVector();
      assertEquals(10, denseMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      Matrix matrix0 = denseVector0.toRowMatrix();
      Matrix matrix1 = matrix0.multiplyByItsTranspose();
      assertEquals(1, matrix1.columns());
      
      matrix0.toRowVector();
      assertEquals(0, matrix0.columns());
      assertEquals(1, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(3, 3, mockRandom0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = denseMatrix0.toRowMajorSparseMatrix();
      assertEquals(0.8888888888888888, rowMajorSparseMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Matrix matrix0 = Matrix.fromCSV("");
      Matrix matrix1 = matrix0.multiplyByItsTranspose();
      matrix1.toSparseMatrix();
      // Undeclared exception!
      try { 
        matrix1.blankOfRows((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("");
      rowMajorSparseMatrix0.infinityNorm();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      int int0 = (-600);
      rowMajorSparseMatrix0.toSparseMatrix();
      rowMajorSparseMatrix0.copy();
      rowMajorSparseMatrix0.transform(matrixFunction0);
      Matrix.fromCSV("");
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.zero((-600), (-600));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -600x-600
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom(0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      columnMajorSparseMatrix0.add((double) 0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.toColumnVector();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 37;
      MockRandom mockRandom0 = new MockRandom(37);
      mockRandom0.nextLong();
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(37, mockRandom0);
      // Undeclared exception!
      try { 
        Matrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 0);
      ColumnMajorSparseMatrix.fromCSV("");
      DenseMatrix denseMatrix0 = DenseMatrix.zero(5466, 0);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      ooPlaceMatricesSubtraction0.applySimple((SparseMatrix) columnMajorSparseMatrix0, denseMatrix0);
      denseMatrix0.subtract((Matrix) columnMajorSparseMatrix0);
      MatrixFactory<RowMajorSparseMatrix> matrixFactory0 = null;
      int int0 = 4;
      double double0 = 3023.90567352833;
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.random(int0, int0, double0, (Random) mockRandom0);
      cRSMatrix0.to(matrixFactory0);
      denseMatrix0.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      denseVector0.blank();
      Matrix matrix0 = denseVector0.toRowMatrix();
      MatrixOperation<DenseMatrix> matrixOperation0 = (MatrixOperation<DenseMatrix>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn(matrix0).when(matrixOperation0).apply(any(org.la4j.matrix.DenseMatrix.class));
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.GAUSS_JORDAN;
      matrix0.withInverter(linearAlgebra_InverterFactory0);
      matrix0.apply(matrixOperation0);
      String string0 = matrix0.toCSV();
      assertEquals("\n", string0);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromCSV("\n");
      boolean boolean0 = columnMajorSparseMatrix0.equals((Object) matrix0);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("");
      rowMajorSparseMatrix0.toCSV();
      rowMajorSparseMatrix0.product();
      rowMajorSparseMatrix0.sliceBottomRight(0, 0);
      // Undeclared exception!
      try { 
        SparseMatrix.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix1 = ColumnMajorSparseMatrix.fromCSV("");
      boolean boolean0 = columnMajorSparseMatrix0.equals((Object) columnMajorSparseMatrix1);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertTrue(boolean0);
      
      columnMajorSparseMatrix1.toDenseMatrix();
      assertTrue(columnMajorSparseMatrix1.equals((Object)columnMajorSparseMatrix0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(1178);
      assertEquals(8.488964346349745E-4, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(1178, rowMajorSparseMatrix0.cardinality());
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(1178, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(1178, rowMajorSparseMatrix0.columns());
      assertNotNull(rowMajorSparseMatrix0);
      
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.set(3, (-2535), (-870.4942622368));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-2535' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 0);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertNotNull(columnMajorSparseMatrix0);
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix1 = ColumnMajorSparseMatrix.fromCSV("");
      assertNotSame(columnMajorSparseMatrix1, columnMajorSparseMatrix0);
      assertEquals(0, columnMajorSparseMatrix1.columns());
      assertEquals(0.0, columnMajorSparseMatrix1.max(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix1.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix1.cardinality());
      assertEquals(0, columnMajorSparseMatrix1.rows());
      assertFalse(columnMajorSparseMatrix1.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix1.min(), 0.01);
      assertTrue(columnMajorSparseMatrix1.equals((Object)columnMajorSparseMatrix0));
      assertNotNull(columnMajorSparseMatrix1);
      
      DenseMatrix denseMatrix0 = DenseMatrix.zero(0, 0);
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.set(0, 0, 2.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      assertNotNull(ooPlaceOuterProduct0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertNotNull(denseVector0);
      
      SparseVector sparseVector0 = SparseVector.zero(0);
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0, sparseVector0.length());
      assertEquals(Double.NaN, sparseVector0.density(), 0.01);
      assertNotNull(sparseVector0);
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)ooPlaceOuterProduct0.apply(denseVector0, sparseVector0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0, sparseVector0.length());
      assertEquals(Double.NaN, sparseVector0.density(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.cardinality());
      assertNotNull(cCSMatrix0);
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.copy();
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0, sparseVector0.length());
      assertEquals(Double.NaN, sparseVector0.density(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(0, cCSMatrix1.rows());
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertEquals(0, cCSMatrix1.columns());
      assertTrue(cCSMatrix1.equals((Object)cCSMatrix0));
      assertNotNull(cCSMatrix1);
      
      BasicVector basicVector0 = (BasicVector)DenseVector.constant(0, 0);
      assertNotSame(basicVector0, denseVector0);
      assertEquals(0, basicVector0.length());
      assertTrue(basicVector0.equals((Object)denseVector0));
      assertNotNull(basicVector0);
      
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      BasicVector basicVector1 = (BasicVector)DenseVector.fromArray(doubleArray0);
      assertNotSame(basicVector1, basicVector0);
      assertNotSame(basicVector1, denseVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, basicVector1.length());
      assertFalse(basicVector1.equals((Object)basicVector0));
      assertFalse(basicVector1.equals((Object)denseVector0));
      assertNotNull(basicVector1);
      
      CompressedVector compressedVector0 = (CompressedVector)SparseVector.fromMap(hashMap0, 0);
      assertNotSame(compressedVector0, sparseVector0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertTrue(compressedVector0.equals((Object)sparseVector0));
      assertNotNull(compressedVector0);
      
      BasicVector basicVector2 = (BasicVector)compressedVector0.subtract(0.0);
      assertNotSame(compressedVector0, sparseVector0);
      assertNotSame(basicVector2, basicVector0);
      assertNotSame(basicVector2, denseVector0);
      assertNotSame(basicVector2, basicVector1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, basicVector2.length());
      assertTrue(compressedVector0.equals((Object)sparseVector0));
      assertTrue(basicVector2.equals((Object)denseVector0));
      assertTrue(basicVector2.equals((Object)basicVector0));
      assertFalse(basicVector2.equals((Object)basicVector1));
      assertNotNull(basicVector2);
      
      CCSMatrix cCSMatrix2 = (CCSMatrix)ooPlaceOuterProduct0.apply((DenseVector) basicVector0, (SparseVector) compressedVector0);
      assertNotSame(basicVector0, basicVector2);
      assertNotSame(basicVector0, basicVector1);
      assertNotSame(basicVector0, denseVector0);
      assertNotSame(compressedVector0, sparseVector0);
      assertNotSame(cCSMatrix2, cCSMatrix0);
      assertNotSame(cCSMatrix2, cCSMatrix1);
      assertEquals(0, basicVector0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertFalse(cCSMatrix2.isRowMajor());
      assertEquals(0.0, cCSMatrix2.max(), 0.01);
      assertEquals(0, cCSMatrix2.columns());
      assertEquals(0, cCSMatrix2.rows());
      assertEquals(0.0, cCSMatrix2.min(), 0.01);
      assertEquals(0, cCSMatrix2.cardinality());
      assertEquals(Double.NaN, cCSMatrix2.density(), 0.01);
      assertTrue(basicVector0.equals((Object)denseVector0));
      assertFalse(basicVector0.equals((Object)basicVector1));
      assertTrue(basicVector0.equals((Object)basicVector2));
      assertTrue(compressedVector0.equals((Object)sparseVector0));
      assertTrue(cCSMatrix2.equals((Object)cCSMatrix1));
      assertTrue(cCSMatrix2.equals((Object)cCSMatrix0));
      assertNotNull(cCSMatrix2);
      
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)cCSMatrix2.toDenseMatrix();
      assertNotSame(basicVector0, basicVector2);
      assertNotSame(basicVector0, basicVector1);
      assertNotSame(basicVector0, denseVector0);
      assertNotSame(compressedVector0, sparseVector0);
      assertNotSame(cCSMatrix2, cCSMatrix0);
      assertNotSame(cCSMatrix2, cCSMatrix1);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basicVector0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertFalse(cCSMatrix2.isRowMajor());
      assertEquals(0.0, cCSMatrix2.max(), 0.01);
      assertEquals(0, cCSMatrix2.columns());
      assertEquals(0, cCSMatrix2.rows());
      assertEquals(0.0, cCSMatrix2.min(), 0.01);
      assertEquals(0, cCSMatrix2.cardinality());
      assertEquals(Double.NaN, cCSMatrix2.density(), 0.01);
      assertTrue(basicVector0.equals((Object)denseVector0));
      assertFalse(basicVector0.equals((Object)basicVector1));
      assertTrue(basicVector0.equals((Object)basicVector2));
      assertTrue(compressedVector0.equals((Object)sparseVector0));
      assertTrue(cCSMatrix2.equals((Object)cCSMatrix1));
      assertTrue(cCSMatrix2.equals((Object)cCSMatrix0));
      assertNotNull(basic2DMatrix0);
      
      cCSMatrix2.hashCode();
      assertNotSame(basicVector0, basicVector2);
      assertNotSame(basicVector0, basicVector1);
      assertNotSame(basicVector0, denseVector0);
      assertNotSame(compressedVector0, sparseVector0);
      assertNotSame(cCSMatrix2, cCSMatrix0);
      assertNotSame(cCSMatrix2, cCSMatrix1);
      assertEquals(0, basicVector0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertFalse(cCSMatrix2.isRowMajor());
      assertEquals(0.0, cCSMatrix2.max(), 0.01);
      assertEquals(0, cCSMatrix2.columns());
      assertEquals(0, cCSMatrix2.rows());
      assertEquals(0.0, cCSMatrix2.min(), 0.01);
      assertEquals(0, cCSMatrix2.cardinality());
      assertEquals(Double.NaN, cCSMatrix2.density(), 0.01);
      assertTrue(basicVector0.equals((Object)denseVector0));
      assertFalse(basicVector0.equals((Object)basicVector1));
      assertTrue(basicVector0.equals((Object)basicVector2));
      assertTrue(compressedVector0.equals((Object)sparseVector0));
      assertTrue(cCSMatrix2.equals((Object)cCSMatrix1));
      assertTrue(cCSMatrix2.equals((Object)cCSMatrix0));
      
      VectorIterator vectorIterator0 = cCSMatrix0.iteratorOfColumn(0);
      assertNotSame(denseVector0, basicVector0);
      assertNotSame(denseVector0, basicVector2);
      assertNotSame(denseVector0, basicVector1);
      assertNotSame(sparseVector0, compressedVector0);
      assertNotSame(cCSMatrix0, cCSMatrix2);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0, sparseVector0.length());
      assertEquals(Double.NaN, sparseVector0.density(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.cardinality());
      assertTrue(denseVector0.equals((Object)basicVector0));
      assertFalse(denseVector0.equals((Object)basicVector1));
      assertTrue(denseVector0.equals((Object)basicVector2));
      assertTrue(sparseVector0.equals((Object)compressedVector0));
      assertTrue(cCSMatrix0.equals((Object)cCSMatrix1));
      assertTrue(cCSMatrix0.equals((Object)cCSMatrix2));
      assertNotNull(vectorIterator0);
      
      CCSMatrix cCSMatrix3 = (CCSMatrix)cCSMatrix0.sliceBottomRight(0, (-1114));
      assertNotSame(denseVector0, basicVector0);
      assertNotSame(denseVector0, basicVector2);
      assertNotSame(denseVector0, basicVector1);
      assertNotSame(cCSMatrix3, cCSMatrix2);
      assertNotSame(cCSMatrix3, cCSMatrix0);
      assertNotSame(cCSMatrix3, cCSMatrix1);
      assertNotSame(sparseVector0, compressedVector0);
      assertNotSame(cCSMatrix0, cCSMatrix3);
      assertNotSame(cCSMatrix0, cCSMatrix2);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertEquals(0.0, cCSMatrix3.max(), 0.01);
      assertEquals(0, cCSMatrix3.cardinality());
      assertEquals(Double.NaN, cCSMatrix3.density(), 0.01);
      assertEquals(0, cCSMatrix3.rows());
      assertEquals(1114, cCSMatrix3.columns());
      assertFalse(cCSMatrix3.isRowMajor());
      assertEquals(0.0, cCSMatrix3.min(), 0.01);
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0, sparseVector0.length());
      assertEquals(Double.NaN, sparseVector0.density(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.cardinality());
      assertTrue(denseVector0.equals((Object)basicVector0));
      assertFalse(denseVector0.equals((Object)basicVector1));
      assertTrue(denseVector0.equals((Object)basicVector2));
      assertFalse(cCSMatrix3.equals((Object)cCSMatrix2));
      assertFalse(cCSMatrix3.equals((Object)cCSMatrix0));
      assertFalse(cCSMatrix3.equals((Object)cCSMatrix1));
      assertTrue(sparseVector0.equals((Object)compressedVector0));
      assertTrue(cCSMatrix0.equals((Object)cCSMatrix1));
      assertTrue(cCSMatrix0.equals((Object)cCSMatrix2));
      assertNotNull(cCSMatrix3);
      
      double double0 = cCSMatrix0.max();
      assertNotSame(denseVector0, basicVector0);
      assertNotSame(denseVector0, basicVector2);
      assertNotSame(denseVector0, basicVector1);
      assertNotSame(sparseVector0, compressedVector0);
      assertNotSame(cCSMatrix0, cCSMatrix3);
      assertNotSame(cCSMatrix0, cCSMatrix2);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0, sparseVector0.length());
      assertEquals(Double.NaN, sparseVector0.density(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.cardinality());
      assertTrue(denseVector0.equals((Object)basicVector0));
      assertFalse(denseVector0.equals((Object)basicVector1));
      assertTrue(denseVector0.equals((Object)basicVector2));
      assertTrue(sparseVector0.equals((Object)compressedVector0));
      assertTrue(cCSMatrix0.equals((Object)cCSMatrix1));
      assertFalse(cCSMatrix0.equals((Object)cCSMatrix3));
      assertTrue(cCSMatrix0.equals((Object)cCSMatrix2));
      
      MatrixIterator matrixIterator0 = cCSMatrix3.iterator();
      assertNotSame(denseVector0, basicVector0);
      assertNotSame(denseVector0, basicVector2);
      assertNotSame(denseVector0, basicVector1);
      assertNotSame(cCSMatrix3, cCSMatrix2);
      assertNotSame(cCSMatrix3, cCSMatrix0);
      assertNotSame(cCSMatrix3, cCSMatrix1);
      assertNotSame(sparseVector0, compressedVector0);
      assertNotSame(cCSMatrix0, cCSMatrix3);
      assertNotSame(cCSMatrix0, cCSMatrix2);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertEquals(0.0, cCSMatrix3.max(), 0.01);
      assertEquals(0, cCSMatrix3.cardinality());
      assertEquals(Double.NaN, cCSMatrix3.density(), 0.01);
      assertEquals(0, cCSMatrix3.rows());
      assertEquals(1114, cCSMatrix3.columns());
      assertFalse(cCSMatrix3.isRowMajor());
      assertEquals(0.0, cCSMatrix3.min(), 0.01);
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0, sparseVector0.length());
      assertEquals(Double.NaN, sparseVector0.density(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.cardinality());
      assertTrue(denseVector0.equals((Object)basicVector0));
      assertFalse(denseVector0.equals((Object)basicVector1));
      assertTrue(denseVector0.equals((Object)basicVector2));
      assertFalse(cCSMatrix3.equals((Object)cCSMatrix2));
      assertFalse(cCSMatrix3.equals((Object)cCSMatrix0));
      assertFalse(cCSMatrix3.equals((Object)cCSMatrix1));
      assertTrue(sparseVector0.equals((Object)compressedVector0));
      assertTrue(cCSMatrix0.equals((Object)cCSMatrix1));
      assertFalse(cCSMatrix0.equals((Object)cCSMatrix3));
      assertTrue(cCSMatrix0.equals((Object)cCSMatrix2));
      assertNotNull(matrixIterator0);
      
      Basic2DMatrix basic2DMatrix1 = (Basic2DMatrix)basic2DMatrix0.toDenseMatrix();
      assertSame(basic2DMatrix0, basic2DMatrix1);
      assertSame(basic2DMatrix1, basic2DMatrix0);
      assertNotSame(basicVector0, basicVector2);
      assertNotSame(basicVector0, basicVector1);
      assertNotSame(basicVector0, denseVector0);
      assertNotSame(compressedVector0, sparseVector0);
      assertNotSame(cCSMatrix2, cCSMatrix0);
      assertNotSame(cCSMatrix2, cCSMatrix3);
      assertNotSame(cCSMatrix2, cCSMatrix1);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix1.rows());
      assertEquals(0, basic2DMatrix1.columns());
      assertEquals(0, basicVector0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertFalse(cCSMatrix2.isRowMajor());
      assertEquals(0.0, cCSMatrix2.max(), 0.01);
      assertEquals(0, cCSMatrix2.columns());
      assertEquals(0, cCSMatrix2.rows());
      assertEquals(0.0, cCSMatrix2.min(), 0.01);
      assertEquals(0, cCSMatrix2.cardinality());
      assertEquals(Double.NaN, cCSMatrix2.density(), 0.01);
      assertTrue(basicVector0.equals((Object)denseVector0));
      assertFalse(basicVector0.equals((Object)basicVector1));
      assertTrue(basicVector0.equals((Object)basicVector2));
      assertTrue(compressedVector0.equals((Object)sparseVector0));
      assertTrue(cCSMatrix2.equals((Object)cCSMatrix1));
      assertFalse(cCSMatrix2.equals((Object)cCSMatrix3));
      assertTrue(cCSMatrix2.equals((Object)cCSMatrix0));
      assertNotNull(basic2DMatrix1);
      
      byte[] byteArray0 = cCSMatrix2.toBinary();
      assertNotSame(basicVector0, basicVector2);
      assertNotSame(basicVector0, basicVector1);
      assertNotSame(basicVector0, denseVector0);
      assertNotSame(compressedVector0, sparseVector0);
      assertNotSame(cCSMatrix2, cCSMatrix0);
      assertNotSame(cCSMatrix2, cCSMatrix3);
      assertNotSame(cCSMatrix2, cCSMatrix1);
      assertEquals(0, basicVector0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertFalse(cCSMatrix2.isRowMajor());
      assertEquals(0.0, cCSMatrix2.max(), 0.01);
      assertEquals(0, cCSMatrix2.columns());
      assertEquals(0, cCSMatrix2.rows());
      assertEquals(0.0, cCSMatrix2.min(), 0.01);
      assertEquals(0, cCSMatrix2.cardinality());
      assertEquals(Double.NaN, cCSMatrix2.density(), 0.01);
      assertTrue(basicVector0.equals((Object)denseVector0));
      assertFalse(basicVector0.equals((Object)basicVector1));
      assertTrue(basicVector0.equals((Object)basicVector2));
      assertTrue(compressedVector0.equals((Object)sparseVector0));
      assertTrue(cCSMatrix2.equals((Object)cCSMatrix1));
      assertFalse(cCSMatrix2.equals((Object)cCSMatrix3));
      assertTrue(cCSMatrix2.equals((Object)cCSMatrix0));
      assertNotNull(byteArray0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix2.updateColumn(0, vectorFunction0);
      assertNotSame(basicVector0, basicVector2);
      assertNotSame(basicVector0, basicVector1);
      assertNotSame(basicVector0, denseVector0);
      assertNotSame(compressedVector0, sparseVector0);
      assertNotSame(cCSMatrix2, cCSMatrix0);
      assertNotSame(cCSMatrix2, cCSMatrix3);
      assertNotSame(cCSMatrix2, cCSMatrix1);
      assertEquals(0, basicVector0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertFalse(cCSMatrix2.isRowMajor());
      assertEquals(0.0, cCSMatrix2.max(), 0.01);
      assertEquals(0, cCSMatrix2.columns());
      assertEquals(0, cCSMatrix2.rows());
      assertEquals(0.0, cCSMatrix2.min(), 0.01);
      assertEquals(0, cCSMatrix2.cardinality());
      assertEquals(Double.NaN, cCSMatrix2.density(), 0.01);
      assertTrue(basicVector0.equals((Object)denseVector0));
      assertFalse(basicVector0.equals((Object)basicVector1));
      assertTrue(basicVector0.equals((Object)basicVector2));
      assertTrue(compressedVector0.equals((Object)sparseVector0));
      assertTrue(cCSMatrix2.equals((Object)cCSMatrix1));
      assertFalse(cCSMatrix2.equals((Object)cCSMatrix3));
      assertTrue(cCSMatrix2.equals((Object)cCSMatrix0));
      
      // Undeclared exception!
      try { 
        Matrix.zero((-1934660499), (-1114));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1934660499x-1114
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 0);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertNotNull(columnMajorSparseMatrix0);
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix1 = ColumnMajorSparseMatrix.fromCSV("");
      assertNotSame(columnMajorSparseMatrix1, columnMajorSparseMatrix0);
      assertEquals(0, columnMajorSparseMatrix1.rows());
      assertEquals(0.0, columnMajorSparseMatrix1.min(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix1.density(), 0.01);
      assertFalse(columnMajorSparseMatrix1.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix1.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix1.columns());
      assertEquals(0, columnMajorSparseMatrix1.cardinality());
      assertTrue(columnMajorSparseMatrix1.equals((Object)columnMajorSparseMatrix0));
      assertNotNull(columnMajorSparseMatrix1);
      
      boolean boolean0 = columnMajorSparseMatrix0.equals((Object) columnMajorSparseMatrix1);
      assertNotSame(columnMajorSparseMatrix0, columnMajorSparseMatrix1);
      assertNotSame(columnMajorSparseMatrix1, columnMajorSparseMatrix0);
      assertTrue(boolean0);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0, columnMajorSparseMatrix1.rows());
      assertEquals(0.0, columnMajorSparseMatrix1.min(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix1.density(), 0.01);
      assertFalse(columnMajorSparseMatrix1.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix1.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix1.columns());
      assertEquals(0, columnMajorSparseMatrix1.cardinality());
      assertTrue(columnMajorSparseMatrix0.equals((Object)columnMajorSparseMatrix1));
      assertTrue(columnMajorSparseMatrix1.equals((Object)columnMajorSparseMatrix0));
      
      columnMajorSparseMatrix0.hashCode();
      assertNotSame(columnMajorSparseMatrix0, columnMajorSparseMatrix1);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertTrue(columnMajorSparseMatrix0.equals((Object)columnMajorSparseMatrix1));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 0);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertNotNull(columnMajorSparseMatrix0);
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)columnMajorSparseMatrix0.sliceTopLeft(0, 0);
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertNotSame(cCSMatrix0, columnMajorSparseMatrix0);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.columns());
      assertTrue(cCSMatrix0.equals((Object)columnMajorSparseMatrix0));
      assertNotNull(cCSMatrix0);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      String string0 = "jV~Cw*$kUPp[4( N*&";
      int int1 = columnMajorSparseMatrix0.rank();
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertEquals(0, int1);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertTrue(columnMajorSparseMatrix0.equals((Object)cCSMatrix0));
      assertTrue(int1 == int0);
      
      // Undeclared exception!
      try { 
        SparseMatrix.fromMatrixMarket("jV~Cw*$kUPp[4( N*&");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 4;
      CRSMatrix cRSMatrix0 = (CRSMatrix)Matrix.identity(4);
      assertEquals(4, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(4, cRSMatrix0.columns());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(4, cRSMatrix0.rows());
      assertEquals(0.25, cRSMatrix0.density(), 0.01);
      assertNotNull(cRSMatrix0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.transformRow(4, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      assertNotNull(ooPlaceOuterProduct0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotNull(linkedList1);
      
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList1);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0, sparseVector0.length());
      assertEquals(Double.NaN, sparseVector0.density(), 0.01);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotNull(sparseVector0);
      
      Integer integer0 = new Integer((-185));
      assertEquals((-185), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = linkedList0.add(integer0);
      assertNotSame(linkedList0, linkedList1);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.equals((Object)linkedList1));
      
      DenseVector denseVector0 = DenseVector.fromCSV("");
      assertEquals(0, denseVector0.length());
      assertNotNull(denseVector0);
      
      String string0 = denseVector0.toString();
      assertEquals("", string0);
      assertEquals(0, denseVector0.length());
      assertNotNull(string0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)ooPlaceOuterProduct0.apply(sparseVector0, denseVector0);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0, sparseVector0.length());
      assertEquals(Double.NaN, sparseVector0.density(), 0.01);
      assertEquals(0, denseVector0.length());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertNotNull(cRSMatrix0);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.copyOfRows((-2484));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2484x0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 0);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertNotNull(columnMajorSparseMatrix0);
      
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      boolean boolean0 = columnMajorSparseMatrix0.is(advancedMatrixPredicate0);
      assertFalse(boolean0);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.maxInColumn((-1932735282));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1932735282
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(9, 9);
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(9, sparseVector0.length());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertNotNull(sparseVector0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)sparseVector0.toDiagonalMatrix();
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(9, sparseVector0.length());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(9, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(9, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertNotNull(cRSMatrix0);
      
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      boolean boolean0 = cRSMatrix0.is(advancedMatrixPredicate0);
      assertFalse(boolean0);
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(9, sparseVector0.length());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(9, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(9, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.maxInColumn(9);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '9' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[0];
      SparseMatrix sparseMatrix0 = SparseMatrix.from1DArray(0, 0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, sparseMatrix0.rows());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertNotNull(sparseMatrix0);
      
      ColumnMajorMatrixIterator columnMajorMatrixIterator0 = sparseMatrix0.columnMajorIterator();
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, sparseMatrix0.rows());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertNotNull(columnMajorMatrixIterator0);
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = sparseMatrix0.toColumnMajorSparseMatrix();
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, sparseMatrix0.rows());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertNotNull(columnMajorSparseMatrix0);
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = (CCSMatrix)columnMajorSparseMatrix0.blankOfColumns(0);
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertNotSame(cCSMatrix0, columnMajorSparseMatrix0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, sparseMatrix0.rows());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertTrue(cCSMatrix0.equals((Object)columnMajorSparseMatrix0));
      assertNotNull(cCSMatrix0);
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)columnMajorSparseMatrix0.transform(matrixFunction0);
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix1);
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertNotSame(cCSMatrix1, columnMajorSparseMatrix0);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, sparseMatrix0.rows());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertEquals(0, cCSMatrix1.columns());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(0, cCSMatrix1.rows());
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0, cCSMatrix1.cardinality());
      assertTrue(columnMajorSparseMatrix0.equals((Object)cCSMatrix0));
      assertTrue(cCSMatrix1.equals((Object)columnMajorSparseMatrix0));
      assertTrue(cCSMatrix1.equals((Object)cCSMatrix0));
      assertNotNull(cCSMatrix1);
      
      // Undeclared exception!
      try { 
        sparseMatrix0.copyOfColumns((-600));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 0x-600
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(10);
      assertEquals(10, denseMatrix0.columns());
      assertEquals(10, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      MatrixOperation<DenseMatrix> matrixOperation0 = (MatrixOperation<DenseMatrix>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn(denseMatrix0).when(matrixOperation0).apply(any(org.la4j.matrix.DenseMatrix.class));
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)denseMatrix0.apply(matrixOperation0);
      assertSame(denseMatrix0, basic2DMatrix0);
      assertSame(basic2DMatrix0, denseMatrix0);
      assertEquals(10, denseMatrix0.columns());
      assertEquals(10, denseMatrix0.rows());
      assertEquals(10, basic2DMatrix0.columns());
      assertEquals(10, basic2DMatrix0.rows());
      assertNotNull(basic2DMatrix0);
      
      MockRandom mockRandom0 = new MockRandom(10);
      assertNotNull(mockRandom0);
      
      CRSMatrix cRSMatrix0 = new CRSMatrix(10, 10);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(10, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(10, cRSMatrix0.rows());
      assertNotNull(cRSMatrix0);
      
      String string0 = cRSMatrix0.toCSV();
      assertEquals("0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000\n0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000\n0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000\n0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000\n0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000\n0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000\n0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000\n0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000\n0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000\n0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000\n", string0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(10, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(10, cRSMatrix0.rows());
      assertNotNull(string0);
      
      Basic2DMatrix basic2DMatrix1 = (Basic2DMatrix)cRSMatrix0.subtract((double) 10);
      assertNotSame(basic2DMatrix1, denseMatrix0);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(10, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(10, cRSMatrix0.rows());
      assertEquals(10, basic2DMatrix1.columns());
      assertEquals(10, basic2DMatrix1.rows());
      assertFalse(basic2DMatrix1.equals((Object)denseMatrix0));
      assertFalse(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertNotNull(basic2DMatrix1);
      
      double double0 = basic2DMatrix0.determinant();
      assertSame(denseMatrix0, basic2DMatrix0);
      assertNotSame(denseMatrix0, basic2DMatrix1);
      assertSame(basic2DMatrix0, denseMatrix0);
      assertNotSame(basic2DMatrix0, basic2DMatrix1);
      assertEquals(1.0, double0, 0.01);
      assertEquals(10, denseMatrix0.columns());
      assertEquals(10, denseMatrix0.rows());
      assertEquals(10, basic2DMatrix0.columns());
      assertEquals(10, basic2DMatrix0.rows());
      assertFalse(denseMatrix0.equals((Object)basic2DMatrix1));
      assertFalse(basic2DMatrix0.equals((Object)basic2DMatrix1));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertNotNull(denseVector0);
      
      Vector vector0 = denseVector0.blank();
      assertNotSame(denseVector0, vector0);
      assertNotSame(vector0, denseVector0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertEquals(0, vector0.length());
      assertTrue(vector0.equals((Object)denseVector0));
      assertNotNull(vector0);
      
      Matrix matrix0 = denseVector0.toRowMatrix();
      assertNotSame(denseVector0, vector0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertEquals(0, matrix0.columns());
      assertEquals(1, matrix0.rows());
      assertTrue(denseVector0.equals((Object)vector0));
      assertNotNull(matrix0);
      
      MatrixOperation<DenseMatrix> matrixOperation0 = (MatrixOperation<DenseMatrix>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromCSV("");
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertNotNull(columnMajorSparseMatrix0);
      
      boolean boolean0 = columnMajorSparseMatrix0.isColumnMajor();
      assertTrue(boolean0);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix1 = ColumnMajorSparseMatrix.diagonal(17, 0.0);
      assertNotSame(columnMajorSparseMatrix1, columnMajorSparseMatrix0);
      assertEquals(0.0, columnMajorSparseMatrix1.max(), 0.01);
      assertFalse(columnMajorSparseMatrix1.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix1.min(), 0.01);
      assertEquals(0.058823529411764705, columnMajorSparseMatrix1.density(), 0.01);
      assertEquals(17, columnMajorSparseMatrix1.cardinality());
      assertEquals(17, columnMajorSparseMatrix1.rows());
      assertEquals(17, columnMajorSparseMatrix1.columns());
      assertFalse(columnMajorSparseMatrix1.equals((Object)columnMajorSparseMatrix0));
      assertNotNull(columnMajorSparseMatrix1);
      
      boolean boolean1 = columnMajorSparseMatrix0.equals((Object) columnMajorSparseMatrix1);
      assertNotSame(columnMajorSparseMatrix0, columnMajorSparseMatrix1);
      assertNotSame(columnMajorSparseMatrix1, columnMajorSparseMatrix0);
      assertFalse(boolean1);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix1.max(), 0.01);
      assertFalse(columnMajorSparseMatrix1.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix1.min(), 0.01);
      assertEquals(0.058823529411764705, columnMajorSparseMatrix1.density(), 0.01);
      assertEquals(17, columnMajorSparseMatrix1.cardinality());
      assertEquals(17, columnMajorSparseMatrix1.rows());
      assertEquals(17, columnMajorSparseMatrix1.columns());
      assertFalse(columnMajorSparseMatrix0.equals((Object)columnMajorSparseMatrix1));
      assertFalse(columnMajorSparseMatrix1.equals((Object)columnMajorSparseMatrix0));
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        Matrix.from1DArray(17, (-676), (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 17x-676
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double[][] doubleArray0 = new double[0][6];
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertNotNull(matrix0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.random(3, 3, 1.0, (Random) mockRandom0);
      assertEquals(3, rowMajorSparseMatrix0.columns());
      assertEquals(1.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(9, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(3, rowMajorSparseMatrix0.rows());
      assertEquals(0.2, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertNotNull(rowMajorSparseMatrix0);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.eachInRow((-374), vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -374
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(0, 1030.6841885728272, (Random) mockRandom0);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertNotNull(columnMajorSparseMatrix0);
      
      columnMajorSparseMatrix0.setAll(0);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      
      long long0 = (-1L);
      MockRandom mockRandom1 = new MockRandom(1L);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      Matrix matrix0 = columnMajorSparseMatrix0.subtract((double) 1L);
      assertNotSame(mockRandom0, mockRandom1);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertNotNull(matrix0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)Matrix.diagonal(0, (-1L));
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertNotNull(cRSMatrix0);
      
      int int1 = (-137);
      // Undeclared exception!
      try { 
        Matrix.zero((-137), 1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(4356, 4356);
      assertEquals(4356, columnMajorSparseMatrix0.rows());
      assertEquals(4356.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(2.295684113865932E-4, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(4356, columnMajorSparseMatrix0.cardinality());
      assertEquals(4356, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertNotNull(columnMajorSparseMatrix0);
      
      Matrix matrix0 = columnMajorSparseMatrix0.subtract((double) 4356);
      assertEquals(4356, columnMajorSparseMatrix0.rows());
      assertEquals(4356.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(2.295684113865932E-4, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(4356, columnMajorSparseMatrix0.cardinality());
      assertEquals(4356, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(4356, matrix0.rows());
      assertEquals(4356, matrix0.columns());
      assertNotNull(matrix0);
      
      matrix0.toMatrixMarket();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 0);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertNotNull(columnMajorSparseMatrix0);
      
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(0);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertNotNull(basic2DMatrix0);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      basic2DMatrix0.eachInRow(0, vectorProcedure0);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      
      Matrix matrix0 = basic2DMatrix0.copyOfColumns(0);
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(matrix0, basic2DMatrix0);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertTrue(matrix0.equals((Object)basic2DMatrix0));
      assertNotNull(matrix0);
      
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      boolean boolean0 = matrix0.non(matrixPredicate0);
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(matrix0, basic2DMatrix0);
      assertTrue(boolean0);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertTrue(basic2DMatrix0.equals((Object)matrix0));
      assertTrue(matrix0.equals((Object)basic2DMatrix0));
      
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 2186, 0);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(2186, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertFalse(cCSMatrix0.equals((Object)columnMajorSparseMatrix0));
      assertNotNull(cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertNotNull(basic2DMatrix0);
      
      Matrix matrix0 = Matrix.unit(4, 4);
      assertNotSame(matrix0, basic2DMatrix0);
      assertEquals(4, matrix0.rows());
      assertEquals(4, matrix0.columns());
      assertFalse(matrix0.equals((Object)basic2DMatrix0));
      assertNotNull(matrix0);
      
      double double0 = basic2DMatrix0.minInRow(464);
      assertNotSame(basic2DMatrix0, matrix0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertFalse(basic2DMatrix0.equals((Object)matrix0));
      
      basic2DMatrix0.hashCode();
      assertNotSame(basic2DMatrix0, matrix0);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertFalse(basic2DMatrix0.equals((Object)matrix0));
      
      Matrix matrix1 = basic2DMatrix0.divide(725.4467510832);
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(basic2DMatrix0, matrix1);
      assertNotSame(matrix1, basic2DMatrix0);
      assertNotSame(matrix1, matrix0);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, matrix1.columns());
      assertEquals(0, matrix1.rows());
      assertFalse(basic2DMatrix0.equals((Object)matrix0));
      assertTrue(matrix1.equals((Object)basic2DMatrix0));
      assertFalse(matrix1.equals((Object)matrix0));
      assertNotNull(matrix1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 0);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertNotNull(columnMajorSparseMatrix0);
      
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.add((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.ColumnMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Matrix matrix0 = Matrix.unit(1419, 1419);
          assertEquals(1419, matrix0.rows());
          assertEquals(1419, matrix0.columns());
          assertNotNull(matrix0);
          
          MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
          doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
          doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
          boolean boolean0 = matrix0.is(matrixPredicate0);
          assertFalse(boolean0);
          assertEquals(1419, matrix0.rows());
          assertEquals(1419, matrix0.columns());
          
          int int0 = 1;
          DenseMatrix denseMatrix0 = DenseMatrix.constant(1, 1419, (-520.9315415257));
          assertNotSame(denseMatrix0, matrix0);
          assertEquals(1, denseMatrix0.rows());
          assertEquals(1419, denseMatrix0.columns());
          assertFalse(denseMatrix0.equals((Object)matrix0));
          assertNotNull(denseMatrix0);
          
          // Undeclared exception!
          try { 
            ColumnMajorSparseMatrix.block(denseMatrix0, denseMatrix0, matrix0, denseMatrix0);
            fail("Expecting exception: IllegalArgumentException");
          
          } catch(IllegalArgumentException e) {
             //
             // Sides of blocks are incompatible!
             //
             verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          int int0 = 0;
          ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 0);
          assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
          assertFalse(columnMajorSparseMatrix0.isRowMajor());
          assertEquals(0, columnMajorSparseMatrix0.rows());
          assertEquals(0, columnMajorSparseMatrix0.columns());
          assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
          assertEquals(0, columnMajorSparseMatrix0.cardinality());
          assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
          assertNotNull(columnMajorSparseMatrix0);
          
          ColumnMajorSparseMatrix columnMajorSparseMatrix1 = ColumnMajorSparseMatrix.fromCSV("");
          assertNotSame(columnMajorSparseMatrix1, columnMajorSparseMatrix0);
          assertEquals(0, columnMajorSparseMatrix1.cardinality());
          assertEquals(0, columnMajorSparseMatrix1.columns());
          assertEquals(0, columnMajorSparseMatrix1.rows());
          assertEquals(0.0, columnMajorSparseMatrix1.max(), 0.01);
          assertEquals(Double.NaN, columnMajorSparseMatrix1.density(), 0.01);
          assertFalse(columnMajorSparseMatrix1.isRowMajor());
          assertEquals(0.0, columnMajorSparseMatrix1.min(), 0.01);
          assertTrue(columnMajorSparseMatrix1.equals((Object)columnMajorSparseMatrix0));
          assertNotNull(columnMajorSparseMatrix1);
          
          boolean boolean0 = columnMajorSparseMatrix0.equals((Object) columnMajorSparseMatrix1);
          assertNotSame(columnMajorSparseMatrix0, columnMajorSparseMatrix1);
          assertNotSame(columnMajorSparseMatrix1, columnMajorSparseMatrix0);
          assertTrue(boolean0);
          assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
          assertFalse(columnMajorSparseMatrix0.isRowMajor());
          assertEquals(0, columnMajorSparseMatrix0.rows());
          assertEquals(0, columnMajorSparseMatrix0.columns());
          assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
          assertEquals(0, columnMajorSparseMatrix0.cardinality());
          assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
          assertEquals(0, columnMajorSparseMatrix1.cardinality());
          assertEquals(0, columnMajorSparseMatrix1.columns());
          assertEquals(0, columnMajorSparseMatrix1.rows());
          assertEquals(0.0, columnMajorSparseMatrix1.max(), 0.01);
          assertEquals(Double.NaN, columnMajorSparseMatrix1.density(), 0.01);
          assertFalse(columnMajorSparseMatrix1.isRowMajor());
          assertEquals(0.0, columnMajorSparseMatrix1.min(), 0.01);
          assertTrue(columnMajorSparseMatrix0.equals((Object)columnMajorSparseMatrix1));
          assertTrue(columnMajorSparseMatrix1.equals((Object)columnMajorSparseMatrix0));
          
          int int1 = 784;
          DenseVector denseVector0 = DenseVector.constant(784, 0);
          assertEquals(784, denseVector0.length());
          assertNotNull(denseVector0);
          
          Vector vector0 = denseVector0.blank();
          assertNotSame(denseVector0, vector0);
          assertNotSame(vector0, denseVector0);
          assertEquals(784, denseVector0.length());
          assertEquals(784, vector0.length());
          assertTrue(vector0.equals((Object)denseVector0));
          assertNotNull(vector0);
          
          Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(784, 32);
          assertEquals(32, basic2DMatrix0.columns());
          assertEquals(784, basic2DMatrix0.rows());
          assertNotNull(basic2DMatrix0);
          
          // Undeclared exception!
          basic2DMatrix0.transpose();
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromCSV("");
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertNotNull(columnMajorSparseMatrix0);
      
      boolean boolean0 = columnMajorSparseMatrix0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      assertNotNull(inPlaceCopyMatrixToMatrix0);
      
      int int0 = 10;
      DenseMatrix denseMatrix0 = DenseMatrix.identity(10);
      assertEquals(10, denseMatrix0.columns());
      assertEquals(10, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      Matrix matrix0 = denseMatrix0.removeFirstRow();
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      assertEquals(10, denseMatrix0.columns());
      assertEquals(10, denseMatrix0.rows());
      assertEquals(10, matrix0.columns());
      assertEquals(9, matrix0.rows());
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertNotNull(matrix0);
      
      String string0 = denseMatrix0.toString();
      assertNotSame(denseMatrix0, matrix0);
      assertEquals("1.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000\n0.000 1.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000\n0.000 0.000 1.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000\n0.000 0.000 0.000 1.000 0.000 0.000 0.000 0.000 0.000 0.000\n0.000 0.000 0.000 0.000 1.000 0.000 0.000 0.000 0.000 0.000\n0.000 0.000 0.000 0.000 0.000 1.000 0.000 0.000 0.000 0.000\n0.000 0.000 0.000 0.000 0.000 0.000 1.000 0.000 0.000 0.000\n0.000 0.000 0.000 0.000 0.000 0.000 0.000 1.000 0.000 0.000\n0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 1.000 0.000\n0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 1.000\n", string0);
      assertEquals(10, denseMatrix0.columns());
      assertEquals(10, denseMatrix0.rows());
      assertFalse(denseMatrix0.equals((Object)matrix0));
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 4;
      CRSMatrix cRSMatrix0 = (CRSMatrix)Matrix.identity(4);
      assertEquals(4, cRSMatrix0.cardinality());
      assertEquals(0.25, cRSMatrix0.density(), 0.01);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(4, cRSMatrix0.rows());
      assertEquals(4, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertNotNull(cRSMatrix0);
      
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      assertNotNull(ooPlaceVectorsSubtraction0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = (double) 4;
      doubleArray0[4] = (double) 4;
      doubleArray0[5] = (double) 4;
      doubleArray0[6] = (double) 4;
      doubleArray0[7] = (double) 4;
      doubleArray0[8] = (double) 4;
      BasicVector basicVector0 = (BasicVector)DenseVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0}, doubleArray0, 0.01);
      assertEquals(9, basicVector0.length());
      assertNotNull(basicVector0);
      
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      CompressedVector compressedVector0 = (CompressedVector)SparseVector.fromMap(hashMap0, 4);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(4, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      BasicVector basicVector1 = (BasicVector)ooPlaceVectorsSubtraction0.apply((DenseVector) basicVector0, (SparseVector) compressedVector0);
      assertNotSame(basicVector1, basicVector0);
      assertNotSame(basicVector0, basicVector1);
      assertArrayEquals(new double[] {4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0}, doubleArray0, 0.01);
      assertEquals(9, basicVector1.length());
      assertEquals(9, basicVector0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(4, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertTrue(basicVector1.equals((Object)basicVector0));
      assertNotNull(basicVector1);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.setRow(4, (Vector) basicVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 9. Should be: 4.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 0);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertNotNull(columnMajorSparseMatrix0);
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)columnMajorSparseMatrix0.multiply((Matrix) columnMajorSparseMatrix0);
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertNotSame(cCSMatrix0, columnMajorSparseMatrix0);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertTrue(cCSMatrix0.equals((Object)columnMajorSparseMatrix0));
      assertNotNull(cCSMatrix0);
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)columnMajorSparseMatrix0.blank();
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertNotSame(cCSMatrix1, columnMajorSparseMatrix0);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0, cCSMatrix1.rows());
      assertEquals(0, cCSMatrix1.columns());
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertTrue(columnMajorSparseMatrix0.equals((Object)cCSMatrix0));
      assertTrue(cCSMatrix1.equals((Object)cCSMatrix0));
      assertTrue(cCSMatrix1.equals((Object)columnMajorSparseMatrix0));
      assertNotNull(cCSMatrix1);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)SparseMatrix.identity(0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertNotNull(cRSMatrix0);
      
      CCSMatrix cCSMatrix2 = (CCSMatrix)columnMajorSparseMatrix0.hadamardProduct(cCSMatrix1);
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix2);
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix2);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertNotSame(cCSMatrix1, columnMajorSparseMatrix0);
      assertNotSame(cCSMatrix2, cCSMatrix0);
      assertNotSame(cCSMatrix2, columnMajorSparseMatrix0);
      assertNotSame(cCSMatrix2, cCSMatrix1);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0, cCSMatrix1.rows());
      assertEquals(0, cCSMatrix1.columns());
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(0.0, cCSMatrix2.min(), 0.01);
      assertEquals(0, cCSMatrix2.cardinality());
      assertEquals(0, cCSMatrix2.columns());
      assertFalse(cCSMatrix2.isRowMajor());
      assertEquals(Double.NaN, cCSMatrix2.density(), 0.01);
      assertEquals(0, cCSMatrix2.rows());
      assertEquals(0.0, cCSMatrix2.max(), 0.01);
      assertTrue(columnMajorSparseMatrix0.equals((Object)cCSMatrix1));
      assertTrue(columnMajorSparseMatrix0.equals((Object)cCSMatrix0));
      assertTrue(cCSMatrix1.equals((Object)cCSMatrix0));
      assertTrue(cCSMatrix1.equals((Object)columnMajorSparseMatrix0));
      assertTrue(cCSMatrix2.equals((Object)columnMajorSparseMatrix0));
      assertTrue(cCSMatrix2.equals((Object)cCSMatrix1));
      assertTrue(cCSMatrix2.equals((Object)cCSMatrix0));
      assertNotNull(cCSMatrix2);
      
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.fromCSV("I*rs(5 }p.vzspD");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(10);
      assertEquals(10, denseMatrix0.rows());
      assertEquals(10, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      Matrix matrix0 = denseMatrix0.removeFirstRow();
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      assertEquals(10, denseMatrix0.rows());
      assertEquals(10, denseMatrix0.columns());
      assertEquals(10, matrix0.columns());
      assertEquals(9, matrix0.rows());
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertNotNull(matrix0);
      
      MatrixOperation<DenseMatrix> matrixOperation0 = (MatrixOperation<DenseMatrix>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn(denseMatrix0).when(matrixOperation0).apply(any(org.la4j.matrix.DenseMatrix.class));
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)denseMatrix0.apply(matrixOperation0);
      assertSame(denseMatrix0, basic2DMatrix0);
      assertNotSame(denseMatrix0, matrix0);
      assertSame(basic2DMatrix0, denseMatrix0);
      assertNotSame(basic2DMatrix0, matrix0);
      assertEquals(10, denseMatrix0.rows());
      assertEquals(10, denseMatrix0.columns());
      assertEquals(10, basic2DMatrix0.rows());
      assertEquals(10, basic2DMatrix0.columns());
      assertFalse(denseMatrix0.equals((Object)matrix0));
      assertFalse(basic2DMatrix0.equals((Object)matrix0));
      assertNotNull(basic2DMatrix0);
      
      Basic2DMatrix basic2DMatrix1 = Basic2DMatrix.identity(10);
      assertNotSame(basic2DMatrix1, matrix0);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertNotSame(basic2DMatrix1, denseMatrix0);
      assertEquals(10, basic2DMatrix1.columns());
      assertEquals(10, basic2DMatrix1.rows());
      assertTrue(basic2DMatrix1.equals((Object)denseMatrix0));
      assertFalse(basic2DMatrix1.equals((Object)matrix0));
      assertTrue(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertNotNull(basic2DMatrix1);
      
      // Undeclared exception!
      try { 
        matrix0.power(10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of rows in the left-hand matrix should be equal to the number of columns in the right-hand matrix: 9 does not equal to 10.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(10);
      assertEquals(10, denseMatrix0.columns());
      assertEquals(10, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      Matrix matrix0 = denseMatrix0.removeFirstRow();
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      assertEquals(10, denseMatrix0.columns());
      assertEquals(10, denseMatrix0.rows());
      assertEquals(10, matrix0.columns());
      assertEquals(9, matrix0.rows());
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertNotNull(matrix0);
      
      Matrix matrix1 = denseMatrix0.removeFirstColumn();
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(denseMatrix0, matrix1);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, denseMatrix0);
      assertEquals(10, denseMatrix0.columns());
      assertEquals(10, denseMatrix0.rows());
      assertEquals(9, matrix1.columns());
      assertEquals(10, matrix1.rows());
      assertFalse(denseMatrix0.equals((Object)matrix0));
      assertFalse(matrix1.equals((Object)matrix0));
      assertFalse(matrix1.equals((Object)denseMatrix0));
      assertNotNull(matrix1);
      
      MatrixMatrixOperation<SparseMatrix> matrixMatrixOperation0 = (MatrixMatrixOperation<SparseMatrix>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        denseMatrix0.foldColumn(2, (VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vectors$24", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(10);
      assertEquals(10, denseMatrix0.columns());
      assertEquals(10, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      Matrix matrix0 = denseMatrix0.removeFirstRow();
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      assertEquals(10, denseMatrix0.columns());
      assertEquals(10, denseMatrix0.rows());
      assertEquals(10, matrix0.columns());
      assertEquals(9, matrix0.rows());
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertNotNull(matrix0);
      
      MatrixOperation<DenseMatrix> matrixOperation0 = (MatrixOperation<DenseMatrix>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertFalse(basic2DMatrix0.equals((Object)matrix0));
      assertFalse(basic2DMatrix0.equals((Object)denseMatrix0));
      assertNotNull(basic2DMatrix0);
      
      denseMatrix0.hashCode();
      assertNotSame(denseMatrix0, basic2DMatrix0);
      assertNotSame(denseMatrix0, matrix0);
      assertEquals(10, denseMatrix0.columns());
      assertEquals(10, denseMatrix0.rows());
      assertFalse(denseMatrix0.equals((Object)basic2DMatrix0));
      assertFalse(denseMatrix0.equals((Object)matrix0));
      
      Matrix matrix1 = matrix0.divide(10);
      assertNotSame(denseMatrix0, basic2DMatrix0);
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(denseMatrix0, matrix1);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, denseMatrix0);
      assertNotSame(matrix0, basic2DMatrix0);
      assertNotSame(matrix1, basic2DMatrix0);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, denseMatrix0);
      assertEquals(10, denseMatrix0.columns());
      assertEquals(10, denseMatrix0.rows());
      assertEquals(10, matrix0.columns());
      assertEquals(9, matrix0.rows());
      assertEquals(10, matrix1.columns());
      assertEquals(9, matrix1.rows());
      assertFalse(denseMatrix0.equals((Object)basic2DMatrix0));
      assertFalse(denseMatrix0.equals((Object)matrix0));
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertFalse(matrix0.equals((Object)basic2DMatrix0));
      assertFalse(matrix1.equals((Object)basic2DMatrix0));
      assertFalse(matrix1.equals((Object)matrix0));
      assertFalse(matrix1.equals((Object)denseMatrix0));
      assertNotNull(matrix1);
      
      Matrix matrix2 = Matrix.zero(4, 139);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, denseMatrix0);
      assertNotSame(matrix2, basic2DMatrix0);
      assertEquals(139, matrix2.columns());
      assertEquals(4, matrix2.rows());
      assertFalse(matrix2.equals((Object)matrix1));
      assertFalse(matrix2.equals((Object)matrix0));
      assertFalse(matrix2.equals((Object)denseMatrix0));
      assertFalse(matrix2.equals((Object)basic2DMatrix0));
      assertNotNull(matrix2);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 0);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertNotNull(columnMajorSparseMatrix0);
      
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      assertNotNull(ooPlaceMatricesSubtraction0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.unit(6, 0);
      assertEquals(6, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      Matrix matrix0 = ooPlaceMatricesSubtraction0.applySimple((SparseMatrix) columnMajorSparseMatrix0, denseMatrix0);
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(6, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertEquals(6, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertTrue(matrix0.equals((Object)denseMatrix0));
      assertNotNull(matrix0);
      
      Matrix matrix1 = matrix0.removeLastRow();
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(denseMatrix0, matrix1);
      assertNotSame(matrix0, denseMatrix0);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, denseMatrix0);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(6, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertEquals(6, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertEquals(5, matrix1.rows());
      assertEquals(0, matrix1.columns());
      assertTrue(denseMatrix0.equals((Object)matrix0));
      assertTrue(matrix0.equals((Object)denseMatrix0));
      assertFalse(matrix1.equals((Object)matrix0));
      assertFalse(matrix1.equals((Object)denseMatrix0));
      assertNotNull(matrix1);
      
      Matrix matrix2 = denseMatrix0.subtract(matrix0);
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(denseMatrix0, matrix1);
      assertNotSame(denseMatrix0, matrix2);
      assertNotSame(matrix0, denseMatrix0);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, denseMatrix0);
      assertNotSame(matrix2, matrix1);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(6, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertEquals(6, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix2.columns());
      assertEquals(6, matrix2.rows());
      assertTrue(denseMatrix0.equals((Object)matrix0));
      assertFalse(denseMatrix0.equals((Object)matrix1));
      assertFalse(matrix0.equals((Object)matrix1));
      assertTrue(matrix0.equals((Object)denseMatrix0));
      assertTrue(matrix2.equals((Object)denseMatrix0));
      assertTrue(matrix2.equals((Object)matrix0));
      assertFalse(matrix2.equals((Object)matrix1));
      assertNotNull(matrix2);
      
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      assertNotNull(ooPlaceOuterProduct0);
      
      Matrix matrix3 = Matrix.constant(0, 37, 389.6279);
      assertNotSame(matrix3, matrix2);
      assertNotSame(matrix3, matrix1);
      assertNotSame(matrix3, matrix0);
      assertNotSame(matrix3, denseMatrix0);
      assertEquals(0, matrix3.columns());
      assertEquals(0, matrix3.rows());
      assertFalse(matrix3.equals((Object)matrix2));
      assertFalse(matrix3.equals((Object)matrix1));
      assertFalse(matrix3.equals((Object)matrix0));
      assertFalse(matrix3.equals((Object)denseMatrix0));
      assertNotNull(matrix3);
      
      // Undeclared exception!
      try { 
        SparseVector.fromMatrixMarket("..");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 0);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertNotNull(columnMajorSparseMatrix0);
      
      double[] doubleArray0 = columnMajorSparseMatrix0.foldRows((VectorAccumulator) null);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertNotNull(doubleArray0);
      
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.foldColumn(0, (VectorAccumulator) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertNotNull(denseVector0);
      
      Vector vector0 = denseVector0.blank();
      assertNotSame(denseVector0, vector0);
      assertNotSame(vector0, denseVector0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertEquals(0, vector0.length());
      assertTrue(vector0.equals((Object)denseVector0));
      assertNotNull(vector0);
      
      Matrix matrix0 = denseVector0.toRowMatrix();
      assertNotSame(denseVector0, vector0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertEquals(0, matrix0.columns());
      assertEquals(1, matrix0.rows());
      assertTrue(denseVector0.equals((Object)vector0));
      assertNotNull(matrix0);
      
      MatrixOperation<DenseMatrix> matrixOperation0 = (MatrixOperation<DenseMatrix>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn(matrix0).when(matrixOperation0).apply(any(org.la4j.matrix.DenseMatrix.class));
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)matrix0.apply(matrixOperation0);
      assertNotSame(denseVector0, vector0);
      assertSame(matrix0, basic2DMatrix0);
      assertSame(basic2DMatrix0, matrix0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertEquals(0, matrix0.columns());
      assertEquals(1, matrix0.rows());
      assertEquals(1, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertTrue(denseVector0.equals((Object)vector0));
      assertNotNull(basic2DMatrix0);
      
      String string0 = matrix0.toCSV();
      assertNotSame(denseVector0, vector0);
      assertSame(matrix0, basic2DMatrix0);
      assertEquals("\n", string0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertEquals(0, matrix0.columns());
      assertEquals(1, matrix0.rows());
      assertTrue(denseVector0.equals((Object)vector0));
      assertNotNull(string0);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      double[] doubleArray0 = basic2DMatrix0.foldRows(vectorAccumulator0);
      assertNotSame(denseVector0, vector0);
      assertSame(matrix0, basic2DMatrix0);
      assertSame(basic2DMatrix0, matrix0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertEquals(0, matrix0.columns());
      assertEquals(1, matrix0.rows());
      assertEquals(1, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertTrue(denseVector0.equals((Object)vector0));
      assertNotNull(doubleArray0);
      
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.fromMatrixMarket("\n");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertNotNull(denseVector0);
      
      Matrix matrix0 = denseVector0.toRowMatrix();
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertEquals(1, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertNotNull(matrix0);
      
      MatrixOperation<DenseMatrix> matrixOperation0 = (MatrixOperation<DenseMatrix>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      assertNotNull(ooPlaceMatricesSubtraction0);
      
      Spliterator<Double> spliterator0 = linkedList0.spliterator();
      assertEquals(0, linkedList0.size());
      assertNotNull(spliterator0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getIntegerInstance(locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("#,##0", decimalFormat0.toPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("#,##0", decimalFormat0.toLocalizedPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertTrue(decimalFormat0.isParseIntegerOnly());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertNotNull(decimalFormat0);
      
      DecimalFormat decimalFormat1 = (DecimalFormat)NumberFormat.getCurrencyInstance();
      assertNotSame(decimalFormat1, decimalFormat0);
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat1.getRoundingMode());
      assertFalse(decimalFormat1.isParseBigDecimal());
      assertEquals("\u00A4#,##0.00", decimalFormat1.toLocalizedPattern());
      assertFalse(decimalFormat1.isDecimalSeparatorAlwaysShown());
      assertEquals(Integer.MAX_VALUE, decimalFormat1.getMaximumIntegerDigits());
      assertEquals(2, decimalFormat1.getMinimumFractionDigits());
      assertEquals(1, decimalFormat1.getMultiplier());
      assertEquals(1, decimalFormat1.getMinimumIntegerDigits());
      assertEquals(3, decimalFormat1.getGroupingSize());
      assertEquals("\u00A4#,##0.00", decimalFormat1.toPattern());
      assertEquals("", decimalFormat1.getPositiveSuffix());
      assertEquals("-\u00A4", decimalFormat1.getNegativePrefix());
      assertEquals("\u00A4", decimalFormat1.getPositivePrefix());
      assertEquals("", decimalFormat1.getNegativeSuffix());
      assertEquals(2, decimalFormat1.getMaximumFractionDigits());
      assertTrue(decimalFormat1.isGroupingUsed());
      assertFalse(decimalFormat1.isParseIntegerOnly());
      assertFalse(decimalFormat1.equals((Object)decimalFormat0));
      assertNotNull(decimalFormat1);
      
      String string0 = matrix0.mkString((NumberFormat) decimalFormat0);
      assertNotSame(decimalFormat0, decimalFormat1);
      assertEquals("\n", string0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertEquals(1, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("#,##0", decimalFormat0.toPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("#,##0", decimalFormat0.toLocalizedPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertTrue(decimalFormat0.isParseIntegerOnly());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.equals((Object)decimalFormat1));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertNotNull(denseVector0);
      
      Vector vector0 = denseVector0.blank();
      assertNotSame(denseVector0, vector0);
      assertNotSame(vector0, denseVector0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertEquals(0, vector0.length());
      assertTrue(vector0.equals((Object)denseVector0));
      assertNotNull(vector0);
      
      Matrix matrix0 = denseVector0.toRowMatrix();
      assertNotSame(denseVector0, vector0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertEquals(1, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertTrue(denseVector0.equals((Object)vector0));
      assertNotNull(matrix0);
      
      MatrixOperation<DenseMatrix> matrixOperation0 = (MatrixOperation<DenseMatrix>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn(matrix0).when(matrixOperation0).apply(any(org.la4j.matrix.DenseMatrix.class));
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)matrix0.apply(matrixOperation0);
      assertNotSame(denseVector0, vector0);
      assertSame(matrix0, basic2DMatrix0);
      assertSame(basic2DMatrix0, matrix0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertEquals(1, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(1, basic2DMatrix0.rows());
      assertTrue(denseVector0.equals((Object)vector0));
      assertNotNull(basic2DMatrix0);
      
      String string0 = matrix0.toCSV();
      assertNotSame(denseVector0, vector0);
      assertSame(matrix0, basic2DMatrix0);
      assertEquals("\n", string0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertEquals(1, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertTrue(denseVector0.equals((Object)vector0));
      assertNotNull(string0);
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)ColumnMajorSparseMatrix.fromCSV("\n");
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertNotNull(cCSMatrix0);
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)ColumnMajorSparseMatrix.identity(3280);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertEquals(3.048780487804878E-4, cCSMatrix1.density(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(3280, cCSMatrix1.rows());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(3280, cCSMatrix1.cardinality());
      assertEquals(3280, cCSMatrix1.columns());
      assertEquals(1.0, cCSMatrix1.max(), 0.01);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertNotNull(cCSMatrix1);
      
      // Undeclared exception!
      try { 
        cCSMatrix1.minInRow(3280);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '3280' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CCSMatrix cCSMatrix0 = (CCSMatrix)Matrix.zero(1402, 1);
      assertEquals(1402, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(1, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertNotNull(cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.diagonal(1059, (-637.35));
          assertEquals(1059, basic2DMatrix0.rows());
          assertEquals(1059, basic2DMatrix0.columns());
          assertNotNull(basic2DMatrix0);
          
          // Undeclared exception!
          basic2DMatrix0.removeLastColumn();
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 10;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertNotNull(basic2DMatrix0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)127;
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      boolean boolean0 = basic2DMatrix0.non(matrixPredicate0);
      assertFalse(boolean0);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      
      // Undeclared exception!
      try { 
        Basic2DMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode Basic2DMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertNotNull(denseVector0);
      
      Vector vector0 = denseVector0.blank();
      assertNotSame(denseVector0, vector0);
      assertNotSame(vector0, denseVector0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertEquals(0, vector0.length());
      assertTrue(vector0.equals((Object)denseVector0));
      assertNotNull(vector0);
      
      Matrix matrix0 = denseVector0.toRowMatrix();
      assertNotSame(denseVector0, vector0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertEquals(0, matrix0.columns());
      assertEquals(1, matrix0.rows());
      assertTrue(denseVector0.equals((Object)vector0));
      assertNotNull(matrix0);
      
      MatrixOperation<DenseMatrix> matrixOperation0 = (MatrixOperation<DenseMatrix>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn(matrix0).when(matrixOperation0).apply(any(org.la4j.matrix.DenseMatrix.class));
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)matrix0.apply(matrixOperation0);
      assertNotSame(denseVector0, vector0);
      assertSame(matrix0, basic2DMatrix0);
      assertSame(basic2DMatrix0, matrix0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertEquals(0, matrix0.columns());
      assertEquals(1, matrix0.rows());
      assertEquals(1, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertTrue(denseVector0.equals((Object)vector0));
      assertNotNull(basic2DMatrix0);
      
      String string0 = matrix0.toCSV();
      assertNotSame(denseVector0, vector0);
      assertSame(matrix0, basic2DMatrix0);
      assertEquals("\n", string0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertEquals(0, matrix0.columns());
      assertEquals(1, matrix0.rows());
      assertTrue(denseVector0.equals((Object)vector0));
      assertNotNull(string0);
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)ColumnMajorSparseMatrix.zero(3280, 3280);
      assertEquals(3280, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(3280, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertNotNull(cCSMatrix0);
      
      boolean boolean0 = cCSMatrix0.equals((Object) denseVector0);
      assertNotSame(denseVector0, vector0);
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertEquals(3280, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(3280, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertTrue(denseVector0.equals((Object)vector0));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("");
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertNotNull(rowMajorSparseMatrix0);
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix0 = (CRSMatrix)rowMajorSparseMatrix0.copy();
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertNotNull(cRSMatrix0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)rowMajorSparseMatrix0.transform(matrixFunction0);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix1);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotSame(cRSMatrix1, rowMajorSparseMatrix0);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertTrue(rowMajorSparseMatrix0.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix1.equals((Object)rowMajorSparseMatrix0));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)Matrix.fromCSV("");
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertNotNull(basic2DMatrix0);
      
      Basic2DMatrix basic2DMatrix1 = (Basic2DMatrix)rowMajorSparseMatrix0.subtract((double) (-600));
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix1);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, basic2DMatrix1.rows());
      assertEquals(0, basic2DMatrix1.columns());
      assertTrue(rowMajorSparseMatrix0.equals((Object)cRSMatrix1));
      assertTrue(rowMajorSparseMatrix0.equals((Object)cRSMatrix0));
      assertTrue(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertNotNull(basic2DMatrix1);
      
      double double0 = basic2DMatrix1.max();
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix1);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, basic2DMatrix1.rows());
      assertEquals(0, basic2DMatrix1.columns());
      assertTrue(rowMajorSparseMatrix0.equals((Object)cRSMatrix1));
      assertTrue(rowMajorSparseMatrix0.equals((Object)cRSMatrix0));
      assertTrue(basic2DMatrix1.equals((Object)basic2DMatrix0));
      
      // Undeclared exception!
      try { 
        Matrix.unit((-600), (-600));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertNotNull(denseVector0);
      
      Vector vector0 = denseVector0.blank();
      assertNotSame(denseVector0, vector0);
      assertNotSame(vector0, denseVector0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertEquals(0, vector0.length());
      assertTrue(vector0.equals((Object)denseVector0));
      assertNotNull(vector0);
      
      Matrix matrix0 = denseVector0.toRowMatrix();
      assertNotSame(denseVector0, vector0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertEquals(0, matrix0.columns());
      assertEquals(1, matrix0.rows());
      assertTrue(denseVector0.equals((Object)vector0));
      assertNotNull(matrix0);
      
      MatrixOperation<DenseMatrix> matrixOperation0 = (MatrixOperation<DenseMatrix>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn(matrix0).when(matrixOperation0).apply(any(org.la4j.matrix.DenseMatrix.class));
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)matrix0.apply(matrixOperation0);
      assertNotSame(denseVector0, vector0);
      assertSame(matrix0, basic2DMatrix0);
      assertSame(basic2DMatrix0, matrix0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertEquals(0, matrix0.columns());
      assertEquals(1, matrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(1, basic2DMatrix0.rows());
      assertTrue(denseVector0.equals((Object)vector0));
      assertNotNull(basic2DMatrix0);
      
      int[] intArray0 = new int[2];
      // Undeclared exception!
      try { 
        basic2DMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      assertNotNull(ooPlaceOuterProduct0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertNotNull(denseVector0);
      
      SparseVector sparseVector0 = SparseVector.zero(0);
      assertEquals(Double.NaN, sparseVector0.density(), 0.01);
      assertEquals(0, sparseVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      assertNotNull(sparseVector0);
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)ooPlaceOuterProduct0.apply(denseVector0, sparseVector0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertEquals(Double.NaN, sparseVector0.density(), 0.01);
      assertEquals(0, sparseVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.cardinality());
      assertNotNull(cCSMatrix0);
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.copy();
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertEquals(Double.NaN, sparseVector0.density(), 0.01);
      assertEquals(0, sparseVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0, cCSMatrix1.rows());
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertEquals(0, cCSMatrix1.columns());
      assertTrue(cCSMatrix1.equals((Object)cCSMatrix0));
      assertNotNull(cCSMatrix1);
      
      CCSMatrix cCSMatrix2 = (CCSMatrix)ColumnMajorSparseMatrix.fromCSV("");
      assertNotSame(cCSMatrix2, cCSMatrix1);
      assertNotSame(cCSMatrix2, cCSMatrix0);
      assertEquals(0, cCSMatrix2.cardinality());
      assertEquals(0.0, cCSMatrix2.min(), 0.01);
      assertEquals(0, cCSMatrix2.rows());
      assertEquals(Double.NaN, cCSMatrix2.density(), 0.01);
      assertEquals(0, cCSMatrix2.columns());
      assertFalse(cCSMatrix2.isRowMajor());
      assertEquals(0.0, cCSMatrix2.max(), 0.01);
      assertTrue(cCSMatrix2.equals((Object)cCSMatrix0));
      assertTrue(cCSMatrix2.equals((Object)cCSMatrix1));
      assertNotNull(cCSMatrix2);
      
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)DenseMatrix.zero(0, 1231);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertNotNull(basic2DMatrix0);
      
      boolean boolean0 = cCSMatrix1.equals((Object) sparseVector0);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix0, cCSMatrix2);
      assertNotSame(cCSMatrix1, cCSMatrix2);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertEquals(Double.NaN, sparseVector0.density(), 0.01);
      assertEquals(0, sparseVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0, cCSMatrix1.rows());
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertEquals(0, cCSMatrix1.columns());
      assertTrue(cCSMatrix0.equals((Object)cCSMatrix2));
      assertTrue(cCSMatrix0.equals((Object)cCSMatrix1));
      assertTrue(cCSMatrix1.equals((Object)cCSMatrix0));
      assertTrue(cCSMatrix1.equals((Object)cCSMatrix2));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Basic2DMatrix basic2DMatrix1 = (Basic2DMatrix)Matrix.randomSymmetric(0, mockRandom0);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertEquals(0, basic2DMatrix1.rows());
      assertEquals(0, basic2DMatrix1.columns());
      assertTrue(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertNotNull(basic2DMatrix1);
      
      CCSMatrix cCSMatrix3 = (CCSMatrix)cCSMatrix0.multiply((double) 0);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix0, cCSMatrix3);
      assertNotSame(cCSMatrix0, cCSMatrix2);
      assertNotSame(cCSMatrix3, cCSMatrix0);
      assertNotSame(cCSMatrix3, cCSMatrix2);
      assertNotSame(cCSMatrix3, cCSMatrix1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertEquals(Double.NaN, sparseVector0.density(), 0.01);
      assertEquals(0, sparseVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix3.columns());
      assertFalse(cCSMatrix3.isRowMajor());
      assertEquals(Double.NaN, cCSMatrix3.density(), 0.01);
      assertEquals(0.0, cCSMatrix3.max(), 0.01);
      assertEquals(0, cCSMatrix3.cardinality());
      assertEquals(0.0, cCSMatrix3.min(), 0.01);
      assertEquals(0, cCSMatrix3.rows());
      assertTrue(cCSMatrix0.equals((Object)cCSMatrix2));
      assertTrue(cCSMatrix0.equals((Object)cCSMatrix1));
      assertTrue(cCSMatrix3.equals((Object)cCSMatrix1));
      assertTrue(cCSMatrix3.equals((Object)cCSMatrix0));
      assertTrue(cCSMatrix3.equals((Object)cCSMatrix2));
      assertNotNull(cCSMatrix3);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)RowMajorSparseMatrix.zero(1231, 3407, 242);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1231, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(3407, cRSMatrix0.columns());
      assertNotNull(cRSMatrix0);
      
      boolean boolean1 = cCSMatrix0.equals((Object) cRSMatrix0);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix0, cCSMatrix3);
      assertNotSame(cCSMatrix0, cCSMatrix2);
      assertFalse(boolean1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertEquals(Double.NaN, sparseVector0.density(), 0.01);
      assertEquals(0, sparseVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1231, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(3407, cRSMatrix0.columns());
      assertTrue(cCSMatrix0.equals((Object)cCSMatrix3));
      assertTrue(cCSMatrix0.equals((Object)cCSMatrix2));
      assertTrue(cCSMatrix0.equals((Object)cCSMatrix1));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 0);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertNotNull(columnMajorSparseMatrix0);
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix1 = ColumnMajorSparseMatrix.fromCSV("");
      assertNotSame(columnMajorSparseMatrix1, columnMajorSparseMatrix0);
      assertEquals(0, columnMajorSparseMatrix1.columns());
      assertEquals(0.0, columnMajorSparseMatrix1.max(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix1.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix1.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix1.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix1.rows());
      assertFalse(columnMajorSparseMatrix1.isRowMajor());
      assertTrue(columnMajorSparseMatrix1.equals((Object)columnMajorSparseMatrix0));
      assertNotNull(columnMajorSparseMatrix1);
      
      boolean boolean0 = columnMajorSparseMatrix0.equals((Object) columnMajorSparseMatrix1);
      assertNotSame(columnMajorSparseMatrix0, columnMajorSparseMatrix1);
      assertNotSame(columnMajorSparseMatrix1, columnMajorSparseMatrix0);
      assertTrue(boolean0);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0, columnMajorSparseMatrix1.columns());
      assertEquals(0.0, columnMajorSparseMatrix1.max(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix1.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix1.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix1.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix1.rows());
      assertFalse(columnMajorSparseMatrix1.isRowMajor());
      assertTrue(columnMajorSparseMatrix0.equals((Object)columnMajorSparseMatrix1));
      assertTrue(columnMajorSparseMatrix1.equals((Object)columnMajorSparseMatrix0));
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = (CCSMatrix)columnMajorSparseMatrix0.transformRow(0, vectorFunction0);
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertNotSame(columnMajorSparseMatrix0, columnMajorSparseMatrix1);
      assertNotSame(cCSMatrix0, columnMajorSparseMatrix0);
      assertNotSame(cCSMatrix0, columnMajorSparseMatrix1);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertTrue(columnMajorSparseMatrix0.equals((Object)columnMajorSparseMatrix1));
      assertTrue(cCSMatrix0.equals((Object)columnMajorSparseMatrix0));
      assertTrue(cCSMatrix0.equals((Object)columnMajorSparseMatrix1));
      assertNotNull(cCSMatrix0);
      
      VectorIterator vectorIterator0 = cCSMatrix0.iteratorOfRow(0);
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertNotSame(columnMajorSparseMatrix0, columnMajorSparseMatrix1);
      assertNotSame(cCSMatrix0, columnMajorSparseMatrix0);
      assertNotSame(cCSMatrix0, columnMajorSparseMatrix1);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertTrue(columnMajorSparseMatrix0.equals((Object)cCSMatrix0));
      assertTrue(columnMajorSparseMatrix0.equals((Object)columnMajorSparseMatrix1));
      assertTrue(cCSMatrix0.equals((Object)columnMajorSparseMatrix0));
      assertTrue(cCSMatrix0.equals((Object)columnMajorSparseMatrix1));
      assertNotNull(vectorIterator0);
      
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix1.maxInColumn(32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = 1432;
      Matrix matrix0 = Matrix.unit(1432, 1432);
      assertEquals(1432, matrix0.columns());
      assertEquals(1432, matrix0.rows());
      assertNotNull(matrix0);
      
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      boolean boolean0 = matrix0.is(matrixPredicate0);
      assertFalse(boolean0);
      assertEquals(1432, matrix0.columns());
      assertEquals(1432, matrix0.rows());
      
      int int1 = 13;
      double[] doubleArray0 = new double[6];
      doubleArray0[4] = (double) 796;
      doubleArray0[1] = (double) 796;
      double double0 = matrix0.trace();
      assertEquals(1432.0, double0, 0.01);
      assertEquals(1432, matrix0.columns());
      assertEquals(1432, matrix0.rows());
      
      Matrix matrix1 = Matrix.constant(10, 10, 1100.922159693);
      assertNotSame(matrix1, matrix0);
      assertEquals(10, matrix1.columns());
      assertEquals(10, matrix1.rows());
      assertFalse(matrix1.equals((Object)matrix0));
      assertNotNull(matrix1);
      
      // Undeclared exception!
      matrix0.transpose();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      int int0 = 6;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(2, 7, 2);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(2, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(7, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      boolean boolean0 = cRSMatrix0.non(advancedMatrixPredicate0);
      assertTrue(boolean0);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(2, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(7, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      
      int int1 = Integer.MAX_VALUE;
      // Undeclared exception!
      SparseMatrix.diagonal(Integer.MAX_VALUE, 6);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      double double0 = 0.0;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.diagonal(0, 0.0);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertNotNull(basic2DMatrix0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = basic2DMatrix0.transformRow(0, vectorFunction0);
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(matrix0, basic2DMatrix0);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertTrue(matrix0.equals((Object)basic2DMatrix0));
      assertNotNull(matrix0);
      
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      boolean boolean0 = matrix0.is(matrixPredicate0);
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(matrix0, basic2DMatrix0);
      assertFalse(boolean0);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertTrue(basic2DMatrix0.equals((Object)matrix0));
      assertTrue(matrix0.equals((Object)basic2DMatrix0));
      
      int int0 = 13;
      int int1 = 796;
      Matrix matrix1 = basic2DMatrix0.transpose();
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(basic2DMatrix0, matrix1);
      assertNotSame(matrix1, basic2DMatrix0);
      assertNotSame(matrix1, matrix0);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, matrix1.rows());
      assertEquals(0, matrix1.columns());
      assertTrue(basic2DMatrix0.equals((Object)matrix0));
      assertTrue(matrix1.equals((Object)basic2DMatrix0));
      assertTrue(matrix1.equals((Object)matrix0));
      assertNotNull(matrix1);
      
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      assertNotNull(ooPlaceVectorByMatrixMultiplication0);
      
      String string0 = "qg|&#";
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.fromCSV("qg|&#");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 0);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertNotNull(columnMajorSparseMatrix0);
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix1 = ColumnMajorSparseMatrix.fromCSV("");
      assertNotSame(columnMajorSparseMatrix1, columnMajorSparseMatrix0);
      assertEquals(0.0, columnMajorSparseMatrix1.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix1.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix1.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix1.columns());
      assertEquals(Double.NaN, columnMajorSparseMatrix1.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix1.rows());
      assertFalse(columnMajorSparseMatrix1.isRowMajor());
      assertTrue(columnMajorSparseMatrix1.equals((Object)columnMajorSparseMatrix0));
      assertNotNull(columnMajorSparseMatrix1);
      
      DenseMatrix denseMatrix0 = DenseMatrix.zero(5466, 0);
      assertEquals(0, denseMatrix0.columns());
      assertEquals(5466, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      Matrix matrix0 = denseMatrix0.add(0.0);
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      assertEquals(0, denseMatrix0.columns());
      assertEquals(5466, denseMatrix0.rows());
      assertEquals(0, matrix0.columns());
      assertEquals(5466, matrix0.rows());
      assertNotNull(matrix0);
      
      columnMajorSparseMatrix0.equals((Object) denseMatrix0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(10);
      Matrix matrix0 = denseMatrix0.removeFirstRow();
      MatrixOperation<DenseMatrix> matrixOperation0 = (MatrixOperation<DenseMatrix>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn(denseMatrix0).when(matrixOperation0).apply(any(org.la4j.matrix.DenseMatrix.class));
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)denseMatrix0.apply(matrixOperation0);
      MockRandom mockRandom0 = new MockRandom(10);
      CRSMatrix cRSMatrix0 = CRSMatrix.random(10, 10, 0.0, (Random) mockRandom0);
      cRSMatrix0.toCSV();
      denseMatrix0.hashCode();
      matrix0.divide(1.0);
      denseMatrix0.infinityNorm();
      // Undeclared exception!
      try { 
        basic2DMatrix0.minInColumn((-1285));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(1400);
      // Undeclared exception!
      try { 
        basic2DMatrix0.power((-1156));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The exponent should be positive: -1156.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(633);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 4356);
      // Undeclared exception!
      try { 
        sparseMatrix0.insertColumn(4356, sparseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..632
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      double[] doubleArray0 = new double[0];
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      int int0 = 10;
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 10);
      sparseVector0.subtract((double) 10);
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, sparseVector0);
      DenseMatrix denseMatrix0 = matrix0.toDenseMatrix();
      denseMatrix0.hashCode();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      denseMatrix0.withInverter(linearAlgebra_InverterFactory0);
      int int1 = 1408;
      denseMatrix0.iteratorOfColumn(1408);
      // Undeclared exception!
      try { 
        denseMatrix0.sliceBottomRight(10, 337);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [10..0][337..0].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      int int0 = 6;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(2, 7, 2);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      cRSMatrix0.non(advancedMatrixPredicate0);
      int int1 = Integer.MAX_VALUE;
      // Undeclared exception!
      SparseMatrix.diagonal(Integer.MAX_VALUE, 6);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(10);
      Matrix matrix0 = denseMatrix0.removeFirstRow();
      denseMatrix0.removeFirstColumn();
      MatrixMatrixOperation<SparseMatrix> matrixMatrixOperation0 = (MatrixMatrixOperation<SparseMatrix>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      matrix0.toBinary();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        denseMatrix0.updateColumn(10, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 7;
      doubleArray0[1] = (double) 7;
      doubleArray0[2] = (double) 7;
      doubleArray0[3] = (double) 7;
      doubleArray0[4] = (double) 7;
      doubleArray0[5] = (double) 7;
      doubleArray0[6] = (double) 7;
      doubleArray0[7] = (double) 7;
      doubleArray0[8] = (double) 7;
      Basic1DMatrix basic1DMatrix0 = (Basic1DMatrix)Matrix.from1DArray(7, 7, doubleArray0);
      int int0 = 17;
      // Undeclared exception!
      try { 
        basic1DMatrix0.maxInRow(7);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '7' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ColumnMajorSparseMatrix.zero(0, 0);
      DenseMatrix denseMatrix0 = DenseMatrix.zero(5466, 0);
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix.randomSymmetric(9, mockRandom0);
      Matrix matrix0 = denseMatrix0.add(0.0);
      // Undeclared exception!
      try { 
        matrix0.determinant();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not compute determinant of non-square matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ColumnMajorSparseMatrix.diagonal(4356, 4356);
      MockRandom mockRandom0 = new MockRandom((-2836L));
      // Undeclared exception!
      Matrix.random(4356, 13, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ColumnMajorSparseMatrix.diagonal(13, 13);
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.transform(matrixFunction0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.eachNonZeroInRow(1, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromCSV("");
      columnMajorSparseMatrix0.rowMajorIterator();
      ((CCSMatrix) columnMajorSparseMatrix0).toBinary();
      columnMajorSparseMatrix0.columns();
      columnMajorSparseMatrix0.swapRows(0, 0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ColumnMajorSparseMatrix.zero(0, 0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      DenseVector denseVector1 = denseVector0.toDenseVector();
      denseVector1.blank();
      denseVector0.toRowMatrix();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(0);
      basic2DMatrix0.power(1664);
      ColumnMajorSparseMatrix.identity(2916);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      int int0 = 2974;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(2974, 2974);
      cCSMatrix0.rank();
      String string0 = "general";
      SparseMatrix sparseMatrix0 = SparseMatrix.fromMatrixMarket(string0);
      Matrix matrix0 = sparseMatrix0.subtract((double) int0);
      Basic2DMatrix.identity(int0);
      cCSMatrix0.equals((Object) matrix0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 0);
      columnMajorSparseMatrix0.rowMajorIterator();
      columnMajorSparseMatrix0.columns();
      columnMajorSparseMatrix0.swapRows(0, 2966);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(30, 30);
      ColumnMajorSparseMatrix columnMajorSparseMatrix1 = ColumnMajorSparseMatrix.fromCSV("");
      columnMajorSparseMatrix0.equals((Object) columnMajorSparseMatrix1);
      DenseVector.constant(784, 30);
      columnMajorSparseMatrix0.columns();
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.swapRows((-1021), (-1295));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-1021' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 0);
      Matrix matrix0 = columnMajorSparseMatrix0.multiply(4827.054169521356);
      ColumnMajorSparseMatrix columnMajorSparseMatrix1 = ColumnMajorSparseMatrix.fromCSV("");
      columnMajorSparseMatrix0.equals((Object) columnMajorSparseMatrix1);
      columnMajorSparseMatrix1.spliterator();
      columnMajorSparseMatrix1.subtract((-1.0));
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      matrix0.updateRow(0, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      int int0 = 685;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(1012, 1012, 685);
      // Undeclared exception!
      columnMajorSparseMatrix0.norm();
  }
}
