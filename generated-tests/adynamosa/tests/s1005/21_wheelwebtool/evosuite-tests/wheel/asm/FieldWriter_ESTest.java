/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 22 05:22:27 GMT 2019
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-569));
      classWriter0.index = (-1603);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "Deprecated", "&$H", "ConstantValue", "bvd_o");
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-316));
      classWriter0.index = (-316);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-316), "%'+\"E+Fh]gATIJ0)Gd", "%'+\"E+Fh]gATIJ0)Gd", (String) null, "%'+\"E+Fh]gATIJ0)Gd");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-569));
      classWriter0.index = (-1603);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "Deprecated", "&$H", "ConstantValue", "bvd_o");
      int int0 = fieldWriter0.getSize();
      assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-316));
      classWriter0.index = (-316);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-316), "%'+\"E+Fh]gATIJ0)Gd", "%'+\"E+Fh]gATIJ0)Gd", (String) null, "%'+\"E+Fh]gATIJ0)Gd");
      int int0 = fieldWriter0.getSize();
      assertEquals(28, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-569));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "Exceptions", "Exceptions", "org.apache.commons.io.filefilter.EmptyFileFilter", "org.apache.commons.io.filefilter.EmptyFileFilter");
      AnnotationVisitor annotationVisitor0 = fieldWriter0.visitAnnotation("", true);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "ByDchc", "2d&N_]qhUD()k?JDwtB", "XSvSrY-gBIsO", "5S7J/");
      // Undeclared exception!
      try { 
        fieldWriter0.put((ByteVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-569));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1216, "The list of suffixes must not be null", "", "", "Exceptions");
      // Undeclared exception!
      try { 
        fieldWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "t2Ge$REo?p", "", "", "");
      // Undeclared exception!
      try { 
        fieldWriter0.visitAnnotation((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      Object object0 = new Object();
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter(classWriter0, (-1293), "Er2", "", "", object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.lang.Object@6f1a717
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3149);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 4099, "", "Sensitive", "", (Object) null);
      ByteVector byteVector0 = new ByteVector();
      Attribute attribute0 = new Attribute("");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-569));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "Exceptions", "Exceptions", "org.apache.commons.io.filefilter.EmptyFileFilter", "org.apache.commons.io.filefilter.EmptyFileFilter");
      fieldWriter0.visitAnnotation("org.apache.commons.io.filefilter.EmptyFileFilter", false);
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-569));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "Exceptions", "Exceptions", "org.apache.commons.io.filefilter.EmptyFileFilter", "org.apache.commons.io.filefilter.EmptyFileFilter");
      fieldWriter0.visitAnnotation("SourceFile", true);
      ByteVector byteVector0 = new ByteVector(6);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3149);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 4099, "", "Sensitive", "", (Object) null);
      ByteVector byteVector0 = new ByteVector();
      classWriter0.version = 3149;
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(49);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "RuntimeInvisibleAnnotationH", "09\"7w//Wil,H'+", (String) null, "RuntimeInvisibleAnnotationH");
      Attribute attribute0 = new Attribute("RuntimeInvisibleAnnotationH");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-569));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "Exceptions", "Exceptions", "org.apache.commons.io.filefilter.EmptyFileFilter", "org.apache.commons.io.filefilter.EmptyFileFilter");
      fieldWriter0.visitAnnotation("org.apache.commons.io.filefilter.EmptyFileFilter", false);
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-569));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "Exceptions", "Exceptions", "org.apache.commons.io.filefilter.EmptyFileFilter", "org.apache.commons.io.filefilter.EmptyFileFilter");
      fieldWriter0.visitAnnotation("SourceFile", true);
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3149);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "DCF_^ceyH kb~ an0.v";
      stringArray0[1] = "^t[o";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = ".o:";
      classWriter0.visit((-3940), 3149, "_J]=L{", "", "ConstantValue", stringArray0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-3940), "ConstantValue", "^t[o", "", "Thn prefix must not be nmll");
      int int0 = fieldWriter0.getSize();
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-316));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-3130), " I:(o53", "%'+\"E+Fh]gATIJ0)Gd", (String) null, (Object) null);
      int int0 = fieldWriter0.getSize();
      assertEquals(20, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-316));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-316), "%'+\"E+Fh]gATIJ0)Gd", "%'+\"E+Fh]gATIJ0)Gd", (String) null, "%'+\"E+Fh]gATIJ0)Gd");
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, (-3130), " I:(o53", "%'+\"E+Fh]gATIJ0)Gd", (String) null, (Object) null);
      assertFalse(fieldWriter1.equals((Object)fieldWriter0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3149);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 4099, "", "Sensitive", "", (Object) null);
      fieldWriter0.visitEnd();
  }
}
