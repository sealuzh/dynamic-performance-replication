/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 18:17:51 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.InterruptedIOException;
import java.util.concurrent.TimeUnit;
import okio.AsyncTimeout;
import okio.Buffer;
import okio.HashingSource;
import okio.Pipe;
import okio.Sink;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AsyncTimeout_ESTest extends AsyncTimeout_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      AsyncTimeout.head = asyncTimeout0;
      AsyncTimeout.head.clearDeadline();
      asyncTimeout0.exit(true);
      asyncTimeout0.exit(true);
      asyncTimeout0.timedOut();
      MockIOException mockIOException0 = new MockIOException();
      MockThrowable mockThrowable0 = new MockThrowable("base64 == null", mockIOException0);
      mockIOException0.addSuppressed(mockThrowable0);
      asyncTimeout0.exit((IOException) mockIOException0);
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.exit(true);
      IOException iOException0 = asyncTimeout0.newTimeoutException((IOException) null);
      assertEquals("java.io.InterruptedIOException: timeout", iOException0.toString());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      MockIOException mockIOException0 = new MockIOException();
      IOException iOException0 = asyncTimeout0.newTimeoutException(mockIOException0);
      IOException iOException1 = asyncTimeout0.exit(iOException0);
      asyncTimeout0.newTimeoutException(mockIOException0);
      IOException iOException2 = asyncTimeout0.exit(iOException1);
      asyncTimeout0.enter();
      asyncTimeout0.exit();
      asyncTimeout0.exit(iOException2);
      asyncTimeout0.timedOut();
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.deadlineNanoTime(685L);
      asyncTimeout0.deadlineNanoTime((-1467L));
      asyncTimeout0.exit(false);
      asyncTimeout0.timedOut();
      asyncTimeout0.exit();
      asyncTimeout0.timedOut();
      asyncTimeout0.timedOut();
      AsyncTimeout asyncTimeout1 = new AsyncTimeout();
      asyncTimeout1.enter();
      IOException iOException0 = asyncTimeout1.newTimeoutException((IOException) null);
      asyncTimeout0.exit(iOException0);
      long long0 = 0L;
      Pipe pipe0 = null;
      try {
        pipe0 = new Pipe(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBufferSize < 1: 0
         //
         verifyException("okio.Pipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.clearTimeout();
      asyncTimeout0.sink((Sink) null);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      asyncTimeout0.deadline(1780L, timeUnit0);
      asyncTimeout0.timedOut();
      MockIOException mockIOException0 = new MockIOException("okio.AsyncTimeout");
      mockIOException0.getStackTrace();
      mockIOException0.getMessage();
      asyncTimeout0.exit((IOException) mockIOException0);
      asyncTimeout0.newTimeoutException(mockIOException0);
      asyncTimeout0.throwIfReached();
      asyncTimeout0.enter();
      asyncTimeout0.sink((Sink) null);
      asyncTimeout0.timedOut();
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      MockIOException mockIOException0 = new MockIOException();
      asyncTimeout0.exit((IOException) mockIOException0);
      asyncTimeout0.throwIfReached();
      asyncTimeout0.deadlineNanoTime(100000L);
      MockIOException mockIOException1 = new MockIOException();
      asyncTimeout0.enter();
      asyncTimeout0.timedOut();
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      AsyncTimeout.head = asyncTimeout0;
      AsyncTimeout.head = asyncTimeout0;
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)AsyncTimeout.head.clearDeadline();
      asyncTimeout0.exit(true);
      asyncTimeout1.enter();
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      Source source0 = AsyncTimeout.head.source(hashingSource0);
      assertNotNull(source0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.deadlineNanoTime(100000L);
      MockIOException mockIOException0 = new MockIOException("ZJN`Cd'J");
      asyncTimeout0.enter();
      asyncTimeout0.timedOut();
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.clearTimeout();
      asyncTimeout0.sink((Sink) null);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      AsyncTimeout asyncTimeout2 = (AsyncTimeout)asyncTimeout0.deadline(1784L, timeUnit0);
      asyncTimeout2.exit();
      asyncTimeout0.timedOut();
      MockIOException mockIOException0 = new MockIOException("okio.AsyncTimeout");
      mockIOException0.getStackTrace();
      asyncTimeout0.exit((IOException) mockIOException0);
      InterruptedIOException interruptedIOException0 = (InterruptedIOException)asyncTimeout0.newTimeoutException(mockIOException0);
      asyncTimeout0.throwIfReached();
      asyncTimeout0.enter();
      asyncTimeout2.timeout(1784L, timeUnit0);
      asyncTimeout0.sink((Sink) null);
      asyncTimeout0.timedOut();
      asyncTimeout1.exit((IOException) interruptedIOException0);
      asyncTimeout2.enter();
      assertEquals(1784000000000L, asyncTimeout2.timeoutNanos());
  }
}
