/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 03 22:00:35 GMT 2019
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1), "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", (String) null, (Object) null);
      ByteVector byteVector0 = classWriter0.pool;
      classWriter0.version = (-1);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4096);
      classWriter0.index = (-917);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 4096, "%8=0@zCA9V:", "%8=0@zCA9V:", "eTc!$UIDq/8", "%8=0@zCA9V:");
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1));
      classWriter0.version = (-1);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1), "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", (String) null, (Object) null);
      int int0 = fieldWriter0.getSize();
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3490);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "", "", "", (Object) null);
      // Undeclared exception!
      try { 
        fieldWriter0.visitAnnotation((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1), ")untmeVsbleAnnottions", ")untmeVsbleAnnottions", (String) null, (Object) null);
      // Undeclared exception!
      try { 
        fieldWriter0.put((ByteVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-15));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-15), "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", (String) null, (Object) null);
      Attribute attribute0 = new Attribute(".N}ZYm;D}]n2y8i4!G8");
      fieldWriter0.visitAttribute(attribute0);
      fieldWriter0.visitAttribute(attribute0);
      ByteVector byteVector0 = new ByteVector();
      // Undeclared exception!
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2052));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "%8=0@zCA9V:", "%8=0@zCA9V:", "%8=0@zCA9V:", "%8=0@zCA9V:");
      ByteVector byteVector0 = new ByteVector(2);
      byteVector0.length = 3795;
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-12));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-12), "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", (String) null, (Object) null);
      ByteVector byteVector0 = classWriter0.pool;
      byteVector0.length = 2;
      byteVector0.length = 2066;
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(689);
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter(classWriter0, 689, (String) null, (String) null, (String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(681);
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter(classWriter0, 681, "`ContantValue", "`ContantValue", "`ContantValue", classWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.ClassWriter@5
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-12));
      ByteVector byteVector0 = classWriter0.pool;
      byteVector0.length = 378;
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter(classWriter0, 2, "<ze.E", "RuntimeVisibleAnnotations", (String) null, "RuntimeVisibleAnnotations");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-15));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-15), "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", (String) null, (Object) null);
      Attribute attribute0 = new Attribute(".N}ZYm;D}]n2y8i4!G8");
      fieldWriter0.visitAttribute(attribute0);
      ByteVector byteVector0 = new ByteVector();
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3490);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "", "", "", (Object) null);
      fieldWriter0.next = fieldWriter0;
      fieldWriter0.visitAnnotation("r9N0~GMfe(!L8e1':E", false);
      ByteVector byteVector0 = new ByteVector((byte)78);
      fieldWriter0.next.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1), "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", (String) null, (Object) null);
      fieldWriter0.next = fieldWriter0;
      fieldWriter0.visitAnnotation("KRR:~:9JY,E}&qpB", true);
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.next.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-79));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-79), "Ru+ieVwsijeAnmotat,ons", "Ru+ieVwsijeAnmotat,ons", "Ru+ieVwsijeAnmotat,ons", "Ru+ieVwsijeAnmotat,ons");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Ru+ieVwsijeAnmotat,ons";
      stringArray0[1] = "Ru+ieVwsijeAnmotat,ons";
      classWriter0.visit(49, 69, "Ru+ieVwsijeAnmotat,ons", "", "", stringArray0);
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(689);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 689, "ConstantValue", "ConstantValue", "ConstantValue", "ConstantValue");
      Attribute attribute0 = new Attribute("ConstantValue");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(674);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 674, "ktL \"cLkd|/[QQ`^", "ktL \"cLkd|/[QQ`^", "ktL \"cLkd|/[QQ`^", "ktL \"cLkd|/[QQ`^");
      fieldWriter0.visitAnnotation("ktL \"cLkd|/[QQ`^", false);
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(671);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 671, "ConstantValue", "ConstantValue", "ConstantValue", "ConstantValue");
      fieldWriter0.visitAnnotation("ConstantValue", true);
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-79));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-79), "Ru+ieVwsijeAnmotat,ons", "Ru+ieVwsijeAnmotat,ons", "Ru+ieVwsijeAnmotat,ons", "Ru+ieVwsijeAnmotat,ons");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Ru+ieVwsijeAnmotat,ons";
      stringArray0[1] = "Ru+ieVwsijeAnmotat,ons";
      classWriter0.visit(49, 69, "Ru+ieVwsijeAnmotat,ons", "", "", stringArray0);
      int int0 = fieldWriter0.getSize();
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-12));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-12), "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", (String) null, (Object) null);
      int int0 = fieldWriter0.getSize();
      assertEquals(20, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-12));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-12), "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", (String) null, (Object) null);
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, 2, "<ze.E", "RuntimeVisibleAnnotations", (String) null, "RuntimeVisibleAnnotations");
      assertFalse(fieldWriter1.equals((Object)fieldWriter0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1), "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", (String) null, (Object) null);
      fieldWriter0.visitEnd();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-79));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-79), "Ru+ieVwsijeAnmotat,ons", "Ru+ieVwsijeAnmotat,ons", "Ru+ieVwsijeAnmotat,ons", "Ru+ieVwsijeAnmotat,ons");
      // Undeclared exception!
      try { 
        fieldWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }
}
