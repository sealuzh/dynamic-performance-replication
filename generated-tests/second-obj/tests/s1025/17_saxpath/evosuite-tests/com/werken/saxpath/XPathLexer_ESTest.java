/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 10:43:46 GMT 2018
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("c<rn!g!X");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("c", token0.getTokenText());
      
      Token token1 = xPathLexer0.plus();
      assertEquals("<", token1.getTokenText());
      assertEquals(5, token1.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('6');
      assertFalse(boolean0);
      
      Token token2 = xPathLexer0.star();
      assertEquals("r", token2.getTokenText());
      assertEquals(20, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.rightParen();
      xPathLexer0.identifier();
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      Token token0 = xPathLexer0.dollar();
      assertEquals("[", token0.getTokenText());
      assertEquals(26, token0.getTokenType());
      
      xPathLexer0.setXPath("3g=f]I<CaLzMHDsS!");
      Token token1 = xPathLexer0.rightBracket();
      assertEquals("3", token1.getTokenText());
      assertEquals(4, token1.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('.');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.consume();
      xPathLexer0.isIdentifierChar('-');
      xPathLexer0.doubleColon();
      xPathLexer0.literal();
      xPathLexer0.rightParen();
      xPathLexer0.notEquals();
      xPathLexer0.relationalOperator();
      xPathLexer0.whitespace();
      xPathLexer0.isIdentifierChar('-');
      xPathLexer0.colon();
      xPathLexer0.consume();
      xPathLexer0.mod();
      xPathLexer0.currentPosition();
      xPathLexer0.nextToken();
      xPathLexer0.equals();
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Dnj*(Av-eZ.");
      Token token0 = xPathLexer0.identifier();
      assertEquals(15, token0.getTokenType());
      assertEquals("Dnj", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals("*", token1.getTokenText());
      assertEquals(3, token1.getTokenType());
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      assertEquals("(", token2.getTokenText());
      
      Token token3 = xPathLexer0.colon();
      assertEquals("A", token3.getTokenText());
      assertEquals(18, token3.getTokenType());
      
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
      assertEquals("v", token4.getTokenText());
      
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("-", token6.getTokenText());
      assertEquals(6, token6.getTokenType());
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
      
      xPathLexer0.mod();
      xPathLexer0.or();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(3, token2.getTokenType());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      Token token5 = xPathLexer0.dots();
      assertEquals(13, token5.getTokenType());
      
      xPathLexer0.setXPath("[bq}_xsD3OO-\"by:O");
      Token token6 = xPathLexer0.equals();
      assertEquals("", token6.getTokenText());
      assertEquals(21, token6.getTokenType());
      
      Token token7 = xPathLexer0.star();
      assertEquals(20, token7.getTokenType());
      assertEquals("[", token7.getTokenText());
      
      Token token8 = xPathLexer0.rightParen();
      assertEquals("b", token8.getTokenText());
      assertEquals(2, token8.getTokenType());
      
      Token token9 = xPathLexer0.nextToken();
      assertEquals("q}_xsD3OO-\"by:O", token9.getTokenText());
      assertNotSame(token9, token4);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("2qp#\u0006SU2ndAl:v\"K");
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      assertEquals("2", token0.getTokenText());
      
      Token token1 = xPathLexer0.whitespace();
      assertEquals("", token1.getTokenText());
      assertEquals((-2), token1.getTokenType());
      
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      assertEquals("p", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals((-1), token3.getTokenType());
      assertEquals("#\u0006SU2ndAl:v\"K", token3.getTokenText());
      
      xPathLexer0.getXPath();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token4 = xPathLexer1.leftParen();
      assertEquals(1, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Dnj*(Av-eZ.");
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      assertEquals("D", token0.getTokenText());
      
      xPathLexer0.leftBracket();
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      assertEquals("j", token1.getTokenText());
      
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(3, token2.getTokenType());
      assertEquals("*", token2.getTokenText());
      
      Token token3 = xPathLexer0.number();
      assertEquals("", token3.getTokenText());
      assertEquals(30, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(1, token4.getTokenType());
      assertEquals("(", token4.getTokenText());
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("r{?q'/$*B;g");
      Token token0 = xPathLexer0.leftParen();
      assertEquals(1, token0.getTokenType());
      assertEquals("r", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("{?q'/$*B;g", token1.getTokenText());
      assertEquals((-1), token1.getTokenType());
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      assertEquals("{", token2.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token3 = xPathLexer0.doubleColon();
      assertEquals("?q", token3.getTokenText());
      assertEquals(19, token3.getTokenType());
      
      Token token4 = xPathLexer0.colon();
      assertEquals("'", token4.getTokenText());
      assertEquals(18, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.mod();
      xPathLexer0.or();
      xPathLexer0.setXPath("V");
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer1 = new XPathLexer("x[Q8a`iRxXu%%D");
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.consume();
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer3.rightParen();
      xPathLexer3.doubleColon();
      xPathLexer3.notEquals();
      XPathLexer xPathLexer4 = new XPathLexer("x[Q8a`iRxXu%%D");
      XPathLexer xPathLexer5 = new XPathLexer("");
      xPathLexer5.leftBracket();
      xPathLexer5.setXPath("");
      xPathLexer1.currentPosition();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.slashes();
      Token token0 = xPathLexer6.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("`23`'rM1");
      Token token0 = xPathLexer0.slashes();
      assertEquals("`", token0.getTokenText());
      assertEquals(11, token0.getTokenType());
      
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      assertEquals("23", token1.getTokenText());
      
      Token token2 = xPathLexer0.leftParen();
      assertEquals("`", token2.getTokenText());
      assertEquals(1, token2.getTokenType());
      
      char char0 = xPathLexer0.LA(483);
      assertEquals('\uFFFF', char0);
      
      xPathLexer0.or();
      Token token3 = xPathLexer0.equals();
      assertEquals(21, token3.getTokenType());
      assertEquals("'", token3.getTokenText());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('\uFFFF');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4>&hv>#XuJx[)I");
      Token token0 = xPathLexer0.number();
      assertEquals("4", token0.getTokenText());
      assertEquals(30, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      assertEquals("", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.mod();
      xPathLexer0.colon();
      xPathLexer0.getXPath();
      xPathLexer0.literal();
      xPathLexer0.consume();
      xPathLexer0.colon();
      xPathLexer0.literal();
      xPathLexer0.plus();
      xPathLexer0.identifier();
      xPathLexer0.and();
      xPathLexer0.setXPath(",YNEM%}/ezchu<0");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer(" +pBi`");
      xPathLexer0.whitespace();
      xPathLexer1.not();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      
      xPathLexer0.setXPath("H");
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("H", token2.getTokenText());
      
      Token token3 = xPathLexer0.notEquals();
      assertEquals(22, token3.getTokenType());
      
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("<!.Y");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      assertEquals("<", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(23, token1.getTokenType());
      assertEquals("!", token1.getTokenText());
      
      Token token2 = xPathLexer0.number();
      assertEquals(31, token2.getTokenType());
      assertEquals(".", token2.getTokenText());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertNull(token3);
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token4 = xPathLexer1.comma();
      assertEquals(32, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(">?grRc");
      Token token0 = xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.not();
      token0.toString();
      token0.toString();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.nextToken();
      xPathLexer1.or();
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "hq";
      XPathLexer xPathLexer0 = new XPathLexer("hq");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.number();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.at();
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("/om$ljZ&5cG+");
      Token token0 = xPathLexer0.comma();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.dollar();
      Token token1 = xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer1.setPreviousToken(token1);
      xPathLexer0.mod();
      Token token2 = xPathLexer1.dots();
      xPathLexer0.slashes();
      XPathLexer xPathLexer2 = new XPathLexer("/om$ljZ&5cG+");
      xPathLexer1.whitespace();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.or();
      xPathLexer2.leftBracket();
      xPathLexer3.not();
      Token token3 = xPathLexer1.leftParen();
      assertFalse(token3.equals((Object)token2));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("qtX|`k#x|ll!r9-");
      Token token0 = xPathLexer0.star();
      assertEquals("q", token0.getTokenText());
      assertEquals(20, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("tX", token1.getTokenText());
      
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      assertEquals("|`", token2.getTokenText());
      
      xPathLexer0.consume(32);
      xPathLexer0.div();
      xPathLexer0.slashes();
      xPathLexer0.and();
      xPathLexer0.isIdentifierStartChar('r');
      Token token3 = xPathLexer0.colon();
      assertEquals(18, token3.getTokenType());
      
      Token token4 = xPathLexer0.slashes();
      assertEquals(11, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.mod();
      xPathLexer0.or();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.relationalOperator();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.comma();
      xPathLexer0.setXPath("VK;cX}-58l");
      xPathLexer0.nextToken();
      xPathLexer0.leftBracket();
      xPathLexer0.operatorName();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.mod();
      xPathLexer1.whitespace();
      xPathLexer0.minus();
      xPathLexer1.getPreviousToken();
      xPathLexer0.currentPosition();
      XPathLexer xPathLexer2 = new XPathLexer();
      assertFalse(xPathLexer2.equals((Object)xPathLexer0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("ybR *q48Ya3qjCpW+7");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setXPath("ybR *q48Ya3qjCpW+7");
      Token token0 = xPathLexer1.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("ybR", token0.getTokenText());
      
      Token token1 = xPathLexer1.star();
      assertEquals(20, token1.getTokenType());
      assertEquals(" ", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("mg$p/mnD5qFF!KZ.s");
      Token token0 = xPathLexer0.nextToken();
      token0.toString();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer0.rightParen();
      token1.toString();
      xPathLexer0.colon();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.notEquals();
      xPathLexer0.or();
      Token token0 = xPathLexer0.comma();
      xPathLexer0.setXPath("2B[n");
      xPathLexer0.nextToken();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.mod();
      xPathLexer0.or();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.relationalOperator();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.setXPath("!euy]}=6[l>");
      XPathLexer xPathLexer1 = new XPathLexer("i^T");
      xPathLexer0.setXPath("B2");
      Token token0 = xPathLexer1.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("i", token0.getTokenText());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals("B2", token1.getTokenText());
      
      xPathLexer1.relationalOperator();
      xPathLexer0.mod();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      
      xPathLexer2.minus();
      xPathLexer2.consume();
      Token token3 = xPathLexer2.minus();
      assertEquals(6, token3.getTokenType());
      
      Token token4 = xPathLexer0.notEquals();
      assertEquals(22, token4.getTokenType());
      
      xPathLexer1.setXPath("!euy]}=6[l>");
      Token token5 = xPathLexer2.dollar();
      assertEquals(26, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("D~>?grRc");
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.not();
      token0.toString();
      xPathLexer0.at();
      xPathLexer0.number();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.div();
      xPathLexer1.currentPosition();
      XPathLexer xPathLexer2 = new XPathLexer();
      assertFalse(xPathLexer2.equals((Object)xPathLexer1));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath(".;#T+q\"");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(".", token0.getTokenText());
      assertEquals(13, token0.getTokenType());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      assertEquals(";#", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.colon();
      xPathLexer0.getXPath();
      xPathLexer0.not();
      xPathLexer0.setXPath(" +pBi`");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      
      xPathLexer0.at();
      xPathLexer0.identifier();
      xPathLexer0.setXPath("");
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      
      xPathLexer0.mod();
      Token token2 = xPathLexer0.literal();
      assertNull(token2);
      
      xPathLexer0.endPosition();
      Token token3 = xPathLexer0.notEquals();
      assertEquals(22, token3.getTokenType());
      
      xPathLexer0.isIdentifierChar('T');
      xPathLexer0.setXPath("u!J");
      xPathLexer0.nextToken();
      Token token4 = xPathLexer0.getPreviousToken();
      assertEquals("u", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.operatorName();
      Token token5 = xPathLexer0.at();
      assertEquals(16, token5.getTokenType());
      assertEquals("J", token5.getTokenText());
      
      Token token6 = xPathLexer0.whitespace();
      assertEquals((-2), token6.getTokenType());
      assertEquals("", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("_g(`|_(");
      Token token0 = xPathLexer0.slashes();
      assertEquals("_", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.slashes();
      assertEquals(11, token2.getTokenType());
      
      Token token3 = xPathLexer0.plus();
      assertEquals(5, token3.getTokenType());
      
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      assertEquals("|", token4.getTokenText());
      
      Token token5 = xPathLexer0.rightBracket();
      assertEquals("_", token5.getTokenText());
      assertEquals(4, token5.getTokenType());
      
      Token token6 = xPathLexer0.leftBracket();
      assertEquals(3, token6.getTokenType());
      assertEquals("(", token6.getTokenText());
      
      xPathLexer0.or();
      Token token7 = xPathLexer0.whitespace();
      assertEquals((-2), token7.getTokenType());
      assertEquals("", token7.getTokenText());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('m');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("/om$l<jZ&5cG+");
      XPathLexer xPathLexer1 = new XPathLexer("(M");
      xPathLexer0.minus();
      Token token0 = xPathLexer0.identifier();
      String string0 = token0.toString();
      XPathLexer xPathLexer2 = new XPathLexer("(M");
      xPathLexer2.not();
      xPathLexer2.operatorName();
      xPathLexer1.nextToken();
      Token token1 = xPathLexer2.comma();
      token1.toString();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer1.pipe();
      xPathLexer2.minus();
      String string1 = xPathLexer2.getXPath();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("B>:<<%6.");
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      assertEquals(">", token1.getTokenText());
      
      Token token2 = xPathLexer0.plus();
      String string0 = token2.toString();
      assertEquals("[ (5) (:)", string0);
      
      Token token3 = xPathLexer0.leftBracket();
      assertEquals(3, token3.getTokenType());
      assertEquals("<", token3.getTokenText());
      
      Token token4 = xPathLexer0.minus();
      assertEquals("<", token4.getTokenText());
      assertEquals(6, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals((-1), token5.getTokenType());
      
      Token token6 = xPathLexer0.identifierOrOperatorName();
      assertNull(token6);
      
      Token token7 = xPathLexer0.pipe();
      assertEquals(17, token7.getTokenType());
      assertEquals("%", token7.getTokenText());
      
      xPathLexer0.currentPosition();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.consume(19);
      Token token8 = xPathLexer1.star();
      assertEquals(20, token8.getTokenType());
      
      Token token9 = xPathLexer0.dots();
      assertEquals(14, token9.getTokenType());
      assertEquals("6.", token9.getTokenText());
      
      xPathLexer1.rightBracket();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token10 = xPathLexer2.rightBracket();
      assertEquals(4, token10.getTokenType());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      String string0 = "5@O@w%[";
      xPathLexer0.setXPath("5@O@w%[");
      xPathLexer0.nextToken();
      xPathLexer0.colon();
      xPathLexer0.star();
      xPathLexer0.leftBracket();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("5@O@w%[");
      xPathLexer0.getXPath();
      xPathLexer0.pipe();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("]@");
      xPathLexer0.at();
      XPathLexer xPathLexer1 = new XPathLexer("]@");
      xPathLexer1.setXPath("");
      Token token0 = xPathLexer0.nextToken();
      Token token1 = xPathLexer1.at();
      token0.toString();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("_g(`|_(");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("_g", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      assertEquals("(", token1.getTokenText());
      
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      assertEquals("`", token2.getTokenText());
      
      Token token3 = xPathLexer0.not();
      assertEquals("|", token3.getTokenText());
      assertEquals(23, token3.getTokenType());
      
      Token token4 = xPathLexer0.rightBracket();
      assertEquals("_", token4.getTokenText());
      assertEquals(4, token4.getTokenType());
      
      Token token5 = xPathLexer0.leftBracket();
      assertEquals(3, token5.getTokenType());
      assertEquals("(", token5.getTokenText());
      
      xPathLexer0.or();
      boolean boolean0 = xPathLexer0.isIdentifierChar('m');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.isIdentifierStartChar('_');
      xPathLexer0.rightBracket();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.equals();
      xPathLexer0.setXPath(".>}{Lrm@[m>qgw6x(Ht");
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      
      Token token2 = xPathLexer0.dots();
      String string0 = token2.toString();
      assertEquals("[ (13) (>)", string0);
      
      xPathLexer0.mod();
      xPathLexer0.getXPath();
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token3.getTokenType());
      assertNotNull(token3);
      
      xPathLexer0.consume();
      Token token4 = xPathLexer0.rightParen();
      assertEquals(2, token4.getTokenType());
      
      Token token5 = xPathLexer0.plus();
      assertEquals(5, token5.getTokenType());
      
      Token token6 = xPathLexer0.doubleColon();
      assertEquals(19, token6.getTokenType());
      assertEquals("rm", token6.getTokenText());
      
      Token token7 = xPathLexer0.notEquals();
      assertEquals(22, token7.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer(".>}{Lrm@[m>qgw6x(Ht");
      Token token8 = xPathLexer1.leftBracket();
      assertEquals(".", token8.getTokenText());
      assertEquals(3, token8.getTokenType());
      
      xPathLexer0.setXPath("iz8bF[,'Xh9U");
      xPathLexer0.dots();
      xPathLexer1.or();
      boolean boolean0 = xPathLexer1.isIdentifierStartChar('h');
      assertTrue(boolean0);
      
      Token token9 = xPathLexer0.equals();
      assertEquals(21, token9.getTokenType());
      assertEquals("z", token9.getTokenText());
      
      Token token10 = xPathLexer0.nextToken();
      assertEquals(30, token10.getTokenType());
      assertEquals("8", token10.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.getXPath();
      xPathLexer1.isIdentifierChar('|');
      Token token11 = xPathLexer1.slashes();
      assertEquals(11, token11.getTokenType());
      assertEquals(">", token11.getTokenText());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(";uGdI<La4&5}m[C!l");
      xPathLexer0.setXPath("9*:");
      xPathLexer0.consume();
      Token token0 = xPathLexer0.nextToken();
      assertEquals("*", token0.getTokenText());
      assertEquals(20, token0.getTokenType());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.and();
      xPathLexer0.div();
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(3, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.identifier();
      assertEquals(15, token0.getTokenType());
      
      xPathLexer0.consume();
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.operatorName();
      xPathLexer0.dots();
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      
      xPathLexer0.setXPath("f&|gKZXfM");
      xPathLexer1.whitespace();
      xPathLexer0.whitespace();
      xPathLexer0.and();
      Token token4 = xPathLexer0.nextToken();
      assertEquals((-1), token4.getTokenType());
      assertEquals("&|gKZXfM", token4.getTokenText());
      
      Token token5 = xPathLexer1.at();
      assertEquals(16, token5.getTokenType());
      
      Token token6 = xPathLexer1.leftParen();
      assertEquals(1, token6.getTokenType());
      
      xPathLexer0.isIdentifierChar('<');
      xPathLexer0.consume((-1));
      xPathLexer0.isIdentifierChar('<');
      Token token7 = xPathLexer1.rightParen();
      assertEquals(2, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.literal();
      String string0 = "n";
      xPathLexer0.or();
      xPathLexer0.comma();
      xPathLexer0.setXPath("n");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.mod();
      xPathLexer0.or();
      xPathLexer0.getXPath();
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setXPath("GF$fCw?W86+qMp");
      xPathLexer1.nextToken();
      xPathLexer1.leftBracket();
      xPathLexer0.comma();
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer2 = new XPathLexer();
      // Undeclared exception!
      try { 
        xPathLexer1.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.comma();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.setXPath("45@O@w+[");
      Token token0 = xPathLexer0.at();
      xPathLexer0.leftBracket();
      xPathLexer0.comma();
      token0.toString();
      xPathLexer0.nextToken();
      xPathLexer0.getXPath();
      xPathLexer0.slashes();
      token0.toString();
      XPathLexer xPathLexer1 = new XPathLexer();
      // Undeclared exception!
      try { 
        xPathLexer1.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.mod();
      xPathLexer0.or();
      xPathLexer0.getXPath();
      xPathLexer0.consume();
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
      
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      
      xPathLexer0.rightBracket();
      xPathLexer0.rightBracket();
      Token token2 = xPathLexer0.rightBracket();
      assertEquals(4, token2.getTokenType());
      
      Token token3 = xPathLexer0.leftBracket();
      assertEquals(3, token3.getTokenType());
      
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(19, token4.getTokenType());
      
      Token token5 = xPathLexer0.dots();
      assertEquals(13, token5.getTokenType());
      
      xPathLexer0.setXPath("");
      Token token6 = xPathLexer0.equals();
      assertEquals(21, token6.getTokenType());
      
      xPathLexer0.setXPath("K&ZyaGE");
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token7 = xPathLexer2.slashes();
      assertEquals(11, token7.getTokenType());
      
      Token token8 = xPathLexer1.rightParen();
      assertEquals(2, token8.getTokenType());
      
      Token token9 = xPathLexer1.number();
      assertEquals(30, token9.getTokenType());
      
      Token token10 = xPathLexer0.nextToken();
      assertEquals("K", token10.getTokenText());
      assertEquals(15, token10.getTokenType());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.comma();
      xPathLexer0.setXPath("45@O@w+[");
      xPathLexer0.nextToken();
      xPathLexer0.at();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.getPreviousToken();
      xPathLexer0.and();
      xPathLexer0.leftBracket();
      xPathLexer0.relationalOperator();
      xPathLexer0.relationalOperator();
      xPathLexer0.colon();
      xPathLexer0.dots();
      xPathLexer0.equals();
      xPathLexer0.setXPath("fM&^|gKZXfM");
      xPathLexer0.leftParen();
      xPathLexer0.star();
      xPathLexer0.rightParen();
      xPathLexer0.number();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      String string0 = xPathLexer1.getXPath();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.mod();
      xPathLexer0.comma();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.setXPath(">:l<<%W(u6.");
      xPathLexer0.minus();
      xPathLexer0.setXPath("4D?ICr3$BuFuiLt}xa");
      XPathLexer xPathLexer1 = new XPathLexer("e'q3Hk|?^ysU0_'");
      xPathLexer0.operatorName();
      XPathLexer xPathLexer2 = new XPathLexer("WF?,X}9b3BX");
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.doubleColon();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer2.equals();
      xPathLexer1.setXPath("WF?,X}9b3BX");
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.rightParen();
      xPathLexer4.getXPath();
      xPathLexer2.nextToken();
      XPathLexer xPathLexer6 = new XPathLexer();
      String string0 = xPathLexer5.getXPath();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("2qp#\u0006SU2ndAl:v\"K");
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      assertEquals("2", token0.getTokenText());
      
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      assertEquals("q", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("p", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      xPathLexer0.getXPath();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token3 = xPathLexer1.leftParen();
      assertEquals(1, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.dollar();
      String string0 = "S/Y#0r v9M";
      xPathLexer0.setXPath("S/Y#0r v9M");
      xPathLexer0.nextToken();
      xPathLexer0.at();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("_0A2z[RG4\"");
      Token token0 = xPathLexer0.dollar();
      assertEquals("_", token0.getTokenText());
      
      xPathLexer0.or();
      Token token1 = xPathLexer0.doubleColon();
      assertEquals("0A", token1.getTokenText());
      assertEquals(19, token1.getTokenType());
      
      xPathLexer0.minus();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("z", token2.getTokenText());
      
      xPathLexer0.consume(31);
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("r");
      Token token4 = xPathLexer1.minus();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer("");
      Token token5 = xPathLexer1.not();
      assertEquals(23, token5.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer2.setPreviousToken(token4);
      assertEquals(6, token4.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer();
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token6 = xPathLexer7.nextToken();
      assertEquals((-1), token6.getTokenType());
      
      Token token7 = xPathLexer1.literal();
      assertNull(token7);
      
      Token token8 = xPathLexer0.equals();
      assertEquals(21, token8.getTokenType());
      
      xPathLexer0.and();
      XPathLexer xPathLexer8 = new XPathLexer();
      xPathLexer5.consume();
      xPathLexer2.div();
      XPathLexer xPathLexer9 = new XPathLexer();
      xPathLexer2.getXPath();
      xPathLexer8.isIdentifierChar('U');
      Token token9 = xPathLexer7.dollar();
      assertEquals(26, token9.getTokenType());
      
      Token token10 = xPathLexer5.dots();
      assertEquals(13, token10.getTokenType());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("sWQi;A 5KfJJu=");
      Token token0 = xPathLexer0.nextToken();
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(";A", token1.getTokenText());
      assertEquals(19, token1.getTokenType());
      
      String string0 = token0.toString();
      assertEquals("[ (15) (sWQi)", string0);
      
      xPathLexer0.and();
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      assertEquals(" ", token2.getTokenText());
      
      xPathLexer0.setPreviousToken(token0);
      Token token3 = xPathLexer0.leftBracket();
      assertEquals("5", token3.getTokenText());
      assertEquals(3, token3.getTokenType());
      
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(4, token4.getTokenType());
      assertEquals("K", token4.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      Token token5 = xPathLexer0.plus();
      assertEquals("f", token5.getTokenText());
      
      Token token6 = xPathLexer0.minus();
      assertEquals(6, token6.getTokenType());
      assertEquals("J", token6.getTokenText());
      
      Token token7 = xPathLexer0.plus();
      assertEquals(5, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("kK%T{ZM\"+");
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.nextToken();
      assertEquals("kK", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      assertEquals("", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.mod();
      xPathLexer0.and();
      xPathLexer0.setXPath("[bq}_xsD3OO-\"by:O");
      xPathLexer0.leftBracket();
      xPathLexer0.consume();
      xPathLexer0.rightParen();
      xPathLexer0.and();
      xPathLexer0.doubleColon();
      xPathLexer0.notEquals();
      XPathLexer xPathLexer1 = new XPathLexer("[bq}_xsD3OO-\"by:O");
      xPathLexer0.leftBracket();
      xPathLexer1.setXPath("#");
      xPathLexer0.currentPosition();
      xPathLexer0.equals();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.comma();
      // Undeclared exception!
      try { 
        xPathLexer2.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("2qp#\u0006SU2ndAl:v\"K");
      Token token0 = xPathLexer0.comma();
      assertEquals("2", token0.getTokenText());
      assertEquals(32, token0.getTokenType());
      
      xPathLexer0.minus();
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      assertEquals("p", token1.getTokenText());
      
      Token token2 = xPathLexer0.pipe();
      assertEquals("#", token2.getTokenText());
      assertEquals(17, token2.getTokenType());
      
      Token token3 = xPathLexer0.whitespace();
      assertEquals((-2), token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(15, token4.getTokenType());
      assertEquals("SU2ndAl", token4.getTokenText());
      
      Token token5 = xPathLexer0.minus();
      assertEquals(":", token5.getTokenText());
      assertEquals(6, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
      
      xPathLexer0.or();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.setXPath(") (");
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      assertEquals(")", token1.getTokenText());
      
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      assertEquals(" ", token2.getTokenText());
      
      Token token3 = xPathLexer0.rightParen();
      assertEquals("(", token3.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer(") (");
      XPathLexer xPathLexer2 = new XPathLexer(") (");
      xPathLexer0.setXPath("T)+612pftj");
      Token token4 = xPathLexer0.nextToken();
      assertEquals("T)+612pftj", token4.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer1.mod();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token5 = xPathLexer3.rightParen();
      assertEquals(2, token5.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.and();
      xPathLexer1.consume();
      Token token6 = xPathLexer0.minus();
      assertEquals(6, token6.getTokenType());
      assertEquals("T", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("c<rn!g!X");
      xPathLexer0.consume();
      Token token0 = xPathLexer0.nextToken();
      assertEquals(7, token0.getTokenType());
      assertEquals("<", token0.getTokenText());
      
      xPathLexer0.div();
      Token token1 = xPathLexer0.plus();
      assertEquals("r", token1.getTokenText());
      assertEquals(5, token1.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('6');
      assertFalse(boolean0);
      
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      assertEquals("n", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Dnj*(Av-eZ.");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals("D", token0.getTokenText());
      assertEquals(4, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      assertEquals("n", token1.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      assertEquals("j", token2.getTokenText());
      
      Token token3 = xPathLexer0.colon();
      assertEquals(18, token3.getTokenType());
      assertEquals("*", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("(", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("Av-eZ.", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
      
      xPathLexer0.getXPath();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.consume();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token6 = xPathLexer2.number();
      assertEquals(30, token6.getTokenType());
      
      xPathLexer2.leftParen();
      Token token7 = xPathLexer1.whitespace();
      assertEquals((-2), token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!1uy4~zL/^6i}&");
      xPathLexer0.mod();
      xPathLexer0.relationalOperator();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('O');
      assertTrue(boolean0);
      
      Token token0 = xPathLexer0.star();
      assertEquals("!", token0.getTokenText());
      
      Token token1 = xPathLexer0.star();
      xPathLexer0.setPreviousToken(token1);
      assertEquals(20, token1.getTokenType());
      
      Token token2 = xPathLexer0.equals();
      assertEquals("u", token2.getTokenText());
      assertEquals(21, token2.getTokenType());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals("y4", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      Token token0 = xPathLexer0.rightParen();
      XPathLexer xPathLexer1 = new XPathLexer(") (");
      xPathLexer1.setXPath(") (");
      Token token1 = xPathLexer1.pipe();
      xPathLexer0.setPreviousToken(token0);
      XPathLexer xPathLexer2 = new XPathLexer("X-e[");
      xPathLexer2.dollar();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.relationalOperator();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer1.setXPath("Z\"7");
      Token token2 = xPathLexer1.nextToken();
      xPathLexer2.minus();
      token0.toString();
      Token token3 = xPathLexer1.nextToken();
      token3.toString();
      XPathLexer xPathLexer4 = new XPathLexer(") (");
      xPathLexer4.operatorName();
      xPathLexer4.rightParen();
      token2.toString();
      xPathLexer4.hasMoreChars();
      xPathLexer0.or();
      Token token4 = xPathLexer4.mod();
      assertNull(token4);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Vk;'. sYu/]ojW");
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      assertEquals("V", token0.getTokenText());
      
      Token token1 = xPathLexer0.identifier();
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(";'. sYu/]ojW", token2.getTokenText());
      
      Token token3 = xPathLexer0.minus();
      assertEquals(6, token3.getTokenType());
      assertEquals(";", token3.getTokenText());
      
      Token token4 = xPathLexer0.not();
      assertEquals("'", token4.getTokenText());
      assertEquals(23, token4.getTokenType());
      
      Token token5 = xPathLexer0.comma();
      assertEquals(".", token5.getTokenText());
      assertEquals(32, token5.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar(' ');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("2qp#\u0006SU2ndAl:v\"K");
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      assertEquals("2", token0.getTokenText());
      
      xPathLexer0.minus();
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      assertEquals("p", token1.getTokenText());
      
      Token token2 = xPathLexer0.whitespace();
      assertEquals((-2), token2.getTokenType());
      assertEquals("", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("\u0006SU2ndAl:v\"K", token3.getTokenText());
      assertEquals((-1), token3.getTokenType());
      
      Token token4 = xPathLexer0.minus();
      assertEquals(6, token4.getTokenType());
      assertEquals("\u0006", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("vmlWO(v");
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("vmlWO(v");
      xPathLexer1.mod();
      xPathLexer0.currentPosition();
      xPathLexer0.div();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("vmlWO", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.or();
      xPathLexer0.star();
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      
      xPathLexer0.setXPath("B9+|cD,b_F?/<gir");
      Token token3 = xPathLexer0.equals();
      assertEquals("B", token3.getTokenText());
      assertEquals(21, token3.getTokenType());
      
      Token token4 = xPathLexer0.star();
      assertEquals(20, token4.getTokenType());
      assertEquals("9", token4.getTokenText());
      
      Token token5 = xPathLexer0.rightParen();
      assertEquals(2, token5.getTokenType());
      assertEquals("+", token5.getTokenText());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("|", token6.getTokenText());
      assertEquals(17, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.mod();
      xPathLexer0.or();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.nextToken();
      xPathLexer0.leftBracket();
      xPathLexer0.comma();
      xPathLexer0.setXPath(") (");
      XPathLexer xPathLexer1 = new XPathLexer("AG^jw3M");
      xPathLexer1.setXPath("`y`Zm7Sq5NNkEt");
      xPathLexer1.nextToken();
      xPathLexer0.equals();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("vmlWO(Pv");
      xPathLexer0.whitespace();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.or();
      xPathLexer1.rightParen();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.setPreviousToken((Token) null);
      xPathLexer0.mod();
      xPathLexer2.setXPath("Px`-e`6-x<q)b\" M");
      xPathLexer0.div();
      xPathLexer2.nextToken();
      xPathLexer2.dollar();
      xPathLexer2.notEquals();
      xPathLexer1.not();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer("LZwZ5Is");
      xPathLexer0.whitespace();
      xPathLexer3.rightBracket();
      xPathLexer0.consume((-691));
      // Undeclared exception!
      try { 
        xPathLexer0.mod();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(";uGdI<La4&5}m[C!l");
      xPathLexer0.setXPath("9*:");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(30, token0.getTokenType());
      assertEquals("9", token0.getTokenText());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      assertEquals("*:", token1.getTokenText());
      
      xPathLexer0.div();
      xPathLexer0.div();
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(3, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.pipe();
      xPathLexer0.setXPath("]a");
      xPathLexer0.operatorName();
      xPathLexer0.relationalOperator();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("]a");
      Token token0 = new Token(2678, "G>)]<3Yxk&D3-j` ;", 2678, 117);
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("qtX|`k#x|ll!r9-");
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      assertEquals("q", token0.getTokenText());
      
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals("|`", token3.getTokenText());
      assertEquals(19, token3.getTokenType());
      
      xPathLexer0.consume(32);
      xPathLexer0.div();
      xPathLexer0.slashes();
      xPathLexer0.isIdentifierStartChar('r');
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
      
      Token token5 = xPathLexer0.slashes();
      assertEquals(11, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.leftBracket();
      Token token1 = xPathLexer0.minus();
      xPathLexer0.number();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.mod();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.setPreviousToken(token1);
      xPathLexer2.identifierOrOperatorName();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.number();
      xPathLexer1.identifierOrOperatorName();
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer("<!.Y");
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer0.whitespace();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.equals();
      Token token1 = xPathLexer0.whitespace();
      xPathLexer0.setXPath("[Ea|U&4-7");
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.rightBracket();
      assertEquals("[", token2.getTokenText());
      assertEquals(4, token2.getTokenType());
      
      xPathLexer0.operatorName();
      Token token3 = xPathLexer0.leftBracket();
      assertEquals("E", token3.getTokenText());
      assertEquals(3, token3.getTokenType());
      
      Token token4 = xPathLexer0.star();
      assertEquals("a", token4.getTokenText());
      assertEquals(20, token4.getTokenType());
      
      xPathLexer0.setPreviousToken(token1);
      assertEquals((-2), token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("[Ea|U&4-7");
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token5 = xPathLexer1.slashes();
      assertEquals(11, token5.getTokenType());
      assertEquals("[", token5.getTokenText());
      
      Token token6 = xPathLexer1.equals();
      assertEquals("E", token6.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("[Ea|U&4-7");
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer4.setPreviousToken(token0);
      assertEquals(21, token0.getTokenType());
      
      Token token7 = xPathLexer1.notEquals();
      Token token8 = xPathLexer3.notEquals();
      assertEquals("[E", token8.getTokenText());
      
      Token token9 = xPathLexer1.nextToken();
      assertEquals(15, token9.getTokenType());
      assertEquals("U", token9.getTokenText());
      
      String string0 = token7.toString();
      assertEquals("[ (22) (a|)", string0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      String string0 = "Dnj*(Av-eZ.";
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.rightParen();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.plus();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.or();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer1.comma();
      xPathLexer0.notEquals();
      xPathLexer1.getXPath();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.leftParen();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.rightParen();
      XPathLexer xPathLexer4 = null;
      try {
        xPathLexer4 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("fsY;!'Y*yu");
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      assertEquals("f", token0.getTokenText());
      
      Token token1 = xPathLexer0.dots();
      assertEquals("s", token1.getTokenText());
      assertEquals(13, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("Y", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("qt1c/[u28,njp!");
      Token token0 = xPathLexer0.leftParen();
      assertEquals(1, token0.getTokenType());
      assertEquals("q", token0.getTokenText());
      
      xPathLexer0.and();
      Token token1 = xPathLexer0.doubleColon();
      assertEquals("t1", token1.getTokenText());
      assertEquals(19, token1.getTokenType());
      
      Token token2 = xPathLexer0.slashes();
      assertEquals(12, token2.getTokenType());
      assertEquals("c/", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      String string0 = "45@O@w+[";
      String string1 = "e'q3Hk|?^ysU0_'";
      XPathLexer xPathLexer1 = new XPathLexer("45@O@w+[");
      xPathLexer1.pipe();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      xPathLexer1.nextToken();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      String string0 = ">.1";
      XPathLexer xPathLexer0 = new XPathLexer(">.1");
      Token token0 = xPathLexer0.comma();
      token0.toString();
      xPathLexer0.rightBracket();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer(">.1");
      xPathLexer1.setXPath("");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("[ (");
      xPathLexer2.operatorName();
      xPathLexer0.slashes();
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.relationalOperator();
      xPathLexer0.rightBracket();
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.leftBracket();
      xPathLexer0.star();
      xPathLexer0.setPreviousToken(token0);
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer2 = new XPathLexer();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(">?grRc");
      Token token0 = xPathLexer0.nextToken();
      token0.toString();
      token0.toString();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer1.pipe();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer2 = new XPathLexer("");
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("<!B.Y");
      Token token0 = xPathLexer1.slashes();
      assertEquals("<", token0.getTokenText());
      assertEquals(11, token0.getTokenType());
      
      xPathLexer0.comma();
      xPathLexer0.notEquals();
      xPathLexer1.mod();
      xPathLexer1.and();
      xPathLexer0.minus();
      xPathLexer1.minus();
      xPathLexer0.notEquals();
      xPathLexer0.or();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.and();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer("J!d/");
      Token token1 = xPathLexer1.minus();
      assertEquals(6, token1.getTokenType());
      assertEquals("B", token1.getTokenText());
      
      Token token2 = xPathLexer4.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("J", token2.getTokenText());
      
      Token token3 = xPathLexer3.not();
      assertEquals(23, token3.getTokenType());
      
      Token token4 = xPathLexer2.notEquals();
      assertEquals(22, token4.getTokenType());
      
      xPathLexer4.operatorName();
      Token token5 = xPathLexer4.plus();
      assertEquals(5, token5.getTokenType());
      assertEquals("!", token5.getTokenText());
      
      xPathLexer0.setXPath("");
      Token token6 = xPathLexer2.comma();
      assertEquals(32, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("ybR *q48Ya3qjCpW+7");
      xPathLexer0.setXPath("ybR *q48Ya3qjCpW+7");
      xPathLexer0.notEquals();
      xPathLexer0.nextToken();
      xPathLexer0.star();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.mod();
      xPathLexer0.minus();
      xPathLexer0.setXPath("o[$l[jZ&h+X2p");
      xPathLexer0.or();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      Token token1 = xPathLexer0.dollar();
      xPathLexer0.setPreviousToken(token1);
      Token token2 = xPathLexer0.getPreviousToken();
      assertEquals(26, token2.getTokenType());
      
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token4.getTokenType());
      
      Token token5 = xPathLexer0.rightParen();
      assertEquals(2, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("]a");
      xPathLexer0.div();
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("]", token0.getTokenText());
      assertEquals(3, token0.getTokenType());
      
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      assertEquals("a", token1.getTokenText());
      
      xPathLexer0.comma();
      XPathLexer xPathLexer1 = new XPathLexer("7P9El,");
      Token token2 = xPathLexer1.nextToken();
      assertEquals("7", token2.getTokenText());
      assertEquals(30, token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token3 = xPathLexer2.nextToken();
      assertEquals((-1), token3.getTokenType());
      
      Token token4 = xPathLexer0.comma();
      assertEquals(32, token4.getTokenType());
      
      Token token5 = xPathLexer0.star();
      assertEquals(20, token5.getTokenType());
      
      xPathLexer0.number();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.mod();
      XPathLexer xPathLexer4 = new XPathLexer("nIk=3v#=");
      xPathLexer2.div();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.relationalOperator();
      Token token6 = xPathLexer5.whitespace();
      assertEquals((-2), token6.getTokenType());
      
      xPathLexer5.div();
      xPathLexer3.getPreviousToken();
      xPathLexer1.currentPosition();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.relationalOperator();
      Token token7 = xPathLexer0.number();
      assertEquals(30, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.pipe();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(17, token0.getTokenType());
      
      xPathLexer0.setXPath("Y4!$}T7nr:G");
      xPathLexer0.consume();
      xPathLexer0.equals();
      Token token1 = xPathLexer0.identifier();
      assertEquals("", token1.getTokenText());
      
      Token token2 = xPathLexer0.equals();
      assertEquals("!", token2.getTokenText());
      assertEquals(21, token2.getTokenType());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
      assertEquals("$", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("<!B.Y");
      xPathLexer1.nextToken();
      Token token0 = xPathLexer0.notEquals();
      xPathLexer1.equals();
      xPathLexer1.setPreviousToken(token0);
      xPathLexer0.operatorName();
      xPathLexer1.nextToken();
      xPathLexer1.whitespace();
      xPathLexer1.div();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("/om$l<jZ&5cG+");
      Token token0 = xPathLexer0.nextToken();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (11) (/)", string0);
      
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      assertEquals("o", token1.getTokenText());
      
      Token token2 = xPathLexer0.not();
      assertEquals("m", token2.getTokenText());
      assertEquals(23, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.rightParen();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token3 = xPathLexer2.leftBracket();
      Token token4 = xPathLexer2.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      Token token5 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token5.getTokenType());
      
      Token token6 = xPathLexer1.minus();
      assertEquals(6, token6.getTokenType());
      
      Token token7 = xPathLexer2.identifierOrOperatorName();
      assertNull(token7);
      
      xPathLexer2.operatorName();
      Token token8 = xPathLexer0.rightParen();
      assertEquals("$", token8.getTokenText());
      assertEquals(2, token8.getTokenType());
      
      xPathLexer0.getPreviousToken();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.setPreviousToken(token3);
      assertEquals(3, token3.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer("[ (11) (/)");
      xPathLexer5.currentPosition();
      XPathLexer xPathLexer6 = new XPathLexer();
      XPathLexer xPathLexer7 = new XPathLexer();
      XPathLexer xPathLexer8 = new XPathLexer();
      xPathLexer6.mod();
      xPathLexer8.currentPosition();
      xPathLexer7.and();
      xPathLexer7.identifier();
      Token token9 = xPathLexer1.whitespace();
      assertEquals((-2), token9.getTokenType());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.equals();
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      
      xPathLexer0.setXPath("[Ea|U-7");
      xPathLexer0.setPreviousToken(token0);
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(3, token2.getTokenType());
      assertEquals("[", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token3 = xPathLexer1.nextToken();
      assertEquals((-1), token3.getTokenType());
      
      Token token4 = xPathLexer0.number();
      assertEquals("", token4.getTokenText());
      assertEquals(30, token4.getTokenType());
      
      Token token5 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token5.getTokenType());
      assertEquals("Ea", token5.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token6 = xPathLexer3.comma();
      assertEquals(32, token6.getTokenType());
      
      xPathLexer3.setPreviousToken(token0);
      assertEquals(21, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("R140A$Phb[Bf*F8rq");
      xPathLexer0.notEquals();
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      assertEquals("4", token0.getTokenText());
      
      xPathLexer0.leftParen();
      Token token1 = xPathLexer0.rightBracket();
      assertEquals("A", token1.getTokenText());
      assertEquals(4, token1.getTokenType());
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      
      Token token3 = xPathLexer0.leftBracket();
      assertEquals("P", token3.getTokenText());
      assertEquals(3, token3.getTokenType());
      
      xPathLexer0.rightParen();
      Token token4 = xPathLexer0.notEquals();
      assertEquals("b[", token4.getTokenText());
      
      Token token5 = xPathLexer0.notEquals();
      assertEquals(22, token5.getTokenType());
      
      Token token6 = xPathLexer0.doubleColon();
      Token token7 = xPathLexer0.rightParen();
      assertEquals("8", token7.getTokenText());
      assertEquals(2, token7.getTokenType());
      
      xPathLexer0.mod();
      token6.toString();
      token6.toString();
      Token token8 = xPathLexer0.dots();
      assertEquals("r", token8.getTokenText());
      
      xPathLexer0.consume();
      String string0 = token6.toString();
      assertEquals("[ (19) (*F)", string0);
      
      xPathLexer0.leftParen();
      xPathLexer0.currentPosition();
      char char0 = xPathLexer0.LA(18);
      assertEquals('\uFFFF', char0);
      
      xPathLexer0.div();
      xPathLexer0.isIdentifierChar('\uFFFF');
      xPathLexer0.setPreviousToken(token6);
      xPathLexer0.getPreviousToken();
      Token token9 = xPathLexer0.literal();
      assertNull(token9);
      
      Token token10 = xPathLexer0.dots();
      assertEquals(13, token10.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('y');
      assertTrue(boolean0);
      
      Token token11 = xPathLexer0.pipe();
      assertEquals(17, token11.getTokenType());
      
      Token token12 = xPathLexer0.star();
      assertEquals(20, token12.getTokenType());
      
      xPathLexer0.or();
      Token token13 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token13.getTokenType());
      
      xPathLexer0.operatorName();
      Token token14 = xPathLexer0.slashes();
      assertEquals(11, token14.getTokenType());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("e'qHk|?^@sU0_'");
      xPathLexer0.nextToken();
      xPathLexer0.star();
      XPathLexer xPathLexer1 = new XPathLexer("e'qHk|?^@sU0_'");
      xPathLexer1.or();
      xPathLexer0.plus();
      XPathLexer xPathLexer2 = new XPathLexer("e'qHk|?^@sU0_'");
      xPathLexer2.whitespace();
      xPathLexer2.at();
      xPathLexer2.mod();
      xPathLexer0.colon();
      XPathLexer xPathLexer3 = new XPathLexer("e'qHk|?^@sU0_'");
      Token token0 = xPathLexer3.identifierOrOperatorName();
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer0.minus();
      Token token1 = xPathLexer4.identifierOrOperatorName();
      xPathLexer2.operatorName();
      xPathLexer3.rightParen();
      xPathLexer1.getPreviousToken();
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer("");
      xPathLexer3.rightParen();
      xPathLexer5.setPreviousToken(token0);
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer0.currentPosition();
      XPathLexer xPathLexer8 = new XPathLexer(".0Z510[R");
      xPathLexer8.nextToken();
      XPathLexer xPathLexer9 = new XPathLexer();
      XPathLexer xPathLexer10 = new XPathLexer();
      XPathLexer xPathLexer11 = new XPathLexer();
      xPathLexer0.currentPosition();
      XPathLexer xPathLexer12 = new XPathLexer();
      XPathLexer xPathLexer13 = new XPathLexer();
      xPathLexer7.mod();
      XPathLexer xPathLexer14 = new XPathLexer();
      Token token2 = xPathLexer4.leftParen();
      assertFalse(token2.equals((Object)token1));
  }
}
