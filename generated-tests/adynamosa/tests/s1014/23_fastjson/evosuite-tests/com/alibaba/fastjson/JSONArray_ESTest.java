/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 22 20:10:28 GMT 2019
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.PascalNameFilter;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializeFilter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.io.SyncFailedException;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.time.ZoneId;
import java.util.Calendar;
import java.util.Collection;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.NavigableSet;
import java.util.Set;
import java.util.Spliterator;
import java.util.TreeMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentSkipListMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.function.Predicate;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONArray_ESTest extends JSONArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONArray0.iterator();
      int int0 = 0;
      JSONArray jSONArray1 = jSONArray0.fluentAddAll(0, (Collection<?>) linkedList0);
      jSONArray1.set(0, jSONArray0);
      int int1 = 3555;
      JSONArray jSONArray2 = new JSONArray(301);
      // Undeclared exception!
      try { 
        jSONArray2.fluentRemove(3555);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3555, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, linkedList0);
      int int0 = 45;
      jSONArray0.getShortValue(45);
      JSONArray jSONArray2 = jSONArray1.fluentAddAll((int) (short)0, (Collection<?>) linkedList0);
      jSONArray1.getBigInteger(45);
      jSONArray2.relatedArray = (Object) jSONArray0;
      linkedList0.add((Object) null);
      jSONArray2.containsAll(linkedList0);
      jSONArray0.getLong(43);
      jSONArray1.getBoolean(240);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSON.toJSON((Object) null);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ParserConfig parserConfig0 = new ParserConfig();
      jSONArray2.set((short)0, (Object) null);
      jSONArray0.fluentRemove((int) (short)0);
      int int1 = 3103;
      // Undeclared exception!
      try { 
        jSONArray2.getSqlDate(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 3089
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<String> class0 = String.class;
      JSON.parseObject((String) null, class0, (Feature[]) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, (Object) null);
      jSONArray1.setRelatedArray(jSONArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSON.toJSON((Object) jSONArray0);
      jSONArray1.retainAll(jSONArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      jSONArray0.getBigDecimal(3089);
      jSONArray0.set(0, jSONArray0);
      jSONArray0.getFloatValue(989);
      JSONArray jSONArray2 = new JSONArray(jSONArray0);
      JSONArray jSONArray3 = jSONArray2.fluentAddAll(2753, (Collection<?>) jSONArray1);
      jSONArray1.getRelatedArray();
      // Undeclared exception!
      jSONArray3.removeAll(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<String> class0 = String.class;
      JSON.parseObject((String) null, class0, (Feature[]) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, (Object) null);
      jSONArray1.setRelatedArray(jSONArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONArray1.getByte(3089);
      TreeMap<Integer, Locale.Category> treeMap0 = new TreeMap<Integer, Locale.Category>();
      jSONArray1.toArray();
      jSONArray1.add((Object) null);
      jSONArray0.getBigInteger(989);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((File) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, linkedList0);
      jSONArray0.getShortValue(45);
      JSONArray jSONArray2 = jSONArray1.fluentAddAll((int) (short)0, (Collection<?>) linkedList0);
      jSONArray1.getBigInteger(45);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-26);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      jSONArray1.fluentAddAll((Collection<?>) jSONArray2);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      Feature feature0 = Feature.UseObjectArray;
      Feature[] featureArray0 = new Feature[8];
      Feature feature1 = Feature.AllowSingleQuotes;
      featureArray0[0] = feature1;
      featureArray0[1] = feature0;
      featureArray0[2] = feature0;
      featureArray0[3] = feature0;
      featureArray0[4] = feature0;
      featureArray0[5] = feature0;
      featureArray0[6] = feature0;
      featureArray0[7] = feature0;
      JSON.parse(byteArray0, featureArray0);
      JSONArray jSONArray3 = new JSONArray(3089);
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue(3089);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(set0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(3571, set0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintStream mockPrintStream0 = new MockPrintStream("/5ism");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      uTF8Decoder0.charset();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte) (-15);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullBooleanAsFalse;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[1] = serializerFeature1;
      JSONArray jSONArray3 = jSONArray0.fluentAddAll((Collection<?>) jSONArray1);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONArray jSONArray4 = jSONArray2.fluentRemove((Object) mockFileInputStream0);
      jSONArray2.getLongValue(3089);
      jSONArray4.fluentClear();
      jSONArray4.addAll((Collection<?>) jSONArray2);
      boolean boolean0 = jSONArray3.remove((Object) mockPrintStream0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(989, linkedList0);
      jSONArray1.getBigInteger(45);
      Object object0 = new Object();
      jSONArray1.remove(989);
      linkedList0.add((Object) null);
      jSONArray0.getLong(43);
      jSONArray1.getBoolean(273);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      try { 
        fileDescriptor0.sync();
        fail("Expecting exception: SyncFailedException");
      
      } catch(SyncFailedException e) {
         //
         // sync failed
         //
         verifyException("java.io.FileDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<String> class0 = String.class;
      JSON.parseObject((String) null, class0, (Feature[]) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, (Object) null);
      jSONArray1.setRelatedArray(jSONArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSON.toJSON((Object) null);
      jSONArray1.retainAll(jSONArray0);
      jSONArray0.getObject(3023, (Type) class0);
      jSONArray0.getBigDecimal(3089);
      int int0 = 3952;
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      jSONArray0.set(0, jSONArray2);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(3952);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3952, Size: 3090
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<String> class0 = String.class;
      Feature[] featureArray0 = null;
      JSON.parseObject((String) null, class0, (Feature[]) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1, (Object) null);
      jSONArray1.fluentSet(2958, class0);
      JSONObject jSONObject0 = new JSONObject(false);
      JSONObject jSONObject1 = new JSONObject((Map<String, Object>) null);
      // Undeclared exception!
      try { 
        jSONArray1.getDate(2958);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.lang.String
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<String> class0 = String.class;
      JSON.parseObject((String) null, class0, (Feature[]) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1, (Object) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte) (-40);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-7);
      byteArray0[6] = (byte) (-12);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONArray1.fluentSet(2958, class0);
      JSONObject jSONObject0 = new JSONObject(false);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONArray1.getDate(2787);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      int int0 = jSONArray0.lastIndexOf((Object) null);
      assertEquals(2959, jSONArray0.size());
      assertEquals(2957, int0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(2487, linkedList0);
      jSONArray0.getShortValue(52);
      JSONArray jSONArray2 = jSONArray1.fluentAddAll((int) (short)0, (Collection<?>) linkedList0);
      jSONArray0.getByte(52);
      LinkedList<JSONArray> linkedList1 = new LinkedList<JSONArray>();
      JSONArray jSONArray3 = jSONArray2.fluentRetainAll(jSONArray1);
      jSONArray3.getJSONObject(52);
      linkedList0.poll();
      jSONArray3.set(3089, jSONArray2);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      jSONArray2.addAll(1193, (Collection<?>) linkedList1);
      jSONArray0.fluentAddAll((Collection<?>) linkedList0);
      JSONArray jSONArray4 = jSONArray0.fluentAdd(1, (Object) jSONArray3);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONArray4.toJavaList(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : [null,{\"$ref\":\"@\"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,{\"$ref\":\"@\"}]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Stream<Object> stream0 = jSONArray0.parallelStream();
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, (Object) null);
      jSONArray1.isEmpty();
      boolean boolean0 = jSONArray1.retainAll(jSONArray0);
      assertEquals(1, jSONArray0.size());
      assertFalse(boolean0);
      
      int int0 = jSONArray1.lastIndexOf(stream0);
      assertEquals(1, jSONArray0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentSet(2818, linkedList0);
      // Undeclared exception!
      try { 
        jSONArray0.getByte(2818);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(2818, linkedList0);
      jSONArray0.getShortValue(45);
      JSONArray jSONArray2 = jSONArray1.fluentAddAll(45, (Collection<?>) linkedList0);
      jSONArray0.getBigInteger(989);
      linkedList0.pollLast();
      jSONArray2.getByteValue(1);
      // Undeclared exception!
      try { 
        jSONArray1.getLong(2818);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      JSONArray jSONArray1 = jSONArray0.fluentSet(176, class0);
      jSONArray0.set(1305, class0);
      JSONArray jSONArray2 = jSONArray0.fluentAddAll((Collection<?>) jSONArray1);
      JSONArray jSONArray3 = new JSONArray(jSONArray2);
      jSONArray0.getJSONArray(2497);
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue(176);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : class java.io.ByteArrayInputStream
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(2818, linkedList0);
      jSONArray0.getShortValue(45);
      JSONArray jSONArray2 = jSONArray1.fluentAddAll((int) (short)0, (Collection<?>) linkedList0);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("@type", hashMap0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.and(predicate1);
      Predicate<Object> predicate4 = predicate3.or(predicate2);
      predicate4.negate();
      jSONArray0.removeIf(predicate1);
      Class<JSONArray> class0 = JSONArray.class;
      Class<Object> class1 = Object.class;
      FieldInfo fieldInfo0 = new FieldInfo("yyyy-MM-dd HH:mm:ss", class0, class1, class1, (Field) null, (-3788), 1059, (-1303));
      Class<JSONArray> class2 = JSONArray.class;
      BeanContext beanContext0 = new BeanContext(class2, fieldInfo0);
      beanContext0.getField();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyString() , anyString());
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>(comparator0);
      treeMap0.put("yyyy-MM-dd HH:mm:ss", (Field) null);
      ParserConfig.getFieldFromCache("gzip", hashMap0);
      jSONArray2.setRelatedArray(predicate1);
      // Undeclared exception!
      try { 
        jSONArray1.toArray((LinkedList<Object>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        jSONArray0.get(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray();
      Feature feature0 = Feature.OrderedField;
      Feature feature1 = Feature.NonStringKeyAsString;
      Feature feature2 = Feature.AllowUnQuotedFieldNames;
      Feature[] featureArray0 = new Feature[6];
      featureArray0[0] = feature1;
      featureArray0[1] = feature2;
      featureArray0[2] = feature1;
      featureArray0[3] = feature0;
      featureArray0[4] = feature0;
      featureArray0[5] = feature1;
      JSONArray jSONArray1 = jSONArray0.fluentSet(614, feature0);
      JSONArray jSONArray2 = jSONArray1.fluentAddAll((Collection<?>) linkedList0);
      ClassLoader.getSystemClassLoader();
      jSONArray2.getJSONArray(0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("4'H7'YyA=hwjuU%m");
      JSONArray jSONArray3 = jSONArray2.fluentRemoveAll(linkedList0);
      jSONArray1.getTimestamp(1);
      // Undeclared exception!
      try { 
        jSONArray3.getTimestamp(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 615
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(set0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(3571, set0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintStream mockPrintStream0 = new MockPrintStream("/5ism");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      uTF8Decoder0.charset();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte) (-15);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullBooleanAsFalse;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[1] = serializerFeature1;
      jSONArray0.fluentAddAll((Collection<?>) jSONArray1);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONArray jSONArray3 = jSONArray2.fluentRemove((Object) mockFileInputStream0);
      jSONArray3.getJSONArray(3089);
      Class<String> class0 = String.class;
      JSON.toJavaObject((JSON) jSONArray0, class0);
      jSONArray1.getByteValue(2353);
      Class<Integer> class1 = Integer.class;
      Class<String> class2 = String.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class2).when(jSONType0).builder();
      Class<?> class3 = JavaBeanInfo.getBuilderClass(class1, jSONType0);
      jSONArray3.getObject(3089, (Type) class3);
      int int0 = jSONArray2.indexOf(set0);
      assertEquals(7144, jSONArray2.size());
      assertEquals(3571, int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(2818, linkedList0);
      jSONArray0.getShortValue(45);
      JSONArray jSONArray2 = jSONArray1.getJSONArray(2818);
      jSONArray0.getByte(45);
      LinkedList<JSONArray> linkedList1 = new LinkedList<JSONArray>();
      JSONArray jSONArray3 = jSONArray2.fluentRetainAll(jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray3.getJSONObject(45);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 45, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = 1613;
      JSONArray jSONArray0 = new JSONArray(1613);
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentAddAll((Collection<?>) jSONArray0);
      Integer[] integerArray0 = new Integer[0];
      jSONArray2.toArray(integerArray0);
      SerializeConfig serializeConfig0 = new SerializeConfig(3089, true);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.SkipTransientField;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNonStringKeyAsString;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteNullNumberAsZero;
      serializerFeatureArray0[2] = serializerFeature2;
      JSON.toJSONBytes((Object) jSONArray0, serializeConfig0, serializerFeatureArray0);
      jSONArray2.contains(jSONArray0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      JSONArray jSONArray3 = jSONArray2.fluentAdd((Object) locale_Category0);
      jSONArray3.lastIndexOf(serializerFeature2);
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(2818, linkedList0);
      jSONArray0.getShortValue(52);
      JSONArray jSONArray2 = jSONArray1.fluentAddAll((int) (short)0, (Collection<?>) linkedList0);
      jSONArray0.getByte(52);
      JSONArray jSONArray3 = jSONArray2.fluentRetainAll(jSONArray1);
      jSONArray3.getJSONObject(52);
      jSONArray0.fluentAdd(57, (Object) jSONArray2);
      MockFile mockFile0 = new MockFile("yyyy-MM-dd HH:mm:ss");
      MockPrintStream mockPrintStream0 = new MockPrintStream("yyyy-MM-dd HH:mm:ss");
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      uTF8Decoder0.charset();
      jSONArray2.getObject(52, (Type) null);
      jSONArray2.getComponentType();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 2820
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(set0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(3571, set0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 3559;
      MockPrintStream mockPrintStream0 = new MockPrintStream("/5ism");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      uTF8Decoder0.charset();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte) (-15);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullBooleanAsFalse;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteNonStringValueAsString;
      serializerFeatureArray0[4] = serializerFeature4;
      jSONArray0.getBoolean((byte)74);
      jSONArray1.getDoubleValue(989);
      int int1 = 144;
      // Undeclared exception!
      try { 
        jSONArray2.getDouble(3571);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : [Asia/Aden, America/Cuiaba, Etc/GMT+9, Etc/GMT+8, Africa/Nairobi, America/Marigot, Asia/Aqtau, Pacific/Kwajalein, America/El_Salvador, Asia/Pontianak, Africa/Cairo, Pacific/Pago_Pago, Africa/Mbabane, Asia/Kuching, Pacific/Honolulu, Pacific/Rarotonga, America/Guatemala, Australia/Hobart, Europe/London, America/Belize, America/Panama, Asia/Chungking, America/Managua, America/Indiana/Petersburg, Asia/Yerevan, Europe/Brussels, GMT, Europe/Warsaw, America/Chicago, Asia/Kashgar, Chile/Continental, Pacific/Yap, CET, Etc/GMT-1, Etc/GMT-0, Europe/Jersey, America/Tegucigalpa, Etc/GMT-5, Europe/Istanbul, America/Eirunepe, Etc/GMT-4, America/Miquelon, Etc/GMT-3, Europe/Luxembourg, Etc/GMT-2, Etc/GMT-9, America/Argentina/Catamarca, Etc/GMT-8, Etc/GMT-7, Etc/GMT-6, Europe/Zaporozhye, Canada/Yukon, Canada/Atlantic, Atlantic/St_Helena, Australia/Tasmania, Libya, Europe/Guernsey, America/Grand_Turk, US/Pacific-New, Asia/Samarkand, America/Argentina/Cordoba, Asia/Phnom_Penh, Africa/Kigali, Asia/Almaty, US/Alaska, Asia/Dubai, Europe/Isle_of_Man, America/Araguaina, Cuba, Asia/Novosibirsk, America/Argentina/Salta, Etc/GMT+3, Africa/Tunis, Etc/GMT+2, Etc/GMT+1, Pacific/Fakaofo, Africa/Tripoli, Etc/GMT+0, Israel, Africa/Banjul, Etc/GMT+7, Indian/Comoro, Etc/GMT+6, Etc/GMT+5, Etc/GMT+4, Pacific/Port_Moresby, US/Arizona, Antarctica/Syowa, Indian/Reunion, Pacific/Palau, Europe/Kaliningrad, America/Montevideo, Africa/Windhoek, Asia/Karachi, Africa/Mogadishu, Australia/Perth, Brazil/East, Etc/GMT, Asia/Chita, Pacific/Easter, Antarctica/Davis, Antarctica/McMurdo, Asia/Macao, America/Manaus, Africa/Freetown, Europe/Bucharest, Asia/Tomsk, America/Argentina/Mendoza, Asia/Macau, Europe/Malta, Mexico/BajaSur, Pacific/Tahiti, Africa/Asmera, Europe/Busingen, America/Argentina/Rio_Gallegos, Africa/Malabo, Europe/Skopje, America/Catamarca, America/Godthab, Europe/Sarajevo, Australia/ACT, GB-Eire, Africa/Lagos, America/Cordoba, Europe/Rome, Asia/Dacca, Indian/Mauritius, Pacific/Samoa, America/Regina, America/Fort_Wayne, America/Dawson_Creek, Africa/Algiers, Europe/Mariehamn, America/St_Johns, America/St_Thomas, Europe/Zurich, America/Anguilla, Asia/Dili, America/Denver, Africa/Bamako, Europe/Saratov, GB, Mexico/General, Pacific/Wallis, Europe/Gibraltar, Africa/Conakry, Africa/Lubumbashi, Asia/Istanbul, America/Havana, NZ-CHAT, Asia/Choibalsan, America/Porto_Acre, Asia/Omsk, Europe/Vaduz, US/Michigan, Asia/Dhaka, America/Barbados, Europe/Tiraspol, Atlantic/Cape_Verde, Asia/Yekaterinburg, America/Louisville, Pacific/Johnston, Pacific/Chatham, Europe/Ljubljana, America/Sao_Paulo, Asia/Jayapura, America/Curacao, Asia/Dushanbe, America/Guyana, America/Guayaquil, America/Martinique, Portugal, Europe/Berlin, Europe/Moscow, Europe/Chisinau, America/Puerto_Rico, America/Rankin_Inlet, Pacific/Ponape, Europe/Stockholm, Europe/Budapest, America/Argentina/Jujuy, Australia/Eucla, Asia/Shanghai, Universal, Europe/Zagreb, America/Port_of_Spain, Europe/Helsinki, Asia/Beirut, Asia/Tel_Aviv, Pacific/Bougainville, US/Central, Africa/Sao_Tome, Indian/Chagos, America/Cayenne, Asia/Yakutsk, Pacific/Galapagos, Australia/North, Europe/Paris, Africa/Ndjamena, Pacific/Fiji, America/Rainy_River, Indian/Maldives, Australia/Yancowinna, SystemV/AST4, Asia/Oral, America/Yellowknife, Pacific/Enderbury, America/Juneau, Australia/Victoria, America/Indiana/Vevay, Asia/Tashkent, Asia/Jakarta, Africa/Ceuta, Asia/Barnaul, America/Recife, America/Buenos_Aires, America/Noronha, America/Swift_Current, Australia/Adelaide, America/Metlakatla, Africa/Djibouti, America/Paramaribo, Europe/Simferopol, Europe/Sofia, Africa/Nouakchott, Europe/Prague, America/Indiana/Vincennes, Antarctica/Mawson, America/Kralendijk, Antarctica/Troll, Europe/Samara, Indian/Christmas, America/Antigua, Pacific/Gambier, America/Indianapolis, America/Inuvik, America/Iqaluit, Pacific/Funafuti, UTC, Antarctica/Macquarie, Canada/Pacific, America/Moncton, Africa/Gaborone, Pacific/Chuuk, Asia/Pyongyang, America/St_Vincent, Asia/Gaza, Etc/Universal, PST8PDT, Atlantic/Faeroe, Asia/Qyzylorda, Canada/Newfoundland, America/Kentucky/Louisville, America/Yakutat, Asia/Ho_Chi_Minh, Antarctica/Casey, Europe/Copenhagen, Africa/Asmara, Atlantic/Azores, Europe/Vienna, ROK, Pacific/Pitcairn, America/Mazatlan, Australia/Queensland, Pacific/Nauru, Europe/Tirane, Asia/Kolkata, SystemV/MST7, Australia/Canberra, MET, Australia/Broken_Hill, Europe/Riga, America/Dominica, Africa/Abidjan, America/Mendoza, America/Santarem, Kwajalein, America/Asuncion, Asia/Ulan_Bator, NZ, America/Boise, Australia/Currie, EST5EDT, Pacific/Guam, Pacific/Wake, Atlantic/Bermuda, America/Costa_Rica, America/Dawson, Asia/Chongqing, Eire, Europe/Amsterdam, America/Indiana/Knox, America/North_Dakota/Beulah, Africa/Accra, Atlantic/Faroe, Mexico/BajaNorte, America/Maceio, Etc/UCT, Pacific/Apia, GMT0, America/Atka, Pacific/Niue, Australia/Lord_Howe, Europe/Dublin, Pacific/Truk, MST7MDT, America/Monterrey, America/Nassau, America/Jamaica, Asia/Bishkek, America/Atikokan, Atlantic/Stanley, Australia/NSW, US/Hawaii, SystemV/CST6, Indian/Mahe, Asia/Aqtobe, America/Sitka, Asia/Vladivostok, Africa/Libreville, Africa/Maputo, Zulu, America/Kentucky/Monticello, Africa/El_Aaiun, Africa/Ouagadougou, America/Coral_Harbour, Pacific/Marquesas, Brazil/West, America/Aruba, America/North_Dakota/Center, America/Cayman, Asia/Ulaanbaatar, Asia/Baghdad, Europe/San_Marino, America/Indiana/Tell_City, America/Tijuana, Pacific/Saipan, SystemV/YST9, Africa/Douala, America/Chihuahua, America/Ojinaga, Asia/Hovd, America/Anchorage, Chile/EasterIsland, America/Halifax, Antarctica/Rothera, America/Indiana/Indianapolis, US/Mountain, Asia/Damascus, America/Argentina/San_Luis, America/Santiago, Asia/Baku, America/Argentina/Ushuaia, Atlantic/Reykjavik, Africa/Brazzaville, Africa/Porto-Novo, America/La_Paz, Antarctica/DumontDUrville, Asia/Taipei, Antarctica/South_Pole, Asia/Manila, Asia/Bangkok, Africa/Dar_es_Salaam, Poland, Atlantic/Madeira, Antarctica/Palmer, America/Thunder_Bay, Africa/Addis_Ababa, Asia/Yangon, Europe/Uzhgorod, Brazil/DeNoronha, Asia/Ashkhabad, Etc/Zulu, America/Indiana/Marengo, America/Creston, America/Punta_Arenas, America/Mexico_City, Antarctica/Vostok, Asia/Jerusalem, Europe/Andorra, US/Samoa, PRC, Asia/Vientiane, Pacific/Kiritimati, America/Matamoros, America/Blanc-Sablon, Asia/Riyadh, Iceland, Pacific/Pohnpei, Asia/Ujung_Pandang, Atlantic/South_Georgia, Europe/Lisbon, Asia/Harbin, Europe/Oslo, Asia/Novokuznetsk, CST6CDT, Atlantic/Canary, America/Knox_IN, Asia/Kuwait, SystemV/HST10, Pacific/Efate, Africa/Lome, America/Bogota, America/Menominee, America/Adak, Pacific/Norfolk, Europe/Kirov, America/Resolute, Pacific/Tarawa, Africa/Kampala, Asia/Krasnoyarsk, Greenwich, SystemV/EST5, America/Edmonton, Europe/Podgorica, Australia/South, Canada/Central, Africa/Bujumbura, America/Santo_Domingo, US/Eastern, Europe/Minsk, Pacific/Auckland, Africa/Casablanca, America/Glace_Bay, Canada/Eastern, Asia/Qatar, Europe/Kiev, Singapore, Asia/Magadan, SystemV/PST8, America/Port-au-Prince, Europe/Belfast, America/St_Barthelemy, Asia/Ashgabat, Africa/Luanda, America/Nipigon, Atlantic/Jan_Mayen, Brazil/Acre, Asia/Muscat, Asia/Bahrain, Europe/Vilnius, America/Fortaleza, Etc/GMT0, US/East-Indiana, America/Hermosillo, America/Cancun, Africa/Maseru, Pacific/Kosrae, Africa/Kinshasa, Asia/Kathmandu, Asia/Seoul, Australia/Sydney, America/Lima, Australia/LHI, America/St_Lucia, Europe/Madrid, America/Bahia_Banderas, America/Montserrat, Asia/Brunei, America/Santa_Isabel, Canada/Mountain, America/Cambridge_Bay, Asia/Colombo, Australia/West, Indian/Antananarivo, Australia/Brisbane, Indian/Mayotte, US/Indiana-Starke, Asia/Urumqi, US/Aleutian, Europe/Volgograd, America/Lower_Princes, America/Vancouver, Africa/Blantyre, America/Rio_Branco, America/Danmarkshavn, America/Detroit, America/Thule, Africa/Lusaka, Asia/Hong_Kong, Iran, America/Argentina/La_Rioja, Africa/Dakar, SystemV/CST6CDT, America/Tortola, America/Porto_Velho, Asia/Sakhalin, Etc/GMT+10, America/Scoresbysund, Asia/Kamchatka, Asia/Thimbu, Africa/Harare, Etc/GMT+12, Etc/GMT+11, Navajo, America/Nome, Europe/Tallinn, Turkey, Africa/Khartoum, Africa/Johannesburg, Africa/Bangui, Europe/Belgrade, Jamaica, Africa/Bissau, Asia/Tehran, WET, Europe/Astrakhan, Africa/Juba, America/Campo_Grande, America/Belem, Etc/Greenwich, Asia/Saigon, America/Ensenada, Pacific/Midway, America/Jujuy, Africa/Timbuktu, America/Bahia, America/Goose_Bay, America/Virgin, America/Pangnirtung, Asia/Katmandu, America/Phoenix, Africa/Niamey, America/Whitehorse, Pacific/Noumea, Asia/Tbilisi, America/Montreal, Asia/Makassar, America/Argentina/San_Juan, Hongkong, UCT, Asia/Nicosia, America/Indiana/Winamac, SystemV/MST7MDT, America/Argentina/ComodRivadavia, America/Boa_Vista, America/Grenada, Asia/Atyrau, Australia/Darwin, Asia/Khandyga, Asia/Kuala_Lumpur, Asia/Famagusta, Asia/Thimphu, Asia/Rangoon, Europe/Bratislava, Asia/Calcutta, America/Argentina/Tucuman, Asia/Kabul, Indian/Cocos, Japan, Pacific/Tongatapu, America/New_York, Etc/GMT-12, Etc/GMT-11, Etc/GMT-10, SystemV/YST9YDT, Europe/Ulyanovsk, Etc/GMT-14, Etc/GMT-13, W-SU, America/Merida, EET, America/Rosario, Canada/Saskatchewan, America/St_Kitts, Arctic/Longyearbyen, America/Fort_Nelson, America/Caracas, America/Guadeloupe, Asia/Hebron, Indian/Kerguelen, SystemV/PST8PDT, Africa/Monrovia, Asia/Ust-Nera, Egypt, Asia/Srednekolymsk, America/North_Dakota/New_Salem, Asia/Anadyr, Australia/Melbourne, Asia/Irkutsk, America/Shiprock, America/Winnipeg, Europe/Vatican, Asia/Amman, Etc/UTC, SystemV/AST4ADT, Asia/Tokyo, America/Toronto, Asia/Singapore, Australia/Lindeman, America/Los_Angeles, SystemV/EST5EDT, Pacific/Majuro, America/Argentina/Buenos_Aires, Europe/Nicosia, Pacific/Guadalcanal, Europe/Athens, US/Pacific, Europe/Monaco]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Stream<Object> stream0 = jSONArray0.stream();
      jSONArray0.fluentSet(6, stream0);
      jSONArray0.set(1, "1.2.46");
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        jSONArray0.toArray(stringArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<String> class0 = String.class;
      JSON.parseObject((String) null, class0, (Feature[]) null);
      jSONArray0.fluentSet(3089, (Object) null);
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.BrowserSecure;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNullBooleanAsFalse;
      serializerFeatureArray0[1] = serializerFeature1;
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      uTF8Decoder0.charset();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte)74;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SerializerFeature serializerFeature2 = SerializerFeature.IgnoreNonFieldGetter;
      LinkedList<ByteArrayInputStream> linkedList0 = new LinkedList<ByteArrayInputStream>();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) linkedList0);
      // Undeclared exception!
      try { 
        jSONArray1.toArray((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(2818, linkedList0);
      jSONArray1.parallelStream();
      JSONArray jSONArray2 = jSONArray1.fluentSet(3089, linkedList0);
      Integer integer0 = new Integer(2778);
      jSONArray1.set(3089, integer0);
      jSONArray1.getFloatValue(2778);
      ConcurrentSkipListMap<InputStream, Object> concurrentSkipListMap0 = new ConcurrentSkipListMap<InputStream, Object>();
      NavigableSet<InputStream> navigableSet0 = concurrentSkipListMap0.keySet();
      jSONArray2.addAll((Collection<?>) navigableSet0);
      assertEquals(3090, jSONArray1.size());
      assertEquals(3090, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 1;
      String string0 = null;
      Class<String> class0 = String.class;
      Feature[] featureArray0 = null;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(0, (Type) class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Stream<Object> stream0 = jSONArray0.parallelStream();
      JSONArray jSONArray1 = jSONArray0.fluentSet(989, stream0);
      jSONArray1.isEmpty();
      jSONArray1.getRelatedArray();
      // Undeclared exception!
      try { 
        jSONArray0.getInteger(989);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.util.stream.ReferencePipeline$Head@17e08c17
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(set0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(3571, set0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintStream mockPrintStream0 = new MockPrintStream("/5ism");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      uTF8Decoder0.charset();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte) (-15);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullBooleanAsFalse;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[1] = serializerFeature1;
      jSONArray0.fluentAddAll((Collection<?>) jSONArray1);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONArray jSONArray3 = jSONArray2.fluentRemove((Object) mockFileInputStream0);
      jSONArray3.getJSONArray(3089);
      jSONArray1.getByteValue(2353);
      Class<Integer> class0 = Integer.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class0, jSONType0);
      jSONArray3.getObject(3089, (Type) null);
      assertEquals(7144, jSONArray2.size());
      assertEquals(7144, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<String> class0 = String.class;
      JSON.parseObject((String) null, class0, (Feature[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray1 = jSONArray0.fluentSet(2817, (Object) null);
      jSONArray0.isEmpty();
      jSONArray0.getFloatValue(1894);
      jSONArray0.size();
      jSONArray0.fluentAddAll((Collection<?>) jSONArray1);
      JSONArray jSONArray2 = new JSONArray();
      jSONArray1.getByteValue(989);
      jSONArray0.getObject(1894, (Type) class0);
      jSONArray0.indexOf((Object) null);
      assertEquals(5636, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Stream<Object> stream0 = jSONArray0.parallelStream();
      jSONArray0.fluentSet(0, stream0);
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : java.util.stream.ReferencePipeline$Head@4ff050c4
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<String> class0 = String.class;
      JSON.parseObject((String) null, class0, (Feature[]) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(2958, class0);
      JSON.setDefaultTypeKey("");
      JSONObject jSONObject0 = new JSONObject(false);
      JSONObject jSONObject1 = new JSONObject((Map<String, Object>) null);
      JSONArray jSONArray2 = jSONArray0.fluentSet(3089, (Object) null);
      jSONArray0.retainAll(jSONArray2);
      jSONArray2.getTimestamp(3089);
      JSONObject jSONObject2 = new JSONObject(2157, false);
      jSONArray1.iterator();
      jSONArray0.getShort(989);
      Class<String> class1 = String.class;
      jSONArray1.toJavaList(class1);
      JSONArray jSONArray3 = jSONArray1.fluentClear();
      int int0 = jSONArray3.indexOf(jSONObject1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(set0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(3571, set0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 3559;
      MockPrintStream mockPrintStream0 = new MockPrintStream("/5ism");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      uTF8Decoder0.charset();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte) (-15);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullBooleanAsFalse;
      serializerFeatureArray0[0] = serializerFeature0;
      jSONArray0.retainAll(jSONArray2);
      jSONArray0.getTimestamp(2814);
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(3571);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : [Asia/Aden, America/Cuiaba, Etc/GMT+9, Etc/GMT+8, Africa/Nairobi, America/Marigot, Asia/Aqtau, Pacific/Kwajalein, America/El_Salvador, Asia/Pontianak, Africa/Cairo, Pacific/Pago_Pago, Africa/Mbabane, Asia/Kuching, Pacific/Honolulu, Pacific/Rarotonga, America/Guatemala, Australia/Hobart, Europe/London, America/Belize, America/Panama, Asia/Chungking, America/Managua, America/Indiana/Petersburg, Asia/Yerevan, Europe/Brussels, GMT, Europe/Warsaw, America/Chicago, Asia/Kashgar, Chile/Continental, Pacific/Yap, CET, Etc/GMT-1, Etc/GMT-0, Europe/Jersey, America/Tegucigalpa, Etc/GMT-5, Europe/Istanbul, America/Eirunepe, Etc/GMT-4, America/Miquelon, Etc/GMT-3, Europe/Luxembourg, Etc/GMT-2, Etc/GMT-9, America/Argentina/Catamarca, Etc/GMT-8, Etc/GMT-7, Etc/GMT-6, Europe/Zaporozhye, Canada/Yukon, Canada/Atlantic, Atlantic/St_Helena, Australia/Tasmania, Libya, Europe/Guernsey, America/Grand_Turk, US/Pacific-New, Asia/Samarkand, America/Argentina/Cordoba, Asia/Phnom_Penh, Africa/Kigali, Asia/Almaty, US/Alaska, Asia/Dubai, Europe/Isle_of_Man, America/Araguaina, Cuba, Asia/Novosibirsk, America/Argentina/Salta, Etc/GMT+3, Africa/Tunis, Etc/GMT+2, Etc/GMT+1, Pacific/Fakaofo, Africa/Tripoli, Etc/GMT+0, Israel, Africa/Banjul, Etc/GMT+7, Indian/Comoro, Etc/GMT+6, Etc/GMT+5, Etc/GMT+4, Pacific/Port_Moresby, US/Arizona, Antarctica/Syowa, Indian/Reunion, Pacific/Palau, Europe/Kaliningrad, America/Montevideo, Africa/Windhoek, Asia/Karachi, Africa/Mogadishu, Australia/Perth, Brazil/East, Etc/GMT, Asia/Chita, Pacific/Easter, Antarctica/Davis, Antarctica/McMurdo, Asia/Macao, America/Manaus, Africa/Freetown, Europe/Bucharest, Asia/Tomsk, America/Argentina/Mendoza, Asia/Macau, Europe/Malta, Mexico/BajaSur, Pacific/Tahiti, Africa/Asmera, Europe/Busingen, America/Argentina/Rio_Gallegos, Africa/Malabo, Europe/Skopje, America/Catamarca, America/Godthab, Europe/Sarajevo, Australia/ACT, GB-Eire, Africa/Lagos, America/Cordoba, Europe/Rome, Asia/Dacca, Indian/Mauritius, Pacific/Samoa, America/Regina, America/Fort_Wayne, America/Dawson_Creek, Africa/Algiers, Europe/Mariehamn, America/St_Johns, America/St_Thomas, Europe/Zurich, America/Anguilla, Asia/Dili, America/Denver, Africa/Bamako, Europe/Saratov, GB, Mexico/General, Pacific/Wallis, Europe/Gibraltar, Africa/Conakry, Africa/Lubumbashi, Asia/Istanbul, America/Havana, NZ-CHAT, Asia/Choibalsan, America/Porto_Acre, Asia/Omsk, Europe/Vaduz, US/Michigan, Asia/Dhaka, America/Barbados, Europe/Tiraspol, Atlantic/Cape_Verde, Asia/Yekaterinburg, America/Louisville, Pacific/Johnston, Pacific/Chatham, Europe/Ljubljana, America/Sao_Paulo, Asia/Jayapura, America/Curacao, Asia/Dushanbe, America/Guyana, America/Guayaquil, America/Martinique, Portugal, Europe/Berlin, Europe/Moscow, Europe/Chisinau, America/Puerto_Rico, America/Rankin_Inlet, Pacific/Ponape, Europe/Stockholm, Europe/Budapest, America/Argentina/Jujuy, Australia/Eucla, Asia/Shanghai, Universal, Europe/Zagreb, America/Port_of_Spain, Europe/Helsinki, Asia/Beirut, Asia/Tel_Aviv, Pacific/Bougainville, US/Central, Africa/Sao_Tome, Indian/Chagos, America/Cayenne, Asia/Yakutsk, Pacific/Galapagos, Australia/North, Europe/Paris, Africa/Ndjamena, Pacific/Fiji, America/Rainy_River, Indian/Maldives, Australia/Yancowinna, SystemV/AST4, Asia/Oral, America/Yellowknife, Pacific/Enderbury, America/Juneau, Australia/Victoria, America/Indiana/Vevay, Asia/Tashkent, Asia/Jakarta, Africa/Ceuta, Asia/Barnaul, America/Recife, America/Buenos_Aires, America/Noronha, America/Swift_Current, Australia/Adelaide, America/Metlakatla, Africa/Djibouti, America/Paramaribo, Europe/Simferopol, Europe/Sofia, Africa/Nouakchott, Europe/Prague, America/Indiana/Vincennes, Antarctica/Mawson, America/Kralendijk, Antarctica/Troll, Europe/Samara, Indian/Christmas, America/Antigua, Pacific/Gambier, America/Indianapolis, America/Inuvik, America/Iqaluit, Pacific/Funafuti, UTC, Antarctica/Macquarie, Canada/Pacific, America/Moncton, Africa/Gaborone, Pacific/Chuuk, Asia/Pyongyang, America/St_Vincent, Asia/Gaza, Etc/Universal, PST8PDT, Atlantic/Faeroe, Asia/Qyzylorda, Canada/Newfoundland, America/Kentucky/Louisville, America/Yakutat, Asia/Ho_Chi_Minh, Antarctica/Casey, Europe/Copenhagen, Africa/Asmara, Atlantic/Azores, Europe/Vienna, ROK, Pacific/Pitcairn, America/Mazatlan, Australia/Queensland, Pacific/Nauru, Europe/Tirane, Asia/Kolkata, SystemV/MST7, Australia/Canberra, MET, Australia/Broken_Hill, Europe/Riga, America/Dominica, Africa/Abidjan, America/Mendoza, America/Santarem, Kwajalein, America/Asuncion, Asia/Ulan_Bator, NZ, America/Boise, Australia/Currie, EST5EDT, Pacific/Guam, Pacific/Wake, Atlantic/Bermuda, America/Costa_Rica, America/Dawson, Asia/Chongqing, Eire, Europe/Amsterdam, America/Indiana/Knox, America/North_Dakota/Beulah, Africa/Accra, Atlantic/Faroe, Mexico/BajaNorte, America/Maceio, Etc/UCT, Pacific/Apia, GMT0, America/Atka, Pacific/Niue, Australia/Lord_Howe, Europe/Dublin, Pacific/Truk, MST7MDT, America/Monterrey, America/Nassau, America/Jamaica, Asia/Bishkek, America/Atikokan, Atlantic/Stanley, Australia/NSW, US/Hawaii, SystemV/CST6, Indian/Mahe, Asia/Aqtobe, America/Sitka, Asia/Vladivostok, Africa/Libreville, Africa/Maputo, Zulu, America/Kentucky/Monticello, Africa/El_Aaiun, Africa/Ouagadougou, America/Coral_Harbour, Pacific/Marquesas, Brazil/West, America/Aruba, America/North_Dakota/Center, America/Cayman, Asia/Ulaanbaatar, Asia/Baghdad, Europe/San_Marino, America/Indiana/Tell_City, America/Tijuana, Pacific/Saipan, SystemV/YST9, Africa/Douala, America/Chihuahua, America/Ojinaga, Asia/Hovd, America/Anchorage, Chile/EasterIsland, America/Halifax, Antarctica/Rothera, America/Indiana/Indianapolis, US/Mountain, Asia/Damascus, America/Argentina/San_Luis, America/Santiago, Asia/Baku, America/Argentina/Ushuaia, Atlantic/Reykjavik, Africa/Brazzaville, Africa/Porto-Novo, America/La_Paz, Antarctica/DumontDUrville, Asia/Taipei, Antarctica/South_Pole, Asia/Manila, Asia/Bangkok, Africa/Dar_es_Salaam, Poland, Atlantic/Madeira, Antarctica/Palmer, America/Thunder_Bay, Africa/Addis_Ababa, Asia/Yangon, Europe/Uzhgorod, Brazil/DeNoronha, Asia/Ashkhabad, Etc/Zulu, America/Indiana/Marengo, America/Creston, America/Punta_Arenas, America/Mexico_City, Antarctica/Vostok, Asia/Jerusalem, Europe/Andorra, US/Samoa, PRC, Asia/Vientiane, Pacific/Kiritimati, America/Matamoros, America/Blanc-Sablon, Asia/Riyadh, Iceland, Pacific/Pohnpei, Asia/Ujung_Pandang, Atlantic/South_Georgia, Europe/Lisbon, Asia/Harbin, Europe/Oslo, Asia/Novokuznetsk, CST6CDT, Atlantic/Canary, America/Knox_IN, Asia/Kuwait, SystemV/HST10, Pacific/Efate, Africa/Lome, America/Bogota, America/Menominee, America/Adak, Pacific/Norfolk, Europe/Kirov, America/Resolute, Pacific/Tarawa, Africa/Kampala, Asia/Krasnoyarsk, Greenwich, SystemV/EST5, America/Edmonton, Europe/Podgorica, Australia/South, Canada/Central, Africa/Bujumbura, America/Santo_Domingo, US/Eastern, Europe/Minsk, Pacific/Auckland, Africa/Casablanca, America/Glace_Bay, Canada/Eastern, Asia/Qatar, Europe/Kiev, Singapore, Asia/Magadan, SystemV/PST8, America/Port-au-Prince, Europe/Belfast, America/St_Barthelemy, Asia/Ashgabat, Africa/Luanda, America/Nipigon, Atlantic/Jan_Mayen, Brazil/Acre, Asia/Muscat, Asia/Bahrain, Europe/Vilnius, America/Fortaleza, Etc/GMT0, US/East-Indiana, America/Hermosillo, America/Cancun, Africa/Maseru, Pacific/Kosrae, Africa/Kinshasa, Asia/Kathmandu, Asia/Seoul, Australia/Sydney, America/Lima, Australia/LHI, America/St_Lucia, Europe/Madrid, America/Bahia_Banderas, America/Montserrat, Asia/Brunei, America/Santa_Isabel, Canada/Mountain, America/Cambridge_Bay, Asia/Colombo, Australia/West, Indian/Antananarivo, Australia/Brisbane, Indian/Mayotte, US/Indiana-Starke, Asia/Urumqi, US/Aleutian, Europe/Volgograd, America/Lower_Princes, America/Vancouver, Africa/Blantyre, America/Rio_Branco, America/Danmarkshavn, America/Detroit, America/Thule, Africa/Lusaka, Asia/Hong_Kong, Iran, America/Argentina/La_Rioja, Africa/Dakar, SystemV/CST6CDT, America/Tortola, America/Porto_Velho, Asia/Sakhalin, Etc/GMT+10, America/Scoresbysund, Asia/Kamchatka, Asia/Thimbu, Africa/Harare, Etc/GMT+12, Etc/GMT+11, Navajo, America/Nome, Europe/Tallinn, Turkey, Africa/Khartoum, Africa/Johannesburg, Africa/Bangui, Europe/Belgrade, Jamaica, Africa/Bissau, Asia/Tehran, WET, Europe/Astrakhan, Africa/Juba, America/Campo_Grande, America/Belem, Etc/Greenwich, Asia/Saigon, America/Ensenada, Pacific/Midway, America/Jujuy, Africa/Timbuktu, America/Bahia, America/Goose_Bay, America/Virgin, America/Pangnirtung, Asia/Katmandu, America/Phoenix, Africa/Niamey, America/Whitehorse, Pacific/Noumea, Asia/Tbilisi, America/Montreal, Asia/Makassar, America/Argentina/San_Juan, Hongkong, UCT, Asia/Nicosia, America/Indiana/Winamac, SystemV/MST7MDT, America/Argentina/ComodRivadavia, America/Boa_Vista, America/Grenada, Asia/Atyrau, Australia/Darwin, Asia/Khandyga, Asia/Kuala_Lumpur, Asia/Famagusta, Asia/Thimphu, Asia/Rangoon, Europe/Bratislava, Asia/Calcutta, America/Argentina/Tucuman, Asia/Kabul, Indian/Cocos, Japan, Pacific/Tongatapu, America/New_York, Etc/GMT-12, Etc/GMT-11, Etc/GMT-10, SystemV/YST9YDT, Europe/Ulyanovsk, Etc/GMT-14, Etc/GMT-13, W-SU, America/Merida, EET, America/Rosario, Canada/Saskatchewan, America/St_Kitts, Arctic/Longyearbyen, America/Fort_Nelson, America/Caracas, America/Guadeloupe, Asia/Hebron, Indian/Kerguelen, SystemV/PST8PDT, Africa/Monrovia, Asia/Ust-Nera, Egypt, Asia/Srednekolymsk, America/North_Dakota/New_Salem, Asia/Anadyr, Australia/Melbourne, Asia/Irkutsk, America/Shiprock, America/Winnipeg, Europe/Vatican, Asia/Amman, Etc/UTC, SystemV/AST4ADT, Asia/Tokyo, America/Toronto, Asia/Singapore, Australia/Lindeman, America/Los_Angeles, SystemV/EST5EDT, Pacific/Majuro, America/Argentina/Buenos_Aires, Europe/Nicosia, Pacific/Guadalcanal, Europe/Athens, US/Pacific, Europe/Monaco]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(2818, linkedList0);
      jSONArray0.getShortValue(45);
      JSONArray jSONArray2 = jSONArray1.fluentAddAll((int) (short)0, (Collection<?>) linkedList0);
      jSONArray0.getByte(45);
      LinkedList<JSONArray> linkedList1 = new LinkedList<JSONArray>();
      jSONArray2.getSqlDate(989);
      jSONArray2.add((Object) "([C)Ljava/math/BigInteger;");
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>(42);
      ParserConfig.getFieldFromCache("1.2.46", hashMap0);
      JSON.toJSON((Object) null);
      jSONArray1.retainAll(linkedList0);
      // Undeclared exception!
      try { 
        jSONArray0.getFloat(138);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 138, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<String> class0 = String.class;
      JSON.parseObject((String) null, class0, (Feature[]) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, (Object) null);
      jSONArray1.retainAll(jSONArray0);
      jSONArray0.getTimestamp(3089);
      JSONObject[] jSONObjectArray0 = new JSONObject[3];
      JSONObject jSONObject0 = new JSONObject();
      jSONObjectArray0[0] = jSONObject0;
      char[] charArray0 = new char[7];
      charArray0[0] = '>';
      JSONArray jSONArray2 = jSONArray1.fluentAdd(3089, (Object) null);
      jSONArray2.fluentAdd((Object) null);
      jSONArray2.getFloat(3089);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSON.setDefaultTypeKey("");
      JSON.toJSON((Object) jSONArray1, parserConfig0);
      Class<JSONObject> class1 = JSONObject.class;
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("_asm_ser_", concurrentHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("fastjson.parser.autoTypeSupport", class1, class1, class0, (Field) null, 0, 3089, 48);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getField();
      jSONArray1.contains((Object) null);
      jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray1.getShortValue(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSON.DEFAULT_TYPE_KEY;
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, "@type");
      jSONArray1.isEmpty();
      Class<String> class0 = String.class;
      jSONArray1.getObject(3089, class0);
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp(3089);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : @type
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSON.DEFAULT_TYPE_KEY;
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, "@type");
      jSONArray1.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp(3089);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : @type
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-651);
      jSONArray0.spliterator();
      // Undeclared exception!
      try { 
        jSONArray0.add((-651), (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -651, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<String> class0 = String.class;
      JSON.parseObject((String) null, class0, (Feature[]) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, (Object) null);
      jSONArray1.retainAll(jSONArray0);
      jSONArray0.getTimestamp(3089);
      JSONObject[] jSONObjectArray0 = new JSONObject[3];
      JSONObject jSONObject0 = new JSONObject();
      jSONObjectArray0[0] = jSONObject0;
      char[] charArray0 = new char[7];
      charArray0[0] = '>';
      JSONArray jSONArray2 = jSONArray1.fluentAdd(3089, (Object) null);
      jSONArray2.fluentAdd((Object) null);
      jSONArray2.getFloat(3089);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Object object0 = JSON.toJSON((Object) jSONArray1, parserConfig0);
      boolean boolean0 = jSONArray2.contains(object0);
      assertEquals(3092, jSONArray2.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 1;
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        JSON.parseObject("@type", class0, (Feature[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 0, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSON.DEFAULT_TYPE_KEY;
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, "@type");
      jSONArray1.retainAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp(3089);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : @type
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<String> class0 = String.class;
      JSON.parseObject((String) null, class0, (Feature[]) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(2817, (Object) null);
      jSONArray0.isEmpty();
      jSONArray0.fluentRemove(1894);
      // Undeclared exception!
      try { 
        jSONArray1.fluentAddAll(3089, (Collection<?>) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 2817
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<String> class0 = String.class;
      JSON.parseObject((String) null, class0, (Feature[]) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1, (Object) null);
      jSONArray1.fluentSet(3600, (Object) null);
      JSONObject jSONObject0 = new JSONObject(false);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(989, jSONObject1);
      LinkedHashSet<DataInputStream> linkedHashSet0 = new LinkedHashSet<DataInputStream>();
      jSONArray2.retainAll(linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSON.DEFAULT_TYPE_KEY;
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, "@type");
      jSONArray1.retainAll(jSONArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp(3089);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : @type
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<String> class0 = String.class;
      JSON.parseObject((String) null, class0, (Feature[]) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(2817, (Object) null);
      jSONArray0.isEmpty();
      jSONArray0.getFloatValue(1894);
      jSONArray0.size();
      jSONArray0.fluentAddAll((Collection<?>) jSONArray1);
      jSONArray1.getJSONArray(2805);
      assertEquals(5636, jSONArray1.size());
      
      jSONArray1.getByteValue(989);
      jSONArray0.get(989);
      jSONArray0.getObject(1894, (Type) class0);
      assertEquals(5636, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 1;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/performance/Dataset/gordon_scripts/projects/23_fastjson");
      FileSystemHandling.createFolder(evoSuiteFile0);
      String string0 = null;
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        JSON.parseObject("@type", class0, (Feature[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 0, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<String> class0 = String.class;
      JSON.parseObject((String) null, class0, (Feature[]) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, (Object) null);
      jSONArray1.setRelatedArray(jSONArray0);
      JSON.toJSON((Object) null);
      jSONArray1.retainAll(jSONArray0);
      jSONArray0.getObject(3023, (Type) class0);
      jSONArray0.getBigDecimal(3089);
      int int0 = 3952;
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(3952);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3952, Size: 3090
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Stream<Object> stream0 = jSONArray0.parallelStream();
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, stream0);
      Integer integer0 = new Integer(0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(3089, integer0);
      Class<DataInputStream> class0 = DataInputStream.class;
      // Undeclared exception!
      try { 
        jSONArray2.getObject(3089, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.io.DataInputStream
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<String> class0 = String.class;
      JSON.parseObject((String) null, class0, (Feature[]) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, (Object) null);
      jSONArray1.retainAll(jSONArray0);
      jSONArray0.getTimestamp(3089);
      JSONObject[] jSONObjectArray0 = new JSONObject[3];
      JSONObject jSONObject0 = new JSONObject();
      jSONObjectArray0[0] = jSONObject0;
      char[] charArray0 = new char[7];
      charArray0[0] = '>';
      jSONArray1.getJSONObject(3089);
      jSONArray0.getDate(2137);
      assertEquals(3090, jSONArray0.size());
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      jSONArray0.add(3089, (Object) dataInputStream0);
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal(3089);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSON.DEFAULT_TYPE_KEY;
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, "@type");
      jSONArray1.remove(989);
      jSONArray1.retainAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 3089
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = null;
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        JSON.parseObject("@type", class0, (Feature[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 0, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<String> class0 = String.class;
      JSON.parseObject((String) null, class0, (Feature[]) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, (Object) null);
      jSONArray1.retainAll(jSONArray0);
      jSONArray0.getObject(3023, (Type) class0);
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal((-1204));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<String> class0 = String.class;
      JSON.parseObject((String) null, class0, (Feature[]) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, (Object) null);
      JSONArray jSONArray2 = new JSONArray();
      jSONArray2.isEmpty();
      jSONArray0.getByteValue(989);
      JSONArray jSONArray3 = jSONArray2.fluentClear();
      JSONArray jSONArray4 = jSONArray3.fluentAddAll((Collection<?>) jSONArray1);
      jSONArray0.setRelatedArray(jSONArray4);
      jSONArray1.removeAll(jSONArray4);
      jSONArray4.getFloat((byte)0);
      assertEquals(3090, jSONArray3.size());
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<String> class0 = String.class;
      JSON.parseObject((String) null, class0, (Feature[]) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, (Object) null);
      jSONArray1.retainAll(jSONArray0);
      Class<JSONObject> class1 = JSONObject.class;
      jSONArray0.toJavaList(class1);
      jSONArray1.fluentSet(989, jSONArray0);
      jSONArray1.isEmpty();
      // Undeclared exception!
      jSONArray1.getShortValue(989);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.parallelStream();
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<String> class0 = String.class;
      JSON.parseObject((String) null, class0, (Feature[]) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, (Object) null);
      jSONArray1.retainAll(jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentAdd(57, (Object) null);
      JSONArray jSONArray3 = jSONArray0.fluentRetainAll(jSONArray2);
      jSONArray0.getShort(3089);
      jSONArray3.getFloat(1884);
      jSONArray3.addAll(3089, (Collection<?>) jSONArray0);
      JSONArray jSONArray4 = jSONArray1.fluentAddAll((Collection<?>) jSONArray2);
      jSONArray4.getRelatedArray();
      jSONArray0.getInteger(57);
      assertEquals(12364, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<String> class0 = String.class;
      JSON.parseObject((String) null, class0, (Feature[]) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1, (Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentSet(3089, (Object) null);
      jSONArray2.retainAll(jSONArray0);
      jSONArray0.getTimestamp(3089);
      JSONObject[] jSONObjectArray0 = new JSONObject[3];
      JSONObject jSONObject0 = new JSONObject();
      jSONObjectArray0[0] = jSONObject0;
      JSONArray jSONArray3 = new JSONArray();
      JSONArray jSONArray4 = jSONArray2.fluentRetainAll(jSONArray0);
      jSONArray1.containsAll(jSONArray2);
      jSONArray2.set(3089, jSONArray1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSONArray3.sort(comparator0);
      JSONArray jSONArray5 = jSONArray4.fluentRetainAll(jSONArray0);
      jSONArray5.getJSONObject(63);
      jSONArray5.getString(3089);
      // Undeclared exception!
      try { 
        jSONArray4.getShortValue(5163);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5163, Size: 3090
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<String> class0 = String.class;
      JSON.parseObject((String) null, class0, (Feature[]) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, (Object) null);
      jSONArray1.retainAll(jSONArray0);
      jSONArray0.getTimestamp(3089);
      JSONObject[] jSONObjectArray0 = new JSONObject[3];
      JSONObject jSONObject0 = new JSONObject(3089, false);
      Class<String> class1 = String.class;
      jSONObject0.getObject("PqX<;yg.89hyroF(", class1);
      jSONObjectArray0[0] = jSONObject0;
      jSONArray0.getString(3089);
      jSONArray1.getLong(1303);
      assertEquals(3090, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<String> class0 = String.class;
      JSON.parseObject((String) null, class0, (Feature[]) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, (Object) null);
      jSONArray1.retainAll(jSONArray0);
      jSONArray0.getTimestamp(3089);
      JSONObject[] jSONObjectArray0 = new JSONObject[3];
      JSONObject jSONObject0 = new JSONObject();
      jSONObjectArray0[0] = jSONObject0;
      char[] charArray0 = new char[7];
      charArray0[0] = '>';
      jSONArray1.getJSONObject(3089);
      jSONArray0.getDate(2137);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      jSONArray1.add(989, (Object) mockFileInputStream0);
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal((-268));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSON.DEFAULT_TYPE_KEY;
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, "@type");
      jSONArray1.retainAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp(3089);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : @type
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "yyyy-MM-dd HH:mm:ss");
      Set<String> set0 = jSONArray0.defaultLocale.getUnicodeLocaleAttributes();
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("[short", hashMap0);
      Integer integer0 = new Integer(243);
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) set0);
      jSONArray1.set(243, hashMap0);
      jSONArray1.parallelStream();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        jSONArray1.getBooleanValue(243);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "yyyy-MM-dd HH:mm:ss");
      Set<String> set0 = jSONArray0.defaultLocale.getUnicodeLocaleAttributes();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(set0);
      jSONArray1.fluentSet(989, set0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[8];
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.SortField;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteDateUseDateFormat;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteNullNumberAsZero;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.BrowserCompatible;
      serializerFeatureArray0[5] = serializerFeature5;
      SerializerFeature serializerFeature6 = SerializerFeature.NotWriteDefaultValue;
      serializerFeatureArray0[6] = serializerFeature6;
      SerializerFeature serializerFeature7 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[7] = serializerFeature7;
      JSON.toJSONStringZ(linkedList0, serializeConfig0, serializerFeatureArray0);
      JSONArray jSONArray2 = new JSONArray();
      JSONArray jSONArray3 = jSONArray2.fluentClear();
      boolean boolean0 = jSONArray3.containsAll(jSONArray1);
      assertEquals(990, jSONArray1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, "1.2.46");
      jSONArray1.retainAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp(3089);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : 1.2.46
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<String> class0 = String.class;
      JSON.parseObject((String) null, class0, (Feature[]) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, (Object) null);
      jSONArray1.retainAll(jSONArray0);
      jSONArray0.getTimestamp(3089);
      JSONObject[] jSONObjectArray0 = new JSONObject[3];
      JSONObject jSONObject0 = new JSONObject(3089, false);
      jSONObjectArray0[0] = jSONObject0;
      jSONArray1.getDoubleValue(3089);
      jSONArray0.getString(3089);
      assertEquals(3090, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<String> class0 = String.class;
      JSON.parseObject((String) null, class0, (Feature[]) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1, (Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentSet(3089, (Object) null);
      jSONArray2.retainAll(jSONArray0);
      jSONArray0.getTimestamp(3089);
      JSONObject[] jSONObjectArray0 = new JSONObject[3];
      JSONObject jSONObject0 = new JSONObject();
      jSONObjectArray0[0] = jSONObject0;
      char[] charArray0 = new char[7];
      charArray0[0] = '>';
      charArray0[1] = 'g';
      charArray0[2] = 'g';
      charArray0[3] = '!';
      jSONArray0.getBigDecimal(989);
      long long0 = jSONArray2.getLongValue(3072);
      assertEquals(3090, jSONArray0.size());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<String> class0 = String.class;
      JSON.parseObject((String) null, class0, (Feature[]) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1, (Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentSet(3089, (Object) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "yyyy-MM-dd HH:mm:ss");
      jSONArray2.retainAll(jSONArray0);
      jSONArray0.getTimestamp(3089);
      JSONObject[] jSONObjectArray0 = new JSONObject[3];
      JSONObject jSONObject0 = new JSONObject();
      jSONObjectArray0[0] = jSONObject0;
      jSONArray0.getSqlDate(3089);
      Class<InputStream> class1 = InputStream.class;
      jSONArray1.toJavaList(class1);
      Class<String> class2 = String.class;
      // Undeclared exception!
      try { 
        JSON.parseArray("WriteNonStringValueAsString", class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : WriteNonStringValueAsString
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<String> class0 = String.class;
      JSON.parseObject((String) null, class0, (Feature[]) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, (Object) null);
      jSONArray1.retainAll(jSONArray0);
      jSONArray0.getTimestamp(3089);
      JSONObject[] jSONObjectArray0 = new JSONObject[3];
      JSONObject jSONObject0 = new JSONObject();
      jSONObjectArray0[0] = jSONObject0;
      char[] charArray0 = new char[7];
      charArray0[0] = '>';
      JSONArray jSONArray2 = jSONArray1.fluentAdd(3089, (Object) null);
      jSONArray2.getFloat(3089);
      assertEquals(3091, jSONArray1.size());
      assertEquals(3091, jSONArray0.size());
      
      jSONArray1.addAll(989, (Collection<?>) jSONArray0);
      jSONArray0.getRelatedArray();
      assertEquals(6182, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<String> class0 = String.class;
      JSON.parseObject((String) null, class0, (Feature[]) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1, (Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentSet(3089, (Object) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "yyyy-MM-dd HH:mm:ss");
      jSONArray2.retainAll(jSONArray0);
      jSONArray0.getTimestamp(3089);
      JSONObject[] jSONObjectArray0 = new JSONObject[3];
      JSONObject jSONObject0 = new JSONObject();
      jSONObjectArray0[0] = jSONObject0;
      char[] charArray0 = new char[7];
      charArray0[0] = '>';
      charArray0[1] = 'g';
      charArray0[2] = '(';
      charArray0[3] = '!';
      jSONArray0.getBigDecimal(989);
      // Undeclared exception!
      try { 
        jSONArray2.getSqlDate((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "yyyy-MM-dd HH:mm:ss");
      Set<String> set0 = jSONArray0.defaultLocale.getUnicodeLocaleAttributes();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(set0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(989, set0);
      JSON.defaultLocale = jSONArray2.defaultLocale;
      Class<DataInputStream> class0 = DataInputStream.class;
      jSONArray2.getObject(68, class0);
      // Undeclared exception!
      try { 
        jSONArray1.getLong((-214748364));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(2818, linkedList0);
      jSONArray0.getShortValue(45);
      JSONArray jSONArray2 = jSONArray1.fluentAddAll((int) (short)0, (Collection<?>) linkedList0);
      jSONArray1.getBigInteger(45);
      jSONArray2.getSqlDate(45);
      Class<InputStream> class0 = InputStream.class;
      // Undeclared exception!
      try { 
        jSONArray0.toJavaList(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.io.InputStream
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 2818;
      JSONArray jSONArray1 = jSONArray0.fluentSet(2818, linkedList0);
      jSONArray0.getShortValue(45);
      JSONArray jSONArray2 = jSONArray1.fluentAddAll((int) (short)0, (Collection<?>) linkedList0);
      jSONArray1.getBigInteger(45);
      jSONArray2.toJSONString();
      // Undeclared exception!
      try { 
        jSONArray0.subList(3089, (-2640));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(3089) > toIndex(-2640)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("cm.al2baba.fastjson.JSONArray", treeMap0);
      jSONArray0.set(101, (Object) null);
      jSONArray0.getBooleanValue(101);
      jSONArray0.listIterator();
      jSONArray0.getBoolean(101);
      assertEquals(102, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<String> class0 = String.class;
      JSON.parseObject((String) null, class0, (Feature[]) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, (Object) null);
      jSONArray1.retainAll(jSONArray0);
      jSONArray0.getTimestamp(3089);
      JSONObject[] jSONObjectArray0 = new JSONObject[3];
      JSONObject jSONObject0 = new JSONObject();
      jSONObjectArray0[0] = jSONObject0;
      char[] charArray0 = new char[7];
      charArray0[0] = '>';
      jSONArray0.getJSONArray(1857);
      // Undeclared exception!
      try { 
        jSONArray1.fluentRemoveAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(2818, linkedList0);
      int int0 = 4760;
      // Undeclared exception!
      try { 
        jSONArray1.getJSONObject(2818);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.JSONArray cannot be cast to com.alibaba.fastjson.JSONObject
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.add(101, (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 101, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentClear();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      jSONArray0.setComponentType((Type) null);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("com.alibaba.fastjson.JSONArray", treeMap0);
      jSONArray0.set(101, (Object) null);
      boolean boolean0 = jSONArray0.getBooleanValue(101);
      assertEquals(102, jSONArray0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDouble(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject((-2412), class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.add(3663, (Object) "@type");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3663, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray[] jSONArrayArray0 = new JSONArray[3];
      jSONArrayArray0[0] = jSONArray0;
      jSONArrayArray0[1] = jSONArray0;
      jSONArrayArray0[2] = jSONArray0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONArray0.toArray(jSONArrayArray0);
      jSONArray0.getComponentType();
      // Undeclared exception!
      try { 
        jSONArray0.getObject((-1011), (Type) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("com.alibaba.fastjson.JSONArray", treeMap0);
      jSONArray0.set(101, (Object) null);
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(55232);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 55232, Size: 102
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.addAll(857, (Collection<?>) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 857, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      SerializeConfig serializeConfig0 = new SerializeConfig(989);
      jSONArray1.lastIndexOf((Object) null);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingName;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[4] = serializerFeature4;
      JSON.toJSONString((Object) jSONArray0, serializeConfig0, (SerializeFilter) null, serializerFeatureArray0);
      jSONArray0.getComponentType();
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = jSONArray0.indexOf((Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "build object error";
      stringArray0[1] = "com.alibaba.fastjson.JSONArray";
      stringArray0[2] = "Dv0x!0j9.z/rQ";
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      List<Object> list0 = javaBeanSerializer0.getFieldValues("Dv0x!0j9.z/rQ");
      JSONArray jSONArray0 = new JSONArray(list0);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) "w3oEttc:dBbm/K$6^");
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(list0);
      JSONArray jSONArray3 = jSONArray2.fluentAdd(0, (Object) "Dv0x!0j9.z/rQ");
      JSONArray jSONArray4 = jSONArray3.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray4.subList((-12), 989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -12
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          JSONArray jSONArray0 = new JSONArray();
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          byte[] byteArray0 = new byte[1];
          byteArray0[0] = (byte) (-47);
          ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1443168256, 1443168256);
          DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
          jSONArray0.set(1247, dataInputStream0);
          MockFileWriter mockFileWriter0 = null;
          try {
            mockFileWriter0 = new MockFileWriter(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // java.io.FileWriter.<init>(FileWriter.java:116)
             // org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
             // sun.reflect.GeneratedConstructorAccessor128.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:233)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.remove((-563));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getString(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1231);
      ConcurrentSkipListMap<JSONObject, DataInputStream> concurrentSkipListMap0 = new ConcurrentSkipListMap<JSONObject, DataInputStream>();
      Collection<DataInputStream> collection0 = concurrentSkipListMap0.values();
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll(1231, collection0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1231, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      Class<String> class0 = String.class;
      JSON.parseObject((String) null, class0);
      jSONArray0.remove((Object) null);
      boolean boolean0 = jSONArray0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<MockFileInputStream> class0 = MockFileInputStream.class;
      Class<String> class1 = String.class;
      Class<JSONArray> class2 = JSONArray.class;
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("com.alibaba.fastjson.JSONArray", concurrentHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("U-+^sCEC[^A", class1, class2, class1, (Field) null, 6044, (-123008), 3089);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      Type type0 = beanContext0.getFieldType();
      // Undeclared exception!
      try { 
        jSONArray0.getObject(2213, type0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2213, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      Class<Annotation> class0 = Annotation.class;
      List<Annotation> list0 = jSONArray0.toJavaList(class0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll(144, (Collection<?>) list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 144, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<String> class0 = String.class;
      JSON.parseObject((String) null, class0, (Feature[]) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1, (Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentSet(3089, (Object) null);
      jSONArray2.retainAll(jSONArray0);
      jSONArray0.getTimestamp(3089);
      JSONObject[] jSONObjectArray0 = new JSONObject[3];
      JSONObject jSONObject0 = new JSONObject();
      jSONObjectArray0[0] = jSONObject0;
      char[] charArray0 = new char[7];
      charArray0[0] = 'G';
      charArray0[1] = 'g';
      charArray0[2] = '(';
      charArray0[3] = '!';
      charArray0[4] = '*';
      charArray0[5] = ';';
      charArray0[6] = ']';
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser(charArray0, (-1522), parserConfig0, 3089);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer((-2620));
      JSONArray jSONArray1 = jSONArray0.fluentAdd(0, (Object) integer0);
      jSONArray0.setRelatedArray(jSONArray1);
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) integer0);
      assertFalse(jSONArray2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean1 = jSONArray0.add((Object) null);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue((-2301));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue(1213);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1213, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.fluentRetainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONArray0.iterator();
      MockDate mockDate0 = new MockDate(0, 3089, 0);
      // Undeclared exception!
      try { 
        jSONArray0.getByte(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[1];
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      serializeFilterArray0[0] = (SerializeFilter) pascalNameFilter0;
      // Undeclared exception!
      try { 
        jSONArray0.get((-298));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<MockFileInputStream> class0 = MockFileInputStream.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(2802, class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2802, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      JSONArray jSONArray1 = jSONArray0.fluentAdd(object0);
      // Undeclared exception!
      try { 
        jSONArray1.getDouble(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getLong(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getFloat(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JSONArray jSONArray0 = new JSONArray();
      int int0 = jSONArray0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.add((Object) "@type");
      // Undeclared exception!
      try { 
        jSONArray0.getShort(0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"@type\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clone();
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate(3040);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3040, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(3089);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject((-1), class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      Class<String> class0 = String.class;
      FieldInfo fieldInfo0 = new FieldInfo("", class0, class0, class0, (Field) null, (-3788), 3089, 3062);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getField();
      treeMap0.put("@type", (Field) null);
      ParserConfig.getFieldFromCache("yyyy-MM-dd HH:mm:ss", treeMap0);
      jSONArray0.setRelatedArray((Object) null);
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.hashCode();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getFloat((-775));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getShort(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "@type");
      jSONArray0.addAll((Collection<?>) jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue(1106);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1106, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.listIterator((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue((-1333));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONArray0.iterator();
      int int0 = 0;
      // Undeclared exception!
      try { 
        jSONArray0.getDate(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSONArray0.sort(comparator0);
      // Undeclared exception!
      try { 
        jSONArray0.getDate((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        jSONArray0.getDate(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.addAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.isEmpty();
      assertTrue(boolean0);
      
      boolean boolean1 = jSONArray0.equals((Object) null);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray0 = new JSONArray();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) jSONArray0;
      objectArray0[1] = (Object) jSONArray0;
      Object[] objectArray1 = jSONArray0.toArray(objectArray0);
      assertEquals(2, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDate(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Spliterator<Object> spliterator0 = jSONArray0.spliterator();
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd(2804, (Object) spliterator0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2804, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate(2783);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2783, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.stream();
      jSONArray0.stream();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Class<Field> class0 = Field.class;
      jSONArray0.toJavaList(class0);
      // Undeclared exception!
      try { 
        jSONArray0.getInteger((-549));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue((-385));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      Class<Integer> class0 = Integer.class;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "@type";
      stringArray0[1] = "1.2.46";
      stringArray0[2] = "@type";
      stringArray0[3] = "1.2.46";
      stringArray0[4] = "@type";
      stringArray0[5] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[6] = "@type";
      stringArray0[7] = "1.2.46";
      stringArray0[8] = "_<Dtn#OPJtX";
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      Class<?> class1 = javaBeanSerializer0.getType();
      jSONArray1.setComponentType(class1);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      boolean boolean0 = jSONArray1.removeAll(jSONArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      Class<InputStream> class0 = InputStream.class;
      // Undeclared exception!
      try { 
        jSONArray0.addAll((-1106), (Collection<?>) linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1106, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toArray();
      List<Object> list0 = new LinkedList<Object>();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 3276;
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue(3276);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3276, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jSONArray0.getString((-11));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = jSONArray0.getRelatedArray();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getString(80);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 80, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int int0 = 169;
      JSONArray jSONArray0 = new JSONArray(169);
      // Undeclared exception!
      try { 
        jSONArray0.getShort((-196));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSON.defaultLocale = jSONArray0.defaultLocale;
      jSONArray0.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal((-1802));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.listIterator(2792);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2792
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      jSONArray1.componentType = null;
      // Undeclared exception!
      try { 
        jSONArray1.getJSONObject(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.spliterator();
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue((-2468));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentSet(2818, linkedList0);
      jSONArray0.getShortValue(64);
      jSONArray0.getJSONObject(1);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      assertTrue(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      JSON.toJSONStringZ(linkedList0, serializeConfig0, serializerFeatureArray0);
      JSONArray jSONArray1 = new JSONArray();
      jSONArray1.fluentClear();
      boolean boolean0 = jSONArray1.containsAll(linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.spliterator();
      ConcurrentHashMap<String, JSONArray> concurrentHashMap0 = new ConcurrentHashMap<String, JSONArray>(8232, 8232);
      jSONArray0.setRelatedArray(concurrentHashMap0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(8232);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 8232, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(96);
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      jSONArray0.fluentRemoveAll(set0);
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue(2828);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2828, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<JSONObject> class0 = JSONObject.class;
      List<JSONObject> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(list0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSON.toJSONString((Object) list0, true);
      JSONArray jSONArray3 = jSONArray2.fluentRemoveAll(jSONArray1);
      JSONArray jSONArray4 = jSONArray3.fluentAdd((Object) jSONArray2);
      int int0 = 1583;
      // Undeclared exception!
      try { 
        jSONArray4.getFloat(1583);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1583, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate((-2751));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getShort(2580);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2580, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Spliterator<Object> spliterator0 = jSONArray0.spliterator();
      JSONArray jSONArray1 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.fluentRemove(jSONArray0);
      JSONObject jSONObject2 = jSONObject1.fluentRemove(spliterator0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      JSONObject jSONObject3 = jSONObject2.fluentPut("1.2.46", dataInputStream0);
      boolean boolean0 = jSONArray0.remove((Object) jSONObject3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONArray0.lastIndexOf(jSONObject0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray2 = jSONArray1.fluentSet((-1), integer0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte) (-33);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      JSONArray jSONArray3 = jSONArray2.fluentAdd((Object) dataInputStream0);
      JSONArray jSONArray4 = jSONArray3.fluentAddAll((Collection<?>) jSONArray1);
      jSONArray4.fluentRemoveAll(jSONArray1);
      char[] charArray0 = new char[3];
      charArray0[0] = 'W';
      charArray0[1] = 'S';
      charArray0[2] = '[';
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser(charArray0, 3089, parserConfig0, (byte) (-33));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray0.getInteger(710);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 710, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.iterator();
      jSONArray0.isEmpty();
      LinkedHashSet<JSONArray> linkedHashSet0 = new LinkedHashSet<JSONArray>();
      linkedHashSet0.add(jSONArray0);
      // Undeclared exception!
      try { 
        linkedHashSet0.retainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue((-921));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-1);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      Type type0 = jSONArray0.componentType;
      Feature[] featureArray0 = new Feature[2];
      Feature feature0 = Feature.DisableASM;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.AllowUnQuotedFieldNames;
      featureArray0[1] = feature1;
      JSON.parseObject(byteArray0, 0, (-1), charset0, (Type) null, featureArray0);
      jSONArray0.sort(comparator0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(6);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 6, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getByte((-960));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.46", concurrentSkipListMap0);
      ConcurrentSkipListMap<Integer, Integer> concurrentSkipListMap1 = new ConcurrentSkipListMap<Integer, Integer>();
      concurrentSkipListMap1.values();
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal(4129);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4129, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-2261);
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean((-2261));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      Spliterator<Object> spliterator0 = jSONArray1.spliterator();
      int int0 = 26085;
      jSONArray1.indexOf(spliterator0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll(26085, (Collection<?>) jSONArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 26085, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        jSONArray0.getByte(3133);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3133, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 0;
      // Undeclared exception!
      try { 
        jSONArray0.getInteger(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.subList((-2261), 72);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -2261
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 0;
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.remove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      jSONArray0.spliterator();
      // Undeclared exception!
      try { 
        jSONArray1.subList(989, 3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 3089
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 2816;
      int int1 = 2854;
      // Undeclared exception!
      try { 
        jSONArray0.subList(2854, (-3513));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(2854) > toIndex(-3513)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 4114;
      Integer integer0 = new Integer(4114);
      jSONArray0.set(2821, integer0);
      TypeReference<Integer> typeReference0 = null;
      try {
        typeReference0 = new TypeReference<Integer>();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.reflect.ParameterizedType
         //
         verifyException("com.alibaba.fastjson.TypeReference", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) null);
      jSONArray1.fluentClear();
      jSONArray1.spliterator();
      // Undeclared exception!
      try { 
        jSONArray1.getLong(577);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 577, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 4129;
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.46", concurrentSkipListMap0);
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        jSONArray0.get(79);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 79, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      int int0 = 68;
      JSONArray jSONArray0 = new JSONArray(68);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(989);
      jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray1.remove(4130);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4130, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentClear();
      SerializeConfig serializeConfig0 = new SerializeConfig(989);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingName;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[3] = serializerFeature3;
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.alibaba.fastjson.JSONArray");
      JSONArray jSONArray0 = new JSONArray(4107);
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONArray0.fluentSet((-1758), jSONObject0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject0 = new JSONObject(4105, true);
      jSONObject0.put("1.2.46", (Object) jSONArray0);
      linkedList0.add(jSONObject0);
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(linkedList0);
      // Undeclared exception!
      try { 
        jSONArray1.getDouble(4110);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4110, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      int int0 = 11;
      JSONArray jSONArray0 = new JSONArray(11);
      // Undeclared exception!
      try { 
        jSONArray0.getLong(11);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 11, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      int int0 = 11;
      JSONArray jSONArray0 = new JSONArray(11);
      jSONArray0.iterator();
      ConcurrentHashMap<Object, JSONArray> concurrentHashMap0 = new ConcurrentHashMap<Object, JSONArray>();
      int int1 = 4142;
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(4142);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4142, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(11);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      jSONArray1.fluentRetainAll(linkedList0);
      // Undeclared exception!
      try { 
        jSONArray0.remove(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(11);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(linkedList0);
      JSONArray jSONArray3 = jSONArray0.fluentAddAll((Collection<?>) jSONArray2);
      JSONArray jSONArray4 = jSONArray3.fluentRemoveAll(jSONArray1);
      assertSame(jSONArray4, jSONArray3);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Class<Field> class0 = Field.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, concurrentHashMap0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/\"");
      List<Object> list0 = javaBeanSerializer0.getFieldValues(class0);
      JSONArray jSONArray0 = new JSONArray(list0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@type");
      JSONArray jSONArray1 = jSONArray0.fluentSet(4144, javaBeanSerializer0);
      int int0 = (-2837);
      // Undeclared exception!
      try { 
        jSONArray1.getJSONArray((-2837));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      byte[] byteArray0 = new byte[0];
      int int0 = 180;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 989, 180);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      jSONArray0.isEmpty();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteClassName;
      byteArrayInputStream0.skip(0L);
      serializerFeatureArray0[0] = serializerFeature0;
      JSON.toJSONBytes((Object) byteArrayInputStream0, serializeConfig0, 989, serializerFeatureArray0);
      // Undeclared exception!
      try { 
        jSONArray1.getShortValue((-2478));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray();
      JSON.parse("");
      jSONArray0.fluentRemoveAll(linkedList0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte)44;
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CharsetDecoder charsetDecoder0 = uTF8Decoder0.reset();
      jSONArray0.getComponentType();
      Feature[] featureArray0 = new Feature[2];
      Feature feature0 = Feature.DisableSpecialKeyDetect;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.InitStringFieldAsEmpty;
      featureArray0[1] = feature1;
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, (-2721), 3079, charsetDecoder0, (Type) null, featureArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2629);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd(3054, (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3054, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 989, 231);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      byteArrayInputStream0.markSupported();
      // Undeclared exception!
      try { 
        jSONArray1.fluentAddAll(3089, (Collection<?>) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-1);
      Collection<Integer> collection0 = null;
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger((-1295));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2629);
      Collection<Integer> collection0 = null;
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) sequenceInputStream1);
      // Undeclared exception!
      try { 
        jSONArray1.fluentAdd((-1910), (Object) "yyyy-MM-dd HH:mm:ss");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1910, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<String> class0 = String.class;
      JSON.parseObject((String) null, class0, (Feature[]) null);
      jSONArray0.fluentSet(3089, (Object) null);
      JSONArray jSONArray1 = new JSONArray();
      jSONArray1.isEmpty();
      jSONArray0.getByteValue(989);
      assertEquals(3090, jSONArray0.size());
      
      jSONArray1.fluentAdd((Object) null);
      assertFalse(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(11);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(linkedList0);
      JSONArray jSONArray3 = new JSONArray(jSONArray2);
      JSONArray jSONArray4 = jSONArray3.fluentAddAll((Collection<?>) linkedList0);
      JSONArray jSONArray5 = jSONArray4.fluentRemoveAll(jSONArray1);
      assertNotSame(jSONArray5, jSONArray1);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      int int0 = 2629;
      JSONArray jSONArray0 = new JSONArray(2629);
      JSON.parse("");
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemoveAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      jSONArray0.listIterator();
      Class<Integer> class0 = Integer.class;
      Class<JSONArray> class1 = JSONArray.class;
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("@type", treeMap0);
      FieldInfo fieldInfo0 = new FieldInfo("com.alibaba.fastjson.JSONArray", class0, class1, class0, (Field) null, 21, (-641), (-641));
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject((-641));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 989, 180);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      byteArrayInputStream0.markSupported();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.UseSingleQuotes;
      byteArrayInputStream0.skip(0L);
      serializerFeatureArray0[0] = serializerFeature0;
      JSON.toJSONBytes((Object) byteArrayInputStream0, serializeConfig0, 989, serializerFeatureArray0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      jSONArray1.fluentAdd((Object) sequenceInputStream0);
      // Undeclared exception!
      try { 
        jSONArray1.getBigInteger(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentClear();
      SerializeConfig serializeConfig0 = new SerializeConfig(989);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingName;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[4] = serializerFeature4;
      JSON.toJSONString((Object) jSONArray0, serializeConfig0, (SerializeFilter) null, serializerFeatureArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(linkedList0);
      jSONArray0.equals(linkedList0);
      int int0 = (-548);
      // Undeclared exception!
      try { 
        jSONArray1.getTimestamp(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) null);
      assertTrue(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentClear();
      SerializeConfig serializeConfig0 = new SerializeConfig(989);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingName;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[4] = serializerFeature4;
      JSON.toJSONString((Object) jSONArray0, serializeConfig0, (SerializeFilter) null, serializerFeatureArray0);
      int int0 = 74;
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(74);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 74, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(6);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 6, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      List<Object> list0 = null;
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue((-1370));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Collection<Integer> collection0 = null;
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll((-1), (Collection<?>) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      SerializeConfig serializeConfig0 = new SerializeConfig(989);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingName;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[4] = serializerFeature4;
      JSON.toJSONString((Object) jSONArray0, serializeConfig0, (SerializeFilter) null, serializerFeatureArray0);
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray2.getBigInteger(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Collection<JSONArray> collection0 = null;
      // Undeclared exception!
      try { 
        jSONArray0.getLong((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      int int0 = 0;
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = jSONArray1.fluentRemoveAll(jSONArray0);
      JSONArray jSONArray3 = jSONArray2.fluentRetainAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray3.fluentAddAll(989, (Collection<?>) jSONArray2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      byte[] byteArray0 = new byte[0];
      int int0 = 180;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 989, 180);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      byteArrayInputStream0.markSupported();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.UseSingleQuotes;
      byteArrayInputStream0.skip(0L);
      serializerFeatureArray0[0] = serializerFeature0;
      JSON.toJSONBytes((Object) byteArrayInputStream0, serializeConfig0, 989, serializerFeatureArray0);
      // Undeclared exception!
      try { 
        jSONArray1.getShortValue((-2478));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.add((Object) "+Q%");
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray((-4211));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 9;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll(9, (Collection<?>) linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      jSONArray0.spliterator();
      jSONArray1.iterator();
      jSONArray1.removeAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue(2794);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2794, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentSkipListMap<Integer, Integer> concurrentSkipListMap0 = new ConcurrentSkipListMap<Integer, Integer>();
      Collection<Integer> collection0 = concurrentSkipListMap0.values();
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(collection0);
      // Undeclared exception!
      try { 
        jSONArray1.getDoubleValue(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "type not match. ";
      stringArray0[1] = ":P#";
      stringArray0[2] = "*_}g|(Pf0Sx?ZRt";
      stringArray0[3] = "";
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      List<Object> list0 = javaBeanSerializer0.getObjectFieldValues("*_}g|(Pf0Sx?ZRt");
      JSONArray jSONArray0 = new JSONArray(list0);
      int int0 = (-3153);
      // Undeclared exception!
      try { 
        jSONArray0.set((-3153), "");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 0;
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(119);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = jSONArray1.fluentRemoveAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray2.getJSONArray(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      jSONArray0.fluentRemove((Object) linkedList0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd(3089, (Object) linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }
}
