/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 05:37:43 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.zip.ZipException;
import org.apache.bcel.classfile.CodeException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.typeOfSignature("Z");
      // Undeclared exception!
      try { 
        Utility.signatureToString("t2E6*D>swYe{-w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `t2E6*D>swYe{-w'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      try { 
        Utility.typeOfSignature("YS-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: YS-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      try { 
        Utility.typeOfSignature("WkuK]=$ZhSgV'1K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: WkuK]=$ZhSgV'1K
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte)2;
      Utility.toHexString(byteArray0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (byte)39;
      objectArray0[1] = (Object) "87 d3 03 27 02";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) (byte)2;
      objectArray0[4] = (Object) (byte)2;
      objectArray0[5] = (Object) (byte)39;
      objectArray0[6] = (Object) (byte) (-121);
      Utility.printArray(objectArray0, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-121), 128, true);
      // Undeclared exception!
      try { 
        constantPool0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Utility.compactClassName("goto_w");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte) (-17);
      byteArray0[5] = (byte)66;
      byteArray0[6] = (byte)81;
      byteArray0[7] = (byte) (-86);
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-86), (int) (byte) (-86), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    l2i
         // 1:    faload
         // 2:    f2l
         // 3:    fsub
         // 4:    <illegal opcode>
         // 5:    lstore_3
         // 6:    fastore
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte) (-127);
      byteArray0[4] = (byte) (-57);
      byteArray0[5] = (byte) (-39);
      byteArray0[6] = (byte)69;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 42, 102, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.signatureToString("Synthetic attribute with length > 0", true);
      String string0 = "5H92`5~;L?";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "lastore");
      try { 
        Utility.typeOfSignature("5H92`5~;L?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5H92`5~;L?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "instanceof");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("jsr_w", "C& ywTh_+o|_}OU1_>'SNTyp%jaS3U{js\bf", false);
      Utility.decode("a)$aD8@", false);
      Utility.isJavaIdentifierPart('w');
      try { 
        Utility.typeOfSignature("+>FM@GWq-f.f<M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >FM@GWq-f.f<M
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Utility.accessToString(1581);
      Utility.format((-3506), 76, true, '/');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte)35;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 41, 4358, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte) (-22);
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)98;
      byteArray0[6] = (byte)33;
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      Utility.encode(byteArray0, true);
      String string0 = ":|mZ6=z1C)W<x-:X`l(";
      Utility.compactClassName(":|mZ6=z1C)W<x-:X`l(");
      String string1 = "YGg&G2\\;+KEn[]]W,Lk";
      String[] stringArray0 = new String[5];
      stringArray0[0] = "jsr_w";
      stringArray0[1] = "$l$8b$I$A$A$A$A$A$A$A";
      stringArray0[2] = "{}";
      stringArray0[3] = "YGg&G2;+KEn[]]W,Lk";
      stringArray0[4] = "T{zJ1Z";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("YGg&G2;+KEn[]]W,Lk", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[]]W,Lk
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte) (-71);
      byteArray0[7] = (byte)18;
      byteArray0[8] = (byte) (-84);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)85, 43);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "monitorenter");
      Utility.compactClassName("}!'hZuCV^=|Zvuf");
      Utility.isSet((-911), 14);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte)115;
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-104), (-1058));
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)125, (int) (byte) (-104));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = Utility.setBit((-1421), (-1421));
      assertEquals((-1421), int0);
      
      int int1 = Utility.clearBit((-1421), (-3));
      assertEquals((-536872333), int1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte)122;
      byteArray0[6] = (byte)30;
      byteArray0[7] = (byte)13;
      byteArray0[8] = (byte)59;
      Constant[] constantArray0 = new Constant[2];
      ConstantLong constantLong0 = new ConstantLong((byte) (-32));
      constantArray0[0] = (Constant) constantLong0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("void");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (-1482), 1558);
      assertEquals("0:    iconst_1\n1:    <illegal opcode>\n2:    dconst_1\n3:    ineg\n4:    astore_1\n5:    ishr\n6:    lload_0\n7:    fconst_2\n8:    istore_0\n", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Utility.format((-798), (-798), true, '\\');
      Utility.replace("-798", "-798", "-798");
      Utility.accessToString(163);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-128);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-128), (-798));
      try { 
        Utility.methodSignatureReturnType("if_icmpeq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `if_icmpeq'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-60);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte) (-31);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1420, (int) (byte)78, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Utility.setBit((-3122), (-3122));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)58;
      String string0 = "[@%l4GR*] }|f#0,\"%}";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[@%l4GR*] }|f#0,\"%}");
      byteArray0[4] = (byte) (-33);
      byteArray0[5] = (byte)89;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-654), (-827), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = "=h7clpEFS/SX";
      try { 
        Utility.typeOfSignature("=h7clpEFS/SX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =h7clpEFS/SX
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "static");
      Utility.replace("{}", "{}", "?? #FPiE");
      Utility.isJavaIdentifierPart('8');
      try { 
        Utility.typeOfSignature("!1f>'bFZ*`E?ko(]U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1f>'bFZ*`E?ko(]U
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte) (-36);
      byteArray0[4] = (byte)126;
      byteArray0[5] = (byte) (-79);
      byteArray0[6] = (byte)64;
      byteArray0[7] = (byte) (-13);
      byteArray0[8] = (byte)1;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-79), (int) (byte) (-36), true);
      assertEquals("0:    <illegal opcode>\n1:    d2f\n2:    jsr_w\t\t#-595676862\n7:    <illegal opcode>\n8:    aconst_null\n", string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Utility.compactClassName("QkRjGXY6vN<Be`XyYuY", false);
      try { 
        Utility.typeOfSignature("QkRjGXY6vN<Be`XyYuY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: QkRjGXY6vN<Be`XyYuY
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Utility.searchOpcode("SimpleElementValue class does not know how to stringify type ");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "uu`WiCT5o";
      stringArray0[1] = "uu`WiCT5o";
      stringArray0[2] = "SimpleElementValue class does not know how to stringify type ";
      stringArray0[3] = "uu`WiCT5o";
      stringArray0[4] = "SimpleElementValue class does not know how to stringify type ";
      stringArray0[5] = "uu`WiCT5o";
      stringArray0[6] = "SimpleElementValue class does not know how to stringify type ";
      Utility.methodTypeToSignature("uu`WiCT5o", stringArray0);
      Utility.replace("SimpleElementValue class does not know how to stringify type ", "uu`WiCT5o", "SimpleElementValue class does not know how to stringify type ");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte)13;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)23, (int) (byte) (-123), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte) (-54);
      byteArray0[5] = (byte) (-69);
      byteArray0[6] = (byte) (-37);
      byteArray0[7] = (byte)53;
      byteArray0[8] = (byte)111;
      Utility.encode(byteArray0, true);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (byte) (-54);
      objectArray0[1] = (Object) (byte) (-69);
      Utility.printArray(objectArray0);
      Utility.isJavaIdentifierPart('#');
      Constant[] constantArray0 = new Constant[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(dataInputStream0);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantInteger constantInteger0 = new ConstantInteger((byte)111);
      constantArray0[1] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-29), 88, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 56117. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      try { 
        Utility.typeOfSignature("3,1AL%B-GcX)QkW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3,1AL%B-GcX)QkW
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)59;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ")\t");
      Utility.compactClassName(")\t", ")\t", false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Utility.setBit(1322, 1322);
      String string0 = " IK^|gMw+A`4_v?gBt";
      Utility.getSignature(" IK^|gMw+A`4_v?gBt");
      try { 
        Utility.typeOfSignature(")\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = "$";
      boolean boolean0 = true;
      try { 
        Utility.decode("$", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String string0 = Utility.format(4341, 4341, true, '\\');
      try { 
        Utility.typeOfSignature(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = "Ey:IP^ocP'";
      try { 
        Utility.typeOfSignature("Ey:IP^ocP'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ey:IP^ocP'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte) (-69);
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte) (-70);
      Constant[] constantArray0 = new Constant[4];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)55, (byte)55);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[1] = (Constant) constantInterfaceMethodref1;
      ConstantInterfaceMethodref constantInterfaceMethodref2 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[2] = (Constant) constantInterfaceMethodref2;
      ConstantInterfaceMethodref constantInterfaceMethodref3 = new ConstantInterfaceMethodref(constantInterfaceMethodref2);
      constantArray0[3] = (Constant) constantInterfaceMethodref3;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)70, 88);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = "?>...";
      Utility.convertString("?>...");
      try { 
        Utility.typeOfSignature("?>...");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?>...
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "monitorenter");
      Utility.compactClassName("!t=e");
      Utility.isSet((-911), 14);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte)115;
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-104), (-1058));
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)125, (int) (byte) (-104));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "areturn");
      boolean boolean0 = false;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.printArray((Object[]) null, false);
      Utility.fillup("Sensitive", 770, true, 'i');
      Utility.printArray((Object[]) null, false);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "areturn";
      stringArray0[1] = " entries\n";
      stringArray0[2] = "";
      stringArray0[3] = "Sensitiveiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii";
      stringArray0[4] = null;
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = 33;
      boolean boolean0 = false;
      Utility.format((-1670), 33, false, 'f');
      String string0 = "java.lang.Long";
      Utility.convertString("java.lang.Long");
      String string1 = ":3X%";
      try { 
        Utility.typeOfSignature(":3X%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :3X%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)94;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte)94, 256);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.format((-2779), (-2779), true, 'Y');
      Utility.isSet(812, 812);
      try { 
        Utility.typeOfSignature("-2779");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -2779
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte) (-51);
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte) (-89);
      byteArray0[6] = (byte) (-67);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)40;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1663, (int) (byte) (-89));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile("h})e?pjLAnb:^qjcx", "org.apache.bcel.classfile.StackMap");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "org.apache.bcel.classfile.StackMap";
      objectArray0[3] = (Object) "org.apache.bcel.classfile.StackMap";
      objectArray0[4] = (Object) mockFile0;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-63);
      byteArray0[0] = (byte) (-63);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      try { 
        Utility.typeOfSignature("@u^n-EJL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @u^n-EJL
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      try { 
        Utility.typeOfSignature("M'!k`xBM/RDSp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M'!k`xBM/RDSp
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Utility.accessToString(518, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-83);
      byte byte0 = (byte)127;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte) (-116);
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)40;
      byteArray0[7] = (byte)101;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)9, (int) (byte) (-83), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)21;
      byteArray0[6] = (byte)84;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)109, (-2600));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte)90;
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(9);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-72), (-1456889232));
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, (-965), (-965), true);
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte) (-70);
      Constant[] constantArray0 = new Constant[4];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[0] = (Constant) constantFloat1;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)55, (byte)55);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[1] = (Constant) constantInterfaceMethodref1;
      ConstantInterfaceMethodref constantInterfaceMethodref2 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[2] = (Constant) constantInterfaceMethodref2;
      ConstantInterfaceMethodref constantInterfaceMethodref3 = new ConstantInterfaceMethodref(constantInterfaceMethodref2);
      constantArray0[3] = (Constant) constantInterfaceMethodref3;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 207, 88);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 17978. Constant pool size is: 4
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ak VKD");
      Utility.isJavaIdentifierPart('#');
      Utility.compactClassName("Invalid signature: ", false);
      Utility.isJavaIdentifierPart('#');
      Utility.convertString("java.lang.wE5wyTqcdK&dO1%");
      Utility.setBit(16, (-350));
      Utility.compactClassName("lH@");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte) (-11);
      byteArray0[5] = (byte) (-16);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 467, 6);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 5109. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte) (-107);
      byteArray0[4] = (byte) (-91);
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-107), (-1843385807));
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[0] = (Constant) constantFieldref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 20000, (-1), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte) (-26);
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte) (-3);
      byteArray0[6] = (byte)17;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantInteger constantInteger0 = new ConstantInteger(168);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(16384, (byte) (-3));
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals("bipush\t\t90", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Utility.fillup("jsr_w", 91, false, '{');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte) (-10);
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte)14;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 16, 13, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Unreachable default case reached!";
      stringArray0[1] = "Unreachable default case reached!";
      stringArray0[2] = "Unreachable default case reached!";
      stringArray0[3] = "Unreachable default case reached!";
      stringArray0[4] = "Unreachable default case reached!";
      stringArray0[5] = "Unreachable default case reached!";
      stringArray0[6] = "\"";
      stringArray0[7] = "protected";
      String string0 = Utility.methodTypeToSignature("Unreachable default case reached!", stringArray0);
      assertEquals("(LUnreachable;LUnreachable;LUnreachable;LUnreachable;LUnreachable;LUnreachable;L\";Lprotected;)LUnreachable;", string0);
      
      String string1 = Utility.compactClassName("Unreachable default case reached!", "(%<{,z", false);
      assertEquals("Unreachable default case reached!", string1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte) (-10);
      byteArray0[5] = (byte)69;
      byteArray0[6] = (byte)69;
      byteArray0[7] = (byte) (-104);
      byteArray0[8] = (byte)4;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals(1, byteSequence0.getIndex());
      
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1610612734), (int) (byte) (-10));
      assertEquals("0:    <illegal opcode>\n1:    if_icmpge\t\t#1994\n4:    <illegal opcode>\n5:    fstore_2\n6:    fstore_2\n7:    dcmpg\n8:    iconst_1\n", string2);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Utility.fillup("v<*dboa\"", (-455), true, '&');
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfSignature("7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte) (-86);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1901, (int) (byte) (-86));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Utility.getSignature("nJQnXY]DWB7l\"O34l8~");
      Utility.signatureToString("LnJQnXY]DWB7l\"O34l8~;");
      Utility.replace("3Zq~yvSBP", "|#PYL", "3Zq~yvSBP");
      Utility.compactClassName("X");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte) (-107);
      byteArray0[6] = (byte)95;
      byteArray0[7] = (byte) (-93);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 65, 97);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Utility.format((-1663), 589, false, '!');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte)94;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte) (-18);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 348, 91, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = "org.apache.bcel.util.ClassPath$1";
      boolean boolean0 = true;
      try { 
        Utility.decode("org.apache.bcel.util.ClassPath$1", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte) (-84);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.setBit(169, 169);
      Utility.compactClassName("(hmn3RLS'}]TAp\"]", false);
      Utility.compactClassName("(hmn3RLS'}]TAp\"]", true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark(681);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(12, byteSequence0.getIndex());
      assertEquals("lookupswitch\tdefault = 0, npairs = 0 ()", string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      String string0 = "2>(i/V)^1^L";
      String string1 = "null";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "null");
      try { 
        Utility.typeOfSignature("2>(i/V)^1^L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2>(i/V)^1^L
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-49);
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)16;
      ConstantPool constantPool0 = null;
      int int0 = 1588;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)39, 1588);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte) (-1);
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte) (-112);
      byteArray0[5] = (byte)35;
      Utility.encode(byteArray0, false);
      Utility.accessToString(47);
      Utility.isSet((byte)73, 66);
      Utility.convertString(">;");
      Utility.accessToString((int) (byte) (-113), false);
      Constant[] constantArray0 = new Constant[2];
      ConstantFloat constantFloat0 = new ConstantFloat((byte)18);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("public private protected static synchronized");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[1] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 2260, 47, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 144. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = Utility.getSignature("");
      int int0 = Utility.clearBit(60, 2);
      assertEquals(56, int0);
      
      String string1 = Utility.convertString("L;");
      assertTrue(string1.equals((Object)string0));
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "L;";
      objectArray0[3] = (Object) "";
      String string2 = Utility.printArray(objectArray0, true, false);
      assertEquals("{, , L;, }", string2);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte) (-50);
      byteArray0[3] = (byte) (-41);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "L;");
      String string3 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1399), 101, true);
      assertEquals("0:    dup_x1\n1:    if_acmpeq\t\t#-12584\n", string3);
      
      String string4 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string4);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)7;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(3323, 2208);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantClass constantClass0 = new ConstantClass((-3438));
      constantArray0[1] = (Constant) constantClass0;
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[2] = (Constant) constantMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("dload_3", string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte) (-10);
      byteArray0[4] = (byte) (-34);
      byteArray0[5] = (byte)25;
      byteArray0[6] = (byte)6;
      byteArray0[7] = (byte)116;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) (byte) (-116);
      objectArray0[3] = (Object) (byte) (-34);
      Utility.printArray(objectArray0, true);
      Utility.clearBit((-2043), (byte) (-34));
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.printf(">O`(~_4i~n8n[c,:m1", objectArray0);
      Utility.printArray(printWriter0, objectArray0);
      assertSame(mockPrintWriter0, printWriter0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = "0Z";
      try { 
        Utility.typeOfSignature("0Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0Z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Utility.classOrInterface((-1006));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte) (-88);
      byteArray0[6] = (byte) (-87);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-88), 168, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dup
         // 1:    ifne\t\t#769
         // 4:    dup_x2
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Utility.isJavaIdentifierPart('l');
      Utility.isSet(2623, 2623);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte)56;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-769), 123, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lstore_1
         // 1:    i2l
         // 2:    lconst_1
         // 3:    aload_2
         // 4:    ineg
         // 5:    irem
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Utility.accessToString(33);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte)97;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1020), 1584);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)3;
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)72);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[0] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1976, (-213), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)62;
      Utility.encode(byteArray0, false);
      Utility.getSignature("bG5bG5");
      try { 
        Utility.typeOfSignature("*>6mZQ.yybBoRO7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >6mZQ.yybBoRO7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = "'H=9?tz/=+^p9jNX";
      try { 
        Utility.typeOfSignature("'H=9?tz/=+^p9jNX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 'H=9?tz/=+^p9jNX
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      int int0 = 1058;
      Utility.clearBit((-1616531890), 1058);
      Utility.convertString("mXty7F");
      Utility.searchOpcode("^@z{|!_|C1Gf");
      Utility.searchOpcode("mXty7F");
      Utility.signatureToString("F'w", true);
      byte[] byteArray0 = null;
      Constant[] constantArray0 = new Constant[1];
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(pushbackInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Utility.searchOpcode("(class_index = ");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)28;
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((short) (-1), (byte) (-67));
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[0] = (Constant) constantMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)28, (int) (byte) (-67), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0);
      Utility.isSet(3410, 3410);
      String string0 = ">,[c3\\Y?;Q7KZg$([E5";
      // Undeclared exception!
      try { 
        Utility.getSignature(">,[c3Y?;Q7KZg$([E5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[c3Y?;Q7KZg$([E5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte) (-100);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte) (-46);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-46), (int) (byte)0, true);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)62;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)74;
      byteArray1[1] = (byte)125;
      byteArray1[2] = (byte)8;
      byteArray1[3] = (byte) (-11);
      Utility.equals(byteArray0, byteArray1);
      Constant[] constantArray0 = new Constant[1];
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("double", "AguAb#0Ao9/vuLG!6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"AguAb#0Ao9/vuLG!6\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      try { 
        Utility.typeOfSignature("H1ij}!B0=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H1ij}!B0=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte) (-86);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteArray0[3] = (byte) (-124);
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte)101;
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.typeOfSignature("NJ$n>TcZ2DL*Dcs!n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: NJ$n>TcZ2DL*Dcs!n
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Utility.compactClassName("void", false);
      try { 
        Utility.typeOfSignature("OLt&Ze;J6-yHGrw1,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: OLt&Ze;J6-yHGrw1,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "invokestatic");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.methodSignatureArgumentTypes("(,_R`Hs");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `,_R`Hs'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Utility.compactClassName("if_icmpne", "if_icmpne", true);
      Utility.isJavaIdentifierPart('_');
      String[] stringArray0 = new String[5];
      stringArray0[0] = "thL9dDl";
      stringArray0[1] = "if_icmpne";
      stringArray0[2] = "if_icmpne";
      stringArray0[3] = "";
      stringArray0[4] = "";
      Utility.methodTypeToSignature("instanceof", stringArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte) (-106);
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)52;
      byteArray0[7] = (byte) (-92);
      byteArray0[8] = (byte) (-122);
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass((byte) (-122));
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 3, 1012, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 36923. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = ">\t";
      stringArray0[1] = ">\t";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[2] = "DT~.p!~&#[7r~v+]`X";
      stringArray0[3] = "a|_s74~=kSd)!5";
      stringArray0[4] = ">\t";
      Utility.methodTypeToSignature(">\t", stringArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte) (-41);
      byteArray0[6] = (byte)38;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-3073), (-3073), true);
      assertEquals("0:    iload_2\n1:    sastore\n2:    swap\n3:    if_icmpne\t\t#16090\n6:    dload_0\n", string0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte)90;
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(9);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-65), (-1456889232));
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, (-965), (-965), true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      constantPool0.setConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      String string0 = Utility.printArray((Object[]) constantArray0);
      assertEquals("{CONSTANT_MethodType[16](descriptor_index = 9), CONSTANT_NameAndType[12](name_index = -65, signature_index = -1456889232)}", string0);
      
      Utility.compactClassName("0:    lushr\n1:    bastore\n2:    athrow\n3:    lxor\n4:    dup_x1\n");
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-1026), 1104);
      assertEquals("0:    lushr\n1:    bastore\n2:    athrow\n3:    lxor\n4:    dup_x1\n", string1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = Utility.format(17, 17, true, 'm');
      assertEquals("17mmmmmmmmmmmmmmm", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte)48;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-19), (int) (byte) (-19), true);
      assertEquals("0:    <illegal opcode>\n1:    faload\n", string1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "y$$^-Oc";
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)75;
      byteArray0[6] = (byte) (-97);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.compactClassName("y$$^-Oc", true);
      try { 
        Utility.decode("y$$^-Oc", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = "._:XO=[KVBdE6^b";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "._:XO=[KVBdE6^b");
      try { 
        Utility.typeOfSignature("._:XO=[KVBdE6^b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ._:XO=[KVBdE6^b
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-43);
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte)42;
      byteArray0[7] = (byte)8;
      byteArray0[8] = (byte)57;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-61), (int) (byte)40);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    ifle\t\t#-15361
         // 4:    aload_0
         // 5:    dload_2
         // 6:    aload_0
         // 7:    iconst_5
         // 8:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Utility.searchOpcode("W");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte) (-1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 39, 2395, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Utility.typeOfSignature("Float");
      Utility.compactClassName("Float");
      String string0 = Utility.classOrInterface(936);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "interface";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "Float";
      objectArray0[3] = (Object) "Float";
      String string1 = Utility.printArray(objectArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte)36;
      byteArray0[7] = (byte)56;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byteSequence0.readUnsignedByte();
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.isJavaIdentifierPart(',');
      try { 
        Utility.methodSignatureArgumentTypes(";r),fD.T#Uv*U", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;r),fD.T#Uv*U
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Utility.clearBit(1639, 1639);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte) (-31);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-98);
      byteArray0[5] = (byte)90;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-9);
      byteArray0[8] = (byte)125;
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)90, (byte) (-31));
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[0] = (Constant) constantNameAndType1;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("putstatic");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantNameAndType1.accept(emptyVisitor0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.decode("aloadaload", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Utility.searchOpcode("/xVa]o");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-60);
      byte byte0 = (byte)38;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)124;
      byteArray0[5] = (byte)0;
      byteArray0[1] = (byte) (-58);
      byte byte1 = (byte) (-119);
      byteArray0[7] = (byte) (-119);
      byteArray0[8] = (byte) (-103);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-119), 62, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    wide\t(wide)
         // 1:    ifnull\t\t#-18943
         // 4:    iushr
         // 5:    nop
         // 6:    nop
         // 7:    l2f
         // 8:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Utility.classOrInterface((-802));
      Utility.compactClassName("class");
      Utility.accessToString((-802), true);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "class";
      stringArray0[1] = "class";
      stringArray0[2] = "!paNU=<|dm$7k";
      stringArray0[3] = "void";
      stringArray0[4] = "L\";V";
      stringArray0[5] = "Warning: Padding byte != 0 in ";
      stringArray0[6] = "private protected static final volatile transient abstract strictfp synthetic annotation enum";
      stringArray0[7] = "class";
      stringArray0[8] = "class";
      try { 
        Utility.methodTypeToSignature("class", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = ">IO";
      try { 
        Utility.typeOfSignature(">IO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >IO
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-99);
      Constant[] constantArray0 = new Constant[5];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(1620, (byte) (-80));
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref((byte) (-99), (byte) (-80));
      constantArray0[1] = (Constant) constantInterfaceMethodref1;
      ConstantInterfaceMethodref constantInterfaceMethodref2 = new ConstantInterfaceMethodref((byte) (-99), 2501);
      constantArray0[2] = (Constant) constantInterfaceMethodref2;
      ConstantClass constantClass0 = new ConstantClass(1620);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[3] = (Constant) constantClass1;
      ConstantInterfaceMethodref constantInterfaceMethodref3 = new ConstantInterfaceMethodref(1620, 162);
      constantArray0[4] = (Constant) constantInterfaceMethodref3;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-649), 199, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    areturn
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte)125;
      byteArray0[6] = (byte) (-59);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "7U_%_ +s~v<ks[WC6");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "f.xB-K{G.Vcj&+e'");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.compactClassName("DZ");
      Utility.typeOfSignature("DZ");
      byte[] byteArray1 = new byte[9];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "9}q");
      byteArray1[0] = (byte)7;
      byteArray1[1] = (byte) (-71);
      byteArray1[2] = (byte)7;
      byteArray1[3] = (byte)7;
      byteArray1[4] = (byte)7;
      byteArray1[5] = (byte)7;
      byteArray1[6] = (byte)7;
      byteArray1[7] = (byte)7;
      byteArray1[8] = (byte)7;
      Utility.encode(byteArray1, false);
      Utility.fillup(":lBRfC~]@", 6, false, 'c');
      String string0 = Utility.printArray((Object[]) null, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)93;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("pop2", string0);
      
      String string1 = Utility.compactClassName(")\t", "7U_%_ +s~v<ks[WC6", true);
      assertEquals(")\t", string1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Utility.replace("{O", "{O", "i2d");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "{O";
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)36;
      byteArray0[6] = (byte)117;
      byteArray0[7] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte) (-30);
      byteArray0[5] = (byte)96;
      byteArray0[6] = (byte)69;
      byteArray0[7] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("aload_0", string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte)90;
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(9);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-72), (-1456889232));
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-965), (-965), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 33626. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte) (-101);
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte) (-98);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-98), (int) (byte)125, false);
      assertEquals("0:    lload_2\n1:    lcmp\n2:    iconst_2\n3:    lushr\n4:    iflt\t\t#3490\n", string0);
      
      try { 
        Utility.typeOfSignature("9H}MfrAAp5t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9H}MfrAAp5t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Utility.setBit(167, 256);
      byte[] byteArray0 = Utility.decode("N5|]QHL-N`do&", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 167, 167, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte)120;
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte)39;
      byteArray0[7] = (byte) (-64);
      Utility.encode(byteArray0, true);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-785));
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-953), 1174);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    if_icmpge\t\t#21080
         // 3:    f2d
         // 4:    ishl
         // 5:    astore_3
         // 6:    dload_1
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "(");
      try { 
        Utility.typeOfSignature("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Utility.searchOpcode("/xVa]o");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-60);
      byte byte0 = (byte)38;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)124;
      byteArray0[5] = (byte)24;
      byteArray0[6] = (byte) (-58);
      byteArray0[7] = (byte) (-119);
      byteArray0[8] = (byte) (-103);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-119), 62, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte) (-44);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte) (-52);
      byteArray0[5] = (byte)50;
      byteArray0[6] = (byte) (-59);
      Utility.encode(byteArray0, false);
      Utility.encode(byteArray0, false);
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("(\"");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (-2815), (-926), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dsub
         // 1:    fload_2
         // 2:    <illegal opcode>
         // 3:    iconst_4
         // 4:    <illegal opcode>
         // 5:    aaload
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Utility.signatureToString("Z^X{", false);
      URI uRI0 = MockURI.aFTPURI;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Utility.getSignature("IGSd|_>IK;<ecH@");
      Utility.methodSignatureReturnType("IGSd|_>IK;<ecH@", false);
      Utility.fillup("IGSd|_>IK;<ecH@", (-1153), true, 'm');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte)52;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)71, (int) (byte)71);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "freturn");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "%gUrA";
      stringArray0[1] = "%gUrA";
      Utility.methodTypeToSignature("%gUrA", stringArray0);
      char char0 = 'Z';
      Utility.isJavaIdentifierPart('Z');
      Utility.methodSignatureToString("(L%gUrA;L%gUrA;)L%gUrA;", "%gUrA", "%gUrA");
      Utility.fillup("(L%gUrA;L%gUrA;)L%gUrA;", 1382, false, 'Z');
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)35;
      byteArray0[0] = (byte)35;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = Utility.format(85, 85, true, '.');
      assertEquals("85...................................................................................", string0);
      
      String string1 = Utility.accessToString(1179, true);
      assertEquals("public private static final transient abstract", string1);
      
      Utility.format((-1008), (-1008), true, '.');
      int int0 = Utility.clearBit(357, 85);
      assertEquals(357, int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte) (-107);
      byteArray0[6] = (byte) (-35);
      byteArray0[7] = (byte)125;
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte) (-44), (-2279));
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string2 = Utility.codeToString(byteArray0, constantPool0, 4, (int) (byte)92, false);
      assertEquals("4:    dload_2\n5:    fcmpl\n6:    <illegal opcode>\n7:    lushr\n", string2);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Utility.convertString("");
      Utility.accessToString(57);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("3Gz_1YC${", stringArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte)45;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-59), 171);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)67;
      byteArray0[0] = (byte)67;
      byte byte1 = (byte) (-43);
      byteArray0[1] = (byte) (-43);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)67);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      boolean boolean0 = false;
      Utility.codeToString(byteArray0, constantPool0, (-1140771275), (int) (byte)67, false);
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      Constant.setComparator(bCELComparator0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("\t\t#", "0:    fstore_0\n1:    <illegal opcode>\n");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 0:    fstore_0
         // 1:    <illegal opcode>
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)24;
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)16;
      byte byte1 = (byte)110;
      byteArray0[2] = (byte)110;
      byte byte2 = (byte)0;
      byteArray0[3] = (byte)0;
      byte byte3 = (byte)70;
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte)73;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      int int0 = 95;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)16, 95, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("", "", true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)80;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 87, (int) (byte) (-81), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Utility.searchOpcode("void");
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "void");
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)25;
      byte byte0 = (byte)21;
      byteArray0[2] = (byte)21;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)77, 9);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Utility.format((-1200), (-1509), false, '');
      MockFileWriter mockFileWriter0 = new MockFileWriter("-1200", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      Utility.printArray((PrintWriter) mockPrintWriter0, (Object[]) null);
      Utility.isJavaIdentifierPart('');
      Utility.fillup("-1200", (-1509), false, '\"');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte)90;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte)10;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)10, (-417), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte) (-127);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[4] = (byte) (-26);
      byteArray0[5] = (byte)29;
      byteArray0[6] = (byte)23;
      byteArray0[7] = (byte)34;
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 66, (-683));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte)56;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)75, (int) (byte)7, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = Utility.clearBit(625, 625);
      assertEquals(625, int0);
      
      Utility.printArray((Object[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-45);
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)92;
      byteArray0[6] = (byte) (-71);
      byteArray0[7] = (byte)3;
      byteArray0[8] = (byte)97;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("laload", string0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Utility.convertString("<sNY(C$");
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("<sNY(C$", stringArray0);
      Utility.getSignature("()L<sNY(C$;");
      try { 
        Utility.typeOfSignature("<sNY(C$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <sNY(C$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = "/t=z.Wj0#";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("/t=z.Wj0#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /t=z.Wj0#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = "Q5v,";
      try { 
        Utility.methodSignatureReturnType("Q5v,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q5v,'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = 97;
      Utility.accessToString(97);
      String string0 = "%!b;";
      try { 
        Utility.typeOfSignature("%!b;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %!b;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "R!*!%bWSf|)&pw";
      // Undeclared exception!
      try { 
        Utility.signatureToString("R!*!%bWSf|)&pw", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R!*!%bWSf|)&pw'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte)100;
      String string0 = "V!d$I[-A9sv";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "V!d$I[-A9sv");
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte)111;
      byteArray0[6] = (byte)5;
      Utility.toHexString(byteArray0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)105, 2048, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = true;
      Utility.format(64, 64, true, 'Q');
      try { 
        Utility.typeOfSignature("64QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 64QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = "Rx9T&7";
      try { 
        Utility.typeOfSignature("Rx9T&7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Rx9T&7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte) (-37);
      byte byte0 = (byte) (-9);
      byteArray0[2] = (byte) (-9);
      byteArray0[3] = (byte)54;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = "Invalid type: void[]";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "instanceof");
      byteSequence0.skipBytes((byte)54);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("istore\t\t%219", "Invalid type: void[]", "instanceof", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: istore\t\t%219
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = "V";
      Utility.fillup("V", 201, false, 'Q');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQV", "lload\t\t%255");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // lload\t\t%255
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = Utility.setBit(176, 176);
      assertEquals(65712, int0);
      
      String string0 = Utility.compactClassName("double");
      assertEquals("double", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte) (-128);
      byteArray0[7] = (byte)112;
      byteArray0[8] = (byte)125;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("fload_0", string1);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte)20;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)4, (-933), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)82;
      byteArray0[0] = (byte)82;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 5, 5, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte) (-43);
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte)103;
      byteArray0[7] = (byte)40;
      byteArray0[8] = (byte)61;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1397, (-1211));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = "CONSTANT_String";
      Utility.methodSignatureReturnType("CONSTANT_String");
      Utility.getSignature("(");
      Utility.getSignature("arraylength");
      // Undeclared exception!
      try { 
        Utility.signatureToString("char");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `char'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte) (-90);
      byteArray0[5] = (byte)69;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        Utility.methodSignatureReturnType("XIg'r.~fI", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XIg'r.~fI'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-93);
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte) (-94);
      byteArray0[7] = (byte)102;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)102;
      byteArray1[1] = (byte)90;
      byteArray1[2] = (byte) (-96);
      byteArray1[3] = (byte) (-105);
      byteArray1[4] = (byte) (-105);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray1[5] = (byte)109;
      byteArray1[6] = (byte)90;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-94), (int) (byte) (-105), true);
      assertEquals("0:    dup_x1\n1:    ldiv\n2:    lstore_1\n3:    dcmpl\n4:    if_icmpgt\t\t#-21850\n7:    fsub\n", string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = "MT\"\"}k";
      try { 
        Utility.methodSignatureReturnType("MT\"\"}k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `MT\"\"}k'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = "dg-D6'r!<$";
      Utility.convertString("dg-D6'r!<$");
      Utility.clearBit((-1795464639), (-1795464639));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)51;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)60;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[3] = (byte)113;
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte) (-49);
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte) (-30);
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)113, (int) (byte)60);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Utility.printArray(objectArray0, true, true);
      Utility.replace("y`zyb5~:j", ",e^n!E1(S'k==E\"", "n");
      Utility.format((-1250), (-1), false, '8');
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("@Cmr+gW", stringArray0);
      Utility.format((-623), (-623), true, 'L');
      Utility.accessToString((-623));
      Utility.accessToString((-1250));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)66;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 188, (-3107));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)37;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)37, (int) (byte)37, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.signatureToString("S");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("S", "S", "S", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: S
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Utility.convertString("H9,Q,FC<");
      try { 
        Utility.methodSignatureReturnType("H9,Q,FC<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H9,Q,FC<'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "KNmOTCyg8'iHA[Js9<:");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("KNmOTCyg8'iHA[Js9<:", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `KNmOTCyg8'iHA[Js9<:'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "void");
      String string0 = Utility.compactClassName("void", "void", true);
      assertEquals("", string0);
      
      Utility.compactClassName("void");
      boolean boolean0 = Utility.isJavaIdentifierPart('_');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)55;
      byteArray0[6] = (byte)48;
      byteArray0[7] = (byte)39;
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("22 4c 40 2b 00 37 30 27", string1);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "22 4c 40 2b 00 37 30 27";
      stringArray0[1] = "22 4c 40 2b 00 37 30 27";
      String string2 = Utility.methodTypeToSignature("dsub", stringArray0);
      assertEquals("(L22;L22;)Ldsub;", string2);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = "&8%#InMI5~&";
      try { 
        Utility.typeOfSignature("&8%#InMI5~&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &8%#InMI5~&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int int0 = 1171;
      Utility.format(1171, 1171, false, '+');
      String[] stringArray0 = null;
      Utility.methodTypeToSignature("areturn", (String[]) null);
      String string0 = "System";
      Utility.typeOfSignature("System");
      try { 
        Utility.methodSignatureReturnType("areturn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `areturn'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-85);
      Utility.toHexString(byteArray0);
      boolean boolean0 = false;
      Utility.decode("5a ab", false);
      String string0 = "if_acmpeq";
      MockFile mockFile0 = new MockFile("e");
      File file0 = MockFile.createTempFile("5a ab", "if_acmpeq", (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (byte) (-85);
      objectArray0[1] = (Object) file0;
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) mockPrintStream0;
      Locale locale0 = Locale.JAPANESE;
      locale0.getDisplayCountry();
      mockPrintStream0.printf(locale0, "5a ab", objectArray0);
      objectArray0[4] = (Object) mockPrintStream0;
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      Utility.searchOpcode("e");
      Utility.clearBit(1037, (byte) (-85));
      try { 
        Utility.typeOfSignature(", npairs = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , npairs = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "?G]BT<,A]iuQ%ZCw");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[]");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.fillup("org.apache.bcel.classfile.ConstantFloat", (-1), false, '6');
      Utility.accessToString(1, false);
      Utility.getSignature("float");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "public";
      stringArray0[1] = "float";
      stringArray0[2] = "org.apache.bcel.classfile.ConstantFloat";
      stringArray0[3] = "float";
      stringArray0[4] = "F";
      stringArray0[5] = "F";
      stringArray0[6] = "[]";
      stringArray0[7] = "[]";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("float", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: []
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Utility.isJavaIdentifierPart('a');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte) (-113);
      Utility.encode(byteArray0, true);
      Utility.classOrInterface((byte)69);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-109);
      byteArray1[1] = (byte)69;
      byteArray1[2] = (byte) (-109);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)69, (int) (byte) (-109));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      try { 
        Utility.typeOfSignature("!#,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.typeOfSignature("[Y;`HJjj3Oo,yi7LZ");
      Utility.setBit(74, 477);
      byte[] byteArray0 = new byte[0];
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(74, 1073);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = null;
      try {
        constantInterfaceMethodref0 = new ConstantInterfaceMethodref((ConstantInterfaceMethodref) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantInterfaceMethodref", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte) (-1);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("88 cd 39 ff", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("l2i", string1);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)18;
      byteArray0[6] = (byte) (-10);
      byteArray0[7] = (byte)97;
      byteArray0[8] = (byte)37;
      Constant[] constantArray0 = new Constant[6];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("org.apache.bcel.classfile.Utility$1");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(8, (-1870));
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantUtf8 constantUtf8_1 = ConstantUtf8.getInstance("d");
      constantArray0[2] = (Constant) constantUtf8_1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[3] = (Constant) constantFieldref1;
      ConstantFieldref constantFieldref2 = new ConstantFieldref((byte) (-54), (byte)97);
      constantArray0[4] = (Constant) constantFieldref2;
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle((byte)18, 154);
      constantArray0[5] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 22, (int) (byte)97);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 246. Constant pool size is: 6
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)18;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 244, 0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[6] = (byte) (-35);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte) (-126);
      byteArray0[6] = (byte)44;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-100), 16, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("0:    nop\n1:    iconst_3\n2:    ifge\t\t#1584\n5:    ixor\n6:    aload_2\n", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    nop
         // 1:    iconst_3
         // 2:    ifge\t\t#1584
         // 5:    ixor
         // 6:    aload_2
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.clearBit(852, (-5162));
      Utility.fillup(")xSfsyGO}%jswu", 852, true, 'e');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte) (-67);
      Utility.equals(byteArray0, byteArray0);
      Utility.isJavaIdentifierPart('e');
      String[] stringArray0 = new String[6];
      stringArray0[0] = ")xSfsyGO}%jswu";
      stringArray0[1] = ")xSfsyGO}%jswu";
      stringArray0[2] = "o77.E;";
      stringArray0[3] = ")xSfsyGO}%jswu";
      stringArray0[4] = ")xSfsyGO}%jswueeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee";
      stringArray0[5] = ")xSfsyGO}%jswueeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee";
      Utility.methodTypeToSignature("o77.E;", stringArray0);
      String string0 = ">$m$a";
      Utility.replace("PMGClass(", ")xSfsyGO}%jswu", ">$m$a");
      Utility.typeOfSignature("Invalid signature: ");
      Utility.replace("?>...", "newInvokeSpecial", ")xSfsyGO}%jswu");
      try { 
        Utility.typeOfMethodSignature("o77.E;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: o77.E;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte)6;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "geCF[+");
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte) (-126);
      byteArray0[6] = (byte)44;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-61), 16, true);
      try { 
        Utility.typeOfSignature("UOc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: UOc
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte) (-54);
      byteArray0[5] = (byte) (-69);
      byteArray0[6] = (byte) (-37);
      byteArray0[7] = (byte)53;
      byteArray0[8] = (byte)111;
      Utility.encode(byteArray0, true);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (byte) (-54);
      objectArray0[1] = (Object) (byte) (-69);
      Utility.printArray(objectArray0);
      Utility.isJavaIdentifierPart('#');
      Constant[] constantArray0 = new Constant[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(dataInputStream0);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantInteger constantInteger0 = new ConstantInteger((byte)111);
      constantArray0[1] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-29), 88, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 56117. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte) (-126);
      byteArray0[6] = (byte)44;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-61), 16, true);
      assertEquals("0:    <illegal opcode>\n1:    iconst_3\n2:    monitorexit\n3:    iconst_3\n4:    iaload\n5:    ixor\n6:    aload_2\n", string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      Object object0 = new Object();
      objectArray0[6] = object0;
      objectArray0[7] = (Object) null;
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-60);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 632, (int) (byte) (-60));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte) (-102);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("if_icmplt\t\t#5833", string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)41;
      byte byte1 = (byte)23;
      byteArray0[5] = (byte)23;
      byteArray0[6] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (byte)23;
      objectArray0[1] = (Object) byteSequence0;
      objectArray0[2] = (Object) byteSequence0;
      objectArray0[3] = (Object) (byte)41;
      objectArray0[4] = (Object) (byte)0;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Utility.fillup("org.apache.bcel.classfile.LocalVariableTable", (-1787), true, 'C');
      String string0 = Utility.accessToString(11);
      String string1 = Utility.replace("public private static", ",(`QEA$m=eh;", "PVhY3W#");
      assertTrue(string1.equals((Object)string0));
      
      String string2 = Utility.methodSignatureReturnType("|&?YT85+1c8)JQZjcgQ");
      assertEquals("long", string2);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)99;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string3 = Utility.fillup("org.apache.bcel.classfile.Signature$MyByteArrayInputStream", (byte)99, true, '@');
      assertEquals("org.apache.bcel.classfile.Signature$MyByteArrayInputStream@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@", string3);
      
      String string4 = Utility.format(169, (-1440), true, 'G');
      assertEquals("169", string4);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte) (-101);
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte) (-98);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-98), (int) (byte)125, false);
      try { 
        MockURI.URI("0:    lload_2\n1:    if_icmpeq\t\t#1406\n4:    iflt\t\t#3490\n", "0:    lload_2\n1:    if_icmpeq\t\t#1406\n4:    iflt\t\t#3490\n", "U2D|Q", "x&zMb");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: 0:    lload_2
         // 1:    if_icmpeq\t\t#1406
         // 4:    iflt\t\t#3490
         // ://[0:    lload_2
         // 1:    if_icmpeq\t\t#1406
         // 4:    iflt\t\t#3490
         // ]U2D%7CQ#x&zMb
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte) (-9);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 65536, 6530);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Utility.accessToString((-3844), true);
      String string0 = "G|_R";
      try { 
        Utility.typeOfSignature("G|_R");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G|_R
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = Utility.fillup("J8*a!qZVF[i->dLu", 72, false, 'C');
      assertEquals("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCJ8*a!qZVF[i->dLu", string0);
      
      String string1 = Utility.compactClassName("J8*a!qZVF[i->dLu", false);
      assertEquals("J8*a!qZVF[i->dLu", string1);
      
      String string2 = Utility.classOrInterface(103);
      assertEquals("class", string2);
      
      byte byte0 = Utility.typeOfSignature("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCJ8*a!qZVF[i->dLu");
      assertEquals((byte)5, byte0);
      
      int int0 = Utility.clearBit(1171, 79);
      assertEquals(1171, int0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = "N{N5";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("N{N5", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N{N5'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = "[]";
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("[]", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte) (-84);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.setBit(169, 169);
      Utility.compactClassName("(hmn3RLS'}]TAp\"]", false);
      Utility.compactClassName("(hmn3RLS'}]TAp\"]", true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark(681);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte)113;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-56), (-604));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = "long";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "long");
      Utility.convertString("\\");
      int int0 = (-2382);
      Utility.classOrInterface((-2382));
      boolean boolean0 = true;
      Utility.compactClassName(",", "interface", true);
      Utility.compactClassName("7m~cL`7-G;6<|d!0(", true);
      String string1 = "";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(/^10GQg9i{:", "long", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `/^10GQg9i{:'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      int int0 = 234;
      Utility.accessToString(234);
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.decode("kDz0$d+0&\"", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"d+\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Utility.signatureToString("V", true);
      File file0 = MockFile.createTempFile("monitorenter", "\n     Method Arguments:");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      PrintStream printStream0 = mockPrintStream0.append('@');
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "\n     Method Arguments:";
      objectArray0[1] = (Object) "monitorenter";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) "\n     Method Arguments:";
      objectArray0[5] = (Object) "V";
      objectArray0[6] = (Object) "monitorenter";
      objectArray0[7] = (Object) "monitorenter";
      Utility.printArray(printStream0, objectArray0);
      Utility.setBit(1, (-1598));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte)13;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -80
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0, false, false);
      assertEquals("", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte) (-107);
      byteArray0[4] = (byte)38;
      byteArray0[5] = (byte)74;
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte) (-81);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-90), (int) (byte) (-107), false);
      assertEquals("0:    if_acmpne\t\t#18473\n3:    fcmpl\n4:    dload_0\n5:    dstore_3\n6:    iconst_0\n7:    dreturn\n", string1);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Utility.methodSignatureReturnType("Invalid type: ", true);
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("The magic number must contain at least one byte");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The magic number must contain at least one byte
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte) (-109);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)97, 93);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "if_acmpeq");
      Utility.compactClassName("Illegal type: ", "Sensitive", false);
      Utility.methodTypeToSignature("OVx$/R2r", (String[]) null);
      Utility.methodSignatureArgumentTypes("()LOVx$/R2r;", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("()LOVx$/R2r;", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `()LOVx$/R2r;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte) (-108);
      byteArray0[2] = (byte) (-101);
      byteArray0[5] = (byte)13;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-56), (int) (byte) (-108), false);
      assertEquals("0:    lload_2\n1:    lcmp\n2:    iflt\t\t#-27646\n5:    fconst_2\n6:    nop\n", string0);
      
      int int0 = Utility.clearBit((byte)32, (-150));
      assertEquals(32, int0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Utility.printArray((Object[]) null, true, true);
      Utility.printArray((Object[]) null);
      Utility.convertString(" ");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-49);
      byteArray0[1] = (byte) (-76);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\t");
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte) (-33);
      byteArray0[7] = (byte)85;
      byteArray0[8] = (byte)36;
      byte[] byteArray1 = new byte[0];
      Utility.equals(byteArray0, byteArray1);
      // Undeclared exception!
      try { 
        Utility.signatureToString(" ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: ` '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      int int0 = (-1737);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.setBit((-1737), 18);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "m$iq,H5_2t";
      stringArray0[1] = "m$iq,H5_2t";
      Utility.methodTypeToSignature("m$iq,H5_2t", stringArray0);
      Utility.typeOfMethodSignature("(Lm$iq,H5_2t;Lm$iq,H5_2t;)Lm$iq,H5_2t;");
      Utility.fillup("char", 18, true, '}');
      try { 
        Utility.methodSignatureReturnType("char", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `char'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String string0 = "(";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(", "(", "(", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte) (-20);
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte)43;
      byteArray0[7] = (byte) (-28);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)70, 136);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = "YDpV}F50l*]";
      try { 
        Utility.methodSignatureReturnType("YDpV}F50l*]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YDpV}F50l*]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)13;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)27;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 929, 1390, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte) (-103);
      byteArray0[7] = (byte)6;
      byteArray0[8] = (byte)120;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)45, 63);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Utility.replace("drem", "drem", "drem");
      Utility.accessToString(1755);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-9);
      byteArray0[3] = (byte)118;
      byteArray0[4] = (byte)110;
      byteArray0[5] = (byte) (-103);
      byteArray0[6] = (byte)93;
      byteArray0[7] = (byte)83;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -9
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("P|ta");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P|ta'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Utility.compactClassName("? super ", false);
      Utility.typeOfSignature("J1?l2+L9q#~DZ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Utility.setBit((byte)11, 88);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "? super ";
      objectArray0[1] = (Object) "? super ";
      objectArray0[2] = (Object) "? super ";
      objectArray0[3] = (Object) "J1?l2+L9q#~DZ";
      Utility.printArray(objectArray0, false, false);
      Utility.decode("J1?l2+L9q#~DZ", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("? super ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `? super '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = ";ascd>?\\V?i6=s&";
      Utility.convertString(";ascd>?V?i6=s&");
      try { 
        Utility.typeOfSignature(";ascd>?\\V?i6=s&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;ascd>?\\V?i6=s&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)41;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      try { 
        Utility.codeToString(byteSequence0, constantPool1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      boolean boolean0 = true;
      Utility.signatureToString("L+ou;V", true);
      Utility.methodSignatureReturnType("L+ou;V");
      Utility.format(0, 0, false, '~');
      try { 
        Utility.methodSignatureArgumentTypes("+ou");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: +ou
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Utility.compactClassName("java.lang.Float", true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.methodSignatureReturnType("Deprecated attribute with length > 0");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte)105;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte)62;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[6];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("Deprecated attribute with length > 0");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)62, 97);
      constantArray0[1] = (Constant) constantFieldref0;
      ConstantDouble constantDouble0 = null;
      try {
        constantDouble0 = new ConstantDouble(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String string0 = "V";
      Utility.typeOfSignature("V");
      Utility.typeOfSignature("V");
      String string1 = "t=#TYh&&84s>|v&ct^a";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean0 = true;
      LocalVariableTable localVariableTable0 = null;
      try {
        localVariableTable0 = new LocalVariableTable((LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.LocalVariableTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Utility.getSignature("\t\t%");
      try { 
        Utility.methodSignatureArgumentTypes("L%;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: L%;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("The array of names must not be null");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Utility.convertString("xjGJ^zZUzkn'w$664K");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)112;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Utility.classOrInterface(3035);
      String string0 = "P/oR8@Gu<|4";
      try { 
        Utility.typeOfSignature("P/oR8@Gu<|4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P/oR8@Gu<|4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-94);
      Utility.toHexString(byteArray0);
      Utility.accessToString((-78));
      Utility.fillup("a2", 2671, false, '^');
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.bcel.classfile.InnerClasses");
      Utility.classOrInterface((-1));
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String string0 = "\"p}4NS.CFv";
      try { 
        Utility.typeOfSignature("\"p}4NS.CFv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"p}4NS.CFv
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      boolean boolean0 = false;
      Utility.signatureToString("Insensitive", false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)11;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-12);
      Utility.equals(byteArray0, byteArray0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (byte) (-63);
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) (byte)0;
      objectArray0[3] = (Object) (byte)0;
      objectArray0[4] = (Object) (byte)32;
      Utility.printArray(objectArray0, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString(",~J@5A", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `,~J@5A'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) fileSystemHandling0;
      objectArray0[1] = (Object) fileSystemHandling0;
      objectArray0[2] = (Object) fileSystemHandling0;
      boolean boolean0 = true;
      Utility.printArray(objectArray0, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)85;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)85, (int) (byte)43);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      int int0 = (-3887);
      Utility.accessToString((-3887));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)86;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[2] = (byte) (-11);
      byte byte0 = (byte) (-84);
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)20;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)20, 226);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.accessToString((-33));
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("public private protected static final volatile transient native interface abstract strictfp synthetic annotation enum", "public private protected static final volatile transient native interface abstract strictfp synthetic annotation enum", "public private protected static final volatile transient native interface abstract strictfp synthetic annotation enum");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: public private protected static final volatile transient native interface abstract strictfp synthetic annotation enum
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false);
      Utility.accessToString((-2118));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.accessToString((-2118));
      Utility.format(75, 75, false, ';');
      Utility.clearBit(52, 88);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte) (-25);
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)105;
      byteArray0[5] = (byte)85;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 59, 2, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String string0 = "OH+&S^!O[jMkkG&";
      try { 
        Utility.methodSignatureReturnType("OH+&S^!O[jMkkG&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `OH+&S^!O[jMkkG&'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte) (-48);
      byteArray0[3] = (byte) (-4);
      byteArray0[4] = (byte) (-119);
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-48), 525);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[0] = (Constant) constantNameAndType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 85, (int) (byte)63);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      boolean boolean0 = false;
      boolean boolean1 = false;
      Utility.printArray(objectArray0, false, false);
      Utility.compactClassName("java.lang.Object@c059f70, java.lang.Object@371195a8, java.lang.Object@318c4c15, java.lang.Object@4ffaaed0");
      try { 
        Utility.typeOfMethodSignature("java.lang.Object@c059f70, java.lang.Object@371195a8, java.lang.Object@318c4c15, java.lang.Object@4ffaaed0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.Object@c059f70, java.lang.Object@371195a8, java.lang.Object@318c4c15, java.lang.Object@4ffaaed0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String string0 = "nuI>=ySCvil[lD\"~/";
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("nuI>=ySCvil[lD\"~/", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[lD\"~/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)11;
      Utility.toHexString(byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)11;
      byteArray1[1] = (byte)66;
      byteArray1[2] = (byte)66;
      byteArray1[3] = (byte)11;
      byteArray1[4] = (byte)66;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " (");
      byteArray1[5] = (byte)66;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 66
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Utility.typeOfSignature("Byte code error: ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "O'");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "Byte code error: ";
      objectArray0[1] = (Object) "Byte code error: ";
      objectArray0[2] = (Object) "Byte code error: ";
      objectArray0[3] = (Object) "Byte code error: ";
      objectArray0[4] = (Object) "Byte code error: ";
      objectArray0[5] = (Object) "Byte code error: ";
      objectArray0[6] = (Object) "Byte code error: ";
      objectArray0[7] = (Object) "Byte code error: ";
      objectArray0[8] = (Object) "Byte code error: ";
      Utility.printArray(objectArray0, true, true);
      Utility.convertString("{\"Byte code error: \", \"Byte code error: \", \"Byte code error: \", \"Byte code error: \", \"Byte code error: \", \"Byte code error: \", \"Byte code error: \", \"Byte code error: \", \"Byte code error: \"}");
      Utility.setBit(8154, (byte)8);
      MockFile mockFile0 = new MockFile("\t\t%");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "Po (a,-fhnOvX");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // Po (a,-fhnOvX
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-4);
      byteArray0[0] = (byte) (-4);
      byte byte1 = (byte)105;
      byteArray0[1] = (byte)105;
      Utility.equals(byteArray0, byteArray0);
      Utility.accessToString((int) (byte) (-4), true);
      Utility.getSignature("protected static final volatile transient native abstract strictfp synthetic annotation enum");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter((byte)105);
      // Undeclared exception!
      try { 
        charArrayWriter0.append((CharSequence) "protected static final volatile transient native abstract strictfp synthetic annotation enum", 699, (int) (byte)105);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "if_icmplt");
      boolean boolean0 = Utility.isJavaIdentifierPart('G');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte) (-13);
      byteArray0[5] = (byte)104;
      byteArray0[6] = (byte)17;
      byteArray0[7] = (byte) (-37);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$c6$5b$Aw$f3h$R$db", string0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      int int0 = (-3887);
      Utility.accessToString((-3887));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)84;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[2] = (byte) (-11);
      byte byte0 = (byte) (-84);
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)20;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)20, 226);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = "ETS8uqr.`r";
      Utility.convertString("ETS8uqr.`r");
      try { 
        Utility.methodSignatureReturnType("ETS8uqr.`r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ETS8uqr.`r'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "boolean");
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0, true);
      Utility.fillup("nN%Wp@Y'A{jS6#C Og", 51, true, 'Z');
      String string0 = Utility.compactClassName("iX??||", true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      int int0 = (-767);
      Utility.setBit((-767), (-538));
      MockPrintStream mockPrintStream0 = new MockPrintStream("wrN+~59\"Gu1uP");
      PrintStream printStream0 = mockPrintStream0.append('/');
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) "wrN+~59\"Gu1uP";
      objectArray0[2] = (Object) "wrN+~59\"Gu1uP";
      mockPrintStream0.println();
      objectArray0[3] = (Object) "wrN+~59\"Gu1uP";
      Object object0 = new Object();
      objectArray0[4] = object0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      Utility.printArray(printStream0, objectArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("wrN+~59\"Gu1uP", "`5&vm[/fTpqE@<r-", "ko`p jAdp]|", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: wrN+~59\"Gu1uP
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      try { 
        Utility.typeOfSignature("enum");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: enum
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Utility.setBit(259, 6);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-47);
      Utility.encode(byteArray0, true);
      Utility.compactClassName("$l$8b$I$A$A$A$A$A$A$A", "$l$8b$I$A$A$A$A$A$A$A", true);
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) (byte)2;
      objectArray0[2] = (Object) "$l$8b$I$A$A$A$A$A$A$A";
      objectArray0[3] = (Object) (byte) (-47);
      objectArray0[4] = (Object) (byte)2;
      objectArray0[5] = (Object) (byte)59;
      objectArray0[6] = (Object) (byte)2;
      objectArray0[7] = (Object) (byte)59;
      Utility.printArray(objectArray0, true, true);
      Utility.setBit(0, (byte) (-22));
      Utility.decode("$l$8b$I$A$A$A$A$A$A$A", false);
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.compactClassName("F!n)60 E/EDna(<");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-31);
      byte byte0 = (byte) (-54);
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte)94;
      byte byte1 = (byte) (-110);
      byteArray0[4] = (byte) (-110);
      Utility.toHexString(byteArray0);
      try { 
        Utility.methodSignatureReturnType("e1 ca 78 5e 92", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `e1 ca 78 5e 92'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Utility.searchOpcode("org.apache.bcel.classfile.ConstantInteger");
      short short0 = Utility.searchOpcode("org.apache.bcel.classfile.ConstantInteger");
      assertEquals((short) (-1), short0);
      
      String string0 = Utility.methodTypeToSignature("ofQyl7|:Zub$F/,r&l", (String[]) null);
      assertEquals("()LofQyl7|:Zub$F/,r&l;", string0);
      
      Utility.printArray((Object[]) null);
      String string1 = Utility.classOrInterface(255);
      String string2 = Utility.classOrInterface((short) (-1));
      assertEquals("interface", string2);
      
      String string3 = Utility.compactClassName("class");
      assertTrue(string3.equals((Object)string1));
      
      String string4 = Utility.compactClassName(")9>$.");
      assertEquals(")9>$.", string4);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Utility.searchOpcode("invokedynamic");
      Utility.compactClassName("invokedynamic", false);
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0, true);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "invokedynamic";
      objectArray0[2] = (Object) "invokedynamic";
      objectArray0[3] = (Object) pipedWriter0;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("0Rv.<+;[", (String[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Utility.accessToString(3538, false);
      String string0 = ">\t";
      Utility.decode(">\t", false);
      String string1 = "LQEu74l(V";
      try { 
        Utility.methodSignatureReturnType("LQEu74l(V", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LQEu74l(V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Utility.isJavaIdentifierPart('2');
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "Cache hit ";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "\t\t#", "Cache hit ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Utility.convertString("l2Y^SC\"U");
      byte[] byteArray0 = new byte[0];
      Constant[] constantArray0 = new Constant[3];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("tableswitch");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantDouble constantDouble0 = new ConstantDouble(1.0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[1] = (Constant) constantDouble1;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(575);
      constantArray0[2] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 575, (-4329), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Utility.setBit(1534, 1534);
      Utility.compactClassName("0Rv.<+;[", true);
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[7];
      int int0 = (-165);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-165), 102);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantDouble constantDouble0 = new ConstantDouble(102);
      constantArray0[1] = (Constant) constantDouble0;
      try { 
        ConstantUtf8.getInstance((DataInput) byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "void";
      try { 
        Utility.methodSignatureArgumentTypes("void");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Utility.isSet(8, 2024);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("&sM#Z", "getfield", "AP", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &sM#Z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("UFX[$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `UFX[$'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Utility.format(92, 15, false, 'p');
      Utility.printArray((Object[]) null, false);
      Utility.clearBit(53, 53);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-54);
      Constant[] constantArray0 = new Constant[9];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-54), 2771);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[0] = (Constant) constantMethodref1;
      DataInput dataInput0 = null;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      short short0 = Utility.searchOpcode("><.XF*]`s$");
      //  // Unstable assertion: assertEquals((short) (-1), short0);
      
      MockFile mockFile0 = new MockFile("><.XF*]`s$");
      MockFile mockFile1 = new MockFile(mockFile0, ";");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) mockFileOutputStream0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) mockFile0;
      objectArray0[4] = (Object) "><.XF*]`s$";
      objectArray0[5] = (Object) "><.XF*]`s$";
      objectArray0[6] = (Object) mockFile0;
      objectArray0[7] = (Object) mockFileOutputStream0;
      objectArray0[8] = (Object) mockFile0;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      //  // Unstable assertion: assertEquals(230L, mockFile1.length());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = "R+K7Ex^'mIvzn+(N";
      Utility.compactClassName("R+K7Ex^'mIvzn+(N", "return", false);
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0, false, false);
      String string1 = "W_~`+l\\L>t57|w]==Lm";
      Utility.getSignature("W_~`+lL>t57|w]==Lm");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("java.lang.Object@5be97fa9", "Invalid type: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // Invalid type: 
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String string0 = Utility.getSignature("boolean");
      assertEquals("Z", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('=');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      String string0 = "PetCYD3";
      try { 
        Utility.decode("PetCYD3", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          String string0 = "B=Lm";
          Utility.methodSignatureReturnType("B=Lm");
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileOutputStream mockFileOutputStream0 = null;
          try {
            mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
             // sun.reflect.GeneratedConstructorAccessor93.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:233)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = "V";
      try { 
        Utility.typeOfMethodSignature("V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Utility.isJavaIdentifierPart('R');
      Utility.signatureToString("Invalid signature: ", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-73);
      byte byte0 = (byte)90;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte) (-125);
      byteArray0[6] = (byte) (-25);
      byteArray0[7] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[6];
      ConstantLong constantLong0 = new ConstantLong(byteSequence0);
      constantArray0[0] = (Constant) constantLong0;
      ConstantLong constantLong1 = new ConstantLong((byte)0);
      constantArray0[1] = (Constant) constantLong1;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = null;
      try {
        constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Utility.accessToString(151, true);
      Utility.clearBit(151, 151);
      Utility.clearBit(89, 66);
      Utility.classOrInterface(89);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("1", (String) null, " oDraa", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("l)fDVf#s9(zyt7U{", "l)fDVf#s9(zyt7U{", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: l)fDVf#s9(zyt7U{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = "%KO0fx";
      Utility.compactClassName("%KO0fx", "%KO0fx", false);
      Utility.searchOpcode("'n:*Y,k/)'fCTrt I");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte) (-63);
      Utility.encode(byteArray0, false);
      Utility.compactClassName("CnY$d LY");
      try { 
        Utility.methodSignatureReturnType("WL$99$c1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `WL$99$c1'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0, true);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Utility.clearBit(66, (-1225));
      MockFile mockFile0 = new MockFile((File) null, "");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = "? extends ";
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureToString("0=x(1`Y ", "? extends ", "Invalid type: ", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0=x(1`Y 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("org.apache.commons.io.filefilter.WildcardFileFilter");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `org.apache.commons.io.filefilter.WildcardFileFilter'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "monitorenter");
      Utility.compactClassName("!t=e");
      Utility.isSet((-911), 14);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)122;
      byte byte0 = (byte)125;
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte)115;
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-104), (-1058));
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = null;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((String) null, "!t=e");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      Utility.printArray(objectArray0);
      Utility.format(163, (-2546), false, 'D');
      boolean boolean0 = false;
      Utility.printArray((Object[]) null, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("163", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `163'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Utility.accessToString((-2730));
      String[] stringArray0 = new String[1];
      stringArray0[0] = "private protected final volatile native abstract synthetic annotation enum";
      Utility.methodTypeToSignature("private protected final volatile native abstract synthetic annotation enum", stringArray0);
      byte[] byteArray0 = Utility.decode("private protected final volatile native abstract synthetic annotation enum", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(250, (-2730));
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 250, (-2730));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.convertString("/q;}EoRewI");
      Utility.replace("/q;}EoRewI", "CONSTANT_Utf8", "/q;}EoRewI");
      boolean boolean1 = true;
      try { 
        Utility.methodSignatureReturnType("s:\"* -D)GZsKLki", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `GZsKLki'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-92);
      byteArray1[1] = (byte) (-92);
      byteArray1[2] = (byte) (-92);
      byteArray1[3] = (byte) (-92);
      byteArray1[4] = (byte) (-92);
      byteArray1[5] = (byte) (-92);
      byteArray1[6] = (byte) (-92);
      byteArray1[7] = (byte) (-92);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)10;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 62, (int) (byte)10, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, true);
      Utility.searchOpcode("$l$8b$I$A$A$A$A$A$A$A");
      try { 
        Utility.typeOfSignature("$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Utility.getSignature("F?");
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureArgumentTypes("interface", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: interface
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("&74y&@9n96}imBo", "aload", "&74y&@9n96}imBo", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &74y&@9n96}imBo
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String string0 = "lookupswitch";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "lookupswitch");
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-62);
      byteArray0[0] = (byte) (-62);
      byte byte1 = (byte) (-20);
      byteArray0[1] = (byte) (-20);
      byte byte2 = (byte)126;
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte) (-44);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-20));
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string1 = "_33vB1!OvD";
      String string2 = "multianewarray";
      int int0 = 3596;
      int int1 = (-1426);
      int int2 = (-1216);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)126;
      byteArray1[1] = (byte)126;
      byteArray1[2] = (byte) (-62);
      CodeException[] codeExceptionArray0 = new CodeException[3];
      CodeException codeException0 = null;
      try {
        codeException0 = new CodeException(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte)94;
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte) (-76);
      byte byte0 = (byte) (-61);
      byteArray0[6] = (byte) (-61);
      MockFile mockFile0 = new MockFile("Tfm L$");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, "Tfm L$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"Tfm L$\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }
}
