/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 13:18:21 GMT 2018
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataInputStream;
import java.io.ObjectInputStream;
import java.io.ObjectStreamConstants;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.lang.reflect.Member;
import java.util.regex.Pattern;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.generic.ARETURN;
import org.apache.bcel.generic.ArrayType;
import org.apache.bcel.generic.BranchInstruction;
import org.apache.bcel.generic.CHECKCAST;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.FCONST;
import org.apache.bcel.generic.INSTANCEOF;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.Type;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ClassLoaderRepository;
import org.apache.bcel.util.SyntheticRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConstantPoolGen_ESTest extends ConstantPoolGen_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantDouble constantDouble0 = new ConstantDouble(781.473);
      constantArray0[0] = (Constant) constantDouble0;
      int int0 = 99;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(99, 99);
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      assertEquals(1, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(8, 8);
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantLong constantLong0 = new ConstantLong(1005L);
      constantArray0[0] = (Constant) constantLong0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(1, 1);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[1] = (Constant) constantInvokeDynamic1;
      String string0 = "";
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("");
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantInvokeDynamic cannot be cast to org.apache.bcel.classfile.ConstantNameAndType
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Constant[] constantArray0 = new Constant[10];
      org.apache.bcel.classfile.Visitor visitor0 = mock(org.apache.bcel.classfile.Visitor.class, new ViolatedAssumptionAnswer());
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = Byte.SIZE;
      int int1 = Member.PUBLIC;
      int int2 = constantPoolGen0.lookupDouble(0.0);
      assertEquals(10, constantPoolGen0.getSize());
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addDouble(0.0);
      constantPoolGen0.lookupMethodref((String) null, "~Sr", "~Sr");
      int int0 = Character.SIZE;
      constantPoolGen0.lookupDouble(0.0);
      int int1 = constantPoolGen0.lookupInterfaceMethodref((String) null, (String) null, (String) null);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.size = (-3803);
      // Undeclared exception!
      try { 
        constantPoolGen0.addNameAndType(",j?", ",j?");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Float.BYTES;
      constantPoolGen0.addLong(0L);
      int int1 = Short.SIZE;
      constantPoolGen0.addUtf8(":");
      constantPoolGen0.getConstant(1);
      int int2 = constantPoolGen0.addUtf8(":");
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals(3, int2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantDouble constantDouble0 = new ConstantDouble(1L);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      BCELComparator bCELComparator0 = Method.getComparator();
      Constant.setComparator(bCELComparator0);
      constantArray0[1] = (Constant) constantDouble1;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.getSize();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Constant[] constantArray0 = new Constant[8];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-1203));
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[0] = (Constant) constantMethodType1;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantLong constantLong0 = new ConstantLong((-1203));
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[2] = (Constant) constantLong1;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantLong0.setBytes((-1203));
      constantPoolGen0.adjustSize();
      int int0 = constantPoolGen0.lookupLong((-1203));
      assertEquals(2, int0);
      
      int int1 = constantPoolGen0.lookupLong((-2249));
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(46, 228);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(228, (-118));
      constantArray0[1] = (Constant) constantMethodHandle0;
      Constant constant0 = constantNameAndType0.copy();
      constantArray0[2] = constant0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Zs'fincHx{");
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = Type.CLASS;
      constantPoolGen0.addClass(objectType0);
      int int0 = constantPoolGen0.addClass(objectType0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      int int0 = 3;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(3);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantInteger constantInteger0 = new ConstantInteger(3);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[1] = (Constant) constantInteger1;
      ConstantString constantString0 = new ConstantString(3);
      constantArray0[2] = (Constant) constantString0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getFinalConstantPool();
      constantPoolGen0.addDouble(0.0);
      constantPoolGen0.addFloat(0.0F);
      int int0 = constantPoolGen0.lookupInteger((-41));
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = null;
      constantPoolGen0.lookupInterfaceMethodref((String) null, (String) null, (String) null);
      constantPoolGen0.addFloat(0.0F);
      int int0 = constantPoolGen0.index;
      constantPoolGen0.addFloat((-1));
      ConstantUtf8 constantUtf8_0 = null;
      try {
        constantUtf8_0 = new ConstantUtf8((ConstantUtf8) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantUtf8", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addDouble((-297.513987998));
      int int0 = Double.BYTES;
      constantPoolGen0.adjustSize();
      ARETURN aRETURN0 = new ARETURN();
      Type type0 = aRETURN0.getType(constantPoolGen0);
      String[] stringArray0 = new String[0];
      InstructionList instructionList0 = new InstructionList();
      MethodGen methodGen0 = new MethodGen((-398), type0, type0.NO_ARGS, stringArray0, " <CL76q^/^\"_f5", " <CL76q^/^\"_f5", instructionList0, constantPoolGen0);
      int int1 = constantPoolGen0.lookupMethodref(methodGen0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Constant[] constantArray0 = new Constant[0];
      constantPoolGen0.constants = constantArray0;
      constantPoolGen0.getConstantPool();
      // Undeclared exception!
      try { 
        constantPoolGen0.addArrayClass((ArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getConstantPool();
      String string0 = "VzR";
      // Undeclared exception!
      try { 
        constantPoolGen0.addClass((ObjectType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = constantPoolGen0.getSize();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      constantPoolGen0.addUtf8("newarray");
      constantPoolGen0.addInteger((-116));
      int int0 = constantPoolGen0.lookupInteger(256);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addString("KJ=\"Qd6~");
      constantPoolGen0.toString();
      assertEquals(5, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getFinalConstantPool();
      constantPoolGen0.addDouble(0.0);
      int int0 = ObjectStreamConstants.baseWireHandle;
      constantPoolGen0.lookupFieldref("#", "|@(", "~Sr");
      constantPoolGen0.adjustSize();
      constantPoolGen0.lookupDouble(847.3735895904161);
      int int1 = constantPoolGen0.lookupInterfaceMethodref("|@(", "y5Twg<F:w~U39CZ_?>", "|@(");
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = (-467);
      constantPoolGen0.addInteger((-467));
      Method method0 = new Method();
      constantPoolGen0.size = (-467);
      constantPoolGen0.addInteger((-467));
      String string0 = "M1";
      MethodGen methodGen0 = null;
      try {
        methodGen0 = new MethodGen(method0, "M1", constantPoolGen0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-1203));
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[0] = (Constant) constantMethodType1;
      ConstantLong constantLong0 = new ConstantLong((-1203));
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[2] = (Constant) constantLong1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-1203), 2);
      constantArray0[3] = (Constant) constantMethodHandle0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1203), 1916);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantNameAndType1.copy();
      ConstantLong constantLong2 = new ConstantLong((-1L));
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.addLong((-1203));
      constantPoolGen0.adjustSize();
      String string0 = Constants.ILLEGAL_OPCODE;
      assertEquals("<illegal opcode>", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getConstantPool();
      ConstantInteger constantInteger0 = new ConstantInteger(256);
      // Undeclared exception!
      try { 
        constantPoolGen0.setConstant(256, constantInteger0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 256
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = "x)kt{O@%'";
      constantPoolGen0.addFieldref("x)kt{O@%'", "x)kt{O@%'", "x)kt{O@%'");
      FCONST fCONST0 = new FCONST();
      fCONST0.getType(constantPoolGen0);
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(4, 1883);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(612, 8);
      ConstantClass constantClass0 = new ConstantClass(8);
      ConstantClass constantClass1 = new ConstantClass(612);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      ConstantPoolGen constantPoolGen2 = null;
      try {
        constantPoolGen2 = new ConstantPoolGen(constantPool1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addInterfaceMethodref("Q@|K_`14", "r%Vt4E:U", "Q@|K_`14");
      constantPoolGen0.adjustSize();
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      constantPoolGen0.lookupInterfaceMethodref("hAROv#siq>dxNMArMoLuekI#hAROv", (String) null, "hAROv#siq>dxNMArMoLuekI#hAROv");
      constantPoolGen0.getConstant(5);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.getFinalConstantPool();
      constantPoolGen0.addInteger((-1));
      Method method0 = new Method();
      MethodGen methodGen0 = null;
      try {
        methodGen0 = new MethodGen(method0, "u6nZ", constantPoolGen0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantInteger constantInteger0 = new ConstantInteger((-1488));
      constantArray0[0] = (Constant) constantInteger0;
      constantInteger0.toString();
      ConstantFloat constantFloat0 = new ConstantFloat((-1488));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      constantArray0[1] = (Constant) constantFloat0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.lookupString("xWj~_ C^W");
      constantPoolGen0.addFloat((-1488));
      ObjectType objectType0 = new ObjectType("1)CONSTANT_Utf8[1](\"l2iF%#\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n3)CONSTANT_Class[7](name_index = 1)\n4)CONSTANT_Methodref[10](class_index = 3, name_and_type_index = 2)\n5)CONSTANT_String[8](string_index = 1)\n#w1C=*%,/&JsX':D?!5eqx25/J/&%~kSJS{k~$T`||0Q0&JsX':D?!5eqx25/J/&%~kSJS{k~$T`||0Q0#&");
      String string0 = "t>Tl/5v5@h#";
      String string1 = "";
      constantPoolGen0.lookupFieldref("t>Tl/5v5@h#", "", "Cannot STORE: Stack to read from is empty.&Cannot STORE: Stack to read from is empty.&' at index ");
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantArray0[0], (ConstantPoolGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-2349), 1929);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[0] = (Constant) constantMethodref1;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(1929);
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantClass constantClass0 = new ConstantClass(231);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[2] = (Constant) constantClass1;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(1547, (-1578));
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[3] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-2349), (-2349));
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("synthetic");
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-2349), (-3));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      ObjectType objectType0 = Type.THROWABLE;
      int int0 = Pattern.CANON_EQ;
      constantPoolGen0.lookupLong(128);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantPoolGen0.addConstant(constantUtf8_0, constantPoolGen1);
      // Undeclared exception!
      try { 
        constantPoolGen0.addClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(2, 5);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantMethodHandle1;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantMethodHandle1, constantPoolGen1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown constant type CONSTANT_MethodHandle[15](reference_kind = 2, reference_index = 5)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Constant[] constantArray0 = new Constant[8];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-30), (-30));
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      ConstantNameAndType constantNameAndType2 = new ConstantNameAndType((-30), (-30));
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.adjustSize();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantNameAndType1, constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -30
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Pattern.DOTALL;
      int int1 = Double.BYTES;
      int int2 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(32, 32);
      constantPoolGen0.addDouble(0.0);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantMethodHandle0.clone();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      ConstantLong constantLong0 = new ConstantLong(1230L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantLong1.toString();
      constantPoolGen0.addConstant(constantLong1, constantPoolGen1);
      constantPoolGen0.addDouble(3);
      constantPoolGen0.lookupUtf8("l2i%#");
      constantPoolGen0.lookupFieldref("l2i%#", "l2i%#", "CONSTANT_Long[5](bytes = 1230)");
      assertEquals(7, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addDouble(0.0);
      int int0 = constantPoolGen0.size;
      constantPoolGen0.addString("l2i%#");
      Integer integer0 = new Integer(256);
      int int1 = Pattern.COMMENTS;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(1, (-1806));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "l2i%#");
      ConstantMethodref constantMethodref0 = new ConstantMethodref((int) integer0, 256);
      constantMethodref0.clone();
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-682), (-1968526675));
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ObjectType.getInstance("l2i%#");
      int int2 = Pattern.LITERAL;
      constantPool0.copy();
      constantPoolGen0.lookupDouble(0.0);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantMethodref1, constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 256
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-2104533973), 27);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getConstant(27);
      constantArray0[1] = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen1.addConstant(constantInterfaceMethodref0, constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2104533973
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Constant[] constantArray0 = new Constant[11];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-4425), (-1203));
      Boolean boolean0 = new Boolean(false);
      ConstantClass constantClass0 = new ConstantClass((-2712));
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantPoolGen1.lookupInteger(44);
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantPool0);
      // Undeclared exception!
      try { 
        constantPoolGen1.addConstant(constantClass0, constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2712
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Constant[] constantArray0 = new Constant[8];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-1203));
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-1203), 3346);
      ConstantString constantString0 = new ConstantString(3346);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(222, 14);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupLong(14);
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool1);
      // Undeclared exception!
      try { 
        constantPoolGen1.addConstant(constantString0, constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3346
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addString("l2iF%#");
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      constantPoolGen0.addInteger((-1586));
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(2, 2);
      ConstantUtf8.getCachedInstance("l2iF%#");
      constantPool0.toString();
      Boolean boolean0 = new Boolean("l2iF%#");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      int int0 = Pattern.CANON_EQ;
      constantPool0.copy();
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ConstantPoolGen constantPoolGen2 = null;
      try {
        constantPoolGen2 = new ConstantPoolGen((Constant[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addMethodref("ACVm9'$ac0rS5=}", "ACVm9'$ac0rS5=}", "ACVm9'$ac0rS5=}");
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      constantPoolGen0.addInteger(4);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(5, 5);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      // Undeclared exception!
      try { 
        constantPoolGen1.addConstant(constantMethodHandle0, constantPoolGen0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown constant type CONSTANT_MethodHandle[15](reference_kind = 5, reference_index = 5)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = "Q@|K_`14";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.lookupInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      Constant[] constantArray0 = new Constant[2];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-1363), 47);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[0] = (Constant) constantFieldref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      ConstantLong constantLong0 = new ConstantLong((-383L));
      ConstantFieldref constantFieldref2 = new ConstantFieldref(constantFieldref1);
      ConstantLong constantLong1 = new ConstantLong((-383L));
      ConstantLong constantLong2 = new ConstantLong((-187L));
      ConstantFieldref constantFieldref3 = new ConstantFieldref(constantFieldref2);
      ConstantLong constantLong3 = new ConstantLong(constantLong2);
      constantFieldref2.setClassIndex(9);
      constantPoolGen0.addInteger((-1431655764));
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantFieldref2, constantPoolGen0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addString("l2iF%#");
      constantPoolGen0.getFinalConstantPool();
      constantPoolGen0.addInteger(2);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(2, 2);
      constantPoolGen0.addString("l2iF%#");
      constantPoolGen0.lookupInterfaceMethodref("{jBWlOgV4Zjb8", "[LStack next-to-next-to-top must be of type float[] but is ';", "l2iF%#");
      constantPoolGen0.lookupString("Unknown constant type ");
      ConstantInteger constantInteger0 = new ConstantInteger((-1));
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      syntheticRepository0.findClass("+D");
      org.apache.bcel.classfile.Visitor visitor0 = mock(org.apache.bcel.classfile.Visitor.class, new ViolatedAssumptionAnswer());
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, visitor0);
      DescendingVisitor descendingVisitor1 = new DescendingVisitor((JavaClass) null, descendingVisitor0);
      constantInteger0.accept(descendingVisitor1);
      ArrayType arrayType0 = null;
      try {
        arrayType0 = new ArrayType("l2iF%#", (-5094));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid number of dimensions: -5094
         //
         verifyException("org.apache.bcel.generic.ArrayType", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addInteger(256);
      constantPoolGen0.addMethodref("lD'=\"6", "lD'=\"6", "v19vD#1/2%<+H|Lp`");
      constantPoolGen0.lookupNameAndType("lD'=\"6", "v19vD#1/2%<+H|Lp`");
      constantPoolGen0.size = 46;
      constantPoolGen0.toString();
      constantPoolGen0.toString();
      assertEquals(7, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.size = 1899;
      constantPoolGen0.size = 709;
      constantPoolGen0.addInterfaceMethodref("y", "y", "y");
      constantPoolGen0.adjustSize();
      constantPoolGen0.lookupFloat(4);
      constantPoolGen0.addNameAndType("y", "y");
      constantPoolGen0.addLong(4613937818241073152L);
      INSTANCEOF iNSTANCEOF0 = new INSTANCEOF();
      // Undeclared exception!
      try { 
        iNSTANCEOF0.getLoadClassType(constantPoolGen0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Constant pool at index 0 is null.
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      org.apache.bcel.classfile.Visitor visitor0 = mock(org.apache.bcel.classfile.Visitor.class, new ViolatedAssumptionAnswer());
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.lookupDouble((-1769.4003938072));
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      ConstantDouble constantDouble1 = new ConstantDouble((-1));
      constantDouble1.setBytes((-1769.4003938072));
      constantPoolGen0.addConstant(constantDouble1, constantPoolGen1);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPoolGen0.addConstant(constantDouble1, constantPoolGen1);
      String string0 = "h1fM";
      ArrayType arrayType0 = null;
      try {
        arrayType0 = new ArrayType("h1fM", (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid number of dimensions: -1
         //
         verifyException("org.apache.bcel.generic.ArrayType", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addMethodref("l2iF%#", "l2iF%#", "l2iF%#");
      constantPoolGen0.addMethodref("l2iF%#", "l2iF%#", "l2iF%#");
      constantPoolGen0.addString("l2iF%#");
      constantPoolGen0.getFinalConstantPool();
      int int0 = Float.MIN_EXPONENT;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(134, (-126));
      constantPoolGen0.addFieldref("OR/\"=", "l2iF%#", "U.");
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((PipedOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = "ACVm9'$ac0rS5=}";
      constantPoolGen0.addMethodref("ACVm9'$ac0rS5=}", "ACVm9'$ac0rS5=}", "ACVm9'$ac0rS5=}");
      constantPoolGen0.getFinalConstantPool();
      constantPoolGen0.addInteger(4);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(5, 5);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ACVm9'$ac0rS5=}");
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository((ClassLoader) null);
      constantPoolGen0.lookupMethodref("ACVm9'$ac0rS5=}", "ACVm9'$ac0rS5=}", "ACVm9'$ac0rS5=}");
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      // Undeclared exception!
      try { 
        classLoaderRepository0.loadClass(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.ClassLoaderRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantFloat constantFloat0 = new ConstantFloat(1.0F);
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantFloat0;
      constantArray0[1] = (Constant) constantFloat0;
      constantArray0[2] = (Constant) constantFloat0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addConstant(constantFloat0, constantPoolGen1);
      constantPoolGen0.getConstantPool();
      CHECKCAST cHECKCAST0 = new CHECKCAST();
      // Undeclared exception!
      try { 
        cHECKCAST0.getLoadClassType(constantPoolGen1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected class `CONSTANT_Class' at index 0 and got CONSTANT_Float[4](bytes = 1.0)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantPoolGen1.addMethodref("@!C^X>tslpE@", "@!C^X>tslpE@", "@!C^X>tslpE@");
      constantPoolGen0.addFieldref("l2d", "@!C^X>tslpE@", "l2d");
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      constantPoolGen1.addFloat((-412.1F));
      int int0 = Pattern.UNICODE_CASE;
      ConstantFloat constantFloat0 = new ConstantFloat(4);
      Constant.setComparator(bCELComparator0);
      Constant constant0 = constantPoolGen0.getConstant(5);
      int int1 = Character.MIN_CODE_POINT;
      constantPoolGen1.addConstant(constant0, constantPoolGen0);
      ObjectType objectType0 = Type.STRING;
      assertEquals((byte)14, objectType0.getType());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addMethodref("3l2iF%#", "3l2iF%#", "3l2iF%#");
      int int0 = Character.MIN_RADIX;
      Boolean boolean0 = Boolean.TRUE;
      int int1 = Member.DECLARED;
      constantPoolGen0.lookupLong(4);
      int int2 = Pattern.DOTALL;
      BCELComparator bCELComparator0 = Method.getComparator();
      Constant.setComparator(bCELComparator0);
      Constant constant0 = constantPoolGen0.getConstant(4);
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen();
      constantPoolGen2.lookupNameAndType("3l2iF%#", "3l2iF%#");
      int int3 = Pattern.CASE_INSENSITIVE;
      ObjectType objectType0 = Type.STRING;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "3l2iF%#";
      stringArray0[5] = "3l2iF%#";
      constantPoolGen1.addConstant(constant0, constantPoolGen0);
      assertEquals(5, constantPoolGen0.getSize());
      
      ObjectType objectType1 = Type.STRING;
      int int4 = constantPoolGen1.lookupFloat((-553.76196F));
      assertEquals((-1), int4);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Member.PUBLIC;
      int int1 = Float.MIN_EXPONENT;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      constantPoolGen0.addFieldref("2i`#", "2i`#", "2i`#");
      constantPoolGen0.lookupLong(0);
      int int2 = Pattern.CANON_EQ;
      constantPoolGen0.getConstantPool();
      constantPoolGen0.addFieldref("2i`#", "2i`#", "2i`#");
      int int3 = Pattern.DOTALL;
      constantPoolGen0.getConstant(4);
      assertEquals(5, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantPoolGen1.addMethodref("fCNAiwyx/*63=x&iE", "fCNAiwyx/*63=x&iE", "fCNAiwyx/*63=x&iE");
      String string0 = "BJ`6Dq+";
      constantPoolGen0.addInterfaceMethodref("BJ`6Dq+", "fCNAiwyx/*63=x&iE", "BJ`6Dq+");
      int int0 = Pattern.CANON_EQ;
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      constantPoolGen1.addFloat(128);
      int int1 = Pattern.UNICODE_CASE;
      ConstantFloat constantFloat0 = new ConstantFloat(4);
      Constant[] constantArray0 = new Constant[8];
      Constant.setComparator(bCELComparator0);
      constantArray0[1] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Constant constant0 = constantPoolGen0.getConstant(5);
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantArray0);
      constantPool0.copy();
      ConstantPoolGen constantPoolGen3 = new ConstantPoolGen(constantPool0);
      constantPoolGen3.addConstant(constant0, constantPoolGen0);
      constantPool0.copy();
      ConstantPoolGen constantPoolGen4 = new ConstantPoolGen(constantPool0);
      String string1 = "_:";
      constantPoolGen4.addInterfaceMethodref("_:", "fCNAiwyx/*63=x&iE", "_:");
      ObjectType objectType0 = Type.STRING;
      // Undeclared exception!
      try { 
        Type.getArgumentTypesSize("BJ`6Dq+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: BJ`6Dq+
         //
         verifyException("org.apache.bcel.generic.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addMethodref("l2iF%#", "l2iF%#", "l2iF%#");
      constantPoolGen0.addString("l2iF%#");
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      constantPoolGen0.addInteger((-1586));
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(5, 5);
      constantPool0.toString();
      constantPool0.toString();
      constantPoolGen0.addFieldref("l2iF%#", "l2iF%#", "l2iF%#");
      ConstantInteger constantInteger0 = new ConstantInteger(6);
      ObjectType objectType0 = Type.STRING;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.addConstant(constantInteger0, constantPoolGen1);
      ObjectType objectType1 = Type.STRING;
      constantPoolGen0.lookupDouble(3875.183);
      int int0 = constantPoolGen1.lookupFloat(7);
      assertEquals(9, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addMethodref("l2iF%#", "l2iF%#", "l2iF%#");
      constantPoolGen0.addString("l2iF%#");
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("C");
      constantPoolGen0.addFieldref("l2d", "C", "[Z.nT)31|%{");
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      constantUtf8_0.clone();
      Constant.setComparator(bCELComparator0);
      ConstantString constantString0 = new ConstantString(4);
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantString0;
      constantArray0[3] = (Constant) constantString0;
      constantArray0[4] = (Constant) constantUtf8_0;
      constantArray0[5] = (Constant) constantUtf8_0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addInterfaceMethodref("_:", "l2d", "&");
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen();
      constantPoolGen0.addConstant(constantArray0[4], constantPoolGen1);
      assertEquals(17, constantPoolGen0.getSize());
      
      ObjectType objectType0 = Type.STRING;
      int int0 = Character.BYTES;
      ConstantPoolGen constantPoolGen3 = new ConstantPoolGen(constantArray0);
      constantPoolGen1.addString("vNP(eE)RS-iYe]QfK");
      ConstantPoolGen constantPoolGen4 = new ConstantPoolGen(constantArray0);
      constantPoolGen4.getFinalConstantPool();
      assertEquals(6, constantPoolGen4.getSize());
  }
}
