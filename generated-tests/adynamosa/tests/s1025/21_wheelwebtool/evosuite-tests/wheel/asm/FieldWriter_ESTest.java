/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 23 15:11:16 GMT 2019
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassWriter;
import wheel.asm.FieldVisitor;
import wheel.asm.FieldWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1142));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-889275714), "8uE_{QiNDjI #@.\b,", "8uE_{QiNDjI #@.\b,", "l&oy", (Object) null);
      classWriter0.version = (-1142);
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1110));
      classWriter0.index = (-1110);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-889275714), "", "l&oP", "l&oP", "");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1142));
      classWriter0.version = (-1142);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-889275702), "8uE_{QiNDjI #@.\b,", "wheel.asm.FieldWriter", "l&oy", (Object) null);
      int int0 = fieldWriter0.getSize();
      assertEquals(22, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1110));
      classWriter0.index = (-1110);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-889275714), "", "l&oP", "l&oP", "");
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1142));
      FieldVisitor fieldVisitor0 = classWriter0.visitField(2, "", "", (String) null, (Object) null);
      AnnotationVisitor annotationVisitor0 = fieldVisitor0.visitAnnotation("", false);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1189);
      FieldWriter fieldWriter0 = (FieldWriter)classWriter0.visitField(1189, "RuntimeInvisibleAnnotations", "f\"`If02rO?,", (String) null, "RuntimeInvisibleAnnotations");
      // Undeclared exception!
      try { 
        fieldWriter0.put((ByteVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(468);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 26, "", "", "%kROg+", "%kROg+");
      // Undeclared exception!
      try { 
        fieldWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1189);
      FieldVisitor fieldVisitor0 = classWriter0.visitField(1189, "RuntimeInvisibleAnnotations", "f\"`If02rO?,", (String) null, "RuntimeInvisibleAnnotations");
      // Undeclared exception!
      try { 
        fieldVisitor0.visitAnnotation((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1189);
      Object object0 = new Object();
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter(classWriter0, (-923), "'.9`izgz4z7E", "", (String) null, object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.lang.Object@1730f015
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1189);
      FieldWriter fieldWriter0 = (FieldWriter)classWriter0.visitField(1189, "RuntimeInvisibleAnnotations", "f\"`If02rO?,", "f\"`If02rO?,", "RuntimeInvisibleAnnotations");
      Attribute attribute0 = new Attribute("2a%1D8%u.b#l]x");
      fieldWriter0.visitAttribute(attribute0);
      ByteVector byteVector0 = new ByteVector(4096);
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1192));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1192), "e", "Z63", "Z63", "e");
      ByteVector byteVector0 = classWriter0.pool;
      classWriter0.version = 49;
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1142));
      FieldWriter fieldWriter0 = (FieldWriter)classWriter0.visitField(2, "", "", (String) null, (Object) null);
      Attribute attribute0 = new Attribute("8uE_{QiNDjI #@.\b,");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1192));
      FieldWriter fieldWriter0 = (FieldWriter)classWriter0.visitField(2, "e", "e", "e", "e");
      fieldWriter0.visitAnnotation("Z63", false);
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1189);
      FieldWriter fieldWriter0 = (FieldWriter)classWriter0.visitField(1189, "RuntimeInvisibleAnnotations", "f\"`If02rO?,", (String) null, "RuntimeInvisibleAnnotations");
      fieldWriter0.visitAnnotation("2a%1D8%u.b#l]x", true);
      int int0 = fieldWriter0.getSize();
      assertEquals(28, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1192));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1192), "e", "Z63", "Z63", "e");
      classWriter0.version = 49;
      int int0 = fieldWriter0.getSize();
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1189);
      FieldWriter fieldWriter0 = (FieldWriter)classWriter0.visitField(1189, "RuntimeInvisibleAnnotations", "f\"`If02rO?,", "f\"`If02rO?,", "RuntimeInvisibleAnnotations");
      fieldWriter0.visitAnnotation("2a%1D8%u.b#l]x", true);
      ByteVector byteVector0 = new ByteVector(4096);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1192));
      FieldWriter fieldWriter0 = (FieldWriter)classWriter0.visitField(2, "e", "e", "e", "e");
      fieldWriter0.visitAnnotation("PfN}x#z", false);
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1142));
      classWriter0.visitField(2, "", "", (String) null, (Object) null);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(35, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1192));
      FieldVisitor fieldVisitor0 = classWriter0.visitField(2, "e", "e", "e", "e");
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1192), "e", "Z63", "Z63", "e");
      assertFalse(fieldWriter0.equals((Object)fieldVisitor0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2248);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "TcIi{$oZI", "]", "]", (Object) null);
      fieldWriter0.visitEnd();
  }
}
