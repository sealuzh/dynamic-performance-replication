/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 05:00:55 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ClassAdapter;
import wheel.asm.ClassReader;
import wheel.asm.ClassVisitor;
import wheel.asm.ClassWriter;
import wheel.asm.Frame;
import wheel.asm.Item;
import wheel.asm.Label;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassReader_ESTest extends ClassReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      classReader0.getInterfaces();
      classReader0.getAccess();
      long long0 = classReader0.readLong(2);
      assertEquals(927, classReader0.header);
      assertEquals((-4990551337076522930L), long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      classReader0.getInterfaces();
      classReader0.getInterfaces();
      ClassWriter classWriter0 = new ClassWriter((-2317));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      classReader0.accept((ClassVisitor) classWriter0, (Attribute[]) null, 2);
      classReader0.getSuperName();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        classReader0.readConst((-1480), charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1480
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      char[] charArray0 = new char[8];
      charArray0[1] = '*';
      ClassWriter classWriter0 = new ClassWriter(191);
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      Attribute[] attributeArray0 = null;
      classReader0.accept((ClassVisitor) classWriter0, (Attribute[]) null, 16430);
      ClassWriter classWriter1 = new ClassWriter(191);
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader("The array of names must not be null");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      assertEquals(927, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(33, classReader0.getAccess());
      assertNotNull(classReader0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'P';
      ClassReader classReader1 = new ClassReader(classReader0.b);
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(927, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(927, classReader1.header);
      assertEquals(33, classReader0.getAccess());
      assertEquals(33, classReader1.getAccess());
      assertNotNull(classReader1);
      
      // Undeclared exception!
      try { 
        classReader1.readConst(1, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(927, classReader0.header);
      assertEquals(33, classReader0.getAccess());
      assertNotNull(classReader0);
      
      ClassWriter classWriter0 = new ClassWriter(1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      classReader0.accept((ClassVisitor) classWriter0, (Attribute[]) null, 2263);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(927, classReader0.header);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(33, classReader0.getAccess());
      
      char[] charArray0 = new char[8];
      charArray0[1] = '*';
      charArray0[2] = ';';
      charArray0[3] = '&';
      // Undeclared exception!
      try { 
        classReader0.readConst('\u0000', charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-39);
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(927, classReader0.header);
      assertEquals(33, classReader0.getAccess());
      assertNotNull(classReader0);
      
      String string0 = classReader0.getSuperName();
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(927, classReader0.header);
      assertEquals(33, classReader0.getAccess());
      assertNull(string0);
      
      ClassWriter classWriter0 = new ClassWriter((-406));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      int int0 = classWriter0.newNameType("java/lang/Object", "Signature");
      assertEquals(3, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classReader0.accept((ClassVisitor) classWriter0, (Attribute[]) null, (int) (byte) (-39));
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(927, classReader0.header);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(33, classReader0.getAccess());
      
      String[] stringArray0 = classReader0.getInterfaces();
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(927, classReader0.header);
      assertEquals(33, classReader0.getAccess());
      assertNotNull(stringArray0);
      
      // Undeclared exception!
      try { 
        classReader0.readShort((-406));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -406
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(927, classReader0.header);
      assertEquals(33, classReader0.getAccess());
      assertNotNull(classReader0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'R';
      charArray0[0] = '*';
      charArray0[2] = '*';
      String[] stringArray0 = classReader0.getInterfaces();
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(927, classReader0.header);
      assertEquals(33, classReader0.getAccess());
      assertNotNull(stringArray0);
      
      ClassWriter classWriter0 = new ClassWriter(452);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classAdapter0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java/lang/Object");
      assertFalse(boolean0);
      
      ClassWriter classWriter1 = new ClassWriter(2);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter1);
      
      classReader0.accept((ClassVisitor) classWriter0, (Attribute[]) null, 28);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(927, classReader0.header);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(33, classReader0.getAccess());
      assertNotSame(classWriter0, classWriter1);
      
      String string0 = classReader0.getSuperName();
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(927, classReader0.header);
      assertEquals(33, classReader0.getAccess());
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        classReader0.readClass(2, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 47806
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      assertEquals(927, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(33, classReader0.getAccess());
      assertNotNull(classReader0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'P';
      String[] stringArray0 = classReader0.getInterfaces();
      assertEquals(927, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(33, classReader0.getAccess());
      assertNotNull(stringArray0);
      
      ClassWriter classWriter0 = new ClassWriter((-1480));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classAdapter0);
      
      classReader0.accept((ClassVisitor) classAdapter0, (Attribute[]) null, 285212682);
      assertEquals(927, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(33, classReader0.getAccess());
      
      String string0 = classReader0.getSuperName();
      assertEquals(927, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(33, classReader0.getAccess());
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        classReader0.readConst(1260, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1260
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Throwable");
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(4463, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(33, classReader0.getAccess());
      assertNotNull(classReader0);
      
      int int0 = 0;
      char[] charArray0 = new char[1];
      Label[] labelArray0 = new Label[3];
      Label label0 = new Label();
      assertNotNull(label0);
      
      labelArray0[0] = label0;
      Label label1 = label0.successor;
      assertNull(label1);
      
      labelArray0[1] = null;
      Label[] labelArray1 = new Label[8];
      assertFalse(labelArray1.equals((Object)labelArray0));
      
      labelArray1[0] = label0;
      labelArray1[1] = label0;
      labelArray1[2] = label0;
      labelArray1[3] = label0;
      labelArray1[4] = null;
      Label label2 = label0.getFirst();
      assertNotNull(label2);
      assertSame(label0, label2);
      assertSame(label2, label0);
      
      labelArray1[5] = label2;
      labelArray1[6] = null;
      labelArray1[7] = label0;
      // Undeclared exception!
      try { 
        classReader0.readLabel(487, labelArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 487
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(927, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(33, classReader0.getAccess());
      assertNotNull(classReader0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'R';
      charArray0[1] = '*';
      charArray0[2] = '*';
      String[] stringArray0 = classReader0.getInterfaces();
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(927, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(33, classReader0.getAccess());
      assertNotNull(stringArray0);
      
      ClassWriter classWriter0 = new ClassWriter(4);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      ClassReader classReader1 = new ClassReader("java/lang/Object");
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(927, classReader1.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(33, classReader1.getAccess());
      assertNotNull(classReader1);
      
      String string0 = classReader0.getSuperName();
      assertFalse(classReader0.equals((Object)classReader1));
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(927, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(33, classReader0.getAccess());
      assertNull(string0);
      assertNotSame(classReader0, classReader1);
      
      char[] charArray1 = new char[9];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'R';
      charArray1[1] = 'R';
      charArray1[2] = 'R';
      ClassWriter classWriter1 = new ClassWriter(8);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter1);
      
      classReader0.accept((ClassVisitor) classWriter1, 927);
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(927, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(33, classReader0.getAccess());
      assertNotSame(classReader0, classReader1);
      assertNotSame(classWriter1, classWriter0);
      
      charArray1[3] = 'R';
      charArray1[4] = '*';
      charArray1[5] = '*';
      charArray1[6] = 'x';
      charArray1[7] = 'R';
      charArray1[8] = 'R';
      // Undeclared exception!
      try { 
        classReader0.readClass(70, charArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2560
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(927, classReader0.header);
      assertEquals(33, classReader0.getAccess());
      assertNotNull(classReader0);
      
      ClassWriter classWriter0 = new ClassWriter(4);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      Item item0 = classWriter0.newFieldItem("java/lang/Object", "java/lang/Object", "Exceptions");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item0);
      
      classReader0.copyPool(classWriter0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(927, classReader0.header);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(33, classReader0.getAccess());
      
      char[] charArray0 = new char[8];
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader("ConstantValue");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(927, classReader0.header);
      assertEquals(33, classReader0.getAccess());
      assertNotNull(classReader0);
      
      String[] stringArray0 = classReader0.getInterfaces();
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(927, classReader0.header);
      assertEquals(33, classReader0.getAccess());
      assertNotNull(stringArray0);
      
      ClassWriter classWriter0 = new ClassWriter(8);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classAdapter0);
      
      ClassReader classReader1 = new ClassReader("wheel.asm.ClassWriter");
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(7316, classReader1.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(33, classReader1.getAccess());
      assertNotNull(classReader1);
      
      int int0 = classWriter0.newUTF8("Sensitive");
      assertEquals(1, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classAdapter0.visit(1, 16777218, "wheel.asm.ClassWriter", "newLong", "addUninitializedType", stringArray0);
      assertFalse(classReader0.equals((Object)classReader1));
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(927, classReader0.header);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(33, classReader0.getAccess());
      assertNotSame(classReader0, classReader1);
      
      classWriter0.threshold = 7316;
      ClassWriter classWriter1 = new ClassWriter(1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter1);
      
      ClassWriter classWriter2 = new ClassWriter(classReader0, 4);
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(classWriter2.equals((Object)classWriter1));
      assertFalse(classWriter2.equals((Object)classWriter0));
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(927, classReader0.header);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(33, classReader0.getAccess());
      assertNotNull(classWriter2);
      
      ClassWriter classWriter3 = new ClassWriter((-715));
      assertFalse(classWriter3.equals((Object)classWriter1));
      assertFalse(classWriter3.equals((Object)classWriter0));
      assertFalse(classWriter3.equals((Object)classWriter2));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter3);
      
      classReader1.accept((ClassVisitor) classWriter1, (Attribute[]) null, 16777218);
      classReader1.getSuperName();
      classReader1.readLabel(177, (Label[]) null);
      classReader1.getClassName();
      int int1 = (-479);
      classReader0.readByte(int1);
      classReader0.getInterfaces();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)124;
      byteArray0[3] = (byte) (-20);
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.IOCase");
      ClassWriter classWriter0 = new ClassWriter(5432);
      classWriter0.newClassItem("d&$/%d:K5A");
      classReader0.accept((ClassVisitor) classWriter0, (Attribute[]) null, 2673);
      ClassWriter classWriter1 = new ClassWriter(164);
      FileSystemHandling.shouldAllThrowIOExceptions();
      classReader0.accept((ClassVisitor) classWriter1, (Attribute[]) null, 63);
      classReader0.readByte(1);
      classReader0.getClassName();
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader(classReader0.b, 2, 101);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 47629
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)123;
      byteArray0[4] = (byte)0;
      byte byte0 = (byte) (-72);
      byteArray0[5] = (byte) (-72);
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      char[] charArray0 = new char[6];
      ClassWriter classWriter0 = new ClassWriter((byte)0);
      classReader0.accept((ClassVisitor) classWriter0, (Attribute[]) null, (int) (byte)124);
      classReader0.readClass((byte)124, charArray0);
      ClassReader classReader1 = new ClassReader(byteArray0);
      classReader1.getItem(byte0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      char[] charArray0 = new char[10];
      charArray0[1] = '*';
      charArray0[2] = '*';
      classReader0.getInterfaces();
      ClassWriter classWriter0 = new ClassWriter(4);
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassWriter classWriter1 = new ClassWriter(classReader0, 24);
      classReader0.accept((ClassVisitor) classWriter1, (Attribute[]) null, 70);
      classReader0.getSuperName();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      char[] charArray0 = new char[8];
      charArray0[0] = 'P';
      classReader0.getClassName();
      charArray0[1] = '*';
      int int0 = 106;
      // Undeclared exception!
      try { 
        classReader0.readUTF8(106, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          byte[] byteArray0 = new byte[6];
          byteArray0[0] = (byte)124;
          byteArray0[2] = (byte)123;
          byteArray0[3] = (byte) (-20);
          byteArray0[4] = (byte) (-20);
          byteArray0[5] = (byte) (-72);
          ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
          char[] charArray0 = new char[6];
          classReader0.getInterfaces();
          ClassWriter classWriter0 = new ClassWriter((byte)0);
          classWriter0.newClassItem("RuntimeVisibleParameterAnnotations");
          classReader0.getSuperName();
          // Undeclared exception!
          try { 
            classReader0.readClass((byte) (-72), charArray0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
          
          } catch(ArrayIndexOutOfBoundsException e) {
             //
             // no message in exception (getMessage() returned null)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte) (-20);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-72);
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      char[] charArray0 = new char[6];
      ClassWriter classWriter0 = new ClassWriter((byte)0);
      ClassWriter classWriter1 = new ClassWriter(classReader0, (byte)123);
      ClassWriter classWriter2 = new ClassWriter((-679));
      // Undeclared exception!
      try { 
        classReader0.readShort((byte) (-20));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -20
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)124;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte) (-20);
      byteArray0[4] = (byte) (-20);
      byteArray0[5] = (byte) (-72);
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      char[] charArray0 = new char[6];
      ClassWriter classWriter0 = new ClassWriter((byte)0);
      classWriter0.newClassItem("RuntimeVisibleParameterAnnotations");
      int int0 = 424;
      classReader0.accept((ClassVisitor) classWriter0, (Attribute[]) null, (int) (byte) (-72));
      classReader0.getSuperName();
      classReader0.readClass((byte) (-72), charArray0);
      classReader0.getSuperName();
      classReader0.readConst(int0, charArray0);
      int int1 = 607;
      classReader0.getItem(int1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      char[] charArray0 = new char[8];
      classReader0.getInterfaces();
      ClassWriter classWriter0 = new ClassWriter(8);
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassReader classReader1 = new ClassReader("wheel.asm.ClassWriter");
      int int0 = Frame.BOOLEAN;
      Attribute[] attributeArray0 = null;
      classWriter0.threshold = (-2924);
      ClassWriter classWriter1 = new ClassWriter(1);
      // Undeclared exception!
      try { 
        classReader1.readConst(131, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      char[] charArray0 = new char[7];
      String[] stringArray0 = classReader0.getInterfaces();
      ClassWriter classWriter0 = new ClassWriter(8);
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassReader classReader1 = new ClassReader("wheel.asm.ClassWriter");
      classWriter0.newUTF8("Sensitive");
      classAdapter0.visit(1, 16777218, "wheel.asm.ClassWriter", "newLong", "addUninitializedType", stringArray0);
      classWriter0.threshold = 7316;
      ClassWriter classWriter1 = new ClassWriter(1);
      ClassWriter classWriter2 = new ClassWriter(2);
      ClassWriter classWriter3 = new ClassWriter(1);
      ClassWriter classWriter4 = new ClassWriter(53);
      classReader0.accept((ClassVisitor) classAdapter0, (Attribute[]) null, 424);
      classReader1.getSuperName();
      classReader0.readByte(53);
      classReader1.readClass(4096, charArray0);
      // Undeclared exception!
      try { 
        classReader0.getItem(753);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 753
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)124;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte) (-20);
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      ClassWriter classWriter0 = new ClassWriter(classReader0, (byte)124);
      classWriter0.newUTF8("Sensitive");
      ClassWriter classWriter1 = new ClassWriter((-4406));
      ClassWriter classWriter2 = new ClassWriter(classReader0, 1);
      ClassWriter classWriter3 = new ClassWriter(1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      classReader0.accept((ClassVisitor) classWriter0, (Attribute[]) null, 13);
      ClassReader classReader1 = new ClassReader(classReader0.b, (-1), 1807);
      int int0 = 251658240;
      ClassWriter classWriter4 = new ClassWriter(int0);
      classReader0.copyPool(classWriter4);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      char[] charArray0 = new char[7];
      classReader0.getInterfaces();
      ClassReader classReader1 = new ClassReader("wheel.asm.ClassWriter");
      ClassWriter classWriter0 = new ClassWriter(1);
      ClassWriter classWriter1 = new ClassWriter(53);
      classReader1.getSuperName();
      classReader0.getSuperName();
      classReader0.readByte(53);
      // Undeclared exception!
      try { 
        classReader0.getItem(753);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 753
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      char[] charArray0 = new char[8];
      classReader0.getInterfaces();
      ClassWriter classWriter0 = new ClassWriter(8);
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassReader classReader1 = new ClassReader("wheel.asm.ClassWriter");
      classWriter0.newUTF8("Sensitive");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      classWriter0.threshold = 7316;
      ClassWriter classWriter1 = new ClassWriter(1);
      ClassWriter classWriter2 = new ClassWriter(1);
      classWriter0.newUTF8("wheel.asm.ClassWriter");
      ClassWriter classWriter3 = new ClassWriter(7316);
      classWriter1.invalidFrames = false;
      classReader0.accept((ClassVisitor) classAdapter0, (Attribute[]) null, 424);
      classReader1.getSuperName();
      classReader1.readClass(4096, charArray0);
      classReader1.getSuperName();
      // Undeclared exception!
      try { 
        classReader1.readConst(4, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }
}
