/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 01:53:10 GMT 2018
 */

package org.la4j.vector.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Random;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.DenseMatrix;
import org.la4j.operation.VectorMatrixOperation;
import org.la4j.operation.VectorOperation;
import org.la4j.operation.VectorVectorOperation;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.VectorFactory;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorPredicate;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompressedVector_ESTest extends CompressedVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.random((-1087), (double) (-1087), (Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 2577;
      CompressedVector compressedVector0 = new CompressedVector(2577, 2577);
      compressedVector0.max();
      compressedVector0.iterator();
      SparseVector.zero(2577, (-1));
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      compressedVector0.toMatrixMarket(numberFormat0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      CompressedVector compressedVector1 = CompressedVector.fromCollection(linkedList0);
      VectorPredicate vectorPredicate0 = mock(VectorPredicate.class, new ViolatedAssumptionAnswer());
      compressedVector1.non(vectorPredicate0);
      double[] doubleArray0 = new double[0];
      CompressedVector.fromArray(doubleArray0);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 2577;
      doubleArray1[1] = (double) 2577;
      compressedVector0.manhattanNorm();
      doubleArray1[2] = (double) 2577;
      CompressedVector.fromArray(doubleArray1);
      double double0 = 0.0;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints();
      // Undeclared exception!
      try { 
        SparseVector.random((-1516), 0.0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -1516
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1705);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(1672, vectorFunction0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1705, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Consumer<Double> consumer0 = (Consumer<Double>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[0];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      byte[] byteArray0 = compressedVector0.toBinary();
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 709.979321600956;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.eachNonZero(vectorProcedure0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 709.979321600956;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.nonZeroIterator();
      compressedVector0.toBinary();
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      MockRandom mockRandom0 = new MockRandom(37);
      CompressedVector compressedVector1 = CompressedVector.random(37, 0.0, (Random) mockRandom0);
      boolean boolean0 = compressedVector1.nonZeroAt(26);
      assertFalse(boolean0);
      assertEquals(0.0, compressedVector1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1);
      compressedVector0.setAll(3857.0925153);
      compressedVector0.swapElements(25, (-1342));
      assertEquals(1, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      String string0 = compressedVector0.mkString(numberFormat0, "hdmkpx");
      assertEquals("", string0);
      
      compressedVector0.setAll(0.0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      compressedVector0.setAll(1.0);
      assertEquals(0, compressedVector0.cardinality());
      
      boolean boolean0 = compressedVector0.nonZeroAt(751);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2498.77524977611;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2692.38159489);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 1991.987903927945;
      doubleArray0[6] = 0.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.setAll(0.0);
      Vector.fromCSV("");
      compressedVector0.multiply(0.0);
      compressedVector0.eachNonZero((VectorProcedure) null);
      compressedVector0.iterator();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)0;
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("Cardinality should be less then or equal to capacity: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        compressedVector0.each((VectorProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-2144.940758);
      doubleArray0[2] = 2391.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 2735.10456;
      doubleArray0[5] = 0.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      int int0 = (-87);
      VectorPredicate vectorPredicate0 = mock(VectorPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(vectorPredicate0).test(anyInt() , anyDouble());
      compressedVector0.non(vectorPredicate0);
      compressedVector0.copy();
      VectorMatrixOperation<Integer> vectorMatrixOperation0 = (VectorMatrixOperation<Integer>) mock(VectorMatrixOperation.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        DenseMatrix.unit((-87), (-87));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 8;
      CompressedVector compressedVector0 = new CompressedVector(2748, 8);
      compressedVector0.set(8, 8);
      // Undeclared exception!
      try { 
        compressedVector0.mkString((NumberFormat) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-225.730789948431);
      doubleArray0[2] = (-825.49979035838);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((-2044), vectorFunction0);
      compressedVector0.iterator();
      // Undeclared exception!
      try { 
        CompressedVector.zero((-2044), 1640);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -2044
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2);
      compressedVector0.setAll(2);
      // Undeclared exception!
      try { 
        compressedVector0.updateAt((-1382), (VectorFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(2763, 2763);
      compressedVector0.toString();
      compressedVector0.toDenseVector();
      int int0 = 1692;
      int int1 = 3562;
      CompressedVector compressedVector1 = new CompressedVector(3562, 2763);
      compressedVector1.sliceLeft(3562);
      int int2 = 16;
      // Undeclared exception!
      try { 
        compressedVector0.set(3562, 16);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '3562' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      int int0 = 2141;
      CompressedVector.fromMap(hashMap0, 2141);
      int int1 = 1229;
      MockRandom mockRandom0 = new MockRandom(1229);
      CompressedVector compressedVector0 = new CompressedVector(2141);
      double[] doubleArray0 = new double[12];
      doubleArray0[0] = (-825.49979035838);
      doubleArray0[1] = (double) 1229;
      doubleArray0[2] = (-825.49979035838);
      doubleArray0[3] = (-225.730789948431);
      CompressedVector.fromArray(doubleArray0);
      int int2 = (-2044);
      // Undeclared exception!
      try { 
        compressedVector0.updateAt((-2044), (VectorFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-2144.940758);
      doubleArray0[2] = 2391.0;
      doubleArray0[3] = 1.0;
      CompressedVector compressedVector0 = CompressedVector.zero(2752);
      compressedVector0.setAll((-1.0));
      CompressedVector compressedVector1 = CompressedVector.zero(2739);
      // Undeclared exception!
      try { 
        compressedVector1.getOrElse(2752, 2498.77524977611);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '2752' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1705);
      compressedVector0.swapElements(1705, 122);
      assertEquals(1705, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 0;
      CompressedVector compressedVector0 = CompressedVector.zero(0);
      compressedVector0.setAll(0);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(0, (-1414));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(3737);
      compressedVector0.swapElements(3737, 3737);
      assertEquals(3737, compressedVector0.length());
      
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      CompressedVector compressedVector1 = CompressedVector.fromMap(hashMap0, 3737);
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(3737, compressedVector1.length());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(2021161080);
      hashMap0.put(integer0, (Integer) null);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 110);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(36, 36);
      compressedVector0.setAll(36);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      double double0 = compressedVector0.getOrElse(3, 2504.686971899583);
      assertEquals(36.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 5;
      int[] intArray0 = new int[5];
      intArray0[0] = 1364;
      intArray0[1] = 5;
      intArray0[2] = 5;
      intArray0[3] = 1700;
      intArray0[4] = 5;
      CompressedVector compressedVector0 = new CompressedVector(1700, 5, doubleArray0, intArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        compressedVector0.updateAt(5, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CompressedVector.zero(0);
      CompressedVector compressedVector0 = CompressedVector.zero(2752, 0);
      compressedVector0.setAll(433.7842);
      CompressedVector compressedVector1 = CompressedVector.zero(32);
      assertEquals(32, compressedVector1.length());
      
      double double0 = compressedVector0.getOrElse(125, 0);
      assertEquals(433.7842, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2740, 497);
      compressedVector0.nonZeroAt(2);
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      Integer integer0 = new Integer(2);
      Byte byte0 = new Byte((byte)16);
      hashMap0.put(integer0, byte0);
      Object object0 = new Object();
      Byte byte1 = new Byte((byte) (-66));
      hashMap0.getOrDefault(object0, byte1);
      CompressedVector compressedVector1 = CompressedVector.fromMap(hashMap0, 497);
      compressedVector1.nonZeroAt(2740);
      compressedVector0.nonZeroIterator();
      compressedVector1.nonZeroIterator();
      compressedVector1.setAll(2740);
      assertEquals(497, compressedVector1.cardinality());
      
      CompressedVector.zero(2741);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 497;
      doubleArray0[1] = (double) 2741;
      doubleArray0[2] = (double) 2741;
      doubleArray0[3] = (double) 2740;
      doubleArray0[4] = (double) 2;
      CompressedVector compressedVector2 = CompressedVector.fromArray(doubleArray0);
      assertEquals(1.0, compressedVector2.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(446, 446);
      Vector vector0 = compressedVector0.blankOfLength(47);
      DenseVector denseVector0 = DenseVector.zero(47);
      compressedVector0.equals((Vector) denseVector0, (double) 47);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      vector0.each(vectorProcedure0);
      compressedVector0.toMatrixMarket();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 47;
      doubleArray0[1] = (double) 47;
      doubleArray0[2] = (double) 47;
      doubleArray0[3] = (double) 446;
      doubleArray0[4] = 5416.027708455965;
      doubleArray0[5] = 2.0;
      doubleArray0[6] = (double) 47;
      SparseVector.fromArray(doubleArray0);
      CompressedVector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV("org.la4j.iterator.CursorIterator");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = 500.938472;
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      Integer integer0 = new Integer((-152));
      Byte byte0 = new Byte((byte)0);
      hashMap0.put(integer0, byte0);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      Vector vector0 = compressedVector0.blankOfLength(2740);
      assertEquals(2740, vector0.length());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 13;
      CompressedVector compressedVector0 = CompressedVector.zero(13);
      compressedVector0.setAll((-5531.403955));
      int int1 = 0;
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(0, 13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1, 1);
      compressedVector0.setAll(1);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-1630), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 0;
      CompressedVector compressedVector0 = CompressedVector.zero(13);
      compressedVector0.setAll((-5531.403955));
      int int1 = 0;
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(0, 13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(16, 16);
      compressedVector0.setAll(100.0);
      compressedVector0.swapElements(1603, (-1414));
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      CompressedVector.zero(1434, 948);
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, (-3742));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -3742
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = (-1087);
      int int1 = 1675;
      CompressedVector compressedVector0 = new CompressedVector(1675);
      compressedVector0.setAll(1675);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-1087), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(17, 17);
      compressedVector0.setAll(Double.NEGATIVE_INFINITY);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-1087), 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2748, 1);
      compressedVector0.set(1, (-78.59007862633734));
      compressedVector0.swapElements(2725, 1);
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)1).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      // Undeclared exception!
      try { 
        compressedVector0.to(vectorFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = 2247;
      CompressedVector compressedVector0 = new CompressedVector(2247, 2247);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      // Undeclared exception!
      try { 
        compressedVector0.blankOfLength((-578));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -578
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (byte)18;
      doubleArray0[2] = (double) (byte)18;
      doubleArray0[3] = (double) (byte)18;
      doubleArray0[4] = (double) (byte)18;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        compressedVector0.non((VectorPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1675);
      compressedVector0.setAll(1675);
      compressedVector0.subtract((-896.76132682));
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      DecimalFormat decimalFormat0 = new DecimalFormat();
      compressedVector0.toMatrixMarket((NumberFormat) decimalFormat0);
      compressedVector0.shuffle();
      compressedVector0.eachNonZero(vectorProcedure0);
      // Undeclared exception!
      try { 
        compressedVector0.each((VectorProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2548.83019586019);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2748, 8);
      compressedVector0.set(8, 8);
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      // Undeclared exception!
      try { 
        compressedVector0.to(vectorFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 709.979321600956;
      CompressedVector.fromArray(doubleArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)46;
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(20, 20);
      compressedVector0.setAll(20);
      compressedVector0.swapElements(19, 19);
      boolean boolean0 = compressedVector0.nonZeroAt(19);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(3739);
      compressedVector0.setAll((-959.8126615224545));
      compressedVector0.set(2424, 0);
      assertEquals(0.9997325488098422, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 709.979321600956;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(1, compressedVector0.cardinality());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      compressedVector0.nonZeroIterator();
      compressedVector0.toBinary();
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1675);
      compressedVector0.setAll(1675);
      Vector vector0 = compressedVector0.subtract((-896.76132682));
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      compressedVector0.blankOfLength(1675);
      DenseVector.zero(1650);
      compressedVector0.equals(vector0, (double) 0);
      // Undeclared exception!
      try { 
        compressedVector0.each((VectorProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(20, 20);
      compressedVector0.setAll(20);
      compressedVector0.set(16, 16);
      // Undeclared exception!
      try { 
        compressedVector0.getOrElse(20, 16);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '20' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1675);
      compressedVector0.setAll(1675);
      double[] doubleArray0 = new double[0];
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(1, vectorFunction0);
      compressedVector1.iterator();
      MockRandom mockRandom0 = new MockRandom();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(68, 68);
      compressedVector0.setAll(68);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(2, vectorFunction0);
      compressedVector0.swapElements((-2026), 68);
      assertEquals(0.9852941176470589, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1675);
      compressedVector0.setAll(1675);
      compressedVector0.subtract((-896.76132682));
      VectorOperation<Byte> vectorOperation0 = (VectorOperation<Byte>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(vectorOperation0).apply(any(org.la4j.vector.SparseVector.class));
      compressedVector0.apply(vectorOperation0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-2932.044915601), (-896.76132682), (double)1675, (double)1675, (-2932.044915601)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.blankOfLength(1675);
      VectorPredicate vectorPredicate0 = mock(VectorPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(vectorPredicate0).test(anyInt() , anyDouble());
      compressedVector1.is(vectorPredicate0);
      compressedVector1.nonZeroAt(1648);
      org.evosuite.runtime.Random.setNextRandom((-1393));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte) (-4);
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte) (-75);
      byteArray0[6] = (byte) (-64);
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 709.979321600956;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)64;
      int int0 = 9;
      compressedVector0.nonZeroAt((-4223));
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      // Undeclared exception!
      try { 
        compressedVector0.to(vectorFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(122);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      compressedVector0.nonZeroAt((-2507));
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      CompressedVector compressedVector1 = compressedVector0.to(vectorFactory0);
      compressedVector1.equals((Vector) compressedVector0, (double) (-2507));
      org.evosuite.runtime.Random.setNextRandom(6);
      byte[] byteArray0 = compressedVector0.toBinary();
      CompressedVector compressedVector2 = CompressedVector.fromBinary(byteArray0);
      compressedVector2.add(1621.2765513482082);
      // Undeclared exception!
      try { 
        compressedVector0.set(122, (-842.79501));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '122' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(40, 23);
      byte[] byteArray0 = compressedVector0.toBinary();
      compressedVector0.set(23, 23);
      CompressedVector compressedVector1 = CompressedVector.fromBinary(byteArray0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0, compressedVector1.cardinality());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1675);
      compressedVector0.setAll(1675);
      compressedVector0.subtract((-896.76132682));
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      DecimalFormat decimalFormat0 = new DecimalFormat();
      compressedVector0.sum();
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-2881), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(6);
      compressedVector0.setAll(6);
      compressedVector0.blank();
      compressedVector0.sum();
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(1, (-2210));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(16, 1);
      compressedVector0.setAll(16);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(3, (-1642));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(9);
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      CompressedVector compressedVector1 = CompressedVector.fromMap(hashMap0, 40);
      assertEquals(0.0, compressedVector1.density(), 0.01);
      
      compressedVector1.set(9, 9);
      assertEquals(1, compressedVector1.cardinality());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(63);
      compressedVector0.setAll(63);
      compressedVector0.multiply((-1129.6521));
      compressedVector0.sum();
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-1342), 24);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2725, 3);
      compressedVector0.set(3, 3);
      Vector vector0 = compressedVector0.copy();
      compressedVector0.hadamardProduct(vector0);
      compressedVector0.swapElements(1145, (-739));
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(63);
      compressedVector0.setAll(63);
      Vector vector0 = compressedVector0.shuffle();
      vector0.hadamardProduct(compressedVector0);
      vector0.max();
      compressedVector0.set(47, (-1.0));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CompressedVector.fromCollection(linkedList0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1675);
      compressedVector0.set(1, 1);
      compressedVector0.swapElements((-1087), 0);
      compressedVector0.copyOfLength(0);
      CompressedVector.zero(0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.shuffle();
      assertEquals(5.970149253731343E-4, compressedVector1.density(), 0.01);
      
      double double0 = compressedVector0.sum();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2748, 1);
      compressedVector0.set(1, 1);
      compressedVector0.swapElements(1, 2748);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(8);
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      SparseVector.zero(8);
      compressedVector0.mkString(numberFormat0, "LU");
      compressedVector0.set(3, 2624.773);
      compressedVector0.swapElements(3, 8);
      CompressedVector compressedVector1 = CompressedVector.zero(3);
      CompressedVector.zero(16);
      // Undeclared exception!
      try { 
        compressedVector1.getOrElse(8, (-1187));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '8' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2748, 1);
      compressedVector0.set(1, (-78.59007862633734));
      compressedVector0.swapElements((-3223), 1);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(132);
      compressedVector0.set(36, 132);
      compressedVector0.nonZeroIterator();
      compressedVector0.swapElements(132, 36);
      compressedVector0.set(6, 132);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(132);
      compressedVector0.set(36, 132);
      compressedVector0.nonZeroIterator();
      compressedVector0.swapElements((-137), 32);
      compressedVector0.swapElements(36, (-1139));
      org.evosuite.runtime.Random.setNextRandom(2291);
      compressedVector0.nonZeroAt(441);
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[1];
      intArray0[0] = 441;
      CompressedVector compressedVector1 = null;
      try {
        compressedVector1 = new CompressedVector((-2959), 32, doubleArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -2959
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (-324.76798407);
      doubleArray0[2] = (double) 408;
      doubleArray0[3] = (double) 3;
      int[] intArray0 = new int[9];
      intArray0[0] = 408;
      intArray0[1] = 3;
      intArray0[2] = 3;
      intArray0[3] = 3;
      intArray0[4] = 3;
      intArray0[5] = 408;
      intArray0[6] = 3;
      intArray0[7] = 408;
      intArray0[8] = 408;
      CompressedVector compressedVector0 = new CompressedVector(408, 3, doubleArray0, intArray0);
      compressedVector0.sliceLeft(408);
      // Undeclared exception!
      try { 
        compressedVector0.getOrElse((-1), 3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '-1' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }
}
