/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 22:42:45 GMT 2018
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataInput;
import java.net.URI;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.Code;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.InnerClass;
import org.apache.bcel.classfile.InnerClasses;
import org.apache.bcel.classfile.LineNumberTable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.RuntimeInvisibleParameterAnnotations;
import org.apache.bcel.classfile.Signature;
import org.apache.bcel.classfile.SourceFile;
import org.apache.bcel.generic.ArrayType;
import org.apache.bcel.generic.BranchInstruction;
import org.apache.bcel.generic.CHECKCAST;
import org.apache.bcel.generic.CodeExceptionGen;
import org.apache.bcel.generic.CompoundInstruction;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.IADD;
import org.apache.bcel.generic.Instruction;
import org.apache.bcel.generic.InstructionHandle;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.JSR;
import org.apache.bcel.generic.JSR_W;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.Type;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConstantPoolGen_ESTest extends ConstantPoolGen_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantClass constantClass0 = new ConstantClass(2213);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantClass0;
      constantArray0[1] = (Constant) constantClass0;
      ConstantPoolGen constantPoolGen1 = null;
      try {
        constantPoolGen1 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2213
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantArray0[0], constantPoolGen1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(2832, 2832);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      assertEquals(2, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      int int0 = 1450;
      int int1 = 0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(1450, 0);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantDouble constantDouble0 = new ConstantDouble(0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[1] = (Constant) constantDouble1;
      ConstantString constantString0 = new ConstantString(0);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[2] = (Constant) constantString1;
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[3] = (Constant) constantMethodref1;
      int int2 = 0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(1450, 0);
      Constant constant0 = constantNameAndType0.copy();
      constantArray0[4] = constant0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantPool0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantMethodref cannot be cast to org.apache.bcel.classfile.ConstantUtf8
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addMethodref("Stack next-to-next-to-top must be of type float[] but is '", "Stack next-to-next-to-top must be of type float[] but is '", "Stack next-to-next-to-top must be of type float[] but is '");
      // Undeclared exception!
      try { 
        constantPoolGen0.addMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      assertEquals(1, constantPool0.getLength());
      
      int int0 = constantPoolGen0.lookupFieldref("?e$ee.hU,-_-]\"XY<L", "The '", "?e$ee.hU,-_-]\"XY<L");
      int int1 = constantPoolGen0.lookupMethodref("?e$ee.hU,-_-]\"XY<L", "\n", "\n");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupNameAndType("lshl", "vqGw");
      constantPoolGen0.lookupInteger((-3263));
      constantPoolGen0.addMethodref("yZp.", "yZp.", "yZp.");
      constantPoolGen0.addString("lrem");
      constantPoolGen0.addFloat(2368.1865F);
      int int0 = (-2235);
      ObjectType objectType0 = Type.OBJECT;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "lrem";
      String string0 = null;
      String string1 = "#r)F`+n_";
      CompoundInstruction compoundInstruction0 = null;
      InstructionList instructionList0 = null;
      try {
        instructionList0 = new InstructionList((CompoundInstruction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.addNameAndType("&q/FIc", "&q/FIc");
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.size = (-3752);
      // Undeclared exception!
      try { 
        constantPoolGen0.addClass("^mY+}{DUvW");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = constantPoolGen0.toString();
      assertEquals("", string0);
      
      int int0 = constantPoolGen0.lookupNameAndType("", "");
      assertEquals((-1), int0);
      assertEquals(1, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.size = 0;
      String string0 = "The array of names must not be null";
      // Undeclared exception!
      try { 
        constantPoolGen0.addMethodref("", "", "The array of names must not be null");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = constantPoolGen0.addString("tC=Z;[x\r*{^3");
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = constantPoolGen0.addInterfaceMethodref("Y:IG#-m:0~;J", "Y:IG#-m:0~;J", "Y:IG#-m:0~;J");
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.lookupInterfaceMethodref("XL~AKmFF", "XL~AKmFF", "}&");
      assertEquals((-1), int0);
      
      String string0 = constantPoolGen0.toString();
      assertEquals("1)null\n", string0);
      assertEquals(2, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = "";
      constantPoolGen0.lookupMethodref("I)6ec[e=Y.p=y/S|", "37Pu\"Utz**H;~", "");
      String string1 = ",[@";
      constantPoolGen0.addFieldref("", ",[@", "");
      int int0 = 1294;
      ConstantFloat constantFloat0 = new ConstantFloat(54.9119F);
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantFloat0;
      constantArray0[1] = (Constant) constantFloat0;
      constantArray0[2] = (Constant) constantFloat0;
      constantArray0[3] = (Constant) constantFloat0;
      constantArray0[4] = (Constant) constantFloat0;
      constantArray0[5] = (Constant) constantFloat0;
      constantArray0[6] = (Constant) constantFloat0;
      constantArray0[7] = (Constant) constantFloat0;
      constantArray0[8] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ConstantPool constantPool1 = constantPool0.copy();
      constantFloat0.getConstantValue(constantPool1);
      // Undeclared exception!
      try { 
        constantPoolGen0.setConstant(1294, constantFloat0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1294
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte)46;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool1);
      // Undeclared exception!
      try { 
        constantPoolGen0.getConstant(3497);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3497
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantClass constantClass0 = new ConstantClass(47);
      constantArray0[0] = (Constant) constantClass0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-1554));
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[1] = (Constant) constantMethodType1;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.lookupInteger(0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(108, (-1554));
      constantMethodType1.setDescriptorIndex(47);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        constantPool0.getConstant(108, (byte) (-24));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 108. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.lookupInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantClass constantClass0 = new ConstantClass(2213);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantClass0;
      constantArray0[1] = (Constant) constantClass0;
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantClass0, constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2213
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = "&h]d~5gOZ2\"";
      String string1 = "' is not of a reference type as expected.";
      constantPoolGen0.addFieldref("&h]d~5gOZ2\"", "' is not of a reference type as expected.", "&h]d~5gOZ2\"");
      constantPoolGen0.lookupMethodref("&h]d~5gOZ2\"", "&h]d~5gOZ2\"", "&h]d~5gOZ2\"");
      String string2 = "=";
      JSR jSR0 = new JSR();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) jSR0);
      InstructionHandle instructionHandle0 = null;
      PUSH pUSH0 = new PUSH(constantPoolGen0, (double) 5);
      // Undeclared exception!
      try { 
        instructionList0.insert((InstructionHandle) null, (CompoundInstruction) pUSH0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.size = 7;
      constantPoolGen0.addDouble((-1064.6));
      constantPoolGen0.getConstantPool();
      assertEquals(3, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Constant[] constantArray0 = new Constant[4];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("Unexpected constant type: ");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(0, 1861);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(1334, 117);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[3] = (Constant) constantFieldref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPoolGen constantPoolGen1 = null;
      try {
        constantPoolGen1 = new ConstantPoolGen(constantPool1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1334
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupInteger(4);
      ConstantFloat constantFloat0 = new ConstantFloat((-1));
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      int int0 = constantPoolGen0.addConstant(constantFloat0, constantPoolGen1);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPoolGen1.addLong(2213);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(20, (-3564));
      constantPoolGen0.setConstant(2, constantNameAndType0);
      assertEquals((-3564), constantNameAndType0.getSignatureIndex());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Constant[] constantArray0 = new Constant[8];
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      ConstantFloat constantFloat0 = new ConstantFloat(1654.1459F);
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen();
      ConstantString constantString0 = new ConstantString(3);
      // Undeclared exception!
      try { 
        constantPoolGen1.addConstant(constantString0, constantPoolGen0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(0, 782);
      Constant constant0 = constantNameAndType0.copy();
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantArray0);
      ConstantPoolGen constantPoolGen3 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen2.addConstant(constant0, constantPoolGen3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 782
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantFieldref constantFieldref0 = new ConstantFieldref(679, 679);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool1);
      constantPoolGen0.addNameAndType("&", "&");
      ConstantMethodref constantMethodref0 = new ConstantMethodref(6, 679);
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool2);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantMethodref0, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 679
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "/dB#c8V*f/k");
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.toString();
      constantPoolGen0.adjustSize();
      constantPoolGen0.addLong(0L);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("g}");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      int int0 = constantPoolGen0.addConstant(constantUtf8_0, constantPoolGen1);
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("%");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[0] = (Constant) constantUtf8_1;
      ConstantUtf8 constantUtf8_2 = new ConstantUtf8(constantUtf8_1);
      constantArray0[1] = (Constant) constantUtf8_2;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.lookupInterfaceMethodref("%", "%", "%");
      assertEquals((-1), int0);
      assertEquals(2, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Constant[] constantArray0 = new Constant[8];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-441), 2056);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[0] = (Constant) constantMethodref1;
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      constantArray0[1] = (Constant) constantFloat0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(2056);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[2] = (Constant) constantMethodType1;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("Unexpected constant type: #Dont call getValueFloat() on a non FLOAT ElementValue#^/zyBD`79)#zn}");
      constantArray0[3] = (Constant) constantUtf8_0;
      ConstantMethodType constantMethodType2 = new ConstantMethodType(constantMethodType1);
      constantArray0[4] = (Constant) constantMethodType2;
      int int0 = 1739;
      ConstantMethodref constantMethodref2 = new ConstantMethodref(1739, 2056);
      ConstantMethodref constantMethodref3 = new ConstantMethodref(constantMethodref2);
      constantArray0[5] = (Constant) constantMethodref3;
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[6] = (Constant) constantFloat1;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(2056, 2056);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[7] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen1 = null;
      try {
        constantPoolGen1 = new ConstantPoolGen(constantPool0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1739
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addClass("K5xp'(");
      // Undeclared exception!
      try { 
        constantPoolGen0.addClass((ObjectType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addClass("OnG_0*_Y0v&/SiZ,D");
      int int0 = constantPoolGen0.addInteger(2);
      assertEquals(4, constantPoolGen0.getSize());
      
      int int1 = constantPoolGen1.lookupUtf8("OnG_0*_Y0v&/SiZ,D");
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantInteger constantInteger0 = new ConstantInteger(129);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.addConstant(constantInteger1, constantPoolGen1);
      constantPoolGen1.addNameAndType("xG1", "&q/FIc");
      int int0 = constantPoolGen1.addFloat(129);
      assertEquals(6, constantPoolGen1.getSize());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      constantPoolGen1.addFloat(0.0F);
      int int0 = constantPoolGen1.addFloat(1.0F);
      assertEquals(4, constantPoolGen1.getSize());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFloat(0.75F);
      int int0 = constantPoolGen0.lookupFloat(0.75F);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-3152), (-2090970918));
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("");
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantFieldref1;
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[3] = (Constant) constantUtf8_0;
      constantArray0[4] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantFieldref1.toString();
      ConstantInteger constantInteger0 = new ConstantInteger((-14));
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantPoolGen1.addConstant(constantInteger1, constantPoolGen0);
      ConstantInteger constantInteger2 = new ConstantInteger(256);
      int int0 = constantPoolGen0.addLong((-2090970918));
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupInteger((-2099761787));
      String string0 = "]XsOmg7)5C,f,J3K";
      constantPoolGen0.addInterfaceMethodref(". Constant pool size is: ", ". Constant pool size is: ", "]XsOmg7)5C,f,J3K");
      String string1 = "&q/FIc";
      constantPoolGen0.getConstantPool();
      constantPoolGen0.adjustSize();
      // Undeclared exception!
      try { 
        constantPoolGen0.lookupMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addLong(1478L);
      int int0 = constantPoolGen0.addLong((-1L));
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.addLong(2209);
      int int0 = constantPoolGen0.addLong(14L);
      assertEquals(6, constantPoolGen0.getSize());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.addLong(2209);
      constantPoolGen0.addLong(0L);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(3, 1);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantInterfaceMethodref1, constantPoolGen1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte)105;
      byteArray0[6] = (byte)107;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      constantPoolGen0.addInteger(1335);
      ConstantDouble constantDouble0 = new ConstantDouble((-2566.278060280075));
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantPoolGen0.addConstant(constantDouble0, constantPoolGen1);
      int int0 = constantPoolGen0.lookupLong((byte)124);
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(0, 782);
      Constant constant0 = constantNameAndType0.copy();
      Constant[] constantArray0 = new Constant[2];
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)26;
      ArrayType arrayType0 = new ArrayType("UD#Js0UHX", (byte)26);
      constantPoolGen0.addArrayClass(arrayType0);
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte) (-122);
      byteArray0[5] = (byte) (-67);
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte) (-9);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      constantArray0[0] = constant0;
      constantArray0[1] = constant0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen1 = null;
      try {
        constantPoolGen1 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantNameAndType cannot be cast to org.apache.bcel.classfile.ConstantUtf8
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      int int0 = 256;
      constantPoolGen0.lookupNameAndType("fstore_1", "fstore_1");
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(131, 256);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantMethodHandle0, constantPoolGen1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown constant type CONSTANT_MethodHandle[15](reference_kind = 131, reference_index = 256)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      ConstantFieldref constantFieldref0 = new ConstantFieldref(46, 46);
      constantFieldref0.setClassIndex(404);
      constantFieldref0.copy();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantFieldref0, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 404
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addDouble(0.0);
      constantPoolGen0.addFieldref("cmp9IY69JCzkMy", "cmp9IY69JCzkMy", "cmp9IY69JCzkMy");
      int int0 = constantPoolGen0.addDouble((-794.0));
      assertEquals(9, constantPoolGen0.getSize());
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addDouble(1106.334382);
      int int0 = constantPoolGen0.lookupDouble(9);
      assertEquals(11, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantLong constantLong0 = new ConstantLong((-514L));
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",e+%");
      constantPoolGen1.lookupMethodref(",e+%", ">Xl", ",e+%");
      constantPoolGen0.addConstant(constantLong0, constantPoolGen1);
      constantPoolGen1.lookupUtf8(",e+%");
      int int0 = constantPoolGen0.lookupInterfaceMethodref(">Xl", "Cannot produce ", (String) null);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.getSize();
      String string0 = "Warning: Padding byte != 0 in ";
      // Undeclared exception!
      try { 
        constantPoolGen0.addInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ConstantInteger constantInteger0 = new ConstantInteger(114);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantInteger0;
      constantArray0[1] = (Constant) constantInteger0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      int int0 = constantPoolGen1.addConstant(constantInteger1, constantPoolGen0);
      assertEquals(2, constantPoolGen1.getSize());
      assertEquals(1, int0);
      assertEquals(1, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Constant[] constantArray0 = new Constant[17];
      ConstantInteger constantInteger0 = new ConstantInteger(3678);
      ConstantFloat constantFloat0 = new ConstantFloat(1);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addInteger((-699));
      constantPoolGen0.lookupInteger((-2078209980));
      int int0 = constantPoolGen0.getSize();
      assertEquals(18, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(3, (-1865));
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[0] = (Constant) constantFieldref1;
      ConstantDouble constantDouble0 = new ConstantDouble(1.0);
      constantArray0[1] = (Constant) constantDouble0;
      ConstantClass constantClass0 = new ConstantClass(3);
      constantArray0[2] = (Constant) constantClass0;
      String string0 = "";
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[3] = (Constant) constantUtf8_1;
      ConstantFieldref constantFieldref2 = new ConstantFieldref(constantFieldref1);
      constantArray0[4] = (Constant) constantFieldref2;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantUtf8 cannot be cast to org.apache.bcel.classfile.ConstantClass
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantClass constantClass0 = new ConstantClass(3);
      constantArray0[2] = (Constant) constantClass0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("");
      constantUtf8_0.copy();
      constantArray0[3] = (Constant) constantUtf8_0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      assertEquals(9, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ConstantClass constantClass0 = new ConstantClass(3);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("cm9Y69RCcMy");
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantClass0;
      constantArray0[1] = (Constant) constantClass0;
      constantArray0[2] = (Constant) constantClass0;
      constantArray0[3] = (Constant) constantUtf8_0;
      constantArray0[4] = (Constant) constantUtf8_0;
      constantArray0[5] = (Constant) constantUtf8_0;
      constantArray0[6] = (Constant) constantUtf8_0;
      constantArray0[7] = (Constant) constantUtf8_0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      assertEquals(8, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = "~t*?SIM\\XdTJ<'tp";
      Constant[] constantArray0 = new Constant[5];
      String string1 = "pt";
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("pt");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[0] = (Constant) constantUtf8_1;
      ConstantString constantString0 = new ConstantString(0);
      constantArray0[1] = (Constant) constantString0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-2043));
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[2] = (Constant) constantMethodType1;
      ConstantMethodType constantMethodType2 = new ConstantMethodType(constantMethodType1);
      constantArray0[3] = (Constant) constantMethodType2;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(2300, 2300);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[4] = (Constant) constantFieldref1;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2300
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }
}
