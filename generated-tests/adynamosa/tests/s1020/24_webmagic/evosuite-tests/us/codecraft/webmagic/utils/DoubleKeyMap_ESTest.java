/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 23 06:07:44 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Integer>(class0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<HashMap<Object, Object>, Map<Map<HashMap<String, Object>, Object>, Object>> hashMap0 = new HashMap<HashMap<Object, Object>, Map<Map<HashMap<String, Object>, Object>, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<Object, Object>, Map<HashMap<String, Object>, Object>, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, Map<HashMap<String, Object>, Object>, Object>(hashMap0, class0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      HashMap<Map<HashMap<String, Object>, Object>, Object> hashMap2 = new HashMap<Map<HashMap<String, Object>, Object>, Object>();
      hashMap0.put(hashMap1, hashMap2);
      Map<Map<HashMap<String, Object>, Object>, Object> map0 = doubleKeyMap0.remove(hashMap1);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleKeyMap<HashMap<Map<HashMap<String, Object>, Object>, Integer>, Integer, Map<String, Map<HashMap<String, Object>, Object>>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Map<HashMap<String, Object>, Object>, Integer>, Integer, Map<String, Map<HashMap<String, Object>, Object>>>();
      HashMap<Map<HashMap<String, Object>, Object>, Integer> hashMap0 = new HashMap<Map<HashMap<String, Object>, Object>, Integer>();
      Integer integer0 = new Integer(0);
      HashMap<String, Map<HashMap<String, Object>, Object>> hashMap1 = new HashMap<String, Map<HashMap<String, Object>, Object>>();
      doubleKeyMap0.put(hashMap0, integer0, (Map<String, Map<HashMap<String, Object>, Object>>) hashMap1);
      Map<Integer, Map<String, Map<HashMap<String, Object>, Object>>> map0 = doubleKeyMap0.remove(hashMap0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      HashMap<String, Map<Integer, HashMap<Object, Object>>> hashMap0 = new HashMap<String, Map<Integer, HashMap<Object, Object>>>();
      DoubleKeyMap<String, Integer, HashMap<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<String, Integer, HashMap<Object, Object>>(hashMap0);
      Map<Integer, Map<HashMap<String, Object>, Object>> map0 = doubleKeyMap0.newMap();
      HashMap<Integer, Map<HashMap<String, Object>, Object>> hashMap1 = new HashMap<Integer, Map<HashMap<String, Object>, Object>>(map0);
      DoubleKeyMap<Integer, HashMap<String, Object>, Object> doubleKeyMap1 = new DoubleKeyMap<Integer, HashMap<String, Object>, Object>(hashMap1, class0);
      HashMap<String, Object> hashMap2 = new HashMap<String, Object>();
      Object object0 = doubleKeyMap1.remove((Integer) null, hashMap2);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleKeyMap<Object, HashMap<String, Integer>, String> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<String, Integer>, String>();
      DoubleKeyMap<Map<HashMap<String, Object>, Object>, String, Object> doubleKeyMap1 = new DoubleKeyMap<Map<HashMap<String, Object>, Object>, String, Object>();
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap2 = new DoubleKeyMap<Object, Object, Integer>();
      Integer integer0 = doubleKeyMap2.remove((Object) doubleKeyMap0, (Object) doubleKeyMap1);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<HashMap<Map<HashMap<String, Object>, Object>, Integer>, Integer, Map<String, Map<HashMap<String, Object>, Object>>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Map<HashMap<String, Object>, Object>, Integer>, Integer, Map<String, Map<HashMap<String, Object>, Object>>>();
      Map<Integer, Map<String, Map<HashMap<String, Object>, Object>>> map0 = doubleKeyMap0.remove((HashMap<Map<HashMap<String, Object>, Object>, Integer>) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<Map<Object, Object>, String, Object> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Object>, String, Object>();
      DoubleKeyMap<Object, String, Object> doubleKeyMap1 = new DoubleKeyMap<Object, String, Object>();
      Map<HashMap<String, Integer>, Map<Object, HashMap<String, Map<HashMap<String, Object>, Object>>>> map0 = doubleKeyMap1.newMap();
      DoubleKeyMap<HashMap<String, Integer>, Object, HashMap<String, Map<HashMap<String, Object>, Object>>> doubleKeyMap2 = new DoubleKeyMap<HashMap<String, Integer>, Object, HashMap<String, Map<HashMap<String, Object>, Object>>>(map0);
      Map<Object, Object> map1 = doubleKeyMap2.newMap();
      Object object0 = doubleKeyMap0.put(map1, "us.codecraft.webmagic.utils.MultiKeyMapBase", (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<Integer, String, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Object>();
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Integer>();
      HashMap<HashMap<String, Object>, Object> hashMap0 = new HashMap<HashMap<String, Object>, Object>();
      Integer integer0 = doubleKeyMap1.put((Object) hashMap0, (Object) doubleKeyMap0, (Integer) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, Object>, Integer, Map<HashMap<String, Object>, Object>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, Integer, Map<HashMap<String, Object>, Object>>();
      Integer integer0 = new Integer((-3025));
      DoubleKeyMap<Integer, String, Object> doubleKeyMap1 = new DoubleKeyMap<Integer, String, Object>();
      Map<HashMap<String, Object>, Object> map0 = doubleKeyMap1.newMap();
      Map<HashMap<String, Object>, Object> map1 = doubleKeyMap0.put((HashMap<Object, Object>) null, integer0, map0);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleKeyMap<HashMap<String, Object>, String, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, String, String>();
      HashMap<Object, Map<Object, Object>> hashMap0 = new HashMap<Object, Map<Object, Object>>();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>(hashMap0);
      Object object0 = doubleKeyMap1.get((Object) "", (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<Object, Map<String, Object>> hashMap0 = new HashMap<Object, Map<String, Object>>();
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>(hashMap0);
      Object object0 = doubleKeyMap0.get((Object) null, "us.codecraft.webmagic.utils.MultiKeyMapBase");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleKeyMap<HashMap<Map<HashMap<String, Object>, Object>, Integer>, Integer, Map<String, Map<HashMap<String, Object>, Object>>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Map<HashMap<String, Object>, Object>, Integer>, Integer, Map<String, Map<HashMap<String, Object>, Object>>>();
      HashMap<String, Map<Object, Integer>> hashMap0 = new HashMap<String, Map<Object, Integer>>();
      DoubleKeyMap<String, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<String, Object, Integer>(hashMap0);
      Map<Object, Map<String, String>> map0 = doubleKeyMap1.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, String, String> doubleKeyMap2 = new DoubleKeyMap<Object, String, String>(map0, class0);
      String string0 = doubleKeyMap2.get((Object) doubleKeyMap0, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleKeyMap<Integer, Object, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, String>();
      Map<Object, String> map0 = doubleKeyMap0.get((Integer) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleKeyMap<HashMap<Integer, Object>, String, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Object>, String, Object>();
      Map<Object, Map<Integer, Integer>> map0 = doubleKeyMap0.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Integer, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Integer>(map0, class0);
      Integer integer0 = new Integer((-2364));
      // Undeclared exception!
      try { 
        doubleKeyMap1.put((Object) doubleKeyMap0, integer0, integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, String, String>((Map<Object, Map<String, String>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DoubleKeyMap<Integer, String, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Object>();
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Integer>();
      Map<Object, Integer> map0 = doubleKeyMap1.remove((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, String>();
      Map<Object, Map<String, Map<HashMap<String, Object>, Object>>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, String, Map<HashMap<String, Object>, Object>> doubleKeyMap1 = new DoubleKeyMap<Object, String, Map<HashMap<String, Object>, Object>>(map0);
      HashMap<HashMap<String, Object>, Object> hashMap0 = new HashMap<HashMap<String, Object>, Object>();
      doubleKeyMap1.put((Object) "", (String) null, (Map<HashMap<String, Object>, Object>) hashMap0);
      doubleKeyMap1.remove((Object) "", "");
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>();
      doubleKeyMap0.put("", (Object) null, (Object) null);
      Object object0 = doubleKeyMap0.get("", (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, Integer, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, String>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<HashMap<String, Object>, Object> hashMap0 = new HashMap<HashMap<String, Object>, Object>();
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>();
      doubleKeyMap0.put("", (Object) null, (Object) hashMap0);
      HashMap hashMap1 = (HashMap)doubleKeyMap0.remove("", (Object) null);
      assertEquals(0, hashMap1.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DoubleKeyMap<Object, Map<HashMap<String, Object>, Object>, Map<HashMap<String, Object>, Object>> doubleKeyMap0 = new DoubleKeyMap<Object, Map<HashMap<String, Object>, Object>, Map<HashMap<String, Object>, Object>>();
      HashMap<Integer, Map<String, Object>> hashMap0 = new HashMap<Integer, Map<String, Object>>();
      DoubleKeyMap<Integer, String, Object> doubleKeyMap1 = new DoubleKeyMap<Integer, String, Object>(hashMap0);
      Map<HashMap<String, Object>, Object> map0 = doubleKeyMap1.newMap();
      doubleKeyMap0.put((Object) "", map0, map0);
      HashMap<HashMap<String, Object>, Object> hashMap1 = new HashMap<HashMap<String, Object>, Object>();
      Map<HashMap<String, Object>, Object> map1 = doubleKeyMap0.put((Object) "", (Map<HashMap<String, Object>, Object>) hashMap1, (Map<HashMap<String, Object>, Object>) null);
      assertEquals(0, map1.size());
  }
}
