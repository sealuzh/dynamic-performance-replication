/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 17:56:03 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.CharClass;
import com.google.re2j.CharGroup;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharClass_ESTest extends CharClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendLiteral(469, 469);
      assertSame(charClass1, charClass0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[1][4];
      charClass0.appendTable(intArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[0][4];
      CharClass charClass1 = charClass0.appendTableWithSign(intArray0, 1062);
      assertSame(charClass0, charClass1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.toString();
      int[] intArray0 = new int[0];
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertSame(charClass1, charClass0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[6];
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, 1066);
      // Undeclared exception!
      try { 
        charClass1.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendLiteral(3, 3);
      assertSame(charClass0, charClass1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.appendFoldedRange((-905), 2315);
      charClass0.cleanClass();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[2][4];
      charClass0.appendTableWithSign(intArray0, 66600);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendFoldedRange(1062, 1062);
      CharClass charClass2 = charClass1.cleanClass();
      assertSame(charClass2, charClass1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = charClass0.toArray();
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, 11799);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[0];
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(66639, 66639);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      String string0 = charClass0.toString();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertEquals("[0x0-0x1044e 0x10428-0x10ffff]", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[0][7];
      CharClass charClass1 = charClass0.appendNegatedTable(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      String string0 = charClass1.toString();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals("[0x0-0x10ffff]", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendRange((-2457), (-2457));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      String string0 = charClass0.toString();
      assertSame(charClass0, charClass1);
      assertEquals("[0xfffff667]", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[1][4];
      // Undeclared exception!
      charClass0.appendNegatedTable(intArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign((int[][]) null, (-419));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[1][9];
      int[] intArray1 = new int[3];
      intArray1[1] = 252;
      intArray1[2] = 252;
      intArray0[0] = intArray1;
      CharClass charClass1 = charClass0.appendTableWithSign(intArray0, 3715);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(741, (-1));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.appendLiteral((-1), (-1));
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass0.cleanClass();
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertNotNull(charClass3);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 633;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {633, 0, 0}, intArray0);
      assertNotNull(charClass0);
      
      // Undeclared exception!
      try { 
        charClass0.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[] intArray0 = new int[0];
      CharClass charClass2 = charClass0.appendClassWithSign(intArray0, (-34552716));
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass2);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[] intArray0 = charClass1.toArray();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      assertNotNull(intArray0);
      
      CharClass charClass2 = charClass1.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass1.cleanClass();
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertNotNull(charClass3);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[1][8];
      int[] intArray1 = new int[4];
      intArray1[0] = 1945;
      intArray1[1] = 1945;
      intArray1[2] = 1945;
      intArray1[3] = 1945;
      intArray0[0] = intArray1;
      CharClass charClass1 = charClass0.appendNegatedTable(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      int[] intArray0 = charClass1.toArray();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      
      CharClass charClass3 = charClass2.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass1.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass4);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-1212);
      intArray0[1] = (-1212);
      intArray0[4] = (-1212);
      intArray0[4] = (-1212);
      intArray0[7] = (-1212);
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {(-1212), (-1212), 0, 0, (-1212), 0, 0, (-1212)}, intArray0);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {(-1212), (-1212), 0, 0, (-1212), 0, (-1212), 0}, intArray0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {(-1212), 0, (-1212), 0, (-1212), (-1212), 0, 0}, intArray0);
      assertNotNull(charClass2);
      
      int[] intArray1 = charClass2.toArray();
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1212), 0, (-1212), 0, (-1212), (-1212), 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-1212), 0}, intArray1);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int[] intArray0 = new int[10];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendRange((-371296), 1114111);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, (-371296), 1114111}, intArray0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendFoldedRange((-626), 66640);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, (-371296), 1114111}, intArray0);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.cleanClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertArrayEquals(new int[] {(-371296), 1114111, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass3);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendRange(66639, 66639);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.negateClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      int[][] intArray0 = new int[7][9];
      CharClass charClass3 = charClass2.appendLiteral(66639, 198);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass1.cleanClass();
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertNotNull(charClass4);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange((-4052), 66640);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      // Undeclared exception!
      try { 
        charClass0.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(53, (-1722));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.appendFoldedRange(1062, 1062);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.cleanClass();
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertNotNull(charClass3);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      // Undeclared exception!
      charClass0.appendFoldedRange(2572, 1114111);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(66640, 66640);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 3696;
      intArray0[1] = 3696;
      intArray0[2] = 927;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {3696, 3696, 927, 0, 0, 0}, intArray0);
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[1][1];
      intArray1[0] = intArray0;
      CharClass charClass1 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 3695, 1, 1114111, 0, 0}, intArray0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.cleanClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {0, 1114111, 1, 1114111, 0, 0}, intArray0);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass0.appendNegatedTable(intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertArrayEquals(new int[] {0, 1114111, 1, 1114111, 0, 0}, intArray0);
      assertNotNull(charClass3);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 3690;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {3690, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[1][6];
      intArray1[0] = intArray0;
      CharClass charClass1 = charClass0.appendTable(intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {3690, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {0, 0, 3690, 0, 3690, 0}, intArray0);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass1.appendNegatedTable(intArray1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertArrayEquals(new int[] {0, 0, 1, 1114111, 3690, 0}, intArray0);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass0.cleanClass();
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertArrayEquals(new int[] {0, 1114111, 1, 1114111, 3690, 0}, intArray0);
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass2.appendTableWithSign(intArray1, 820);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertArrayEquals(new int[] {0, 1114111, 1, 1114111, 3690, 0}, intArray0);
      assertNotNull(charClass5);
      
      // Undeclared exception!
      try { 
        charClass4.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = 0;
      intArray0[2] = 927;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 927, 0, 0, 0}, intArray0);
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[1][1];
      intArray1[0] = intArray0;
      CharClass charClass1 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {1, 926, 1, 1114111, 0, 0}, intArray0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.cleanClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {1, 1114111, 1, 926, 0, 0}, intArray0);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass0.appendNegatedTable(intArray1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertArrayEquals(new int[] {0, 1114111, 1, 926, 0, 0}, intArray0);
      assertNotNull(charClass3);
      
      CharGroup charGroup0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        charClass3.appendGroup((CharGroup) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }
}
