/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 15:31:02 GMT 2019
 */

package wheel.components;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.util.Calendar;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;
import wheel.ErrorPage;
import wheel.components.ActionExpression;
import wheel.components.Any;
import wheel.components.Block;
import wheel.components.Checkbox;
import wheel.components.Component;
import wheel.components.DateInput;
import wheel.components.ElExpression;
import wheel.components.FileInput;
import wheel.components.Form;
import wheel.components.FormElement;
import wheel.components.Hidden;
import wheel.components.ISelectModel;
import wheel.components.Image;
import wheel.components.Label;
import wheel.components.Link;
import wheel.components.NumberInput;
import wheel.components.Radio;
import wheel.components.RadioGroup;
import wheel.components.RenderableComponent;
import wheel.components.Select;
import wheel.components.StandaloneComponent;
import wheel.components.Submit;
import wheel.components.Table;
import wheel.components.TableBlock;
import wheel.components.TableRow;
import wheel.components.Text;
import wheel.components.TextArea;
import wheel.components.TextInput;
import wheel.components.XmlEntityRef;
import wheel.util.DynamicSelectModel;
import wheel.util.StringSelectModel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Component_ESTest extends Component_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Label label0 = new Label(errorPage0, errorPage0);
      ElExpression elExpression0 = new ElExpression((String) null);
      RadioGroup radioGroup0 = new RadioGroup(label0, "CZgr,^qiLkWt[", "CZgr,^qiLkWt[", (ISelectModel) null, elExpression0);
      Select select0 = new Select(radioGroup0, "Y", "", (ISelectModel) null, "");
      Component component0 = errorPage0.map("");
      Table table0 = new Table(select0, (String) null);
      TableBlock tableBlock0 = table0.colgroup();
      // Undeclared exception!
      try { 
        tableBlock0.remove(component0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "5NzS#d%B_CS]^DI");
      TableBlock tableBlock0 = table0.tbody();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "5NzS#d%B_CS]^DI";
      Component component0 = tableBlock0.attributes(stringArray0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.buildComponent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.nbsp();
      assertEquals("wheel_ErrorPage", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "5NzS#d%B_CS]^DI");
      TableBlock tableBlock0 = table0.tbody();
      Component component0 = tableBlock0.kbd((Object) table0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      StandaloneComponent standaloneComponent0 = errorPage0.getPage();
      assertEquals("wheel_ErrorPage", standaloneComponent0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, (String) null);
      tableBlock0.getEngine();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "ans{", "ans{");
      TableBlock tableBlock0 = new TableBlock(checkbox0, " does not exist.");
      TableRow tableRow0 = tableBlock0.tr();
      assertTrue(tableRow0._isGeneratedId());
      
      tableBlock0.getComponents();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "java.lang.String@0000000012");
      Component component0 = table0.dt();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      StringBuffer stringBuffer0 = new StringBuffer("");
      Any any0 = new Any(errorPage0, stringBuffer0);
      any0.create();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Any_1", any0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      TableBlock tableBlock1 = new TableBlock(tableBlock0, "java.lang.String@0000000017");
      tableBlock1.clasS("{");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "");
      TableBlock tableBlock0 = table0.thead();
      TableRow tableRow0 = tableBlock0.tr();
      tableRow0.actionBinding("aR#xoY1/?(G[y)E");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Table_1", table0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.wBlock("h5");
      assertEquals("Block_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.q((Object) null);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.h1();
      // Undeclared exception!
      try { 
        component0.imageSubmit("null", "wheel.AbstractEngine$1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Object object0 = new Object();
      Component component0 = errorPage0.h3(object0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      // Undeclared exception!
      try { 
        xmlEntityRef0.checkbox((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Form form0 = new Form("au()sUnctSI5Fsw%");
      form0._setGeneratedId(false);
      assertFalse(form0._isGeneratedId());
      assertEquals("au()sUnctSI5Fsw%", form0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, "u", "G/RZ}lFtcP");
      // Undeclared exception!
      try { 
        textArea0.tt();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Form form0 = new Form("");
      // Undeclared exception!
      try { 
        form0.sub((Object) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("k6eIF}wU<j[c.sFZZ");
      // Undeclared exception!
      try { 
        xmlEntityRef0.span();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      NumberInput numberInput0 = new NumberInput((Component) null, "hpoE?|o(/}0", "hpoE?|o(/}0");
      // Undeclared exception!
      try { 
        numberInput0.small();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Submit submit0 = new Submit(errorPage0, "", (String) null);
      TextArea textArea0 = new TextArea(submit0, "/;q8>S'", "vOv#+jrc]m_");
      // Undeclared exception!
      try { 
        textArea0.q();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Form form0 = new Form("uqsTu[L7z\"_ynm");
      // Undeclared exception!
      try { 
        form0.noframes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("Tbody component can be added only to a Table.");
      Object[] objectArray0 = new Object[8];
      // Undeclared exception!
      try { 
        xmlEntityRef0.message("Tbody component can be added only to a Table.", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("J+)NTWR)3Y~p7lv}@e:");
      // Undeclared exception!
      try { 
        xmlEntityRef0.li((Object) "J+)NTWR)3Y~p7lv}@e:");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("<It");
      // Undeclared exception!
      try { 
        xmlEntityRef0.ins();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("nj.8J");
      // Undeclared exception!
      try { 
        xmlEntityRef0.i();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Radio radio0 = new Radio((Component) null, "", "p");
      TextInput textInput0 = new TextInput(radio0, "", "*5\"#0aEB)qI");
      // Undeclared exception!
      try { 
        textInput0.htmlText((Object) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0);
      Checkbox checkbox0 = new Checkbox(block0, "&giza94nZS", "(/Vvn<H=EI;y5");
      TableBlock tableBlock0 = new TableBlock(checkbox0, "&giza94nZS");
      Any any0 = tableBlock0.col();
      // Undeclared exception!
      try { 
        any0.h2((Object) "(/Vvn<H=EI;y5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Form form0 = new Form("d%$/'5HF|e^");
      // Undeclared exception!
      try { 
        form0.h1();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Form form0 = new Form((String) null);
      // Undeclared exception!
      try { 
        form0.frame((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Form form0 = new Form("Xq6;A&0ofXiYkRBn1?");
      // Undeclared exception!
      try { 
        form0.dt((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Form form0 = new Form("e0VHuKqP;5y=e|");
      // Undeclared exception!
      try { 
        form0.area((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("^cnZ71jnmlS-/u<");
      // Undeclared exception!
      try { 
        xmlEntityRef0.add((Component) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Submit submit0 = new Submit((Component) null, "N#,pQc~oA/ y0R/!~", "N#,pQc~oA/ y0R/!~");
      // Undeclared exception!
      try { 
        submit0.acronym();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TextArea textArea0 = new TextArea((Component) null, "87[0H6", "87[0H6");
      // Undeclared exception!
      try { 
        textArea0.a((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, (String) null);
      tableBlock0._wrapComponentId("y-_mXp6");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.getComponents();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("qx,");
      Form form0 = new Form(errorPage0, "qx,", actionExpression0);
      Checkbox checkbox0 = new Checkbox(form0, "qx,", "qx,");
      form0.addFormElement(checkbox0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "ans{", "ans{");
      StandaloneComponent standaloneComponent0 = checkbox0._getTopLevelComponent(false);
      assertEquals("wheel_ErrorPage", standaloneComponent0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DateInput dateInput0 = new DateInput(errorPage0, "", "this.", "");
      Table table0 = new Table(dateInput0, "");
      TableBlock tableBlock0 = table0.tbody();
      Checkbox checkbox0 = new Checkbox(tableBlock0, "invalid element in imports map: ", "V|Dw");
      checkbox0.attribute("java.lang.String@0000000017", "invalid element in imports map: ");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Table_1", table0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("qx,");
      Form form0 = new Form(errorPage0, "qx,", actionExpression0);
      form0.renderHint(actionExpression0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0._setGeneratedId(true);
      assertTrue(errorPage0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "");
      boolean boolean0 = tableBlock0._isGeneratedId();
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("qx,");
      Form form0 = new Form(errorPage0, "qx,", actionExpression0);
      Checkbox checkbox0 = new Checkbox(form0, "qx,", "qx,");
      checkbox0.label("org.apache.commons.io.filefilter.HiddenFileFilter");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TextInput textInput0 = new TextInput((Component) null, "p", "^");
      Calendar calendar0 = textInput0.date();
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.end();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not end compoennt, already at root.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("qx,");
      Form form0 = new Form(errorPage0, "qx,", actionExpression0);
      Component component0 = form0.end();
      assertEquals("wheel_ErrorPage", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "java.lang.String@0000000012");
      TableBlock tableBlock0 = table0.colgroup();
      Component component0 = tableBlock0.end("java.lang.String@0000000012");
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("wheel_ErrorPage", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Form form0 = new Form((String) null);
      ElExpression elExpression0 = new ElExpression("GLJ");
      List<Component> list0 = form0.findAll(elExpression0);
      assertEquals("wheel_components_Form", form0.getComponentId());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "5NzS#d%B_CS]^DI");
      TableBlock tableBlock0 = table0.tbody();
      FileInput fileInput0 = new FileInput(tableBlock0, "", "");
      // Undeclared exception!
      try { 
        fileInput0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find component with id ''.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Submit submit0 = new Submit((Component) null, "m|xl?6Mjc", "m|xl?6Mjc");
      // Undeclared exception!
      try { 
        submit0.up(68);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("java.lang.String@0000000004");
      XmlEntityRef xmlEntityRef1 = (XmlEntityRef)xmlEntityRef0.up((-27));
      assertNull(xmlEntityRef1.defaultTagName());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("Tbody component can be added only to a Table.");
      boolean boolean0 = xmlEntityRef0.equals("Tbody component can be added only to a Table.");
      assertFalse(boolean0);
      assertEquals("Tbody component can be added only to a Table.", xmlEntityRef0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "");
      table0.tbody();
      table0._clear();
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = errorPage0.placeholder("tJV&V9[D");
      block0.addInternalRenderHint("_HJFwpV");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Hidden hidden0 = new Hidden(errorPage0, "updateTargetId=", (String) null);
      // Undeclared exception!
      try { 
        errorPage0.addFirst(hidden0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add a form element. No surrounding form found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0._getTopLevelComponent(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("^cnZ71jnmlS-/u<");
      TextInput textInput0 = new TextInput(xmlEntityRef0, "^cnZ71jnmlS-/u<", "b:");
      textInput0._getVisibleForm(false);
      assertEquals("^cnZ71jnmlS-/u<", xmlEntityRef0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Form form0 = new Form("4h");
      Checkbox checkbox0 = new Checkbox(form0, "PdX#]|lN//p", "PdX#]|lN//p");
      Form form1 = checkbox0._getVisibleForm(false);
      assertEquals("4h", form1.getComponentId());
      assertNotNull(form1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Form form0 = new Form("4th8,O[x>z}B");
      DateInput dateInput0 = new DateInput(form0, "", "booleanValue", "");
      // Undeclared exception!
      try { 
        dateInput0.select("<+6[uRfXyq", (ISelectModel) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      FileInput fileInput0 = new FileInput(errorPage0, "V`g1o%F=E^9/M!", "V`g1o%F=E^9/M!");
      Table table0 = new Table(fileInput0, "e3t(s)-=ZR2");
      TableBlock tableBlock0 = table0.thead();
      assertTrue(tableBlock0._isGeneratedId());
      
      tableBlock0.id("enctype");
      assertFalse(tableBlock0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("HXTK");
      Form form0 = new Form(errorPage0, "HXTK", actionExpression0);
      // Undeclared exception!
      try { 
        form0.id("could not create constructor: ");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = errorPage0.placeholder("div");
      Table table0 = new Table(block0, " ...>>) (position: ");
      table0.id(" ...>>) (position: ");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "JmM.");
      TableBlock tableBlock0 = table0.colgroup();
      Checkbox checkbox0 = new Checkbox(tableBlock0, (String) null, "JmM.");
      // Undeclared exception!
      try { 
        checkbox0.id("JmM.");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.h1();
      assertTrue(component0._isGeneratedId());
      
      List<RenderableComponent> list0 = errorPage0._getRenderableChildren();
      assertNotNull(list0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Label label0 = new Label(errorPage0, errorPage0);
      List<RenderableComponent> list0 = label0._getRenderableChildren();
      assertNotNull(list0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(label0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.sub();
      Component component1 = errorPage0.big((Object) component0);
      // Undeclared exception!
      try { 
        component1.find(" exceeded number of available namespaces ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find component with id  exceeded number of available namespaces  on the page.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.tt();
      component0.tt();
      List<Component> list0 = component0._getChildren();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals(1, list0.size());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TextArea textArea0 = new TextArea((Component) null, "object", " xmlns=");
      Checkbox checkbox0 = new Checkbox(textArea0, "KFLpyIGKV*\"+YS)#Eo/", "object");
      DateInput dateInput0 = new DateInput(checkbox0, "", "KFLpyIGKV*\"+YS)#Eo/", "KFLpyIGKV*\"+YS)#Eo/");
      ActionExpression actionExpression0 = dateInput0._getAction();
      assertNull(actionExpression0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Form form0 = new Form("4th8,O[x>z}B");
      DateInput dateInput0 = new DateInput(form0, "", "booleanValue", "");
      String[] stringArray0 = new String[6];
      dateInput0.attributes(stringArray0);
      assertEquals("4th8,O[x>z}B", form0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Form form0 = new Form("4th8,O[x>z}B");
      DateInput dateInput0 = new DateInput(form0, "", "booleanValue", "");
      String[] stringArray0 = new String[11];
      // Undeclared exception!
      try { 
        dateInput0.attributes(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attributes must be given in name, value pairs.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      String[] stringArray0 = new String[0];
      Component component0 = xmlEntityRef0.attributes(stringArray0);
      assertEquals("wheel_components_XmlEntityRef", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Label label0 = new Label(errorPage0, errorPage0);
      ElExpression elExpression0 = new ElExpression((String) null);
      RadioGroup radioGroup0 = new RadioGroup(label0, "CZgr,^qiLkWt[", "CZgr,^qiLkWt[", (ISelectModel) null, elExpression0);
      Select select0 = new Select(radioGroup0, "Y", "", (ISelectModel) null, "");
      Table table0 = new Table(select0, (String) null);
      TableBlock tableBlock0 = table0.colgroup();
      tableBlock0.renderHint("");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("Select_1", select0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.em((Object) null);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.h1();
      Component component1 = component0.code();
      assertTrue(component1._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "", "d(_#,");
      // Undeclared exception!
      try { 
        checkbox0.del((Object) "d(_#,");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Submit submit0 = new Submit((Component) null, "@SKgIzMXqZ*&rNs", "@SKgIzMXqZ*&rNs");
      // Undeclared exception!
      try { 
        submit0.dfn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.sup();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Form form0 = new Form("au()sUnctSI5Fsw%");
      // Undeclared exception!
      try { 
        form0.noscript();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = errorPage0.placeholder("div");
      Table table0 = new Table(block0, " ...>>) (position: ");
      Component component0 = table0.q();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.span();
      NumberInput numberInput0 = new NumberInput(component0, "", "Cz1#(hn*\"sV");
      component0.h5((Object) numberInput0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.td();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Td component can be added only to a TableRow.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      FileInput fileInput0 = new FileInput(errorPage0, "V`g1o%F=E^9/M!", "V`g1o%F=E^9/M!");
      Table table0 = new Table(fileInput0, "e3t(s)-=ZR2");
      TableBlock tableBlock0 = table0.thead();
      DynamicSelectModel dynamicSelectModel0 = tableBlock0.selectModel();
      // Undeclared exception!
      try { 
        tableBlock0.select("e3t(s)-=ZR2", dynamicSelectModel0, "enctype");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "ans{", "ans{");
      TableBlock tableBlock0 = new TableBlock(checkbox0, " does not exist.");
      TableRow tableRow0 = tableBlock0.tr();
      ActionExpression actionExpression0 = new ActionExpression("DV3dL]");
      // Undeclared exception!
      try { 
        tableRow0.form((String) null, actionExpression0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A Form must always have a given componentId.
         //
         verifyException("wheel.components.Form", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.body();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      StringBuffer stringBuffer0 = new StringBuffer("");
      Any any0 = new Any(errorPage0, stringBuffer0);
      Table table0 = new Table(any0, "label");
      TableBlock tableBlock0 = table0.tbody();
      tableBlock0.p((Object) errorPage0);
      assertEquals("Any_1", any0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Label label0 = new Label(errorPage0, (Object) null);
      Component component0 = label0.a((Object) "Uw2}c");
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Form form0 = new Form((String) null);
      // Undeclared exception!
      try { 
        form0.label((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.caption();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Thead component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.tt();
      Component component1 = component0.param("NoeUa=T$y", "NoeUa=T$y");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Any_1", component1.getComponentId());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("org.mvel.conversion.BigDecimalCH$4");
      // Undeclared exception!
      try { 
        xmlEntityRef0.reset("org.mvel.conversion.BigDecimalCH$4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("No top level component found.");
      // Undeclared exception!
      try { 
        xmlEntityRef0.ol();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("PH@hJ.gqz");
      Submit submit0 = new Submit(xmlEntityRef0, "mvel.threadsafety", "_6\"{/o>0M");
      // Undeclared exception!
      try { 
        submit0.strong((Object) "mvel.threadsafety");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.thead();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Thead component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = errorPage0.placeholder("div");
      Table table0 = new Table(block0, " ...>>) (position: ");
      block0._setParent(table0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "");
      tableBlock0.address((Object) tableBlock0);
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Label label0 = new Label(errorPage0, (Object) null);
      label0._getActions();
      assertTrue(label0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("l1%~Qp\"r+");
      // Undeclared exception!
      try { 
        xmlEntityRef0.style();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.textarea("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Text text0 = new Text(errorPage0, errorPage0);
      Checkbox checkbox0 = new Checkbox(text0, " evaluated to an object that is not an instance of Collection or Object[]. Can't build a dynamic ISelectModel", " evaluated to an object that is not an instance of Collection or Object[]. Can't build a dynamic ISelectModel");
      // Undeclared exception!
      try { 
        checkbox0.u((Object) checkbox0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Submit submit0 = new Submit((Component) null, "N :", "N :");
      // Undeclared exception!
      try { 
        submit0.br();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextInput textInput0 = new TextInput(errorPage0, "tt", "tt");
      TableBlock tableBlock0 = new TableBlock(textInput0);
      Component component0 = tableBlock0.table();
      assertEquals("Table_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Long long0 = new Long(2339L);
      Text text0 = new Text(errorPage0, long0);
      Checkbox checkbox0 = new Checkbox(text0, (String) null, "");
      // Undeclared exception!
      try { 
        checkbox0.textInput("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.th();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Th component can be added only to a TableRow.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Hidden hidden0 = new Hidden(errorPage0, "fD^CcK.W", "fD^CcK.W");
      hidden0.action("fD^CcK.W");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TextArea textArea0 = new TextArea((Component) null, "@", "h4");
      // Undeclared exception!
      try { 
        textArea0.rawText((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Form form0 = new Form((String) null);
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      ElExpression elExpression0 = new ElExpression((String) null);
      // Undeclared exception!
      try { 
        form0.radioGroup((String) null, dynamicSelectModel0, elExpression0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("'8kMC");
      // Undeclared exception!
      try { 
        xmlEntityRef0.wrapSelf();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.submit("V`g1o%F=E^9/M!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Hidden hidden0 = new Hidden((Component) null, "em", "em");
      // Undeclared exception!
      try { 
        hidden0.link();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DateInput dateInput0 = new DateInput((Component) null, "java.lang.String@0000000017", "uB", "java.lang.String@0000000017");
      // Undeclared exception!
      try { 
        dateInput0.cite();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.big();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0, "!TU<oxlG+(h;U:Uy~");
      TableBlock tableBlock0 = new TableBlock(block0);
      Checkbox checkbox0 = new Checkbox(tableBlock0, "5WWB0_E", "5WWB0_E");
      // Undeclared exception!
      try { 
        checkbox0.iframe();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, "Mcb.A12s9ihu^gGMf", "java.lang.String@0000000012");
      // Undeclared exception!
      try { 
        textArea0.message("q.y?wMK bS");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Form form0 = new Form("8G2kE`1a.+&KrUa");
      // Undeclared exception!
      try { 
        form0.strike();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Byte byte0 = Byte.valueOf((byte)94);
      Component component0 = errorPage0.h1((Object) byte0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.noframes();
      assertEquals("Block_2", component0.getComponentId());
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "ans{", "ans{");
      TableBlock tableBlock0 = new TableBlock(checkbox0, " does not exist.");
      TableRow tableRow0 = tableBlock0.tr();
      Component component0 = tableRow0.i();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "");
      Component component0 = tableBlock0.cite((Object) tableBlock0);
      MockDate mockDate0 = new MockDate(2088, 2088, 17);
      component0.dd((Object) mockDate0);
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("/$O#4UZq6 z+");
      xmlEntityRef0._applyFormat("/$O#4UZq6 z+");
      assertEquals("/$O#4UZq6 z+", xmlEntityRef0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = errorPage0.placeholder("div");
      Table table0 = new Table(block0, " ...>>) (position: ");
      // Undeclared exception!
      try { 
        table0.head();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Form form0 = new Form("UZF`");
      // Undeclared exception!
      try { 
        form0.u();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("wheel_ErrorPage");
      // Undeclared exception!
      try { 
        xmlEntityRef0.hr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Form form0 = new Form(";5[G");
      // Undeclared exception!
      try { 
        form0.script();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.span((Object) "strike");
      // Undeclared exception!
      try { 
        component0.hidden("strike");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      TextInput textInput0 = new TextInput((Component) null, "Xk=%&w?/", "Xk=%&w?/");
      Long long0 = new Long(1L);
      // Undeclared exception!
      try { 
        textInput0.small((Object) long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "JmM.");
      TableBlock tableBlock0 = table0.colgroup();
      Checkbox checkbox0 = new Checkbox(tableBlock0, (String) null, "JmM.");
      // Undeclared exception!
      try { 
        checkbox0.h2();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = errorPage0.placeholder("div");
      Table table0 = new Table(block0, " ...>>) (position: ");
      Component component0 = table0.sub((Object) errorPage0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Float float0 = new Float(0.0F);
      Text text0 = (Text)errorPage0.htmlText(float0);
      assertTrue(text0._isGeneratedId());
      assertTrue(text0.isHtml());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "");
      TableBlock tableBlock0 = table0.thead();
      TableRow tableRow0 = tableBlock0.tr();
      FileInput fileInput0 = new FileInput(tableRow0, "", "");
      // Undeclared exception!
      try { 
        fileInput0.h5();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DateInput dateInput0 = new DateInput(errorPage0, "", "this.", "");
      Table table0 = new Table(dateInput0, "");
      TableBlock tableBlock0 = table0.tbody();
      tableBlock0.bdo("this.");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Table_1", table0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "", "V!R");
      NumberInput numberInput0 = new NumberInput(checkbox0, "Lqx", "Lqx");
      TextArea textArea0 = new TextArea(numberInput0, "", "Lqx");
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("'8kMC");
      // Undeclared exception!
      try { 
        textArea0.code((Object) xmlEntityRef0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextInput textInput0 = new TextInput(errorPage0, " (", "src");
      // Undeclared exception!
      try { 
        textInput0.dt();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Form form0 = new Form("");
      // Undeclared exception!
      try { 
        form0.numberInput("", (CharSequence) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.text("8");
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Form form0 = new Form("");
      // Undeclared exception!
      try { 
        form0.h4((Object) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Form form0 = new Form("' to Calendar.");
      // Undeclared exception!
      try { 
        form0.abbr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "", "script");
      // Undeclared exception!
      try { 
        checkbox0.h4();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.span((Object) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.b();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Select select0 = new Select((Component) null, "0x>tJ(nzqyWV[L2", "0x>tJ(nzqyWV[L2", "0x>tJ(nzqyWV[L2", (ISelectModel) null, true);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        select0.b(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      StringBuffer stringBuffer0 = new StringBuffer("");
      Any any0 = new Any(errorPage0, stringBuffer0);
      Table table0 = new Table(any0, "label");
      TableBlock tableBlock0 = table0.tbody();
      // Undeclared exception!
      try { 
        tableBlock0.buttonInput("H.v5r6Qqg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "9", ".'ZHH&on|'");
      // Undeclared exception!
      try { 
        checkbox0.entity(".'ZHH&on|'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ElExpression elExpression0 = new ElExpression("");
      Any any0 = new Any(errorPage0, elExpression0);
      Checkbox checkbox0 = new Checkbox(any0, "]", "");
      Long long0 = new Long(2871L);
      Link link0 = new Link(checkbox0, long0);
      // Undeclared exception!
      try { 
        link0.passwordInput("Tbody component can be added only to a Table.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "NoeUa=T$y");
      FileInput fileInput0 = new FileInput(table0, "NoeUa=T$y", "NoeUa=T$y");
      // Undeclared exception!
      try { 
        fileInput0.encode("input");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      NumberInput numberInput0 = new NumberInput((Component) null, "i/fFY|` M%X?-//Y^", "i/fFY|` M%X?-//Y^");
      FileInput fileInput0 = new FileInput(numberInput0, "joJp'ssK,fF", "joJp'ssK,fF");
      // Undeclared exception!
      try { 
        numberInput0.var((Object) fileInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      Select select0 = new Select(errorPage0, (String) null, "", "", stringSelectModel0, true);
      TableBlock tableBlock0 = new TableBlock(select0);
      TableRow tableRow0 = tableBlock0.tr();
      DateInput dateInput0 = new DateInput(tableRow0, "", (String) null, (CharSequence) null);
      // Undeclared exception!
      try { 
        dateInput0.pre();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.sub();
      Component component1 = errorPage0.big((Object) component0);
      component1.ins();
      // Undeclared exception!
      try { 
        component1.find(" exceeded number of available namespaces ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find component with id  exceeded number of available namespaces  on the page.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      FileInput fileInput0 = new FileInput((Component) null, "[[-h=PY\"}-2h4", "[[-h=PY\"}-2h4");
      // Undeclared exception!
      try { 
        fileInput0.object();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.button();
      // Undeclared exception!
      try { 
        component0.colgroup();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Colgroup component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.acronym();
      Checkbox checkbox0 = new Checkbox(errorPage0, "t6(Mbb", "[Z");
      TextInput textInput0 = new TextInput(checkbox0, "[Z", "A!'WPzGzk#{H>9tZ]");
      Link link0 = new Link(component0, textInput0);
      Component component1 = component0.li((Object) link0);
      Component component2 = component1.sub();
      // Undeclared exception!
      try { 
        component2.end("A!'WPzGzk#{H>9tZ]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No corresponding component found for end expression 'A!'WPzGzk#{H>9tZ]'.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.pre((Object) null);
      Component component1 = component0.tt((Object) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component1._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("null");
      // Undeclared exception!
      try { 
        xmlEntityRef0.radio((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("Attributes must be given in name, value pairs.");
      // Undeclared exception!
      try { 
        xmlEntityRef0.ul();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      TextInput textInput0 = new TextInput((Component) null, "output stream can not be null", "output stream can not be null");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        textInput0.abbr(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Form form0 = new Form("Q");
      TextInput textInput0 = new TextInput(form0, "reader must be set before parsing is started", "reader must be set before parsing is started");
      // Undeclared exception!
      try { 
        textInput0.div();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      StringBuilder stringBuilder0 = new StringBuilder();
      Image image0 = new Image(errorPage0, stringBuilder0, stringBuilder0);
      // Undeclared exception!
      try { 
        image0.col();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Col component can be added only to a TableBlock.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        errorPage0.dateFormat("h4", object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported type given for dateFormat. Supported types are: Date, Calendar, Long/long .
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("OkZDQkkG|Tawua");
      // Undeclared exception!
      try { 
        xmlEntityRef0.em();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "NoeUa=T$y");
      Component component0 = table0.strike((Object) errorPage0);
      Component component1 = component0.nbsp();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component1._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      TextArea textArea0 = new TextArea((Component) null, "S", "S");
      String string0 = textArea0.getComponentName();
      assertEquals("TextArea", string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, (String) null, "Vl#%");
      // Undeclared exception!
      try { 
        textArea0.fieldset();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.base("java.lang.String@0000000012");
      assertEquals("Any_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "strike");
      TableBlock tableBlock0 = table0.colgroup();
      TableRow tableRow0 = tableBlock0.tr();
      Component component0 = tableBlock0.strike((Object) tableRow0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "frame", "frame");
      // Undeclared exception!
      try { 
        checkbox0.a();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Label label0 = new Label(errorPage0, errorPage0);
      Component component0 = label0.del();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      FileInput fileInput0 = new FileInput((Component) null, "em", "null");
      // Undeclared exception!
      try { 
        fileInput0.li();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Form form0 = new Form("{hy^wU^uz");
      Hidden hidden0 = new Hidden(form0, "span", "span");
      Select select0 = new Select(hidden0, "div", "MD", "{hy^wU^uz", (ISelectModel) null, false);
      Radio radio0 = new Radio(form0, "span", "X vJ(");
      // Undeclared exception!
      try { 
        select0.s((Object) radio0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "'.");
      Component component0 = table0.address();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Hidden hidden0 = new Hidden((Component) null, "c!W{)cLFgr!Ewo>9A", "el:");
      // Undeclared exception!
      try { 
        hidden0.imageSubmit("", (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.meta();
      // Undeclared exception!
      try { 
        component0.tr();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tr component can be added only to a TableBlock.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("qx,");
      Form form0 = new Form(errorPage0, "qx,", actionExpression0);
      errorPage0.addFirst(form0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, (String) null, "*WXJ75uLGKG");
      // Undeclared exception!
      try { 
        checkbox0.form("span");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      Component component0 = tableBlock0.legend((Object) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      DateInput dateInput0 = new DateInput((Component) null, "iU(7)?f^rv}`[K`/", "%kA", "%kA");
      // Undeclared exception!
      try { 
        dateInput0.dl();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      // Undeclared exception!
      try { 
        xmlEntityRef0.samp((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Label label0 = new Label(errorPage0, (Object) null);
      Component component0 = label0.img("expected equals sign (=) after version and not ", "Uw2}c");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Form form0 = new Form("");
      // Undeclared exception!
      try { 
        form0.numberInput("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      Select select0 = new Select((Component) null, "XFKI0f;^L YF(", "The wildcard list must not be null", stringSelectModel0, "XFKI0f;^L YF(");
      Checkbox checkbox0 = new Checkbox(select0, "The wildcard list must not be null", "XFKI0f;^L YF(");
      ElExpression elExpression0 = new ElExpression("XFKI0f;^L YF(");
      // Undeclared exception!
      try { 
        checkbox0.checkboxGroup("XFKI0f;^L YF(", stringSelectModel0, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      ElExpression elExpression0 = new ElExpression("oH");
      RadioGroup radioGroup0 = new RadioGroup((Component) null, "oH", "oH", stringSelectModel0, elExpression0);
      FileInput fileInput0 = new FileInput(radioGroup0, "", "oH");
      Hidden hidden0 = new Hidden(fileInput0, "oH", "#m@\"\"bsOO_");
      // Undeclared exception!
      try { 
        hidden0.fileInput("Asyj>T$&Kk{Sz?B.S;8", elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("X(am5DC+Ut`|");
      // Undeclared exception!
      try { 
        xmlEntityRef0.i((Object) "X(am5DC+Ut`|");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Submit submit0 = new Submit((Component) null, "&!\"pH|XTe+/<:N", "&!\"pH|XTe+/<:N");
      // Undeclared exception!
      try { 
        submit0.fileInput("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "", "5NzS#d%B_CS]^DI");
      checkbox0._setComponentId("");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      TextArea textArea0 = new TextArea((Component) null, "*oUSSG4G=hCvK", "*oUSSG4G=hCvK");
      Map<String, String> map0 = textArea0.getAttributes();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "strike");
      TableBlock tableBlock0 = table0.colgroup();
      // Undeclared exception!
      try { 
        tableBlock0.checkbox("KuH,O~RSvQ7m\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      TextArea textArea0 = new TextArea((Component) null, "S", "S");
      // Undeclared exception!
      try { 
        textArea0.tbody();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tbody component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      TextArea textArea0 = new TextArea((Component) null, "object", " xmlns=");
      Checkbox checkbox0 = new Checkbox(textArea0, "KFLpyIGKV*\"+YS)#Eo/", "object");
      // Undeclared exception!
      try { 
        checkbox0.blockquote();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "");
      tableBlock0.strong();
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      
      tableBlock0.id((String) null);
      assertFalse(tableBlock0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.ins((Object) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0);
      Checkbox checkbox0 = new Checkbox(block0, "&giza94nZS", "(/Vvn<H=EI;y5");
      FormElement formElement0 = checkbox0.fieldBinding("(/Vvn<H=EI;y5");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("(/Vvn<H=EI;y5", formElement0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.p();
      assertEquals("Block_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.area((String[]) null);
      assertEquals("Any_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "'z5yQQ_lwVn<U8Sabj", "'z5yQQ_lwVn<U8Sabj");
      // Undeclared exception!
      try { 
        checkbox0.acronym((Object) checkbox0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("mvel.debug.fileoutput");
      FileInput fileInput0 = new FileInput(xmlEntityRef0, "mvel.debug.fileoutput", "span");
      // Undeclared exception!
      try { 
        fileInput0.h3();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DateInput dateInput0 = new DateInput(errorPage0, (String) null, (String) null, (CharSequence) null);
      // Undeclared exception!
      try { 
        dateInput0.h6();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Form form0 = new Form("\"Kj`U$,rvG0{)|w");
      // Undeclared exception!
      try { 
        form0.s();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.tt();
      Component component1 = component0.requestFocus();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component1._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Form form0 = new Form("AJtLAV<;5BA=g");
      // Undeclared exception!
      try { 
        form0.dateInput("YekeWw\"s|?2I!%u", "wheel.components.Component");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Form form0 = new Form("iXvpu6|WR*v");
      // Undeclared exception!
      try { 
        form0.var();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("JU|*Z`M&");
      Hidden hidden0 = new Hidden(xmlEntityRef0, "JU|*Z`M&", "$K]UCd;~;IDbF");
      // Undeclared exception!
      try { 
        hidden0.sup((Object) hidden0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "");
      TableBlock tableBlock0 = table0.thead();
      TableRow tableRow0 = tableBlock0.tr();
      tableRow0.small();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Table_1", table0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("");
      // Undeclared exception!
      try { 
        errorPage0.frame(actionExpression0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      DateInput dateInput0 = new DateInput((Component) null, "", "@Ag", "@Ag");
      CharBuffer charBuffer0 = CharBuffer.allocate(16);
      // Undeclared exception!
      try { 
        dateInput0.kbd((Object) charBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Form form0 = new Form("javascript:");
      // Undeclared exception!
      try { 
        form0.samp();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Form form0 = new Form("4h");
      // Undeclared exception!
      try { 
        form0.label();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("(tdrXQNzI7zvj");
      // Undeclared exception!
      try { 
        xmlEntityRef0.dfn((Object) "(tdrXQNzI7zvj");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      StringBuilder stringBuilder0 = new StringBuilder("3");
      Image image0 = new Image(errorPage0, stringBuilder0, "3");
      TableBlock tableBlock0 = new TableBlock(image0, "nJ7Q*Mat#QI;y");
      Component component0 = tableBlock0.actionBinding("nJ7Q*Mat#QI;y");
      assertTrue(image0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("nJ7Q*Mat#QI;y", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.tfoot();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tfoot component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Form form0 = new Form("j]+F4V1'QjHz");
      // Undeclared exception!
      try { 
        form0.h6((Object) "j]+F4V1'QjHz");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      Component component0 = tableBlock0.h2((Object) "{");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      Component component0 = tableBlock0.clasS("{");
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      // Undeclared exception!
      try { 
        errorPage0.multiSelect("org.mvel.conversion.BigDecimalCH$10", dynamicSelectModel0, "org.mvel.conversion.BigDecimalCH$10");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("qx,");
      Form form0 = new Form(errorPage0, "qx,", actionExpression0);
      Component component0 = form0.legend();
      assertEquals("qx,", form0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.kbd();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String string0 = errorPage0.toString();
      assertEquals("<div id=\"wheel_ErrorPage\"/>", string0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Label label0 = new Label(errorPage0, errorPage0);
      ElExpression elExpression0 = new ElExpression((String) null);
      RadioGroup radioGroup0 = new RadioGroup(label0, "CZgr,^qiLkWt[", "CZgr,^qiLkWt[", (ISelectModel) null, elExpression0);
      Component component0 = radioGroup0.dt((Object) errorPage0);
      assertTrue(component0._isGeneratedId());
      assertEquals("CZgr,^qiLkWt[", radioGroup0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      FileInput fileInput0 = new FileInput((Component) null, "^:I", "^:I");
      // Undeclared exception!
      try { 
        fileInput0.dd();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }
}
