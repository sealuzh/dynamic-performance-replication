/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 02:08:48 GMT 2018
 */

package org.apache.bcel.verifier.structurals;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintStream;
import org.apache.bcel.Constants;
import org.apache.bcel.Repository;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.generic.AASTORE;
import org.apache.bcel.generic.ACONST_NULL;
import org.apache.bcel.generic.ALOAD;
import org.apache.bcel.generic.ANEWARRAY;
import org.apache.bcel.generic.ARETURN;
import org.apache.bcel.generic.ARRAYLENGTH;
import org.apache.bcel.generic.ASTORE;
import org.apache.bcel.generic.ATHROW;
import org.apache.bcel.generic.BALOAD;
import org.apache.bcel.generic.BIPUSH;
import org.apache.bcel.generic.BREAKPOINT;
import org.apache.bcel.generic.BasicType;
import org.apache.bcel.generic.BranchInstruction;
import org.apache.bcel.generic.CALOAD;
import org.apache.bcel.generic.CHECKCAST;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.ConversionInstruction;
import org.apache.bcel.generic.D2F;
import org.apache.bcel.generic.D2I;
import org.apache.bcel.generic.D2L;
import org.apache.bcel.generic.DADD;
import org.apache.bcel.generic.DASTORE;
import org.apache.bcel.generic.DCMPG;
import org.apache.bcel.generic.DCMPL;
import org.apache.bcel.generic.DCONST;
import org.apache.bcel.generic.DDIV;
import org.apache.bcel.generic.DLOAD;
import org.apache.bcel.generic.DMUL;
import org.apache.bcel.generic.DNEG;
import org.apache.bcel.generic.DREM;
import org.apache.bcel.generic.DRETURN;
import org.apache.bcel.generic.DSTORE;
import org.apache.bcel.generic.DSUB;
import org.apache.bcel.generic.DUP;
import org.apache.bcel.generic.DUP2_X1;
import org.apache.bcel.generic.DUP2_X2;
import org.apache.bcel.generic.DUP_X1;
import org.apache.bcel.generic.DUP_X2;
import org.apache.bcel.generic.F2D;
import org.apache.bcel.generic.F2I;
import org.apache.bcel.generic.F2L;
import org.apache.bcel.generic.FADD;
import org.apache.bcel.generic.FALOAD;
import org.apache.bcel.generic.FASTORE;
import org.apache.bcel.generic.FCMPG;
import org.apache.bcel.generic.FCMPL;
import org.apache.bcel.generic.FCONST;
import org.apache.bcel.generic.FDIV;
import org.apache.bcel.generic.FLOAD;
import org.apache.bcel.generic.FMUL;
import org.apache.bcel.generic.FNEG;
import org.apache.bcel.generic.FREM;
import org.apache.bcel.generic.FRETURN;
import org.apache.bcel.generic.FSTORE;
import org.apache.bcel.generic.FSUB;
import org.apache.bcel.generic.GETFIELD;
import org.apache.bcel.generic.GETSTATIC;
import org.apache.bcel.generic.GOTO;
import org.apache.bcel.generic.GOTO_W;
import org.apache.bcel.generic.I2B;
import org.apache.bcel.generic.I2C;
import org.apache.bcel.generic.I2D;
import org.apache.bcel.generic.I2F;
import org.apache.bcel.generic.I2L;
import org.apache.bcel.generic.IADD;
import org.apache.bcel.generic.IALOAD;
import org.apache.bcel.generic.IAND;
import org.apache.bcel.generic.IASTORE;
import org.apache.bcel.generic.ICONST;
import org.apache.bcel.generic.IDIV;
import org.apache.bcel.generic.IFEQ;
import org.apache.bcel.generic.IFGE;
import org.apache.bcel.generic.IFLT;
import org.apache.bcel.generic.IFNE;
import org.apache.bcel.generic.IFNONNULL;
import org.apache.bcel.generic.IFNULL;
import org.apache.bcel.generic.IF_ACMPEQ;
import org.apache.bcel.generic.IF_ICMPGE;
import org.apache.bcel.generic.IF_ICMPGT;
import org.apache.bcel.generic.IF_ICMPLE;
import org.apache.bcel.generic.IF_ICMPLT;
import org.apache.bcel.generic.IF_ICMPNE;
import org.apache.bcel.generic.IINC;
import org.apache.bcel.generic.ILOAD;
import org.apache.bcel.generic.IMPDEP1;
import org.apache.bcel.generic.IMPDEP2;
import org.apache.bcel.generic.IMUL;
import org.apache.bcel.generic.INEG;
import org.apache.bcel.generic.INSTANCEOF;
import org.apache.bcel.generic.INVOKEDYNAMIC;
import org.apache.bcel.generic.INVOKEINTERFACE;
import org.apache.bcel.generic.INVOKESPECIAL;
import org.apache.bcel.generic.INVOKESTATIC;
import org.apache.bcel.generic.IOR;
import org.apache.bcel.generic.IREM;
import org.apache.bcel.generic.IRETURN;
import org.apache.bcel.generic.ISHL;
import org.apache.bcel.generic.ISHR;
import org.apache.bcel.generic.ISTORE;
import org.apache.bcel.generic.ISUB;
import org.apache.bcel.generic.IUSHR;
import org.apache.bcel.generic.IXOR;
import org.apache.bcel.generic.Instruction;
import org.apache.bcel.generic.InstructionConstants;
import org.apache.bcel.generic.InstructionHandle;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.JSR;
import org.apache.bcel.generic.JSR_W;
import org.apache.bcel.generic.L2D;
import org.apache.bcel.generic.L2F;
import org.apache.bcel.generic.LADD;
import org.apache.bcel.generic.LALOAD;
import org.apache.bcel.generic.LAND;
import org.apache.bcel.generic.LASTORE;
import org.apache.bcel.generic.LCMP;
import org.apache.bcel.generic.LCONST;
import org.apache.bcel.generic.LDC;
import org.apache.bcel.generic.LDC2_W;
import org.apache.bcel.generic.LDC_W;
import org.apache.bcel.generic.LDIV;
import org.apache.bcel.generic.LLOAD;
import org.apache.bcel.generic.LMUL;
import org.apache.bcel.generic.LNEG;
import org.apache.bcel.generic.LOOKUPSWITCH;
import org.apache.bcel.generic.LOR;
import org.apache.bcel.generic.LREM;
import org.apache.bcel.generic.LRETURN;
import org.apache.bcel.generic.LSHL;
import org.apache.bcel.generic.LSHR;
import org.apache.bcel.generic.LSTORE;
import org.apache.bcel.generic.LSUB;
import org.apache.bcel.generic.LUSHR;
import org.apache.bcel.generic.LXOR;
import org.apache.bcel.generic.LoadClass;
import org.apache.bcel.generic.MONITORENTER;
import org.apache.bcel.generic.MONITOREXIT;
import org.apache.bcel.generic.MULTIANEWARRAY;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.NEWARRAY;
import org.apache.bcel.generic.NOP;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.POP;
import org.apache.bcel.generic.POP2;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.RET;
import org.apache.bcel.generic.ReturnInstruction;
import org.apache.bcel.generic.SALOAD;
import org.apache.bcel.generic.SASTORE;
import org.apache.bcel.generic.SIPUSH;
import org.apache.bcel.generic.SWAP;
import org.apache.bcel.generic.TABLESWITCH;
import org.apache.bcel.generic.Type;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ClassPath;
import org.apache.bcel.util.MemorySensitiveClassPathRepository;
import org.apache.bcel.verifier.structurals.Frame;
import org.apache.bcel.verifier.structurals.InstConstraintVisitor;
import org.apache.bcel.verifier.structurals.LocalVariables;
import org.apache.bcel.verifier.structurals.OperandStack;
import org.apache.bcel.verifier.structurals.UninitializedObjectType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InstConstraintVisitor_ESTest extends InstConstraintVisitor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DCONST dCONST0 = new DCONST(1.0);
      instConstraintVisitor0.visitDCONST(dCONST0);
      D2F d2F0 = new D2F();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIINC((IINC) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      instConstraintVisitor0.visitACONST_NULL(aCONST_NULL0);
      ARRAYLENGTH aRRAYLENGTH0 = new ARRAYLENGTH();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitARRAYLENGTH(aRRAYLENGTH0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      GOTO gOTO0 = new GOTO((InstructionHandle) null);
      instConstraintVisitor0.visitGOTO(gOTO0);
      assertEquals(0, gOTO0.getIndex());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      LALOAD lALOAD0 = new LALOAD();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      IMPDEP1 iMPDEP1_0 = new IMPDEP1();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIMPDEP1(iMPDEP1_0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: In this JustIce verification pass there should not occur an illegal instruction such as IMPDEP1.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      IMPDEP2 iMPDEP2_0 = new IMPDEP2();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIMPDEP2(iMPDEP2_0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: In this JustIce verification pass there should not occur an illegal instruction such as IMPDEP2.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      BIPUSH bIPUSH0 = new BIPUSH((byte)116);
      instConstraintVisitor0.visitBIPUSH(bIPUSH0);
      assertEquals("bipush", bIPUSH0.getName());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ILOAD iLOAD0 = new ILOAD(2710);
      instConstraintVisitor0.visitILOAD(iLOAD0);
      assertEquals("iload", iLOAD0.getName());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSR jSR0 = new JSR((InstructionHandle) null);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.visitJSR(jSR0);
      assertEquals(0, jSR0.getIndex());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      CALOAD cALOAD0 = new CALOAD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitCALOAD(cALOAD0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      NOP nOP0 = new NOP();
      instConstraintVisitor0.visitNOP(nOP0);
      assertEquals("nop", nOP0.getName());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FSTORE fSTORE0 = new FSTORE(591);
      instConstraintVisitor0.visitFSTORE(fSTORE0);
      assertEquals(591, fSTORE0.getIndex());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.visitDSTORE((DSTORE) null);
      DASTORE dASTORE0 = new DASTORE();
      assertEquals("dastore", dASTORE0.getName());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitBREAKPOINT((BREAKPOINT) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: In this JustIce verification pass there should not occur an illegal instruction such as BREAKPOINT.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      GETSTATIC gETSTATIC0 = new GETSTATIC(790);
      instConstraintVisitor0.visitGETSTATIC(gETSTATIC0);
      assertEquals((short)178, gETSTATIC0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LMUL lMUL0 = new LMUL();
      instConstraintVisitor0.visitALOAD((ALOAD) null);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      instConstraintVisitor0.setConstantPoolGen(constantPoolGen0);
      IALOAD iALOAD0 = new IALOAD();
      assertEquals(1, iALOAD0.getLength());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      SIPUSH sIPUSH0 = new SIPUSH((short) (-287));
      instConstraintVisitor0.visitSIPUSH(sIPUSH0);
      assertEquals("sipush", sIPUSH0.getName());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      INVOKEINTERFACE iNVOKEINTERFACE0 = new INVOKEINTERFACE(2, 2);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitCPInstruction(iNVOKEINTERFACE0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(3);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINVOKEDYNAMIC(iNVOKEDYNAMIC0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INVOKEDYNAMIC instruction is not supported at this time
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      GOTO gOTO0 = new GOTO((InstructionHandle) null);
      instConstraintVisitor0.visitLSTORE((LSTORE) null);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ATHROW aTHROW0 = new ATHROW();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitTABLESWITCH((TABLESWITCH) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DLOAD dLOAD0 = new DLOAD(5);
      instConstraintVisitor0.visitDLOAD(dLOAD0);
      assertEquals(2, dLOAD0.getLength());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      INVOKESTATIC iNVOKESTATIC0 = new INVOKESTATIC(1019);
      instConstraintVisitor0.visitInvokeInstruction(iNVOKESTATIC0);
      assertEquals(3, iNVOKESTATIC0.getLength());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setMethodGen((MethodGen) null);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LLOAD lLOAD0 = new LLOAD(736);
      instConstraintVisitor0.visitLLOAD(lLOAD0);
      assertEquals(4, lLOAD0.getLength());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SASTORE sASTORE0 = new SASTORE();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      BasicType basicType0 = Type.BYTE;
      NEWARRAY nEWARRAY0 = new NEWARRAY(basicType0);
      INVOKEINTERFACE iNVOKEINTERFACE0 = new INVOKEINTERFACE(214, 346);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINVOKEINTERFACE(iNVOKEINTERFACE0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.visitGOTO_W((GOTO_W) null);
      JSR_W jSR_W0 = new JSR_W((InstructionHandle) null);
      instConstraintVisitor0.visitJSR_W(jSR_W0);
      LDC lDC0 = new LDC(5);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLDC(lDC0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.visitFCONST((FCONST) null);
      AASTORE aASTORE0 = new AASTORE();
      assertEquals((short)83, aASTORE0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(2862);
      LocalVariables localVariables1 = localVariables0.getClone();
      ObjectType objectType0 = new ObjectType("F&(gE#jA;`Czt=$Ws");
      OperandStack operandStack0 = new OperandStack(2862, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      RET rET0 = new RET(46);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitRET(rET0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction RET constraint violated: Expecting a ReturnaddressType in local variable 46.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(2862);
      LocalVariables localVariables1 = localVariables0.getClone();
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      localVariables0.merge(localVariables1);
      ObjectType objectType0 = ObjectType.getInstance("<clinit>");
      OperandStack operandStack0 = new OperandStack(2862, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      RET rET0 = new RET(2862);
      LOR lOR0 = new LOR();
      FCMPG fCMPG0 = new FCMPG();
      ARETURN aRETURN0 = new ARETURN();
      ARETURN aRETURN1 = new ARETURN();
      FCMPG fCMPG1 = new FCMPG();
      FCMPG fCMPG2 = new FCMPG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFCMPG(fCMPG2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `clinit>;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(550);
      localVariables0.getClone();
      ObjectType objectType0 = new ObjectType(" p!kgb-");
      OperandStack operandStack0 = new OperandStack(1206, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      LSUB lSUB0 = new LSUB();
      FRETURN fRETURN0 = new FRETURN();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFRETURN(fRETURN0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FRETURN constraint violated: The value at the stack top is not of type 'float', but of type ' p!kgb-'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(2862);
      LocalVariables localVariables1 = localVariables0.getClone();
      ObjectType objectType0 = new ObjectType("g Dp)!kgb-");
      OperandStack operandStack0 = new OperandStack(2862, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      RET rET0 = new RET(46);
      DUP2_X2 dUP2_X2_0 = new DUP2_X2();
      FALOAD fALOAD0 = new FALOAD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFALOAD(fALOAD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FALOAD constraint violated: The 'index' is not of type int but of type g Dp)!kgb-.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(2852);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.toString();
      ObjectType objectType0 = new ObjectType("g Dp)!kgb-");
      OperandStack operandStack0 = new OperandStack(2852, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      RET rET0 = new RET(46);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("g Dp)!kgb-");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.append((CharSequence) "g Dp)!kgb-");
      LOR lOR0 = new LOR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLOR(lOR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LOR constraint violated: The value at the stack top is not of type 'long', but of type 'g Dp)!kgb-'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(2852);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables0.toString();
      ObjectType objectType0 = new ObjectType("1!lVH{C/rowcp-N|");
      OperandStack operandStack0 = new OperandStack(2852, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      frame0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      RET rET0 = new RET(1);
      LMUL lMUL0 = new LMUL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLMUL(lMUL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LMUL constraint violated: The value at the stack top is not of type 'long', but of type '1!lVH{C.rowcp-N|'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(550);
      LocalVariables localVariables1 = localVariables0.getClone();
      String string0 = localVariables1.toString();
      ObjectType objectType0 = ObjectType.getInstance(string0);
      OperandStack operandStack0 = new OperandStack(550, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ox.fG{\"Y(p'ik[(c");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      FCMPL fCMPL0 = new FCMPL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFCMPL(fCMPL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `unknown object>
         // 1: <unknown object>
         // 2: <unknown object>
         // 3: <unknown object>
         // 4: <unknown object>
         // 5: <unknown object>
         // 6: <unknown object>
         // 7: <unknown object>
         // 8: <unknown object>
         // 9: <unknown object>
         // 10: <unknown object>
         // 11: <unknown object>
         // 12: <unknown object>
         // 13: <unknown object>
         // 14: <unknown object>
         // 15: <unknown object>
         // 16: <unknown object>
         // 17: <unknown object>
         // 18: <unknown object>
         // 19: <unknown object>
         // 20: <unknown object>
         // 21: <unknown object>
         // 22: <unknown object>
         // 23: <unknown object>
         // 24: <unknown object>
         // 25: <unknown object>
         // 26: <unknown object>
         // 27: <unknown object>
         // 28: <unknown object>
         // 29: <unknown object>
         // 30: <unknown object>
         // 31: <unknown object>
         // 32: <unknown object>
         // 33: <unknown object>
         // 34: <unknown object>
         // 35: <unknown object>
         // 36: <unknown object>
         // 37: <unknown object>
         // 38: <unknown object>
         // 39: <unknown object>
         // 40: <unknown object>
         // 41: <unknown object>
         // 42: <unknown object>
         // 43: <unknown object>
         // 44: <unknown object>
         // 45: <unknown object>
         // 46: <unknown object>
         // 47: <unknown object>
         // 48: <unknown object>
         // 49: <unknown object>
         // 50: <unknown object>
         // 51: <unknown object>
         // 52: <unknown object>
         // 53: <unknown object>
         // 54: <unknown object>
         // 55: <unknown object>
         // 56: <unknown object>
         // 57: <unknown object>
         // 58: <unknown object>
         // 59: <unknown object>
         // 60: <unknown object>
         // 61: <unknown object>
         // 62: <unknown object>
         // 63: <unknown object>
         // 64: <unknown object>
         // 65: <unknown object>
         // 66: <unknown object>
         // 67: <unknown object>
         // 68: <unknown object>
         // 69: <unknown object>
         // 70: <unknown object>
         // 71: <unknown object>
         // 72: <unknown object>
         // 73: <unknown object>
         // 74: <unknown object>
         // 75: <unknown object>
         // 76: <unknown object>
         // 77: <unknown object>
         // 78: <unknown object>
         // 79: <unknown object>
         // 80: <unknown object>
         // 81: <unknown object>
         // 82: <unknown object>
         // 83: <unknown object>
         // 84: <unknown object>
         // 85: <unknown object>
         // 86: <unknown object>
         // 87: <unknown object>
         // 88: <unknown object>
         // 89: <unknown object>
         // 90: <unknown object>
         // 91: <unknown object>
         // 92: <unknown object>
         // 93: <unknown object>
         // 94: <unknown object>
         // 95: <unknown object>
         // 96: <unknown object>
         // 97: <unknown object>
         // 98: <unknown object>
         // 99: <unknown object>
         // 100: <unknown object>
         // 101: <unknown object>
         // 102: <unknown object>
         // 103: <unknown object>
         // 104: <unknown object>
         // 105: <unknown object>
         // 106: <unknown object>
         // 107: <unknown object>
         // 108: <unknown object>
         // 109: <unknown object>
         // 110: <unknown object>
         // 111: <unknown object>
         // 112: <unknown object>
         // 113: <unknown object>
         // 114: <unknown object>
         // 115: <unknown object>
         // 116: <unknown object>
         // 117: <unknown object>
         // 118: <unknown object>
         // 119: <unknown object>
         // 120: <unknown object>
         // 121: <unknown object>
         // 122: <unknown object>
         // 123: <unknown object>
         // 124: <unknown object>
         // 125: <unknown object>
         // 126: <unknown object>
         // 127: <unknown object>
         // 128: <unknown object>
         // 129: <unknown object>
         // 130: <unknown object>
         // 131: <unknown object>
         // 132: <unknown object>
         // 133: <unknown object>
         // 134: <unknown object>
         // 135: <unknown object>
         // 136: <unknown object>
         // 137: <unknown object>
         // 138: <unknown object>
         // 139: <unknown object>
         // 140: <unknown object>
         // 141: <unknown object>
         // 142: <unknown object>
         // 143: <unknown object>
         // 144: <unknown object>
         // 145: <unknown object>
         // 146: <unknown object>
         // 147: <unknown object>
         // 148: <unknown object>
         // 149: <unknown object>
         // 150: <unknown object>
         // 151: <unknown object>
         // 152: <unknown object>
         // 153: <unknown object>
         // 154: <unknown object>
         // 155: <unknown object>
         // 156: <unknown object>
         // 157: <unknown object>
         // 158: <unknown object>
         // 159: <unknown object>
         // 160: <unknown object>
         // 161: <unknown object>
         // 162: <unknown object>
         // 163: <unknown object>
         // 164: <unknown object>
         // 165: <unknown object>
         // 166: <unknown object>
         // 167: <unknown object>
         // 168: <unknown object>
         // 169: <unknown object>
         // 170: <unknown object>
         // 171: <unknown object>
         // 172: <unknown object>
         // 173: <unknown object>
         // 174: <unknown object>
         // 175: <unknown object>
         // 176: <unknown object>
         // 177: <unknown object>
         // 178: <unknown object>
         // 179: <unknown object>
         // 180: <unknown object>
         // 181: <unknown object>
         // 182: <unknown object>
         // 183: <unknown object>
         // 184: <unknown object>
         // 185: <unknown object>
         // 186: <unknown object>
         // 187: <unknown object>
         // 188: <unknown object>
         // 189: <unknown object>
         // 190: <unknown object>
         // 191: <unknown object>
         // 192: <unknown object>
         // 193: <unknown object>
         // 194: <unknown object>
         // 195: <unknown object>
         // 196: <unknown object>
         // 197: <unknown object>
         // 198: <unknown object>
         // 199: <unknown object>
         // 200: <unknown object>
         // 201: <unknown object>
         // 202: <unknown object>
         // 203: <unknown object>
         // 204: <unknown object>
         // 205: <unknown object>
         // 206: <unknown object>
         // 207: <unknown object>
         // 208: <unknown object>
         // 209: <unknown object>
         // 210: <unknown object>
         // 211: <unknown object>
         // 212: <unknown object>
         // 213: <unknown object>
         // 214: <unknown object>
         // 215: <unknown object>
         // 216: <unknown object>
         // 217: <unknown object>
         // 218: <unknown object>
         // 219: <unknown object>
         // 220: <unknown object>
         // 221: <unknown object>
         // 222: <unknown object>
         // 223: <unknown object>
         // 224: <unknown object>
         // 225: <unknown object>
         // 226: <unknown object>
         // 227: <unknown object>
         // 228: <unknown object>
         // 229: <unknown object>
         // 230: <unknown object>
         // 231: <unknown object>
         // 232: <unknown object>
         // 233: <unknown object>
         // 234: <unknown object>
         // 235: <unknown object>
         // 236: <unknown object>
         // 237: <unknown object>
         // 238: <unknown object>
         // 239: <unknown object>
         // 240: <unknown object>
         // 241: <unknown object>
         // 242: <unknown object>
         // 243: <unknown object>
         // 244: <unknown object>
         // 245: <unknown object>
         // 246: <unknown object>
         // 247: <unknown object>
         // 248: <unknown object>
         // 249: <unknown object>
         // 250: <unknown object>
         // 251: <unknown object>
         // 252: <unknown object>
         // 253: <unknown object>
         // 254: <unknown object>
         // 255: <unknown object>
         // 256: <unknown object>
         // 257: <unknown object>
         // 258: <unknown object>
         // 259: <unknown object>
         // 260: <unknown object>
         // 261: <unknown object>
         // 262: <unknown object>
         // 263: <unknown object>
         // 264: <unknown object>
         // 265: <unknown object>
         // 266: <unknown object>
         // 267: <unknown object>
         // 268: <unknown object>
         // 269: <unknown object>
         // 270: <unknown object>
         // 271: <unknown object>
         // 272: <unknown object>
         // 273: <unknown object>
         // 274: <unknown object>
         // 275: <unknown object>
         // 276: <unknown object>
         // 277: <unknown object>
         // 278: <unknown object>
         // 279: <unknown object>
         // 280: <unknown object>
         // 281: <unknown object>
         // 282: <unknown object>
         // 283: <unknown object>
         // 284: <unknown object>
         // 285: <unknown object>
         // 286: <unknown object>
         // 287: <unknown object>
         // 288: <unknown object>
         // 289: <unknown object>
         // 290: <unknown object>
         // 291: <unknown object>
         // 292: <unknown object>
         // 293: <unknown object>
         // 294: <unknown object>
         // 295: <unknown object>
         // 296: <unknown object>
         // 297: <unknown object>
         // 298: <unknown object>
         // 299: <unknown object>
         // 300: <unknown object>
         // 301: <unknown object>
         // 302: <unknown object>
         // 303: <unknown object>
         // 304: <unknown object>
         // 305: <unknown object>
         // 306: <unknown object>
         // 307: <unknown object>
         // 308: <unknown object>
         // 309: <unknown object>
         // 310: <unknown object>
         // 311: <unknown object>
         // 312: <unknown object>
         // 313: <unknown object>
         // 314: <unknown object>
         // 315: <unknown object>
         // 316: <unknown object>
         // 317: <unknown object>
         // 318: <unknown object>
         // 319: <unknown object>
         // 320: <unknown object>
         // 321: <unknown object>
         // 322: <unknown object>
         // 323: <unknown object>
         // 324: <unknown object>
         // 325: <unknown object>
         // 326: <unknown object>
         // 327: <unknown object>
         // 328: <unknown object>
         // 329: <unknown object>
         // 330: <unknown object>
         // 331: <unknown object>
         // 332: <unknown object>
         // 333: <unknown object>
         // 334: <unknown object>
         // 335: <unknown object>
         // 336: <unknown object>
         // 337: <unknown object>
         // 338: <unknown object>
         // 339: <unknown object>
         // 340: <unknown object>
         // 341: <unknown object>
         // 342: <unknown object>
         // 343: <unknown object>
         // 344: <unknown object>
         // 345: <unknown object>
         // 346: <unknown object>
         // 347: <unknown object>
         // 348: <unknown object>
         // 349: <unknown object>
         // 350: <unknown object>
         // 351: <unknown object>
         // 352: <unknown object>
         // 353: <unknown object>
         // 354: <unknown object>
         // 355: <unknown object>
         // 356: <unknown object>
         // 357: <unknown object>
         // 358: <unknown object>
         // 359: <unknown object>
         // 360: <unknown object>
         // 361: <unknown object>
         // 362: <unknown object>
         // 363: <unknown object>
         // 364: <unknown object>
         // 365: <unknown object>
         // 366: <unknown object>
         // 367: <unknown object>
         // 368: <unknown object>
         // 369: <unknown object>
         // 370: <unknown object>
         // 371: <unknown object>
         // 372: <unknown object>
         // 373: <unknown object>
         // 374: <unknown object>
         // 375: <unknown object>
         // 376: <unknown object>
         // 377: <unknown object>
         // 378: <unknown object>
         // 379: <unknown object>
         // 380: <unknown object>
         // 381: <unknown object>
         // 382: <unknown object>
         // 383: <unknown object>
         // 384: <unknown object>
         // 385: <unknown object>
         // 386: <unknown object>
         // 387: <unknown object>
         // 388: <unknown object>
         // 389: <unknown object>
         // 390: <unknown object>
         // 391: <unknown object>
         // 392: <unknown object>
         // 393: <unknown object>
         // 394: <unknown object>
         // 395: <unknown object>
         // 396: <unknown object>
         // 397: <unknown object>
         // 398: <unknown object>
         // 399: <unknown object>
         // 400: <unknown object>
         // 401: <unknown object>
         // 402: <unknown object>
         // 403: <unknown object>
         // 404: <unknown object>
         // 405: <unknown object>
         // 406: <unknown object>
         // 407: <unknown object>
         // 408: <unknown object>
         // 409: <unknown object>
         // 410: <unknown object>
         // 411: <unknown object>
         // 412: <unknown object>
         // 413: <unknown object>
         // 414: <unknown object>
         // 415: <unknown object>
         // 416: <unknown object>
         // 417: <unknown object>
         // 418: <unknown object>
         // 419: <unknown object>
         // 420: <unknown object>
         // 421: <unknown object>
         // 422: <unknown object>
         // 423: <unknown object>
         // 424: <unknown object>
         // 425: <unknown object>
         // 426: <unknown object>
         // 427: <unknown object>
         // 428: <unknown object>
         // 429: <unknown object>
         // 430: <unknown object>
         // 431: <unknown object>
         // 432: <unknown object>
         // 433: <unknown object>
         // 434: <unknown object>
         // 435: <unknown object>
         // 436: <unknown object>
         // 437: <unknown object>
         // 438: <unknown object>
         // 439: <unknown object>
         // 440: <unknown object>
         // 441: <unknown object>
         // 442: <unknown object>
         // 443: <unknown object>
         // 444: <unknown object>
         // 445: <unknown object>
         // 446: <unknown object>
         // 447: <unknown object>
         // 448: <unknown object>
         // 449: <unknown object>
         // 450: <unknown object>
         // 451: <unknown object>
         // 452: <unknown object>
         // 453: <unknown object>
         // 454: <unknown object>
         // 455: <unknown object>
         // 456: <unknown object>
         // 457: <unknown object>
         // 458: <unknown object>
         // 459: <unknown object>
         // 460: <unknown object>
         // 461: <unknown object>
         // 462: <unknown object>
         // 463: <unknown object>
         // 464: <unknown object>
         // 465: <unknown object>
         // 466: <unknown object>
         // 467: <unknown object>
         // 468: <unknown object>
         // 469: <unknown object>
         // 470: <unknown object>
         // 471: <unknown object>
         // 472: <unknown object>
         // 473: <unknown object>
         // 474: <unknown object>
         // 475: <unknown object>
         // 476: <unknown object>
         // 477: <unknown object>
         // 478: <unknown object>
         // 479: <unknown object>
         // 480: <unknown object>
         // 481: <unknown object>
         // 482: <unknown object>
         // 483: <unknown object>
         // 484: <unknown object>
         // 485: <unknown object>
         // 486: <unknown object>
         // 487: <unknown object>
         // 488: <unknown object>
         // 489: <unknown object>
         // 490: <unknown object>
         // 491: <unknown object>
         // 492: <unknown object>
         // 493: <unknown object>
         // 494: <unknown object>
         // 495: <unknown object>
         // 496: <unknown object>
         // 497: <unknown object>
         // 498: <unknown object>
         // 499: <unknown object>
         // 500: <unknown object>
         // 501: <unknown object>
         // 502: <unknown object>
         // 503: <unknown object>
         // 504: <unknown object>
         // 505: <unknown object>
         // 506: <unknown object>
         // 507: <unknown object>
         // 508: <unknown object>
         // 509: <unknown object>
         // 510: <unknown object>
         // 511: <unknown object>
         // 512: <unknown object>
         // 513: <unknown object>
         // 514: <unknown object>
         // 515: <unknown object>
         // 516: <unknown object>
         // 517: <unknown object>
         // 518: <unknown object>
         // 519: <unknown object>
         // 520: <unknown object>
         // 521: <unknown object>
         // 522: <unknown object>
         // 523: <unknown object>
         // 524: <unknown object>
         // 525: <unknown object>
         // 526: <unknown object>
         // 527: <unknown object>
         // 528: <unknown object>
         // 529: <unknown object>
         // 530: <unknown object>
         // 531: <unknown object>
         // 532: <unknown object>
         // 533: <unknown object>
         // 534: <unknown object>
         // 535: <unknown object>
         // 536: <unknown object>
         // 537: <unknown object>
         // 538: <unknown object>
         // 539: <unknown object>
         // 540: <unknown object>
         // 541: <unknown object>
         // 542: <unknown object>
         // 543: <unknown object>
         // 544: <unknown object>
         // 545: <unknown object>
         // 546: <unknown object>
         // 547: <unknown object>
         // 548: <unknown object>
         // 549: <unknown object>
         // ;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(2862);
      ObjectType objectType0 = new ObjectType(" p!kgb-");
      localVariables0.clone();
      OperandStack operandStack0 = new OperandStack(276, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      DADD dADD0 = new DADD();
      ARETURN aRETURN0 = new ARETURN();
      dADD0.produceStack((ConstantPoolGen) null);
      instConstraintVisitor0.visitARETURN(aRETURN0);
      DUP_X2 dUP_X2_0 = new DUP_X2();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP_X2(dUP_X2_0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(2862);
      localVariables0.getClone();
      ObjectType objectType0 = new ObjectType("K#a");
      OperandStack operandStack0 = new OperandStack(2076, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      RET rET0 = new RET(2076);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("g Dp)!kgb-");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.append((CharSequence) "g Dp)!kgb-");
      FCMPG fCMPG0 = new FCMPG();
      ARETURN aRETURN0 = new ARETURN();
      IF_ICMPGE iF_ICMPGE0 = new IF_ICMPGE((InstructionHandle) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPGE(iF_ICMPGE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IF_ICMPGE constraint violated: The value at the stack top is not of type 'int', but of type 'K#a'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(2852);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.toString();
      ObjectType objectType0 = new ObjectType("g Dp)!kgb-");
      OperandStack operandStack0 = new OperandStack(2852, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LADD lADD0 = new LADD();
      // Undeclared exception!
      try { 
        lADD0.accept(instConstraintVisitor0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LADD constraint violated: Cannot consume 4 stack slots: only 1 slot(s) left on stack!
         // Stack:
         // Slots used: 1 MaxStack: 2852.
         // g Dp)!kgb- (Size: 1)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(2852);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.toString();
      ObjectType objectType0 = new ObjectType("g Dp)!kgb-");
      OperandStack operandStack0 = new OperandStack(2852, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      RET rET0 = new RET(46);
      POP pOP0 = new POP();
      instConstraintVisitor0.visitPOP(pOP0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("g Dp)!kgb-");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      FCMPL fCMPL0 = new FCMPL();
      IMUL iMUL0 = new IMUL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIMUL(iMUL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IMUL constraint violated: The value at the stack top is not of type 'int', but of type 'g Dp)!kgb-'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(376);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.getClone();
      ObjectType objectType0 = new ObjectType("%^SLWRMQE{0TC>4sv");
      OperandStack operandStack0 = new OperandStack(376, objectType0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.toString();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      instConstraintVisitor0.visitLCONST((LCONST) null);
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      LRETURN lRETURN0 = new LRETURN();
      I2F i2F0 = new I2F();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2F(i2F0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2F constraint violated: The value at the stack top is not of type 'int', but of type '%^SLWRMQE{0TC>4sv'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(2852);
      FileSystemHandling.shouldAllThrowIOExceptions();
      CHECKCAST cHECKCAST0 = new CHECKCAST(0);
      localVariables0.toString();
      ObjectType objectType0 = new ObjectType("g Dp)!kgb-");
      OperandStack operandStack0 = new OperandStack(2852, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      RET rET0 = new RET(0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("g Dp)!kgb-");
      DUP_X1 dUP_X1_0 = new DUP_X1();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP_X1(dUP_X1_0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(550);
      LocalVariables localVariables1 = localVariables0.getClone();
      ObjectType objectType0 = new ObjectType("D$M%");
      OperandStack operandStack0 = new OperandStack(550, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      IDIV iDIV0 = new IDIV();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIDIV(iDIV0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IDIV constraint violated: The value at the stack top is not of type 'int', but of type 'D$M%'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(2852);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.toString();
      ObjectType objectType0 = new ObjectType("EXCS_ARRAY_EXCEPTION");
      OperandStack operandStack0 = new OperandStack(2852, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      localVariables0.toString();
      frame0.clone();
      instConstraintVisitor0.setFrame(frame0);
      RET rET0 = new RET(46);
      RET rET1 = new RET(249);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("a5-mp*O^L[6LGP3Ldt%");
      mockFileOutputStream0.close();
      IMUL iMUL0 = new IMUL();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      D2I d2I0 = new D2I();
      D2I d2I1 = new D2I();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitD2I(d2I0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction D2I constraint violated: The value at the stack top is not of type 'double', but of type 'EXCS_ARRAY_EXCEPTION'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(2852);
      FileSystemHandling.shouldAllThrowIOExceptions();
      CHECKCAST cHECKCAST0 = new CHECKCAST(0);
      localVariables0.toString();
      ObjectType objectType0 = new ObjectType("g Dp)!kgb-");
      OperandStack operandStack0 = new OperandStack(2852, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      RET rET0 = new RET(0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("g Dp)!kgb-");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.append((CharSequence) "g Dp)!kgb-");
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitF2I((F2I) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(2852);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.toString();
      ObjectType objectType0 = new ObjectType("g Dp)!kgb-");
      OperandStack operandStack0 = new OperandStack(2852, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      frame0.equals(operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      I2C i2C0 = new I2C();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2C(i2C0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2C constraint violated: The value at the stack top is not of type 'int', but of type 'g Dp)!kgb-'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(2852);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.toString();
      ObjectType.getInstance("g Dp)!kgb-");
      OperandStack operandStack0 = new OperandStack(2852);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      RET rET0 = new RET(2852);
      POP pOP0 = new POP();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "|Vj@vo>s=2");
      ISTORE iSTORE0 = new ISTORE(153);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "g Dp)!kgb-");
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStoreInstruction(iSTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ISTORE constraint violated: Cannot STORE: Stack to read from is empty.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(2862);
      LocalVariables localVariables1 = localVariables0.getClone();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel");
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      localVariables0.merge(localVariables1);
      ObjectType objectType0 = ObjectType.getInstance("<clinit>");
      OperandStack operandStack0 = new OperandStack(2862, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.createFolder(evoSuiteFile0);
      POP pOP0 = new POP();
      instConstraintVisitor0.visitPOP(pOP0);
      LUSHR lUSHR0 = new LUSHR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLUSHR(lUSHR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `clinit>;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(2852);
      LocalVariables localVariables1 = localVariables0.getClone();
      ObjectType objectType0 = new ObjectType("g Dp)!kgb-");
      OperandStack operandStack0 = new OperandStack(2852, objectType0);
      int int0 = 3457;
      Frame frame0 = new Frame(localVariables1, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LSUB lSUB0 = new LSUB();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLSUB(lSUB0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LSUB constraint violated: The value at the stack top is not of type 'long', but of type 'g Dp)!kgb-'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(2549);
      localVariables0.getClone();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "g Dp)!kgb-");
      localVariables0.toString();
      ObjectType objectType0 = new ObjectType("{3 >?'W/j");
      OperandStack operandStack0 = new OperandStack(2549, objectType0);
      operandStack0.clone();
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      RET rET0 = new RET(2549);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("p&;164B/isIqCKc@");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      FRETURN fRETURN0 = new FRETURN();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIOR((IOR) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(2862);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables0.getClone();
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      localVariables0.merge(localVariables1);
      ObjectType objectType0 = ObjectType.getInstance("<clinit>");
      OperandStack operandStack0 = new OperandStack(2862, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      RET rET0 = new RET(2862);
      LOR lOR0 = new LOR();
      FCMPG fCMPG0 = new FCMPG();
      ARETURN aRETURN0 = new ARETURN();
      ARETURN aRETURN1 = new ARETURN();
      FCMPG fCMPG1 = new FCMPG();
      FCMPG fCMPG2 = new FCMPG();
      I2D i2D0 = new I2D();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2D(i2D0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `clinit>;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LocalVariables localVariables0 = new LocalVariables(548);
      LocalVariables localVariables1 = localVariables0.getClone();
      ObjectType objectType0 = ObjectType.getInstance("D$M%");
      OperandStack operandStack0 = new OperandStack(548, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LRETURN lRETURN0 = new LRETURN();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLRETURN(lRETURN0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LRETURN constraint violated: The value at the stack top is not of type 'long', but of type 'D$M%'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      AASTORE aASTORE0 = new AASTORE();
      DRETURN dRETURN0 = new DRETURN();
      LocalVariables localVariables0 = new LocalVariables(2862);
      LocalVariables localVariables1 = localVariables0.getClone();
      ObjectType objectType0 = new ObjectType("g Dp)!kgb-");
      OperandStack operandStack0 = new OperandStack(2862, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("g Dp)!kgb-");
      IFNE iFNE0 = new IFNE((InstructionHandle) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFNE(iFNE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IFNE constraint violated: The value at the stack top is not of type 'int', but of type 'g Dp)!kgb-'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(2852);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.toString();
      ObjectType objectType0 = new ObjectType("g Dp)!kgb-");
      OperandStack operandStack0 = new OperandStack(2852, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      int int0 = 46;
      LAND lAND0 = new LAND();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLAND(lAND0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LAND constraint violated: The value at the stack top is not of type 'long', but of type 'g Dp)!kgb-'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(2862);
      assertEquals(2862, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(2862, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      ObjectType objectType0 = new ObjectType("D$M%");
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(8192, objectType0);
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals(8192, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals(8192, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals(8192, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(localVariables0, localVariables1);
      
      RET rET0 = new RET(8192);
      assertEquals(4, rET0.getLength());
      assertEquals("ret", rET0.getName());
      assertEquals(8192, rET0.getIndex());
      assertEquals((short)169, rET0.getOpcode());
      assertNotNull(rET0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("D$M%");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "g Dp)!kgb-");
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertNotNull(printStream0);
      
      FCMPG fCMPG0 = new FCMPG();
      assertEquals((short)150, fCMPG0.getOpcode());
      assertEquals(1, fCMPG0.getLength());
      assertEquals("fcmpg", fCMPG0.getName());
      assertNotNull(fCMPG0);
      
      ARETURN aRETURN0 = new ARETURN();
      assertEquals("areturn", aRETURN0.getName());
      assertEquals(1, aRETURN0.getLength());
      assertEquals((short)176, aRETURN0.getOpcode());
      assertNotNull(aRETURN0);
      
      ARETURN aRETURN1 = new ARETURN();
      assertTrue(aRETURN1.equals((Object)aRETURN0));
      assertEquals((short)176, aRETURN1.getOpcode());
      assertEquals(1, aRETURN1.getLength());
      assertEquals("areturn", aRETURN1.getName());
      assertNotNull(aRETURN1);
      
      instConstraintVisitor0.visitARETURN(aRETURN1);
      assertTrue(aRETURN1.equals((Object)aRETURN0));
      assertEquals((short)176, aRETURN1.getOpcode());
      assertEquals(1, aRETURN1.getLength());
      assertEquals("areturn", aRETURN1.getName());
      assertNotSame(aRETURN1, aRETURN0);
      
      IF_ICMPGE iF_ICMPGE0 = new IF_ICMPGE((InstructionHandle) null);
      assertEquals("if_icmpge", iF_ICMPGE0.getName());
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals((short)162, iF_ICMPGE0.getOpcode());
      assertEquals(3, iF_ICMPGE0.getLength());
      assertNotNull(iF_ICMPGE0);
      
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(2862);
      assertEquals(2862, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertNotNull(constantMethodType0);
      
      constantArray0[0] = (Constant) constantMethodType0;
      DNEG dNEG0 = new DNEG();
      assertEquals(1, dNEG0.getLength());
      assertEquals((short)119, dNEG0.getOpcode());
      assertEquals("dneg", dNEG0.getName());
      assertNotNull(dNEG0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDNEG(dNEG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DNEG constraint violated: The value at the stack top is not of type 'double', but of type 'D$M%'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(2862);
      assertEquals(2862, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(2862, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      ObjectType objectType0 = new ObjectType("D$M%");
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(8192, objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals(8192, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals(8192, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(frame0);
      
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      assertEquals(1, uninitializedObjectType0.getSize());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE 'D$M%'>", uninitializedObjectType0.getSignature());
      assertNotNull(uninitializedObjectType0);
      
      String string0 = frame0.toString();
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals(8192, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(localVariables0, localVariables1);
      assertNotNull(string0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals(8192, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(localVariables0, localVariables1);
      
      RET rET0 = new RET(8192);
      assertEquals(4, rET0.getLength());
      assertEquals("ret", rET0.getName());
      assertEquals(8192, rET0.getIndex());
      assertEquals((short)169, rET0.getOpcode());
      assertNotNull(rET0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("D$M%");
      assertNotNull(mockFileOutputStream0);
      
      mockFileOutputStream0.release();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "g Dp)!kgb-");
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertNotNull(printStream0);
      
      FCMPG fCMPG0 = new FCMPG();
      assertEquals("fcmpg", fCMPG0.getName());
      assertEquals((short)150, fCMPG0.getOpcode());
      assertEquals(1, fCMPG0.getLength());
      assertNotNull(fCMPG0);
      
      ARETURN aRETURN0 = new ARETURN();
      assertEquals((short)176, aRETURN0.getOpcode());
      assertEquals(1, aRETURN0.getLength());
      assertEquals("areturn", aRETURN0.getName());
      assertNotNull(aRETURN0);
      
      ARETURN aRETURN1 = new ARETURN();
      assertTrue(aRETURN1.equals((Object)aRETURN0));
      assertEquals(1, aRETURN1.getLength());
      assertEquals("areturn", aRETURN1.getName());
      assertEquals((short)176, aRETURN1.getOpcode());
      assertNotNull(aRETURN1);
      
      instConstraintVisitor0.visitARETURN(aRETURN1);
      assertTrue(aRETURN1.equals((Object)aRETURN0));
      assertEquals(1, aRETURN1.getLength());
      assertEquals("areturn", aRETURN1.getName());
      assertEquals((short)176, aRETURN1.getOpcode());
      assertNotSame(aRETURN1, aRETURN0);
      
      DRETURN dRETURN0 = new DRETURN();
      assertEquals(1, dRETURN0.getLength());
      assertEquals("dreturn", dRETURN0.getName());
      assertEquals((short)175, dRETURN0.getOpcode());
      assertNotNull(dRETURN0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDRETURN(dRETURN0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DRETURN constraint violated: The value at the stack top is not of type 'double', but of type 'D$M%'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(2861);
      assertEquals(2861, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(2861, localVariables0.maxLocals());
      assertEquals(2861, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      ObjectType objectType0 = ObjectType.getInstance("");
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(2861, objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals(2861, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertNotNull(operandStack0);
      
      operandStack0.push(objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals(2861, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(2, operandStack0.size());
      
      Frame frame0 = new Frame(localVariables1, operandStack0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(2861, localVariables0.maxLocals());
      assertEquals(2861, localVariables1.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals(2861, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(2, operandStack0.size());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(2861, localVariables0.maxLocals());
      assertEquals(2861, localVariables1.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals(2861, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(2, operandStack0.size());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)3;
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      assertEquals("monitorenter", mONITORENTER0.getName());
      assertEquals(1, mONITORENTER0.getLength());
      assertEquals((short)194, mONITORENTER0.getOpcode());
      assertNotNull(mONITORENTER0);
      
      LRETURN lRETURN0 = new LRETURN();
      assertEquals("lreturn", lRETURN0.getName());
      assertEquals(1, lRETURN0.getLength());
      assertEquals((short)173, lRETURN0.getOpcode());
      assertNotNull(lRETURN0);
      
      String string0 = lRETURN0.toString(true);
      assertEquals("lreturn", lRETURN0.getName());
      assertEquals(1, lRETURN0.getLength());
      assertEquals((short)173, lRETURN0.getOpcode());
      assertEquals("lreturn[173](1)", string0);
      assertNotNull(string0);
      
      ILOAD iLOAD0 = new ILOAD((byte)3);
      assertEquals((short)29, iLOAD0.getOpcode());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals(3, iLOAD0.getIndex());
      assertEquals("iload_3", iLOAD0.getName());
      assertNotNull(iLOAD0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLoadInstruction(iLOAD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ILOAD constraint violated: Read-Access on local variable 3 with unknown content.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(2887);
      assertEquals(2887, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ObjectType objectType0 = new ObjectType("!Dz?&Id}E4S?GI^ihu");
      assertEquals("L!Dz?&Id}E4S?GI^ihu;", objectType0.getSignature());
      assertEquals("!Dz?&Id}E4S?GI^ihu", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(276, objectType0);
      assertEquals("L!Dz?&Id}E4S?GI^ihu;", objectType0.getSignature());
      assertEquals("!Dz?&Id}E4S?GI^ihu", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(276, operandStack0.maxStack());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(2887, localVariables0.maxLocals());
      assertEquals("L!Dz?&Id}E4S?GI^ihu;", objectType0.getSignature());
      assertEquals("!Dz?&Id}E4S?GI^ihu", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(276, operandStack0.maxStack());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(2887, localVariables0.maxLocals());
      assertEquals("L!Dz?&Id}E4S?GI^ihu;", objectType0.getSignature());
      assertEquals("!Dz?&Id}E4S?GI^ihu", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(276, operandStack0.maxStack());
      
      DADD dADD0 = new DADD();
      assertEquals(1, dADD0.getLength());
      assertEquals("dadd", dADD0.getName());
      assertEquals((short)99, dADD0.getOpcode());
      assertNotNull(dADD0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(2887, localVariables0.maxLocals());
      assertEquals(2887, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      LocalVariables localVariables2 = localVariables1.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertEquals(2887, localVariables0.maxLocals());
      assertEquals(2887, localVariables1.maxLocals());
      assertEquals(2887, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotNull(localVariables2);
      
      IRETURN iRETURN0 = new IRETURN();
      assertEquals(1, iRETURN0.getLength());
      assertEquals("ireturn", iRETURN0.getName());
      assertEquals((short)172, iRETURN0.getOpcode());
      assertNotNull(iRETURN0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIRETURN(iRETURN0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IRETURN constraint violated: The value at the stack top is not of type 'int', but of type '!Dz?&Id}E4S?GI^ihu'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(2862);
      assertEquals(2862, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(2862, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      ObjectType objectType0 = new ObjectType("D$M%");
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(8192, objectType0);
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(8192, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(8192, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(8192, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(localVariables0, localVariables1);
      
      RET rET0 = new RET(8192);
      assertEquals(4, rET0.getLength());
      assertEquals("ret", rET0.getName());
      assertEquals((short)169, rET0.getOpcode());
      assertEquals(8192, rET0.getIndex());
      assertNotNull(rET0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("D$M%");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "g Dp)!kgb-");
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertNotNull(printStream0);
      
      FCMPG fCMPG0 = new FCMPG();
      assertEquals("fcmpg", fCMPG0.getName());
      assertEquals((short)150, fCMPG0.getOpcode());
      assertEquals(1, fCMPG0.getLength());
      assertNotNull(fCMPG0);
      
      ARETURN aRETURN0 = new ARETURN();
      assertEquals((short)176, aRETURN0.getOpcode());
      assertEquals(1, aRETURN0.getLength());
      assertEquals("areturn", aRETURN0.getName());
      assertNotNull(aRETURN0);
      
      ARETURN aRETURN1 = new ARETURN();
      assertTrue(aRETURN1.equals((Object)aRETURN0));
      assertEquals("areturn", aRETURN1.getName());
      assertEquals(1, aRETURN1.getLength());
      assertEquals((short)176, aRETURN1.getOpcode());
      assertNotNull(aRETURN1);
      
      FCMPG fCMPG1 = new FCMPG();
      assertTrue(fCMPG1.equals((Object)fCMPG0));
      assertEquals(1, fCMPG1.getLength());
      assertEquals((short)150, fCMPG1.getOpcode());
      assertEquals("fcmpg", fCMPG1.getName());
      assertNotNull(fCMPG1);
      
      ARETURN aRETURN2 = new ARETURN();
      assertTrue(aRETURN2.equals((Object)aRETURN1));
      assertTrue(aRETURN2.equals((Object)aRETURN0));
      assertEquals((short)176, aRETURN2.getOpcode());
      assertEquals(1, aRETURN2.getLength());
      assertEquals("areturn", aRETURN2.getName());
      assertNotNull(aRETURN2);
      
      ARETURN aRETURN3 = new ARETURN();
      assertTrue(aRETURN3.equals((Object)aRETURN1));
      assertTrue(aRETURN3.equals((Object)aRETURN2));
      assertTrue(aRETURN3.equals((Object)aRETURN0));
      assertEquals(1, aRETURN3.getLength());
      assertEquals((short)176, aRETURN3.getOpcode());
      assertEquals("areturn", aRETURN3.getName());
      assertNotNull(aRETURN3);
      
      instConstraintVisitor0.visitARETURN(aRETURN1);
      assertTrue(aRETURN1.equals((Object)aRETURN2));
      assertTrue(aRETURN1.equals((Object)aRETURN3));
      assertTrue(aRETURN1.equals((Object)aRETURN0));
      assertEquals("areturn", aRETURN1.getName());
      assertEquals(1, aRETURN1.getLength());
      assertEquals((short)176, aRETURN1.getOpcode());
      assertNotSame(aRETURN1, aRETURN2);
      assertNotSame(aRETURN1, aRETURN0);
      assertNotSame(aRETURN1, aRETURN3);
      
      IF_ICMPGE iF_ICMPGE0 = new IF_ICMPGE((InstructionHandle) null);
      assertEquals("if_icmpge", iF_ICMPGE0.getName());
      assertEquals((short)162, iF_ICMPGE0.getOpcode());
      assertEquals(3, iF_ICMPGE0.getLength());
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertNotNull(iF_ICMPGE0);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType(8192);
      assertEquals(8192, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertNotNull(constantMethodType0);
      
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      assertTrue(constantMethodType1.equals((Object)constantMethodType0));
      assertEquals(8192, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals((byte)16, constantMethodType1.getTag());
      assertEquals(8192, constantMethodType1.getDescriptorIndex());
      assertNotNull(constantMethodType1);
      
      DUP2_X1 dUP2_X1_0 = new DUP2_X1();
      assertEquals(1, dUP2_X1_0.getLength());
      assertEquals((short)93, dUP2_X1_0.getOpcode());
      assertEquals("dup2_x1", dUP2_X1_0.getName());
      assertNotNull(dUP2_X1_0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP2_X1(dUP2_X1_0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(2852);
      assertEquals(2852, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(2852, localVariables0.maxLocals());
      assertEquals(2852, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      String string0 = localVariables1.toString();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(2852, localVariables0.maxLocals());
      assertEquals(2852, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(string0);
      
      ObjectType objectType0 = ObjectType.getInstance("g Dp)!kgb-");
      assertEquals("g Dp)!kgb-", objectType0.getClassName());
      assertEquals("Lg Dp)!kgb-;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(2852, objectType0);
      assertEquals("g Dp)!kgb-", objectType0.getClassName());
      assertEquals("Lg Dp)!kgb-;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2852, operandStack0.maxStack());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables1, operandStack0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(2852, localVariables0.maxLocals());
      assertEquals(2852, localVariables1.maxLocals());
      assertEquals("g Dp)!kgb-", objectType0.getClassName());
      assertEquals("Lg Dp)!kgb-;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2852, operandStack0.maxStack());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(2852, localVariables0.maxLocals());
      assertEquals(2852, localVariables1.maxLocals());
      assertEquals("g Dp)!kgb-", objectType0.getClassName());
      assertEquals("Lg Dp)!kgb-;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2852, operandStack0.maxStack());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      ISTORE iSTORE0 = new ISTORE(2852);
      assertEquals((short)54, iSTORE0.getCanonicalTag());
      assertEquals(4, iSTORE0.getLength());
      assertEquals("istore", iSTORE0.getName());
      assertEquals(2852, iSTORE0.getIndex());
      assertEquals((short)54, iSTORE0.getOpcode());
      assertNotNull(iSTORE0);
      
      instConstraintVisitor0.visitISTORE(iSTORE0);
      assertEquals((short)54, iSTORE0.getCanonicalTag());
      assertEquals(4, iSTORE0.getLength());
      assertEquals("istore", iSTORE0.getName());
      assertEquals(2852, iSTORE0.getIndex());
      assertEquals((short)54, iSTORE0.getOpcode());
      
      MULTIANEWARRAY mULTIANEWARRAY0 = new MULTIANEWARRAY(2852, (short)75);
      assertEquals(2852, mULTIANEWARRAY0.getIndex());
      assertEquals("multianewarray", mULTIANEWARRAY0.getName());
      assertEquals((short)197, mULTIANEWARRAY0.getOpcode());
      assertEquals(4, mULTIANEWARRAY0.getLength());
      assertEquals((short)75, mULTIANEWARRAY0.getDimensions());
      assertNotNull(mULTIANEWARRAY0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitMULTIANEWARRAY(mULTIANEWARRAY0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction MULTIANEWARRAY constraint violated: The '75' upper stack types should be 'int' but aren't.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      LocalVariables localVariables0 = new LocalVariables(2852);
      assertEquals(2852, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(2852, localVariables0.maxLocals());
      assertEquals(2852, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      LocalVariables localVariables2 = localVariables1.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertEquals(2852, localVariables0.maxLocals());
      assertEquals(2852, localVariables1.maxLocals());
      assertEquals(2852, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertNotNull(localVariables2);
      
      localVariables0.merge(localVariables2);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertEquals(2852, localVariables0.maxLocals());
      assertEquals(2852, localVariables1.maxLocals());
      assertEquals(2852, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      
      String string0 = localVariables1.toString();
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertEquals(2852, localVariables0.maxLocals());
      assertEquals(2852, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(string0);
      
      ObjectType objectType0 = ObjectType.getInstance("g Dp)!kgb-");
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lg Dp)!kgb-;", objectType0.getSignature());
      assertEquals("g Dp)!kgb-", objectType0.getClassName());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(2852, objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lg Dp)!kgb-;", objectType0.getSignature());
      assertEquals("g Dp)!kgb-", objectType0.getClassName());
      assertEquals(2852, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables1, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertEquals(2852, localVariables0.maxLocals());
      assertEquals(2852, localVariables1.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lg Dp)!kgb-;", objectType0.getSignature());
      assertEquals("g Dp)!kgb-", objectType0.getClassName());
      assertEquals(2852, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertEquals(2852, localVariables0.maxLocals());
      assertEquals(2852, localVariables1.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lg Dp)!kgb-;", objectType0.getSignature());
      assertEquals("g Dp)!kgb-", objectType0.getClassName());
      assertEquals(2852, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      
      ISTORE iSTORE0 = new ISTORE(2852);
      assertEquals((short)54, iSTORE0.getOpcode());
      assertEquals((short)54, iSTORE0.getCanonicalTag());
      assertEquals(4, iSTORE0.getLength());
      assertEquals("istore", iSTORE0.getName());
      assertEquals(2852, iSTORE0.getIndex());
      assertNotNull(iSTORE0);
      
      instConstraintVisitor0.visitISTORE(iSTORE0);
      assertEquals((short)54, iSTORE0.getOpcode());
      assertEquals((short)54, iSTORE0.getCanonicalTag());
      assertEquals(4, iSTORE0.getLength());
      assertEquals("istore", iSTORE0.getName());
      assertEquals(2852, iSTORE0.getIndex());
      
      MULTIANEWARRAY mULTIANEWARRAY0 = new MULTIANEWARRAY(2852, (short)75);
      assertEquals(4, mULTIANEWARRAY0.getLength());
      assertEquals((short)75, mULTIANEWARRAY0.getDimensions());
      assertEquals(2852, mULTIANEWARRAY0.getIndex());
      assertEquals((short)197, mULTIANEWARRAY0.getOpcode());
      assertEquals("multianewarray", mULTIANEWARRAY0.getName());
      assertNotNull(mULTIANEWARRAY0);
      
      D2L d2L0 = new D2L();
      assertEquals((short)143, d2L0.getOpcode());
      assertEquals(1, d2L0.getLength());
      assertEquals("d2l", d2L0.getName());
      assertNotNull(d2L0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitD2L(d2L0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction D2L constraint violated: The value at the stack top is not of type 'double', but of type 'g Dp)!kgb-'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(2862);
      assertEquals(2862, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(2862, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      ObjectType objectType0 = new ObjectType("D$M%");
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(2862, objectType0);
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals(2862, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals(2862, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals(2862, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotSame(localVariables0, localVariables1);
      
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      assertEquals(1, mONITORENTER0.getLength());
      assertEquals("monitorenter", mONITORENTER0.getName());
      assertEquals((short)194, mONITORENTER0.getOpcode());
      assertNotNull(mONITORENTER0);
      
      instConstraintVisitor0.visitLCONST((LCONST) null);
      LSHL lSHL0 = new LSHL();
      assertEquals(1, lSHL0.getLength());
      assertEquals("lshl", lSHL0.getName());
      assertEquals((short)121, lSHL0.getOpcode());
      assertNotNull(lSHL0);
      
      LSHL lSHL1 = new LSHL();
      assertTrue(lSHL1.equals((Object)lSHL0));
      assertEquals(1, lSHL1.getLength());
      assertEquals((short)121, lSHL1.getOpcode());
      assertEquals("lshl", lSHL1.getName());
      assertNotNull(lSHL1);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLSHL(lSHL1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LSHL constraint violated: The value at the stack top is not of type 'int', but of type 'D$M%'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(2852);
      assertEquals(2852, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(2852, localVariables0.maxLocals());
      assertEquals(2852, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      String string0 = localVariables1.toString();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(2852, localVariables0.maxLocals());
      assertEquals(2852, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(string0);
      
      ObjectType objectType0 = new ObjectType("g Dp)!kgb-");
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lg Dp)!kgb-;", objectType0.getSignature());
      assertEquals("g Dp)!kgb-", objectType0.getClassName());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(2852, objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lg Dp)!kgb-;", objectType0.getSignature());
      assertEquals("g Dp)!kgb-", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2852, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables1, operandStack0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(2852, localVariables0.maxLocals());
      assertEquals(2852, localVariables1.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lg Dp)!kgb-;", objectType0.getSignature());
      assertEquals("g Dp)!kgb-", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2852, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(2852, localVariables0.maxLocals());
      assertEquals(2852, localVariables1.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lg Dp)!kgb-;", objectType0.getSignature());
      assertEquals("g Dp)!kgb-", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2852, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      RET rET0 = new RET(2852);
      assertEquals((short)169, rET0.getOpcode());
      assertEquals("ret", rET0.getName());
      assertEquals(2852, rET0.getIndex());
      assertEquals(4, rET0.getLength());
      assertNotNull(rET0);
      
      POP pOP0 = new POP();
      assertEquals("pop", pOP0.getName());
      assertEquals((short)87, pOP0.getOpcode());
      assertEquals(1, pOP0.getLength());
      assertNotNull(pOP0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "|Vj@vo>s=2");
      assertFalse(boolean0);
      
      ISTORE iSTORE0 = new ISTORE(153);
      assertEquals("istore", iSTORE0.getName());
      assertEquals(2, iSTORE0.getLength());
      assertEquals((short)54, iSTORE0.getCanonicalTag());
      assertEquals((short)54, iSTORE0.getOpcode());
      assertEquals(153, iSTORE0.getIndex());
      assertNotNull(iSTORE0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "g Dp)!kgb-");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStoreInstruction(iSTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ISTORE constraint violated: Stack top type and STOREing Instruction type mismatch: Stack top: 'g Dp)!kgb-'; Instruction type: 'int'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      LocalVariables localVariables0 = new LocalVariables(550);
      assertEquals(550, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(550, localVariables0.maxLocals());
      assertEquals(550, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string0);
      assertNotNull(string0);
      
      localVariables1.merge(localVariables0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(550, localVariables0.maxLocals());
      assertEquals(550, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      ObjectType objectType0 = ObjectType.getInstance("<clinit>");
      assertEquals(1, objectType0.getSize());
      assertEquals("L<clinit>;", objectType0.getSignature());
      assertEquals("<clinit>", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(27, objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals("L<clinit>;", objectType0.getSignature());
      assertEquals("<clinit>", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(27, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertEquals(550, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("L<clinit>;", objectType0.getSignature());
      assertEquals("<clinit>", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(27, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(frame0);
      
      Frame frame1 = new Frame(localVariables1, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(frame1.equals((Object)frame0));
      assertEquals(550, localVariables0.maxLocals());
      assertEquals(550, localVariables1.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("L<clinit>;", objectType0.getSignature());
      assertEquals("<clinit>", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(27, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(frame1);
      
      Frame frame2 = new Frame(localVariables0, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(frame2.equals((Object)frame0));
      assertEquals(550, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("L<clinit>;", objectType0.getSignature());
      assertEquals("<clinit>", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(27, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(frame2);
      
      UninitializedObjectType uninitializedObjectType0 = Frame.getThis();
      assertNull(uninitializedObjectType0);
      
      Frame.setThis((UninitializedObjectType) null);
      instConstraintVisitor0.setFrame(frame2);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(frame2.equals((Object)frame0));
      assertTrue(frame2.equals((Object)frame1));
      assertEquals(550, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("L<clinit>;", objectType0.getSignature());
      assertEquals("<clinit>", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(27, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(frame2, frame1);
      assertNotSame(frame2, frame0);
      
      instConstraintVisitor0.setFrame(frame1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(frame1.equals((Object)frame2));
      assertTrue(frame1.equals((Object)frame0));
      assertEquals(550, localVariables0.maxLocals());
      assertEquals(550, localVariables1.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("L<clinit>;", objectType0.getSignature());
      assertEquals("<clinit>", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(27, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(frame1, frame0);
      assertNotSame(frame1, frame2);
      
      RET rET0 = new RET(2);
      assertEquals((short)169, rET0.getOpcode());
      assertEquals(2, rET0.getIndex());
      assertEquals(2, rET0.getLength());
      assertEquals("ret", rET0.getName());
      assertNotNull(rET0);
      
      IFNULL iFNULL0 = new IFNULL((InstructionHandle) null);
      assertEquals(0, iFNULL0.getIndex());
      assertEquals(3, iFNULL0.getLength());
      assertEquals((short)198, iFNULL0.getOpcode());
      assertEquals("ifnull", iFNULL0.getName());
      assertNotNull(iFNULL0);
      
      instConstraintVisitor0.visitIFNULL(iFNULL0);
      assertEquals(0, iFNULL0.getIndex());
      assertEquals(3, iFNULL0.getLength());
      assertEquals((short)198, iFNULL0.getOpcode());
      assertEquals("ifnull", iFNULL0.getName());
      
      LSHR lSHR0 = new LSHR();
      assertEquals("lshr", lSHR0.getName());
      assertEquals((short)123, lSHR0.getOpcode());
      assertEquals(1, lSHR0.getLength());
      assertNotNull(lSHR0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLSHR(lSHR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `clinit>;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(2862);
      assertEquals(2862, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(2862, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel");
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string0);
      assertNotNull(string0);
      
      localVariables0.merge(localVariables1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(2862, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      ObjectType objectType0 = ObjectType.getInstance("<clinit>");
      assertEquals(1, objectType0.getSize());
      assertEquals("L<clinit>;", objectType0.getSignature());
      assertEquals("<clinit>", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(2862, objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals("L<clinit>;", objectType0.getSignature());
      assertEquals("<clinit>", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(2862, operandStack0.maxStack());
      assertNotNull(operandStack0);
      
      operandStack0.push(objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals("L<clinit>;", objectType0.getSignature());
      assertEquals("<clinit>", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2862, operandStack0.maxStack());
      assertEquals(2, operandStack0.size());
      
      Frame frame0 = new Frame(localVariables1, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(2862, localVariables1.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("L<clinit>;", objectType0.getSignature());
      assertEquals("<clinit>", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2862, operandStack0.maxStack());
      assertEquals(2, operandStack0.size());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(2862, localVariables1.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("L<clinit>;", objectType0.getSignature());
      assertEquals("<clinit>", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2862, operandStack0.maxStack());
      assertEquals(2, operandStack0.size());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte)83;
      byteArray0[5] = (byte)45;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-54), (byte)83, (byte)90, (byte) (-96), (byte)83, (byte)45}, byteArray0);
      
      boolean boolean1 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      RET rET0 = new RET(46);
      assertEquals((short)169, rET0.getOpcode());
      assertEquals("ret", rET0.getName());
      assertEquals(46, rET0.getIndex());
      assertEquals(2, rET0.getLength());
      assertNotNull(rET0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("g Dp)!kgb-");
      assertNotNull(mockFileOutputStream0);
      
      mockFileOutputStream0.close();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP_X2((DUP_X2) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(2862);
      assertEquals(2862, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = new LocalVariables(2862);
      assertEquals(2862, localVariables1.maxLocals());
      assertNotNull(localVariables1);
      
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string0);
      assertNotNull(string0);
      
      String string1 = localVariables0.toString();
      assertFalse(string1.equals((Object)string0));
      assertEquals(2862, localVariables0.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotNull(string1);
      
      ObjectType objectType0 = new ObjectType("<clinit>");
      assertEquals((byte)14, objectType0.getType());
      assertEquals("<clinit>", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("L<clinit>;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(2862, objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("<clinit>", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("L<clinit>;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2862, operandStack0.maxStack());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("<clinit>", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("L<clinit>;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2862, operandStack0.maxStack());
      assertNotNull(frame0);
      
      Frame frame1 = new Frame(localVariables0, operandStack0);
      assertTrue(frame1.equals((Object)frame0));
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("<clinit>", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("L<clinit>;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2862, operandStack0.maxStack());
      assertNotNull(frame1);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(frame0.equals((Object)frame1));
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("<clinit>", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("L<clinit>;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2862, operandStack0.maxStack());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(frame0, frame1);
      
      RET rET0 = new RET(2862);
      assertEquals((short)169, rET0.getOpcode());
      assertEquals("ret", rET0.getName());
      assertEquals(4, rET0.getLength());
      assertEquals(2862, rET0.getIndex());
      assertNotNull(rET0);
      
      LOR lOR0 = new LOR();
      assertEquals("lor", lOR0.getName());
      assertEquals(1, lOR0.getLength());
      assertEquals((short)129, lOR0.getOpcode());
      assertNotNull(lOR0);
      
      INSTANCEOF iNSTANCEOF0 = new INSTANCEOF(2862);
      assertEquals((short)193, iNSTANCEOF0.getOpcode());
      assertEquals(2862, iNSTANCEOF0.getIndex());
      assertEquals("instanceof", iNSTANCEOF0.getName());
      assertEquals(3, iNSTANCEOF0.getLength());
      assertNotNull(iNSTANCEOF0);
      
      INSTANCEOF iNSTANCEOF1 = (INSTANCEOF)iNSTANCEOF0.copy();
      assertTrue(iNSTANCEOF1.equals((Object)iNSTANCEOF0));
      assertEquals((short)193, iNSTANCEOF0.getOpcode());
      assertEquals(2862, iNSTANCEOF0.getIndex());
      assertEquals("instanceof", iNSTANCEOF0.getName());
      assertEquals(3, iNSTANCEOF0.getLength());
      assertEquals("instanceof", iNSTANCEOF1.getName());
      assertEquals(3, iNSTANCEOF1.getLength());
      assertEquals(2862, iNSTANCEOF1.getIndex());
      assertEquals((short)193, iNSTANCEOF1.getOpcode());
      assertNotSame(iNSTANCEOF0, iNSTANCEOF1);
      assertNotSame(iNSTANCEOF1, iNSTANCEOF0);
      assertNotNull(iNSTANCEOF1);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINSTANCEOF(iNSTANCEOF0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      LocalVariables localVariables0 = new LocalVariables(550);
      assertEquals(550, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(550, localVariables0.maxLocals());
      assertEquals(550, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      ObjectType objectType0 = new ObjectType("D$M%");
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(550, objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals(550, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables1, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(550, localVariables0.maxLocals());
      assertEquals(550, localVariables1.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals(550, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(550, localVariables0.maxLocals());
      assertEquals(550, localVariables1.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals(550, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      int int0 = 27;
      I2L i2L0 = new I2L();
      assertEquals("i2l", i2L0.getName());
      assertEquals((short)133, i2L0.getOpcode());
      assertEquals(1, i2L0.getLength());
      assertNotNull(i2L0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2L(i2L0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2L constraint violated: The value at the stack top is not of type 'int', but of type 'D$M%'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(2862);
      assertEquals(2862, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(2862, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      ObjectType objectType0 = new ObjectType("D$M%");
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertNotNull(objectType0);
      
      LocalVariables localVariables2 = (LocalVariables)localVariables0.clone();
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(2862, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotNull(localVariables2);
      
      OperandStack operandStack0 = new OperandStack(8192, objectType0);
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(8192, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(8192, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(8192, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      
      RET rET0 = new RET(8192);
      assertEquals(8192, rET0.getIndex());
      assertEquals((short)169, rET0.getOpcode());
      assertEquals("ret", rET0.getName());
      assertEquals(4, rET0.getLength());
      assertNotNull(rET0);
      
      LASTORE lASTORE0 = new LASTORE();
      assertEquals((short)80, lASTORE0.getOpcode());
      assertEquals(1, lASTORE0.getLength());
      assertEquals("lastore", lASTORE0.getName());
      assertNotNull(lASTORE0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLASTORE(lASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LASTORE constraint violated: The value at the stack top is not of type 'long', but of type 'D$M%'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(2862);
      assertEquals(2862, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(2862, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      localVariables0.merge(localVariables1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(2862, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      ObjectType objectType0 = new ObjectType("' upper stack types should be 'int' but aren't.");
      assertEquals("L' upper stack types should be 'int' but aren't/;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("' upper stack types should be 'int' but aren't.", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(2862, objectType0);
      assertEquals("L' upper stack types should be 'int' but aren't/;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("' upper stack types should be 'int' but aren't.", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2862, operandStack0.maxStack());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables1, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(2862, localVariables1.maxLocals());
      assertEquals("L' upper stack types should be 'int' but aren't/;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("' upper stack types should be 'int' but aren't.", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2862, operandStack0.maxStack());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(2862, localVariables1.maxLocals());
      assertEquals("L' upper stack types should be 'int' but aren't/;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("' upper stack types should be 'int' but aren't.", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2862, operandStack0.maxStack());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      assertEquals(1, mONITORENTER0.getLength());
      assertEquals((short)194, mONITORENTER0.getOpcode());
      assertEquals("monitorenter", mONITORENTER0.getName());
      assertNotNull(mONITORENTER0);
      
      instConstraintVisitor0.visitMONITORENTER(mONITORENTER0);
      assertEquals(1, mONITORENTER0.getLength());
      assertEquals((short)194, mONITORENTER0.getOpcode());
      assertEquals("monitorenter", mONITORENTER0.getName());
      
      LSUB lSUB0 = new LSUB();
      assertEquals("lsub", lSUB0.getName());
      assertEquals((short)101, lSUB0.getOpcode());
      assertEquals(1, lSUB0.getLength());
      assertNotNull(lSUB0);
      
      FMUL fMUL0 = new FMUL();
      assertEquals(1, fMUL0.getLength());
      assertEquals("fmul", fMUL0.getName());
      assertEquals((short)106, fMUL0.getOpcode());
      assertNotNull(fMUL0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFMUL(fMUL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FMUL constraint violated: The value at the stack top is not of type 'float', but of type '' upper stack types should be 'int' but aren't.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(550);
      assertEquals(550, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(550, localVariables0.maxLocals());
      assertEquals(550, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      ObjectType objectType0 = ObjectType.getInstance(" p!kgb-");
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      LocalVariables localVariables2 = (LocalVariables)localVariables0.clone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertEquals(550, localVariables0.maxLocals());
      assertEquals(550, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertNotNull(localVariables2);
      
      OperandStack operandStack0 = new OperandStack(550, objectType0);
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.size());
      assertEquals(550, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertEquals(550, localVariables0.maxLocals());
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.size());
      assertEquals(550, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertEquals(550, localVariables0.maxLocals());
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.size());
      assertEquals(550, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      
      LocalVariables localVariables3 = new LocalVariables(550);
      assertTrue(localVariables3.equals((Object)localVariables1));
      assertTrue(localVariables3.equals((Object)localVariables2));
      assertEquals(550, localVariables3.maxLocals());
      assertNotNull(localVariables3);
      
      LREM lREM0 = new LREM();
      assertEquals("lrem", lREM0.getName());
      assertEquals(1, lREM0.getLength());
      assertEquals((short)113, lREM0.getOpcode());
      assertNotNull(lREM0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLREM((LREM) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(2862);
      assertEquals(2862, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(2862, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      ObjectType objectType0 = new ObjectType("D$M%");
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(8192, objectType0);
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(8192, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(8192, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(8192, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotSame(localVariables0, localVariables1);
      
      RET rET0 = new RET(8192);
      assertEquals(4, rET0.getLength());
      assertEquals((short)169, rET0.getOpcode());
      assertEquals("ret", rET0.getName());
      assertEquals(8192, rET0.getIndex());
      assertNotNull(rET0);
      
      DDIV dDIV0 = new DDIV();
      assertEquals((short)111, dDIV0.getOpcode());
      assertEquals(1, dDIV0.getLength());
      assertEquals("ddiv", dDIV0.getName());
      assertNotNull(dDIV0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDDIV(dDIV0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DDIV constraint violated: The value at the stack top is not of type 'double', but of type 'D$M%'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      LocalVariables localVariables0 = new LocalVariables(550);
      assertEquals(550, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(550, localVariables0.maxLocals());
      assertEquals(550, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      ObjectType objectType0 = new ObjectType(" p!kgb-");
      assertEquals(1, objectType0.getSize());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(1206, objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1206, operandStack0.maxStack());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertEquals(550, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1206, operandStack0.maxStack());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertEquals(550, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1206, operandStack0.maxStack());
      assertNotSame(localVariables0, localVariables1);
      
      RET rET0 = new RET(1206);
      assertEquals(1206, rET0.getIndex());
      assertEquals("ret", rET0.getName());
      assertEquals((short)169, rET0.getOpcode());
      assertEquals(4, rET0.getLength());
      assertNotNull(rET0);
      
      OperandStack operandStack1 = new OperandStack(481, objectType0);
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertEquals(1, objectType0.getSize());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertFalse(operandStack1.isEmpty());
      assertEquals(481, operandStack1.maxStack());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(1, operandStack1.size());
      assertNotNull(operandStack1);
      
      LocalVariables localVariables2 = new LocalVariables(1670);
      assertFalse(localVariables2.equals((Object)localVariables1));
      assertFalse(localVariables2.equals((Object)localVariables0));
      assertEquals(1670, localVariables2.maxLocals());
      assertNotNull(localVariables2);
      
      RET rET1 = new RET(0);
      assertFalse(rET1.equals((Object)rET0));
      assertEquals((short)169, rET1.getOpcode());
      assertEquals("ret", rET1.getName());
      assertEquals(2, rET1.getLength());
      assertEquals(0, rET1.getIndex());
      assertNotNull(rET1);
      
      POP pOP0 = new POP();
      assertEquals(1, pOP0.getLength());
      assertEquals("pop", pOP0.getName());
      assertEquals((short)87, pOP0.getOpcode());
      assertNotNull(pOP0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" p!kgb-");
      assertNotNull(mockFileOutputStream0);
      
      mockFileOutputStream0.write(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      FCMPL fCMPL0 = new FCMPL();
      assertEquals(1, fCMPL0.getLength());
      assertEquals("fcmpl", fCMPL0.getName());
      assertEquals((short)149, fCMPL0.getOpcode());
      assertNotNull(fCMPL0);
      
      LDIV lDIV0 = new LDIV();
      assertEquals("ldiv", lDIV0.getName());
      assertEquals((short)109, lDIV0.getOpcode());
      assertEquals(1, lDIV0.getLength());
      assertNotNull(lDIV0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLDIV(lDIV0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LDIV constraint violated: The value at the stack top is not of type 'long', but of type ' p!kgb-'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(2862);
      assertEquals(2862, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(2862, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      ObjectType objectType0 = new ObjectType("D$M%");
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(2862, objectType0);
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals(2862, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals(2862, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals(2862, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotSame(localVariables0, localVariables1);
      
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      assertEquals(1, mONITORENTER0.getLength());
      assertEquals("monitorenter", mONITORENTER0.getName());
      assertEquals((short)194, mONITORENTER0.getOpcode());
      assertNotNull(mONITORENTER0);
      
      instConstraintVisitor0.visitLCONST((LCONST) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLOOKUPSWITCH((LOOKUPSWITCH) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      int int0 = 2862;
      LocalVariables localVariables0 = new LocalVariables(2862);
      assertEquals(2862, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = new LocalVariables(2862);
      assertEquals(2862, localVariables1.maxLocals());
      assertNotNull(localVariables1);
      
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string0);
      assertNotNull(string0);
      
      localVariables0.merge(localVariables1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(2862, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      ObjectType objectType0 = ObjectType.getInstance("<clinit>");
      assertEquals((byte)14, objectType0.getType());
      assertEquals("<clinit>", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("L<clinit>;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(551, objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("<clinit>", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("L<clinit>;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertEquals(551, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      operandStack0.push(objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("<clinit>", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("L<clinit>;", objectType0.getSignature());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(2, operandStack0.size());
      assertEquals(551, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      
      Frame frame0 = new Frame(localVariables1, operandStack0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(2862, localVariables1.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("<clinit>", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("L<clinit>;", objectType0.getSignature());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(2, operandStack0.size());
      assertEquals(551, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(2862, localVariables1.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("<clinit>", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("L<clinit>;", objectType0.getSignature());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(2, operandStack0.size());
      assertEquals(551, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertNotSame(localVariables1, localVariables0);
      
      INVOKESTATIC iNVOKESTATIC0 = new INVOKESTATIC(551);
      assertEquals("invokestatic", iNVOKESTATIC0.getName());
      assertEquals((short)184, iNVOKESTATIC0.getOpcode());
      assertEquals(3, iNVOKESTATIC0.getLength());
      assertEquals(551, iNVOKESTATIC0.getIndex());
      assertNotNull(iNVOKESTATIC0);
      
      IXOR iXOR0 = new IXOR();
      assertEquals(1, iXOR0.getLength());
      assertEquals("ixor", iXOR0.getName());
      assertEquals((short)130, iXOR0.getOpcode());
      assertNotNull(iXOR0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIXOR(iXOR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `clinit>;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      int int0 = 2862;
      LocalVariables localVariables0 = new LocalVariables(2862);
      assertEquals(2862, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(2862, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      ObjectType objectType0 = new ObjectType("D$M%");
      assertEquals(1, objectType0.getSize());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(8192, objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertEquals(8192, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      OperandStack operandStack1 = (OperandStack)operandStack0.clone();
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertEquals(1, objectType0.getSize());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertEquals(8192, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(8192, operandStack1.maxStack());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.size());
      assertEquals(1, operandStack1.slotsUsed());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertNotNull(operandStack1);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertEquals(8192, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(frame0);
      
      Frame frame1 = (Frame)frame0.clone();
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(frame1.equals((Object)frame0));
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertEquals(8192, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      assertNotNull(frame1);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(frame0.equals((Object)frame1));
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertEquals(8192, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(frame0, frame1);
      
      IREM iREM0 = new IREM();
      assertEquals(1, iREM0.getLength());
      assertEquals("irem", iREM0.getName());
      assertEquals((short)112, iREM0.getOpcode());
      assertNotNull(iREM0);
      
      String string0 = iREM0.toString();
      assertEquals(1, iREM0.getLength());
      assertEquals("irem", iREM0.getName());
      assertEquals((short)112, iREM0.getOpcode());
      assertEquals("irem[112](1)", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIREM(iREM0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IREM constraint violated: The value at the stack top is not of type 'int', but of type 'D$M%'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(550);
      assertEquals(550, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(550, localVariables0.maxLocals());
      assertEquals(550, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      ObjectType objectType0 = new ObjectType("D$M%");
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertNotNull(objectType0);
      
      LocalVariables localVariables2 = localVariables0.getClone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertEquals(550, localVariables0.maxLocals());
      assertEquals(550, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertNotNull(localVariables2);
      
      String string0 = localVariables2.toString();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertEquals(550, localVariables0.maxLocals());
      assertEquals(550, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertNotNull(string0);
      
      localVariables2.merge(localVariables0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertEquals(550, localVariables0.maxLocals());
      assertEquals(550, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      
      ObjectType objectType1 = new ObjectType(">J@#b9<.8|&pe<ZE`kz");
      assertFalse(objectType1.equals((Object)objectType0));
      assertEquals(1, objectType1.getSize());
      assertEquals("L>J@#b9</8|&pe<ZE`kz;", objectType1.getSignature());
      assertEquals(">J@#b9<.8|&pe<ZE`kz", objectType1.getClassName());
      assertEquals((byte)14, objectType1.getType());
      assertNotNull(objectType1);
      
      OperandStack operandStack0 = new OperandStack(200, objectType0);
      assertFalse(objectType0.equals((Object)objectType1));
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(200, operandStack0.maxStack());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertFalse(objectType0.equals((Object)objectType1));
      assertEquals(550, localVariables0.maxLocals());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(200, operandStack0.maxStack());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertFalse(objectType0.equals((Object)objectType1));
      assertEquals(550, localVariables0.maxLocals());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(200, operandStack0.maxStack());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(objectType0, objectType1);
      
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      assertEquals((short)194, mONITORENTER0.getOpcode());
      assertEquals("monitorenter", mONITORENTER0.getName());
      assertEquals(1, mONITORENTER0.getLength());
      assertNotNull(mONITORENTER0);
      
      MONITORENTER mONITORENTER1 = new MONITORENTER();
      assertTrue(mONITORENTER1.equals((Object)mONITORENTER0));
      assertEquals((short)194, mONITORENTER1.getOpcode());
      assertEquals("monitorenter", mONITORENTER1.getName());
      assertEquals(1, mONITORENTER1.getLength());
      assertNotNull(mONITORENTER1);
      
      DCMPG dCMPG0 = new DCMPG();
      assertEquals(1, dCMPG0.getLength());
      assertEquals((short)152, dCMPG0.getOpcode());
      assertEquals("dcmpg", dCMPG0.getName());
      assertNotNull(dCMPG0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDCMPG(dCMPG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DCMPG constraint violated: The value at the stack top is not of type 'double', but of type 'D$M%'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(2862);
      assertEquals(2862, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(2862, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      ObjectType objectType0 = new ObjectType("D$M%");
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(8192, objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(8192, operandStack0.maxStack());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(8192, operandStack0.maxStack());
      assertNotNull(frame0);
      
      Frame frame1 = frame0.getClone();
      assertTrue(frame1.equals((Object)frame0));
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(8192, operandStack0.maxStack());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      assertNotNull(frame1);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(frame0.equals((Object)frame1));
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(8192, operandStack0.maxStack());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(frame0, frame1);
      
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      assertEquals(1, mONITORENTER0.getLength());
      assertEquals((short)194, mONITORENTER0.getOpcode());
      assertEquals("monitorenter", mONITORENTER0.getName());
      assertNotNull(mONITORENTER0);
      
      instConstraintVisitor0.visitLCONST((LCONST) null);
      LOOKUPSWITCH lOOKUPSWITCH0 = null;
      BALOAD bALOAD0 = null;
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      assertEquals(1, mONITOREXIT0.getLength());
      assertEquals((short)195, mONITOREXIT0.getOpcode());
      assertEquals("monitorexit", mONITOREXIT0.getName());
      assertNotNull(mONITOREXIT0);
      
      instConstraintVisitor0.visitMONITOREXIT(mONITOREXIT0);
      assertEquals(1, mONITOREXIT0.getLength());
      assertEquals((short)195, mONITOREXIT0.getOpcode());
      assertEquals("monitorexit", mONITOREXIT0.getName());
      
      INVOKESPECIAL iNVOKESPECIAL0 = new INVOKESPECIAL(8192);
      assertEquals(8192, iNVOKESPECIAL0.getIndex());
      assertEquals("invokespecial", iNVOKESPECIAL0.getName());
      assertEquals(3, iNVOKESPECIAL0.getLength());
      assertEquals((short)183, iNVOKESPECIAL0.getOpcode());
      assertNotNull(iNVOKESPECIAL0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINVOKESPECIAL(iNVOKESPECIAL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(2862);
      assertEquals(2862, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(2862, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      String string0 = localVariables0.toString();
      assertEquals(2862, localVariables0.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotNull(string0);
      
      ObjectType objectType0 = new ObjectType("D$M%");
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      int int0 = 8192;
      OperandStack operandStack0 = new OperandStack(8192, objectType0);
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(8192, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(8192, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(frame0);
      
      Frame frame1 = frame0.getClone();
      assertTrue(frame1.equals((Object)frame0));
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(8192, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      assertNotNull(frame1);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(frame0.equals((Object)frame1));
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(8192, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(frame0, frame1);
      
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      assertEquals("monitorenter", mONITORENTER0.getName());
      assertEquals(1, mONITORENTER0.getLength());
      assertEquals((short)194, mONITORENTER0.getOpcode());
      assertNotNull(mONITORENTER0);
      
      instConstraintVisitor0.visitLCONST((LCONST) null);
      ISTORE iSTORE0 = new ISTORE(2862);
      assertEquals("istore", iSTORE0.getName());
      assertEquals(4, iSTORE0.getLength());
      assertEquals((short)54, iSTORE0.getOpcode());
      assertEquals(2862, iSTORE0.getIndex());
      assertEquals((short)54, iSTORE0.getCanonicalTag());
      assertNotNull(iSTORE0);
      
      ISTORE iSTORE1 = new ISTORE(2862);
      assertTrue(iSTORE1.equals((Object)iSTORE0));
      assertEquals(2862, iSTORE1.getIndex());
      assertEquals((short)54, iSTORE1.getOpcode());
      assertEquals("istore", iSTORE1.getName());
      assertEquals((short)54, iSTORE1.getCanonicalTag());
      assertEquals(4, iSTORE1.getLength());
      assertNotNull(iSTORE1);
      
      FNEG fNEG0 = new FNEG();
      assertEquals("fneg", fNEG0.getName());
      assertEquals(1, fNEG0.getLength());
      assertEquals((short)118, fNEG0.getOpcode());
      assertNotNull(fNEG0);
      
      instConstraintVisitor0.visitISTORE(iSTORE0);
      assertTrue(iSTORE0.equals((Object)iSTORE1));
      assertEquals("istore", iSTORE0.getName());
      assertEquals(4, iSTORE0.getLength());
      assertEquals((short)54, iSTORE0.getOpcode());
      assertEquals(2862, iSTORE0.getIndex());
      assertEquals((short)54, iSTORE0.getCanonicalTag());
      assertNotSame(iSTORE0, iSTORE1);
      
      IUSHR iUSHR0 = new IUSHR();
      assertEquals("iushr", iUSHR0.getName());
      assertEquals((short)124, iUSHR0.getOpcode());
      assertEquals(1, iUSHR0.getLength());
      assertNotNull(iUSHR0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIUSHR(iUSHR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IUSHR constraint violated: The value at the stack top is not of type 'int', but of type 'D$M%'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(2862);
      assertEquals(2862, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(2862, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      ObjectType objectType0 = new ObjectType("D$M%");
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(2862, objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals(2862, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals(2862, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(frame0);
      
      Frame frame1 = frame0.getClone();
      assertTrue(frame1.equals((Object)frame0));
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals(2862, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      assertNotNull(frame1);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(frame0.equals((Object)frame1));
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals(2862, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(frame0, frame1);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      assertEquals((short)195, mONITOREXIT0.getOpcode());
      assertEquals(1, mONITOREXIT0.getLength());
      assertEquals("monitorexit", mONITOREXIT0.getName());
      assertNotNull(mONITOREXIT0);
      
      IAND iAND0 = new IAND();
      assertEquals(1, iAND0.getLength());
      assertEquals((short)126, iAND0.getOpcode());
      assertEquals("iand", iAND0.getName());
      assertNotNull(iAND0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIAND(iAND0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IAND constraint violated: The value at the stack top is not of type 'int', but of type 'D$M%'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(2862);
      assertEquals(2862, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(2862, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      ObjectType objectType0 = new ObjectType("D$M%");
      assertEquals((byte)14, objectType0.getType());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(2862, objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2862, operandStack0.maxStack());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2862, operandStack0.maxStack());
      assertNotNull(frame0);
      
      Frame frame1 = frame0.getClone();
      assertTrue(frame1.equals((Object)frame0));
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2862, operandStack0.maxStack());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      assertNotNull(frame1);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(frame0.equals((Object)frame1));
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2862, operandStack0.maxStack());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(frame0, frame1);
      
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      assertEquals((short)194, mONITORENTER0.getOpcode());
      assertEquals("monitorenter", mONITORENTER0.getName());
      assertEquals(1, mONITORENTER0.getLength());
      assertNotNull(mONITORENTER0);
      
      instConstraintVisitor0.visitLCONST((LCONST) null);
      LOOKUPSWITCH lOOKUPSWITCH0 = null;
      DCMPL dCMPL0 = new DCMPL();
      assertEquals("dcmpl", dCMPL0.getName());
      assertEquals(1, dCMPL0.getLength());
      assertEquals((short)151, dCMPL0.getOpcode());
      assertNotNull(dCMPL0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDCMPL(dCMPL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DCMPL constraint violated: The value at the stack top is not of type 'double', but of type 'D$M%'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(2862);
      assertEquals(2862, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = ObjectType.getInstance(" p!kgb-");
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(276, objectType0);
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(276, operandStack0.maxStack());
      assertNotNull(operandStack0);
      
      operandStack0.initializeObject((UninitializedObjectType) null);
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(276, operandStack0.maxStack());
      
      Type type0 = operandStack0.pop((-1));
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(276, operandStack0.maxStack());
      assertNull(type0);
      
      RET rET0 = new RET(27);
      assertEquals("ret", rET0.getName());
      assertEquals(27, rET0.getIndex());
      assertEquals((short)169, rET0.getOpcode());
      assertEquals(2, rET0.getLength());
      assertNotNull(rET0);
      
      ObjectType objectType1 = new ObjectType("i4oc4.U-1");
      assertFalse(objectType1.equals((Object)objectType0));
      assertEquals(1, objectType1.getSize());
      assertEquals("i4oc4.U-1", objectType1.getClassName());
      assertEquals("Li4oc4/U-1;", objectType1.getSignature());
      assertEquals((byte)14, objectType1.getType());
      assertNotNull(objectType1);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      OperandStack operandStack1 = new OperandStack(2443, type0.OBJECT);
      assertFalse(objectType0.equals((Object)objectType1));
      assertFalse(operandStack1.equals((Object)operandStack0));
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(276, operandStack0.maxStack());
      assertEquals(2443, operandStack1.maxStack());
      assertEquals(1, operandStack1.size());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.slotsUsed());
      assertNotNull(operandStack1);
      
      Frame.setThis((UninitializedObjectType) null);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertFalse(objectType0.equals((Object)objectType1));
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(276, operandStack0.maxStack());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertFalse(objectType0.equals((Object)objectType1));
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(276, operandStack0.maxStack());
      assertNotSame(objectType0, objectType1);
      assertNotSame(operandStack0, operandStack1);
      
      FREM fREM0 = new FREM();
      assertEquals((short)114, fREM0.getOpcode());
      assertEquals(1, fREM0.getLength());
      assertEquals("frem", fREM0.getName());
      assertNotNull(fREM0);
      
      DUP dUP0 = new DUP();
      assertEquals(1, dUP0.getLength());
      assertEquals("dup", dUP0.getName());
      assertEquals((short)89, dUP0.getOpcode());
      assertNotNull(dUP0);
      
      instConstraintVisitor0.visitDUP(dUP0);
      assertEquals(1, dUP0.getLength());
      assertEquals("dup", dUP0.getName());
      assertEquals((short)89, dUP0.getOpcode());
      
      BREAKPOINT bREAKPOINT0 = new BREAKPOINT();
      assertEquals((short)202, bREAKPOINT0.getOpcode());
      assertEquals(1, bREAKPOINT0.getLength());
      assertEquals("breakpoint", bREAKPOINT0.getName());
      assertNotNull(bREAKPOINT0);
      
      ASTORE aSTORE0 = (ASTORE)InstructionConstants.ASTORE_2;
      assertEquals("astore_2", aSTORE0.getName());
      assertEquals(1, aSTORE0.getLength());
      assertEquals(2, aSTORE0.getIndex());
      assertEquals((short)58, aSTORE0.getCanonicalTag());
      assertEquals((short)77, aSTORE0.getOpcode());
      assertNotNull(aSTORE0);
      
      instConstraintVisitor0.visitLocalVariableInstruction(aSTORE0);
      assertEquals("astore_2", aSTORE0.getName());
      assertEquals(1, aSTORE0.getLength());
      assertEquals(2, aSTORE0.getIndex());
      assertEquals((short)58, aSTORE0.getCanonicalTag());
      assertEquals((short)77, aSTORE0.getOpcode());
      
      BALOAD bALOAD0 = new BALOAD();
      assertEquals(1, bALOAD0.getLength());
      assertEquals((short)51, bALOAD0.getOpcode());
      assertEquals("baload", bALOAD0.getName());
      assertNotNull(bALOAD0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitBALOAD(bALOAD0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(2882);
      assertEquals(2882, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(2882, localVariables0.maxLocals());
      assertEquals(2882, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "if_icmplt");
      assertFalse(boolean0);
      
      ObjectType objectType0 = new ObjectType("D$M%");
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("D$M%", objectType0.getClassName());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(8192, objectType0);
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(8192, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(2882, localVariables0.maxLocals());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(8192, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(frame0);
      
      String string0 = objectType0.toString();
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals("D$M%", string0);
      assertNotNull(string0);
      
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      assertEquals(1, uninitializedObjectType0.getSize());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE 'D$M%'>", uninitializedObjectType0.getSignature());
      assertNotNull(uninitializedObjectType0);
      
      String string1 = frame0.toString();
      assertFalse(string1.equals((Object)string0));
      assertEquals(2882, localVariables0.maxLocals());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(8192, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotSame(localVariables0, localVariables1);
      assertNotNull(string1);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(2882, localVariables0.maxLocals());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(8192, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotSame(localVariables0, localVariables1);
      
      ASTORE aSTORE0 = new ASTORE(2882);
      assertEquals("astore", aSTORE0.getName());
      assertEquals(2882, aSTORE0.getIndex());
      assertEquals((short)58, aSTORE0.getCanonicalTag());
      assertEquals((short)58, aSTORE0.getOpcode());
      assertEquals(4, aSTORE0.getLength());
      assertNotNull(aSTORE0);
      
      F2L f2L0 = new F2L();
      assertEquals("f2l", f2L0.getName());
      assertEquals((short)140, f2L0.getOpcode());
      assertEquals(1, f2L0.getLength());
      assertNotNull(f2L0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitF2L(f2L0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction F2L constraint violated: The value at the stack top is not of type 'float', but of type 'D$M%'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(2862);
      assertEquals(2862, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(2862, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      ObjectType objectType0 = ObjectType.getInstance("D$M%");
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(2862, objectType0);
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals(2862, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals(2862, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(frame0);
      
      Frame frame1 = frame0.getClone();
      assertTrue(frame1.equals((Object)frame0));
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals(2862, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      assertNotNull(frame1);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(frame0.equals((Object)frame1));
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals(2862, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(frame0, frame1);
      
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      assertEquals(1, mONITOREXIT0.getLength());
      assertEquals("monitorexit", mONITOREXIT0.getName());
      assertEquals((short)195, mONITOREXIT0.getOpcode());
      assertNotNull(mONITOREXIT0);
      
      DREM dREM0 = new DREM();
      assertEquals(1, dREM0.getLength());
      assertEquals("drem", dREM0.getName());
      assertEquals((short)115, dREM0.getOpcode());
      assertNotNull(dREM0);
      
      DREM dREM1 = new DREM();
      assertTrue(dREM1.equals((Object)dREM0));
      assertEquals("drem", dREM1.getName());
      assertEquals(1, dREM1.getLength());
      assertEquals((short)115, dREM1.getOpcode());
      assertNotNull(dREM1);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDREM(dREM1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DREM constraint violated: The value at the stack top is not of type 'double', but of type 'D$M%'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      int int0 = 2862;
      LocalVariables localVariables0 = new LocalVariables(2862);
      assertEquals(2862, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(2862, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string0);
      assertNotNull(string0);
      
      ObjectType objectType0 = ObjectType.getInstance("<clinit>");
      assertEquals("<clinit>", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("L<clinit>;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(2862, objectType0);
      assertEquals("<clinit>", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("L<clinit>;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2862, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertNotNull(operandStack0);
      
      operandStack0.push(objectType0);
      assertEquals("<clinit>", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("L<clinit>;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2862, operandStack0.maxStack());
      assertEquals(2, operandStack0.size());
      
      OperandStack operandStack1 = operandStack0.getClone();
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertEquals("<clinit>", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("L<clinit>;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2862, operandStack0.maxStack());
      assertEquals(2, operandStack0.size());
      assertEquals(2862, operandStack1.maxStack());
      assertEquals(2, operandStack1.slotsUsed());
      assertEquals(2, operandStack1.size());
      assertFalse(operandStack1.isEmpty());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertNotNull(operandStack1);
      
      Frame frame0 = new Frame(localVariables1, operandStack0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(2862, localVariables1.maxLocals());
      assertEquals("<clinit>", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("L<clinit>;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2862, operandStack0.maxStack());
      assertEquals(2, operandStack0.size());
      assertNotNull(frame0);
      
      Frame frame1 = new Frame(2862, 2862);
      assertFalse(frame1.equals((Object)frame0));
      assertNotNull(frame1);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertFalse(frame0.equals((Object)frame1));
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(2862, localVariables1.maxLocals());
      assertEquals("<clinit>", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("L<clinit>;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2862, operandStack0.maxStack());
      assertEquals(2, operandStack0.size());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(frame0, frame1);
      
      POP pOP0 = new POP();
      assertEquals("pop", pOP0.getName());
      assertEquals((short)87, pOP0.getOpcode());
      assertEquals(1, pOP0.getLength());
      assertNotNull(pOP0);
      
      F2D f2D0 = new F2D();
      assertEquals("f2d", f2D0.getName());
      assertEquals((short)141, f2D0.getOpcode());
      assertEquals(1, f2D0.getLength());
      assertNotNull(f2D0);
      
      F2D f2D1 = new F2D();
      assertTrue(f2D1.equals((Object)f2D0));
      assertEquals("f2d", f2D1.getName());
      assertEquals((short)141, f2D1.getOpcode());
      assertEquals(1, f2D1.getLength());
      assertNotNull(f2D1);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitF2D(f2D1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `clinit>;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      LocalVariables localVariables0 = new LocalVariables(550);
      assertEquals(550, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(550, localVariables0.maxLocals());
      assertEquals(550, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      LocalVariables localVariables2 = new LocalVariables(550);
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertEquals(550, localVariables2.maxLocals());
      assertNotNull(localVariables2);
      
      LocalVariables localVariables3 = localVariables0.getClone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables3.equals((Object)localVariables2));
      assertTrue(localVariables3.equals((Object)localVariables1));
      assertTrue(localVariables3.equals((Object)localVariables0));
      assertEquals(550, localVariables0.maxLocals());
      assertEquals(550, localVariables3.maxLocals());
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables3, localVariables0);
      assertNotSame(localVariables3, localVariables1);
      assertNotSame(localVariables3, localVariables2);
      assertNotNull(localVariables3);
      
      ObjectType objectType0 = new ObjectType("D$M%");
      assertEquals(1, objectType0.getSize());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      LocalVariables localVariables4 = localVariables2.getClone();
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables4.equals((Object)localVariables0));
      assertTrue(localVariables4.equals((Object)localVariables2));
      assertTrue(localVariables4.equals((Object)localVariables3));
      assertTrue(localVariables4.equals((Object)localVariables1));
      assertEquals(550, localVariables2.maxLocals());
      assertEquals(550, localVariables4.maxLocals());
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables4);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables4, localVariables0);
      assertNotSame(localVariables4, localVariables1);
      assertNotSame(localVariables4, localVariables2);
      assertNotSame(localVariables4, localVariables3);
      assertNotNull(localVariables4);
      
      OperandStack operandStack0 = new OperandStack(550, objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(550, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables4));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertEquals(550, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(550, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables4));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertEquals(550, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(550, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(localVariables0, localVariables4);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      assertEquals(1, mONITORENTER0.getLength());
      assertEquals("monitorenter", mONITORENTER0.getName());
      assertEquals((short)194, mONITORENTER0.getOpcode());
      assertNotNull(mONITORENTER0);
      
      instConstraintVisitor0.visitLCONST((LCONST) null);
      ISTORE iSTORE0 = new ISTORE(550);
      assertEquals(4, iSTORE0.getLength());
      assertEquals((short)54, iSTORE0.getOpcode());
      assertEquals((short)54, iSTORE0.getCanonicalTag());
      assertEquals("istore", iSTORE0.getName());
      assertEquals(550, iSTORE0.getIndex());
      assertNotNull(iSTORE0);
      
      ISTORE iSTORE1 = new ISTORE(550);
      assertTrue(iSTORE1.equals((Object)iSTORE0));
      assertEquals((short)54, iSTORE1.getOpcode());
      assertEquals((short)54, iSTORE1.getCanonicalTag());
      assertEquals("istore", iSTORE1.getName());
      assertEquals(4, iSTORE1.getLength());
      assertEquals(550, iSTORE1.getIndex());
      assertNotNull(iSTORE1);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "D$M%");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      ANEWARRAY aNEWARRAY0 = new ANEWARRAY(925);
      assertEquals(3, aNEWARRAY0.getLength());
      assertEquals("anewarray", aNEWARRAY0.getName());
      assertEquals(925, aNEWARRAY0.getIndex());
      assertEquals((short)189, aNEWARRAY0.getOpcode());
      assertNotNull(aNEWARRAY0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitANEWARRAY(aNEWARRAY0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ANEWARRAY constraint violated: The 'count' at the stack top is not of type 'int' but of type 'D$M%'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(2862);
      assertEquals(2862, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = new LocalVariables(2862);
      assertEquals(2862, localVariables1.maxLocals());
      assertNotNull(localVariables1);
      
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string0);
      assertNotNull(string0);
      
      String string1 = localVariables0.toString();
      assertFalse(string1.equals((Object)string0));
      assertEquals(2862, localVariables0.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotNull(string1);
      
      ObjectType objectType0 = ObjectType.getInstance(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertNotSame(localVariables0, localVariables1);
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(2862, objectType0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2862, operandStack0.maxStack());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2862, operandStack0.maxStack());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2862, operandStack0.maxStack());
      assertNotSame(localVariables0, localVariables1);
      
      RET rET0 = new RET(2862);
      assertEquals("ret", rET0.getName());
      assertEquals((short)169, rET0.getOpcode());
      assertEquals(4, rET0.getLength());
      assertEquals(2862, rET0.getIndex());
      assertNotNull(rET0);
      
      LOR lOR0 = new LOR();
      assertEquals(1, lOR0.getLength());
      assertEquals("lor", lOR0.getName());
      assertEquals((short)129, lOR0.getOpcode());
      assertNotNull(lOR0);
      
      INSTANCEOF iNSTANCEOF0 = new INSTANCEOF(2862);
      assertEquals("instanceof", iNSTANCEOF0.getName());
      assertEquals(3, iNSTANCEOF0.getLength());
      assertEquals(2862, iNSTANCEOF0.getIndex());
      assertEquals((short)193, iNSTANCEOF0.getOpcode());
      assertNotNull(iNSTANCEOF0);
      
      DADD dADD0 = new DADD();
      assertEquals(1, dADD0.getLength());
      assertEquals("dadd", dADD0.getName());
      assertEquals((short)99, dADD0.getOpcode());
      assertNotNull(dADD0);
      
      DADD dADD1 = new DADD();
      assertTrue(dADD1.equals((Object)dADD0));
      assertEquals("dadd", dADD1.getName());
      assertEquals(1, dADD1.getLength());
      assertEquals((short)99, dADD1.getOpcode());
      assertNotNull(dADD1);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDADD(dADD1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `unknown object>
         // 1: <unknown object>
         // 2: <unknown object>
         // 3: <unknown object>
         // 4: <unknown object>
         // 5: <unknown object>
         // 6: <unknown object>
         // 7: <unknown object>
         // 8: <unknown object>
         // 9: <unknown object>
         // 10: <unknown object>
         // 11: <unknown object>
         // 12: <unknown object>
         // 13: <unknown object>
         // 14: <unknown object>
         // 15: <unknown object>
         // 16: <unknown object>
         // 17: <unknown object>
         // 18: <unknown object>
         // 19: <unknown object>
         // 20: <unknown object>
         // 21: <unknown object>
         // 22: <unknown object>
         // 23: <unknown object>
         // 24: <unknown object>
         // 25: <unknown object>
         // 26: <unknown object>
         // 27: <unknown object>
         // 28: <unknown object>
         // 29: <unknown object>
         // 30: <unknown object>
         // 31: <unknown object>
         // 32: <unknown object>
         // 33: <unknown object>
         // 34: <unknown object>
         // 35: <unknown object>
         // 36: <unknown object>
         // 37: <unknown object>
         // 38: <unknown object>
         // 39: <unknown object>
         // 40: <unknown object>
         // 41: <unknown object>
         // 42: <unknown object>
         // 43: <unknown object>
         // 44: <unknown object>
         // 45: <unknown object>
         // 46: <unknown object>
         // 47: <unknown object>
         // 48: <unknown object>
         // 49: <unknown object>
         // 50: <unknown object>
         // 51: <unknown object>
         // 52: <unknown object>
         // 53: <unknown object>
         // 54: <unknown object>
         // 55: <unknown object>
         // 56: <unknown object>
         // 57: <unknown object>
         // 58: <unknown object>
         // 59: <unknown object>
         // 60: <unknown object>
         // 61: <unknown object>
         // 62: <unknown object>
         // 63: <unknown object>
         // 64: <unknown object>
         // 65: <unknown object>
         // 66: <unknown object>
         // 67: <unknown object>
         // 68: <unknown object>
         // 69: <unknown object>
         // 70: <unknown object>
         // 71: <unknown object>
         // 72: <unknown object>
         // 73: <unknown object>
         // 74: <unknown object>
         // 75: <unknown object>
         // 76: <unknown object>
         // 77: <unknown object>
         // 78: <unknown object>
         // 79: <unknown object>
         // 80: <unknown object>
         // 81: <unknown object>
         // 82: <unknown object>
         // 83: <unknown object>
         // 84: <unknown object>
         // 85: <unknown object>
         // 86: <unknown object>
         // 87: <unknown object>
         // 88: <unknown object>
         // 89: <unknown object>
         // 90: <unknown object>
         // 91: <unknown object>
         // 92: <unknown object>
         // 93: <unknown object>
         // 94: <unknown object>
         // 95: <unknown object>
         // 96: <unknown object>
         // 97: <unknown object>
         // 98: <unknown object>
         // 99: <unknown object>
         // 100: <unknown object>
         // 101: <unknown object>
         // 102: <unknown object>
         // 103: <unknown object>
         // 104: <unknown object>
         // 105: <unknown object>
         // 106: <unknown object>
         // 107: <unknown object>
         // 108: <unknown object>
         // 109: <unknown object>
         // 110: <unknown object>
         // 111: <unknown object>
         // 112: <unknown object>
         // 113: <unknown object>
         // 114: <unknown object>
         // 115: <unknown object>
         // 116: <unknown object>
         // 117: <unknown object>
         // 118: <unknown object>
         // 119: <unknown object>
         // 120: <unknown object>
         // 121: <unknown object>
         // 122: <unknown object>
         // 123: <unknown object>
         // 124: <unknown object>
         // 125: <unknown object>
         // 126: <unknown object>
         // 127: <unknown object>
         // 128: <unknown object>
         // 129: <unknown object>
         // 130: <unknown object>
         // 131: <unknown object>
         // 132: <unknown object>
         // 133: <unknown object>
         // 134: <unknown object>
         // 135: <unknown object>
         // 136: <unknown object>
         // 137: <unknown object>
         // 138: <unknown object>
         // 139: <unknown object>
         // 140: <unknown object>
         // 141: <unknown object>
         // 142: <unknown object>
         // 143: <unknown object>
         // 144: <unknown object>
         // 145: <unknown object>
         // 146: <unknown object>
         // 147: <unknown object>
         // 148: <unknown object>
         // 149: <unknown object>
         // 150: <unknown object>
         // 151: <unknown object>
         // 152: <unknown object>
         // 153: <unknown object>
         // 154: <unknown object>
         // 155: <unknown object>
         // 156: <unknown object>
         // 157: <unknown object>
         // 158: <unknown object>
         // 159: <unknown object>
         // 160: <unknown object>
         // 161: <unknown object>
         // 162: <unknown object>
         // 163: <unknown object>
         // 164: <unknown object>
         // 165: <unknown object>
         // 166: <unknown object>
         // 167: <unknown object>
         // 168: <unknown object>
         // 169: <unknown object>
         // 170: <unknown object>
         // 171: <unknown object>
         // 172: <unknown object>
         // 173: <unknown object>
         // 174: <unknown object>
         // 175: <unknown object>
         // 176: <unknown object>
         // 177: <unknown object>
         // 178: <unknown object>
         // 179: <unknown object>
         // 180: <unknown object>
         // 181: <unknown object>
         // 182: <unknown object>
         // 183: <unknown object>
         // 184: <unknown object>
         // 185: <unknown object>
         // 186: <unknown object>
         // 187: <unknown object>
         // 188: <unknown object>
         // 189: <unknown object>
         // 190: <unknown object>
         // 191: <unknown object>
         // 192: <unknown object>
         // 193: <unknown object>
         // 194: <unknown object>
         // 195: <unknown object>
         // 196: <unknown object>
         // 197: <unknown object>
         // 198: <unknown object>
         // 199: <unknown object>
         // 200: <unknown object>
         // 201: <unknown object>
         // 202: <unknown object>
         // 203: <unknown object>
         // 204: <unknown object>
         // 205: <unknown object>
         // 206: <unknown object>
         // 207: <unknown object>
         // 208: <unknown object>
         // 209: <unknown object>
         // 210: <unknown object>
         // 211: <unknown object>
         // 212: <unknown object>
         // 213: <unknown object>
         // 214: <unknown object>
         // 215: <unknown object>
         // 216: <unknown object>
         // 217: <unknown object>
         // 218: <unknown object>
         // 219: <unknown object>
         // 220: <unknown object>
         // 221: <unknown object>
         // 222: <unknown object>
         // 223: <unknown object>
         // 224: <unknown object>
         // 225: <unknown object>
         // 226: <unknown object>
         // 227: <unknown object>
         // 228: <unknown object>
         // 229: <unknown object>
         // 230: <unknown object>
         // 231: <unknown object>
         // 232: <unknown object>
         // 233: <unknown object>
         // 234: <unknown object>
         // 235: <unknown object>
         // 236: <unknown object>
         // 237: <unknown object>
         // 238: <unknown object>
         // 239: <unknown object>
         // 240: <unknown object>
         // 241: <unknown object>
         // 242: <unknown object>
         // 243: <unknown object>
         // 244: <unknown object>
         // 245: <unknown object>
         // 246: <unknown object>
         // 247: <unknown object>
         // 248: <unknown object>
         // 249: <unknown object>
         // 250: <unknown object>
         // 251: <unknown object>
         // 252: <unknown object>
         // 253: <unknown object>
         // 254: <unknown object>
         // 255: <unknown object>
         // 256: <unknown object>
         // 257: <unknown object>
         // 258: <unknown object>
         // 259: <unknown object>
         // 260: <unknown object>
         // 261: <unknown object>
         // 262: <unknown object>
         // 263: <unknown object>
         // 264: <unknown object>
         // 265: <unknown object>
         // 266: <unknown object>
         // 267: <unknown object>
         // 268: <unknown object>
         // 269: <unknown object>
         // 270: <unknown object>
         // 271: <unknown object>
         // 272: <unknown object>
         // 273: <unknown object>
         // 274: <unknown object>
         // 275: <unknown object>
         // 276: <unknown object>
         // 277: <unknown object>
         // 278: <unknown object>
         // 279: <unknown object>
         // 280: <unknown object>
         // 281: <unknown object>
         // 282: <unknown object>
         // 283: <unknown object>
         // 284: <unknown object>
         // 285: <unknown object>
         // 286: <unknown object>
         // 287: <unknown object>
         // 288: <unknown object>
         // 289: <unknown object>
         // 290: <unknown object>
         // 291: <unknown object>
         // 292: <unknown object>
         // 293: <unknown object>
         // 294: <unknown object>
         // 295: <unknown object>
         // 296: <unknown object>
         // 297: <unknown object>
         // 298: <unknown object>
         // 299: <unknown object>
         // 300: <unknown object>
         // 301: <unknown object>
         // 302: <unknown object>
         // 303: <unknown object>
         // 304: <unknown object>
         // 305: <unknown object>
         // 306: <unknown object>
         // 307: <unknown object>
         // 308: <unknown object>
         // 309: <unknown object>
         // 310: <unknown object>
         // 311: <unknown object>
         // 312: <unknown object>
         // 313: <unknown object>
         // 314: <unknown object>
         // 315: <unknown object>
         // 316: <unknown object>
         // 317: <unknown object>
         // 318: <unknown object>
         // 319: <unknown object>
         // 320: <unknown object>
         // 321: <unknown object>
         // 322: <unknown object>
         // 323: <unknown object>
         // 324: <unknown object>
         // 325: <unknown object>
         // 326: <unknown object>
         // 327: <unknown object>
         // 328: <unknown object>
         // 329: <unknown object>
         // 330: <unknown object>
         // 331: <unknown object>
         // 332: <unknown object>
         // 333: <unknown object>
         // 334: <unknown object>
         // 335: <unknown object>
         // 336: <unknown object>
         // 337: <unknown object>
         // 338: <unknown object>
         // 339: <unknown object>
         // 340: <unknown object>
         // 341: <unknown object>
         // 342: <unknown object>
         // 343: <unknown object>
         // 344: <unknown object>
         // 345: <unknown object>
         // 346: <unknown object>
         // 347: <unknown object>
         // 348: <unknown object>
         // 349: <unknown object>
         // 350: <unknown object>
         // 351: <unknown object>
         // 352: <unknown object>
         // 353: <unknown object>
         // 354: <unknown object>
         // 355: <unknown object>
         // 356: <unknown object>
         // 357: <unknown object>
         // 358: <unknown object>
         // 359: <unknown object>
         // 360: <unknown object>
         // 361: <unknown object>
         // 362: <unknown object>
         // 363: <unknown object>
         // 364: <unknown object>
         // 365: <unknown object>
         // 366: <unknown object>
         // 367: <unknown object>
         // 368: <unknown object>
         // 369: <unknown object>
         // 370: <unknown object>
         // 371: <unknown object>
         // 372: <unknown object>
         // 373: <unknown object>
         // 374: <unknown object>
         // 375: <unknown object>
         // 376: <unknown object>
         // 377: <unknown object>
         // 378: <unknown object>
         // 379: <unknown object>
         // 380: <unknown object>
         // 381: <unknown object>
         // 382: <unknown object>
         // 383: <unknown object>
         // 384: <unknown object>
         // 385: <unknown object>
         // 386: <unknown object>
         // 387: <unknown object>
         // 388: <unknown object>
         // 389: <unknown object>
         // 390: <unknown object>
         // 391: <unknown object>
         // 392: <unknown object>
         // 393: <unknown object>
         // 394: <unknown object>
         // 395: <unknown object>
         // 396: <unknown object>
         // 397: <unknown object>
         // 398: <unknown object>
         // 399: <unknown object>
         // 400: <unknown object>
         // 401: <unknown object>
         // 402: <unknown object>
         // 403: <unknown object>
         // 404: <unknown object>
         // 405: <unknown object>
         // 406: <unknown object>
         // 407: <unknown object>
         // 408: <unknown object>
         // 409: <unknown object>
         // 410: <unknown object>
         // 411: <unknown object>
         // 412: <unknown object>
         // 413: <unknown object>
         // 414: <unknown object>
         // 415: <unknown object>
         // 416: <unknown object>
         // 417: <unknown object>
         // 418: <unknown object>
         // 419: <unknown object>
         // 420: <unknown object>
         // 421: <unknown object>
         // 422: <unknown object>
         // 423: <unknown object>
         // 424: <unknown object>
         // 425: <unknown object>
         // 426: <unknown object>
         // 427: <unknown object>
         // 428: <unknown object>
         // 429: <unknown object>
         // 430: <unknown object>
         // 431: <unknown object>
         // 432: <unknown object>
         // 433: <unknown object>
         // 434: <unknown object>
         // 435: <unknown object>
         // 436: <unknown object>
         // 437: <unknown object>
         // 438: <unknown object>
         // 439: <unknown object>
         // 440: <unknown object>
         // 441: <unknown object>
         // 442: <unknown object>
         // 443: <unknown object>
         // 444: <unknown object>
         // 445: <unknown object>
         // 446: <unknown object>
         // 447: <unknown object>
         // 448: <unknown object>
         // 449: <unknown object>
         // 450: <unknown object>
         // 451: <unknown object>
         // 452: <unknown object>
         // 453: <unknown object>
         // 454: <unknown object>
         // 455: <unknown object>
         // 456: <unknown object>
         // 457: <unknown object>
         // 458: <unknown object>
         // 459: <unknown object>
         // 460: <unknown object>
         // 461: <unknown object>
         // 462: <unknown object>
         // 463: <unknown object>
         // 464: <unknown object>
         // 465: <unknown object>
         // 466: <unknown object>
         // 467: <unknown object>
         // 468: <unknown object>
         // 469: <unknown object>
         // 470: <unknown object>
         // 471: <unknown object>
         // 472: <unknown object>
         // 473: <unknown object>
         // 474: <unknown object>
         // 475: <unknown object>
         // 476: <unknown object>
         // 477: <unknown object>
         // 478: <unknown object>
         // 479: <unknown object>
         // 480: <unknown object>
         // 481: <unknown object>
         // 482: <unknown object>
         // 483: <unknown object>
         // 484: <unknown object>
         // 485: <unknown object>
         // 486: <unknown object>
         // 487: <unknown object>
         // 488: <unknown object>
         // 489: <unknown object>
         // 490: <unknown object>
         // 491: <unknown object>
         // 492: <unknown object>
         // 493: <unknown object>
         // 494: <unknown object>
         // 495: <unknown object>
         // 496: <unknown object>
         // 497: <unknown object>
         // 498: <unknown object>
         // 499: <unknown object>
         // 500: <unknown object>
         // 501: <unknown object>
         // 502: <unknown object>
         // 503: <unknown object>
         // 504: <unknown object>
         // 505: <unknown object>
         // 506: <unknown object>
         // 507: <unknown object>
         // 508: <unknown object>
         // 509: <unknown object>
         // 510: <unknown object>
         // 511: <unknown object>
         // 512: <unknown object>
         // 513: <unknown object>
         // 514: <unknown object>
         // 515: <unknown object>
         // 516: <unknown object>
         // 517: <unknown object>
         // 518: <unknown object>
         // 519: <unknown object>
         // 520: <unknown object>
         // 521: <unknown object>
         // 522: <unknown object>
         // 523: <unknown object>
         // 524: <unknown object>
         // 525: <unknown object>
         // 526: <unknown object>
         // 527: <unknown object>
         // 528: <unknown object>
         // 529: <unknown object>
         // 530: <unknown object>
         // 531: <unknown object>
         // 532: <unknown object>
         // 533: <unknown object>
         // 534: <unknown object>
         // 535: <unknown object>
         // 536: <unknown object>
         // 537: <unknown object>
         // 538: <unknown object>
         // 539: <unknown object>
         // 540: <unknown object>
         // 541: <unknown object>
         // 542: <unknown object>
         // 543: <unknown object>
         // 544: <unknown object>
         // 545: <unknown object>
         // 546: <unknown object>
         // 547: <unknown object>
         // 548: <unknown object>
         // 549: <unknown object>
         // 550: <unknown object>
         // 551: <unknown object>
         // 552: <unknown object>
         // 553: <unknown object>
         // 554: <unknown object>
         // 555: <unknown object>
         // 556: <unknown object>
         // 557: <unknown object>
         // 558: <unknown object>
         // 559: <unknown object>
         // 560: <unknown object>
         // 561: <unknown object>
         // 562: <unknown object>
         // 563: <unknown object>
         // 564: <unknown object>
         // 565: <unknown object>
         // 566: <unknown object>
         // 567: <unknown object>
         // 568: <unknown object>
         // 569: <unknown object>
         // 570: <unknown object>
         // 571: <unknown object>
         // 572: <unknown object>
         // 573: <unknown object>
         // 574: <unknown object>
         // 575: <unknown object>
         // 576: <unknown object>
         // 577: <unknown object>
         // 578: <unknown object>
         // 579: <unknown object>
         // 580: <unknown object>
         // 581: <unknown object>
         // 582: <unknown object>
         // 583: <unknown object>
         // 584: <unknown object>
         // 585: <unknown object>
         // 586: <unknown object>
         // 587: <unknown object>
         // 588: <unknown object>
         // 589: <unknown object>
         // 590: <unknown object>
         // 591: <unknown object>
         // 592: <unknown object>
         // 593: <unknown object>
         // 594: <unknown object>
         // 595: <unknown object>
         // 596: <unknown object>
         // 597: <unknown object>
         // 598: <unknown object>
         // 599: <unknown object>
         // 600: <unknown object>
         // 601: <unknown object>
         // 602: <unknown object>
         // 603: <unknown object>
         // 604: <unknown object>
         // 605: <unknown object>
         // 606: <unknown object>
         // 607: <unknown object>
         // 608: <unknown object>
         // 609: <unknown object>
         // 610: <unknown object>
         // 611: <unknown object>
         // 612: <unknown object>
         // 613: <unknown object>
         // 614: <unknown object>
         // 615: <unknown object>
         // 616: <unknown object>
         // 617: <unknown object>
         // 618: <unknown object>
         // 619: <unknown object>
         // 620: <unknown object>
         // 621: <unknown object>
         // 622: <unknown object>
         // 623: <unknown object>
         // 624: <unknown object>
         // 625: <unknown object>
         // 626: <unknown object>
         // 627: <unknown object>
         // 628: <unknown object>
         // 629: <unknown object>
         // 630: <unknown object>
         // 631: <unknown object>
         // 632: <unknown object>
         // 633: <unknown object>
         // 634: <unknown object>
         // 635: <unknown object>
         // 636: <unknown object>
         // 637: <unknown object>
         // 638: <unknown object>
         // 639: <unknown object>
         // 640: <unknown object>
         // 641: <unknown object>
         // 642: <unknown object>
         // 643: <unknown object>
         // 644: <unknown object>
         // 645: <unknown object>
         // 646: <unknown object>
         // 647: <unknown object>
         // 648: <unknown object>
         // 649: <unknown object>
         // 650: <unknown object>
         // 651: <unknown object>
         // 652: <unknown object>
         // 653: <unknown object>
         // 654: <unknown object>
         // 655: <unknown object>
         // 656: <unknown object>
         // 657: <unknown object>
         // 658: <unknown object>
         // 659: <unknown object>
         // 660: <unknown object>
         // 661: <unknown object>
         // 662: <unknown object>
         // 663: <unknown object>
         // 664: <unknown object>
         // 665: <unknown object>
         // 666: <unknown object>
         // 667: <unknown object>
         // 668: <unknown object>
         // 669: <unknown object>
         // 670: <unknown object>
         // 671: <unknown object>
         // 672: <unknown object>
         // 673: <unknown object>
         // 674: <unknown object>
         // 675: <unknown object>
         // 676: <unknown object>
         // 677: <unknown object>
         // 678: <unknown object>
         // 679: <unknown object>
         // 680: <unknown object>
         // 681: <unknown object>
         // 682: <unknown object>
         // 683: <unknown object>
         // 684: <unknown object>
         // 685: <unknown object>
         // 686: <unknown object>
         // 687: <unknown object>
         // 688: <unknown object>
         // 689: <unknown object>
         // 690: <unknown object>
         // 691: <unknown object>
         // 692: <unknown object>
         // 693: <unknown object>
         // 694: <unknown object>
         // 695: <unknown object>
         // 696: <unknown object>
         // 697: <unknown object>
         // 698: <unknown object>
         // 699: <unknown object>
         // 700: <unknown object>
         // 701: <unknown object>
         // 702: <unknown object>
         // 703: <unknown object>
         // 704: <unknown object>
         // 705: <unknown object>
         // 706: <unknown object>
         // 707: <unknown object>
         // 708: <unknown object>
         // 709: <unknown object>
         // 710: <unknown object>
         // 711: <unknown object>
         // 712: <unknown object>
         // 713: <unknown object>
         // 714: <unknown object>
         // 715: <unknown object>
         // 716: <unknown object>
         // 717: <unknown object>
         // 718: <unknown object>
         // 719: <unknown object>
         // 720: <unknown object>
         // 721: <unknown object>
         // 722: <unknown object>
         // 723: <unknown object>
         // 724: <unknown object>
         // 725: <unknown object>
         // 726: <unknown object>
         // 727: <unknown object>
         // 728: <unknown object>
         // 729: <unknown object>
         // 730: <unknown object>
         // 731: <unknown object>
         // 732: <unknown object>
         // 733: <unknown object>
         // 734: <unknown object>
         // 735: <unknown object>
         // 736: <unknown object>
         // 737: <unknown object>
         // 738: <unknown object>
         // 739: <unknown object>
         // 740: <unknown object>
         // 741: <unknown object>
         // 742: <unknown object>
         // 743: <unknown object>
         // 744: <unknown object>
         // 745: <unknown object>
         // 746: <unknown object>
         // 747: <unknown object>
         // 748: <unknown object>
         // 749: <unknown object>
         // 750: <unknown object>
         // 751: <unknown object>
         // 752: <unknown object>
         // 753: <unknown object>
         // 754: <unknown object>
         // 755: <unknown object>
         // 756: <unknown object>
         // 757: <unknown object>
         // 758: <unknown object>
         // 759: <unknown object>
         // 760: <unknown object>
         // 761: <unknown object>
         // 762: <unknown object>
         // 763: <unknown object>
         // 764: <unknown object>
         // 765: <unknown object>
         // 766: <unknown object>
         // 767: <unknown object>
         // 768: <unknown object>
         // 769: <unknown object>
         // 770: <unknown object>
         // 771: <unknown object>
         // 772: <unknown object>
         // 773: <unknown object>
         // 774: <unknown object>
         // 775: <unknown object>
         // 776: <unknown object>
         // 777: <unknown object>
         // 778: <unknown object>
         // 779: <unknown object>
         // 780: <unknown object>
         // 781: <unknown object>
         // 782: <unknown object>
         // 783: <unknown object>
         // 784: <unknown object>
         // 785: <unknown object>
         // 786: <unknown object>
         // 787: <unknown object>
         // 788: <unknown object>
         // 789: <unknown object>
         // 790: <unknown object>
         // 791: <unknown object>
         // 792: <unknown object>
         // 793: <unknown object>
         // 794: <unknown object>
         // 795: <unknown object>
         // 796: <unknown object>
         // 797: <unknown object>
         // 798: <unknown object>
         // 799: <unknown object>
         // 800: <unknown object>
         // 801: <unknown object>
         // 802: <unknown object>
         // 803: <unknown object>
         // 804: <unknown object>
         // 805: <unknown object>
         // 806: <unknown object>
         // 807: <unknown object>
         // 808: <unknown object>
         // 809: <unknown object>
         // 810: <unknown object>
         // 811: <unknown object>
         // 812: <unknown object>
         // 813: <unknown object>
         // 814: <unknown object>
         // 815: <unknown object>
         // 816: <unknown object>
         // 817: <unknown object>
         // 818: <unknown object>
         // 819: <unknown object>
         // 820: <unknown object>
         // 821: <unknown object>
         // 822: <unknown object>
         // 823: <unknown object>
         // 824: <unknown object>
         // 825: <unknown object>
         // 826: <unknown object>
         // 827: <unknown object>
         // 828: <unknown object>
         // 829: <unknown object>
         // 830: <unknown object>
         // 831: <unknown object>
         // 832: <unknown object>
         // 833: <unknown object>
         // 834: <unknown object>
         // 835: <unknown object>
         // 836: <unknown object>
         // 837: <unknown object>
         // 838: <unknown object>
         // 839: <unknown object>
         // 840: <unknown object>
         // 841: <unknown object>
         // 842: <unknown object>
         // 843: <unknown object>
         // 844: <unknown object>
         // 845: <unknown object>
         // 846: <unknown object>
         // 847: <unknown object>
         // 848: <unknown object>
         // 849: <unknown object>
         // 850: <unknown object>
         // 851: <unknown object>
         // 852: <unknown object>
         // 853: <unknown object>
         // 854: <unknown object>
         // 855: <unknown object>
         // 856: <unknown object>
         // 857: <unknown object>
         // 858: <unknown object>
         // 859: <unknown object>
         // 860: <unknown object>
         // 861: <unknown object>
         // 862: <unknown object>
         // 863: <unknown object>
         // 864: <unknown object>
         // 865: <unknown object>
         // 866: <unknown object>
         // 867: <unknown object>
         // 868: <unknown object>
         // 869: <unknown object>
         // 870: <unknown object>
         // 871: <unknown object>
         // 872: <unknown object>
         // 873: <unknown object>
         // 874: <unknown object>
         // 875: <unknown object>
         // 876: <unknown object>
         // 877: <unknown object>
         // 878: <unknown object>
         // 879: <unknown object>
         // 880: <unknown object>
         // 881: <unknown object>
         // 882: <unknown object>
         // 883: <unknown object>
         // 884: <unknown object>
         // 885: <unknown object>
         // 886: <unknown object>
         // 887: <unknown object>
         // 888: <unknown object>
         // 889: <unknown object>
         // 890: <unknown object>
         // 891: <unknown object>
         // 892: <unknown object>
         // 893: <unknown object>
         // 894: <unknown object>
         // 895: <unknown object>
         // 896: <unknown object>
         // 897: <unknown object>
         // 898: <unknown object>
         // 899: <unknown object>
         // 900: <unknown object>
         // 901: <unknown object>
         // 902: <unknown object>
         // 903: <unknown object>
         // 904: <unknown object>
         // 905: <unknown object>
         // 906: <unknown object>
         // 907: <unknown object>
         // 908: <unknown object>
         // 909: <unknown object>
         // 910: <unknown object>
         // 911: <unknown object>
         // 912: <unknown object>
         // 913: <unknown object>
         // 914: <unknown object>
         // 915: <unknown object>
         // 916: <unknown object>
         // 917: <unknown object>
         // 918: <unknown object>
         // 919: <unknown object>
         // 920: <unknown object>
         // 921: <unknown object>
         // 922: <unknown object>
         // 923: <unknown object>
         // 924: <unknown object>
         // 925: <unknown object>
         // 926: <unknown object>
         // 927: <unknown object>
         // 928: <unknown object>
         // 929: <unknown object>
         // 930: <unknown object>
         // 931: <unknown object>
         // 932: <unknown object>
         // 933: <unknown object>
         // 934: <unknown object>
         // 935: <unknown object>
         // 936: <unknown object>
         // 937: <unknown object>
         // 938: <unknown object>
         // 939: <unknown object>
         // 940: <unknown object>
         // 941: <unknown object>
         // 942: <unknown object>
         // 943: <unknown object>
         // 944: <unknown object>
         // 945: <unknown object>
         // 946: <unknown object>
         // 947: <unknown object>
         // 948: <unknown object>
         // 949: <unknown object>
         // 950: <unknown object>
         // 951: <unknown object>
         // 952: <unknown object>
         // 953: <unknown object>
         // 954: <unknown object>
         // 955: <unknown object>
         // 956: <unknown object>
         // 957: <unknown object>
         // 958: <unknown object>
         // 959: <unknown object>
         // 960: <unknown object>
         // 961: <unknown object>
         // 962: <unknown object>
         // 963: <unknown object>
         // 964: <unknown object>
         // 965: <unknown object>
         // 966: <unknown object>
         // 967: <unknown object>
         // 968: <unknown object>
         // 969: <unknown object>
         // 970: <unknown object>
         // 971: <unknown object>
         // 972: <unknown object>
         // 973: <unknown object>
         // 974: <unknown object>
         // 975: <unknown object>
         // 976: <unknown object>
         // 977: <unknown object>
         // 978: <unknown object>
         // 979: <unknown object>
         // 980: <unknown object>
         // 981: <unknown object>
         // 982: <unknown object>
         // 983: <unknown object>
         // 984: <unknown object>
         // 985: <unknown object>
         // 986: <unknown object>
         // 987: <unknown object>
         // 988: <unknown object>
         // 989: <unknown object>
         // 990: <unknown object>
         // 991: <unknown object>
         // 992: <unknown object>
         // 993: <unknown object>
         // 994: <unknown object>
         // 995: <unknown object>
         // 996: <unknown object>
         // 997: <unknown object>
         // 998: <unknown object>
         // 999: <unknown object>
         // 1000: <unknown object>
         // 1001: <unknown object>
         // 1002: <unknown object>
         // 1003: <unknown object>
         // 1004: <unknown object>
         // 1005: <unknown object>
         // 1006: <unknown object>
         // 1007: <unknown object>
         // 1008: <unknown object>
         // 1009: <unknown object>
         // 1010: <unknown object>
         // 1011: <unknown object>
         // 1012: <unknown object>
         // 1013: <unknown object>
         // 1014: <unknown object>
         // 1015: <unknown object>
         // 1016: <unknown object>
         // 1017: <unknown object>
         // 1018: <unknown object>
         // 1019: <unknown object>
         // 1020: <unknown object>
         // 1021: <unknown object>
         // 1022: <unknown object>
         // 1023: <unknown object>
         // 1024: <unknown object>
         // 1025: <unknown object>
         // 1026: <unknown object>
         // 1027: <unknown object>
         // 1028: <unknown object>
         // 1029: <unknown object>
         // 1030: <unknown object>
         // 1031: <unknown object>
         // 1032: <unknown object>
         // 1033: <unknown object>
         // 1034: <unknown object>
         // 1035: <unknown object>
         // 1036: <unknown object>
         // 1037: <unknown object>
         // 1038: <unknown object>
         // 1039: <unknown object>
         // 1040: <unknown object>
         // 1041: <unknown object>
         // 1042: <unknown object>
         // 1043: <unknown object>
         // 1044: <unknown object>
         // 1045: <unknown object>
         // 1046: <unknown object>
         // 1047: <unknown object>
         // 1048: <unknown object>
         // 1049: <unknown object>
         // 1050: <unknown object>
         // 1051: <unknown object>
         // 1052: <unknown object>
         // 1053: <unknown object>
         // 1054: <unknown object>
         // 1055: <unknown object>
         // 1056: <unknown object>
         // 1057: <unknown object>
         // 1058: <unknown object>
         // 1059: <unknown object>
         // 1060: <unknown object>
         // 1061: <unknown object>
         // 1062: <unknown object>
         // 1063: <unknown object>
         // 1064: <unknown object>
         // 1065: <unknown object>
         // 1066: <unknown object>
         // 1067: <unknown object>
         // 1068: <unknown object>
         // 1069: <unknown object>
         // 1070: <unknown object>
         // 1071: <unknown object>
         // 1072: <unknown object>
         // 1073: <unknown object>
         // 1074: <unknown object>
         // 1075: <unknown object>
         // 1076: <unknown object>
         // 1077: <unknown object>
         // 1078: <unknown object>
         // 1079: <unknown object>
         // 1080: <unknown object>
         // 1081: <unknown object>
         // 1082: <unknown object>
         // 1083: <unknown object>
         // 1084: <unknown object>
         // 1085: <unknown object>
         // 1086: <unknown object>
         // 1087: <unknown object>
         // 1088: <unknown object>
         // 1089: <unknown object>
         // 1090: <unknown object>
         // 1091: <unknown object>
         // 1092: <unknown object>
         // 1093: <unknown object>
         // 1094: <unknown object>
         // 1095: <unknown object>
         // 1096: <unknown object>
         // 1097: <unknown object>
         // 1098: <unknown object>
         // 1099: <unknown object>
         // 1100: <unknown object>
         // 1101: <unknown object>
         // 1102: <unknown object>
         // 1103: <unknown object>
         // 1104: <unknown object>
         // 1105: <unknown object>
         // 1106: <unknown object>
         // 1107: <unknown object>
         // 1108: <unknown object>
         // 1109: <unknown object>
         // 1110: <unknown object>
         // 1111: <unknown object>
         // 1112: <unknown object>
         // 1113: <unknown object>
         // 1114: <unknown object>
         // 1115: <unknown object>
         // 1116: <unknown object>
         // 1117: <unknown object>
         // 1118: <unknown object>
         // 1119: <unknown object>
         // 1120: <unknown object>
         // 1121: <unknown object>
         // 1122: <unknown object>
         // 1123: <unknown object>
         // 1124: <unknown object>
         // 1125: <unknown object>
         // 1126: <unknown object>
         // 1127: <unknown object>
         // 1128: <unknown object>
         // 1129: <unknown object>
         // 1130: <unknown object>
         // 1131: <unknown object>
         // 1132: <unknown object>
         // 1133: <unknown object>
         // 1134: <unknown object>
         // 1135: <unknown object>
         // 1136: <unknown object>
         // 1137: <unknown object>
         // 1138: <unknown object>
         // 1139: <unknown object>
         // 1140: <unknown object>
         // 1141: <unknown object>
         // 1142: <unknown object>
         // 1143: <unknown object>
         // 1144: <unknown object>
         // 1145: <unknown object>
         // 1146: <unknown object>
         // 1147: <unknown object>
         // 1148: <unknown object>
         // 1149: <unknown object>
         // 1150: <unknown object>
         // 1151: <unknown object>
         // 1152: <unknown object>
         // 1153: <unknown object>
         // 1154: <unknown object>
         // 1155: <unknown object>
         // 1156: <unknown object>
         // 1157: <unknown object>
         // 1158: <unknown object>
         // 1159: <unknown object>
         // 1160: <unknown object>
         // 1161: <unknown object>
         // 1162: <unknown object>
         // 1163: <unknown object>
         // 1164: <unknown object>
         // 1165: <unknown object>
         // 1166: <unknown object>
         // 1167: <unknown object>
         // 1168: <unknown object>
         // 1169: <unknown object>
         // 1170: <unknown object>
         // 1171: <unknown object>
         // 1172: <unknown object>
         // 1173: <unknown object>
         // 1174: <unknown object>
         // 1175: <unknown object>
         // 1176: <unknown object>
         // 1177: <unknown object>
         // 1178: <unknown object>
         // 1179: <unknown object>
         // 1180: <unknown object>
         // 1181: <unknown object>
         // 1182: <unknown object>
         // 1183: <unknown object>
         // 1184: <unknown object>
         // 1185: <unknown object>
         // 1186: <unknown object>
         // 1187: <unknown object>
         // 1188: <unknown object>
         // 1189: <unknown object>
         // 1190: <unknown object>
         // 1191: <unknown object>
         // 1192: <unknown object>
         // 1193: <unknown object>
         // 1194: <unknown object>
         // 1195: <unknown object>
         // 1196: <unknown object>
         // 1197: <unknown object>
         // 1198: <unknown object>
         // 1199: <unknown object>
         // 1200: <unknown object>
         // 1201: <unknown object>
         // 1202: <unknown object>
         // 1203: <unknown object>
         // 1204: <unknown object>
         // 1205: <unknown object>
         // 1206: <unknown object>
         // 1207: <unknown object>
         // 1208: <unknown object>
         // 1209: <unknown object>
         // 1210: <unknown object>
         // 1211: <unknown object>
         // 1212: <unknown object>
         // 1213: <unknown object>
         // 1214: <unknown object>
         // 1215: <unknown object>
         // 1216: <unknown object>
         // 1217: <unknown object>
         // 1218: <unknown object>
         // 1219: <unknown object>
         // 1220: <unknown object>
         // 1221: <unknown object>
         // 1222: <unknown object>
         // 1223: <unknown object>
         // 1224: <unknown object>
         // 1225: <unknown object>
         // 1226: <unknown object>
         // 1227: <unknown object>
         // 1228: <unknown object>
         // 1229: <unknown object>
         // 1230: <unknown object>
         // 1231: <unknown object>
         // 1232: <unknown object>
         // 1233: <unknown object>
         // 1234: <unknown object>
         // 1235: <unknown object>
         // 1236: <unknown object>
         // 1237: <unknown object>
         // 1238: <unknown object>
         // 1239: <unknown object>
         // 1240: <unknown object>
         // 1241: <unknown object>
         // 1242: <unknown object>
         // 1243: <unknown object>
         // 1244: <unknown object>
         // 1245: <unknown object>
         // 1246: <unknown object>
         // 1247: <unknown object>
         // 1248: <unknown object>
         // 1249: <unknown object>
         // 1250: <unknown object>
         // 1251: <unknown object>
         // 1252: <unknown object>
         // 1253: <unknown object>
         // 1254: <unknown object>
         // 1255: <unknown object>
         // 1256: <unknown object>
         // 1257: <unknown object>
         // 1258: <unknown object>
         // 1259: <unknown object>
         // 1260: <unknown object>
         // 1261: <unknown object>
         // 1262: <unknown object>
         // 1263: <unknown object>
         // 1264: <unknown object>
         // 1265: <unknown object>
         // 1266: <unknown object>
         // 1267: <unknown object>
         // 1268: <unknown object>
         // 1269: <unknown object>
         // 1270: <unknown object>
         // 1271: <unknown object>
         // 1272: <unknown object>
         // 1273: <unknown object>
         // 1274: <unknown object>
         // 1275: <unknown object>
         // 1276: <unknown object>
         // 1277: <unknown object>
         // 1278: <unknown object>
         // 1279: <unknown object>
         // 1280: <unknown object>
         // 1281: <unknown object>
         // 1282: <unknown object>
         // 1283: <unknown object>
         // 1284: <unknown object>
         // 1285: <unknown object>
         // 1286: <unknown object>
         // 1287: <unknown object>
         // 1288: <unknown object>
         // 1289: <unknown object>
         // 1290: <unknown object>
         // 1291: <unknown object>
         // 1292: <unknown object>
         // 1293: <unknown object>
         // 1294: <unknown object>
         // 1295: <unknown object>
         // 1296: <unknown object>
         // 1297: <unknown object>
         // 1298: <unknown object>
         // 1299: <unknown object>
         // 1300: <unknown object>
         // 1301: <unknown object>
         // 1302: <unknown object>
         // 1303: <unknown object>
         // 1304: <unknown object>
         // 1305: <unknown object>
         // 1306: <unknown object>
         // 1307: <unknown object>
         // 1308: <unknown object>
         // 1309: <unknown object>
         // 1310: <unknown object>
         // 1311: <unknown object>
         // 1312: <unknown object>
         // 1313: <unknown object>
         // 1314: <unknown object>
         // 1315: <unknown object>
         // 1316: <unknown object>
         // 1317: <unknown object>
         // 1318: <unknown object>
         // 1319: <unknown object>
         // 1320: <unknown object>
         // 1321: <unknown object>
         // 1322: <unknown object>
         // 1323: <unknown object>
         // 1324: <unknown object>
         // 1325: <unknown object>
         // 1326: <unknown object>
         // 1327: <unknown object>
         // 1328: <unknown object>
         // 1329: <unknown object>
         // 1330: <unknown object>
         // 1331: <unknown object>
         // 1332: <unknown object>
         // 1333: <unknown object>
         // 1334: <unknown object>
         // 1335: <unknown object>
         // 1336: <unknown object>
         // 1337: <unknown object>
         // 1338: <unknown object>
         // 1339: <unknown object>
         // 1340: <unknown object>
         // 1341: <unknown object>
         // 1342: <unknown object>
         // 1343: <unknown object>
         // 1344: <unknown object>
         // 1345: <unknown object>
         // 1346: <unknown object>
         // 1347: <unknown object>
         // 1348: <unknown object>
         // 1349: <unknown object>
         // 1350: <unknown object>
         // 1351: <unknown object>
         // 1352: <unknown object>
         // 1353: <unknown object>
         // 1354: <unknown object>
         // 1355: <unknown object>
         // 1356: <unknown object>
         // 1357: <unknown object>
         // 1358: <unknown object>
         // 1359: <unknown object>
         // 1360: <unknown object>
         // 1361: <unknown object>
         // 1362: <unknown object>
         // 1363: <unknown object>
         // 1364: <unknown object>
         // 1365: <unknown object>
         // 1366: <unknown object>
         // 1367: <unknown object>
         // 1368: <unknown object>
         // 1369: <unknown object>
         // 1370: <unknown object>
         // 1371: <unknown object>
         // 1372: <unknown object>
         // 1373: <unknown object>
         // 1374: <unknown object>
         // 1375: <unknown object>
         // 1376: <unknown object>
         // 1377: <unknown object>
         // 1378: <unknown object>
         // 1379: <unknown object>
         // 1380: <unknown object>
         // 1381: <unknown object>
         // 1382: <unknown object>
         // 1383: <unknown object>
         // 1384: <unknown object>
         // 1385: <unknown object>
         // 1386: <unknown object>
         // 1387: <unknown object>
         // 1388: <unknown object>
         // 1389: <unknown object>
         // 1390: <unknown object>
         // 1391: <unknown object>
         // 1392: <unknown object>
         // 1393: <unknown object>
         // 1394: <unknown object>
         // 1395: <unknown object>
         // 1396: <unknown object>
         // 1397: <unknown object>
         // 1398: <unknown object>
         // 1399: <unknown object>
         // 1400: <unknown object>
         // 1401: <unknown object>
         // 1402: <unknown object>
         // 1403: <unknown object>
         // 1404: <unknown object>
         // 1405: <unknown object>
         // 1406: <unknown object>
         // 1407: <unknown object>
         // 1408: <unknown object>
         // 1409: <unknown object>
         // 1410: <unknown object>
         // 1411: <unknown object>
         // 1412: <unknown object>
         // 1413: <unknown object>
         // 1414: <unknown object>
         // 1415: <unknown object>
         // 1416: <unknown object>
         // 1417: <unknown object>
         // 1418: <unknown object>
         // 1419: <unknown object>
         // 1420: <unknown object>
         // 1421: <unknown object>
         // 1422: <unknown object>
         // 1423: <unknown object>
         // 1424: <unknown object>
         // 1425: <unknown object>
         // 1426: <unknown object>
         // 1427: <unknown object>
         // 1428: <unknown object>
         // 1429: <unknown object>
         // 1430: <unknown object>
         // 1431: <unknown object>
         // 1432: <unknown object>
         // 1433: <unknown object>
         // 1434: <unknown object>
         // 1435: <unknown object>
         // 1436: <unknown object>
         // 1437: <unknown object>
         // 1438: <unknown object>
         // 1439: <unknown object>
         // 1440: <unknown object>
         // 1441: <unknown object>
         // 1442: <unknown object>
         // 1443: <unknown object>
         // 1444: <unknown object>
         // 1445: <unknown object>
         // 1446: <unknown object>
         // 1447: <unknown object>
         // 1448: <unknown object>
         // 1449: <unknown object>
         // 1450: <unknown object>
         // 1451: <unknown object>
         // 1452: <unknown object>
         // 1453: <unknown object>
         // 1454: <unknown object>
         // 1455: <unknown object>
         // 1456: <unknown object>
         // 1457: <unknown object>
         // 1458: <unknown object>
         // 1459: <unknown object>
         // 1460: <unknown object>
         // 1461: <unknown object>
         // 1462: <unknown object>
         // 1463: <unknown object>
         // 1464: <unknown object>
         // 1465: <unknown object>
         // 1466: <unknown object>
         // 1467: <unknown object>
         // 1468: <unknown object>
         // 1469: <unknown object>
         // 1470: <unknown object>
         // 1471: <unknown object>
         // 1472: <unknown object>
         // 1473: <unknown object>
         // 1474: <unknown object>
         // 1475: <unknown object>
         // 1476: <unknown object>
         // 1477: <unknown object>
         // 1478: <unknown object>
         // 1479: <unknown object>
         // 1480: <unknown object>
         // 1481: <unknown object>
         // 1482: <unknown object>
         // 1483: <unknown object>
         // 1484: <unknown object>
         // 1485: <unknown object>
         // 1486: <unknown object>
         // 1487: <unknown object>
         // 1488: <unknown object>
         // 1489: <unknown object>
         // 1490: <unknown object>
         // 1491: <unknown object>
         // 1492: <unknown object>
         // 1493: <unknown object>
         // 1494: <unknown object>
         // 1495: <unknown object>
         // 1496: <unknown object>
         // 1497: <unknown object>
         // 1498: <unknown object>
         // 1499: <unknown object>
         // 1500: <unknown object>
         // 1501: <unknown object>
         // 1502: <unknown object>
         // 1503: <unknown object>
         // 1504: <unknown object>
         // 1505: <unknown object>
         // 1506: <unknown object>
         // 1507: <unknown object>
         // 1508: <unknown object>
         // 1509: <unknown object>
         // 1510: <unknown object>
         // 1511: <unknown object>
         // 1512: <unknown object>
         // 1513: <unknown object>
         // 1514: <unknown object>
         // 1515: <unknown object>
         // 1516: <unknown object>
         // 1517: <unknown object>
         // 1518: <unknown object>
         // 1519: <unknown object>
         // 1520: <unknown object>
         // 1521: <unknown object>
         // 1522: <unknown object>
         // 1523: <unknown object>
         // 1524: <unknown object>
         // 1525: <unknown object>
         // 1526: <unknown object>
         // 1527: <unknown object>
         // 1528: <unknown object>
         // 1529: <unknown object>
         // 1530: <unknown object>
         // 1531: <unknown object>
         // 1532: <unknown object>
         // 1533: <unknown object>
         // 1534: <unknown object>
         // 1535: <unknown object>
         // 1536: <unknown object>
         // 1537: <unknown object>
         // 1538: <unknown object>
         // 1539: <unknown object>
         // 1540: <unknown object>
         // 1541: <unknown object>
         // 1542: <unknown object>
         // 1543: <unknown object>
         // 1544: <unknown object>
         // 1545: <unknown object>
         // 1546: <unknown object>
         // 1547: <unknown object>
         // 1548: <unknown object>
         // 1549: <unknown object>
         // 1550: <unknown object>
         // 1551: <unknown object>
         // 1552: <unknown object>
         // 1553: <unknown object>
         // 1554: <unknown object>
         // 1555: <unknown object>
         // 1556: <unknown object>
         // 1557: <unknown object>
         // 1558: <unknown object>
         // 1559: <unknown object>
         // 1560: <unknown object>
         // 1561: <unknown object>
         // 1562: <unknown object>
         // 1563: <unknown object>
         // 1564: <unknown object>
         // 1565: <unknown object>
         // 1566: <unknown object>
         // 1567: <unknown object>
         // 1568: <unknown object>
         // 1569: <unknown object>
         // 1570: <unknown object>
         // 1571: <unknown object>
         // 1572: <unknown object>
         // 1573: <unknown object>
         // 1574: <unknown object>
         // 1575: <unknown object>
         // 1576: <unknown object>
         // 1577: <unknown object>
         // 1578: <unknown object>
         // 1579: <unknown object>
         // 1580: <unknown object>
         // 1581: <unknown object>
         // 1582: <unknown object>
         // 1583: <unknown object>
         // 1584: <unknown object>
         // 1585: <unknown object>
         // 1586: <unknown object>
         // 1587: <unknown object>
         // 1588: <unknown object>
         // 1589: <unknown object>
         // 1590: <unknown object>
         // 1591: <unknown object>
         // 1592: <unknown object>
         // 1593: <unknown object>
         // 1594: <unknown object>
         // 1595: <unknown object>
         // 1596: <unknown object>
         // 1597: <unknown object>
         // 1598: <unknown object>
         // 1599: <unknown object>
         // 1600: <unknown object>
         // 1601: <unknown object>
         // 1602: <unknown object>
         // 1603: <unknown object>
         // 1604: <unknown object>
         // 1605: <unknown object>
         // 1606: <unknown object>
         // 1607: <unknown object>
         // 1608: <unknown object>
         // 1609: <unknown object>
         // 1610: <unknown object>
         // 1611: <unknown object>
         // 1612: <unknown object>
         // 1613: <unknown object>
         // 1614: <unknown object>
         // 1615: <unknown object>
         // 1616: <unknown object>
         // 1617: <unknown object>
         // 1618: <unknown object>
         // 1619: <unknown object>
         // 1620: <unknown object>
         // 1621: <unknown object>
         // 1622: <unknown object>
         // 1623: <unknown object>
         // 1624: <unknown object>
         // 1625: <unknown object>
         // 1626: <unknown object>
         // 1627: <unknown object>
         // 1628: <unknown object>
         // 1629: <unknown object>
         // 1630: <unknown object>
         // 1631: <unknown object>
         // 1632: <unknown object>
         // 1633: <unknown object>
         // 1634: <unknown object>
         // 1635: <unknown object>
         // 1636: <unknown object>
         // 1637: <unknown object>
         // 1638: <unknown object>
         // 1639: <unknown object>
         // 1640: <unknown object>
         // 1641: <unknown object>
         // 1642: <unknown object>
         // 1643: <unknown object>
         // 1644: <unknown object>
         // 1645: <unknown object>
         // 1646: <unknown object>
         // 1647: <unknown object>
         // 1648: <unknown object>
         // 1649: <unknown object>
         // 1650: <unknown object>
         // 1651: <unknown object>
         // 1652: <unknown object>
         // 1653: <unknown object>
         // 1654: <unknown object>
         // 1655: <unknown object>
         // 1656: <unknown object>
         // 1657: <unknown object>
         // 1658: <unknown object>
         // 1659: <unknown object>
         // 1660: <unknown object>
         // 1661: <unknown object>
         // 1662: <unknown object>
         // 1663: <unknown object>
         // 1664: <unknown object>
         // 1665: <unknown object>
         // 1666: <unknown object>
         // 1667: <unknown object>
         // 1668: <unknown object>
         // 1669: <unknown object>
         // 1670: <unknown object>
         // 1671: <unknown object>
         // 1672: <unknown object>
         // 1673: <unknown object>
         // 1674: <unknown object>
         // 1675: <unknown object>
         // 1676: <unknown object>
         // 1677: <unknown object>
         // 1678: <unknown object>
         // 1679: <unknown object>
         // 1680: <unknown object>
         // 1681: <unknown object>
         // 1682: <unknown object>
         // 1683: <unknown object>
         // 1684: <unknown object>
         // 1685: <unknown object>
         // 1686: <unknown object>
         // 1687: <unknown object>
         // 1688: <unknown object>
         // 1689: <unknown object>
         // 1690: <unknown object>
         // 1691: <unknown object>
         // 1692: <unknown object>
         // 1693: <unknown object>
         // 1694: <unknown object>
         // 1695: <unknown object>
         // 1696: <unknown object>
         // 1697: <unknown object>
         // 1698: <unknown object>
         // 1699: <unknown object>
         // 1700: <unknown object>
         // 1701: <unknown object>
         // 1702: <unknown object>
         // 1703: <unknown object>
         // 1704: <unknown object>
         // 1705: <unknown object>
         // 1706: <unknown object>
         // 1707: <unknown object>
         // 1708: <unknown object>
         // 1709: <unknown object>
         // 1710: <unknown object>
         // 1711: <unknown object>
         // 1712: <unknown object>
         // 1713: <unknown object>
         // 1714: <unknown object>
         // 1715: <unknown object>
         // 1716: <unknown object>
         // 1717: <unknown object>
         // 1718: <unknown object>
         // 1719: <unknown object>
         // 1720: <unknown object>
         // 1721: <unknown object>
         // 1722: <unknown object>
         // 1723: <unknown object>
         // 1724: <unknown object>
         // 1725: <unknown object>
         // 1726: <unknown object>
         // 1727: <unknown object>
         // 1728: <unknown object>
         // 1729: <unknown object>
         // 1730: <unknown object>
         // 1731: <unknown object>
         // 1732: <unknown object>
         // 1733: <unknown object>
         // 1734: <unknown object>
         // 1735: <unknown object>
         // 1736: <unknown object>
         // 1737: <unknown object>
         // 1738: <unknown object>
         // 1739: <unknown object>
         // 1740: <unknown object>
         // 1741: <unknown object>
         // 1742: <unknown object>
         // 1743: <unknown object>
         // 1744: <unknown object>
         // 1745: <unknown object>
         // 1746: <unknown object>
         // 1747: <unknown object>
         // 1748: <unknown object>
         // 1749: <unknown object>
         // 1750: <unknown object>
         // 1751: <unknown object>
         // 1752: <unknown object>
         // 1753: <unknown object>
         // 1754: <unknown object>
         // 1755: <unknown object>
         // 1756: <unknown object>
         // 1757: <unknown object>
         // 1758: <unknown object>
         // 1759: <unknown object>
         // 1760: <unknown object>
         // 1761: <unknown object>
         // 1762: <unknown object>
         // 1763: <unknown object>
         // 1764: <unknown object>
         // 1765: <unknown object>
         // 1766: <unknown object>
         // 1767: <unknown object>
         // 1768: <unknown object>
         // 1769: <unknown object>
         // 1770: <unknown object>
         // 1771: <unknown object>
         // 1772: <unknown object>
         // 1773: <unknown object>
         // 1774: <unknown object>
         // 1775: <unknown object>
         // 1776: <unknown object>
         // 1777: <unknown object>
         // 1778: <unknown object>
         // 1779: <unknown object>
         // 1780: <unknown object>
         // 1781: <unknown object>
         // 1782: <unknown object>
         // 1783: <unknown object>
         // 1784: <unknown object>
         // 1785: <unknown object>
         // 1786: <unknown object>
         // 1787: <unknown object>
         // 1788: <unknown object>
         // 1789: <unknown object>
         // 1790: <unknown object>
         // 1791: <unknown object>
         // 1792: <unknown object>
         // 1793: <unknown object>
         // 1794: <unknown object>
         // 1795: <unknown object>
         // 1796: <unknown object>
         // 1797: <unknown object>
         // 1798: <unknown object>
         // 1799: <unknown object>
         // 1800: <unknown object>
         // 1801: <unknown object>
         // 1802: <unknown object>
         // 1803: <unknown object>
         // 1804: <unknown object>
         // 1805: <unknown object>
         // 1806: <unknown object>
         // 1807: <unknown object>
         // 1808: <unknown object>
         // 1809: <unknown object>
         // 1810: <unknown object>
         // 1811: <unknown object>
         // 1812: <unknown object>
         // 1813: <unknown object>
         // 1814: <unknown object>
         // 1815: <unknown object>
         // 1816: <unknown object>
         // 1817: <unknown object>
         // 1818: <unknown object>
         // 1819: <unknown object>
         // 1820: <unknown object>
         // 1821: <unknown object>
         // 1822: <unknown object>
         // 1823: <unknown object>
         // 1824: <unknown object>
         // 1825: <unknown object>
         // 1826: <unknown object>
         // 1827: <unknown object>
         // 1828: <unknown object>
         // 1829: <unknown object>
         // 1830: <unknown object>
         // 1831: <unknown object>
         // 1832: <unknown object>
         // 1833: <unknown object>
         // 1834: <unknown object>
         // 1835: <unknown object>
         // 1836: <unknown object>
         // 1837: <unknown object>
         // 1838: <unknown object>
         // 1839: <unknown object>
         // 1840: <unknown object>
         // 1841: <unknown object>
         // 1842: <unknown object>
         // 1843: <unknown object>
         // 1844: <unknown object>
         // 1845: <unknown object>
         // 1846: <unknown object>
         // 1847: <unknown object>
         // 1848: <unknown object>
         // 1849: <unknown object>
         // 1850: <unknown object>
         // 1851: <unknown object>
         // 1852: <unknown object>
         // 1853: <unknown object>
         // 1854: <unknown object>
         // 1855: <unknown object>
         // 1856: <unknown object>
         // 1857: <unknown object>
         // 1858: <unknown object>
         // 1859: <unknown object>
         // 1860: <unknown object>
         // 1861: <unknown object>
         // 1862: <unknown object>
         // 1863: <unknown object>
         // 1864: <unknown object>
         // 1865: <unknown object>
         // 1866: <unknown object>
         // 1867: <unknown object>
         // 1868: <unknown object>
         // 1869: <unknown object>
         // 1870: <unknown object>
         // 1871: <unknown object>
         // 1872: <unknown object>
         // 1873: <unknown object>
         // 1874: <unknown object>
         // 1875: <unknown object>
         // 1876: <unknown object>
         // 1877: <unknown object>
         // 1878: <unknown object>
         // 1879: <unknown object>
         // 1880: <unknown object>
         // 1881: <unknown object>
         // 1882: <unknown object>
         // 1883: <unknown object>
         // 1884: <unknown object>
         // 1885: <unknown object>
         // 1886: <unknown object>
         // 1887: <unknown object>
         // 1888: <unknown object>
         // 1889: <unknown object>
         // 1890: <unknown object>
         // 1891: <unknown object>
         // 1892: <unknown object>
         // 1893: <unknown object>
         // 1894: <unknown object>
         // 1895: <unknown object>
         // 1896: <unknown object>
         // 1897: <unknown object>
         // 1898: <unknown object>
         // 1899: <unknown object>
         // 1900: <unknown object>
         // 1901: <unknown object>
         // 1902: <unknown object>
         // 1903: <unknown object>
         // 1904: <unknown object>
         // 1905: <unknown object>
         // 1906: <unknown object>
         // 1907: <unknown object>
         // 1908: <unknown object>
         // 1909: <unknown object>
         // 1910: <unknown object>
         // 1911: <unknown object>
         // 1912: <unknown object>
         // 1913: <unknown object>
         // 1914: <unknown object>
         // 1915: <unknown object>
         // 1916: <unknown object>
         // 1917: <unknown object>
         // 1918: <unknown object>
         // 1919: <unknown object>
         // 1920: <unknown object>
         // 1921: <unknown object>
         // 1922: <unknown object>
         // 1923: <unknown object>
         // 1924: <unknown object>
         // 1925: <unknown object>
         // 1926: <unknown object>
         // 1927: <unknown object>
         // 1928: <unknown object>
         // 1929: <unknown object>
         // 1930: <unknown object>
         // 1931: <unknown object>
         // 1932: <unknown object>
         // 1933: <unknown object>
         // 1934: <unknown object>
         // 1935: <unknown object>
         // 1936: <unknown object>
         // 1937: <unknown object>
         // 1938: <unknown object>
         // 1939: <unknown object>
         // 1940: <unknown object>
         // 1941: <unknown object>
         // 1942: <unknown object>
         // 1943: <unknown object>
         // 1944: <unknown object>
         // 1945: <unknown object>
         // 1946: <unknown object>
         // 1947: <unknown object>
         // 1948: <unknown object>
         // 1949: <unknown object>
         // 1950: <unknown object>
         // 1951: <unknown object>
         // 1952: <unknown object>
         // 1953: <unknown object>
         // 1954: <unknown object>
         // 1955: <unknown object>
         // 1956: <unknown object>
         // 1957: <unknown object>
         // 1958: <unknown object>
         // 1959: <unknown object>
         // 1960: <unknown object>
         // 1961: <unknown object>
         // 1962: <unknown object>
         // 1963: <unknown object>
         // 1964: <unknown object>
         // 1965: <unknown object>
         // 1966: <unknown object>
         // 1967: <unknown object>
         // 1968: <unknown object>
         // 1969: <unknown object>
         // 1970: <unknown object>
         // 1971: <unknown object>
         // 1972: <unknown object>
         // 1973: <unknown object>
         // 1974: <unknown object>
         // 1975: <unknown object>
         // 1976: <unknown object>
         // 1977: <unknown object>
         // 1978: <unknown object>
         // 1979: <unknown object>
         // 1980: <unknown object>
         // 1981: <unknown object>
         // 1982: <unknown object>
         // 1983: <unknown object>
         // 1984: <unknown object>
         // 1985: <unknown object>
         // 1986: <unknown object>
         // 1987: <unknown object>
         // 1988: <unknown object>
         // 1989: <unknown object>
         // 1990: <unknown object>
         // 1991: <unknown object>
         // 1992: <unknown object>
         // 1993: <unknown object>
         // 1994: <unknown object>
         // 1995: <unknown object>
         // 1996: <unknown object>
         // 1997: <unknown object>
         // 1998: <unknown object>
         // 1999: <unknown object>
         // 2000: <unknown object>
         // 2001: <unknown object>
         // 2002: <unknown object>
         // 2003: <unknown object>
         // 2004: <unknown object>
         // 2005: <unknown object>
         // 2006: <unknown object>
         // 2007: <unknown object>
         // 2008: <unknown object>
         // 2009: <unknown object>
         // 2010: <unknown object>
         // 2011: <unknown object>
         // 2012: <unknown object>
         // 2013: <unknown object>
         // 2014: <unknown object>
         // 2015: <unknown object>
         // 2016: <unknown object>
         // 2017: <unknown object>
         // 2018: <unknown object>
         // 2019: <unknown object>
         // 2020: <unknown object>
         // 2021: <unknown object>
         // 2022: <unknown object>
         // 2023: <unknown object>
         // 2024: <unknown object>
         // 2025: <unknown object>
         // 2026: <unknown object>
         // 2027: <unknown object>
         // 2028: <unknown object>
         // 2029: <unknown object>
         // 2030: <unknown object>
         // 2031: <unknown object>
         // 2032: <unknown object>
         // 2033: <unknown object>
         // 2034: <unknown object>
         // 2035: <unknown object>
         // 2036: <unknown object>
         // 2037: <unknown object>
         // 2038: <unknown object>
         // 2039: <unknown object>
         // 2040: <unknown object>
         // 2041: <unknown object>
         // 2042: <unknown object>
         // 2043: <unknown object>
         // 2044: <unknown object>
         // 2045: <unknown object>
         // 2046: <unknown object>
         // 2047: <unknown object>
         // 2048: <unknown object>
         // 2049: <unknown object>
         // 2050: <unknown object>
         // 2051: <unknown object>
         // 2052: <unknown object>
         // 2053: <unknown object>
         // 2054: <unknown object>
         // 2055: <unknown object>
         // 2056: <unknown object>
         // 2057: <unknown object>
         // 2058: <unknown object>
         // 2059: <unknown object>
         // 2060: <unknown object>
         // 2061: <unknown object>
         // 2062: <unknown object>
         // 2063: <unknown object>
         // 2064: <unknown object>
         // 2065: <unknown object>
         // 2066: <unknown object>
         // 2067: <unknown object>
         // 2068: <unknown object>
         // 2069: <unknown object>
         // 2070: <unknown object>
         // 2071: <unknown object>
         // 2072: <unknown object>
         // 2073: <unknown object>
         // 2074: <unknown object>
         // 2075: <unknown object>
         // 2076: <unknown object>
         // 2077: <unknown object>
         // 2078: <unknown object>
         // 2079: <unknown object>
         // 2080: <unknown object>
         // 2081: <unknown object>
         // 2082: <unknown object>
         // 2083: <unknown object>
         // 2084: <unknown object>
         // 2085: <unknown object>
         // 2086: <unknown object>
         // 2087: <unknown object>
         // 2088: <unknown object>
         // 2089: <unknown object>
         // 2090: <unknown object>
         // 2091: <unknown object>
         // 2092: <unknown object>
         // 2093: <unknown object>
         // 2094: <unknown object>
         // 2095: <unknown object>
         // 2096: <unknown object>
         // 2097: <unknown object>
         // 2098: <unknown object>
         // 2099: <unknown object>
         // 2100: <unknown object>
         // 2101: <unknown object>
         // 2102: <unknown object>
         // 2103: <unknown object>
         // 2104: <unknown object>
         // 2105: <unknown object>
         // 2106: <unknown object>
         // 2107: <unknown object>
         // 2108: <unknown object>
         // 2109: <unknown object>
         // 2110: <unknown object>
         // 2111: <unknown object>
         // 2112: <unknown object>
         // 2113: <unknown object>
         // 2114: <unknown object>
         // 2115: <unknown object>
         // 2116: <unknown object>
         // 2117: <unknown object>
         // 2118: <unknown object>
         // 2119: <unknown object>
         // 2120: <unknown object>
         // 2121: <unknown object>
         // 2122: <unknown object>
         // 2123: <unknown object>
         // 2124: <unknown object>
         // 2125: <unknown object>
         // 2126: <unknown object>
         // 2127: <unknown object>
         // 2128: <unknown object>
         // 2129: <unknown object>
         // 2130: <unknown object>
         // 2131: <unknown object>
         // 2132: <unknown object>
         // 2133: <unknown object>
         // 2134: <unknown object>
         // 2135: <unknown object>
         // 2136: <unknown object>
         // 2137: <unknown object>
         // 2138: <unknown object>
         // 2139: <unknown object>
         // 2140: <unknown object>
         // 2141: <unknown object>
         // 2142: <unknown object>
         // 2143: <unknown object>
         // 2144: <unknown object>
         // 2145: <unknown object>
         // 2146: <unknown object>
         // 2147: <unknown object>
         // 2148: <unknown object>
         // 2149: <unknown object>
         // 2150: <unknown object>
         // 2151: <unknown object>
         // 2152: <unknown object>
         // 2153: <unknown object>
         // 2154: <unknown object>
         // 2155: <unknown object>
         // 2156: <unknown object>
         // 2157: <unknown object>
         // 2158: <unknown object>
         // 2159: <unknown object>
         // 2160: <unknown object>
         // 2161: <unknown object>
         // 2162: <unknown object>
         // 2163: <unknown object>
         // 2164: <unknown object>
         // 2165: <unknown object>
         // 2166: <unknown object>
         // 2167: <unknown object>
         // 2168: <unknown object>
         // 2169: <unknown object>
         // 2170: <unknown object>
         // 2171: <unknown object>
         // 2172: <unknown object>
         // 2173: <unknown object>
         // 2174: <unknown object>
         // 2175: <unknown object>
         // 2176: <unknown object>
         // 2177: <unknown object>
         // 2178: <unknown object>
         // 2179: <unknown object>
         // 2180: <unknown object>
         // 2181: <unknown object>
         // 2182: <unknown object>
         // 2183: <unknown object>
         // 2184: <unknown object>
         // 2185: <unknown object>
         // 2186: <unknown object>
         // 2187: <unknown object>
         // 2188: <unknown object>
         // 2189: <unknown object>
         // 2190: <unknown object>
         // 2191: <unknown object>
         // 2192: <unknown object>
         // 2193: <unknown object>
         // 2194: <unknown object>
         // 2195: <unknown object>
         // 2196: <unknown object>
         // 2197: <unknown object>
         // 2198: <unknown object>
         // 2199: <unknown object>
         // 2200: <unknown object>
         // 2201: <unknown object>
         // 2202: <unknown object>
         // 2203: <unknown object>
         // 2204: <unknown object>
         // 2205: <unknown object>
         // 2206: <unknown object>
         // 2207: <unknown object>
         // 2208: <unknown object>
         // 2209: <unknown object>
         // 2210: <unknown object>
         // 2211: <unknown object>
         // 2212: <unknown object>
         // 2213: <unknown object>
         // 2214: <unknown object>
         // 2215: <unknown object>
         // 2216: <unknown object>
         // 2217: <unknown object>
         // 2218: <unknown object>
         // 2219: <unknown object>
         // 2220: <unknown object>
         // 2221: <unknown object>
         // 2222: <unknown object>
         // 2223: <unknown object>
         // 2224: <unknown object>
         // 2225: <unknown object>
         // 2226: <unknown object>
         // 2227: <unknown object>
         // 2228: <unknown object>
         // 2229: <unknown object>
         // 2230: <unknown object>
         // 2231: <unknown object>
         // 2232: <unknown object>
         // 2233: <unknown object>
         // 2234: <unknown object>
         // 2235: <unknown object>
         // 2236: <unknown object>
         // 2237: <unknown object>
         // 2238: <unknown object>
         // 2239: <unknown object>
         // 2240: <unknown object>
         // 2241: <unknown object>
         // 2242: <unknown object>
         // 2243: <unknown object>
         // 2244: <unknown object>
         // 2245: <unknown object>
         // 2246: <unknown object>
         // 2247: <unknown object>
         // 2248: <unknown object>
         // 2249: <unknown object>
         // 2250: <unknown object>
         // 2251: <unknown object>
         // 2252: <unknown object>
         // 2253: <unknown object>
         // 2254: <unknown object>
         // 2255: <unknown object>
         // 2256: <unknown object>
         // 2257: <unknown object>
         // 2258: <unknown object>
         // 2259: <unknown object>
         // 2260: <unknown object>
         // 2261: <unknown object>
         // 2262: <unknown object>
         // 2263: <unknown object>
         // 2264: <unknown object>
         // 2265: <unknown object>
         // 2266: <unknown object>
         // 2267: <unknown object>
         // 2268: <unknown object>
         // 2269: <unknown object>
         // 2270: <unknown object>
         // 2271: <unknown object>
         // 2272: <unknown object>
         // 2273: <unknown object>
         // 2274: <unknown object>
         // 2275: <unknown object>
         // 2276: <unknown object>
         // 2277: <unknown object>
         // 2278: <unknown object>
         // 2279: <unknown object>
         // 2280: <unknown object>
         // 2281: <unknown object>
         // 2282: <unknown object>
         // 2283: <unknown object>
         // 2284: <unknown object>
         // 2285: <unknown object>
         // 2286: <unknown object>
         // 2287: <unknown object>
         // 2288: <unknown object>
         // 2289: <unknown object>
         // 2290: <unknown object>
         // 2291: <unknown object>
         // 2292: <unknown object>
         // 2293: <unknown object>
         // 2294: <unknown object>
         // 2295: <unknown object>
         // 2296: <unknown object>
         // 2297: <unknown object>
         // 2298: <unknown object>
         // 2299: <unknown object>
         // 2300: <unknown object>
         // 2301: <unknown object>
         // 2302: <unknown object>
         // 2303: <unknown object>
         // 2304: <unknown object>
         // 2305: <unknown object>
         // 2306: <unknown object>
         // 2307: <unknown object>
         // 2308: <unknown object>
         // 2309: <unknown object>
         // 2310: <unknown object>
         // 2311: <unknown object>
         // 2312: <unknown object>
         // 2313: <unknown object>
         // 2314: <unknown object>
         // 2315: <unknown object>
         // 2316: <unknown object>
         // 2317: <unknown object>
         // 2318: <unknown object>
         // 2319: <unknown object>
         // 2320: <unknown object>
         // 2321: <unknown object>
         // 2322: <unknown object>
         // 2323: <unknown object>
         // 2324: <unknown object>
         // 2325: <unknown object>
         // 2326: <unknown object>
         // 2327: <unknown object>
         // 2328: <unknown object>
         // 2329: <unknown object>
         // 2330: <unknown object>
         // 2331: <unknown object>
         // 2332: <unknown object>
         // 2333: <unknown object>
         // 2334: <unknown object>
         // 2335: <unknown object>
         // 2336: <unknown object>
         // 2337: <unknown object>
         // 2338: <unknown object>
         // 2339: <unknown object>
         // 2340: <unknown object>
         // 2341: <unknown object>
         // 2342: <unknown object>
         // 2343: <unknown object>
         // 2344: <unknown object>
         // 2345: <unknown object>
         // 2346: <unknown object>
         // 2347: <unknown object>
         // 2348: <unknown object>
         // 2349: <unknown object>
         // 2350: <unknown object>
         // 2351: <unknown object>
         // 2352: <unknown object>
         // 2353: <unknown object>
         // 2354: <unknown object>
         // 2355: <unknown object>
         // 2356: <unknown object>
         // 2357: <unknown object>
         // 2358: <unknown object>
         // 2359: <unknown object>
         // 2360: <unknown object>
         // 2361: <unknown object>
         // 2362: <unknown object>
         // 2363: <unknown object>
         // 2364: <unknown object>
         // 2365: <unknown object>
         // 2366: <unknown object>
         // 2367: <unknown object>
         // 2368: <unknown object>
         // 2369: <unknown object>
         // 2370: <unknown object>
         // 2371: <unknown object>
         // 2372: <unknown object>
         // 2373: <unknown object>
         // 2374: <unknown object>
         // 2375: <unknown object>
         // 2376: <unknown object>
         // 2377: <unknown object>
         // 2378: <unknown object>
         // 2379: <unknown object>
         // 2380: <unknown object>
         // 2381: <unknown object>
         // 2382: <unknown object>
         // 2383: <unknown object>
         // 2384: <unknown object>
         // 2385: <unknown object>
         // 2386: <unknown object>
         // 2387: <unknown object>
         // 2388: <unknown object>
         // 2389: <unknown object>
         // 2390: <unknown object>
         // 2391: <unknown object>
         // 2392: <unknown object>
         // 2393: <unknown object>
         // 2394: <unknown object>
         // 2395: <unknown object>
         // 2396: <unknown object>
         // 2397: <unknown object>
         // 2398: <unknown object>
         // 2399: <unknown object>
         // 2400: <unknown object>
         // 2401: <unknown object>
         // 2402: <unknown object>
         // 2403: <unknown object>
         // 2404: <unknown object>
         // 2405: <unknown object>
         // 2406: <unknown object>
         // 2407: <unknown object>
         // 2408: <unknown object>
         // 2409: <unknown object>
         // 2410: <unknown object>
         // 2411: <unknown object>
         // 2412: <unknown object>
         // 2413: <unknown object>
         // 2414: <unknown object>
         // 2415: <unknown object>
         // 2416: <unknown object>
         // 2417: <unknown object>
         // 2418: <unknown object>
         // 2419: <unknown object>
         // 2420: <unknown object>
         // 2421: <unknown object>
         // 2422: <unknown object>
         // 2423: <unknown object>
         // 2424: <unknown object>
         // 2425: <unknown object>
         // 2426: <unknown object>
         // 2427: <unknown object>
         // 2428: <unknown object>
         // 2429: <unknown object>
         // 2430: <unknown object>
         // 2431: <unknown object>
         // 2432: <unknown object>
         // 2433: <unknown object>
         // 2434: <unknown object>
         // 2435: <unknown object>
         // 2436: <unknown object>
         // 2437: <unknown object>
         // 2438: <unknown object>
         // 2439: <unknown object>
         // 2440: <unknown object>
         // 2441: <unknown object>
         // 2442: <unknown object>
         // 2443: <unknown object>
         // 2444: <unknown object>
         // 2445: <unknown object>
         // 2446: <unknown object>
         // 2447: <unknown object>
         // 2448: <unknown object>
         // 2449: <unknown object>
         // 2450: <unknown object>
         // 2451: <unknown object>
         // 2452: <unknown object>
         // 2453: <unknown object>
         // 2454: <unknown object>
         // 2455: <unknown object>
         // 2456: <unknown object>
         // 2457: <unknown object>
         // 2458: <unknown object>
         // 2459: <unknown object>
         // 2460: <unknown object>
         // 2461: <unknown object>
         // 2462: <unknown object>
         // 2463: <unknown object>
         // 2464: <unknown object>
         // 2465: <unknown object>
         // 2466: <unknown object>
         // 2467: <unknown object>
         // 2468: <unknown object>
         // 2469: <unknown object>
         // 2470: <unknown object>
         // 2471: <unknown object>
         // 2472: <unknown object>
         // 2473: <unknown object>
         // 2474: <unknown object>
         // 2475: <unknown object>
         // 2476: <unknown object>
         // 2477: <unknown object>
         // 2478: <unknown object>
         // 2479: <unknown object>
         // 2480: <unknown object>
         // 2481: <unknown object>
         // 2482: <unknown object>
         // 2483: <unknown object>
         // 2484: <unknown object>
         // 2485: <unknown object>
         // 2486: <unknown object>
         // 2487: <unknown object>
         // 2488: <unknown object>
         // 2489: <unknown object>
         // 2490: <unknown object>
         // 2491: <unknown object>
         // 2492: <unknown object>
         // 2493: <unknown object>
         // 2494: <unknown object>
         // 2495: <unknown object>
         // 2496: <unknown object>
         // 2497: <unknown object>
         // 2498: <unknown object>
         // 2499: <unknown object>
         // 2500: <unknown object>
         // 2501: <unknown object>
         // 2502: <unknown object>
         // 2503: <unknown object>
         // 2504: <unknown object>
         // 2505: <unknown object>
         // 2506: <unknown object>
         // 2507: <unknown object>
         // 2508: <unknown object>
         // 2509: <unknown object>
         // 2510: <unknown object>
         // 2511: <unknown object>
         // 2512: <unknown object>
         // 2513: <unknown object>
         // 2514: <unknown object>
         // 2515: <unknown object>
         // 2516: <unknown object>
         // 2517: <unknown object>
         // 2518: <unknown object>
         // 2519: <unknown object>
         // 2520: <unknown object>
         // 2521: <unknown object>
         // 2522: <unknown object>
         // 2523: <unknown object>
         // 2524: <unknown object>
         // 2525: <unknown object>
         // 2526: <unknown object>
         // 2527: <unknown object>
         // 2528: <unknown object>
         // 2529: <unknown object>
         // 2530: <unknown object>
         // 2531: <unknown object>
         // 2532: <unknown object>
         // 2533: <unknown object>
         // 2534: <unknown object>
         // 2535: <unknown object>
         // 2536: <unknown object>
         // 2537: <unknown object>
         // 2538: <unknown object>
         // 2539: <unknown object>
         // 2540: <unknown object>
         // 2541: <unknown object>
         // 2542: <unknown object>
         // 2543: <unknown object>
         // 2544: <unknown object>
         // 2545: <unknown object>
         // 2546: <unknown object>
         // 2547: <unknown object>
         // 2548: <unknown object>
         // 2549: <unknown object>
         // 2550: <unknown object>
         // 2551: <unknown object>
         // 2552: <unknown object>
         // 2553: <unknown object>
         // 2554: <unknown object>
         // 2555: <unknown object>
         // 2556: <unknown object>
         // 2557: <unknown object>
         // 2558: <unknown object>
         // 2559: <unknown object>
         // 2560: <unknown object>
         // 2561: <unknown object>
         // 2562: <unknown object>
         // 2563: <unknown object>
         // 2564: <unknown object>
         // 2565: <unknown object>
         // 2566: <unknown object>
         // 2567: <unknown object>
         // 2568: <unknown object>
         // 2569: <unknown object>
         // 2570: <unknown object>
         // 2571: <unknown object>
         // 2572: <unknown object>
         // 2573: <unknown object>
         // 2574: <unknown object>
         // 2575: <unknown object>
         // 2576: <unknown object>
         // 2577: <unknown object>
         // 2578: <unknown object>
         // 2579: <unknown object>
         // 2580: <unknown object>
         // 2581: <unknown object>
         // 2582: <unknown object>
         // 2583: <unknown object>
         // 2584: <unknown object>
         // 2585: <unknown object>
         // 2586: <unknown object>
         // 2587: <unknown object>
         // 2588: <unknown object>
         // 2589: <unknown object>
         // 2590: <unknown object>
         // 2591: <unknown object>
         // 2592: <unknown object>
         // 2593: <unknown object>
         // 2594: <unknown object>
         // 2595: <unknown object>
         // 2596: <unknown object>
         // 2597: <unknown object>
         // 2598: <unknown object>
         // 2599: <unknown object>
         // 2600: <unknown object>
         // 2601: <unknown object>
         // 2602: <unknown object>
         // 2603: <unknown object>
         // 2604: <unknown object>
         // 2605: <unknown object>
         // 2606: <unknown object>
         // 2607: <unknown object>
         // 2608: <unknown object>
         // 2609: <unknown object>
         // 2610: <unknown object>
         // 2611: <unknown object>
         // 2612: <unknown object>
         // 2613: <unknown object>
         // 2614: <unknown object>
         // 2615: <unknown object>
         // 2616: <unknown object>
         // 2617: <unknown object>
         // 2618: <unknown object>
         // 2619: <unknown object>
         // 2620: <unknown object>
         // 2621: <unknown object>
         // 2622: <unknown object>
         // 2623: <unknown object>
         // 2624: <unknown object>
         // 2625: <unknown object>
         // 2626: <unknown object>
         // 2627: <unknown object>
         // 2628: <unknown object>
         // 2629: <unknown object>
         // 2630: <unknown object>
         // 2631: <unknown object>
         // 2632: <unknown object>
         // 2633: <unknown object>
         // 2634: <unknown object>
         // 2635: <unknown object>
         // 2636: <unknown object>
         // 2637: <unknown object>
         // 2638: <unknown object>
         // 2639: <unknown object>
         // 2640: <unknown object>
         // 2641: <unknown object>
         // 2642: <unknown object>
         // 2643: <unknown object>
         // 2644: <unknown object>
         // 2645: <unknown object>
         // 2646: <unknown object>
         // 2647: <unknown object>
         // 2648: <unknown object>
         // 2649: <unknown object>
         // 2650: <unknown object>
         // 2651: <unknown object>
         // 2652: <unknown object>
         // 2653: <unknown object>
         // 2654: <unknown object>
         // 2655: <unknown object>
         // 2656: <unknown object>
         // 2657: <unknown object>
         // 2658: <unknown object>
         // 2659: <unknown object>
         // 2660: <unknown object>
         // 2661: <unknown object>
         // 2662: <unknown object>
         // 2663: <unknown object>
         // 2664: <unknown object>
         // 2665: <unknown object>
         // 2666: <unknown object>
         // 2667: <unknown object>
         // 2668: <unknown object>
         // 2669: <unknown object>
         // 2670: <unknown object>
         // 2671: <unknown object>
         // 2672: <unknown object>
         // 2673: <unknown object>
         // 2674: <unknown object>
         // 2675: <unknown object>
         // 2676: <unknown object>
         // 2677: <unknown object>
         // 2678: <unknown object>
         // 2679: <unknown object>
         // 2680: <unknown object>
         // 2681: <unknown object>
         // 2682: <unknown object>
         // 2683: <unknown object>
         // 2684: <unknown object>
         // 2685: <unknown object>
         // 2686: <unknown object>
         // 2687: <unknown object>
         // 2688: <unknown object>
         // 2689: <unknown object>
         // 2690: <unknown object>
         // 2691: <unknown object>
         // 2692: <unknown object>
         // 2693: <unknown object>
         // 2694: <unknown object>
         // 2695: <unknown object>
         // 2696: <unknown object>
         // 2697: <unknown object>
         // 2698: <unknown object>
         // 2699: <unknown object>
         // 2700: <unknown object>
         // 2701: <unknown object>
         // 2702: <unknown object>
         // 2703: <unknown object>
         // 2704: <unknown object>
         // 2705: <unknown object>
         // 2706: <unknown object>
         // 2707: <unknown object>
         // 2708: <unknown object>
         // 2709: <unknown object>
         // 2710: <unknown object>
         // 2711: <unknown object>
         // 2712: <unknown object>
         // 2713: <unknown object>
         // 2714: <unknown object>
         // 2715: <unknown object>
         // 2716: <unknown object>
         // 2717: <unknown object>
         // 2718: <unknown object>
         // 2719: <unknown object>
         // 2720: <unknown object>
         // 2721: <unknown object>
         // 2722: <unknown object>
         // 2723: <unknown object>
         // 2724: <unknown object>
         // 2725: <unknown object>
         // 2726: <unknown object>
         // 2727: <unknown object>
         // 2728: <unknown object>
         // 2729: <unknown object>
         // 2730: <unknown object>
         // 2731: <unknown object>
         // 2732: <unknown object>
         // 2733: <unknown object>
         // 2734: <unknown object>
         // 2735: <unknown object>
         // 2736: <unknown object>
         // 2737: <unknown object>
         // 2738: <unknown object>
         // 2739: <unknown object>
         // 2740: <unknown object>
         // 2741: <unknown object>
         // 2742: <unknown object>
         // 2743: <unknown object>
         // 2744: <unknown object>
         // 2745: <unknown object>
         // 2746: <unknown object>
         // 2747: <unknown object>
         // 2748: <unknown object>
         // 2749: <unknown object>
         // 2750: <unknown object>
         // 2751: <unknown object>
         // 2752: <unknown object>
         // 2753: <unknown object>
         // 2754: <unknown object>
         // 2755: <unknown object>
         // 2756: <unknown object>
         // 2757: <unknown object>
         // 2758: <unknown object>
         // 2759: <unknown object>
         // 2760: <unknown object>
         // 2761: <unknown object>
         // 2762: <unknown object>
         // 2763: <unknown object>
         // 2764: <unknown object>
         // 2765: <unknown object>
         // 2766: <unknown object>
         // 2767: <unknown object>
         // 2768: <unknown object>
         // 2769: <unknown object>
         // 2770: <unknown object>
         // 2771: <unknown object>
         // 2772: <unknown object>
         // 2773: <unknown object>
         // 2774: <unknown object>
         // 2775: <unknown object>
         // 2776: <unknown object>
         // 2777: <unknown object>
         // 2778: <unknown object>
         // 2779: <unknown object>
         // 2780: <unknown object>
         // 2781: <unknown object>
         // 2782: <unknown object>
         // 2783: <unknown object>
         // 2784: <unknown object>
         // 2785: <unknown object>
         // 2786: <unknown object>
         // 2787: <unknown object>
         // 2788: <unknown object>
         // 2789: <unknown object>
         // 2790: <unknown object>
         // 2791: <unknown object>
         // 2792: <unknown object>
         // 2793: <unknown object>
         // 2794: <unknown object>
         // 2795: <unknown object>
         // 2796: <unknown object>
         // 2797: <unknown object>
         // 2798: <unknown object>
         // 2799: <unknown object>
         // 2800: <unknown object>
         // 2801: <unknown object>
         // 2802: <unknown object>
         // 2803: <unknown object>
         // 2804: <unknown object>
         // 2805: <unknown object>
         // 2806: <unknown object>
         // 2807: <unknown object>
         // 2808: <unknown object>
         // 2809: <unknown object>
         // 2810: <unknown object>
         // 2811: <unknown object>
         // 2812: <unknown object>
         // 2813: <unknown object>
         // 2814: <unknown object>
         // 2815: <unknown object>
         // 2816: <unknown object>
         // 2817: <unknown object>
         // 2818: <unknown object>
         // 2819: <unknown object>
         // 2820: <unknown object>
         // 2821: <unknown object>
         // 2822: <unknown object>
         // 2823: <unknown object>
         // 2824: <unknown object>
         // 2825: <unknown object>
         // 2826: <unknown object>
         // 2827: <unknown object>
         // 2828: <unknown object>
         // 2829: <unknown object>
         // 2830: <unknown object>
         // 2831: <unknown object>
         // 2832: <unknown object>
         // 2833: <unknown object>
         // 2834: <unknown object>
         // 2835: <unknown object>
         // 2836: <unknown object>
         // 2837: <unknown object>
         // 2838: <unknown object>
         // 2839: <unknown object>
         // 2840: <unknown object>
         // 2841: <unknown object>
         // 2842: <unknown object>
         // 2843: <unknown object>
         // 2844: <unknown object>
         // 2845: <unknown object>
         // 2846: <unknown object>
         // 2847: <unknown object>
         // 2848: <unknown object>
         // 2849: <unknown object>
         // 2850: <unknown object>
         // 2851: <unknown object>
         // 2852: <unknown object>
         // 2853: <unknown object>
         // 2854: <unknown object>
         // 2855: <unknown object>
         // 2856: <unknown object>
         // 2857: <unknown object>
         // 2858: <unknown object>
         // 2859: <unknown object>
         // 2860: <unknown object>
         // 2861: <unknown object>
         // ;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(2852);
      assertEquals(2852, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(2852, localVariables0.maxLocals());
      assertEquals(2852, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      String string0 = localVariables1.toString();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(2852, localVariables0.maxLocals());
      assertEquals(2852, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(string0);
      
      ObjectType objectType0 = new ObjectType("g Dp)!kgb-");
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("g Dp)!kgb-", objectType0.getClassName());
      assertEquals("Lg Dp)!kgb-;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(2852, objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("g Dp)!kgb-", objectType0.getClassName());
      assertEquals("Lg Dp)!kgb-;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2852, operandStack0.maxStack());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables1, operandStack0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(2852, localVariables0.maxLocals());
      assertEquals(2852, localVariables1.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("g Dp)!kgb-", objectType0.getClassName());
      assertEquals("Lg Dp)!kgb-;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2852, operandStack0.maxStack());
      assertNotNull(frame0);
      
      boolean boolean0 = frame0.equals(operandStack0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(2852, localVariables0.maxLocals());
      assertEquals(2852, localVariables1.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("g Dp)!kgb-", objectType0.getClassName());
      assertEquals("Lg Dp)!kgb-;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2852, operandStack0.maxStack());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertFalse(boolean0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(2852, localVariables0.maxLocals());
      assertEquals(2852, localVariables1.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("g Dp)!kgb-", objectType0.getClassName());
      assertEquals("Lg Dp)!kgb-;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2852, operandStack0.maxStack());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      RET rET0 = new RET(46);
      assertEquals("ret", rET0.getName());
      assertEquals(46, rET0.getIndex());
      assertEquals(2, rET0.getLength());
      assertEquals((short)169, rET0.getOpcode());
      assertNotNull(rET0);
      
      POP pOP0 = new POP();
      assertEquals((short)87, pOP0.getOpcode());
      assertEquals(1, pOP0.getLength());
      assertEquals("pop", pOP0.getName());
      assertNotNull(pOP0);
      
      instConstraintVisitor0.visitStackInstruction(pOP0);
      assertEquals((short)87, pOP0.getOpcode());
      assertEquals(1, pOP0.getLength());
      assertEquals("pop", pOP0.getName());
      
      Instruction instruction0 = pOP0.copy();
      assertEquals((short)87, pOP0.getOpcode());
      assertEquals(1, pOP0.getLength());
      assertEquals("pop", pOP0.getName());
      assertEquals(1, instruction0.getLength());
      assertEquals("pop", instruction0.getName());
      assertEquals((short)87, instruction0.getOpcode());
      assertSame(pOP0, instruction0);
      assertSame(instruction0, pOP0);
      assertNotNull(instruction0);
      
      RET rET1 = new RET(249);
      assertFalse(rET1.equals((Object)rET0));
      assertEquals((short)169, rET1.getOpcode());
      assertEquals("ret", rET1.getName());
      assertEquals(249, rET1.getIndex());
      assertEquals(2, rET1.getLength());
      assertNotNull(rET1);
      
      DUP2_X2 dUP2_X2_0 = new DUP2_X2();
      assertEquals(1, dUP2_X2_0.getLength());
      assertEquals((short)94, dUP2_X2_0.getOpcode());
      assertEquals("dup2_x2", dUP2_X2_0.getName());
      assertNotNull(dUP2_X2_0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP2_X2(dUP2_X2_0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      int int0 = 2862;
      LocalVariables localVariables0 = new LocalVariables(2862);
      assertEquals(2862, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ClassPath classPath0 = new ClassPath("");
      assertNotNull(classPath0);
      
      MemorySensitiveClassPathRepository memorySensitiveClassPathRepository0 = new MemorySensitiveClassPathRepository(classPath0);
      assertNotNull(memorySensitiveClassPathRepository0);
      
      Repository.setRepository(memorySensitiveClassPathRepository0);
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(2862, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      ObjectType objectType0 = new ObjectType("D$M%");
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(2862, objectType0);
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.size());
      assertEquals(2862, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.size());
      assertEquals(2862, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.size());
      assertEquals(2862, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(localVariables0, localVariables1);
      
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      assertEquals(1, mONITORENTER0.getLength());
      assertEquals("monitorenter", mONITORENTER0.getName());
      assertEquals((short)194, mONITORENTER0.getOpcode());
      assertNotNull(mONITORENTER0);
      
      LLOAD lLOAD0 = new LLOAD(2862);
      assertEquals((short)22, lLOAD0.getOpcode());
      assertEquals((short)22, lLOAD0.getCanonicalTag());
      assertEquals("lload", lLOAD0.getName());
      assertEquals(2862, lLOAD0.getIndex());
      assertEquals(4, lLOAD0.getLength());
      assertNotNull(lLOAD0);
      
      // Undeclared exception!
      try { 
        lLOAD0.accept(instConstraintVisitor0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LLOAD constraint violated: The 'index' is not a valid index into the local variable array.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(2862);
      assertEquals(2862, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = new ObjectType("D$M%");
      assertEquals(1, objectType0.getSize());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("D$M%", objectType0.getClassName());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(2862, objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("D$M%", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2862, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("D$M%", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2862, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertNotNull(frame0);
      
      Frame frame1 = frame0.getClone();
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("D$M%", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2862, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      assertNotNull(frame1);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("D$M%", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2862, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertNotSame(frame0, frame1);
      
      ISHR iSHR0 = new ISHR();
      assertEquals(1, iSHR0.getLength());
      assertEquals((short)122, iSHR0.getOpcode());
      assertEquals("ishr", iSHR0.getName());
      assertNotNull(iSHR0);
      
      String string0 = iSHR0.toString();
      assertEquals(1, iSHR0.getLength());
      assertEquals((short)122, iSHR0.getOpcode());
      assertEquals("ishr", iSHR0.getName());
      assertEquals("ishr[122](1)", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitISHR((ISHR) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      int int0 = 548;
      LocalVariables localVariables0 = new LocalVariables(548);
      assertEquals(548, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(548, localVariables0.maxLocals());
      assertEquals(548, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      ObjectType objectType0 = new ObjectType("D$M%");
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals("D$M%", objectType0.getClassName());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(548, objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(548, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables1, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(548, localVariables0.maxLocals());
      assertEquals(548, localVariables1.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(548, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(548, localVariables0.maxLocals());
      assertEquals(548, localVariables1.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(548, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType(1731);
      assertEquals(1731, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertNotNull(constantMethodType0);
      
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      assertTrue(constantMethodType1.equals((Object)constantMethodType0));
      assertEquals(1731, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(1731, constantMethodType1.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType1.getTag());
      assertNotNull(constantMethodType1);
      
      POP pOP0 = new POP();
      assertEquals(1, pOP0.getLength());
      assertEquals("pop", pOP0.getName());
      assertEquals((short)87, pOP0.getOpcode());
      assertNotNull(pOP0);
      
      I2B i2B0 = new I2B();
      assertEquals("i2b", i2B0.getName());
      assertEquals(1, i2B0.getLength());
      assertEquals((short)145, i2B0.getOpcode());
      assertNotNull(i2B0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2B(i2B0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2B constraint violated: The value at the stack top is not of type 'int', but of type 'D$M%'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      int int0 = 550;
      LocalVariables localVariables0 = new LocalVariables(550);
      assertEquals(550, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(550, localVariables0.maxLocals());
      assertEquals(550, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      ObjectType objectType0 = ObjectType.getInstance(" p!kgb-");
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      LocalVariables localVariables2 = (LocalVariables)localVariables0.clone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertEquals(550, localVariables0.maxLocals());
      assertEquals(550, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotNull(localVariables2);
      
      OperandStack operandStack0 = new OperandStack(1206, objectType0);
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1206, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertEquals(550, localVariables0.maxLocals());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1206, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertEquals(550, localVariables0.maxLocals());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1206, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      
      OperandStack operandStack1 = new OperandStack(481, objectType0);
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.size());
      assertEquals(481, operandStack1.maxStack());
      assertEquals(1, operandStack1.slotsUsed());
      assertNotNull(operandStack1);
      
      RET rET0 = new RET(481);
      assertEquals(4, rET0.getLength());
      assertEquals(481, rET0.getIndex());
      assertEquals((short)169, rET0.getOpcode());
      assertEquals("ret", rET0.getName());
      assertNotNull(rET0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("DHboAe");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      ObjectType objectType1 = new ObjectType("DHboAe");
      assertFalse(objectType1.equals((Object)objectType0));
      assertEquals(1, objectType1.getSize());
      assertEquals("LDHboAe;", objectType1.getSignature());
      assertEquals("DHboAe", objectType1.getClassName());
      assertEquals((byte)14, objectType1.getType());
      assertNotNull(objectType1);
      
      ObjectType objectType2 = new ObjectType("k,{oA");
      assertFalse(objectType2.equals((Object)objectType1));
      assertFalse(objectType2.equals((Object)objectType0));
      assertEquals(1, objectType2.getSize());
      assertEquals((byte)14, objectType2.getType());
      assertEquals("Lk,{oA;", objectType2.getSignature());
      assertEquals("k,{oA", objectType2.getClassName());
      assertNotNull(objectType2);
      
      LADD lADD0 = new LADD();
      assertEquals((short)97, lADD0.getOpcode());
      assertEquals("ladd", lADD0.getName());
      assertEquals(1, lADD0.getLength());
      assertNotNull(lADD0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLADD(lADD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LADD constraint violated: The value at the stack top is not of type 'long', but of type ' p!kgb-'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(2862);
      assertEquals(2862, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/g Dp)!kgb-");
      boolean boolean0 = FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      assertFalse(boolean0);
      
      String string0 = localVariables0.toString();
      assertEquals(2862, localVariables0.maxLocals());
      assertNotNull(string0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(2862, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      String string1 = Constants.STATIC_INITIALIZER_NAME;
      assertFalse(string1.equals((Object)string0));
      assertEquals("<clinit>", string1);
      assertNotNull(string1);
      
      ObjectType objectType0 = ObjectType.getInstance("D$M%");
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(2862, objectType0);
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertEquals(2862, operandStack0.maxStack());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertEquals(2862, operandStack0.maxStack());
      assertNotNull(frame0);
      
      Frame frame1 = new Frame(localVariables0, operandStack0);
      assertTrue(frame1.equals((Object)frame0));
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertEquals(2862, operandStack0.maxStack());
      assertNotNull(frame1);
      
      Frame frame2 = new Frame(localVariables1, operandStack0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(frame2.equals((Object)frame0));
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(2862, localVariables1.maxLocals());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertEquals(2862, operandStack0.maxStack());
      assertNotNull(frame2);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(frame0.equals((Object)frame2));
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertEquals(2862, operandStack0.maxStack());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(frame0, frame1);
      assertNotSame(frame0, frame2);
      
      RET rET0 = new RET(2);
      assertEquals(2, rET0.getLength());
      assertEquals((short)169, rET0.getOpcode());
      assertEquals("ret", rET0.getName());
      assertEquals(2, rET0.getIndex());
      assertNotNull(rET0);
      
      LMUL lMUL0 = new LMUL();
      assertEquals(1, lMUL0.getLength());
      assertEquals((short)105, lMUL0.getOpcode());
      assertEquals("lmul", lMUL0.getName());
      assertNotNull(lMUL0);
      
      instConstraintVisitor0.visitICONST((ICONST) null);
      FSUB fSUB0 = new FSUB();
      assertEquals((short)102, fSUB0.getOpcode());
      assertEquals(1, fSUB0.getLength());
      assertEquals("fsub", fSUB0.getName());
      assertNotNull(fSUB0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFSUB(fSUB0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FSUB constraint violated: The value at the stack top is not of type 'float', but of type 'D$M%'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      LocalVariables localVariables0 = new LocalVariables(550);
      assertEquals(550, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(550, localVariables0.maxLocals());
      assertEquals(550, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      LocalVariables localVariables2 = new LocalVariables(550);
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertEquals(550, localVariables2.maxLocals());
      assertNotNull(localVariables2);
      
      LocalVariables localVariables3 = localVariables0.getClone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables3.equals((Object)localVariables1));
      assertTrue(localVariables3.equals((Object)localVariables2));
      assertTrue(localVariables3.equals((Object)localVariables0));
      assertEquals(550, localVariables0.maxLocals());
      assertEquals(550, localVariables3.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables3, localVariables2);
      assertNotSame(localVariables3, localVariables1);
      assertNotSame(localVariables3, localVariables0);
      assertNotNull(localVariables3);
      
      ObjectType objectType0 = new ObjectType("D$M%");
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertNotNull(objectType0);
      
      LocalVariables localVariables4 = localVariables2.getClone();
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables4.equals((Object)localVariables3));
      assertTrue(localVariables4.equals((Object)localVariables0));
      assertTrue(localVariables4.equals((Object)localVariables1));
      assertTrue(localVariables4.equals((Object)localVariables2));
      assertEquals(550, localVariables2.maxLocals());
      assertEquals(550, localVariables4.maxLocals());
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables2, localVariables4);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables4, localVariables2);
      assertNotSame(localVariables4, localVariables1);
      assertNotSame(localVariables4, localVariables3);
      assertNotSame(localVariables4, localVariables0);
      assertNotNull(localVariables4);
      
      OperandStack operandStack0 = new OperandStack(550, objectType0);
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(550, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables4));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertEquals(550, localVariables0.maxLocals());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(550, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(frame0);
      
      Object object0 = frame0.clone();
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables4));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(object0.equals((Object)frame0));
      assertEquals(550, localVariables0.maxLocals());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(550, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables4);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(frame0, object0);
      assertNotSame(object0, frame0);
      assertNotNull(object0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables4));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(frame0.equals((Object)object0));
      assertEquals(550, localVariables0.maxLocals());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(550, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables4);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(frame0, object0);
      
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      assertEquals("monitorenter", mONITORENTER0.getName());
      assertEquals(1, mONITORENTER0.getLength());
      assertEquals((short)194, mONITORENTER0.getOpcode());
      assertNotNull(mONITORENTER0);
      
      instConstraintVisitor0.visitLCONST((LCONST) null);
      ISTORE iSTORE0 = new ISTORE(550);
      assertEquals((short)54, iSTORE0.getOpcode());
      assertEquals(4, iSTORE0.getLength());
      assertEquals((short)54, iSTORE0.getCanonicalTag());
      assertEquals("istore", iSTORE0.getName());
      assertEquals(550, iSTORE0.getIndex());
      assertNotNull(iSTORE0);
      
      ISTORE iSTORE1 = new ISTORE(550);
      assertTrue(iSTORE1.equals((Object)iSTORE0));
      assertEquals(4, iSTORE1.getLength());
      assertEquals(550, iSTORE1.getIndex());
      assertEquals((short)54, iSTORE1.getOpcode());
      assertEquals((short)54, iSTORE1.getCanonicalTag());
      assertEquals("istore", iSTORE1.getName());
      assertNotNull(iSTORE1);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "D$M%");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      DASTORE dASTORE0 = new DASTORE();
      assertEquals(1, dASTORE0.getLength());
      assertEquals("dastore", dASTORE0.getName());
      assertEquals((short)82, dASTORE0.getOpcode());
      assertNotNull(dASTORE0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDASTORE(dASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DASTORE constraint violated: The value at the stack top is not of type 'double', but of type 'D$M%'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(2862);
      assertEquals(2862, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string0);
      assertNotNull(string0);
      
      ObjectType objectType0 = ObjectType.getInstance("<clinit>");
      assertEquals(1, objectType0.getSize());
      assertEquals("L<clinit>;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("<clinit>", objectType0.getClassName());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(2862, objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals("L<clinit>;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("<clinit>", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2862, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      operandStack0.push(objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals("L<clinit>;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("<clinit>", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2862, operandStack0.maxStack());
      assertEquals(2, operandStack0.size());
      assertEquals(2, operandStack0.slotsUsed());
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("L<clinit>;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("<clinit>", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2862, operandStack0.maxStack());
      assertEquals(2, operandStack0.size());
      assertEquals(2, operandStack0.slotsUsed());
      assertNotNull(frame0);
      
      Frame frame1 = new Frame(2862, 2862);
      assertFalse(frame1.equals((Object)frame0));
      assertNotNull(frame1);
      
      instConstraintVisitor0.setFrame(frame0);
      assertFalse(frame0.equals((Object)frame1));
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("L<clinit>;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("<clinit>", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2862, operandStack0.maxStack());
      assertEquals(2, operandStack0.size());
      assertEquals(2, operandStack0.slotsUsed());
      assertNotSame(frame0, frame1);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("<clinit>");
      assertNotNull(mockFileOutputStream0);
      
      RET rET0 = new RET(2862);
      assertEquals(2862, rET0.getIndex());
      assertEquals("ret", rET0.getName());
      assertEquals((short)169, rET0.getOpcode());
      assertEquals(4, rET0.getLength());
      assertNotNull(rET0);
      
      POP pOP0 = new POP();
      assertEquals(1, pOP0.getLength());
      assertEquals("pop", pOP0.getName());
      assertEquals((short)87, pOP0.getOpcode());
      assertNotNull(pOP0);
      
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(2862, 2862);
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals(2862, constantMethodHandle0.getReferenceIndex());
      assertEquals(2862, constantMethodHandle0.getReferenceKind());
      assertNotNull(constantMethodHandle0);
      
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(2862, 2862);
      assertTrue(constantMethodHandle1.equals((Object)constantMethodHandle0));
      assertEquals((byte)15, constantMethodHandle1.getTag());
      assertEquals(2862, constantMethodHandle1.getReferenceKind());
      assertEquals(2862, constantMethodHandle1.getReferenceIndex());
      assertNotNull(constantMethodHandle1);
      
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("<clinit>");
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("<clinit>", constantUtf8_0.getBytes());
      assertNotNull(constantUtf8_0);
      
      ConstantString constantString0 = new ConstantString(2862);
      assertEquals((byte)8, constantString0.getTag());
      assertEquals(2862, constantString0.getStringIndex());
      assertNotNull(constantString0);
      
      ConstantMethodHandle constantMethodHandle2 = (ConstantMethodHandle)constantMethodHandle1.copy();
      assertTrue(constantMethodHandle2.equals((Object)constantMethodHandle0));
      assertTrue(constantMethodHandle2.equals((Object)constantMethodHandle1));
      assertTrue(constantMethodHandle1.equals((Object)constantMethodHandle0));
      assertEquals(2862, constantMethodHandle2.getReferenceIndex());
      assertEquals(2862, constantMethodHandle2.getReferenceKind());
      assertEquals((byte)15, constantMethodHandle2.getTag());
      assertEquals((byte)15, constantMethodHandle1.getTag());
      assertEquals(2862, constantMethodHandle1.getReferenceKind());
      assertEquals(2862, constantMethodHandle1.getReferenceIndex());
      assertNotSame(constantMethodHandle2, constantMethodHandle1);
      assertNotSame(constantMethodHandle2, constantMethodHandle0);
      assertNotSame(constantMethodHandle1, constantMethodHandle0);
      assertNotSame(constantMethodHandle1, constantMethodHandle2);
      assertNotNull(constantMethodHandle2);
      
      ConstantString constantString1 = new ConstantString(2862);
      assertTrue(constantString1.equals((Object)constantString0));
      assertEquals(2862, constantString1.getStringIndex());
      assertEquals((byte)8, constantString1.getTag());
      assertNotNull(constantString1);
      
      DSUB dSUB0 = new DSUB();
      assertEquals("dsub", dSUB0.getName());
      assertEquals((short)103, dSUB0.getOpcode());
      assertEquals(1, dSUB0.getLength());
      assertNotNull(dSUB0);
      
      DSUB dSUB1 = new DSUB();
      assertTrue(dSUB1.equals((Object)dSUB0));
      assertEquals(1, dSUB1.getLength());
      assertEquals("dsub", dSUB1.getName());
      assertEquals((short)103, dSUB1.getOpcode());
      assertNotNull(dSUB1);
      
      INEG iNEG0 = new INEG();
      assertEquals((short)116, iNEG0.getOpcode());
      assertEquals("ineg", iNEG0.getName());
      assertEquals(1, iNEG0.getLength());
      assertNotNull(iNEG0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINEG(iNEG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `clinit>;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(378);
      assertEquals(378, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(378, localVariables0.maxLocals());
      assertEquals(378, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      ObjectType objectType0 = ObjectType.getInstance("WzwEcqq");
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("WzwEcqq", objectType0.getClassName());
      assertEquals("LWzwEcqq;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(2861, objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("WzwEcqq", objectType0.getClassName());
      assertEquals("LWzwEcqq;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2861, operandStack0.maxStack());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables1, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(378, localVariables0.maxLocals());
      assertEquals(378, localVariables1.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("WzwEcqq", objectType0.getClassName());
      assertEquals("LWzwEcqq;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2861, operandStack0.maxStack());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(378, localVariables0.maxLocals());
      assertEquals(378, localVariables1.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("WzwEcqq", objectType0.getClassName());
      assertEquals("LWzwEcqq;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2861, operandStack0.maxStack());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)45;
      L2F l2F0 = new L2F();
      assertEquals((short)137, l2F0.getOpcode());
      assertEquals("l2f", l2F0.getName());
      assertEquals(1, l2F0.getLength());
      assertNotNull(l2F0);
      
      L2F l2F1 = new L2F();
      assertTrue(l2F1.equals((Object)l2F0));
      assertEquals((short)137, l2F1.getOpcode());
      assertEquals(1, l2F1.getLength());
      assertEquals("l2f", l2F1.getName());
      assertNotNull(l2F1);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitL2F(l2F1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction L2F constraint violated: The value at the stack top is not of type 'long', but of type 'WzwEcqq'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(1999);
      assertEquals(1999, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(1999, localVariables0.maxLocals());
      assertEquals(1999, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      LocalVariables localVariables2 = (LocalVariables)localVariables0.clone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertEquals(1999, localVariables0.maxLocals());
      assertEquals(1999, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertNotNull(localVariables2);
      
      ObjectType objectType0 = new ObjectType("D$M%");
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("D$M%", objectType0.getClassName());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(8192, objectType0);
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("D$M%", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(8192, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertEquals(1999, localVariables0.maxLocals());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("D$M%", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(8192, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(frame0);
      
      localVariables0.merge(localVariables2);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertEquals(1999, localVariables0.maxLocals());
      assertEquals(1999, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertEquals(1999, localVariables0.maxLocals());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("D$M%", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(8192, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      
      IAND iAND0 = new IAND();
      assertEquals(1, iAND0.getLength());
      assertEquals((short)126, iAND0.getOpcode());
      assertEquals("iand", iAND0.getName());
      assertNotNull(iAND0);
      
      Frame frame1 = new Frame(localVariables0, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(frame1.equals((Object)frame0));
      assertEquals(1999, localVariables0.maxLocals());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("D$M%", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(8192, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(frame1);
      
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      assertEquals(1, mONITORENTER0.getLength());
      assertEquals((short)194, mONITORENTER0.getOpcode());
      assertEquals("monitorenter", mONITORENTER0.getName());
      assertNotNull(mONITORENTER0);
      
      instConstraintVisitor0.visitLCONST((LCONST) null);
      ISTORE iSTORE0 = new ISTORE(2780);
      assertEquals((short)54, iSTORE0.getCanonicalTag());
      assertEquals(2780, iSTORE0.getIndex());
      assertEquals(4, iSTORE0.getLength());
      assertEquals((short)54, iSTORE0.getOpcode());
      assertEquals("istore", iSTORE0.getName());
      assertNotNull(iSTORE0);
      
      ISTORE iSTORE1 = new ISTORE(33);
      assertFalse(iSTORE1.equals((Object)iSTORE0));
      assertEquals((short)54, iSTORE1.getCanonicalTag());
      assertEquals((short)54, iSTORE1.getOpcode());
      assertEquals("istore", iSTORE1.getName());
      assertEquals(2, iSTORE1.getLength());
      assertEquals(33, iSTORE1.getIndex());
      assertNotNull(iSTORE1);
      
      ObjectType objectType1 = new ObjectType("D$M%");
      assertTrue(objectType1.equals((Object)objectType0));
      assertEquals(1, objectType1.getSize());
      assertEquals((byte)14, objectType1.getType());
      assertEquals("D$M%", objectType1.getClassName());
      assertEquals("LD$M%;", objectType1.getSignature());
      assertNotNull(objectType1);
      
      OperandStack operandStack1 = new OperandStack(2549, objectType0);
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertTrue(objectType0.equals((Object)objectType1));
      assertEquals(1, operandStack1.size());
      assertEquals(2549, operandStack1.maxStack());
      assertEquals(1, operandStack1.slotsUsed());
      assertFalse(operandStack1.isEmpty());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("D$M%", objectType0.getClassName());
      assertNotNull(operandStack1);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPLT((IF_ICMPLT) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(550);
      assertEquals(550, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(550, localVariables0.maxLocals());
      assertEquals(550, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      ObjectType objectType0 = ObjectType.getInstance(" p!kgb-");
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertNotNull(objectType0);
      
      LocalVariables localVariables2 = (LocalVariables)localVariables0.clone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertEquals(550, localVariables0.maxLocals());
      assertEquals(550, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotNull(localVariables2);
      
      OperandStack operandStack0 = new OperandStack(1206, objectType0);
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1206, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertEquals(550, localVariables0.maxLocals());
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1206, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertEquals(550, localVariables0.maxLocals());
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1206, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      
      RET rET0 = new RET(481);
      assertEquals(4, rET0.getLength());
      assertEquals("ret", rET0.getName());
      assertEquals(481, rET0.getIndex());
      assertEquals((short)169, rET0.getOpcode());
      assertNotNull(rET0);
      
      RET rET1 = new RET(481);
      assertTrue(rET1.equals((Object)rET0));
      assertEquals(4, rET1.getLength());
      assertEquals(481, rET1.getIndex());
      assertEquals((short)169, rET1.getOpcode());
      assertEquals("ret", rET1.getName());
      assertNotNull(rET1);
      
      String string0 = "DHboAe";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("DHboAe");
      assertNotNull(mockFileOutputStream0);
      
      IASTORE iASTORE0 = new IASTORE();
      assertEquals((short)79, iASTORE0.getOpcode());
      assertEquals(1, iASTORE0.getLength());
      assertEquals("iastore", iASTORE0.getName());
      assertNotNull(iASTORE0);
      
      IASTORE iASTORE1 = new IASTORE();
      assertTrue(iASTORE1.equals((Object)iASTORE0));
      assertEquals((short)79, iASTORE1.getOpcode());
      assertEquals(1, iASTORE1.getLength());
      assertEquals("iastore", iASTORE1.getName());
      assertNotNull(iASTORE1);
      
      String string1 = iASTORE1.toString();
      assertTrue(iASTORE1.equals((Object)iASTORE0));
      assertFalse(string1.equals((Object)string0));
      assertEquals((short)79, iASTORE1.getOpcode());
      assertEquals(1, iASTORE1.getLength());
      assertEquals("iastore", iASTORE1.getName());
      assertNotSame(iASTORE1, iASTORE0);
      assertEquals("iastore[79](1)", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIASTORE(iASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IASTORE constraint violated: The value at the stack top is not of type 'int', but of type ' p!kgb-'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      LocalVariables localVariables0 = new LocalVariables(548);
      assertEquals(548, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(548, localVariables0.maxLocals());
      assertEquals(548, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      ObjectType objectType0 = new ObjectType("D$M%");
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(548, objectType0);
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals(548, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables1, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(548, localVariables0.maxLocals());
      assertEquals(548, localVariables1.maxLocals());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals(548, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(548, localVariables0.maxLocals());
      assertEquals(548, localVariables1.maxLocals());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals(548, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType(1731);
      assertEquals(1731, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertNotNull(constantMethodType0);
      
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      assertTrue(constantMethodType1.equals((Object)constantMethodType0));
      assertEquals(1731, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(1731, constantMethodType1.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType1.getTag());
      assertNotNull(constantMethodType1);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      constantPool0.setConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      
      IINC iINC0 = new IINC(3, 481);
      assertEquals(3, iINC0.getIndex());
      assertEquals((short) (-1), iINC0.getCanonicalTag());
      assertEquals(6, iINC0.getLength());
      assertEquals("iinc", iINC0.getName());
      assertEquals(481, iINC0.getIncrement());
      assertEquals((short)132, iINC0.getOpcode());
      assertNotNull(iINC0);
      
      String string0 = iINC0.toString(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(3, iINC0.getIndex());
      assertEquals((short) (-1), iINC0.getCanonicalTag());
      assertEquals(6, iINC0.getLength());
      assertEquals("iinc", iINC0.getName());
      assertEquals(481, iINC0.getIncrement());
      assertEquals((short)132, iINC0.getOpcode());
      assertEquals("iinc 3 481", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIINC(iINC0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IINC constraint violated: The 'index' is not of type int but of type <unknown object>.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      int int0 = 2862;
      LocalVariables localVariables0 = new LocalVariables(2862);
      assertEquals(2862, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertEquals("<init>", string0);
      assertNotNull(string0);
      
      localVariables0.merge(localVariables0);
      assertEquals(2862, localVariables0.maxLocals());
      
      ObjectType objectType0 = new ObjectType("<init>");
      assertEquals(1, objectType0.getSize());
      assertEquals("L<init>;", objectType0.getSignature());
      assertEquals("<init>", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(2862, objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals("L<init>;", objectType0.getSignature());
      assertEquals("<init>", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(2862, operandStack0.maxStack());
      assertNotNull(operandStack0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(2862, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      operandStack0.push(objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals("L<init>;", objectType0.getSignature());
      assertEquals("<init>", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.size());
      assertEquals(2862, operandStack0.maxStack());
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("L<init>;", objectType0.getSignature());
      assertEquals("<init>", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.size());
      assertEquals(2862, operandStack0.maxStack());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("L<init>;", objectType0.getSignature());
      assertEquals("<init>", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.size());
      assertEquals(2862, operandStack0.maxStack());
      assertNotSame(localVariables0, localVariables1);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP2_X2((DUP2_X2) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(2862);
      assertEquals(2862, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = new ObjectType("D$M%");
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(8192, objectType0);
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.size());
      assertEquals(8192, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      String string0 = Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("()LD$M%;", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      operandStack0.push(objectType0);
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(8192, operandStack0.maxStack());
      assertEquals(2, operandStack0.size());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(8192, operandStack0.maxStack());
      assertEquals(2, operandStack0.size());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(8192, operandStack0.maxStack());
      assertEquals(2, operandStack0.size());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      
      INVOKESTATIC iNVOKESTATIC0 = new INVOKESTATIC(8192);
      assertEquals(8192, iNVOKESTATIC0.getIndex());
      assertEquals(3, iNVOKESTATIC0.getLength());
      assertEquals("invokestatic", iNVOKESTATIC0.getName());
      assertEquals((short)184, iNVOKESTATIC0.getOpcode());
      assertNotNull(iNVOKESTATIC0);
      
      IXOR iXOR0 = new IXOR();
      assertEquals(1, iXOR0.getLength());
      assertEquals((short)130, iXOR0.getOpcode());
      assertEquals("ixor", iXOR0.getName());
      assertNotNull(iXOR0);
      
      ISUB iSUB0 = new ISUB();
      assertEquals((short)100, iSUB0.getOpcode());
      assertEquals(1, iSUB0.getLength());
      assertEquals("isub", iSUB0.getName());
      assertNotNull(iSUB0);
      
      ISUB iSUB1 = new ISUB();
      assertTrue(iSUB1.equals((Object)iSUB0));
      assertEquals("isub", iSUB1.getName());
      assertEquals(1, iSUB1.getLength());
      assertEquals((short)100, iSUB1.getOpcode());
      assertNotNull(iSUB1);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitISUB(iSUB1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ISUB constraint violated: The value at the stack top is not of type 'int', but of type 'D$M%'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(2862);
      assertEquals(2862, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = new ObjectType(" pF!kgb-");
      assertEquals(1, objectType0.getSize());
      assertEquals(" pF!kgb-", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L pF!kgb-;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(392, objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals(" pF!kgb-", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L pF!kgb-;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(392, operandStack0.maxStack());
      assertNotNull(operandStack0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals(" pF!kgb-", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L pF!kgb-;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(392, operandStack0.maxStack());
      assertNotNull(frame0);
      
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals(" pF!kgb-", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L pF!kgb-;", objectType0.getSignature());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE ' pF!kgb-'>", uninitializedObjectType0.getSignature());
      assertEquals(1, uninitializedObjectType0.getSize());
      assertNotNull(uninitializedObjectType0);
      
      Frame.setThis(uninitializedObjectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals(" pF!kgb-", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L pF!kgb-;", objectType0.getSignature());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE ' pF!kgb-'>", uninitializedObjectType0.getSignature());
      assertEquals(1, uninitializedObjectType0.getSize());
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals(" pF!kgb-", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L pF!kgb-;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(392, operandStack0.maxStack());
      
      ASTORE aSTORE0 = new ASTORE(2862);
      assertEquals("astore", aSTORE0.getName());
      assertEquals(4, aSTORE0.getLength());
      assertEquals((short)58, aSTORE0.getOpcode());
      assertEquals((short)58, aSTORE0.getCanonicalTag());
      assertEquals(2862, aSTORE0.getIndex());
      assertNotNull(aSTORE0);
      
      instConstraintVisitor0.visitASTORE(aSTORE0);
      assertEquals("astore", aSTORE0.getName());
      assertEquals(4, aSTORE0.getLength());
      assertEquals((short)58, aSTORE0.getOpcode());
      assertEquals((short)58, aSTORE0.getCanonicalTag());
      assertEquals(2862, aSTORE0.getIndex());
      
      InstructionHandle instructionHandle0 = null;
      IFNONNULL iFNONNULL0 = new IFNONNULL((InstructionHandle) null);
      assertEquals((short)199, iFNONNULL0.getOpcode());
      assertEquals("ifnonnull", iFNONNULL0.getName());
      assertEquals(0, iFNONNULL0.getIndex());
      assertEquals(3, iFNONNULL0.getLength());
      assertNotNull(iFNONNULL0);
      
      instConstraintVisitor0.visitIFNONNULL(iFNONNULL0);
      assertEquals((short)199, iFNONNULL0.getOpcode());
      assertEquals("ifnonnull", iFNONNULL0.getName());
      assertEquals(0, iFNONNULL0.getIndex());
      assertEquals(3, iFNONNULL0.getLength());
      
      IINC iINC0 = new IINC(2862, 1895);
      assertEquals(6, iINC0.getLength());
      assertEquals("iinc", iINC0.getName());
      assertEquals(1895, iINC0.getIncrement());
      assertEquals((short)132, iINC0.getOpcode());
      assertEquals((short) (-1), iINC0.getCanonicalTag());
      assertEquals(2862, iINC0.getIndex());
      assertNotNull(iINC0);
      
      FASTORE fASTORE0 = new FASTORE();
      assertEquals("fastore", fASTORE0.getName());
      assertEquals((short)81, fASTORE0.getOpcode());
      assertEquals(1, fASTORE0.getLength());
      assertNotNull(fASTORE0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFASTORE(fASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FASTORE constraint violated: The value at the stack top is not of type 'float', but of type ' pF!kgb-'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(550);
      assertEquals(550, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(550, localVariables0.maxLocals());
      assertEquals(550, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      ObjectType objectType0 = ObjectType.getInstance(" p!kgb-");
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      LocalVariables localVariables2 = new LocalVariables(550);
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertEquals(550, localVariables2.maxLocals());
      assertNotNull(localVariables2);
      
      OperandStack operandStack0 = new OperandStack(1206, objectType0);
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertEquals(1206, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      OperandStack operandStack1 = (OperandStack)operandStack0.clone();
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertEquals(1206, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.size());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(1206, operandStack1.maxStack());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertNotNull(operandStack1);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertEquals(550, localVariables0.maxLocals());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertEquals(1206, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertEquals(550, localVariables0.maxLocals());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertEquals(1206, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(operandStack0, operandStack1);
      
      OperandStack operandStack2 = new OperandStack(470, objectType0);
      assertTrue(operandStack2.equals((Object)operandStack0));
      assertTrue(operandStack2.equals((Object)operandStack1));
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertFalse(operandStack2.isEmpty());
      assertEquals(1, operandStack2.slotsUsed());
      assertEquals(470, operandStack2.maxStack());
      assertEquals(1, operandStack2.size());
      assertNotNull(operandStack2);
      
      RET rET0 = new RET(470);
      assertEquals(470, rET0.getIndex());
      assertEquals((short)169, rET0.getOpcode());
      assertEquals(4, rET0.getLength());
      assertEquals("ret", rET0.getName());
      assertNotNull(rET0);
      
      RET rET1 = new RET(470);
      assertTrue(rET1.equals((Object)rET0));
      assertEquals(470, rET1.getIndex());
      assertEquals((short)169, rET1.getOpcode());
      assertEquals(4, rET1.getLength());
      assertEquals("ret", rET1.getName());
      assertNotNull(rET1);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" p!kgb-");
      assertNotNull(mockFileOutputStream0);
      
      RET rET2 = new RET(550);
      assertFalse(rET2.equals((Object)rET0));
      assertFalse(rET2.equals((Object)rET1));
      assertEquals(4, rET2.getLength());
      assertEquals("ret", rET2.getName());
      assertEquals(550, rET2.getIndex());
      assertEquals((short)169, rET2.getOpcode());
      assertNotNull(rET2);
      
      IFNULL iFNULL0 = new IFNULL((InstructionHandle) null);
      assertEquals(3, iFNULL0.getLength());
      assertEquals((short)198, iFNULL0.getOpcode());
      assertEquals(0, iFNULL0.getIndex());
      assertEquals("ifnull", iFNULL0.getName());
      assertNotNull(iFNULL0);
      
      IF_ICMPGT iF_ICMPGT0 = new IF_ICMPGT((InstructionHandle) null);
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals(3, iF_ICMPGT0.getLength());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertNotNull(iF_ICMPGT0);
      
      iF_ICMPGT0.setTarget((InstructionHandle) null);
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals(3, iF_ICMPGT0.getLength());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPGT(iF_ICMPGT0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IF_ICMPGT constraint violated: The value at the stack top is not of type 'int', but of type ' p!kgb-'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(2862);
      assertEquals(2862, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(2862, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      ObjectType objectType0 = new ObjectType("D$M%");
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(8192, objectType0);
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.size());
      assertEquals(8192, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.size());
      assertEquals(8192, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(frame0);
      
      String string0 = objectType0.toString();
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("D$M%", string0);
      assertNotNull(string0);
      
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      assertEquals(1, uninitializedObjectType0.getSize());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE 'D$M%'>", uninitializedObjectType0.getSignature());
      assertNotNull(uninitializedObjectType0);
      
      String string1 = frame0.toString();
      assertFalse(string1.equals((Object)string0));
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.size());
      assertEquals(8192, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(localVariables0, localVariables1);
      assertNotNull(string1);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.size());
      assertEquals(8192, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(localVariables0, localVariables1);
      
      RET rET0 = new RET(8192);
      assertEquals(4, rET0.getLength());
      assertEquals((short)169, rET0.getOpcode());
      assertEquals("ret", rET0.getName());
      assertEquals(8192, rET0.getIndex());
      assertNotNull(rET0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("D$M%");
      assertNotNull(mockFileOutputStream0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "|Vj@vo>s=2");
      assertFalse(boolean0);
      
      ISTORE iSTORE0 = new ISTORE(2862);
      assertEquals((short)54, iSTORE0.getCanonicalTag());
      assertEquals(2862, iSTORE0.getIndex());
      assertEquals((short)54, iSTORE0.getOpcode());
      assertEquals(4, iSTORE0.getLength());
      assertEquals("istore", iSTORE0.getName());
      assertNotNull(iSTORE0);
      
      ATHROW aTHROW0 = new ATHROW();
      assertEquals((short)191, aTHROW0.getOpcode());
      assertEquals("athrow", aTHROW0.getName());
      assertEquals(1, aTHROW0.getLength());
      assertNotNull(aTHROW0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitATHROW(aTHROW0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: Missing class: java.lang.ClassNotFoundException: Exception while looking for class D$M%: org.evosuite.runtime.mock.java.lang.MockThrowable: Couldn't find: D$M%.class
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(2862);
      assertEquals(2862, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/g Dp)!kgb-");
      boolean boolean0 = FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      assertFalse(boolean0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(2862, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string0);
      assertNotNull(string0);
      
      ObjectType objectType0 = ObjectType.getInstance("D$M%");
      assertEquals((byte)14, objectType0.getType());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(2862, objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2862, operandStack0.maxStack());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2862, operandStack0.maxStack());
      assertNotNull(frame0);
      
      Frame frame1 = new Frame(2862, 2862);
      assertFalse(frame1.equals((Object)frame0));
      assertNotNull(frame1);
      
      Frame frame2 = new Frame(localVariables1, operandStack0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertFalse(frame2.equals((Object)frame1));
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(2862, localVariables1.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2862, operandStack0.maxStack());
      assertNotNull(frame2);
      
      instConstraintVisitor0.setFrame(frame0);
      assertFalse(frame0.equals((Object)frame1));
      assertTrue(frame0.equals((Object)frame2));
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2862, operandStack0.maxStack());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(frame0, frame1);
      assertNotSame(frame0, frame2);
      
      FCMPG fCMPG0 = new FCMPG();
      assertEquals((short)150, fCMPG0.getOpcode());
      assertEquals("fcmpg", fCMPG0.getName());
      assertEquals(1, fCMPG0.getLength());
      assertNotNull(fCMPG0);
      
      FCMPG fCMPG1 = new FCMPG();
      assertTrue(fCMPG1.equals((Object)fCMPG0));
      assertEquals("fcmpg", fCMPG1.getName());
      assertEquals((short)150, fCMPG1.getOpcode());
      assertEquals(1, fCMPG1.getLength());
      assertNotNull(fCMPG1);
      
      I2D i2D0 = new I2D();
      assertEquals((short)135, i2D0.getOpcode());
      assertEquals(1, i2D0.getLength());
      assertEquals("i2d", i2D0.getName());
      assertNotNull(i2D0);
      
      DSUB dSUB0 = new DSUB();
      assertEquals("dsub", dSUB0.getName());
      assertEquals((short)103, dSUB0.getOpcode());
      assertEquals(1, dSUB0.getLength());
      assertNotNull(dSUB0);
      
      DSUB dSUB1 = new DSUB();
      assertTrue(dSUB1.equals((Object)dSUB0));
      assertEquals(1, dSUB1.getLength());
      assertEquals((short)103, dSUB1.getOpcode());
      assertEquals("dsub", dSUB1.getName());
      assertNotNull(dSUB1);
      
      String string1 = dSUB0.toString((ConstantPool) null);
      assertFalse(string1.equals((Object)string0));
      assertTrue(dSUB0.equals((Object)dSUB1));
      assertEquals("dsub", dSUB0.getName());
      assertEquals((short)103, dSUB0.getOpcode());
      assertEquals(1, dSUB0.getLength());
      assertNotSame(dSUB0, dSUB1);
      assertEquals("dsub", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDSUB(dSUB0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DSUB constraint violated: The value at the stack top is not of type 'double', but of type 'D$M%'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(2862);
      assertEquals(2862, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string0);
      assertNotNull(string0);
      
      ObjectType objectType0 = ObjectType.getInstance("<clinit>");
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L<clinit>;", objectType0.getSignature());
      assertEquals("<clinit>", objectType0.getClassName());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(2862);
      assertEquals(2862, operandStack0.maxStack());
      assertEquals(0, operandStack0.size());
      assertTrue(operandStack0.isEmpty());
      assertEquals(0, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      operandStack0.push(objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L<clinit>;", objectType0.getSignature());
      assertEquals("<clinit>", objectType0.getClassName());
      assertEquals(2862, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(2862, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertNotNull(frame0);
      
      Frame frame1 = new Frame(2862, 2862);
      assertFalse(frame1.equals((Object)frame0));
      assertNotNull(frame1);
      
      instConstraintVisitor0.setFrame(frame0);
      assertFalse(frame0.equals((Object)frame1));
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(2862, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertNotSame(frame0, frame1);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("<clinit>");
      assertNotNull(mockFileOutputStream0);
      
      RET rET0 = new RET(2862);
      assertEquals("ret", rET0.getName());
      assertEquals(2862, rET0.getIndex());
      assertEquals((short)169, rET0.getOpcode());
      assertEquals(4, rET0.getLength());
      assertNotNull(rET0);
      
      POP pOP0 = new POP();
      assertEquals("pop", pOP0.getName());
      assertEquals((short)87, pOP0.getOpcode());
      assertEquals(1, pOP0.getLength());
      assertNotNull(pOP0);
      
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(2862, 2862);
      assertEquals(2862, constantMethodHandle0.getReferenceIndex());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals(2862, constantMethodHandle0.getReferenceKind());
      assertNotNull(constantMethodHandle0);
      
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(2862, 2862);
      assertTrue(constantMethodHandle1.equals((Object)constantMethodHandle0));
      assertEquals(2862, constantMethodHandle1.getReferenceIndex());
      assertEquals(2862, constantMethodHandle1.getReferenceKind());
      assertEquals((byte)15, constantMethodHandle1.getTag());
      assertNotNull(constantMethodHandle1);
      
      INSTANCEOF iNSTANCEOF0 = new INSTANCEOF(550);
      assertEquals(550, iNSTANCEOF0.getIndex());
      assertEquals("instanceof", iNSTANCEOF0.getName());
      assertEquals((short)193, iNSTANCEOF0.getOpcode());
      assertEquals(3, iNSTANCEOF0.getLength());
      assertNotNull(iNSTANCEOF0);
      
      L2F l2F0 = new L2F();
      assertEquals((short)137, l2F0.getOpcode());
      assertEquals(1, l2F0.getLength());
      assertEquals("l2f", l2F0.getName());
      assertNotNull(l2F0);
      
      LOR lOR0 = new LOR();
      assertEquals((short)129, lOR0.getOpcode());
      assertEquals(1, lOR0.getLength());
      assertEquals("lor", lOR0.getName());
      assertNotNull(lOR0);
      
      GETFIELD gETFIELD0 = new GETFIELD(550);
      assertEquals(550, gETFIELD0.getIndex());
      assertEquals((short)180, gETFIELD0.getOpcode());
      assertEquals("getfield", gETFIELD0.getName());
      assertEquals(3, gETFIELD0.getLength());
      assertNotNull(gETFIELD0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitGETFIELD(gETFIELD0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(2862);
      assertEquals(2862, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(2862, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      ObjectType objectType0 = ObjectType.getInstance("D$M%");
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(2862, objectType0);
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertEquals(2862, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertEquals(2862, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(frame0);
      
      Frame frame1 = frame0.getClone();
      assertTrue(frame1.equals((Object)frame0));
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertEquals(2862, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      assertNotNull(frame1);
      
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      assertEquals("monitorexit", mONITOREXIT0.getName());
      assertEquals(1, mONITOREXIT0.getLength());
      assertEquals((short)195, mONITOREXIT0.getOpcode());
      assertNotNull(mONITOREXIT0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      RET rET0 = new RET(2862);
      assertEquals("ret", rET0.getName());
      assertEquals((short)169, rET0.getOpcode());
      assertEquals(4, rET0.getLength());
      assertEquals(2862, rET0.getIndex());
      assertNotNull(rET0);
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(frame0.equals((Object)frame1));
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertEquals(2862, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(frame0, frame1);
      
      RET rET1 = new RET(2862);
      assertTrue(rET1.equals((Object)rET0));
      assertEquals(2862, rET1.getIndex());
      assertEquals(4, rET1.getLength());
      assertEquals("ret", rET1.getName());
      assertEquals((short)169, rET1.getOpcode());
      assertNotNull(rET1);
      
      POP pOP0 = new POP();
      assertEquals((short)87, pOP0.getOpcode());
      assertEquals("pop", pOP0.getName());
      assertEquals(1, pOP0.getLength());
      assertNotNull(pOP0);
      
      SWAP sWAP0 = new SWAP();
      assertEquals((short)95, sWAP0.getOpcode());
      assertEquals(1, sWAP0.getLength());
      assertEquals("swap", sWAP0.getName());
      assertNotNull(sWAP0);
      
      FLOAD fLOAD0 = new FLOAD(551);
      assertEquals((short)23, fLOAD0.getOpcode());
      assertEquals("fload", fLOAD0.getName());
      assertEquals((short)23, fLOAD0.getCanonicalTag());
      assertEquals(551, fLOAD0.getIndex());
      assertEquals(4, fLOAD0.getLength());
      assertNotNull(fLOAD0);
      
      instConstraintVisitor0.visitFLOAD(fLOAD0);
      assertEquals((short)23, fLOAD0.getOpcode());
      assertEquals("fload", fLOAD0.getName());
      assertEquals((short)23, fLOAD0.getCanonicalTag());
      assertEquals(551, fLOAD0.getIndex());
      assertEquals(4, fLOAD0.getLength());
      
      FADD fADD0 = new FADD();
      assertEquals((short)98, fADD0.getOpcode());
      assertEquals(1, fADD0.getLength());
      assertEquals("fadd", fADD0.getName());
      assertNotNull(fADD0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFADD(fADD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FADD constraint violated: The value at the stack top is not of type 'float', but of type 'D$M%'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      LocalVariables localVariables0 = new LocalVariables(548);
      assertEquals(548, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      String string0 = "Y";
      ObjectType objectType0 = ObjectType.getInstance("Y");
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("Y", objectType0.getClassName());
      assertEquals("LY;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(548);
      assertEquals(548, operandStack0.maxStack());
      assertEquals(0, operandStack0.size());
      assertEquals(0, operandStack0.slotsUsed());
      assertTrue(operandStack0.isEmpty());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(548, 548);
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      int int0 = 2284;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(2284);
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(2284, constantMethodType0.getDescriptorIndex());
      assertNotNull(constantMethodType0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      constantPool0.setConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      
      IINC iINC0 = new IINC(2284, 2284);
      assertEquals(2284, iINC0.getIncrement());
      assertEquals(2284, iINC0.getIndex());
      assertEquals((short)132, iINC0.getOpcode());
      assertEquals((short) (-1), iINC0.getCanonicalTag());
      assertEquals("iinc", iINC0.getName());
      assertEquals(6, iINC0.getLength());
      assertNotNull(iINC0);
      
      String string1 = constantPool0.toString();
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, constantPool0.getLength());
      assertEquals("", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIINC(iINC0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IINC constraint violated: The 'index' is not a valid index into the local variable array.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(2862);
      assertEquals(2862, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = new LocalVariables(2862);
      assertEquals(2862, localVariables1.maxLocals());
      assertNotNull(localVariables1);
      
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string0);
      assertNotNull(string0);
      
      String string1 = localVariables0.toString();
      assertFalse(string1.equals((Object)string0));
      assertEquals(2862, localVariables0.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotNull(string1);
      
      ObjectType objectType0 = ObjectType.getInstance("<clinit>");
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L<clinit>;", objectType0.getSignature());
      assertEquals("<clinit>", objectType0.getClassName());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(2862, objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L<clinit>;", objectType0.getSignature());
      assertEquals("<clinit>", objectType0.getClassName());
      assertEquals(2862, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L<clinit>;", objectType0.getSignature());
      assertEquals("<clinit>", objectType0.getClassName());
      assertEquals(2862, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotNull(frame0);
      
      Frame frame1 = new Frame(localVariables0, operandStack0);
      assertTrue(frame1.equals((Object)frame0));
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L<clinit>;", objectType0.getSignature());
      assertEquals("<clinit>", objectType0.getClassName());
      assertEquals(2862, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotNull(frame1);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(frame0.equals((Object)frame1));
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L<clinit>;", objectType0.getSignature());
      assertEquals("<clinit>", objectType0.getClassName());
      assertEquals(2862, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(frame0, frame1);
      
      RET rET0 = new RET(2862);
      assertEquals(4, rET0.getLength());
      assertEquals((short)169, rET0.getOpcode());
      assertEquals(2862, rET0.getIndex());
      assertEquals("ret", rET0.getName());
      assertNotNull(rET0);
      
      LOR lOR0 = new LOR();
      assertEquals("lor", lOR0.getName());
      assertEquals(1, lOR0.getLength());
      assertEquals((short)129, lOR0.getOpcode());
      assertNotNull(lOR0);
      
      INSTANCEOF iNSTANCEOF0 = new INSTANCEOF(2862);
      assertEquals((short)193, iNSTANCEOF0.getOpcode());
      assertEquals("instanceof", iNSTANCEOF0.getName());
      assertEquals(3, iNSTANCEOF0.getLength());
      assertEquals(2862, iNSTANCEOF0.getIndex());
      assertNotNull(iNSTANCEOF0);
      
      D2F d2F0 = new D2F();
      assertEquals("d2f", d2F0.getName());
      assertEquals(1, d2F0.getLength());
      assertEquals((short)144, d2F0.getOpcode());
      assertNotNull(d2F0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitD2F(d2F0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `clinit>;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(2862);
      assertEquals(2862, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = new ObjectType(" p!kgb-");
      assertEquals(1, objectType0.getSize());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(276, objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(276, operandStack0.maxStack());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(276, operandStack0.maxStack());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(276, operandStack0.maxStack());
      
      Type type0 = operandStack0.pop((-1));
      assertEquals(1, objectType0.getSize());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(276, operandStack0.maxStack());
      assertNull(type0);
      
      RET rET0 = new RET(276);
      assertEquals((short)169, rET0.getOpcode());
      assertEquals("ret", rET0.getName());
      assertEquals(276, rET0.getIndex());
      assertEquals(4, rET0.getLength());
      assertNotNull(rET0);
      
      String string0 = frame0.toString();
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(276, operandStack0.maxStack());
      assertNotNull(string0);
      
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(1307, 2862);
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals(2862, constantMethodHandle0.getReferenceIndex());
      assertEquals(1307, constantMethodHandle0.getReferenceKind());
      assertNotNull(constantMethodHandle0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, string0);
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(276, operandStack0.maxStack());
      assertFalse(boolean0);
      
      INSTANCEOF iNSTANCEOF0 = new INSTANCEOF(550);
      assertEquals(550, iNSTANCEOF0.getIndex());
      assertEquals("instanceof", iNSTANCEOF0.getName());
      assertEquals((short)193, iNSTANCEOF0.getOpcode());
      assertEquals(3, iNSTANCEOF0.getLength());
      assertNotNull(iNSTANCEOF0);
      
      L2F l2F0 = new L2F();
      assertEquals("l2f", l2F0.getName());
      assertEquals(1, l2F0.getLength());
      assertEquals((short)137, l2F0.getOpcode());
      assertNotNull(l2F0);
      
      LOR lOR0 = new LOR();
      assertEquals(1, lOR0.getLength());
      assertEquals("lor", lOR0.getName());
      assertEquals((short)129, lOR0.getOpcode());
      assertNotNull(lOR0);
      
      GETFIELD gETFIELD0 = new GETFIELD(1331);
      assertEquals((short)180, gETFIELD0.getOpcode());
      assertEquals(3, gETFIELD0.getLength());
      assertEquals("getfield", gETFIELD0.getName());
      assertEquals(1331, gETFIELD0.getIndex());
      assertNotNull(gETFIELD0);
      
      SASTORE sASTORE0 = new SASTORE();
      assertEquals("sastore", sASTORE0.getName());
      assertEquals(1, sASTORE0.getLength());
      assertEquals((short)86, sASTORE0.getOpcode());
      assertNotNull(sASTORE0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitSASTORE(sASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction SASTORE constraint violated: The value at the stack top is not of type 'int', but of type ' p!kgb-'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      LocalVariables localVariables0 = new LocalVariables(550);
      assertEquals(550, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(550, localVariables0.maxLocals());
      assertEquals(550, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string0);
      assertNotNull(string0);
      
      localVariables1.merge(localVariables0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(550, localVariables0.maxLocals());
      assertEquals(550, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      ObjectType objectType0 = ObjectType.getInstance("<clinit>");
      assertEquals("<clinit>", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("L<clinit>;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      localVariables1.merge(localVariables0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(550, localVariables0.maxLocals());
      assertEquals(550, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      OperandStack operandStack0 = new OperandStack(27, objectType0);
      assertEquals("<clinit>", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("L<clinit>;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(27, operandStack0.maxStack());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(27, 550);
      assertNotNull(frame0);
      
      Frame frame1 = new Frame(localVariables1, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertFalse(frame1.equals((Object)frame0));
      assertEquals(550, localVariables0.maxLocals());
      assertEquals(550, localVariables1.maxLocals());
      assertEquals("<clinit>", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("L<clinit>;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(27, operandStack0.maxStack());
      assertNotNull(frame1);
      
      Frame frame2 = new Frame(localVariables0, operandStack0);
      assertFalse(frame2.equals((Object)frame0));
      assertTrue(frame2.equals((Object)frame1));
      assertEquals(550, localVariables0.maxLocals());
      assertEquals("<clinit>", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("L<clinit>;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(27, operandStack0.maxStack());
      assertNotNull(frame2);
      
      UninitializedObjectType uninitializedObjectType0 = Frame.getThis();
      assertNull(uninitializedObjectType0);
      
      Frame.setThis((UninitializedObjectType) null);
      instConstraintVisitor0.setFrame(frame1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(frame1.equals((Object)frame2));
      assertFalse(frame1.equals((Object)frame0));
      assertEquals(550, localVariables0.maxLocals());
      assertEquals(550, localVariables1.maxLocals());
      assertEquals("<clinit>", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("L<clinit>;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(27, operandStack0.maxStack());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(frame1, frame0);
      assertNotSame(frame1, frame2);
      
      RET rET0 = new RET(2);
      assertEquals(2, rET0.getLength());
      assertEquals(2, rET0.getIndex());
      assertEquals((short)169, rET0.getOpcode());
      assertEquals("ret", rET0.getName());
      assertNotNull(rET0);
      
      IFNULL iFNULL0 = new IFNULL((InstructionHandle) null);
      assertEquals((short)198, iFNULL0.getOpcode());
      assertEquals(0, iFNULL0.getIndex());
      assertEquals(3, iFNULL0.getLength());
      assertEquals("ifnull", iFNULL0.getName());
      assertNotNull(iFNULL0);
      
      DCMPL dCMPL0 = new DCMPL();
      assertEquals((short)151, dCMPL0.getOpcode());
      assertEquals(1, dCMPL0.getLength());
      assertEquals("dcmpl", dCMPL0.getName());
      assertNotNull(dCMPL0);
      
      IFGE iFGE0 = new IFGE((InstructionHandle) null);
      assertEquals((short)156, iFGE0.getOpcode());
      assertEquals("ifge", iFGE0.getName());
      assertEquals(0, iFGE0.getIndex());
      assertEquals(3, iFGE0.getLength());
      assertNotNull(iFGE0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFGE(iFGE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `clinit>;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(550);
      assertEquals(550, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(550, localVariables0.maxLocals());
      assertEquals(550, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      ObjectType objectType0 = new ObjectType("D$M%");
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(550, objectType0);
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(550, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables1, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(550, localVariables0.maxLocals());
      assertEquals(550, localVariables1.maxLocals());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(550, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(550, localVariables0.maxLocals());
      assertEquals(550, localVariables1.maxLocals());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(550, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      IDIV iDIV0 = new IDIV();
      assertEquals("idiv", iDIV0.getName());
      assertEquals((short)108, iDIV0.getOpcode());
      assertEquals(1, iDIV0.getLength());
      assertNotNull(iDIV0);
      
      ISHL iSHL0 = new ISHL();
      assertEquals((short)120, iSHL0.getOpcode());
      assertEquals(1, iSHL0.getLength());
      assertEquals("ishl", iSHL0.getName());
      assertNotNull(iSHL0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitISHL(iSHL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ISHL constraint violated: The value at the stack top is not of type 'int', but of type 'D$M%'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(2862);
      assertEquals(2862, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = ObjectType.getInstance(" p!kgb-");
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(276, objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals(276, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(operandStack0);
      
      operandStack0.initializeObject((UninitializedObjectType) null);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals(276, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals(276, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals(276, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      
      Type type0 = operandStack0.pop((-1));
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals(276, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNull(type0);
      
      RET rET0 = new RET(27);
      assertEquals((short)169, rET0.getOpcode());
      assertEquals("ret", rET0.getName());
      assertEquals(2, rET0.getLength());
      assertEquals(27, rET0.getIndex());
      assertNotNull(rET0);
      
      ObjectType objectType1 = new ObjectType("i4oc4.U-1");
      assertFalse(objectType1.equals((Object)objectType0));
      assertEquals("Li4oc4/U-1;", objectType1.getSignature());
      assertEquals((byte)14, objectType1.getType());
      assertEquals(1, objectType1.getSize());
      assertEquals("i4oc4.U-1", objectType1.getClassName());
      assertNotNull(objectType1);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      OperandStack operandStack1 = new OperandStack(2443, type0.OBJECT);
      assertFalse(objectType0.equals((Object)objectType1));
      assertFalse(operandStack1.equals((Object)operandStack0));
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals(276, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.size());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(2443, operandStack1.maxStack());
      assertNotNull(operandStack1);
      
      Frame.setThis((UninitializedObjectType) null);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      assertFalse(objectType0.equals((Object)objectType1));
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals(276, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(frame1);
      
      Frame frame2 = frame1.getClone();
      assertFalse(objectType0.equals((Object)objectType1));
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertTrue(frame2.equals((Object)frame1));
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals(276, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotSame(objectType0, objectType1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(frame1, frame2);
      assertNotSame(frame1, frame0);
      assertNotSame(frame2, frame0);
      assertNotSame(frame2, frame1);
      assertNotNull(frame2);
      
      POP pOP0 = new POP();
      assertEquals("pop", pOP0.getName());
      assertEquals(1, pOP0.getLength());
      assertEquals((short)87, pOP0.getOpcode());
      assertNotNull(pOP0);
      
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      assertEquals(1, mONITORENTER0.getLength());
      assertEquals((short)194, mONITORENTER0.getOpcode());
      assertEquals("monitorenter", mONITORENTER0.getName());
      assertNotNull(mONITORENTER0);
      
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      assertFalse(instConstraintVisitor1.equals((Object)instConstraintVisitor0));
      assertNotNull(instConstraintVisitor1);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPNE((IF_ICMPNE) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(2839);
      assertEquals(2839, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(2839, localVariables0.maxLocals());
      assertEquals(2839, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      ObjectType objectType0 = new ObjectType("F&(gE#jA;`Czt=$Ws");
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LF&(gE#jA;`Czt=$Ws;", objectType0.getSignature());
      assertEquals("F&(gE#jA;`Czt=$Ws", objectType0.getClassName());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(2839, objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LF&(gE#jA;`Czt=$Ws;", objectType0.getSignature());
      assertEquals("F&(gE#jA;`Czt=$Ws", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2839, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables1, operandStack0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(2839, localVariables0.maxLocals());
      assertEquals(2839, localVariables1.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LF&(gE#jA;`Czt=$Ws;", objectType0.getSignature());
      assertEquals("F&(gE#jA;`Czt=$Ws", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2839, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(2839, localVariables0.maxLocals());
      assertEquals(2839, localVariables1.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LF&(gE#jA;`Czt=$Ws;", objectType0.getSignature());
      assertEquals("F&(gE#jA;`Czt=$Ws", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2839, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      FREM fREM0 = new FREM();
      assertEquals("frem", fREM0.getName());
      assertEquals(1, fREM0.getLength());
      assertEquals((short)114, fREM0.getOpcode());
      assertNotNull(fREM0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFREM(fREM0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FREM constraint violated: The value at the stack top is not of type 'float', but of type 'F&(gE#jA'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(2862);
      assertEquals(2862, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(2862, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      ObjectType objectType0 = ObjectType.getInstance("rGJ'Dj-scz)Z");
      assertEquals("LrGJ'Dj-scz)Z;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("rGJ'Dj-scz)Z", objectType0.getClassName());
      assertNotNull(objectType0);
      
      LocalVariables localVariables2 = (LocalVariables)localVariables0.clone();
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(2862, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertNotNull(localVariables2);
      
      OperandStack operandStack0 = new OperandStack(8241, objectType0);
      assertEquals("LrGJ'Dj-scz)Z;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("rGJ'Dj-scz)Z", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(8241, operandStack0.maxStack());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals("LrGJ'Dj-scz)Z;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("rGJ'Dj-scz)Z", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(8241, operandStack0.maxStack());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals("LrGJ'Dj-scz)Z;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("rGJ'Dj-scz)Z", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(8241, operandStack0.maxStack());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      I2C i2C0 = new I2C();
      assertEquals(1, i2C0.getLength());
      assertEquals("i2c", i2C0.getName());
      assertEquals((short)146, i2C0.getOpcode());
      assertNotNull(i2C0);
      
      I2C i2C1 = new I2C();
      assertTrue(i2C1.equals((Object)i2C0));
      assertEquals(1, i2C1.getLength());
      assertEquals((short)146, i2C1.getOpcode());
      assertEquals("i2c", i2C1.getName());
      assertNotNull(i2C1);
      
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      assertFalse(constantPoolGen1.equals((Object)constantPoolGen0));
      assertEquals(1, constantPoolGen1.getSize());
      assertNotNull(constantPoolGen1);
      
      DNEG dNEG0 = new DNEG();
      assertEquals("dneg", dNEG0.getName());
      assertEquals(1, dNEG0.getLength());
      assertEquals((short)119, dNEG0.getOpcode());
      assertNotNull(dNEG0);
      
      NEWARRAY nEWARRAY0 = new NEWARRAY((byte)88);
      assertEquals(2, nEWARRAY0.getLength());
      assertEquals((byte)88, nEWARRAY0.getTypecode());
      assertEquals("newarray", nEWARRAY0.getName());
      assertEquals((short)188, nEWARRAY0.getOpcode());
      assertNotNull(nEWARRAY0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitNEWARRAY(nEWARRAY0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction NEWARRAY constraint violated: The value at the stack top is not of type 'int', but of type 'rGJ'Dj-scz)Z'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(497);
      assertEquals(497, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = ObjectType.getInstance("D%");
      assertEquals("D%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("LD%;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(497, objectType0);
      assertEquals("D%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("LD%;", objectType0.getSignature());
      assertEquals(497, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(497, localVariables0.maxLocals());
      assertEquals("D%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("LD%;", objectType0.getSignature());
      assertEquals(497, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertNotNull(frame0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      Object object0 = frame0.clone();
      assertTrue(object0.equals((Object)frame0));
      assertEquals(497, localVariables0.maxLocals());
      assertEquals("D%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("LD%;", objectType0.getSignature());
      assertEquals(497, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertNotSame(frame0, object0);
      assertNotSame(object0, frame0);
      assertNotNull(object0);
      
      UninitializedObjectType uninitializedObjectType0 = Frame.getThis();
      assertNull(uninitializedObjectType0);
      
      Frame.setThis((UninitializedObjectType) null);
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(frame0.equals((Object)object0));
      assertEquals(497, localVariables0.maxLocals());
      assertEquals("D%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("LD%;", objectType0.getSignature());
      assertEquals(497, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertNotSame(frame0, object0);
      
      LNEG lNEG0 = new LNEG();
      assertEquals(1, lNEG0.getLength());
      assertEquals("lneg", lNEG0.getName());
      assertEquals((short)117, lNEG0.getOpcode());
      assertNotNull(lNEG0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLNEG(lNEG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LNEG constraint violated: The value at the stack top is not of type 'long', but of type 'D%'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(550);
      assertEquals(550, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(550, localVariables0.maxLocals());
      assertEquals(550, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      ObjectType objectType0 = new ObjectType("D$M%");
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(550, objectType0);
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(550, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables1, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(550, localVariables0.maxLocals());
      assertEquals(550, localVariables1.maxLocals());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(550, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(550, localVariables0.maxLocals());
      assertEquals(550, localVariables1.maxLocals());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(550, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      IDIV iDIV0 = new IDIV();
      assertEquals((short)108, iDIV0.getOpcode());
      assertEquals("idiv", iDIV0.getName());
      assertEquals(1, iDIV0.getLength());
      assertNotNull(iDIV0);
      
      ISHL iSHL0 = new ISHL();
      assertEquals((short)120, iSHL0.getOpcode());
      assertEquals("ishl", iSHL0.getName());
      assertEquals(1, iSHL0.getLength());
      assertNotNull(iSHL0);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType(550);
      assertEquals(550, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertNotNull(constantMethodType0);
      
      FNEG fNEG0 = new FNEG();
      assertEquals((short)118, fNEG0.getOpcode());
      assertEquals(1, fNEG0.getLength());
      assertEquals("fneg", fNEG0.getName());
      assertNotNull(fNEG0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFNEG(fNEG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FNEG constraint violated: The value at the stack top is not of type 'float', but of type 'D$M%'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      int int0 = 2862;
      LocalVariables localVariables0 = new LocalVariables(2862);
      assertEquals(2862, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(2862, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      ObjectType objectType0 = new ObjectType("D$M%");
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(8192, objectType0);
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(8192, operandStack0.maxStack());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(8192, operandStack0.maxStack());
      assertNotNull(frame0);
      
      String string0 = objectType0.toString();
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("D$M%", string0);
      assertNotNull(string0);
      
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, uninitializedObjectType0.getSize());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE 'D$M%'>", uninitializedObjectType0.getSignature());
      assertNotNull(uninitializedObjectType0);
      
      String string1 = frame0.toString();
      assertFalse(string1.equals((Object)string0));
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(8192, operandStack0.maxStack());
      assertNotSame(localVariables0, localVariables1);
      assertNotNull(string1);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals("LD$M%;", objectType0.getSignature());
      assertEquals("D$M%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(8192, operandStack0.maxStack());
      assertNotSame(localVariables0, localVariables1);
      
      ARRAYLENGTH aRRAYLENGTH0 = new ARRAYLENGTH();
      assertEquals(1, aRRAYLENGTH0.getLength());
      assertEquals("arraylength", aRRAYLENGTH0.getName());
      assertEquals((short)190, aRRAYLENGTH0.getOpcode());
      assertNotNull(aRRAYLENGTH0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitARRAYLENGTH(aRRAYLENGTH0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ARRAYLENGTH constraint violated: The 'arrayref' does not refer to an array but is of type D$M%.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(2862);
      assertEquals(2862, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = (LocalVariables)localVariables0.clone();
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(2862, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      ObjectType objectType0 = new ObjectType("W3#$CqDkd(ItE");
      assertEquals(1, objectType0.getSize());
      assertEquals("LW3#$CqDkd(ItE;", objectType0.getSignature());
      assertEquals("W3#$CqDkd(ItE", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(276, objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals("LW3#$CqDkd(ItE;", objectType0.getSignature());
      assertEquals("W3#$CqDkd(ItE", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(276, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("LW3#$CqDkd(ItE;", objectType0.getSignature());
      assertEquals("W3#$CqDkd(ItE", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(276, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("LW3#$CqDkd(ItE;", objectType0.getSignature());
      assertEquals("W3#$CqDkd(ItE", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(276, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertNotSame(localVariables0, localVariables1);
      
      DADD dADD0 = new DADD();
      assertEquals("dadd", dADD0.getName());
      assertEquals((short)99, dADD0.getOpcode());
      assertEquals(1, dADD0.getLength());
      assertNotNull(dADD0);
      
      ARETURN aRETURN0 = new ARETURN();
      assertEquals(1, aRETURN0.getLength());
      assertEquals((short)176, aRETURN0.getOpcode());
      assertEquals("areturn", aRETURN0.getName());
      assertNotNull(aRETURN0);
      
      Frame frame1 = new Frame(localVariables0, operandStack0);
      assertTrue(frame1.equals((Object)frame0));
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("LW3#$CqDkd(ItE;", objectType0.getSignature());
      assertEquals("W3#$CqDkd(ItE", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(276, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertNotNull(frame1);
      
      LDIV lDIV0 = new LDIV();
      assertEquals(1, lDIV0.getLength());
      assertEquals("ldiv", lDIV0.getName());
      assertEquals((short)109, lDIV0.getOpcode());
      assertNotNull(lDIV0);
      
      boolean boolean0 = frame1.equals(lDIV0);
      assertTrue(frame1.equals((Object)frame0));
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("LW3#$CqDkd(ItE;", objectType0.getSignature());
      assertEquals("W3#$CqDkd(ItE", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(276, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, lDIV0.getLength());
      assertEquals("ldiv", lDIV0.getName());
      assertEquals((short)109, lDIV0.getOpcode());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(frame1, frame0);
      assertFalse(boolean0);
      
      OperandStack operandStack1 = (OperandStack)operandStack0.clone();
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertEquals(1, objectType0.getSize());
      assertEquals("LW3#$CqDkd(ItE;", objectType0.getSignature());
      assertEquals("W3#$CqDkd(ItE", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(276, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack1.size());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(276, operandStack1.maxStack());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertNotNull(operandStack1);
      
      Frame frame2 = frame0.getClone();
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(frame0.equals((Object)frame1));
      assertTrue(frame2.equals((Object)frame0));
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("LW3#$CqDkd(ItE;", objectType0.getSignature());
      assertEquals("W3#$CqDkd(ItE", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(276, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(frame0, frame2);
      assertNotSame(frame0, frame1);
      assertNotSame(frame2, frame1);
      assertNotSame(frame2, frame0);
      assertNotNull(frame2);
      
      instConstraintVisitor0.setFrame(frame2);
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(frame0.equals((Object)frame2));
      assertTrue(frame2.equals((Object)frame1));
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("LW3#$CqDkd(ItE;", objectType0.getSignature());
      assertEquals("W3#$CqDkd(ItE", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(276, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(frame0, frame2);
      assertNotSame(frame0, frame1);
      assertNotSame(frame2, frame1);
      assertNotSame(frame2, frame0);
      
      RET rET0 = new RET(5947);
      assertEquals("ret", rET0.getName());
      assertEquals(5947, rET0.getIndex());
      assertEquals((short)169, rET0.getOpcode());
      assertEquals(4, rET0.getLength());
      assertNotNull(rET0);
      
      POP pOP0 = new POP();
      assertEquals("pop", pOP0.getName());
      assertEquals((short)87, pOP0.getOpcode());
      assertEquals(1, pOP0.getLength());
      assertNotNull(pOP0);
      
      pOP0.accept(instConstraintVisitor0);
      assertEquals("pop", pOP0.getName());
      assertEquals((short)87, pOP0.getOpcode());
      assertEquals(1, pOP0.getLength());
      
      String string0 = pOP0.toString();
      assertEquals("pop", pOP0.getName());
      assertEquals((short)87, pOP0.getOpcode());
      assertEquals(1, pOP0.getLength());
      assertEquals("pop[87](1)", string0);
      assertNotNull(string0);
      
      instConstraintVisitor0.visitStackInstruction(pOP0);
      assertEquals("pop", pOP0.getName());
      assertEquals((short)87, pOP0.getOpcode());
      assertEquals(1, pOP0.getLength());
      
      POP pOP1 = (POP)pOP0.copy();
      assertEquals("pop", pOP0.getName());
      assertEquals((short)87, pOP0.getOpcode());
      assertEquals(1, pOP0.getLength());
      assertEquals((short)87, pOP1.getOpcode());
      assertEquals("pop", pOP1.getName());
      assertEquals(1, pOP1.getLength());
      assertSame(pOP0, pOP1);
      assertSame(pOP1, pOP0);
      assertNotNull(pOP1);
      
      BCELComparator bCELComparator0 = Constant.getComparator();
      assertNotNull(bCELComparator0);
      
      Constant.setComparator(bCELComparator0);
      DNEG dNEG0 = new DNEG();
      assertEquals("dneg", dNEG0.getName());
      assertEquals((short)119, dNEG0.getOpcode());
      assertEquals(1, dNEG0.getLength());
      assertNotNull(dNEG0);
      
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      assertFalse(instConstraintVisitor1.equals((Object)instConstraintVisitor0));
      assertNotNull(instConstraintVisitor1);
      
      DASTORE dASTORE0 = new DASTORE();
      assertEquals(1, dASTORE0.getLength());
      assertEquals("dastore", dASTORE0.getName());
      assertEquals((short)82, dASTORE0.getOpcode());
      assertNotNull(dASTORE0);
      
      DMUL dMUL0 = new DMUL();
      assertEquals((short)107, dMUL0.getOpcode());
      assertEquals("dmul", dMUL0.getName());
      assertEquals(1, dMUL0.getLength());
      assertNotNull(dMUL0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDMUL(dMUL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DMUL constraint violated: The value at the stack top is not of type 'double', but of type 'W3#$CqDkd(ItE'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(2862);
      assertEquals(2862, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = ObjectType.getInstance(" p!kgb-");
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(276, objectType0);
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(276, operandStack0.maxStack());
      assertNotNull(operandStack0);
      
      operandStack0.initializeObject((UninitializedObjectType) null);
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(276, operandStack0.maxStack());
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(276, operandStack0.maxStack());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(276, operandStack0.maxStack());
      
      Type type0 = operandStack0.pop((-1));
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(276, operandStack0.maxStack());
      assertNull(type0);
      
      RET rET0 = new RET(27);
      assertEquals(2, rET0.getLength());
      assertEquals((short)169, rET0.getOpcode());
      assertEquals("ret", rET0.getName());
      assertEquals(27, rET0.getIndex());
      assertNotNull(rET0);
      
      ObjectType objectType1 = new ObjectType("i4oc4.U-1");
      assertFalse(objectType1.equals((Object)objectType0));
      assertEquals(1, objectType1.getSize());
      assertEquals("Li4oc4/U-1;", objectType1.getSignature());
      assertEquals("i4oc4.U-1", objectType1.getClassName());
      assertEquals((byte)14, objectType1.getType());
      assertNotNull(objectType1);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      OperandStack operandStack1 = new OperandStack(2443, type0.OBJECT);
      assertFalse(objectType0.equals((Object)objectType1));
      assertFalse(operandStack1.equals((Object)operandStack0));
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(276, operandStack0.maxStack());
      assertFalse(operandStack1.isEmpty());
      assertEquals(2443, operandStack1.maxStack());
      assertEquals(1, operandStack1.size());
      assertEquals(1, operandStack1.slotsUsed());
      assertNotNull(operandStack1);
      
      Frame.setThis((UninitializedObjectType) null);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      assertFalse(objectType0.equals((Object)objectType1));
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(276, operandStack0.maxStack());
      assertNotNull(frame1);
      
      Frame frame2 = frame1.getClone();
      assertFalse(objectType0.equals((Object)objectType1));
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertTrue(frame2.equals((Object)frame1));
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(276, operandStack0.maxStack());
      assertNotSame(objectType0, objectType1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(frame1, frame2);
      assertNotSame(frame1, frame0);
      assertNotSame(frame2, frame1);
      assertNotSame(frame2, frame0);
      assertNotNull(frame2);
      
      POP pOP0 = new POP();
      assertEquals((short)87, pOP0.getOpcode());
      assertEquals(1, pOP0.getLength());
      assertEquals("pop", pOP0.getName());
      assertNotNull(pOP0);
      
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      assertEquals("monitorenter", mONITORENTER0.getName());
      assertEquals(1, mONITORENTER0.getLength());
      assertEquals((short)194, mONITORENTER0.getOpcode());
      assertNotNull(mONITORENTER0);
      
      AASTORE aASTORE0 = new AASTORE();
      assertEquals((short)83, aASTORE0.getOpcode());
      assertEquals("aastore", aASTORE0.getName());
      assertEquals(1, aASTORE0.getLength());
      assertNotNull(aASTORE0);
      
      String string0 = aASTORE0.toString();
      assertEquals((short)83, aASTORE0.getOpcode());
      assertEquals("aastore", aASTORE0.getName());
      assertEquals(1, aASTORE0.getLength());
      assertEquals("aastore[83](1)", string0);
      assertNotNull(string0);
      
      InstructionHandle instructionHandle0 = null;
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE((InstructionHandle) null);
      assertEquals((short)164, iF_ICMPLE0.getOpcode());
      assertEquals(0, iF_ICMPLE0.getIndex());
      assertEquals(3, iF_ICMPLE0.getLength());
      assertEquals("if_icmple", iF_ICMPLE0.getName());
      assertNotNull(iF_ICMPLE0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPLE(iF_ICMPLE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IF_ICMPLE constraint violated: The value at the stack top is not of type 'int', but of type ' p!kgb-'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(2862);
      assertEquals(2862, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = ObjectType.getInstance(" p!kgb-");
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertNotNull(objectType0);
      
      int int0 = 276;
      OperandStack operandStack0 = new OperandStack(276, objectType0);
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(276, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotNull(operandStack0);
      
      OperandStack operandStack1 = (OperandStack)operandStack0.clone();
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(276, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(276, operandStack1.maxStack());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.size());
      assertEquals(1, operandStack1.slotsUsed());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertNotNull(operandStack1);
      
      operandStack0.initializeObject((UninitializedObjectType) null);
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(276, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotSame(operandStack0, operandStack1);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(276, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(276, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotSame(operandStack0, operandStack1);
      
      Type type0 = operandStack0.pop((-1));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(276, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotSame(operandStack0, operandStack1);
      assertNull(type0);
      
      RET rET0 = new RET(27);
      assertEquals("ret", rET0.getName());
      assertEquals(27, rET0.getIndex());
      assertEquals(2, rET0.getLength());
      assertEquals((short)169, rET0.getOpcode());
      assertNotNull(rET0);
      
      POP pOP0 = new POP();
      assertEquals(1, pOP0.getLength());
      assertEquals("pop", pOP0.getName());
      assertEquals((short)87, pOP0.getOpcode());
      assertNotNull(pOP0);
      
      SWAP sWAP0 = new SWAP();
      assertEquals((short)95, sWAP0.getOpcode());
      assertEquals(1, sWAP0.getLength());
      assertEquals("swap", sWAP0.getName());
      assertNotNull(sWAP0);
      
      SWAP sWAP1 = new SWAP();
      assertTrue(sWAP1.equals((Object)sWAP0));
      assertEquals("swap", sWAP1.getName());
      assertEquals((short)95, sWAP1.getOpcode());
      assertEquals(1, sWAP1.getLength());
      assertNotNull(sWAP1);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitSWAP(sWAP1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(550);
      assertEquals(550, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(550, localVariables0.maxLocals());
      assertEquals(550, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      ObjectType objectType0 = ObjectType.getInstance(" p!kgb-");
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      LocalVariables localVariables2 = new LocalVariables(550);
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertEquals(550, localVariables2.maxLocals());
      assertNotNull(localVariables2);
      
      OperandStack operandStack0 = new OperandStack(1206, objectType0);
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1206, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      OperandStack operandStack1 = (OperandStack)operandStack0.clone();
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1206, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.size());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(1206, operandStack1.maxStack());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertNotNull(operandStack1);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertEquals(550, localVariables0.maxLocals());
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1206, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertEquals(550, localVariables0.maxLocals());
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1206, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(operandStack0, operandStack1);
      
      OperandStack operandStack2 = new OperandStack(481, objectType0);
      assertTrue(operandStack2.equals((Object)operandStack0));
      assertTrue(operandStack2.equals((Object)operandStack1));
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack2.slotsUsed());
      assertEquals(481, operandStack2.maxStack());
      assertEquals(1, operandStack2.size());
      assertFalse(operandStack2.isEmpty());
      assertNotNull(operandStack2);
      
      RET rET0 = new RET(481);
      assertEquals("ret", rET0.getName());
      assertEquals((short)169, rET0.getOpcode());
      assertEquals(4, rET0.getLength());
      assertEquals(481, rET0.getIndex());
      assertNotNull(rET0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(operandStack0.equals((Object)operandStack2));
      assertEquals(550, localVariables0.maxLocals());
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1206, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(operandStack0, operandStack2);
      assertNotSame(operandStack0, operandStack1);
      
      RET rET1 = new RET(481);
      assertTrue(rET1.equals((Object)rET0));
      assertEquals((short)169, rET1.getOpcode());
      assertEquals("ret", rET1.getName());
      assertEquals(4, rET1.getLength());
      assertEquals(481, rET1.getIndex());
      assertNotNull(rET1);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "hwunm$o)&o");
      assertFalse(boolean0);
      
      ISTORE iSTORE0 = new ISTORE(2862);
      assertEquals(4, iSTORE0.getLength());
      assertEquals(2862, iSTORE0.getIndex());
      assertEquals((short)54, iSTORE0.getCanonicalTag());
      assertEquals((short)54, iSTORE0.getOpcode());
      assertEquals("istore", iSTORE0.getName());
      assertNotNull(iSTORE0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ASTORE aSTORE0 = new ASTORE(1206);
      assertEquals((short)58, aSTORE0.getCanonicalTag());
      assertEquals(1206, aSTORE0.getIndex());
      assertEquals("astore", aSTORE0.getName());
      assertEquals(4, aSTORE0.getLength());
      assertEquals((short)58, aSTORE0.getOpcode());
      assertNotNull(aSTORE0);
      
      instConstraintVisitor0.visitStoreInstruction(aSTORE0);
      assertEquals((short)58, aSTORE0.getCanonicalTag());
      assertEquals(1206, aSTORE0.getIndex());
      assertEquals("astore", aSTORE0.getName());
      assertEquals(4, aSTORE0.getLength());
      assertEquals((short)58, aSTORE0.getOpcode());
      
      FRETURN fRETURN0 = (FRETURN)InstructionConstants.FRETURN;
      assertEquals((short)174, fRETURN0.getOpcode());
      assertEquals(1, fRETURN0.getLength());
      assertEquals("freturn", fRETURN0.getName());
      assertNotNull(fRETURN0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitReturnInstruction(fRETURN0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(2862);
      assertEquals(2862, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = new ObjectType(" p!kgb-");
      assertEquals(1, objectType0.getSize());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(2862, objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(2862, operandStack0.maxStack());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(2862, operandStack0.maxStack());
      assertNotNull(frame0);
      
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      assertEquals(1, uninitializedObjectType0.getSize());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE ' p!kgb-'>", uninitializedObjectType0.getSignature());
      assertNotNull(uninitializedObjectType0);
      
      Frame.setThis(uninitializedObjectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      assertEquals(1, uninitializedObjectType0.getSize());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE ' p!kgb-'>", uninitializedObjectType0.getSignature());
      
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertEquals("<init>", string0);
      assertNotNull(string0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(2862, operandStack0.maxStack());
      
      OperandStack operandStack1 = new OperandStack(2862, uninitializedObjectType0.THROWABLE);
      assertFalse(operandStack1.equals((Object)operandStack0));
      assertEquals(1, objectType0.getSize());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      assertEquals(1, uninitializedObjectType0.getSize());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE ' p!kgb-'>", uninitializedObjectType0.getSignature());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(1, operandStack1.size());
      assertEquals(2862, operandStack1.maxStack());
      assertFalse(operandStack1.isEmpty());
      assertNotNull(operandStack1);
      
      RET rET0 = new RET(2862);
      assertEquals("ret", rET0.getName());
      assertEquals(4, rET0.getLength());
      assertEquals((short)169, rET0.getOpcode());
      assertEquals(2862, rET0.getIndex());
      assertNotNull(rET0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(2862, operandStack0.maxStack());
      assertNotSame(operandStack0, operandStack1);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<init>");
      assertFalse(boolean0);
      
      LCMP lCMP0 = new LCMP();
      assertEquals((short)148, lCMP0.getOpcode());
      assertEquals("lcmp", lCMP0.getName());
      assertEquals(1, lCMP0.getLength());
      assertNotNull(lCMP0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLCMP(lCMP0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LCMP constraint violated: The value at the stack top is not of type 'long', but of type ' p!kgb-'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(2862);
      assertEquals(2862, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = ObjectType.getInstance(" p!kgb-");
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(276, objectType0);
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(276, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertNotNull(operandStack0);
      
      OperandStack operandStack1 = (OperandStack)operandStack0.clone();
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(276, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(276, operandStack1.maxStack());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.size());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertNotNull(operandStack1);
      
      operandStack0.initializeObject((UninitializedObjectType) null);
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(276, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertNotSame(operandStack0, operandStack1);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(276, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(276, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertNotSame(operandStack0, operandStack1);
      
      Type type0 = operandStack0.pop((-1));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(276, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertNotSame(operandStack0, operandStack1);
      assertNull(type0);
      
      RET rET0 = new RET(27);
      assertEquals((short)169, rET0.getOpcode());
      assertEquals(2, rET0.getLength());
      assertEquals(27, rET0.getIndex());
      assertEquals("ret", rET0.getName());
      assertNotNull(rET0);
      
      ObjectType objectType1 = new ObjectType("i4oc4.U-1");
      assertFalse(objectType1.equals((Object)objectType0));
      assertEquals("Li4oc4/U-1;", objectType1.getSignature());
      assertEquals((byte)14, objectType1.getType());
      assertEquals(1, objectType1.getSize());
      assertEquals("i4oc4.U-1", objectType1.getClassName());
      assertNotNull(objectType1);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      OperandStack operandStack2 = new OperandStack(2443, type0.OBJECT);
      assertFalse(objectType0.equals((Object)objectType1));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertFalse(operandStack2.equals((Object)operandStack0));
      assertFalse(operandStack2.equals((Object)operandStack1));
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(276, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertEquals(2443, operandStack2.maxStack());
      assertEquals(1, operandStack2.size());
      assertEquals(1, operandStack2.slotsUsed());
      assertFalse(operandStack2.isEmpty());
      assertNotNull(operandStack2);
      
      Frame.setThis((UninitializedObjectType) null);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      assertFalse(objectType0.equals((Object)objectType1));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertFalse(operandStack0.equals((Object)operandStack2));
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(276, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertNotNull(frame1);
      
      Frame frame2 = frame1.getClone();
      assertFalse(objectType0.equals((Object)objectType1));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertFalse(operandStack0.equals((Object)operandStack2));
      assertTrue(frame2.equals((Object)frame1));
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(276, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertNotSame(objectType0, objectType1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack0, operandStack2);
      assertNotSame(frame1, frame2);
      assertNotSame(frame1, frame0);
      assertNotSame(frame2, frame0);
      assertNotSame(frame2, frame1);
      assertNotNull(frame2);
      
      POP pOP0 = new POP();
      assertEquals("pop", pOP0.getName());
      assertEquals((short)87, pOP0.getOpcode());
      assertEquals(1, pOP0.getLength());
      assertNotNull(pOP0);
      
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      assertEquals(1, mONITORENTER0.getLength());
      assertEquals((short)194, mONITORENTER0.getOpcode());
      assertEquals("monitorenter", mONITORENTER0.getName());
      assertNotNull(mONITORENTER0);
      
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      assertFalse(instConstraintVisitor1.equals((Object)instConstraintVisitor0));
      assertNotNull(instConstraintVisitor1);
      
      D2F d2F0 = new D2F();
      assertEquals((short)144, d2F0.getOpcode());
      assertEquals("d2f", d2F0.getName());
      assertEquals(1, d2F0.getLength());
      assertNotNull(d2F0);
      
      InstructionList instructionList0 = new InstructionList(mONITORENTER0);
      assertEquals(1, mONITORENTER0.getLength());
      assertEquals((short)194, mONITORENTER0.getOpcode());
      assertEquals("monitorenter", mONITORENTER0.getName());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      
      InstructionHandle instructionHandle0 = instructionList0.getStart();
      assertEquals(1, mONITORENTER0.getLength());
      assertEquals((short)194, mONITORENTER0.getOpcode());
      assertEquals("monitorenter", mONITORENTER0.getName());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      
      IF_ACMPEQ iF_ACMPEQ0 = new IF_ACMPEQ(instructionHandle0);
      assertEquals(1, mONITORENTER0.getLength());
      assertEquals((short)194, mONITORENTER0.getOpcode());
      assertEquals("monitorenter", mONITORENTER0.getName());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((short)165, iF_ACMPEQ0.getOpcode());
      assertEquals(0, iF_ACMPEQ0.getIndex());
      assertEquals(3, iF_ACMPEQ0.getLength());
      assertEquals("if_acmpeq", iF_ACMPEQ0.getName());
      assertNotNull(iF_ACMPEQ0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ACMPEQ(iF_ACMPEQ0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(2862);
      assertEquals(2862, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string0);
      assertNotNull(string0);
      
      ObjectType objectType0 = new ObjectType("<clinit>");
      assertEquals("<clinit>", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L<clinit>;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(2862);
      assertEquals(0, operandStack0.slotsUsed());
      assertTrue(operandStack0.isEmpty());
      assertEquals(0, operandStack0.size());
      assertEquals(2862, operandStack0.maxStack());
      assertNotNull(operandStack0);
      
      operandStack0.push(objectType0);
      assertEquals("<clinit>", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L<clinit>;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2862, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(2862, localVariables0.maxLocals());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2862, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertNotNull(frame0);
      
      Frame frame1 = new Frame(2862, 2862);
      assertFalse(frame1.equals((Object)frame0));
      assertNotNull(frame1);
      
      instConstraintVisitor0.setFrame(frame0);
      assertFalse(frame0.equals((Object)frame1));
      assertEquals(2862, localVariables0.maxLocals());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2862, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertNotSame(frame0, frame1);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("<clinit>");
      assertNotNull(mockFileOutputStream0);
      
      RET rET0 = new RET(2862);
      assertEquals((short)169, rET0.getOpcode());
      assertEquals("ret", rET0.getName());
      assertEquals(4, rET0.getLength());
      assertEquals(2862, rET0.getIndex());
      assertNotNull(rET0);
      
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(2862, 3484);
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals(3484, constantMethodHandle0.getReferenceIndex());
      assertEquals(2862, constantMethodHandle0.getReferenceKind());
      assertNotNull(constantMethodHandle0);
      
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(2, 2862);
      assertFalse(constantMethodHandle1.equals((Object)constantMethodHandle0));
      assertEquals(2862, constantMethodHandle1.getReferenceIndex());
      assertEquals((byte)15, constantMethodHandle1.getTag());
      assertEquals(2, constantMethodHandle1.getReferenceKind());
      assertNotNull(constantMethodHandle1);
      
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("6ME>p(Y3ZMLT}l00a");
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("6ME>p(Y3ZMLT}l00a", constantUtf8_0.getBytes());
      assertNotNull(constantUtf8_0);
      
      ConstantString constantString0 = new ConstantString(254);
      assertEquals((byte)8, constantString0.getTag());
      assertEquals(254, constantString0.getStringIndex());
      assertNotNull(constantString0);
      
      ConstantMethodHandle constantMethodHandle2 = new ConstantMethodHandle(constantMethodHandle0);
      assertFalse(constantMethodHandle0.equals((Object)constantMethodHandle1));
      assertFalse(constantMethodHandle2.equals((Object)constantMethodHandle1));
      assertTrue(constantMethodHandle2.equals((Object)constantMethodHandle0));
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals(3484, constantMethodHandle0.getReferenceIndex());
      assertEquals(2862, constantMethodHandle0.getReferenceKind());
      assertEquals((byte)15, constantMethodHandle2.getTag());
      assertEquals(2862, constantMethodHandle2.getReferenceKind());
      assertEquals(3484, constantMethodHandle2.getReferenceIndex());
      assertNotNull(constantMethodHandle2);
      
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantMethodHandle1;
      constantArray0[1] = (Constant) constantMethodHandle2;
      constantArray0[2] = (Constant) constantMethodHandle1;
      ConstantDouble constantDouble0 = new ConstantDouble((-1.0));
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals((-1.0), constantDouble0.getBytes(), 0.01);
      assertNotNull(constantDouble0);
      
      constantArray0[3] = (Constant) constantDouble0;
      constantArray0[4] = (Constant) constantString0;
      IADD iADD0 = new IADD();
      assertEquals("iadd", iADD0.getName());
      assertEquals(1, iADD0.getLength());
      assertEquals((short)96, iADD0.getOpcode());
      assertNotNull(iADD0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIADD(iADD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `clinit>;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(2862);
      assertEquals(2862, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = ObjectType.getInstance(" p!kgb-");
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(276, objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals(276, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(operandStack0);
      
      operandStack0.initializeObject((UninitializedObjectType) null);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals(276, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals(276, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(2862, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals(276, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      
      Type type0 = operandStack0.pop((-1));
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L p!kgb-;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals(" p!kgb-", objectType0.getClassName());
      assertEquals(276, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNull(type0);
      
      POP2 pOP2_0 = new POP2();
      assertEquals((short)88, pOP2_0.getOpcode());
      assertEquals(1, pOP2_0.getLength());
      assertEquals("pop2", pOP2_0.getName());
      assertNotNull(pOP2_0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitPOP2(pOP2_0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction POP2 constraint violated: Stack top size should be 2 but stack top is ' p!kgb-' of size '1'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      LocalVariables localVariables0 = new LocalVariables(548);
      assertEquals(548, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(548, localVariables0.maxLocals());
      assertEquals(548, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      localVariables0.merge(localVariables1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(548, localVariables0.maxLocals());
      assertEquals(548, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      ObjectType objectType0 = ObjectType.getInstance("D%");
      assertEquals("D%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("LD%;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(548, objectType0);
      assertEquals("D%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("LD%;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(548, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotNull(operandStack0);
      
      ISUB iSUB0 = new ISUB();
      assertEquals(1, iSUB0.getLength());
      assertEquals((short)100, iSUB0.getOpcode());
      assertEquals("isub", iSUB0.getName());
      assertNotNull(iSUB0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "D%");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertEquals(548, localVariables0.maxLocals());
      assertEquals("D%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("LD%;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(548, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertEquals(548, localVariables0.maxLocals());
      assertEquals("D%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("LD%;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(548, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotSame(localVariables0, localVariables1);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      Object object0 = frame0.clone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(object0.equals((Object)frame0));
      assertEquals(548, localVariables0.maxLocals());
      assertEquals("D%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("LD%;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(548, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(frame0, object0);
      assertNotSame(object0, frame0);
      assertNotNull(object0);
      
      UninitializedObjectType uninitializedObjectType0 = Frame.getThis();
      assertNull(uninitializedObjectType0);
      
      Frame.setThis((UninitializedObjectType) null);
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(frame0.equals((Object)object0));
      assertEquals(548, localVariables0.maxLocals());
      assertEquals("D%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("LD%;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(548, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(frame0, object0);
      
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      assertFalse(instConstraintVisitor1.equals((Object)instConstraintVisitor0));
      assertNotNull(instConstraintVisitor1);
      
      instConstraintVisitor1.setFrame(frame0);
      assertFalse(instConstraintVisitor1.equals((Object)instConstraintVisitor0));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(frame0.equals((Object)object0));
      assertEquals(548, localVariables0.maxLocals());
      assertEquals("D%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("LD%;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(548, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotSame(instConstraintVisitor1, instConstraintVisitor0);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(frame0, object0);
      
      RET rET0 = new RET(548);
      assertEquals("ret", rET0.getName());
      assertEquals(548, rET0.getIndex());
      assertEquals(4, rET0.getLength());
      assertEquals((short)169, rET0.getOpcode());
      assertNotNull(rET0);
      
      IFNULL iFNULL0 = new IFNULL((InstructionHandle) null);
      assertEquals(0, iFNULL0.getIndex());
      assertEquals((short)198, iFNULL0.getOpcode());
      assertEquals(3, iFNULL0.getLength());
      assertEquals("ifnull", iFNULL0.getName());
      assertNotNull(iFNULL0);
      
      InstructionList instructionList0 = new InstructionList(iSUB0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals(1, iSUB0.getLength());
      assertEquals((short)100, iSUB0.getOpcode());
      assertEquals("isub", iSUB0.getName());
      assertNotNull(instructionList0);
      
      InstructionList instructionList1 = instructionList0.copy();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertEquals(1, instructionList1.size());
      assertEquals(1, iSUB0.getLength());
      assertEquals((short)100, iSUB0.getOpcode());
      assertEquals("isub", iSUB0.getName());
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertNotNull(instructionList1);
      
      ALOAD aLOAD0 = (ALOAD)InstructionConstants.ALOAD_1;
      assertEquals((short)25, aLOAD0.getCanonicalTag());
      assertEquals(1, aLOAD0.getIndex());
      assertEquals("aload_1", aLOAD0.getName());
      assertEquals((short)43, aLOAD0.getOpcode());
      assertEquals(1, aLOAD0.getLength());
      assertNotNull(aLOAD0);
      
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) rET0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertEquals("ret", rET0.getName());
      assertEquals(548, rET0.getIndex());
      assertEquals(4, rET0.getLength());
      assertEquals((short)169, rET0.getOpcode());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertEquals(1, iSUB0.getLength());
      assertEquals((short)100, iSUB0.getOpcode());
      assertEquals("isub", iSUB0.getName());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotSame(instructionList0, instructionList1);
      assertNotNull(instructionHandle0);
      
      InstructionHandle instructionHandle1 = instructionList0.insert(instructionList1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionList0.isEmpty());
      assertEquals(3, instructionList0.getLength());
      assertEquals(3, instructionList0.size());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals(1, iSUB0.getLength());
      assertEquals((short)100, iSUB0.getOpcode());
      assertEquals("isub", iSUB0.getName());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotNull(instructionHandle1);
      
      JSR_W jSR_W0 = new JSR_W(instructionHandle1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionList0.isEmpty());
      assertEquals(3, instructionList0.getLength());
      assertEquals(3, instructionList0.size());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals(1, iSUB0.getLength());
      assertEquals((short)100, iSUB0.getOpcode());
      assertEquals("isub", iSUB0.getName());
      assertEquals((-1), instructionHandle1.getPosition());
      assertTrue(instructionHandle1.hasTargeters());
      assertEquals((short)201, jSR_W0.getOpcode());
      assertEquals("jsr_w", jSR_W0.getName());
      assertEquals(0, jSR_W0.getIndex());
      assertEquals(5, jSR_W0.getLength());
      assertNotNull(jSR_W0);
      
      IFEQ iFEQ0 = new IFEQ((InstructionHandle) null);
      assertEquals(3, iFEQ0.getLength());
      assertEquals((short)153, iFEQ0.getOpcode());
      assertEquals("ifeq", iFEQ0.getName());
      assertEquals(0, iFEQ0.getIndex());
      assertNotNull(iFEQ0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFEQ(iFEQ0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IFEQ constraint violated: The value at the stack top is not of type 'int', but of type 'D%'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      LocalVariables localVariables0 = new LocalVariables(548);
      assertEquals(548, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(548, localVariables0.maxLocals());
      assertEquals(548, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      localVariables0.merge(localVariables1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(548, localVariables0.maxLocals());
      assertEquals(548, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      ObjectType objectType0 = ObjectType.getInstance("D%");
      assertEquals("LD%;", objectType0.getSignature());
      assertEquals("D%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(548, objectType0);
      assertEquals("LD%;", objectType0.getSignature());
      assertEquals("D%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertEquals(548, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(operandStack0);
      
      ISUB iSUB0 = new ISUB();
      assertEquals((short)100, iSUB0.getOpcode());
      assertEquals(1, iSUB0.getLength());
      assertEquals("isub", iSUB0.getName());
      assertNotNull(iSUB0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "D%");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertEquals(548, localVariables0.maxLocals());
      assertEquals("LD%;", objectType0.getSignature());
      assertEquals("D%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertEquals(548, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertEquals(548, localVariables0.maxLocals());
      assertEquals("LD%;", objectType0.getSignature());
      assertEquals("D%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertEquals(548, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertNotSame(localVariables0, localVariables1);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      Object object0 = frame0.clone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(object0.equals((Object)frame0));
      assertEquals(548, localVariables0.maxLocals());
      assertEquals("LD%;", objectType0.getSignature());
      assertEquals("D%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertEquals(548, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(frame0, object0);
      assertNotSame(object0, frame0);
      assertNotNull(object0);
      
      UninitializedObjectType uninitializedObjectType0 = Frame.getThis();
      assertNull(uninitializedObjectType0);
      
      Frame.setThis((UninitializedObjectType) null);
      instConstraintVisitor0.setFrame(frame0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(frame0.equals((Object)object0));
      assertEquals(548, localVariables0.maxLocals());
      assertEquals("LD%;", objectType0.getSignature());
      assertEquals("D%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertEquals(548, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(frame0, object0);
      
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      assertFalse(instConstraintVisitor1.equals((Object)instConstraintVisitor0));
      assertNotNull(instConstraintVisitor1);
      
      instConstraintVisitor1.setFrame(frame0);
      assertFalse(instConstraintVisitor1.equals((Object)instConstraintVisitor0));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(frame0.equals((Object)object0));
      assertEquals(548, localVariables0.maxLocals());
      assertEquals("LD%;", objectType0.getSignature());
      assertEquals("D%", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertEquals(548, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertNotSame(instConstraintVisitor1, instConstraintVisitor0);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(frame0, object0);
      
      RET rET0 = new RET(548);
      assertEquals(548, rET0.getIndex());
      assertEquals((short)169, rET0.getOpcode());
      assertEquals(4, rET0.getLength());
      assertEquals("ret", rET0.getName());
      assertNotNull(rET0);
      
      IFNULL iFNULL0 = new IFNULL((InstructionHandle) null);
      assertEquals("ifnull", iFNULL0.getName());
      assertEquals(3, iFNULL0.getLength());
      assertEquals((short)198, iFNULL0.getOpcode());
      assertEquals(0, iFNULL0.getIndex());
      assertNotNull(iFNULL0);
      
      InstructionList instructionList0 = new InstructionList(iSUB0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals((short)100, iSUB0.getOpcode());
      assertEquals(1, iSUB0.getLength());
      assertEquals("isub", iSUB0.getName());
      assertNotNull(instructionList0);
      
      InstructionList instructionList1 = new InstructionList((BranchInstruction) iFNULL0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals("ifnull", iFNULL0.getName());
      assertEquals(3, iFNULL0.getLength());
      assertEquals((short)198, iFNULL0.getOpcode());
      assertEquals(0, iFNULL0.getIndex());
      assertEquals(1, instructionList1.getLength());
      assertEquals(1, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertNotNull(instructionList1);
      
      InstructionList instructionList2 = instructionList1.copy();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList2.equals((Object)instructionList1));
      assertFalse(instructionList2.equals((Object)instructionList0));
      assertEquals("ifnull", iFNULL0.getName());
      assertEquals(3, iFNULL0.getLength());
      assertEquals((short)198, iFNULL0.getOpcode());
      assertEquals(0, iFNULL0.getIndex());
      assertEquals(1, instructionList1.getLength());
      assertEquals(1, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertFalse(instructionList2.isEmpty());
      assertEquals(1, instructionList2.getLength());
      assertEquals(1, instructionList2.size());
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionList1, instructionList2);
      assertNotSame(instructionList2, instructionList1);
      assertNotSame(instructionList2, instructionList0);
      assertNotNull(instructionList2);
      
      FDIV fDIV0 = new FDIV();
      assertEquals(1, fDIV0.getLength());
      assertEquals((short)110, fDIV0.getOpcode());
      assertEquals("fdiv", fDIV0.getName());
      assertNotNull(fDIV0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFDIV(fDIV0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FDIV constraint violated: The value at the stack top is not of type 'float', but of type 'D%'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }
}
