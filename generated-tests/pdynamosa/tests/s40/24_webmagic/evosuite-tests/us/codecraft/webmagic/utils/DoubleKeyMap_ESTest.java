/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 04:21:37 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Object>(class0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<Integer, Map<HashMap<String, Map<Object, String>>, Map<Object, String>>> hashMap0 = new HashMap<Integer, Map<HashMap<String, Map<Object, String>>, Map<Object, String>>>();
      Class<Map> class0 = Map.class;
      HashMap<HashMap<String, Map<Object, String>>, Map<Object, String>> hashMap1 = new HashMap<HashMap<String, Map<Object, String>>, Map<Object, String>>();
      HashMap<String, Map<Object, String>> hashMap2 = new HashMap<String, Map<Object, String>>();
      HashMap<Object, String> hashMap3 = new HashMap<Object, String>();
      hashMap1.putIfAbsent(hashMap2, hashMap3);
      hashMap0.put((Integer) null, hashMap1);
      DoubleKeyMap<Integer, HashMap<String, Map<Object, String>>, Map<Object, String>> doubleKeyMap0 = new DoubleKeyMap<Integer, HashMap<String, Map<Object, String>>, Map<Object, String>>(hashMap0, class0);
      doubleKeyMap0.remove((Integer) null, hashMap2);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, Map<Integer, HashMap<Map<Object, String>, Object>>> hashMap0 = new HashMap<String, Map<Integer, HashMap<Map<Object, String>, Object>>>();
      HashMap<Integer, HashMap<Map<Object, String>, Object>> hashMap1 = new HashMap<Integer, HashMap<Map<Object, String>, Object>>();
      hashMap0.put("", hashMap1);
      DoubleKeyMap<String, Integer, HashMap<Map<Object, String>, Object>> doubleKeyMap0 = new DoubleKeyMap<String, Integer, HashMap<Map<Object, String>, Object>>(hashMap0);
      Map<Integer, HashMap<Map<Object, String>, Object>> map0 = doubleKeyMap0.remove("");
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleKeyMap<String, String, Integer> doubleKeyMap0 = new DoubleKeyMap<String, String, Integer>();
      Integer integer0 = new Integer(0);
      doubleKeyMap0.put("", "", integer0);
      Map<String, Integer> map0 = doubleKeyMap0.remove("");
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleKeyMap<HashMap<String, Object>, Object, HashMap<Integer, Object>> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, Object, HashMap<Integer, Object>>();
      Integer integer0 = new Integer(1);
      DoubleKeyMap<Integer, Object, Map<Object, String>> doubleKeyMap1 = new DoubleKeyMap<Integer, Object, Map<Object, String>>();
      Map<Object, String> map0 = doubleKeyMap1.remove(integer0, (Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      HashMap<Object, Map<HashMap<Object, String>, String>> hashMap1 = new HashMap<Object, Map<HashMap<Object, String>, String>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, HashMap<Object, String>, String> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<Object, String>, String>(hashMap1, class0);
      Object object0 = new Object();
      String string0 = doubleKeyMap0.remove(object0, hashMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Object>();
      Map<Integer, Object> map0 = doubleKeyMap0.remove((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, String>, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, String>, Object, Integer>();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>();
      Map<Object, Object> map0 = doubleKeyMap1.remove((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Object, Map<Object, Object>> hashMap0 = new HashMap<Object, Map<Object, Object>>(251);
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>(hashMap0, class0);
      Integer integer0 = new Integer(251);
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((Object) hashMap1, (Object) integer0, object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Object, Map<Object, String>> hashMap0 = new HashMap<Object, Map<Object, String>>();
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>(hashMap0);
      Integer integer0 = new Integer((-1661));
      String string0 = doubleKeyMap0.put((Object) integer0, (Object) null, "[L*YY$tL|-e");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, String>, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, String>, Object, Integer>();
      DoubleKeyMap<Map<Integer, Map<String, HashMap<Integer, Integer>>>, Object, Map<Object, String>> doubleKeyMap1 = new DoubleKeyMap<Map<Integer, Map<String, HashMap<Integer, Integer>>>, Object, Map<Object, String>>();
      Map<Integer, Map<String, HashMap<Integer, Integer>>> map0 = doubleKeyMap1.newMap();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Map<Object, String> map1 = doubleKeyMap1.put(map0, (Object) doubleKeyMap0, (Map<Object, String>) hashMap0);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer((-879));
      DoubleKeyMap<String, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Object>();
      Object object0 = doubleKeyMap0.put((String) null, integer0, (Object) integer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleKeyMap<HashMap<String, Object>, Object, HashMap<Integer, Object>> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, Object, HashMap<Integer, Object>>();
      HashMap<Object, Map<Object, Object>> hashMap0 = new HashMap<Object, Map<Object, Object>>(0);
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>(hashMap0, class0);
      Integer integer0 = new Integer((-438));
      // Undeclared exception!
      try { 
        doubleKeyMap1.put((Object) doubleKeyMap0, (Object) "us.codecraft.webmagic.utils.DoubleKeyMap", (Object) integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleKeyMap<Map<Map<Object, String>, Integer>, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Map<Map<Object, String>, Integer>, Object, Object>();
      DoubleKeyMap<Integer, HashMap<String, String>, Object> doubleKeyMap1 = new DoubleKeyMap<Integer, HashMap<String, String>, Object>();
      Map<Map<Object, String>, Integer> map0 = doubleKeyMap1.newMap();
      Object object0 = doubleKeyMap0.get(map0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Object>();
      Integer integer0 = new Integer(1972);
      Object object0 = doubleKeyMap0.get((Object) null, integer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, String>, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, String>, Object, Integer>();
      DoubleKeyMap<Object, Object, HashMap<String, Map<Object, String>>> doubleKeyMap1 = new DoubleKeyMap<Object, Object, HashMap<String, Map<Object, String>>>();
      Object object0 = new Object();
      HashMap<String, Map<Object, String>> hashMap0 = doubleKeyMap1.get((Object) doubleKeyMap0, object0);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<Integer, Map<String, Object>> hashMap0 = new HashMap<Integer, Map<String, Object>>();
      DoubleKeyMap<Integer, String, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Object>(hashMap0);
      Map<String, Object> map0 = doubleKeyMap0.get((Integer) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, String>, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, String>, Object, Integer>();
      HashMap<Object, Map<Map<Object, String>, Object>> hashMap0 = new HashMap<Object, Map<Map<Object, String>, Object>>();
      DoubleKeyMap<Object, Map<Object, String>, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Map<Object, String>, Object>(hashMap0);
      Map<Map<Object, String>, Object> map0 = doubleKeyMap1.get((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Integer, Map<HashMap<String, Map<Object, String>>, Map<Object, String>>> hashMap0 = new HashMap<Integer, Map<HashMap<String, Map<Object, String>>, Map<Object, String>>>();
      Class<Map> class0 = Map.class;
      Integer integer0 = new Integer(0);
      HashMap<HashMap<String, Map<Object, String>>, Map<Object, String>> hashMap1 = new HashMap<HashMap<String, Map<Object, String>>, Map<Object, String>>();
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Object>();
      Map<Object, String> map0 = doubleKeyMap0.newMap();
      hashMap1.put((HashMap<String, Map<Object, String>>) null, map0);
      hashMap0.put(integer0, hashMap1);
      DoubleKeyMap<Integer, HashMap<String, Map<Object, String>>, Map<Object, String>> doubleKeyMap1 = new DoubleKeyMap<Integer, HashMap<String, Map<Object, String>>, Map<Object, String>>(hashMap0, class0);
      HashMap<String, Map<Object, String>> hashMap2 = new HashMap<String, Map<Object, String>>();
      doubleKeyMap1.remove(integer0, hashMap2);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Integer integer0 = new Integer((-879));
      DoubleKeyMap<Object, HashMap<Object, String>, String> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<Object, String>, String>();
      String string0 = doubleKeyMap0.remove((Object) integer0, (HashMap<Object, String>) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<Integer, Map<String, Map<Object, String>>> hashMap0 = new HashMap<Integer, Map<String, Map<Object, String>>>();
      DoubleKeyMap<Integer, String, Map<Object, String>> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Map<Object, String>>(hashMap0);
      Integer integer0 = new Integer(0);
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      doubleKeyMap0.put(integer0, "[{", (Map<Object, String>) hashMap1);
      doubleKeyMap0.put(integer0, "[{", (Map<Object, String>) null);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, Object, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Integer, Object, String>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }
}
