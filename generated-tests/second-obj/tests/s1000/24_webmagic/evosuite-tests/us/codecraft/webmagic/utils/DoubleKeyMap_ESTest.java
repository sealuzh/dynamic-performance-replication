/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 15:26:41 GMT 2018
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>();
      Map<String, Map<String, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<String, String, Object> doubleKeyMap1 = new DoubleKeyMap<String, String, Object>(map0);
      Object object0 = new Object();
      doubleKeyMap1.put("us.codecraft.webmagic.utils.MultiKeyMapBase", "~A0\"\"l", object0);
      doubleKeyMap1.put("", "", (Object) map0);
      DoubleKeyMap<String, Object, Object> doubleKeyMap2 = new DoubleKeyMap<String, Object, Object>();
      Map<Object, Object> map1 = doubleKeyMap2.remove("us.codecraft.webmagic.utils.MultiKeyMapBase");
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HashMap<String, Map<String, String>> hashMap0 = new HashMap<String, Map<String, String>>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap0.put("", hashMap1);
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, String, String> doubleKeyMap0 = new DoubleKeyMap<String, String, String>(hashMap0, class0);
      // Undeclared exception!
      try { 
        doubleKeyMap0.put("Q\u0007,S$otdoF#9&,H,", (Map<String, String>) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HashMap<Integer, Map<String, Object>> hashMap0 = new HashMap<Integer, Map<String, Object>>();
      DoubleKeyMap<Integer, String, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Object>(hashMap0);
      Map<String, Map<Integer, String>> map0 = doubleKeyMap0.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Integer, String> doubleKeyMap1 = new DoubleKeyMap<String, Integer, String>(map0, class0);
      Integer integer0 = new Integer(0);
      String string0 = doubleKeyMap1.get("", integer0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HashMap<Integer, Map<String, Integer>> hashMap0 = new HashMap<Integer, Map<String, Integer>>();
      DoubleKeyMap<Integer, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Integer>(hashMap0);
      Integer integer0 = new Integer(1056);
      doubleKeyMap0.put(integer0, "<>N", integer0);
      Integer integer1 = new Integer(1056);
      doubleKeyMap0.get(integer1, "");
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, Map<String, Object>, String> doubleKeyMap1 = null;
      try {
        doubleKeyMap1 = new DoubleKeyMap<Integer, Map<String, Object>, String>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Integer integer0 = new Integer(449);
      DoubleKeyMap<String, String, Object> doubleKeyMap0 = new DoubleKeyMap<String, String, Object>();
      doubleKeyMap0.newMap();
      Object object0 = new Object();
      doubleKeyMap0.put("", "", object0);
      doubleKeyMap0.put("", ".Vo.=daT:_6", (Object) null);
      DoubleKeyMap<String, Object, Object> doubleKeyMap1 = new DoubleKeyMap<String, Object, Object>();
      doubleKeyMap1.remove("");
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, Object, Integer> doubleKeyMap2 = null;
      try {
        doubleKeyMap2 = new DoubleKeyMap<Integer, Object, Integer>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DoubleKeyMap<Integer, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Integer>();
      doubleKeyMap0.put((Integer) null, "", (Integer) null);
      doubleKeyMap0.remove((Integer) null, "w");
      Integer integer0 = new Integer(449);
      Integer integer1 = new Integer(449);
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Integer, Object, Object>();
      Integer integer2 = new Integer(449);
      assertTrue(integer2.equals((Object)integer1));
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DoubleKeyMap<Integer, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Integer>();
      doubleKeyMap0.remove((Integer) null, "");
      Integer integer0 = new Integer(449);
      Integer integer1 = new Integer(449);
      doubleKeyMap0.put((Integer) null, "", integer1);
      doubleKeyMap0.remove((Integer) null, "");
      Integer integer2 = new Integer((-2835));
      Integer integer3 = new Integer(1450);
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Integer, Object, Object>();
      Integer integer4 = new Integer(1450);
      Integer integer5 = new Integer((-2835));
      Map<Object, Object> map0 = doubleKeyMap1.get(integer5);
      assertNull(map0);
  }
}
