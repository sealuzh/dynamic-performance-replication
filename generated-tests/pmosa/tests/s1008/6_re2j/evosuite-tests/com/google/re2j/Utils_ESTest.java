/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 11:12:27 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Utils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utils_ESTest extends Utils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Utils.unhex(12);
      Utils.isWordRune(0);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 12;
      int int0 = 2077;
      // Undeclared exception!
      try { 
        Utils.subarray(intArray0, 2077, 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = Utils.unhex(557);
      assertEquals((-1), int0);
      
      String string0 = Utils.runeToString((-1));
      assertEquals("\uFFFF", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Utils.runeToString(70);
      StringBuilder stringBuilder0 = new StringBuilder();
      Utils.escapeRune(stringBuilder0, 70);
      assertEquals("F", stringBuilder0.toString());
      
      boolean boolean0 = Utils.isWordRune(1914);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Utils.isalnum(0);
      int int0 = 57;
      Utils.emptyOpContext(57, 366);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)0;
      // Undeclared exception!
      try { 
        Utils.subarray(byteArray0, 3192, (byte)0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = Utils.emptyOpContext((byte) (-72), (byte)117);
      assertEquals(21, int0);
      
      String string0 = Utils.runeToString((byte)117);
      assertEquals("u", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Utils.runeToString((-1519));
      int[] intArray0 = new int[1];
      intArray0[0] = (-1519);
      Utils.subarray(intArray0, 135, 135);
      StringBuilder stringBuilder0 = new StringBuilder(135);
      // Undeclared exception!
      try { 
        stringBuilder0.appendCodePoint((-1519));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 501;
      int[] intArray1 = Utils.subarray(intArray0, 501, 501);
      assertArrayEquals(new int[] {}, intArray1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 3123;
      Utils.emptyOpContext(3123, 3123);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utils.stringToRunes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Utils.stringToRunes("ZTxJ>0uit-x$|:(zn9");
      Utils.isWordRune((-1234));
      int int0 = 0;
      Utils.isWordRune(0);
      int[] intArray0 = new int[1];
      intArray0[0] = (-1234);
      // Undeclared exception!
      try { 
        Utils.subarray(intArray0, 0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Utils.isWordRune(0);
      int int0 = 8173;
      Utils.emptyOpContext(8173, 8173);
      // Undeclared exception!
      try { 
        Utils.escapeRune((StringBuilder) null, 248);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      boolean boolean0 = Utils.isalnum(322);
      boolean boolean1 = Utils.isWordRune(322);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[0];
      int int0 = Utils.indexOf(byteArray0, byteArray0, (byte) (-72));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      boolean boolean0 = Utils.isalnum(0);
      assertFalse(boolean0);
      
      int int0 = Utils.unhex(0);
      assertEquals((-1), int0);
      
      int int1 = Utils.emptyOpContext(0, (-2779));
      assertEquals(42, int1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-43);
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-7);
      int int2 = Utils.indexOf(byteArray0, byteArray0, (byte)0);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Utils.subarray(byteArray0, (-749), (-749));
      Utils.isalnum((-749));
      int[] intArray0 = new int[4];
      intArray0[0] = (-749);
      intArray0[1] = (-749);
      intArray0[2] = (-749);
      intArray0[3] = (-749);
      Utils.subarray(intArray0, (-749), (-749));
      int int0 = 780;
      Utils.unhex(780);
      int int1 = (-1540);
      Utils.unhex((-1540));
      // Undeclared exception!
      try { 
        Utils.subarray(byteArray1, 3851, 2236);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Utils.runeToString(52);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        Utils.subarray(byteArray0, 52, 82);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 52
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Utils.isalnum(585);
      Utils.emptyOpContext(585, 585);
      Utils.runeToString(73);
      int[] intArray0 = new int[9];
      intArray0[0] = 32;
      intArray0[1] = 73;
      intArray0[2] = 585;
      intArray0[3] = 32;
      intArray0[4] = 73;
      intArray0[5] = 585;
      intArray0[6] = 32;
      intArray0[7] = 73;
      intArray0[8] = 32;
      int int0 = 43233;
      // Undeclared exception!
      try { 
        Utils.subarray(intArray0, 43233, 2385);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = Utils.unhex((-3142));
      assertEquals((-1), int0);
      
      int int1 = Utils.emptyOpContext((-1110), 90);
      assertEquals(21, int1);
      
      Utils.isWordRune((-3142));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-47);
      byte[] byteArray1 = Utils.subarray(byteArray0, (byte) (-47), (byte) (-47));
      assertArrayEquals(new byte[] {}, byteArray1);
      
      int int2 = Utils.emptyOpContext(8, (-1929));
      assertEquals(42, int2);
      
      int int3 = Utils.emptyOpContext(479, (-20));
      assertEquals(42, int3);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte)65;
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)86;
      byteArray1[1] = (byte) (-72);
      byteArray1[2] = (byte)82;
      int int0 = Utils.indexOf(byteArray0, byteArray1, (byte) (-72));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)82;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)82;
      int int0 = Utils.indexOf(byteArray0, byteArray1, (byte) (-72));
      assertEquals(1, int0);
      
      String string0 = Utils.runeToString(1);
      assertEquals("\u0001", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Utils.isalnum(0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-36);
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte)79;
      byteArray0[7] = (byte)2;
      Utils.indexOf(byteArray0, byteArray0, 11);
      Utils.runeToString(0);
      Utils.emptyOpContext(4, 1650);
      Utils.isWordRune(43072);
      Utils.unhex(32);
      // Undeclared exception!
      try { 
        Utils.subarray(byteArray0, (byte)79, (-666));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Utils.isalnum((-1987));
      int[] intArray0 = new int[0];
      Utils.subarray(intArray0, (-1987), (-1987));
      String string0 = "xaNMiA@GQB)@Mop";
      Utils.stringToRunes("xaNMiA@GQB)@Mop");
      Utils.isWordRune(4046);
      Utils.unhex(4046);
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Utils.subarray(byteArray0, 0, 0);
      Utils.subarray(byteArray1, (-110), (-110));
      Utils.isalnum(0);
      int int0 = 92;
      Utils.emptyOpContext(92, (-1));
      Utils.isalnum(48);
      Utils.isWordRune(0);
      Utils.isalnum(4046);
      Utils.isWordRune(2655);
      int int1 = 0;
      Utils.unhex(0);
      Utils.unhex(0);
      Utils.indexOf(byteArray1, byteArray0, 92);
      int int2 = 0;
      // Undeclared exception!
      try { 
        Utils.subarray(byteArray1, (-1), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)117;
      int int0 = Utils.indexOf(byteArray0, byteArray0, (byte) (-72));
      assertEquals(0, int0);
      
      int int1 = Utils.emptyOpContext((byte) (-72), (byte)117);
      assertEquals(21, int1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte)65;
      byte[] byteArray1 = new byte[3];
      int int0 = Utils.indexOf(byteArray1, byteArray0, (byte)65);
      assertEquals((-1), int0);
      
      boolean boolean0 = Utils.isalnum((byte)86);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Utils.indexOf(byteArray0, byteArray0, (-2960));
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuffer stringBuffer0 = new StringBuffer(117);
      stringBuffer0.append("s|Vl13wLSN(*BGJe");
      StringBuilder stringBuilder1 = stringBuilder0.append((double) (byte)82);
      stringBuilder1.append(stringBuffer0);
      Utils.escapeRune(stringBuilder1, (-1490));
      assertEquals("82.0s|Vl13wLSN(*BGJe\\xfffffa2e", stringBuilder1.toString());
      assertEquals("82.0s|Vl13wLSN(*BGJe\\xfffffa2e", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte)86;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)84;
      int int0 = Utils.indexOf(byteArray0, byteArray1, (byte) (-72));
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)84;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)84;
      Utils.indexOf(byteArray1, byteArray0, (byte)82);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuffer stringBuffer0 = new StringBuffer((byte)84);
      StringBuffer stringBuffer1 = stringBuffer0.append("");
      StringBuilder stringBuilder1 = stringBuilder0.append(stringBuffer1);
      Utils.escapeRune(stringBuilder1, (byte)84);
      Utils.escapeRune(stringBuilder1, 10);
      assertEquals("T\\n", stringBuilder1.toString());
      assertEquals("T\\n", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Utils.stringToRunes("Gujarati");
      StringBuilder stringBuilder0 = new StringBuilder("Gujarati");
      StringBuilder stringBuilder1 = stringBuilder0.append(18);
      StringBuilder stringBuilder2 = stringBuilder1.append('!');
      Object object0 = new Object();
      StringBuilder stringBuilder3 = stringBuilder2.append(object0);
      StringBuilder stringBuilder4 = stringBuilder3.insert(18, 18);
      Utils.escapeRune(stringBuilder4, 18);
      int[] intArray0 = Utils.EMPTY_INTS;
      Utils.escapeRune(stringBuilder2, 8);
      assertSame(stringBuilder1, stringBuilder2);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte) (-103);
      byteArray0[5] = (byte)65;
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)86;
      byteArray0[4] = (byte) (-72);
      Utils.indexOf(byteArray1, byteArray1, (byte)0);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = new StringBuffer();
      StringBuilder stringBuilder1 = stringBuilder0.append(stringBuffer0);
      stringBuilder0.append(stringBuffer1);
      Utils.escapeRune(stringBuilder1, 2289);
      assertEquals("\\x{8f1}", stringBuilder1.toString());
      assertEquals("\\x{8f1}", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)84;
      byteArray0[1] = (byte)117;
      Utils.indexOf(byteArray0, byteArray0, (byte)0);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuffer stringBuffer0 = new StringBuffer((byte)0);
      StringBuffer stringBuffer1 = stringBuffer0.append("");
      StringBuilder stringBuilder1 = stringBuilder0.append(stringBuffer1);
      Utils.escapeRune(stringBuilder0, (byte)86);
      Utils.escapeRune(stringBuilder1, 13);
      Utils.isalnum(3503);
      Utils.escapeRune(stringBuilder1, 13);
      assertEquals("V\\r\\r", stringBuilder1.toString());
      assertEquals("V\\r\\r", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)84;
      byteArray0[1] = (byte)117;
      Utils.indexOf(byteArray0, byteArray0, (byte)0);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuffer stringBuffer0 = new StringBuffer((byte)0);
      StringBuffer stringBuffer1 = stringBuffer0.append("");
      StringBuilder stringBuilder1 = stringBuilder0.append(stringBuffer1);
      StringBuilder stringBuilder2 = stringBuilder1.append("");
      Utils.escapeRune(stringBuilder0, (byte)86);
      stringBuilder2.insert(0, (int) (byte)117);
      Utils.escapeRune(stringBuilder0, 9);
      int[] intArray0 = Utils.EMPTY_INTS;
      Utils.escapeRune(stringBuilder2, 4);
      assertEquals("117V\\t\\x04", stringBuilder2.toString());
      
      Utils.isWordRune((byte) (-72));
      int int0 = Utils.indexOf(byteArray0, byteArray0, (byte)117);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)117;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)82;
      byteArray1[1] = (byte) (-72);
      byteArray1[2] = (byte) (-72);
      byteArray1[3] = (byte) (-72);
      byteArray1[4] = (byte) (-72);
      byteArray1[5] = (byte) (-72);
      byteArray1[7] = (byte)84;
      byteArray1[8] = (byte)82;
      int int0 = Utils.indexOf(byteArray0, byteArray1, (byte) (-72));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Utils.stringToRunes("Gujarati");
      StringBuilder stringBuilder0 = new StringBuilder("Gujarati");
      StringBuilder stringBuilder1 = stringBuilder0.append(18);
      StringBuilder stringBuilder2 = stringBuilder1.append('\u0016');
      Object object0 = new Object();
      stringBuilder2.append(object0);
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.append("Gujarati");
      stringBuilder0.insert((int) '\u0016', '\u0016');
      Utils.escapeRune(stringBuilder1, 18);
      StringBuilder stringBuilder3 = new StringBuilder();
      Utils.escapeRune(stringBuilder3, 12);
      Utils.escapeRune(stringBuilder1, 18);
      assertNotSame(stringBuilder1, stringBuilder3);
  }
}
