/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 00:01:29 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DoubleKeyMap<Object, HashMap<Integer, Object>, Map<String, String>> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<Integer, Object>, Map<String, String>>();
      Map<HashMap<Integer, Object>, Map<String, String>> map0 = doubleKeyMap0.remove((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<Map<HashMap<String, Object>, Integer>, Map<String, Map<String, Integer>>> hashMap0 = new HashMap<Map<HashMap<String, Object>, Integer>, Map<String, Map<String, Integer>>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<HashMap<String, Object>, Integer>, String, Map<String, Integer>> doubleKeyMap0 = new DoubleKeyMap<Map<HashMap<String, Object>, Integer>, String, Map<String, Integer>>(hashMap0, class0);
      Map<String, Integer> map0 = doubleKeyMap0.remove((Map<HashMap<String, Object>, Integer>) null, "us.codecraft.webmagic.utils.MultiKeyMapBase");
      HashMap<HashMap<String, Object>, Integer> hashMap1 = new HashMap<HashMap<String, Object>, Integer>();
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((Map<HashMap<String, Object>, Integer>) hashMap1, "1oJ\"Z{v-y,`o", map0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, HashMap<Map<HashMap<String, Object>, Integer>, Map<HashMap<String, Object>, Integer>>, Map<HashMap<String, Object>, Integer>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, HashMap<Map<HashMap<String, Object>, Integer>, Map<HashMap<String, Object>, Integer>>, Map<HashMap<String, Object>, Integer>>((Map<String, Map<HashMap<Map<HashMap<String, Object>, Integer>, Map<HashMap<String, Object>, Integer>>, Map<HashMap<String, Object>, Integer>>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, String, Object> doubleKeyMap0 = new DoubleKeyMap<String, String, Object>(class0);
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Integer>(class0);
      Map<Object, Integer> map0 = doubleKeyMap1.get((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<Map<HashMap<String, Object>, Integer>, Map<String, Map<String, Integer>>> hashMap0 = new HashMap<Map<HashMap<String, Object>, Integer>, Map<String, Map<String, Integer>>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<HashMap<String, Object>, Integer>, String, Map<String, Integer>> doubleKeyMap0 = new DoubleKeyMap<Map<HashMap<String, Object>, Integer>, String, Map<String, Integer>>(hashMap0, class0);
      HashMap<String, Map<String, Integer>> hashMap1 = new HashMap<String, Map<String, Integer>>();
      hashMap0.put((Map<HashMap<String, Object>, Integer>) null, hashMap1);
      doubleKeyMap0.remove((Map<HashMap<String, Object>, Integer>) null, "us.codecraft.webmagic.utils.MultiKeyMapBase");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<String, String, Integer> doubleKeyMap0 = new DoubleKeyMap<String, String, Integer>((Map<String, Map<String, Integer>>) null);
      Integer integer0 = new Integer((-561));
      doubleKeyMap0.put("", (String) null, integer0);
      Integer integer1 = doubleKeyMap0.remove("", "Wso0lN3;#I&");
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<HashMap<Integer, String>, Map<String, Integer>> hashMap0 = new HashMap<HashMap<Integer, String>, Map<String, Integer>>();
      DoubleKeyMap<HashMap<Integer, String>, String, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, String>, String, Integer>(hashMap0);
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      Integer integer0 = new Integer(683);
      doubleKeyMap0.put(hashMap1, "S\"/+?", (Integer) null);
      Integer integer1 = doubleKeyMap0.put(hashMap1, "", integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer((-561));
      DoubleKeyMap<HashMap<Object, Object>, Integer, HashMap<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, Integer, HashMap<Object, Object>>();
      HashMap<Object, Object> hashMap0 = doubleKeyMap0.get((HashMap<Object, Object>) null, integer0);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<Map<Integer, String>, Map<HashMap<String, Object>, Integer>, String> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, String>, Map<HashMap<String, Object>, Integer>, String>();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      HashMap<Object, Map<Object, Integer>> hashMap1 = new HashMap<Object, Map<Object, Integer>>();
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Integer>(hashMap1);
      Map<HashMap<String, Object>, Integer> map0 = doubleKeyMap1.newMap();
      doubleKeyMap0.put((Map<Integer, String>) hashMap0, map0, "");
      HashMap<HashMap<String, Object>, Integer> hashMap2 = new HashMap<HashMap<String, Object>, Integer>();
      String string0 = doubleKeyMap0.get((Map<Integer, String>) hashMap0, (Map<HashMap<String, Object>, Integer>) hashMap2);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<Object, Map<HashMap<String, Object>, Integer>>, Map<Map<HashMap<String, Object>, Integer>, Map<Object, String>>, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Map<HashMap<String, Object>, Integer>>, Map<Map<HashMap<String, Object>, Integer>, Map<Object, String>>, Object>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, Map<HashMap<String, Object>, Integer>>, HashMap<Object, Object>, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Map<HashMap<String, Object>, Integer>>, HashMap<Object, Object>, Integer>();
      HashMap<Object, Map<Object, Integer>> hashMap0 = new HashMap<Object, Map<Object, Integer>>();
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Integer>(hashMap0);
      Integer integer0 = doubleKeyMap1.remove((Object) doubleKeyMap0, (Object) "");
      assertNull(integer0);
  }
}
