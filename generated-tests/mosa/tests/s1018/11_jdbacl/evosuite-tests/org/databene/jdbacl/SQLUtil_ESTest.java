/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 09:16:42 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayReader;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.util.List;
import java.util.Vector;
import org.apache.derby.iapi.sql.dictionary.PermDescriptor;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.iapi.types.TypeId;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBTrigger;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.h2.jdbcx.JdbcDataSource;
import org.h2.value.ValueDecimal;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SQLUtil.removeComments("create table ");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "create table ";
      stringArray0[1] = "create table ";
      stringArray0[2] = "create table ";
      stringArray0[3] = "create table ";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("create table  = 'create table ' AND create table  = 'create table ' AND create table  = 'create table ' AND create table  = 'create table '", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ValueDecimal valueDecimal0 = (ValueDecimal)ValueDecimal.ONE;
      String string0 = PermDescriptor.UDT_TYPE;
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "TYPE");
      SQLUtil.addOptionalCondition("TYPE", stringBuilder0);
      assertEquals("TYPE or TYPE", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("|~VMv!^Kj|`R{EoyC;", false, "|~VMv!^Kj|`R{EoyC;", "getNClob(String)");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT |~VMv!^Kj|`R{EoyC; ", string0);
      
      String string1 = SQLUtil.removeComments("CONSTRAINT |~VMv!^Kj|`R{EoyC; ");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("|~VMv!^Kj|`R{EoyC;");
      assertNull(boolean0);
      
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("|~VMv!^Kj|`R{EoyC;", false, "|~VMv!^Kj|`R{EoyC;", "getNClob(String)");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT |~VMv!^Kj|`R{EoyC; ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("getInt(String)", false, "getInt(String)", "catalo");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT getInt(String) ", string0);
      
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK catalo", string1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("|~VMv!^Kj|`R{EoyC;", false, "|~VMv!^Kj|`R{EoyC;", "getNClob(String)");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT |~VMv!^Kj|`R{EoyC; ", string0);
      
      String string1 = TypeId.TIMESTAMP_NAME;
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "|~VMv!^Kj|`R{EoyC;");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string2 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK getNClob(String)", string2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SQLUtil.isQuery("pqngcyrwK =&P=*(E");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("EUC_JP");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "]68LO4T?RB}\"!j%", true, (String[]) null);
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      SQLUtil.ownerDotComponent(dBUniqueConstraint0);
      SQLUtil.isQuery("]68LO4T?RB}\"!j%");
      SQLUtil sQLUtil0 = new SQLUtil();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((DBColumn[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("CHECK ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = SQLUtil.normalize("PmT+/iWsmD,!6}2{", true);
      assertEquals("PmT + / iWsmD, ! 6 } 2 {", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = SQLUtil.normalize("h.xPQvY", true);
      assertEquals("h.xPQvY", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = SQLUtil.normalize("PmT+/iWsmD,!6U}2{", false);
      assertEquals("PmT + / iW  smD, ! 6U } 2 {", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "NATIONAL CHARACTER";
      stringArray0[1] = "alter table";
      String string0 = SQLUtil.renderColumnListWithTableName("alter table", stringArray0);
      assertEquals("alter table.NATIONAL CHARACTER, alter table.alter table", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("(");
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, (String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SQLUtil.removeComments("create unique index");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("close: ");
      dBSchema0.getTable("close: ");
      DBDataType dBDataType0 = DBDataType.getInstance(0, "close: ");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("close: ", (DBTable) null, dBDataType0, integer0, integer0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("CLOSE: (2,2)", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SQLUtil.isQuery("SELECT * FROM ");
      String[] stringArray0 = new String[0];
      SQLUtil.leftJoin("*/", stringArray0, "SELECT * FROM ", "*/", stringArray0);
      String string0 = SQLUtil.renderColumnListWithTableName("of", stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "create able";
      String string0 = SQLUtil.innerJoin("create able", stringArray0, "create able", "create able", stringArray0);
      assertEquals("create able as create able on create able.create able = create able.create able", string0);
      
      String string1 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(create able)", string1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "getNClob(String)";
      stringArray0[1] = "getNClob(String)";
      stringArray0[2] = "getNClob(String)";
      String string0 = SQLUtil.join("getNClob(String)", "getNClob(String)", stringArray0, "getNClob(String)", "getNClob(String)", stringArray0);
      assertEquals("getNClob(String) join getNClob(String) as getNClob(String) on getNClob(String).getNClob(String) = getNClob(String).getNClob(String) and getNClob(String).getNClob(String) = getNClob(String).getNClob(String) and getNClob(String).getNClob(String) = getNClob(String).getNClob(String)", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = SQLUtil.normalize("pBHA^!JxB*@^YA]a%R", false);
      assertEquals("pBHA ^ ! JxB * @ ^ YA ] a % R", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SQLUtil.removeComments("create table ");
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("|~VMv!^Kj|`R{EoyC;");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("|~VMv!^Kj|`R{EoyC;", false, "|~VMv!^Kj|`R{EoyC;", "getNClob(String)");
      SQLUtil.constraintName(dBCheckConstraint0);
      String string0 = TypeId.TIMESTAMP_NAME;
      StringBuilder stringBuilder0 = new StringBuilder("TIMESTAMP");
      StringBuilder stringBuilder1 = stringBuilder0.append("getNClob(String)");
      SQLUtil.addRequiredCondition("CONSTRAINT |~VMv!^Kj|`R{EoyC; ", stringBuilder0);
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder1);
      assertEquals("TIMESTAMPgetNClob(String) and CONSTRAINT |~VMv!^Kj|`R{EoyC; CONSTRAINT |~VMv!^Kj|`R{EoyC; ", stringBuilder1.toString());
      assertEquals("TIMESTAMPgetNClob(String) and CONSTRAINT |~VMv!^Kj|`R{EoyC; CONSTRAINT |~VMv!^Kj|`R{EoyC; ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("getInt(String)", false, "getInt(String)", "getInt(String)");
      String string0 = SQLUtil.normalize("getInt(String)", false);
      assertEquals("getInt (String)", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SQLUtil.removeComments("create table ");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("create table ");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("|~VMv!^Kj|`R{EoyC;");
      assertNull(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("|~VMv!^Kj|`R{EoyC;");
      String string0 = SQLUtil.normalize("+[ @f&7R+IZ< bk'`<3", true);
      assertEquals("+ [ @ f & 7R + IZ < bk '`<3'", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      String string0 = SQLUtil.typeAndName(dBCatalog0);
      assertEquals("catalog null", string0);
      assertNotNull(string0);
      
      boolean boolean0 = SQLUtil.isDML("catalog null");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("|~VMv!^Kj|`R{EoyC;");
      SQLUtil.normalize("|~VMv!^Kj|`R{EoyC;", true);
      String string0 = ";bj/HQTXwGFjbwenqY&";
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition(";bj/HQTXwGFjbwenqY&", stringBuilder0);
      // Undeclared exception!
      try { 
        stringBuilder1.insert((-964), 0L);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -964
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.join((String) null, (String) null, (String[]) null, (String) null, (String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("PmT+/iWsmD,!6U}2{");
      DBTrigger dBTrigger0 = new DBTrigger("PmT+/iWsmD,!6U}2{", dBSchema0);
      dBTrigger0.setTriggerType("p9TP)SP=.2");
      String string0 = SQLUtil.typeAndName(dBTrigger0);
      assertNotNull(string0);
      assertEquals("trigger PmT+/iWsmD,!6U}2{", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      String string0 = "SAIF@YY}";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string1 = "WUB6&hI";
      DBDataType dBDataType0 = DBDataType.getInstance(1867, "WUB6&hI");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("SAIF@YY}", defaultDBTable0, dBDataType0, integer0, integer0);
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      jdbcDataSource0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      SQLUtil.typeAndName(dBCatalog0);
      DBSchema dBSchema0 = new DBSchema("catalog null", dBCatalog0);
      ValueDecimal valueDecimal0 = (ValueDecimal)ValueDecimal.ONE;
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, true, (String) null, "getNClob(String)");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("/*", dBSchema0);
      defaultDBTable0.getPrimaryKeyConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SQLUtil.typeAndName((DBObject) null);
      boolean boolean0 = SQLUtil.isQuery(",Mj<=");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SQLUtil.normalize("-2N]", true);
      System.setCurrentTimeMillis(279L);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      char[] charArray0 = new char[4];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(charArrayReader0);
      streamTokenizer0.nval = (-2147.003298);
      SQLUtil.renderNumber(streamTokenizer0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(209);
      SQLUtil.addRequiredCondition("CREATE INDEX", stringBuilder0);
      assertEquals("CREATE INDEX", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("insert|~vmv!^kj|`r{eoyc;");
      String string0 = SQLUtil.normalize("+T", true);
      assertEquals("+ T", string0);
      
      boolean boolean1 = SQLUtil.isQuery("M;6b");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("close: ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("close: ", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance(0, "BLOB");
      Integer integer0 = RawTransaction.COMMIT;
      Integer.getInteger((String) null);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0, integer0, (Integer) null);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("BLOB", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      String string0 = SQLUtil.typeAndName(dBCatalog0);
      assertEquals("catalog null", string0);
      
      DBSchema dBSchema0 = new DBSchema("catalog null", dBCatalog0);
      ValueDecimal valueDecimal0 = (ValueDecimal)ValueDecimal.ONE;
      String string1 = SQLUtil.renderValue(valueDecimal0);
      assertEquals("1", string1);
      
      String string2 = SQLUtil.normalize("}h;_)i)", false);
      assertEquals("} h ; _) i)", string2);
      
      Boolean boolean0 = new Boolean(false);
      String string3 = SQLUtil.ownerDotComponent(dBSchema0);
      assertEquals("null.catalog null", string3);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      String string0 = SQLUtil.typeAndName(dBCatalog0);
      assertEquals("catalog null", string0);
      
      String string1 = SQLUtil.normalize(">0zg*<KNDT`\"", false);
      assertEquals("> 0zg * < KNDT ` \"\"", string1);
      
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(7, ">0zg*<KNDT`\"");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("> 0zg * < KNDT ` \"\"", defaultDBTable0, dBDataType0, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string2 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("org.firebirdsql.jdbc.FBResultSetMetaData");
      TableContainer tableContainer0 = new TableContainer("Di<^Y.", dBSchema0);
      tableContainer0.getSchema();
      DBPackage dBPackage0 = new DBPackage((String) null, (DBSchema) null);
      dBPackage0.setDoc("org.firebirdsql.jdbc.FBResultSetMetaData");
      dBSchema0.addPackage(dBPackage0);
      DBPackage dBPackage1 = new DBPackage("org.firebirdsql.jdbc.FBResultSetMetaData", dBSchema0);
      boolean boolean0 = SQLUtil.isDML("eF4}");
      String string0 = SQLUtil.normalize("--", false);
      assertEquals("--", string0);
      
      boolean boolean1 = SQLUtil.isQuery("selectdate");
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "selectdate";
      stringArray0[1] = "--";
      String string1 = SQLUtil.innerJoin("--", stringArray0, "--", "--", stringArray0);
      assertEquals("-- as -- on --.selectdate = --.selectdate and --.-- = --.--", string1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(59, "PwSVmL/iWmD,!BU}2{");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("PwSVmL/iWmD,!BU}2{", defaultDBTable0, dBDataType0, (Integer) null, (Integer) null);
      vector0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      assertEquals("PwSVmL/iWmD,!BU}2{", string0);
      
      String string1 = SQLUtil.normalize("PwSVmL/iWmD,!BU}2{", true);
      assertEquals("PwSVmL / iW  mD, ! BU } 2 {", string1);
      
      boolean boolean0 = SQLUtil.isQuery("XbOj55m4^");
      assertFalse(boolean0);
      
      DBColumn[] dBColumnArray0 = new DBColumn[6];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn0;
      String string2 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("PwSVmL/iWmD,!BU}2{, PwSVmL/iWmD,!BU}2{, PwSVmL/iWmD,!BU}2{, PwSVmL/iWmD,!BU}2{, PwSVmL/iWmD,!BU}2{, PwSVmL/iWmD,!BU}2{", string2);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("execute");
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("execute", false, "execute", "gqZ48^,mDb?]v;KF:o6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error parsing SQL
         //
         verifyException("org.databene.jdbacl.sql.SQLParserUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("h");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("h", defaultDBTable0, 4525, "h");
      Integer integer0 = RawTransaction.ABORT;
      defaultDBColumn0.setSize(integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("h H(1) NULL", string0);
      
      String string1 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("h", string1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      String string0 = SQLUtil.typeAndName(dBCatalog0);
      assertEquals("catalog null", string0);
      
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("catalog null", false, " WHERE ", " WHERE ");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"catalog null\" ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      char[] charArray0 = new char[7];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(charArrayReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" u`v4nPEM");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("i");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "i";
      stringArray0[1] = "i";
      stringArray0[2] = "i";
      stringArray0[3] = "i";
      stringArray0[4] = "SELECT * FROM ";
      stringArray0[5] = "B=PlX,.TK~vL[nr^N ";
      stringArray0[6] = "i";
      stringArray0[7] = "i";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "i", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT i PRIMARY KEY (i, i, i, i, SELECT * FROM , B=PlX,.TK~vL[nr^N , i, i, )", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ValueDecimal valueDecimal0 = (ValueDecimal)ValueDecimal.ONE;
      SQLUtil.renderValue(valueDecimal0);
      // Undeclared exception!
      SQLUtil.isProcedureCall("/*WA");
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("|~VMv!^Kj|`R{EoyC;");
      assertNull(boolean0);
      
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("insert|~vmv!^kj|`r{eoyc;");
      assertTrue(boolean1);
      assertNotNull(boolean1);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("mE}Oz/}%9b|");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter table", defaultDBTable0, 16, "alter table");
      defaultDBColumn0.isUnique();
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("alter table ALTER TABLE NULL", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SQLUtil.isQuery("select");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("|~VMv!^Kj|`R{EoyC;");
      assertNull(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("|~VMv!^Kj|`R{EoyC;");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "TABLEPERMSID";
      stringArray0[1] = "org.apache.derby.impl.store.raw.xact.Xact";
      stringArray0[2] = "10.2";
      stringArray0[3] = "10.2";
      stringArray0[4] = "10.2";
      stringArray0[5] = "|~VMv!^Kj|`R{EoyC;";
      stringArray0[6] = "10.2";
      stringArray0[7] = "|~VMv!^Kj|`R{EoyC;";
      stringArray0[8] = "10.2";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("10.2", false, defaultDBTable0, (String[]) null, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY () REFERENCES |~VMv!^Kj|`R{EoyC;(TABLEPERMSID, org.apache.derby.impl.store.raw.xact.Xact, 10.2, 10.2, 10.2, |~VMv!^Kj|`R{EoyC;, 10.2, |~VMv!^Kj|`R{EoyC;, 10.2)", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "PwSVmL/iWmD,!BU}2{", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (, , , )", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("?y!9XVH0", defaultDBTable0, 323, " AND ");
      defaultDBColumn0.setNullable(false);
      SQLUtil.renderColumn(defaultDBColumn0);
      // Undeclared exception!
      try { 
        defaultDBTable0.getUniqueConstraint("20W>7Ny\"");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[10];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "PwSVmL/iWmD,!BU}2{", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("PwSVmL/iWmD,!BU}2{", false, dBUniqueConstraint0);
      dBUniqueIndex0.getTable();
      DBDataType.getInstance(59, "hl9");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-- ERROR [");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      boolean boolean0 = SQLUtil.isQuery("PwSVmL/iWmD,!BU}2{");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Character character0 = new Character('H');
      SQLUtil.renderValue(character0);
      TableContainer tableContainer0 = new TableContainer("'H'");
      tableContainer0.getTable("E:up^UT;r3,A>");
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("alter session");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("alter session", false, "alter session", "getNClob(String)");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("alter session");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'alter session' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ValueDecimal valueDecimal0 = (ValueDecimal)ValueDecimal.ONE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("UJ,Ka[j2iNX6;f", defaultDBTable0, 21, "_!XV^U(6HD.cbt/Tc_J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: _!XV^U(6HD.cbt/Tc_J
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      System.setCurrentTimeMillis(17979222801250312L);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex((String) null, false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("/*");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, dBTable0, stringArray0, defaultDBTable1, stringArray0);
      String string0 = SQLUtil.constraintName(dBForeignKeyConstraint0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SQLUtil.substituteMarkers("SESSION_START", "SESSION_START", "SESSION_START");
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.normalize("()", true);
      SQLUtil.removeComments("cDl`vK");
      DBSchema dBSchema0 = new DBSchema("Kqg+h\";*NxkQir<3");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("exec|~vmv!^kj|`r{eoyc;", dBSchema0);
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("SESSION_START", defaultDBTable0, (-254263330), "()");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("getInsertResultSet", "getInsertResultSet", "getInsertResultSet");
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "getInsertResultSet");
      String[] stringArray0 = new String[0];
      String string1 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("()", string1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLUtil.renderColumnListWithTableName(" or ", stringArray0);
      DBSchema dBSchema0 = new DBSchema("getInsertResultSet");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop materialized view", (DBSchema) null);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("()", defaultDBTable0, (-218643409), "getInsertResultSet");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("rename|~vmv!^kj|`r{eoyc;");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      boolean boolean0 = SQLUtil.isQuery("drop materialized view");
      assertFalse(boolean0);
      
      String string2 = SQLUtil.normalize("'getInsertResultSet'", false);
      assertTrue(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = "\\ELECT * FdOM ";
      SQLUtil.isQuery("ELECT * FdOM ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("}");
      String string1 = null;
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      Object[] objectArray0 = new Object[8];
      // Undeclared exception!
      try { 
        NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.testdata.NetworkHandling", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[10];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "8#_]+='Izw\"&", false, stringArray0);
      defaultDBTable0.removeUniqueConstraint(dBPrimaryKeyConstraint0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "PwSVmL/iWmD,!BU}2{", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("PwSVmL/iWmD,!BU}2{", false, dBUniqueConstraint0);
      dBUniqueIndex0.getTable();
      DBDataType.getInstance(59, "hl9");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-- ERROR [");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      boolean boolean0 = SQLUtil.isQuery("PwSVmL/iWmD,!BU}2{");
      assertFalse(boolean0);
  }
}
