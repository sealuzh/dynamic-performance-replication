/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 01:36:14 GMT 2018
 */

package com.google.gson.stream;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonToken;
import java.io.CharArrayReader;
import java.io.EOFException;
import java.io.IOException;
import java.io.ObjectStreamConstants;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.StringReader;
import java.io.Writer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JsonReader_ESTest extends JsonReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("BEGINAR@AY");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{\"Ta|");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 6 path $.
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("BEGINAR@AY");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NUMBER");
      StringReader stringReader1 = new StringReader("NUMBER");
      JsonReader jsonReader0 = new JsonReader(stringReader1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      stringReader0.reset();
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("]d0S0V'L");
      stringReader0.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected value at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.close();
      // Undeclared exception!
      try { 
        jsonReader0.doPeek();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JsonReader is closed
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{\"Ta|");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_ARRAY but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("L");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JsonReader jsonReader0 = null;
      try {
        jsonReader0 = new JsonReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("L");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("END_ARRAY");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("@");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("END_ARRAY");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.hasNext();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '-';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("END_ARRAY");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[5];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("FV TWI2}R");
      stringReader0.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("d<h|]aIJNi");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[15];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '-';
      charArray0[1] = '-';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("End of in\"$put");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NUmBwER");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      boolean boolean0 = jsonReader0.isLenient();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("BEGINAR@AY");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      jsonReader0.toString();
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      try { 
        jsonReader0.peek();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[5];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '8';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      // Undeclared exception!
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_ARRAY but was NUMBER at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[3];
      StringReader stringReader0 = new StringReader("e");
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      jsonReader0.nextString();
      jsonReader0.skipValue();
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a boolean but was END_DOCUMENT at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2'%s");
      stringReader0.read();
      stringReader0.ready();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      char[] charArray0 = new char[4];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      jsonReader0.setLenient(true);
      // Undeclared exception!
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a boolean but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{\"Ta|");
      stringReader0.read();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a boolean but was STRING at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("En<d of in\"$put");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      StringReader stringReader1 = new StringReader("En<d of in\"$put");
      stringReader0.reset();
      jsonReader0.close();
      String string0 = jsonReader0.getPath();
      assertEquals("$", string0);
      assertFalse(jsonReader0.isLenient());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      char[] charArray0 = new char[7];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      jsonReader0.setLenient(true);
      // Undeclared exception!
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected null but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{\"Ta|");
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a boolean but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      // Undeclared exception!
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected null but was BEGIN_ARRAY at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("d<h:|]aIJNVi");
      StringReader stringReader1 = new StringReader("d<h:|]aIJNVi");
      stringReader0.read();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader("*/");
      stringReader0.read();
      stringReader0.ready();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      jsonReader0.peeked = 466;
      // Undeclared exception!
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = ',';
      charArray0[1] = 'v';
      charArray0[2] = 'O';
      charArray0[3] = 'f';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 0, ',');
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected value at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'n';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{\"Ta|");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.hasNext();
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a long but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringReader stringReader0 = new StringReader("/XgN$(&");
      stringReader0.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{\"Ta|");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean0 = jsonReader0.hasNext();
      assertTrue(boolean0);
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected an int but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringReader stringReader0 = new StringReader("STRING");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'['}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'['}, charArray0);
      
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 2 path $[0]
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" #o,o61(hkB;L");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 3 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[1] = '5';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'5', '5', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'5', '5', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader("}ai7~;xmF\"DRS@");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.hasNext();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '-';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'-'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'-'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'-'}, charArray0);
      
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringReader stringReader0 = new StringReader("STRING");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '5';
      charArray0[1] = '5';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'5', '5', '\u0000'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'5', '5', '\u0000'}, charArray0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'5', '5', '\u0000'}, charArray0);
      
      long long0 = jsonReader0.nextLong();
      assertEquals(55L, long0);
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'5', '5', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a double but was END_DOCUMENT at line 1 column 4 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringReader stringReader0 = new StringReader("+3ru#AjgyIv");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_OBJECT but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{\"Ta|");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(123, int0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected null but was STRING at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringReader stringReader0 = new StringReader("End of input");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'F';
      charArray0[1] = 'a';
      charArray0[2] = '?';
      charArray0[6] = '?';
      charArray0[4] = '?';
      charArray0[5] = 'l';
      charArray0[6] = '{';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'F', 'a', '?', '\u0000', '?', 'l', '{'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'F', 'a', '?', '\u0000', '?', 'l', '{'}, charArray0);
      
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'['}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'['}, charArray0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a name but was BEGIN_ARRAY at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '=';
      charArray0[1] = '=';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'=', '=', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'=', '=', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      jsonReader0.peeked = 6;
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean1 = jsonReader0.nextBoolean();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      JsonReader jsonReader1 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.isLenient());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringReader stringReader0 = new StringReader("STRING");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected null but was END_DOCUMENT at line 1 column 7 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Pqwa5>~<28@");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("Pqwa5>~<28@");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '3';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'3'}, charArray0);
      
      JsonReader jsonReader1 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.isLenient());
      assertArrayEquals(new char[] {'3'}, charArray0);
      
      jsonReader1.setLenient(false);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotSame(jsonReader1, jsonReader0);
      assertFalse(jsonReader1.isLenient());
      assertArrayEquals(new char[] {'3'}, charArray0);
      
      long long0 = jsonReader1.nextLong();
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertEquals(3L, long0);
      assertNotSame(jsonReader1, jsonReader0);
      assertFalse(jsonReader1.isLenient());
      assertArrayEquals(new char[] {'3'}, charArray0);
      
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '-';
      charArray0[1] = '[';
      charArray0[3] = '[';
      charArray0[4] = '[';
      charArray0[5] = 'f';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'-', '[', '\u0000', '[', '[', 'f', '\u0000'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'-', '[', '\u0000', '[', '[', 'f', '\u0000'}, charArray0);
      
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      jsonReader0.peeked = 6;
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      charArrayReader0.close();
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '4';
      charArray0[1] = '4';
      charArray0[2] = '4';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'4', '4', '4'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'4', '4', '4'}, charArray0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'4', '4', '4'}, charArray0);
      
      int int0 = jsonReader0.nextInt();
      assertEquals(444, int0);
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'4', '4', '4'}, charArray0);
      
      String string0 = jsonReader0.getPath();
      assertEquals("$", string0);
      assertNotNull(string0);
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'4', '4', '4'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      char[] charArray0 = new char[6];
      StringReader stringReader0 = new StringReader("+3ru#AjgyIv");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'['}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'['}, charArray0);
      
      JsonReader jsonReader1 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.isLenient());
      assertArrayEquals(new char[] {'['}, charArray0);
      
      // Undeclared exception!
      try { 
        jsonReader1.nextString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a string but was BEGIN_ARRAY at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StringReader stringReader0 = new StringReader("STRING");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("STRING");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      long long0 = stringReader0.skip((-444L));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0L, long0);
      assertNotSame(stringReader0, stringReader1);
      
      int int0 = stringReader0.read();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(83, int0);
      assertNotSame(stringReader0, stringReader1);
      
      boolean boolean0 = stringReader0.ready();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertTrue(boolean0);
      assertNotSame(stringReader0, stringReader1);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{\"Ta|");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[6];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      int int0 = jsonReader0.doPeek();
      assertEquals(1, int0);
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected null but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{\"Ta|");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[15];
      charArray0[1] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      String string0 = jsonReader0.nextString();
      assertEquals("\u0000", string0);
      assertNotNull(string0);
      assertTrue(jsonReader0.isLenient());
      
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 16 path $[0]
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      StringReader stringReader0 = new StringReader("En<d of in\"$put");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '-';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'-'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'-'}, charArray0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'-'}, charArray0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '4';
      charArray0[1] = '4';
      charArray0[2] = '4';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'4', '4', '4'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'4', '4', '4'}, charArray0);
      
      int int0 = charArrayReader0.read();
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertEquals(52, int0);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertArrayEquals(new char[] {'4', '4', '4'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'4', '4', '4'}, charArray0);
      
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0, 2068);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(pushbackReader0);
      assertArrayEquals(new char[] {'4', '4', '4'}, charArray0);
      
      JsonReader jsonReader1 = new JsonReader(pushbackReader0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.isLenient());
      assertArrayEquals(new char[] {'4', '4', '4'}, charArray0);
      
      jsonReader1.setLenient(true);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(jsonReader1, jsonReader0);
      assertTrue(jsonReader1.isLenient());
      assertArrayEquals(new char[] {'4', '4', '4'}, charArray0);
      
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertNotNull(charArrayReader2);
      assertArrayEquals(new char[] {'4', '4', '4'}, charArray0);
      
      double double0 = jsonReader0.nextDouble();
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertFalse(jsonReader0.equals((Object)jsonReader1));
      assertEquals(444.0, double0, 0.01);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(charArrayReader1, charArrayReader2);
      assertNotSame(jsonReader0, jsonReader1);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'4', '4', '4'}, charArray0);
      
      // Undeclared exception!
      try { 
        jsonReader1.nextBoolean();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a boolean but was NUMBER at line 1 column 3 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      StringReader stringReader0 = new StringReader("f");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(102, int0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '0';
      charArray0[1] = ']';
      charArray0[2] = 'f';
      charArray0[3] = '^';
      charArray0[4] = '[';
      charArray0[5] = 'O';
      charArray0[6] = ';';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'0', ']', 'f', '^', '[', 'O', ';'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'0', ']', 'f', '^', '[', 'O', ';'}, charArray0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a boolean but was NUMBER at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 't';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'t', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'t', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      String string0 = jsonReader0.getPath();
      assertEquals("$", string0);
      assertNotNull(string0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'t', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{\"Ta|");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.beginObject();
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_OBJECT but was NAME at line 1 column 3 path $.
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{\"Ta|");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean1 = jsonReader0.hasNext();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.beginObject();
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a long but was NAME at line 1 column 3 path $.
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      jsonReader0.peeked = 6;
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_OBJECT but was BOOLEAN at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'['}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'['}, charArray0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      jsonReader0.beginArray();
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'['}, charArray0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'0', '\u0000', '\u0000'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'0', '\u0000', '\u0000'}, charArray0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'0', '\u0000', '\u0000'}, charArray0);
      
      String string0 = jsonReader0.nextString();
      assertEquals("0\u0000\u0000", string0);
      assertNotNull(string0);
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'0', '\u0000', '\u0000'}, charArray0);
      
      jsonReader0.close();
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'0', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '[';
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "END_ARRAY");
      assertFalse(boolean0);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'['}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'['}, charArray0);
      
      JsonReader jsonReader1 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.isLenient());
      assertArrayEquals(new char[] {'['}, charArray0);
      
      int int0 = jsonReader1.doPeek();
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertEquals(3, int0);
      assertNotSame(jsonReader1, jsonReader0);
      assertFalse(jsonReader1.isLenient());
      assertArrayEquals(new char[] {'['}, charArray0);
      
      // Undeclared exception!
      try { 
        jsonReader1.nextString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a string but was BEGIN_ARRAY at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      StringReader stringReader0 = new StringReader("STRING");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'['}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'['}, charArray0);
      
      JsonReader jsonReader1 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.isLenient());
      assertArrayEquals(new char[] {'['}, charArray0);
      
      jsonReader1.peeked = 11;
      assertFalse(jsonReader1.isLenient());
      
      JsonToken jsonToken0 = jsonReader1.peek();
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertEquals(JsonToken.STRING, jsonToken0);
      assertNotSame(jsonReader1, jsonReader0);
      assertFalse(jsonReader1.isLenient());
      assertArrayEquals(new char[] {'['}, charArray0);
      
      jsonReader1.skipValue();
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotSame(jsonReader1, jsonReader0);
      assertFalse(jsonReader1.isLenient());
      assertArrayEquals(new char[] {'['}, charArray0);
      
      // Undeclared exception!
      try { 
        jsonReader1.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_OBJECT but was BEGIN_ARRAY at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{\"Ta|");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean0 = jsonReader0.hasNext();
      assertTrue(boolean0);
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.doPeek();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 3 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{\"Ta|");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[15];
      charArray0[1] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a long but was BEGIN_ARRAY at line 1 column 3 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{\"Ta|");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(123, int0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 123);
      assertNotNull(pipedReader0);
      
      Writer writer0 = pipedWriter0.append((CharSequence) "{\"Ta|");
      assertNotNull(writer0);
      assertSame(pipedWriter0, writer0);
      assertSame(writer0, pipedWriter0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '1';
      charArray0[1] = '7';
      charArray0[2] = '[';
      charArray0[3] = 'F';
      charArray0[4] = 'm';
      charArray0[5] = '';
      charArray0[6] = 'r';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'1', '7', '[', 'F', 'm', '', 'r'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'1', '7', '[', 'F', 'm', '', 'r'}, charArray0);
      
      jsonReader0.peeked = 4;
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{\"Ta|");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      char[] charArray0 = new char[8];
      charArray0[0] = '&';
      charArray0[1] = 'Y';
      charArray0[2] = '{';
      charArray0[3] = 'R';
      charArray0[4] = 'i';
      charArray0[5] = 'n';
      charArray0[6] = 'o';
      charArray0[7] = 'd';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'&', 'Y', '{', 'R', 'i', 'n', 'o', 'd'}, charArray0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0, 5, 5);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'&', 'Y', '{', 'R', 'i', 'n', 'o', 'd'}, charArray0);
      
      jsonReader0.beginObject();
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 6 path $.
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      char[] charArray0 = new char[6];
      StringReader stringReader0 = new StringReader(":s5%dN&7gBP7x");
      assertNotNull(stringReader0);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(false);
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{\"Ta|");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(123, int0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 123);
      assertNotNull(pipedReader0);
      
      Writer writer0 = pipedWriter0.append((CharSequence) "{\"Ta|");
      assertNotNull(writer0);
      assertSame(pipedWriter0, writer0);
      assertSame(writer0, pipedWriter0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '^';
      charArray0[1] = ':';
      charArray0[2] = 'm';
      charArray0[3] = 'X';
      charArray0[4] = 'J';
      charArray0[5] = 'H';
      charArray0[6] = 'v';
      charArray0[7] = '^';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'^', ':', 'm', 'X', 'J', 'H', 'v', '^'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'^', ':', 'm', 'X', 'J', 'H', 'v', '^'}, charArray0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'^', ':', 'm', 'X', 'J', 'H', 'v', '^'}, charArray0);
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'^', ':', 'm', 'X', 'J', 'H', 'v', '^'}, charArray0);
      
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '^';
      charArray0[1] = ':';
      charArray0[2] = 'm';
      charArray0[3] = 'X';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'^', ':', 'm', 'X', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'^', ':', 'm', 'X', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'^', ':', 'm', 'X', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      String string0 = jsonReader0.nextString();
      assertEquals("^", string0);
      assertNotNull(string0);
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'^', ':', 'm', 'X', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      StringReader stringReader0 = new StringReader("En<d of in\"$put");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '*';
      charArray0[1] = 'w';
      charArray0[2] = 'T';
      charArray0[3] = 'q';
      charArray0[4] = 'B';
      charArray0[5] = 'o';
      charArray0[6] = '1';
      charArray0[7] = 'K';
      charArray0[8] = 'E';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'*', 'w', 'T', 'q', 'B', 'o', '1', 'K', 'E'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      String string0 = jsonReader0.nextString();
      assertEquals("En<d", string0);
      assertNotNull(string0);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0, 82);
      assertNotNull(pushbackReader0);
      
      JsonReader jsonReader1 = new JsonReader(pushbackReader0);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.isLenient());
      
      try { 
        jsonReader1.nextBoolean();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{\"Ta|");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[3];
      charArray0[1] = '/';
      charArray0[2] = 'G';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '/', 'G'}, charArray0);
      
      int int0 = charArrayReader0.read();
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'\u0000', '/', 'G'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\u0000', '/', 'G'}, charArray0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\u0000', '/', 'G'}, charArray0);
      
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{\"Ta|");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'G';
      charArray0[1] = 'G';
      charArray0[3] = '&';
      charArray0[4] = '&';
      charArray0[5] = '&';
      charArray0[6] = '/';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'G', 'G', '\u0000', '&', '&', '&', '/'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'G', 'G', '\u0000', '&', '&', '&', '/'}, charArray0);
      
      int int0 = charArrayReader1.read();
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(71, int0);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertArrayEquals(new char[] {'G', 'G', '\u0000', '&', '&', '&', '/'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'G', 'G', '\u0000', '&', '&', '&', '/'}, charArray0);
      
      jsonReader0.setLenient(true);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotSame(charArrayReader0, charArrayReader1);
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'G', 'G', '\u0000', '&', '&', '&', '/'}, charArray0);
      
      jsonReader0.skipValue();
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotSame(charArrayReader0, charArrayReader1);
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'G', 'G', '\u0000', '&', '&', '&', '/'}, charArray0);
      
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 7 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{\"Ta|");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'G';
      charArray0[1] = 'G';
      charArray0[2] = '/';
      charArray0[3] = '&';
      charArray0[4] = '&';
      charArray0[5] = '&';
      charArray0[6] = '/';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'G', 'G', '/', '&', '&', '&', '/'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'G', 'G', '/', '&', '&', '&', '/'}, charArray0);
      
      int int0 = charArrayReader1.read();
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(71, int0);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertArrayEquals(new char[] {'G', 'G', '/', '&', '&', '&', '/'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'G', 'G', '/', '&', '&', '&', '/'}, charArray0);
      
      jsonReader0.setLenient(true);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotSame(charArrayReader0, charArrayReader1);
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'G', 'G', '/', '&', '&', '&', '/'}, charArray0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '~';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'~', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'~', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'~', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      String string0 = jsonReader0.nextString();
      assertEquals("~\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'~', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'~', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JsonReader jsonReader1 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.isLenient());
      assertArrayEquals(new char[] {'~', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = jsonReader0.hasNext();
      assertFalse(jsonReader0.equals((Object)jsonReader1));
      assertTrue(boolean0);
      assertNotSame(jsonReader0, jsonReader1);
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'~', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jsonReader1.peeked = 7;
      assertFalse(jsonReader1.isLenient());
      
      boolean boolean1 = jsonReader1.hasNext();
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(jsonReader1, jsonReader0);
      assertFalse(jsonReader1.isLenient());
      assertArrayEquals(new char[] {'~', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a boolean but was END_DOCUMENT at line 1 column 6 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{\"Ta|");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(123, int0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      char[] charArray0 = new char[6];
      charArray0[0] = '!';
      charArray0[1] = 'd';
      charArray0[2] = 'd';
      charArray0[3] = 'K';
      charArray0[4] = '\\';
      charArray0[5] = 'b';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'!', 'd', 'd', 'K', '\\', 'b'}, charArray0);
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.isLenient());
      
      JsonReader jsonReader2 = new JsonReader(stringReader0);
      assertFalse(jsonReader2.equals((Object)jsonReader1));
      assertFalse(jsonReader2.equals((Object)jsonReader0));
      assertNotNull(jsonReader2);
      assertFalse(jsonReader2.isLenient());
      
      try { 
        jsonReader1.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{\"Ta|");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = ';';
      charArray0[1] = 'D';
      charArray0[2] = '\"';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {';', 'D', '\"'}, charArray0);
      
      long long0 = charArrayReader0.skip((-5L));
      assertEquals(0L, long0);
      assertArrayEquals(new char[] {';', 'D', '\"'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      JsonReader jsonReader1 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.isLenient());
      assertArrayEquals(new char[] {';', 'D', '\"'}, charArray0);
      
      try { 
        jsonReader1.hasNext();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected value at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'P';
      charArray0[1] = 'w';
      charArray0[2] = 'w';
      charArray0[3] = '@';
      charArray0[4] = ',';
      charArray0[5] = '`';
      charArray0[6] = '1';
      charArray0[7] = '{';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'P', 'w', 'w', '@', ',', '`', '1', '{'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'P', 'w', 'w', '@', ',', '`', '1', '{'}, charArray0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'P', 'w', 'w', '@', ',', '`', '1', '{'}, charArray0);
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'P', 'w', 'w', '@', ',', '`', '1', '{'}, charArray0);
      
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected value at line 1 column 6 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{\"Ta|");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(123, int0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      char[] charArray0 = new char[6];
      charArray0[1] = 'd';
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.isLenient());
      
      JsonReader jsonReader2 = new JsonReader(stringReader0);
      assertFalse(jsonReader2.equals((Object)jsonReader1));
      assertFalse(jsonReader2.equals((Object)jsonReader0));
      assertNotNull(jsonReader2);
      assertFalse(jsonReader2.isLenient());
      
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{\"Ta|");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '`';
      charArray0[1] = '!';
      charArray0[2] = 'f';
      charArray0[3] = 'S';
      charArray0[4] = '}';
      charArray0[5] = ' ';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'`', '!', 'f', 'S', '}', ' '}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'`', '!', 'f', 'S', '}', ' '}, charArray0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'`', '!', 'f', 'S', '}', ' '}, charArray0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{\"Ta|");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '[';
      charArray0[1] = '.';
      charArray0[2] = '[';
      charArray0[3] = 'w';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'[', '.', '[', 'w'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'[', '.', '[', 'w'}, charArray0);
      
      int int0 = charArrayReader1.read();
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(91, int0);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertArrayEquals(new char[] {'[', '.', '[', 'w'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'[', '.', '[', 'w'}, charArray0);
      
      jsonReader0.setLenient(true);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotSame(charArrayReader0, charArrayReader1);
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'[', '.', '[', 'w'}, charArray0);
      
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated array at line 1 column 4 path $[0]
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }
}
