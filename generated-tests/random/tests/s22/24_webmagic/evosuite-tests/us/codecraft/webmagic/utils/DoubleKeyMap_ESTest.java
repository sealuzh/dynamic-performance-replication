/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 07:18:36 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DoubleKeyMap<Map<Object, Object>, HashMap<Map<Object, Object>, Object>, String> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Object>, HashMap<Map<Object, Object>, Object>, String>();
      DoubleKeyMap<Object, Map<Integer, Map<String, String>>, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Map<Integer, Map<String, String>>, Object>();
      Map<Integer, Map<String, String>> map0 = doubleKeyMap1.newMap();
      DoubleKeyMap<Integer, String, String> doubleKeyMap2 = new DoubleKeyMap<Integer, String, String>(map0);
      Map<Object, Object> map1 = doubleKeyMap2.newMap();
      HashMap<Map<Object, Object>, Object> hashMap0 = new HashMap<Map<Object, Object>, Object>();
      doubleKeyMap0.put(map1, hashMap0, (String) null);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      Map<HashMap<Map<Object, Object>, Object>, String> map2 = doubleKeyMap0.remove((Map<Object, Object>) hashMap1);
      assertFalse(map2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<Object, Map<Integer, Object>> hashMap0 = new HashMap<Object, Map<Integer, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Object>(hashMap0, class0);
      Object object0 = doubleKeyMap0.remove((Object) null, (Integer) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(0);
      HashMap<HashMap<String, Object>, Map<Map<Object, Object>, Integer>> hashMap0 = new HashMap<HashMap<String, Object>, Map<Map<Object, Object>, Integer>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<String, Object>, Map<Object, Object>, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, Map<Object, Object>, Integer>(hashMap0, class0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      DoubleKeyMap<Integer, String, String> doubleKeyMap1 = new DoubleKeyMap<Integer, String, String>((Map<Integer, Map<String, String>>) null);
      Map<Object, Object> map0 = doubleKeyMap1.newMap();
      // Undeclared exception!
      try { 
        doubleKeyMap0.put(hashMap1, map0, integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, String, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, String, Object>((Map<String, Map<String, Object>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>();
      doubleKeyMap0.put((Object) null, (String) null, "");
      String string0 = doubleKeyMap0.put((Object) null, (String) null, (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(1480);
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, String, HashMap<Integer, Object>> doubleKeyMap0 = new DoubleKeyMap<Object, String, HashMap<Integer, Object>>();
      Map<HashMap<Integer, Integer>, Map<Integer, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<HashMap<Integer, Integer>, Integer, String> doubleKeyMap1 = new DoubleKeyMap<HashMap<Integer, Integer>, Integer, String>(map0, class0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      String string0 = doubleKeyMap1.get(hashMap0, integer0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<Object, Map<Map<Object, Object>, String>> hashMap0 = new HashMap<Object, Map<Map<Object, Object>, String>>();
      DoubleKeyMap<Object, Map<Object, Object>, String> doubleKeyMap0 = new DoubleKeyMap<Object, Map<Object, Object>, String>(hashMap0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      doubleKeyMap0.put((Object) null, (Map<Object, Object>) hashMap1, "");
      String string0 = doubleKeyMap0.get((Object) null, (Map<Object, Object>) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<Map<Object, Object>, HashMap<Map<Object, Object>, Object>, String> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Object>, HashMap<Map<Object, Object>, Object>, String>();
      DoubleKeyMap<Object, Map<Integer, Map<String, String>>, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Map<Integer, Map<String, String>>, Object>();
      Map<Integer, Map<String, String>> map0 = doubleKeyMap1.newMap();
      DoubleKeyMap<Integer, String, String> doubleKeyMap2 = new DoubleKeyMap<Integer, String, String>(map0);
      Map<Object, Object> map1 = doubleKeyMap2.newMap();
      String string0 = doubleKeyMap0.remove(map1, (HashMap<Map<Object, Object>, Object>) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, HashMap<Object, Integer>, Integer> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, HashMap<Object, Integer>, Integer>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleKeyMap<Map<Object, Object>, HashMap<Map<Object, Object>, Object>, String> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Object>, HashMap<Map<Object, Object>, Object>, String>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Map<HashMap<Map<Object, Object>, Object>, String> map0 = doubleKeyMap0.remove((Map<Object, Object>) hashMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleKeyMap<Integer, Object, HashMap<Object, String>> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, HashMap<Object, String>>();
      Integer integer0 = new Integer(1480);
      Map<Object, HashMap<Object, String>> map0 = doubleKeyMap0.get(integer0);
      assertNull(map0);
  }
}
