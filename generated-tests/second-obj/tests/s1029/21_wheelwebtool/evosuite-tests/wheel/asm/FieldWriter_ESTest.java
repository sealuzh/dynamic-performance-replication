/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 14:38:02 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ObjectStreamConstants;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassReader;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;
import wheel.asm.Frame;
import wheel.asm.Label;
import wheel.asm.MethodWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "HV41emGM#", "", "HV41emGM#", "HV41emGM#");
      ClassWriter classWriter1 = new ClassWriter(0);
      classWriter0.newFloat(1);
      ByteVector byteVector0 = new ByteVector(2);
      byteVector0.putInt(0);
      ByteVector byteVector1 = byteVector0.putInt(1);
      fieldWriter0.put(byteVector1);
      fieldWriter0.visitEnd();
      AnnotationVisitor annotationVisitor0 = fieldWriter0.visitAnnotation("The array of names must not be null", false);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1523);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "The filter must not be null", "The filter must not be null", (String) null, "The filter must not be null");
      fieldWriter0.getSize();
      FieldWriter fieldWriter1 = classWriter0.firstField;
      // Undeclared exception!
      try { 
        fieldWriter0.visitAnnotation((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      ClassWriter classWriter0 = new ClassWriter((-648));
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = ClassReader.RESIZE;
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1), "Aw[@X/cnZAx6*>.", "wruHQNB5ny=FXeL", "wruHQNB5ny=FXeL", "wruHQNB5ny=FXeL");
      ByteVector byteVector0 = new ByteVector(812);
      ByteVector byteVector1 = new ByteVector();
      byteVector1.putShort((-2328));
      ByteVector byteVector2 = new ByteVector();
      byteVector1.putInt(15);
      fieldWriter0.put(byteVector0);
      fieldWriter0.visitAnnotation("wruHQNB5ny=FXeL", false);
      int int0 = fieldWriter0.getSize();
      assertEquals(48, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1523);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "", "X$0!HG*&!cpH", "", "");
      fieldWriter0.getSize();
      fieldWriter0.visitEnd();
      classWriter0.newClass("B+|");
      fieldWriter0.getSize();
      Attribute attribute0 = new Attribute("X$0!HG*&!cpH");
      fieldWriter0.visitAttribute(attribute0);
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "HV4+1emGM#", "", "HV4+1emGM#", "HV4+1emGM#");
      ClassWriter classWriter1 = new ClassWriter(0);
      classWriter1.newMethod("HV4+1emGM#", "Synthetic", "V?9J_gjN#`C<@6^4XM", true);
      classWriter0.newFloat(1);
      int int0 = Frame.INTEGER;
      ByteVector byteVector0 = new ByteVector(2);
      ByteVector byteVector1 = byteVector0.putInt(0);
      byteVector1.length = 1;
      fieldWriter0.put(byteVector1);
      fieldWriter0.visitAnnotation("`oKxxt", false);
      fieldWriter0.put(byteVector1);
      assertSame(byteVector0, byteVector1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "HV41emGM#", "", "HV41emGM#", "HV41emGM#");
      fieldWriter0.getSize();
      classWriter0.newFloat(0.0F);
      classWriter0.newNameType("L", "");
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, 8, "", "", "HV41emGM#", "HV41emGM#");
      ByteVector byteVector0 = new ByteVector(2);
      byteVector0.putShort(2);
      Attribute attribute0 = new Attribute("");
      fieldWriter1.visitAttribute(attribute0);
      assertFalse(fieldWriter1.equals((Object)fieldWriter0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1523);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "The filter must not be null", "The filter must not be null", (String) null, "The filter must not be null");
      classWriter0.newFloat(0.0F);
      classWriter0.newNameType("", "The filter must not be null");
      FieldWriter fieldWriter1 = classWriter0.firstField;
      ByteVector byteVector0 = new ByteVector(8);
      ByteVector byteVector1 = byteVector0.putShort((-1118));
      byteVector1.put11(8, 8);
      Attribute attribute0 = new Attribute("The filter must not be null");
      fieldWriter1.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-648));
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = ClassReader.RESIZE;
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-648), "Aw[@X/cnZAx6*>.", "wruHQNB5ny=FXeL", "wruHQNB5ny=FXeL", "wruHQNB5ny=FXeL");
      ByteVector byteVector0 = new ByteVector(812);
      ByteVector byteVector1 = byteVector0.putInt(1849);
      byteVector1.putShort((-2328));
      ByteVector byteVector2 = new ByteVector();
      byteVector1.putInt(15);
      fieldWriter0.put(byteVector0);
      fieldWriter0.visitAnnotation("wruHQNB5ny=FXeL", true);
      int int0 = fieldWriter0.getSize();
      assertEquals(48, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1523);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "The filter must not be null", "The filter must not be null", (String) null, "The filter must not be null");
      int int0 = Frame.UNINITIALIZED_THIS;
      FieldWriter fieldWriter1 = classWriter0.firstField;
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = byteVector0.putShort((-1118));
      fieldWriter0.put(byteVector1);
      ByteVector byteVector2 = byteVector0.putInt(2);
      ByteVector byteVector3 = new ByteVector();
      ByteVector byteVector4 = new ByteVector();
      fieldWriter0.put(byteVector2);
      System.setCurrentTimeMillis((-1118));
      int int1 = fieldWriter1.getSize();
      assertEquals(16, int1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "HV4+1emGM#", "", "HV4+1emGM#", "HV4+1emGM#");
      ClassWriter classWriter1 = new ClassWriter(0);
      int int0 = Frame.UNINITIALIZED;
      classWriter0.newFloat(1);
      int int1 = Frame.INTEGER;
      ByteVector byteVector0 = new ByteVector(2);
      ByteVector byteVector1 = byteVector0.putInt(0);
      byteVector1.length = 1;
      fieldWriter0.put(byteVector1);
      fieldWriter0.visitAnnotation("`oKxxt", true);
      fieldWriter0.put(byteVector1);
      assertSame(byteVector1, byteVector0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1523);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "The filter must not be null", "The filter must not be null", (String) null, "The filter must not be null");
      classWriter0.newFloat(0.0F);
      classWriter0.newNameType("", "The filter must not be null");
      FieldWriter fieldWriter1 = classWriter0.firstField;
      ByteVector byteVector0 = new ByteVector(8);
      ByteVector byteVector1 = byteVector0.putShort((-1118));
      Attribute attribute0 = new Attribute("The filter must not be null");
      fieldWriter1.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      MethodWriter methodWriter0 = classWriter0.firstMethod;
      classWriter0.firstMethod = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      classWriter0.newFloat(0.0F);
      boolean boolean0 = ClassReader.RESIZE;
      Label label0 = new Label();
      Object object0 = label0.info;
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1172, "50P1|8V;);&tI", "lGhNCQj", "", (Object) null);
      fieldWriter0.visitAnnotation("Code", true);
      System.setCurrentTimeMillis(1172);
      fieldWriter0.getSize();
      Attribute attribute0 = new Attribute("");
      fieldWriter0.visitAttribute(attribute0);
      assertTrue(attribute0.isUnknown());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1523);
      classWriter0.newFloat(0.0F);
      classWriter0.newNameType("", "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 3, "", "", (String) null, (Object) null);
      ByteVector byteVector0 = new ByteVector(1);
      byteVector0.putInt(16777218);
      ByteVector byteVector1 = byteVector0.putShort(251);
      byteVector1.putInt(4096);
      fieldWriter0.visitAnnotation("", true);
      System.setCurrentTimeMillis(0L);
      fieldWriter0.getSize();
      fieldWriter0.put(byteVector1);
      assertSame(byteVector0, byteVector1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      classWriter0.newMethod("", "", "Code", true);
      boolean boolean0 = ClassReader.RESIZE;
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1), "Aw[@X/cnZAx6*>.", "wruHQNB5ny=FXeL", "cZBZ\"Z6B*QziIv", "wruHQNB5ny=FXeL");
      ByteVector byteVector0 = new ByteVector(812);
      ByteVector byteVector1 = byteVector0.putInt(4096);
      byteVector0.putShort(251);
      byteVector0.putInt(1);
      byteVector0.putInt(2);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "cZBZ\"Z6B*QziIv";
      stringArray0[2] = "cZBZ\"Z6B*QziIv";
      stringArray0[3] = "Aw[@X/cnZAx6*>.";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      classWriter0.visit(251, 10, "wruHQNB5ny=FXeL", "", "", stringArray0);
      FieldWriter fieldWriter1 = classWriter0.firstField;
      fieldWriter1.put(byteVector1);
      fieldWriter0.visitAnnotation("RuntimeInvisibleAnnotations", true);
      ByteVector byteVector2 = new ByteVector();
      fieldWriter1.put(byteVector2);
      fieldWriter1.visitAnnotation("", true);
      int int0 = fieldWriter1.getSize();
      assertEquals(46, int0);
  }
}
