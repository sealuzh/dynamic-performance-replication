/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 23 23:18:44 GMT 2019
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.util.Enumeration;
import okio.Buffer;
import okio.ByteString;
import okio.HashingSink;
import okio.HashingSource;
import okio.Pipe;
import okio.RealBufferedSource;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteString_ESTest extends ByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      ByteString byteString1 = byteString0.sha1();
      ByteString byteString2 = byteString0.hmacSha512(byteString1);
      String string0 = byteString2.toString();
      assertEquals("[hex=04da782d0baafb421853abd95589cb44e3c1027bf53e5767184ac292419be702aa082f459213a437ccc8745b8024984514469f6932ff62cea6437ce6e1af976d]", string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("charset == null");
      byteString0.hashCode();
      byteString0.hashCode();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = ByteString.encodeUtf8("/");
      ByteString byteString1 = ByteString.of(byteArray0);
      boolean boolean0 = byteString1.equals(byteString0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("Expected leading [0-9a-fA-F] character but was %#x", charset0);
      ByteString byteString1 = byteString0.toAsciiUppercase();
      assertNotSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("Sz");
      ByteString byteString1 = byteString0.toAsciiUppercase();
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)12;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha512();
      ByteString byteString2 = byteString1.toAsciiLowercase();
      assertNotSame(byteString2, byteString1);
      assertFalse(byteString2.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("Wh");
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte)65;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)65}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      try { 
        ByteString.read(bufferedInputStream0, 319);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("ff");
      assertEquals(1, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("ars^lN{:dYuLzMJF");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: r
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1633);
      ByteString byteString0 = ByteString.of(byteBuffer0);
      String string0 = byteString0.base64();
      // Undeclared exception!
      try { 
        ByteString.decodeHex(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: =
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = ByteString.of(byteArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("GUpM9:jGNdO%S@R-;");
      byteString0.write(mockPrintStream0);
      assertEquals(1, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("eL");
      String string0 = byteString0.utf8();
      assertEquals("eL", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("Expected leading [0-9] or '-' character but was %#x");
      ByteString byteString1 = byteString0.EMPTY.toAsciiLowercase();
      byte[] byteArray0 = byteString1.toByteArray();
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      ByteString byteString1 = byteString0.substring(0);
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("charset == null");
      int int0 = byteString0.size();
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1633);
      ByteString byteString0 = ByteString.of(byteBuffer0);
      int int0 = byteString0.lastIndexOf(byteArray0, 55);
      assertEquals(55, int0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("kLi7|v@rq/2-%");
      byte[] byteArray0 = new byte[0];
      int int0 = byteString0.lastIndexOf(byteArray0);
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = ByteString.decodeHex("");
      int int0 = byteString0.lastIndexOf(byteString1, (int) (byte)32);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      ByteString byteString1 = byteString0.md5();
      int int0 = byteString1.lastIndexOf(byteString0);
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ByteString byteString0 = new ByteString((byte[]) null);
      byte[] byteArray0 = byteString0.internalArray();
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      ByteString byteString1 = byteString0.md5();
      byte[] byteArray0 = byteString1.internalArray();
      assertEquals(16, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.indexOf(byteArray0, (-31));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      int int0 = byteString0.indexOf(byteArray0);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(75);
      ByteString byteString1 = ByteString.of(byteBuffer0);
      int int0 = byteString1.indexOf(byteString0, 69);
      assertEquals(69, int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha512();
      int int0 = byteString0.indexOf(byteString1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = ByteString.of(byteArray0);
      byte byte0 = byteString0.getByte(0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("kLi7|v@rq/2-%");
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(5);
      ByteString byteString1 = ByteString.of(byteBuffer0);
      boolean boolean0 = byteString0.endsWith(byteString1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("00");
      assertEquals(1, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = ByteString.codePointIndexToCharIndex("^nTZq;l~Ki$", 322);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("delegate == null");
      String string0 = byteString0.base64Url();
      assertEquals("ZGVsZWdhdGUgPT0gbnVsbA==", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      Buffer buffer0 = new Buffer();
      byteString0.write(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("ars^lN{:dYuLzMJF", charset0);
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = byteString0.startsWith(byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      ByteString byteString1 = ByteString.EMPTY;
      boolean boolean0 = byteString0.EMPTY.startsWith(byteString1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ByteString byteString0 = ByteString.read(sequenceInputStream0, (byte)0);
      assertEquals(0, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = byteString0.rangeEquals((int) (byte) (-78), byteArray0, (-930), (int) (byte)0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = byteString0.rangeEquals(91, byteArray0, (int) (byte)0, (int) (byte) (-78));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      boolean boolean0 = byteString0.rangeEquals(113, (byte[]) null, (int) (byte) (-78), (int) (byte) (-78));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = ByteString.of(byteArray0);
      boolean boolean0 = byteString0.rangeEquals(0, byteString0, 0, 0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      boolean boolean0 = byteString0.rangeEquals(100, byteString0, (-1), 1600);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("Expected leading [0-9] or '-' character but was %#x");
      boolean boolean0 = byteString0.EMPTY.rangeEquals((-754), byteString0, 1185, (-549));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, 2, (-1147));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=2 byteCount=-1147
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteString byteString0 = ByteString.of(byteArray0, 0, 0);
      assertEquals(0, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, (-1), (int) (byte)44);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=6 offset=-1 byteCount=44
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("endIndex > string.length: ");
      byte[] byteArray0 = new byte[6];
      int int0 = byteString0.lastIndexOf(byteArray0, (int) (byte)0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000000L);
      Source source0 = pipe0.source();
      HashingSource hashingSource0 = HashingSource.sha1(source0);
      ByteString byteString0 = hashingSource0.hash();
      byte[] byteArray0 = new byte[0];
      int int0 = byteString0.lastIndexOf(byteArray0, (-754));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      byte[] byteArray0 = new byte[0];
      int int0 = byteString0.lastIndexOf(byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Pipe pipe0 = new Pipe(2653L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      int int0 = byteString0.EMPTY.lastIndexOf(byteString0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      int int0 = byteString0.lastIndexOf(byteString0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("kLi7|v@rq/2-%");
      byte[] byteArray0 = new byte[0];
      int int0 = byteString0.indexOf(byteArray0, 30);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      int int0 = byteString0.indexOf(byteString0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("Wh");
      int int0 = byteString0.indexOf(byteString0, (-1074));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      int int0 = byteString0.indexOf(byteString0, 1302);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("");
      int int0 = byteString0.indexOf(byteString0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("delegate == null");
      ByteString byteString1 = byteString0.hmacSha1(byteString0);
      assertNotSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      byte byte0 = byteString0.getByte(0);
      assertEquals((byte) (-44), byte0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      boolean boolean0 = byteString0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("endIndex > string.length: ");
      Object object0 = new Object();
      boolean boolean0 = byteString0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("", charset0);
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = byteString0.endsWith(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      boolean boolean0 = byteString0.endsWith(byteString0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = ByteString.codePointIndexToCharIndex("wLz|", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = ByteString.codePointIndexToCharIndex("ga pmJ[tL!", (-738));
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = ByteString.codePointIndexToCharIndex("", 1464);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("offset=%s > size=%s");
      // Undeclared exception!
      try { 
        byteString0.write((Buffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      // Undeclared exception!
      try { 
        byteString0.startsWith((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      // Undeclared exception!
      try { 
        byteString0.startsWith((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        ByteString.read(pipedInputStream0, 1257);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = ByteString.of(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.rangeEquals(65, (ByteString) null, 798, 798);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      // Undeclared exception!
      try { 
        byteString0.EMPTY.lastIndexOf((byte[]) null, 90);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("", charset0);
      // Undeclared exception!
      try { 
        byteString0.lastIndexOf((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("/");
      // Undeclared exception!
      try { 
        byteString0.lastIndexOf((ByteString) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.lastIndexOf((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      // Undeclared exception!
      try { 
        byteString0.indexOf((byte[]) null, (int) (byte) (-68));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("Expected leading [0-9a-fA-F] characte] but was 1#x", charset0);
      // Undeclared exception!
      try { 
        byteString0.indexOf((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.hmacSha512((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      // Undeclared exception!
      try { 
        byteString0.hmacSha512(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = ByteString.of(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.hmacSha256((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("kLi7|v@rq/2-%");
      byte[] byteArray0 = new byte[0];
      ByteString byteString1 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.hmacSha256(byteString1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("|AV>w", charset0);
      // Undeclared exception!
      try { 
        byteString0.hmacSha1((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("/");
      // Undeclared exception!
      try { 
        byteString0.getByte((-1338));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1338
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("", charset0);
      // Undeclared exception!
      try { 
        byteString0.endsWith((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("ars^lN{:dYuLzMJF", charset0);
      // Undeclared exception!
      try { 
        byteString0.endsWith((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteString byteString0 = ByteString.of(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.compareTo((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.codePointIndexToCharIndex((String) null, 1040);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = ByteString.of(byteArray0);
      int int0 = byteString0.lastIndexOf(byteArray0, (int) (byte)22);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1633);
      ByteString byteString0 = ByteString.of(byteBuffer0);
      int int0 = byteString0.indexOf(byteArray0, (int) (byte)71);
      assertEquals(71, int0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("endIndex > string.length: ");
      byte[] byteArray0 = new byte[6];
      int int0 = byteString0.indexOf(byteArray0, 18);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("ars^lN{:dYuLzMJF", charset0);
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = byteString0.rangeEquals(38, byteArray0, 160, (-139));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = byteString0.rangeEquals(11, byteArray0, 91, (-753));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = byteString0.rangeEquals(0, byteArray0, 39, 65);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("");
      ByteString byteString1 = byteString0.substring(0, 0);
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.substring(41, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("/");
      String string0 = byteString0.hex();
      assertEquals("2f7f", string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      int int0 = byteString0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("Expected leading [0-9] or '-' character but was %#x");
      byte[] byteArray0 = byteString0.toByteArray();
      assertEquals(51, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)13;
      ByteString byteString0 = ByteString.of(byteArray0);
      String string0 = byteString0.toString();
      assertEquals("[hex=410d0000000000]", string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)10;
      ByteString byteString0 = ByteString.of(byteArray0);
      String string0 = byteString0.toString();
      assertEquals("[hex=68680a00000000]", string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1633);
      ByteString byteString0 = ByteString.of(byteBuffer0);
      String string0 = byteString0.toString();
      assertEquals("[size=1633 hex=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\u2026]", string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      String string0 = byteString0.toString();
      assertEquals("[size=0]", string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(5);
      ByteString byteString0 = ByteString.of(byteBuffer0);
      ByteString byteString1 = ByteString.of(byteBuffer0);
      int int0 = byteString0.compareTo(byteString1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("endIndex > string.length: ");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-66);
      ByteString byteString1 = ByteString.of(byteArray0);
      int int0 = byteString0.compareTo(byteString1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("endIndex > string.length: ");
      byte[] byteArray0 = new byte[6];
      ByteString byteString1 = ByteString.of(byteArray0);
      int int0 = byteString0.compareTo(byteString1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("endIndex > string.length: ");
      int int0 = byteString0.compareTo(byteString0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      ByteString byteString1 = ByteString.decodeHex("");
      boolean boolean0 = byteString1.equals(byteString0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("endIndex > string.length: ");
      byte[] byteArray0 = new byte[6];
      ByteString byteString1 = ByteString.of(byteArray0);
      boolean boolean0 = byteString0.equals(byteString1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      boolean boolean0 = byteString0.equals(byteString0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("charset == null");
      byte[] byteArray0 = new byte[8];
      int int0 = byteString0.indexOf(byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      byte[] byteArray0 = new byte[5];
      int int0 = byteString0.indexOf(byteArray0, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("ars^lN{:dYuLzMJF", charset0);
      ByteString byteString1 = byteString0.md5();
      boolean boolean0 = byteString1.equals(byteString0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("kLi7|v@rq/2-%");
      ByteString byteString1 = byteString0.md5();
      boolean boolean0 = byteString0.startsWith(byteString1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = ByteString.of(byteArray0);
      boolean boolean0 = byteString0.rangeEquals((int) (byte)13, byteArray0, (int) (byte) (-29), (int) (byte) (-75));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("d'kD^");
      // Undeclared exception!
      try { 
        byteString0.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("Expected leading [0-9] or '-' character but was %#x");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        byteString0.write(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("kLi7|v@rq/2-%");
      ByteString byteString1 = byteString0.substring(0, 0);
      assertEquals(0, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("Expected leading [0-9] or '-' character but ws %#x");
      ByteString byteString1 = byteString0.substring(18, 18);
      assertEquals(0, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      // Undeclared exception!
      try { 
        byteString0.substring(120);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("", charset0);
      // Undeclared exception!
      try { 
        byteString0.substring(5, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(0)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      // Undeclared exception!
      try { 
        byteString0.substring((-413));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("ars^lN{:dYuLzMJF", charset0);
      ByteString byteString1 = byteString0.toAsciiUppercase();
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("/");
      ByteString byteString1 = byteString0.toAsciiUppercase();
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      ByteString byteString1 = byteString0.toAsciiUppercase();
      assertEquals(0, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("[size=0]");
      ByteString byteString1 = byteString0.toAsciiUppercase();
      ByteString byteString2 = byteString1.toAsciiLowercase();
      assertNotSame(byteString2, byteString1);
      assertTrue(byteString2.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      // Undeclared exception!
      try { 
        ByteString.read(sequenceInputStream0, (-1226));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1226
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.read((InputStream) null, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteString.read(byteArrayInputStream0, 5);
      assertEquals(2, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("9BG=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: G
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("A'6h4-xb");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: '
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("_D/>bC4tmu9E4#p");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: _D/>bC4tmu9E4#p
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hex == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      // Undeclared exception!
      try { 
        byteString0.substring((-3634), (-3634));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("Nhread in,Qterrupted");
      ByteString byteString1 = byteString0.sha1();
      String string0 = byteString1.toString();
      assertEquals("[hex=387b5df921d4fce88d81aa5bf538eb9fc8fbc2be]", string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      String string0 = byteString0.hex();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("h0=g0&sJm<jn=/?-qq");
      assertNull(byteString0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeBase64((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // base64 == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      assertNotNull(byteString0);
      
      ByteString byteString1 = byteString0.md5();
      int int0 = byteString0.compareTo(byteString1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteString byteString0 = ByteString.of(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.string((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("", charset0);
      String string0 = byteString0.string(charset0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("Expected leading [0-9] or '-' character but was %#x");
      byteString0.equals("Expected leading [0-9] or '-' character but was %#x");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ByteString byteString1 = byteString0.EMPTY.toAsciiLowercase();
      Object object0 = new Object();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      String string0 = byteString0.toString();
      assertEquals("[text=Expected leading [0-9] or '-' character but was %#x]", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-12);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[3] = (byte)82;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-12);
      byteArray1[1] = (byte)82;
      byteArray1[2] = (byte)45;
      byteArray1[3] = (byte) (-12);
      byteString1.EMPTY.utf8();
      byteArray1[4] = (byte)45;
      int int0 = byteString1.lastIndexOf(byteArray1);
      assertEquals((-1), int0);
      
      byteArray0[4] = (byte)45;
      ByteString byteString2 = byteString0.md5();
      String string1 = byteString1.utf8();
      assertEquals("", string1);
      
      boolean boolean0 = byteString2.rangeEquals((int) (byte)82, byteString1, (int) (byte)45, (int) (byte) (-12));
      Charset.defaultCharset();
      boolean boolean1 = byteString1.equals("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.encodeString("9}9MRr1#,", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        ByteString.encodeString((String) null, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.encodeUtf8((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.of((ByteBuffer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      ByteString byteString0 = ByteString.of(byteBuffer0);
      Charset charset0 = Charset.defaultCharset();
      String string0 = byteString0.string(charset0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null, 48, 48);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("");
      byte[] byteArray0 = byteString0.internalArray();
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, 854, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=854 byteCount=0
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("kLi7|v@rqO/2-%");
      byte byte0 = byteString0.getByte(6);
      assertEquals((byte)64, byte0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("kLi7|v@rq/2-%");
      // Undeclared exception!
      try { 
        byteString0.indexOf((ByteString) null, 861);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("kLi7|v@rqO/2-%");
      Buffer buffer0 = new Buffer();
      byteString0.write(buffer0);
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      ByteString byteString1 = byteString0.substring(0);
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("");
      byte[] byteArray0 = byteString0.internalArray();
      int int0 = byteString0.EMPTY.indexOf(byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      ByteString byteString1 = byteString0.EMPTY.sha256();
      int int0 = byteString0.lastIndexOf(byteString1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      ByteBuffer byteBuffer0 = byteString0.asByteBuffer();
      assertFalse(byteBuffer0.hasArray());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      String string0 = byteString0.base64Url();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      // Undeclared exception!
      try { 
        byteString0.hmacSha1(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      // Undeclared exception!
      try { 
        byteString0.indexOf((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("charset == null");
      int int0 = byteString0.EMPTY.lastIndexOf(byteString0, (int) (byte) (-29));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("kLi7|v@rq/2-%");
      ByteString byteString1 = byteString0.hmacSha256(byteString0);
      assertEquals(32, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("");
      String string0 = byteString0.base64();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("ars^lN{:dYuLzMJF", charset0);
      byte[] byteArray0 = new byte[7];
      boolean boolean0 = byteString0.EMPTY.startsWith(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("");
      byte[] byteArray0 = byteString0.internalArray();
      assertNotNull(byteArray0);
      
      boolean boolean0 = byteString0.endsWith(byteArray0);
      assertTrue(boolean0);
  }
}
