/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 15:17:43 GMT 2018
 */

package org.apache.bcel.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.util.regex.Pattern;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.Code;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.Field;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.LineNumberTable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.RuntimeInvisibleParameterAnnotations;
import org.apache.bcel.util.Class2HTML;
import org.apache.bcel.util.ClassPath;
import org.apache.bcel.util.ClassPathRepository;
import org.apache.bcel.util.MemorySensitiveClassPathRepository;
import org.apache.bcel.util.SyntheticRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Class2HTML_ESTest extends Class2HTML_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class2HTML.toHTML("~!I+}i)rg/P2O7_x");
      Class2HTML.toHTML("<A HREF=\"");
      Class2HTML.toHTML("<A HREF=\"");
      Class2HTML.toHTML("F");
      Class2HTML.toHTML("F");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      try { 
        Class2HTML.main(stringArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "c";
      Class2HTML.toHTML("c");
      Class2HTML.toHTML("c");
      Class2HTML.referenceType("</FONT>");
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      Class2HTML class2HTML0 = new Class2HTML(javaClass0, "c");
      // Undeclared exception!
      try { 
        Class2HTML.referenceClass((byte)1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected class `CONSTANT_Class' at index 1 and got CONSTANT_Utf8[1](\"org/evosuite/runtime/mock/java/time/chrono/MockJapaneseDate\")
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassPath classPath0 = new ClassPath("...");
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance(classPath0);
      JavaClass javaClass0 = syntheticRepository0.loadClass("java.time.temporal.TemporalAdjuster");
      Class2HTML class2HTML0 = new Class2HTML(javaClass0, "_cp.html\"\n MARGINWIDTH=\"0\" MARGINHEIGHT=\"0\" FRAMEBORDER=\"1\" SCROLLING=\"AUTO\">\n<FRAME NAME=\"Attributes\" SRC=\"");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class2HTML.toHTML("3mCp,D>-0K: :&5");
      String[] stringArray0 = new String[7];
      stringArray0[0] = ",&n(sp;";
      stringArray0[1] = "-?M*(I|";
      stringArray0[2] = "3mCp,D>-0K: :&5";
      stringArray0[3] = ",&n(sp;";
      stringArray0[4] = ",&n(sp;";
      stringArray0[5] = "3mCp,D&gt;-0K: :&5";
      stringArray0[6] = "3mCp,D&gt;-0K: :&5";
      try { 
        Class2HTML.main(stringArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Pattern.quote("<A HREF=\"java.io.BufferedInputStream_cp.html#cp2\" TARGET=ConstantPool>IOException</A>");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-Y";
      Class2HTML.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Pattern.quote("~!I+}i)rg/P2O7_x");
      ClassPath classPath0 = new ClassPath("Q~!I+}i)rg/P2O7_xE");
      Class2HTML.toHTML("java.lang.Integer");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "java.lang.Integer";
      stringArray0[1] = "java.lang.Integer";
      stringArray0[2] = "-d";
      stringArray0[3] = "char";
      // Undeclared exception!
      try { 
        Class2HTML.main(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.Class2HTML", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-d";
      stringArray0[1] = "-d";
      Class2HTML.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-d";
      stringArray0[1] = "-d";
      stringArray0[2] = "-d";
      stringArray0[3] = "<A HREF=\"java.io.BufferedInputStream_cp.html#cp2\" TARGET=ConstantPool>IOException</A>";
      stringArray0[4] = "<A HREF=\"java.io.BufferedInputStream_cp.html#cp2\" TARGET=ConstantPool>IOException</A>";
      stringArray0[5] = "-d";
      stringArray0[6] = "-d";
      try { 
        Class2HTML.main(stringArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Class2HTML.main(stringArray0);
      String string0 = Class2HTML.toHTML("_code.html\"\n MARGINWIDTH=0 MARGINHEIGHT=0 FRAMEBORDER=1 SCROLLING=\"AUTO\">\n<FRAME NAME=\"Methods\" SRC=\"");
      assertEquals("_code.html\"\\n MARGINWIDTH=0 MARGINHEIGHT=0 FRAMEBORDER=1 SCROLLING=\"AUTO\"&gt;\\n&lt;FRAME NAME=\"Methods\" SRC=\"", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassPath classPath0 = new ClassPath("class");
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classPathRepository0.loadClass(class0);
      javaClass0.setClassName("class");
      Class2HTML class2HTML0 = new Class2HTML(javaClass0, "class");
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "-zip";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-zip");
      Class2HTML.referenceType("-zip");
      Class2HTML.referenceType("g");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "<A HREF=\"-zip.html\" TARGET=_top>-zip</A>";
      stringArray0[1] = "-zip";
      stringArray0[2] = "<A HREF=\"-zip.html\" TARGET=_top>-zip</A>";
      stringArray0[3] = "g";
      try { 
        Class2HTML.main(stringArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // <A HREF=\"-zip.html\" TARGET=_top>-zip</A> (No such file or directory)
         //
         verifyException("java.util.zip.ZipFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "<A HREF=\"java.io.BufferedInputStream_cp.html#cp2\" TARGET=ConstantPool>IOException</A>";
      FileSystemHandling.shouldAllThrowIOExceptions();
      Pattern.quote("c&{yFd%oTQp");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "<A HREF=\"java.io.BufferedInputStream_cp.html#cp2\" TARGET=ConstantPool>IOException</A>";
      stringArray0[1] = "-d";
      stringArray0[2] = "<A HREF=\"java.io.BufferedInputStream_cp.html#cp2\" TARGET=ConstantPool>IOException</A>/";
      stringArray0[3] = "-d";
      // Undeclared exception!
      try { 
        Class2HTML.main(stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.bcel.util.Class2HTML", e);
      }
  }
}
