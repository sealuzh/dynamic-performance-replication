/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 09:20:22 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.CharClass;
import com.google.re2j.CharGroup;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharClass_ESTest extends CharClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[4];
      CharClass charClass0 = new CharClass(intArray0);
      charClass0.appendLiteral((-1309), 297);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[8];
      int[][] intArray1 = new int[0][2];
      CharClass charClass0 = new CharClass(intArray0);
      charClass0.appendTableWithSign(intArray1, 1599);
      charClass0.appendNegatedTable(intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 1114111}, intArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 2482;
      intArray0[1] = (-242);
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendRange(2482, 8192);
      CharClass.charClassToString(intArray0, (-242));
      int[][] intArray1 = new int[2][7];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      charClass1.appendTable(intArray1);
      String string0 = charClass1.toString();
      assertArrayEquals(new int[] {2482, (-242), 0, 0}, intArray0);
      assertEquals("[0x9b2-0xffffff0e 0x0 0x9b2-0x2000]", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[3];
      intArray0[0] = 2482;
      intArray0[1] = (-242);
      intArray0[2] = (-242);
      CharClass charClass1 = new CharClass(intArray0);
      int[] intArray1 = new int[7];
      intArray1[1] = 2482;
      intArray1[2] = 2482;
      intArray1[3] = 2482;
      int[][] intArray2 = new int[5][9];
      intArray2[0] = intArray0;
      intArray2[1] = intArray0;
      intArray2[2] = intArray1;
      intArray2[3] = intArray0;
      charClass0.negateClass();
      intArray2[4] = intArray0;
      CharClass charClass2 = charClass0.appendTable(intArray2);
      CharClass charClass3 = charClass2.negateClass();
      assertSame(charClass3, charClass2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[8];
      int[][] intArray1 = new int[0][2];
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      CharClass charClass1 = charClass0.appendNegatedTable(intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 1114111}, intArray0);
      
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 1325);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 148;
      intArray0[1] = 66517;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {148, 66517}, intArray0);
      
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1166;
      intArray0[1] = 2;
      intArray0[2] = 64;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {1166, 2, 64}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign(intArray0, (-1297));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 2482;
      CharClass charClass1 = new CharClass(intArray0);
      assertFalse(charClass1.equals((Object)charClass0));
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {2482, 0, 0, 0}, intArray0);
      
      CharClass charClass2 = charClass0.cleanClass();
      assertNotSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertNotSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertFalse(charClass0.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass1));
      assertNotNull(charClass2);
      
      int[][] intArray1 = new int[1][5];
      intArray1[0] = intArray0;
      CharClass charClass3 = charClass0.appendNegatedTable(intArray1);
      assertNotSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertNotSame(charClass3, charClass1);
      assertFalse(charClass0.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass1));
      assertNotNull(charClass3);
      
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 2482);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 2493;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {2493, 0, 0, 0}, intArray0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {0, 2492, 1, 1114111}, intArray0);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {0, 1114111, 1, 1114111}, intArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, 32);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      
      String string0 = charClass1.toString();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals("[]", string0);
      assertNotNull(string0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[4];
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[4];
      CharClass charClass1 = charClass0.appendRange(2482, 2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.appendLiteral(32, (-3444));
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass1.negateClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass0.cleanClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertNotNull(charClass4);
      
      // Undeclared exception!
      try { 
        charClass1.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 2482;
      intArray0[1] = 2482;
      intArray0[2] = 2482;
      intArray0[2] = 2482;
      intArray0[4] = 2482;
      intArray0[5] = 2482;
      intArray0[6] = 2482;
      intArray0[7] = 2482;
      CharClass charClass1 = new CharClass(intArray0);
      assertFalse(charClass1.equals((Object)charClass0));
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {2482, 2482, 2482, 0, 2482, 2482, 2482, 2482}, intArray0);
      
      CharClass charClass2 = charClass0.negateClass();
      assertNotSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertNotSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertFalse(charClass0.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass1));
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass1.cleanClass();
      assertNotSame(charClass1, charClass0);
      assertNotSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertNotSame(charClass3, charClass0);
      assertNotSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass1.equals((Object)charClass2));
      assertFalse(charClass3.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass2));
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {2482, 2482, 2482, 2482, 2482, 2482, 2482, 0}, intArray0);
      
      int[][] intArray1 = new int[2][7];
      intArray1[0] = intArray0;
      charClass0.appendNegatedTable(intArray1);
      CharClass charClass4 = charClass1.appendFoldedClass(intArray0);
      charClass4.appendLiteral(intArray0[1], intArray0[2]);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[7];
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass0.cleanClass();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 461;
      intArray0[1] = 461;
      intArray0[3] = 815;
      intArray0[4] = 64;
      intArray0[5] = (-2);
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {461, 461, 0, 815, 64, (-2)}, intArray0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {0, 815, 64, (-2), 461, 461}, intArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = 2482;
      int[] intArray0 = new int[4];
      intArray0[0] = 2482;
      CharClass charClass1 = new CharClass(intArray0);
      assertFalse(charClass1.equals((Object)charClass0));
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {2482, 0, 0, 0}, intArray0);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertSame(charClass1, charClass2);
      assertNotSame(charClass1, charClass0);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass0));
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {0, 0, 2482, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 451);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendFoldedRange(79, 79);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      int[] intArray0 = new int[0];
      CharClass charClass3 = charClass2.appendClassWithSign(intArray0, 79);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass4 = charClass3.appendRange(79, 79);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = (-1090);
      CharClass charClass1 = charClass0.appendRange((-1090), (-1090));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.appendFoldedRange((-1091), 65);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass1.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass0.appendFoldedRange((-3894), (-1270));
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertNotNull(charClass4);
      
      // Undeclared exception!
      try { 
        charClass2.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[1][6];
      int[] intArray1 = new int[4];
      intArray1[0] = 103;
      intArray1[1] = 504;
      intArray1[2] = 0;
      intArray1[3] = 250;
      intArray0[0] = intArray1;
      charClass0.appendNegatedTable(intArray0);
      int[] intArray2 = null;
      charClass0.appendFoldedClass(intArray2);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign((int[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 128238;
      intArray0[1] = 128238;
      intArray0[2] = 128317;
      intArray0[3] = 4185;
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, 128238);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {128238, 128238, 128317, 4185}, intArray0);
      
      int[][] intArray1 = new int[6][6];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      int[] intArray2 = new int[8];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 66639;
      intArray2[1] = 128238;
      intArray2[2] = 128238;
      CharClass charClass2 = charClass0.appendNegatedClass(intArray0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertNotSame(intArray0, intArray2);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {128238, 128238, 128317, 4185}, intArray0);
      
      int[] intArray3 = charClass0.toArray();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray2);
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      assertNotNull(intArray3);
      assertArrayEquals(new int[] {0, 128316, 4186, 1114111}, intArray3);
      
      CharClass charClass3 = new CharClass(intArray0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(charClass3.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass2));
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {128238, 128238, 128317, 4185}, intArray0);
      
      CharClass charClass4 = charClass2.appendLiteral(4560, 66639);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertNotSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray3);
      assertSame(charClass4, charClass0);
      assertNotSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertFalse(charClass2.equals((Object)charClass3));
      assertFalse(charClass0.equals((Object)charClass3));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(charClass4.equals((Object)charClass3));
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {128238, 128238, 128317, 4185}, intArray0);
      
      CharClass charClass5 = charClass0.appendFoldedClass(intArray2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertNotSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertNotSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray3);
      assertFalse(charClass0.equals((Object)charClass3));
      assertFalse(charClass5.equals((Object)charClass3));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray3));
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {66639, 128238, 128238, 0, 0, 0, 0, 0}, intArray2);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[][] intArray1 = new int[5][5];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      int int0 = (-4102);
      // Undeclared exception!
      try { 
        charClass1.appendTableWithSign(intArray1, (-4102));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[4];
      CharClass charClass1 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      intArray0[3] = 250;
      CharClass charClass2 = charClass1.appendLiteral(0, 250);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = 128247;
      int[] intArray0 = new int[3];
      intArray0[0] = 128247;
      intArray0[1] = 128247;
      intArray0[2] = 128247;
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int[] intArray0 = new int[4];
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {1, 1114111, 0, 0}, intArray0);
      
      CharClass charClass2 = charClass0.appendFoldedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {0, 1114111, 0, 0}, intArray0);
      
      CharClass charClass3 = charClass0.appendClassWithSign(intArray0, (-2338));
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {0, 1114111, 0, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 1364;
      intArray0[1] = (-417);
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {1364, (-417), 0, 0, 0, 0, 0, 0}, intArray0);
      
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {1364, (-417), 0, 0, 0, 0, 0, 0}, intArray0);
      
      int[] intArray1 = charClass1.toArray();
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {1364, (-417), 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {1364, (-417), 0, 0, 0, 0, 0, 0, 1364, (-417)}, intArray1);
      
      String string0 = CharClass.charClassToString(intArray1, (-417));
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals("[]", string0);
      assertNotNull(string0);
      assertArrayEquals(new int[] {1364, (-417), 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {1364, (-417), 0, 0, 0, 0, 0, 0, 1364, (-417)}, intArray1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 1563;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0, 1563}, intArray0);
      
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      
      int[] intArray1 = charClass0.toArray();
      assertSame(intArray0, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      assertArrayEquals(new int[] {0, 1114111}, intArray1);
      
      String string0 = charClass1.toString();
      assertSame(intArray0, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals("[0x0-0x10ffff]", string0);
      assertNotNull(string0);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      
      CharClass charClass2 = charClass0.appendFoldedRange(1114111, 4);
      assertSame(intArray0, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      
      CharClass charClass3 = charClass1.appendClassWithSign(intArray1, (-1));
      assertSame(intArray0, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(intArray1, intArray0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      assertArrayEquals(new int[] {0, 1114111}, intArray1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 2482;
      CharClass charClass1 = new CharClass(intArray0);
      assertFalse(charClass1.equals((Object)charClass0));
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {2482, 0, 0, 0}, intArray0);
      
      CharClass charClass2 = charClass1.negateClass();
      assertNotSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertNotSame(charClass2, charClass0);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass0));
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {0, 2481, 1, 1114111}, intArray0);
      
      int[][] intArray1 = new int[4][9];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      CharClass charClass3 = charClass1.appendNegatedTable(intArray1);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertNotSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass0));
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {0, 2481, 1, 1114111}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass0.appendGroup((CharGroup) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[4];
      intArray0[2] = 1121;
      CharClass charClass1 = new CharClass(intArray0);
      assertFalse(charClass1.equals((Object)charClass0));
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {0, 0, 1121, 0}, intArray0);
      
      CharClass charClass2 = charClass0.cleanClass();
      assertSame(charClass0, charClass2);
      assertNotSame(charClass0, charClass1);
      assertNotSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertFalse(charClass0.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass1));
      assertNotNull(charClass2);
      
      int[][] intArray1 = new int[1][8];
      intArray1[0] = intArray0;
      CharClass charClass3 = charClass1.negateClass();
      assertSame(charClass1, charClass3);
      assertNotSame(charClass1, charClass0);
      assertNotSame(charClass1, charClass2);
      assertNotSame(charClass3, charClass0);
      assertNotSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass1.equals((Object)charClass2));
      assertFalse(charClass3.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass2));
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {1, 1120, 1, 1114111}, intArray0);
      
      CharClass charClass4 = charClass0.appendTableWithSign(intArray1, 1114111);
      assertSame(charClass0, charClass2);
      assertNotSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertNotSame(charClass0, charClass1);
      assertSame(charClass4, charClass0);
      assertNotSame(charClass4, charClass1);
      assertNotSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertFalse(charClass0.equals((Object)charClass3));
      assertFalse(charClass0.equals((Object)charClass1));
      assertFalse(charClass4.equals((Object)charClass1));
      assertFalse(charClass4.equals((Object)charClass3));
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass3.appendLiteral(1121, 1);
      assertSame(charClass1, charClass3);
      assertNotSame(charClass1, charClass4);
      assertNotSame(charClass1, charClass0);
      assertNotSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertNotSame(charClass3, charClass4);
      assertNotSame(charClass3, charClass0);
      assertNotSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass5, charClass3);
      assertNotSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertNotSame(charClass5, charClass2);
      assertNotSame(charClass5, charClass4);
      assertFalse(charClass1.equals((Object)charClass4));
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass1.equals((Object)charClass2));
      assertFalse(charClass3.equals((Object)charClass4));
      assertFalse(charClass3.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass2));
      assertFalse(charClass5.equals((Object)charClass0));
      assertFalse(charClass5.equals((Object)charClass2));
      assertFalse(charClass5.equals((Object)charClass4));
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {1, 1120, 1, 1114111}, intArray0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 2482;
      CharClass charClass1 = new CharClass(intArray0);
      assertFalse(charClass1.equals((Object)charClass0));
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {2482, 0, 0, 0}, intArray0);
      
      CharClass charClass2 = charClass1.negateClass();
      assertSame(charClass1, charClass2);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertNotSame(charClass2, charClass0);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass0));
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {0, 2481, 1, 1114111}, intArray0);
      
      CharClass charClass3 = charClass2.cleanClass();
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertNotSame(charClass2, charClass0);
      assertNotSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass0));
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {0, 1114111, 1, 1114111}, intArray0);
      
      int[][] intArray1 = new int[4][9];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      CharClass charClass4 = charClass1.appendNegatedTable(intArray1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertNotSame(charClass1, charClass0);
      assertNotSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass4.equals((Object)charClass0));
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {0, 1114111, 1, 1114111}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass0.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = 2482;
      int[] intArray0 = new int[4];
      intArray0[0] = 2482;
      CharClass charClass1 = new CharClass(intArray0);
      assertFalse(charClass1.equals((Object)charClass0));
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {2482, 0, 0, 0}, intArray0);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertSame(charClass1, charClass2);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertNotSame(charClass2, charClass0);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass0));
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {0, 0, 2482, 0}, intArray0);
      
      CharClass charClass3 = charClass1.negateClass();
      assertSame(charClass1, charClass2);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass2);
      assertNotSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass0));
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {1, 2481, 1, 1114111}, intArray0);
      
      String string0 = charClass3.toString();
      assertSame(charClass1, charClass2);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass2);
      assertNotSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass0));
      assertEquals("[0x1-0x9b1 0x1-0x10ffff]", string0);
      assertNotNull(string0);
      assertArrayEquals(new int[] {1, 2481, 1, 1114111}, intArray0);
      
      CharClass charClass4 = charClass2.appendRange(2482, 1);
      assertSame(charClass1, charClass2);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertNotSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass4.equals((Object)charClass0));
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {1, 2481, 1, 1114111}, intArray0);
      
      int[][] intArray1 = new int[1][5];
      intArray1[0] = intArray0;
      CharClass charClass5 = charClass3.appendNegatedTable(intArray1);
      assertSame(charClass1, charClass2);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass3, charClass2);
      assertNotSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertNotSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass0));
      assertFalse(charClass5.equals((Object)charClass0));
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {1, 2481, 0, 1114111}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass4.appendGroup((CharGroup) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }
}
