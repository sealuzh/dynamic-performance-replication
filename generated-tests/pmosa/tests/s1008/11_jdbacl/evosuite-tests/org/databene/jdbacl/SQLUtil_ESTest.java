/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 11:13:04 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileDescriptor;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.io.StringWriter;
import java.time.chrono.ThaiBuddhistDate;
import java.time.temporal.ChronoUnit;
import java.time.temporal.TemporalUnit;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import org.apache.derby.diag.ErrorMessages;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.sql.execute.ConstantActionActivation;
import org.databene.commons.AssertionError;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBProcedure;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.jdbc.jdbcClob;
import org.hsqldb.lib.FileUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "OR";
      SQLUtil.mutatesStructure("OR");
      SQLUtil.parseColumnTypeAndSize(",ha%.vzg@*]i'D!z#`");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("BfO{y");
      // Undeclared exception!
      try { 
        DBDataType.getInstance("lPYV6ZIl:=2AUhb(r ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SQLUtil.removeComments("");
      DBSchema dBSchema0 = new DBSchema("UQ's6maX%-QNr4`");
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("create");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("alter materialized viewrn(a5d*");
      String string0 = SQLUtil.removeComments("36z");
      assertEquals("36z", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SQLUtil.removeComments("[H+[9g`:");
      Boolean boolean0 = SQLUtil.mutatesStructure("[H+[9g`:");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SQLUtil.removeComments("");
      DBSchema dBSchema0 = new DBSchema("UQ's6maX%-QNr4`");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" remove", dBSchema0);
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SQLUtil.isDDL("rN(A5D*");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "rN(A5D*";
      stringArray0[1] = "rN(A5D*";
      stringArray0[2] = "|,mE(cvL=8o{'1";
      stringArray0[3] = "";
      stringArray0[4] = "rN(A5D*";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      jdbcClob jdbcClob0 = new jdbcClob("O");
      Reader reader0 = jdbcClob0.getCharacterStream();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      SQLUtil.renderNumber(streamTokenizer0);
      DBSchema dBSchema0 = new DBSchema("create materialized view");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      String[] stringArray1 = new String[9];
      stringArray1[0] = "create materialized view";
      stringArray1[1] = "create materialized view";
      stringArray1[2] = "- 0";
      stringArray1[3] = "";
      stringArray1[4] = "rN(A5D* = 'rN(A5D*' AND rN(A5D* = 'rN(A5D*' AND |,mE(cvL=8o{'1 = '|,mE(cvL=8o{'1' AND  = '' AND rN(A5D* = 'rN(A5D*'";
      stringArray1[5] = "O";
      stringArray1[6] = "- 0";
      stringArray1[7] = "}*";
      stringArray1[8] = null;
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'null' has no foreign key with the columns (create materialized view, create materialized view, - 0, , rN(A5D* = 'rN(A5D*' AND rN(A5D* = 'rN(A5D*' AND |,mE(cvL=8o{'1 = '|,mE(cvL=8o{'1' AND  = '' AND rN(A5D* = 'rN(A5D*', O, - 0, }*, )
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<k*pe");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
      
      String string1 = SQLUtil.removeComments("- 0");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "v]Sb_>SEa%+G";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("v]Sb_>SEa%+G = 'v]Sb_>SEa%+G'", string0);
      
      String string1 = SQLUtil.leftJoin("inner", stringArray0, "_7S.?ArI7tg$OH%V@", "_7S.?ArI7tg$OH%V@", stringArray0);
      assertEquals("left join _7S.?ArI7tg$OH%V@ as _7S.?ArI7tg$OH%V@ on inner.v]Sb_>SEa%+G = _7S.?ArI7tg$OH%V@.v]Sb_>SEa%+G", string1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VersionNumber versionNumber0 = VersionNumber.valueOf("create tablealter session");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("?", "create tablealter session", versionNumber0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      String string0 = SQLUtil.renderValue(mockMinguoDate0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "";
      SQLUtil.isDML("");
      String string1 = "";
      SQLUtil.isDML("");
      SQLUtil sQLUtil0 = new SQLUtil();
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, (-3142L));
      stringBuilder1.insert(0, (CharSequence) stringBuilder0);
      // Undeclared exception!
      try { 
        stringBuilder1.insert((-434), (-1.0F));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -434
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SQLUtil.removeComments("U");
      DBSchema dBSchema0 = new DBSchema("UQ's6maX%-QNr4`");
      boolean boolean0 = SQLUtil.isDML("U");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = new Integer(305);
      Integer.getInteger("K", integer1);
      Integer.divideUnsigned((-1297), (-1297));
      Integer.getInteger("K", (-1297));
      SQLUtil.substituteMarkers("K", "K", integer0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((DBColumn[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "t^i|#2sP<&mpBNL", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT t^i|#2sP<&mpBNL UNIQUE ()", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "delete", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "";
      VersionNumber versionNumber0 = VersionNumber.valueOf("");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("", "", versionNumber0);
      defaultDatabase0.getTable("", false);
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VersionNumber versionNumber0 = VersionNumber.valueOf("7UgtJV}[|&V9");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("7UgtJV}[|&V9", " join ", versionNumber0);
      String string0 = SQLUtil.typeAndName(defaultDatabase0);
      assertEquals("database 7UgtJV}[|&V9", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(161, "uq's6max%-qnr4`");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("call", (DBTable) null, dBDataType0);
      defaultDBColumn0.equals((Object) null);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("call UQ'S6MAX%-QNR4` NULL", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "create unique index03 xrx9tuce,*=&\r");
      SQLUtil.isQuery("1M0.1");
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("7RVmNE)l", stringBuilder0);
      assertEquals("7RVmNE)l", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("_G`-]U0t)]q");
      SQLUtil.addRequiredCondition("_G`-]U0t)]q", stringBuilder0);
      assertEquals("_G`-]U0t)]q and _G`-]U0t)]q", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "^Mg^$/Ju", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT ^Mg^$/Ju UNIQUE ()", string0);
      
      String string1 = SQLUtil.ownerDotComponent(dBPrimaryKeyConstraint0);
      assertEquals("null.^Mg^$/Ju", string1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-!f";
      stringArray0[1] = "-!f";
      stringArray0[2] = "-!f";
      stringArray0[3] = "-!f";
      stringArray0[4] = "-!f";
      stringArray0[5] = "-!f";
      String string0 = SQLUtil.join("-!f", "-!f", stringArray0, "[lZk6n8BdKV8DBF", "-!f", stringArray0);
      assertEquals("-!f join [lZk6n8BdKV8DBF as -!f on -!f.-!f = -!f.-!f and -!f.-!f = -!f.-!f and -!f.-!f = -!f.-!f and -!f.-!f = -!f.-!f and -!f.-!f = -!f.-!f and -!f.-!f = -!f.-!f", string0);
      
      SQLUtil.renderColumnNames(stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "-!f", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("ssK", false, dBPrimaryKeyConstraint0);
      dBUniqueIndex0.getTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.pkSpec(dBPrimaryKeyConstraint1, nameSpec0);
      assertEquals("PRIMARY KEY (-!f, -!f, -!f, -!f, -!f, -!f)", string1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SQLUtil.removeComments("");
      DBSchema dBSchema0 = new DBSchema("UQ's6maX%-QNr4`");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" remove", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance(1782, "j^6a");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, (Integer) null);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("J^6A", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "<S\"Om@I_]oI?u\\uC=#y";
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure(string0);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = null;
      String string0 = "-!f";
      // Undeclared exception!
      try { 
        SQLUtil.join((String) null, "f=[5J9|19s}3'[ Lg", (String[]) null, "-!f", "-!f", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "[lZk6n8BdKV8DBF";
      stringArray0[2] = "[lZk6n8BdKV8DBF";
      stringArray0[3] = "";
      stringArray0[4] = "[lZk6n8BdKV8DBF";
      stringArray0[5] = "[lZk6n8BdKV8DBF";
      stringArray0[6] = "[lZk6n8BdKV8DBF";
      stringArray0[7] = "@";
      stringArray0[8] = "";
      String string0 = SQLUtil.join("[lZk6n8BdKV8DBF", "[lZk6n8BdKV8DBF", stringArray0, "truncate", "@", stringArray0);
      assertEquals("[lZk6n8BdKV8DBF join truncate as @ on [lZk6n8BdKV8DBF. = @. and [lZk6n8BdKV8DBF.[lZk6n8BdKV8DBF = @.[lZk6n8BdKV8DBF and [lZk6n8BdKV8DBF.[lZk6n8BdKV8DBF = @.[lZk6n8BdKV8DBF and [lZk6n8BdKV8DBF. = @. and [lZk6n8BdKV8DBF.[lZk6n8BdKV8DBF = @.[lZk6n8BdKV8DBF and [lZk6n8BdKV8DBF.[lZk6n8BdKV8DBF = @.[lZk6n8BdKV8DBF and [lZk6n8BdKV8DBF.[lZk6n8BdKV8DBF = @.[lZk6n8BdKV8DBF and [lZk6n8BdKV8DBF.@ = @.@ and [lZk6n8BdKV8DBF. = @.", string0);
      
      SQLUtil.renderColumnNames(stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "NCLOB", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("xrfznzf_e;#B", false, dBPrimaryKeyConstraint0);
      dBUniqueIndex0.getTable();
      DBDataType dBDataType0 = DBDataType.getInstance(1782, "ssK");
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = new Integer(1782);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0, integer1);
      String string1 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("SSK(1782)", string1);
      
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string2 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT NCLOB UNIQUE (, [lZk6n8BdKV8DBF, [lZk6n8BdKV8DBF, , [lZk6n8BdKV8DBF, [lZk6n8BdKV8DBF, [lZk6n8BdKV8DBF, @, )", string2);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = ",";
      String[] stringArray0 = new String[3];
      stringArray0[0] = ",";
      stringArray0[1] = ",";
      String[] stringArray1 = new String[1];
      stringArray1[0] = ", ";
      SQLUtil.renderWhereClause(stringArray1, stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, ",", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((-658));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "DATE";
      String string1 = "setBinaryStream(";
      DBSchema dBSchema0 = new DBSchema("setBinaryStream(");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("DATE", dBSchema0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "setBinaryStream(";
      SQLUtil.isQuery("DATE");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("setBinaryStream(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: setBinaryStream(
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SQLUtil.isQuery("create materialized view");
      SQLUtil.parseColumnTypeAndSize("LDiYIvEg");
      StringBuilder stringBuilder0 = new StringBuilder("");
      StringBuilder stringBuilder1 = new StringBuilder("create materialized view");
      StringBuilder stringBuilder2 = stringBuilder0.reverse();
      SQLUtil.addRequiredCondition("create materialized view", stringBuilder2);
      assertEquals("create materialized view", stringBuilder2.toString());
      assertEquals("create materialized view", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SQLUtil.removeComments("");
      DBSchema dBSchema0 = new DBSchema("UQ's6maX%-QNr4`");
      boolean boolean0 = SQLUtil.isQuery("d]|VCQI]FKv+(-");
      boolean boolean1 = SQLUtil.isDDL("UQ's6maX%-QNr4`");
      assertTrue(boolean1 == boolean0);
      
      String string0 = SQLUtil.ownerDotComponent(dBSchema0);
      assertEquals("UQ's6maX%-QNr4`", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(2721, "DES/CBC/NoPadding");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = Integer.getInteger("DES/CBC/NoPadding", integer0);
      Integer integer2 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("DES/CBC/NoPadding", defaultDBTable0, dBDataType0, integer1, integer2);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DBDataType.getInstance(2721, "DES/CBC/NoPadding");
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("DES/CBC/NoPadding", defaultDBTable0, (-2159), "create materialized viewinto");
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("DES/CBC/NoPadding, DES/CBC/NoPadding", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = ",";
      String[] stringArray0 = new String[3];
      stringArray0[0] = ",";
      String[] stringArray1 = new String[1];
      SQLUtil.renderWhereClause(stringArray1, stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, stringArray0[1], true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((-658));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SQLUtil.mutatesStructure("BH%M7&pFG%.1?7qXCcO");
      SQLUtil.normalize("BH%M7&pFG%.1?7qXCcO", true);
      String string0 = "ZoOx\\dA~Mfe";
      DBTable dBTable0 = null;
      // Undeclared exception!
      try { 
        DBDataType.getInstance("ZoOxdA~Mfe");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.parseColumnTypeAndSize("3");
      String string0 = SQLUtil.normalize("3", true);
      assertEquals("3", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = SQLUtil.normalize("d\"TKV8R\"J:_#L30", true);
      assertEquals("d \"TKV8R\" J : _ # L30", string0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "<FxB*M$>lZE5i%w:~/[";
      stringArray0[1] = "d \"TKV8R\" J : _ # L30";
      stringArray0[2] = "d \"TKV8R\" J : _ # L30";
      stringArray0[3] = "<FxB*M$>lZE5i%w:~/[";
      stringArray0[4] = "d \"TKV8R\" J : _ # L30";
      stringArray0[5] = "d\"TKV8R\"J:_#L30";
      stringArray0[6] = "d\"TKV8R\"J:_#L30";
      String string1 = SQLUtil.leftJoin("d\"TKV8R\"J:_#L30", stringArray0, "h&EAN+;3", "getSQLXML(String)", stringArray0);
      assertEquals("left join h&EAN+;3 as getSQLXML(String) on d\"TKV8R\"J:_#L30.<FxB*M$>lZE5i%w:~/[ = getSQLXML(String).<FxB*M$>lZE5i%w:~/[ and d\"TKV8R\"J:_#L30.d \"TKV8R\" J : _ # L30 = getSQLXML(String).d \"TKV8R\" J : _ # L30 and d\"TKV8R\"J:_#L30.d \"TKV8R\" J : _ # L30 = getSQLXML(String).d \"TKV8R\" J : _ # L30 and d\"TKV8R\"J:_#L30.<FxB*M$>lZE5i%w:~/[ = getSQLXML(String).<FxB*M$>lZE5i%w:~/[ and d\"TKV8R\"J:_#L30.d \"TKV8R\" J : _ # L30 = getSQLXML(String).d \"TKV8R\" J : _ # L30 and d\"TKV8R\"J:_#L30.d\"TKV8R\"J:_#L30 = getSQLXML(String).d\"TKV8R\"J:_#L30 and d\"TKV8R\"J:_#L30.d\"TKV8R\"J:_#L30 = getSQLXML(String).d\"TKV8R\"J:_#L30", string1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SQLUtil.isProcedureCall("user.variant");
      SQLUtil.normalize("user.variant", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        defaultDBTable0.getProvider(3645);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3645, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      VersionNumber versionNumber0 = VersionNumber.valueOf("80000039-00d0_fd77-3e8-000a0a+b1900");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase((String) null, "80000039-00d0_fd77-3e8-000a0a+b1900", versionNumber0);
      String string0 = SQLUtil.typeAndName(defaultDatabase0);
      assertNotNull(string0);
      assertEquals("database null", string0);
      
      String[] stringArray0 = new String[0];
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string1 = SQLUtil.innerJoin("database null", stringArray0, "?,)q|f2GAX1%OHF%q!", "database null", stringArray0);
      assertEquals("?,)q|f2GAX1%OHF%q! as database null on ", string1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "^Mg^$/Ju", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT ^Mg^$/Ju UNIQUE ()", string0);
      
      String string1 = SQLUtil.typeAndName(defaultDBTable0);
      assertNotNull(string1);
      assertEquals("table null", string1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "G x&+Nj)%|Z@^ZI9", true, (String[]) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("CONSTRAINT \"G x&+Nj)%|Z@^ZI9\" ", string0);
      
      String string1 = SQLUtil.renderColumnNames((String[]) null);
      assertEquals("()", string1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("execg]<oe5,@c");
      assertTrue(boolean0);
      
      System.setCurrentTimeMillis(59L);
      String string0 = SQLUtil.normalize("execg]<oe5,@c", false);
      assertEquals("execg ] < oe5, @ c", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "execg]<oe5,@c";
      stringArray0[1] = "execg ] < oe5, @ c";
      stringArray0[2] = "execg]<oe5,@c";
      stringArray0[3] = "execg ] < oe5, @ c";
      stringArray0[4] = "execg]<oe5,@c";
      stringArray0[5] = "execg ] < oe5, @ c";
      stringArray0[6] = "execg ] < oe5, @ c";
      stringArray0[7] = "select into7ugtjv}[|&v9";
      stringArray0[8] = "execg]<oe5,@c";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "execg ] < oe5, @ c", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("execg]<oe5,@c", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(dBTable0, "truncate7ugtjv}[|&v9", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT truncate7ugtjv}[|&v9 PRIMARY KEY (execg]<oe5,@c, execg ] < oe5, @ c, execg]<oe5,@c, execg ] < oe5, @ c, execg]<oe5,@c, execg ] < oe5, @ c, execg ] < oe5, @ c, select into7ugtjv}[|&v9, execg]<oe5,@c)", string1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "create materialized view", true, stringArray0);
      dBUniqueConstraint0.setName("create materialized view");
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("CONSTRAINT \"create materialized view\" ", string0);
      
      System.setCurrentTimeMillis(60L);
      String string1 = SQLUtil.leftJoin("NDiDiyz8tLo!#", stringArray0, "eq(K$;tBdy", (String) null, stringArray0);
      assertEquals("left join eq(K$;tBdy as null on ", string1);
      
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string2 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"create materialized view\" UNIQUE ()", string2);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("-!f");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = null;
      stringArray0[2] = "-!f";
      stringArray0[3] = "-!f";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("", string0);
      
      System.setCurrentTimeMillis(1791L);
      String string1 = SQLUtil.leftJoin("", stringArray0, "-!f", "&_/DzmX*", stringArray0);
      assertEquals("left join -!f as &_/DzmX* on . = &_/DzmX*. and .null = &_/DzmX*.null and .-!f = &_/DzmX*.-!f and .-!f = &_/DzmX*.-!f", string1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SQLUtil.isProcedureCall("drop materialized view-!f");
      SQLUtil.normalize("VQ`oDtK_kV)(c", true);
      StringBuilder stringBuilder0 = new StringBuilder("*:EAX&pp.p%gF8ZW");
      StringBuilder stringBuilder1 = stringBuilder0.insert(10, false);
      SQLUtil.addOptionalCondition("VQ`oDtK_kV)(c", stringBuilder1);
      assertEquals("*:EAX&pp.pfalse%gF8ZW or VQ`oDtK_kV)(c", stringBuilder1.toString());
      assertEquals("*:EAX&pp.pfalse%gF8ZW or VQ`oDtK_kV)(c", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SQLUtil.removeComments("\u0001i");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "\u0001x";
      stringArray0[1] = "\u0001i";
      stringArray0[2] = "\u0001x";
      stringArray0[3] = "\u0001i";
      stringArray0[4] = "\u0001i";
      stringArray0[5] = "\u0001i";
      stringArray0[6] = "\u0001x";
      stringArray0[7] = "\u0001x";
      SQLUtil.renderColumnListWithTableName("\u0001x", stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("CLOB");
      DBSchema dBSchema1 = new DBSchema("CLOB");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("user.v", dBSchema0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("CLOB", dBSchema1);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("=.M@={7Vg_)Pcz,", false, defaultDBTable0, (String[]) null, defaultDBTable1, (String[]) null);
      StringBuilder stringBuilder0 = new StringBuilder("IbR;");
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringWriter stringWriter0 = new StringWriter(873);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      PrintWriter printWriter0 = mockPrintWriter0.format(" parameters ", (Object[]) null);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      assertEquals(" parameters create table user.v (,\n\tFOREIGN KEY () REFERENCES CLOB()\n)", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.normalize("Jv[u #PCW>Mxly?/=L", true);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockFile mockFile0 = new MockFile("Jv [ u  # PCW > Mxly ? / = L");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("w>s{X>3Ds");
      Locale locale0 = Locale.ENGLISH;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "alter materialized view";
      objectArray0[3] = (Object) "Jv[u #PCW>Mxly?/=L";
      objectArray0[4] = (Object) locale0;
      objectArray0[5] = (Object) "Jv[u #PCW>Mxly?/=L";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "w>s{X>3Ds", objectArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "w>s{X>3Ds";
      stringArray0[1] = "Jv[u #PCW>Mxly?/=L";
      stringArray0[2] = "alter materialized view";
      stringArray0[3] = "alter materialized view";
      stringArray0[4] = "Jv[u #PCW>Mxly?/=L";
      stringArray0[5] = "w>s{X>3Ds";
      String string0 = SQLUtil.leftJoin("Jv[u #PCW>Mxly?/=L", stringArray0, "alter materialized view", "^Z D+4LFM<)ATN", stringArray0);
      assertEquals("left join alter materialized view as ^Z D+4LFM<)ATN on Jv[u #PCW>Mxly?/=L.w>s{X>3Ds = ^Z D+4LFM<)ATN.w>s{X>3Ds and Jv[u #PCW>Mxly?/=L.Jv[u #PCW>Mxly?/=L = ^Z D+4LFM<)ATN.Jv[u #PCW>Mxly?/=L and Jv[u #PCW>Mxly?/=L.alter materialized view = ^Z D+4LFM<)ATN.alter materialized view and Jv[u #PCW>Mxly?/=L.alter materialized view = ^Z D+4LFM<)ATN.alter materialized view and Jv[u #PCW>Mxly?/=L.Jv[u #PCW>Mxly?/=L = ^Z D+4LFM<)ATN.Jv[u #PCW>Mxly?/=L and Jv[u #PCW>Mxly?/=L.w>s{X>3Ds = ^Z D+4LFM<)ATN.w>s{X>3Ds", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.ABORT;
      String string0 = SQLUtil.normalize("--", false);
      assertEquals("--", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SQLUtil.removeComments("jW*<");
      String string0 = SQLUtil.normalize("jW*<", true);
      assertEquals("jW * <", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      boolean boolean0 = SQLUtil.isQuery("selectexecuser.variant");
      assertTrue(boolean0);
      
      String string0 = SQLUtil.normalize("selectexecuser.variant", false);
      assertEquals("selectexecuser.variant", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SQLUtil.removeComments("org.h2.engine.SessionRemote");
      boolean boolean0 = SQLUtil.isQuery("select into");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SQLUtil.normalize("Mk[Ie=VZsy4O_O$*Q_J", false);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = "updateBinaryStream(int, InputStream)";
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("updateBinaryStream(int, InputStream)", (DBTable) null, (-1484), "updateBinaryStream(int, InputStream)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"int\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-1328), "<k*pe");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("<k*pe", (DBTable) null, dBDataType0, integer1);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("<K*PE(2)");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(3, "g~");
      Integer integer0 = new Integer(3);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("g~", defaultDBTable0, dBDataType0, integer0, integer0);
      arrayList0.add((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) arrayList0);
      TableContainer tableContainer0 = new TableContainer(" (");
      tableContainer0.getTable("vm^9/PcTbBo\" *Y.Ui");
      DBNotNullConstraint dBNotNullConstraint0 = null;
      try {
        dBNotNullConstraint0 = new DBNotNullConstraint((DBTable) null, "pXZ", true, "vm^9/PcTbBo\" *Y.Ui");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // owner is not supposed to be null
         //
         verifyException("org.databene.commons.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("user.v", dBSchema0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("nqZ4y][L", false, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      StringBuilder stringBuilder0 = new StringBuilder("=.M@={7Vg_)Pcz,");
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      StringWriter stringWriter0 = new StringWriter(879);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      mockPrintWriter0.format("t^#2sp<mpbnl", (Object[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable1, false, nameSpec0, mockPrintWriter0);
      assertEquals("t^#2sp<mpbnlcreate table user.v (\n)", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("HSQLDB.DEFAULT_TABLE_TYPE", (DBSchema) null);
      DBDataType dBDataType0 = DBDataType.getInstance((-228782459), "}<=!LD");
      Integer integer1 = new Integer(1855);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("}<=!LD", defaultDBTable0, dBDataType0, integer1);
      SQLUtil.normalize("5V2", false);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "HSQLDB.DEFAULT_TABLE_TYPE";
      stringArray0[1] = "5V2";
      stringArray0[2] = "5V2";
      stringArray0[3] = "5V2";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("5V2", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.constraintName(dBForeignKeyConstraint0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("SCHEMANAME");
      Locale locale0 = Locale.ENGLISH;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("ID]lO{A\"~${30^");
      DBCatalog dBCatalog0 = new DBCatalog("ID]lO{A\"~${30^");
      DBSchema dBSchema0 = new DBSchema(",gI;i7Nc[R", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Pfd#5e}3,;", dBSchema0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "ID]lO{A\"~${30^";
      stringArray0[1] = ",gI;i7Nc[R";
      stringArray0[2] = "<Vy|l";
      stringArray0[3] = "Pfd#5e}3,;";
      stringArray0[4] = "drop table";
      stringArray0[5] = "ID]lO{A\"~${30^";
      stringArray0[6] = "Pfd#5e}3,;";
      stringArray0[7] = "alter table";
      stringArray0[8] = ",gI;i7Nc[R";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("<Vy|l", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      DBDataType dBDataType0 = DBDataType.getInstance(1870, "H[@+C36*`Xx");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("XIqRC#xik_BLQ=e", defaultDBTable0, dBDataType0, integer0, integer0);
      defaultDBColumn0.getForeignKeyConstraint();
      defaultDBTable0.equals((Object) null);
      StringWriter stringWriter0 = new StringWriter(47);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      mockPrintWriter0.write(47);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("/create table Pfd#5e}3,; (\n\tXIqRC#xik_BLQ=e H[@+C36*`XX(3,3) NULL,\n\tCONSTRAINT <Vy|l FOREIGN KEY (ID]lO{A\"~${30^, ,gI;i7Nc[R, <Vy|l, Pfd#5e}3,;, drop table, ID]lO{A\"~${30^, Pfd#5e}3,;, alter table, ,gI;i7Nc[R) REFERENCES Pfd#5e}3,;(ID]lO{A\"~${30^, ,gI;i7Nc[R, <Vy|l, Pfd#5e}3,;, drop table, ID]lO{A\"~${30^, Pfd#5e}3,;, alter table, ,gI;i7Nc[R)\n)", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "_0)-+=E}";
      stringArray0[3] = "_0)-+=E}";
      stringArray0[4] = "5E$PIqxJL<]u&<";
      stringArray0[5] = "_0)-+=E}";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "_0)-+=E}", false, stringArray0);
      dBUniqueConstraint0.setName(stringArray0[0]);
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("", string0);
      
      StringBuilder stringBuilder0 = new StringBuilder("C1R.buLlpB8SQrC\"R");
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      assertEquals("C1R.buLlpB8SQrC\"R", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("rN(A5D*");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[5];
      stringArray0[4] = "rN(A5D*";
      stringArray0[1] = "rN(A5D*";
      String string0 = SQLUtil.normalize("|,mE(cvL=8o{'1", false);
      assertEquals("|, mE (cvL = 8o { '1'", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("", false, "", " WHERE ");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK  WHERE ", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<k*pe");
      jdbcClob jdbcClob0 = new jdbcClob(";xr\"^$*]Kc+7");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = 3066.91;
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("3066.91", string0);
      
      String string1 = SQLUtil.removeComments("3066.91");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SQLUtil.isQuery("YED@j%XKe-520`L|");
      SQLUtil.normalize("YED@j%XKe-520`L|", false);
      SQLUtil.normalize("YED @ j % XKe - 52  0 ` L |", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "YED @ j % XKe - 52  0 ` L |");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, (String[]) null);
      SQLUtil.constraintName(dBUniqueConstraint0);
      SQLUtil.normalize("/*", false);
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }
}
